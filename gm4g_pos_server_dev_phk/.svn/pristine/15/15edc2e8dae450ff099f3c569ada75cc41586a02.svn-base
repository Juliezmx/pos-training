package app.controller;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Time;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Random;
import java.util.Map.Entry;
import java.util.TreeMap;

import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import app.commonui.FormConfirmBox;
import app.commonui.FormDialogBox;
import externallib.StringLib;
import externallib.Util;
import app.model.*;
import app.AppThreadManager;

public class FuncCheck {
	private static int MAX_SEATS=99;
	
	// Check
	private PosCheck m_oCheck;
	
	// Check table
	private PosCheckTable m_oCheckTable;
	
	// Outlet table
	private PosOutletTable m_oOutletTable;
	
	// Check discount list
	private List<PosCheckDiscount> m_oCheckDiscountList;
	
	// Check Extra Info list
	private ArrayList<PosCheckExtraInfo> m_oCheckExtraInfoList; 
	
	// Check payment list
	private ArrayList<PosCheckPayment> m_oCheckPaymentList;
	
	// Check party list
	private ArrayList<FuncCheckParty> m_oFuncCheckPartyList;
	private FuncCheckParty m_oCurrentFuncCheckParty;
	
	// Tax and Service charge setup
	private HashMap<Integer, PosTaxScType> m_oTaxType;
	private HashMap<Integer, PosTaxScType> m_oScType;
	
	// Process check user id and station id
	private int m_iUserId;
	private int m_iStationId;
	
	// Table no. and extension
	private String m_sTableNo;
	private String m_sTableExtension;
	private String m_sTableName;
	
	// Flag to determine if the table is locked
	private Boolean m_bIsTableLock;
	
	// Last error message
	private String m_sErrorMessage;
	
	// Current Item stock list
	private PosOutletItemList m_oItemStockList;
	
	// Flag to determine if the check is created in fast food mode
	private Boolean m_bFastFoodCheck;
	
	// Flag to determine if the check is a stock delivery invoice
	private Boolean m_bStockDeliveryInvoice;
	private PosStockDeliveryInvoice m_oPosStockDeliveryInvoice;
	
	// URL for last print check
	private String m_sLastPrintCheckUrl;
	
	private boolean m_bModified;
	
	private long m_sCustomerDisplayInfo_DataUpdate_Timestamp;
	private long m_sCustomerDisplayInfo_LastGenInterfaceFile_Timestamp;
	
	// Last release payment void reason ID for void paid check function
	private int m_iLastReleasePaymentVoidReasonId;
	
	// Current check prefix no (only available if it is fastfood mode operation and the check number is generated by station)
	private String m_sCurrentCheckPrefixNo;
	
	private boolean m_bPaymentInterfacePrinting;
	
	//Item and check discount list snap shot for cancel payment
	private List<HashMap<String, String>> m_oItemSnapShotListForPayment;
	
	// Return the error message
	public String getLastErrorMessage(){
		return m_sErrorMessage;
	}
	
	/** list of interested listeners (observers, same thing) */
    private ArrayList<FuncCheckListener> listeners;
    
	/** add a new ModelListener observer for this Model */
    public void addListener(FuncCheckListener listener) {
        listeners.add(listener);
    }
    
    /** remove a ModelListener observer for this Model */
    public void removeListener(FuncCheckListener listener) {
        listeners.remove(listener);
    }
    
    /** remove all ModelListener observer for this Model */
    public void removeAllListener() {
    	listeners.clear();
    }
	
	public FuncCheck(){
		listeners = new ArrayList<FuncCheckListener>();

		// Check
		m_oCheck = new PosCheck(AppGlobal.g_oFuncUser.get().getUserId());
		
		// Outlet table
		m_oOutletTable = new PosOutletTable();
		
		// Check table
		m_oCheckTable = new PosCheckTable();
		
		m_iUserId = AppGlobal.g_oFuncUser.get().getUserId();
		m_iStationId = AppGlobal.g_oFuncStation.get().getStationId();
		
		// Check discount list
		m_oCheckDiscountList = new ArrayList<PosCheckDiscount>();
		m_oCheckPaymentList = new ArrayList<PosCheckPayment>();
		
		// Check Extra Info list
		m_oCheckExtraInfoList = new ArrayList<PosCheckExtraInfo>();
		
		// Check party list
		m_oFuncCheckPartyList = new ArrayList<FuncCheckParty>();
		m_oCurrentFuncCheckParty = new FuncCheckParty();
		m_oFuncCheckPartyList.add(m_oCurrentFuncCheckParty);
		
		m_bIsTableLock = false;
		
		m_bFastFoodCheck = false;
		
		m_bStockDeliveryInvoice = false;
		m_oPosStockDeliveryInvoice = new PosStockDeliveryInvoice();
		
		m_sErrorMessage = "";
		
		m_bModified = false;
		
		m_oItemStockList = new PosOutletItemList();
		
		// Init Customer Display Info TimeStamps
		m_sCustomerDisplayInfo_DataUpdate_Timestamp = 0;
		m_sCustomerDisplayInfo_LastGenInterfaceFile_Timestamp = 0;
		
		m_bPaymentInterfacePrinting = false;
		m_sLastPrintCheckUrl = "";
		m_sTableName = "";
	}
	
	// Check whether the table is locked
	public boolean isTableLocked(){
		return m_bIsTableLock;
	}
	
	// Check whether the check is used by other
	public boolean isInUsedByOthers(){
		if((m_oCheck.getLockStationId() > 0 && m_oCheck.getLockStationId() != AppGlobal.g_oFuncStation.get().getStationId()) || (m_oCheck.getLockUserId() > 0 && m_oCheck.getLockUserId() != AppGlobal.g_oFuncUser.get().getUserId())) {
			FuncStation oUsedStation = new FuncStation();
			if(oUsedStation.loadStationById(m_oCheck.getLockStationId()))
				m_sErrorMessage = AppGlobal.g_oLang.get()._("table_is_locked_by_station")+" "+oUsedStation.getName(AppGlobal.g_oCurrentLangIndex.get());
			return true;
		}else
			return false;
	}
	
	// Check whether this is a old check
	public boolean isOldCheck(){
		if(m_bStockDeliveryInvoice){
			if(m_oPosStockDeliveryInvoice.getSinvId() > 0)
				return true;
			else
				return false;
		}else{		
			if(m_oCheck.getCheckId() > 0)
				return true;
			else
				return false;
		}
	}
	
	// Check whether check is printed
	public boolean isPrinted() {
		if(m_oCheck.getPrintCount() > 0)
			return true;
		else
			return false;
	}
	
	// Check whether check is paid
	public boolean isPaid(boolean bCurrentPartyOnly) {
		if(bCurrentPartyOnly){
			if(!m_oCurrentFuncCheckParty.getCheckParty().isNotPaid())
				return true;
			else
				return false;
		}else{
			if(!m_oCheck.isNotPaid())
				return true;
			else
				return false;
		}
	}
	
	public boolean isTableOccupied(int iOutletId, String sTableNo, String sTableExtension) {
		// Check if table is in use by other station
		m_oOutletTable.readByOutletIdTable(iOutletId, Integer.parseInt(sTableNo), sTableExtension);
		if(m_oOutletTable.getOtblId() != 0) {
			if(m_oOutletTable.getCheckId() > 0){
				m_sErrorMessage = AppGlobal.g_oLang.get()._("table")+ " " + sTableNo + sTableExtension + " " + AppGlobal.g_oLang.get()._("is_occupied_please_select_other_table");
				return true;
			}
		}
		
		return false;
	}
	
	// Set the check is create in fast food mode
	public void setFastFoodCheck(boolean bFastFoodCheck) {
		this.m_bFastFoodCheck = bFastFoodCheck;
	}
	
	// Set the check as stock delivery invoice
	public void setStockDeliveryInvoice(boolean bStockDeliveryInvoice) {
		this.m_bStockDeliveryInvoice = bStockDeliveryInvoice;
	}
	
	// Set the reference check prefix no
	public void setReferenceCheckPrefix(String sCheckPrefixNo) {
		if(AppGlobal.g_oFuncOutlet.get().isGenerateCheckNumByStation())
			this.m_sCurrentCheckPrefixNo = sCheckPrefixNo;
	}
	
	// Check whether check is stock delivery invoice
	public boolean isStockDeliveryInvoice() {
		return this.m_bStockDeliveryInvoice;
	}
	
	public int getLockTableStationIdWithoutLoadCheck(int iOutletId, String sTableNo, String sTableExtension) {		
		int iLockStationId = 0;
		
		// Check if table is in use by other station
		m_oOutletTable.readByOutletIdTable(iOutletId, Integer.parseInt(sTableNo), sTableExtension);
		if(m_oOutletTable.getOtblId() != 0) {
			if(m_oOutletTable.getStationId() > 0){
				iLockStationId = m_oOutletTable.getStationId();
			}
		}
		
		return iLockStationId;
	}
	
	public boolean hasCheckDiscount(boolean bCurrentPartyOnly, boolean bUsedForDiscountOnly) {
		if(bCurrentPartyOnly){
			if(m_oCurrentFuncCheckParty.getPartyCheckDiscount().size() > 0) {
				if(bUsedForDiscountOnly) {
					for(PosCheckDiscount oCheckDiscount: m_oCurrentFuncCheckParty.getPartyCheckDiscount().values()) {
						if(oCheckDiscount.isUsedForDiscount())
							return true;
					}
					
					return false;
				} else
					return true;
			} else
				return false;
		}else{
			for(FuncCheckParty oFuncCheckParty: m_oFuncCheckPartyList) {
				if(oFuncCheckParty.getPartyCheckDiscount().size() > 0) {
					if(bUsedForDiscountOnly) {
						for(PosCheckDiscount oCheckDiscount: oFuncCheckParty.getPartyCheckDiscount().values()) {
							if(oCheckDiscount.isUsedForDiscount())
								return true;
						}
						
						return false;
					} else
						return true;
				}
			}
			return false;
		}
	}
	
	public boolean hasNewItem(boolean bCurrentPartyOnly) {
		boolean bNewItem = false;
		
		if(bCurrentPartyOnly){
			return m_oCurrentFuncCheckParty.hasNewItem();
		}else{
			for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
				if(oFuncCheckParty.hasNewItem())
					bNewItem = true;
			}
			
			return bNewItem;
		}
	}
	
	// Get item code list that is included in provided redeem item list
	public ArrayList<HashMap<String, String>> getOrderedRedeemItemCodeList(ArrayList<String> oDefinedRedeemItem) {
		ArrayList<HashMap<String, String>> oOrderedRedeemItems = new ArrayList<HashMap<String, String>>();
		ArrayList<String> oSelectedRedeemItems = new ArrayList<String>();
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(HashMap<String, String> oRedeemItem:oFuncCheckParty.getOrderedRedeemItemCodeList(oDefinedRedeemItem)){
				
				if(!oSelectedRedeemItems.contains(oRedeemItem.get("code"))) {
					oSelectedRedeemItems.add(oRedeemItem.get("code"));
					oOrderedRedeemItems.add(oRedeemItem);
				}
				
				oOrderedRedeemItems.add(oRedeemItem);
			}
		}
		
		return oOrderedRedeemItems;
	}
	
	// Get the target FuncCheckItem as redeemed item
	public FuncCheckItem getTargetRedeemItemByItemCode(String sItemCode) {
		FuncCheckItem oTargetRedeemItem = null;
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			oTargetRedeemItem = oFuncCheckParty.getTargetRedeemItemByItemCode(sItemCode);
			if(oTargetRedeemItem != null)
				break;
		}
		
		return oTargetRedeemItem;
	}
	
	// Check whether check total is equal to print total
	public boolean isCheckTotalEqualToPrintTotal() {
		PosCheckPrintLog oCheckPrintLog = new PosCheckPrintLog();
		
		//get the latest print check total
		oCheckPrintLog.readLatestByCheckId(m_oCheck.getCheckId());
		if(oCheckPrintLog.getPrintCheckTotal().compareTo(m_oCheck.getCheckTotal()) == 0)
			return true;
		else 
			return false;
	}
	
	// Set cover
	public void setCover(int iCover){
		m_oCheck.setGuests(iCover);
	}
	
	// Get no. of cover
	public int getCover(){
		return m_oCheck.getGuests();
	}
	
	// Set the check open time and do override
	public void setCheckOpenTimeValue(int iOutletId, boolean bNotSetCheckTime) {
		DateTime oCheckOpenLocTime = null, oOrderLocTime = null, oCurrentTime = null;
		String sCheckOpenTime = "", oOrderTime = "";
		
		DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		DateTimeFormatter oTimeFormatter = DateTimeFormat.forPattern("HH:mm:ss");
		
		// Get current time
		oCurrentTime = new DateTime();
		
		// Item order time for new items
		oOrderLocTime = oCurrentTime;
		oOrderTime = formatter.print(oCurrentTime.withZone(DateTimeZone.UTC));
		
		// Get current business period ID
		int iCurrentBusinessPeriodId = AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId();
		
		if(this.isOldCheck()) {
			// Old check
			oCheckOpenLocTime = m_oCheck.getOpenLocTime();
			sCheckOpenTime = m_oCheck.getOpenTime();
			
			m_oCheck.setModifiedLocTime(oCurrentTime);
			m_oCheck.setModifiedTime(formatter.print(oCurrentTime.withZone(DateTimeZone.UTC)));
			m_oCheck.setModifiedUesrId(AppGlobal.g_oFuncUser.get().getUserId());
			m_oCheck.setModifiedStationId(AppGlobal.g_oFuncStation.get().getStationId());
			
		}else if(!bNotSetCheckTime){
			// New check
			oCheckOpenLocTime = oCurrentTime;
			sCheckOpenTime = formatter.print(oCurrentTime.withZone(DateTimeZone.UTC));
		
			// Set check period ID
			m_oCheck.setBusinessPeriod(iCurrentBusinessPeriodId);
		
			// Set open check local time and utc time
			m_oCheck.setOpenLocTime(oCheckOpenLocTime);
			m_oCheck.setOpenTime(sCheckOpenTime);
		}
		
		// Set new item period ID
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList){
			oFuncCheckParty.updateMultipleCheckItemInfoForNewItem(m_oCheck.getBusinessDayId(), iCurrentBusinessPeriodId, m_oCheck.getCheckId(), m_oCheck.getShopId(), iOutletId, oOrderTime, oOrderLocTime);
		}
		
		//check override conditions
		checkOverrideConditions(oTimeFormatter.print(oCurrentTime), oTimeFormatter.print(oCurrentTime), m_oCheckTable.getTable());
		
		//calculate the check first
		calcCheck();

	}
	
	// Lock table function
	// Input: iShopId - Shop ID, iOutletId - Outlet ID, iUserId - User ID, iStationId - Station ID, sTableNo - Table no., sTableExtension - Table extension 
	// Output: Error message - BLANK -> success
	public boolean lockTable(int iBusinessDayId, int iBusinessPeriodId, int iShopId, int iOutletId, String sTableNo, String sTableExtension, boolean bLoadCheck, boolean bSkipLockTable){
		int iCheckId = 0;
		
		m_sErrorMessage = "";
		
		// OM Try to lock table (pos_outlet_tables)
		m_oOutletTable.init();
		this.getAndLockTableWithoutLoadCheck(iShopId, iOutletId, Integer.parseInt(sTableNo), sTableExtension, bSkipLockTable);
		if(m_oOutletTable.getOtblId() != 0) {
			if (m_oOutletTable.getStationId() > 0 && m_oOutletTable.getStationId() != AppGlobal.g_oFuncStation.get().getStationId()) {
				FuncStation oStation = new FuncStation();
				if(oStation.loadStationById(m_oOutletTable.getStationId())){
					String sStationName = oStation.getName(AppGlobal.g_oCurrentLangIndex.get());
					m_sErrorMessage = AppGlobal.g_oLang.get()._("table_is_locked_by_station")+" "+sStationName;
				}else
					m_sErrorMessage = AppGlobal.g_oLang.get()._("table_is_locked_by_station")+" "+m_oOutletTable.getStationId();
				return false;
			}else {
				//update outlet table information
				m_oOutletTable.setStationId(AppGlobal.g_oFuncStation.get().getStationId());
			}
		}
		
		if(m_bStockDeliveryInvoice){
			// Load stock delivery invoice
			// According to the design, table no. = stock delivery invoice record id
			if(m_oPosStockDeliveryInvoice.readById(Integer.parseInt(sTableNo), 1)){
				// Invoice is found
				addOldInvoiceItemToItemList();
			}else{
				if (m_oOutletTable.isVacant()) {
					m_oOutletTable.setStatus(PosOutletTable.STATUS_NEW_TABLE);
					m_oOutletTable.addUpdate(true);
				}
				
				// New invoice
				m_oCheck.setBusinessDayId(iBusinessDayId);
				m_oCheck.setTableId(m_oOutletTable.getOtblId());
				m_oCheck.setShopId(iShopId);
				m_oCheck.setOutletId(iOutletId);
				m_oCheck.setOpenStatId(AppGlobal.g_oFuncStation.get().getStationId());
				
			}
			
		}else{
			// Normal load check
			iCheckId = m_oOutletTable.getCheckId();
			
			// If pos_outlet_tables record does not have check ID, check with pos_checks and pos_check_tables to double check if there is a check in this table
			// Skip checking in fast food mode
			if(iCheckId == 0 && m_bFastFoodCheck == false){
				PosCheck oPosCheck = new PosCheck(AppGlobal.g_oFuncUser.get().getUserId());
				String sResult = oPosCheck.getCheckIdByTable(iBusinessDayId, iOutletId, Integer.parseInt(sTableNo), sTableExtension, 0);
				if (sResult.equals(PosCheck.API_RESULT_SUCCESS) && oPosCheck.getCheckId() > 0) {
					// *********************************************************************************
					// Check is found but not show in floor plan (missing check id in pos_outlet_tables)
					iCheckId = oPosCheck.getCheckId();
					
					// Update back the pos_outlet_tables
					m_oOutletTable.setCheckId(iCheckId);
					if(oPosCheck.getPrintCount() > 0)
						m_oOutletTable.setStatus(PosOutletTable.STATUS_CHECK_PRINTED);
					else
						m_oOutletTable.setStatus(PosOutletTable.STATUS_OCCUPIED);
					m_oOutletTable.addUpdate(true);
					
					// Write a error log!!!
					AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "", AppGlobal.g_oFuncUser.get().getUserId() + "", "ERROR: Missing check in pos_outlet_tables for table: " + sTableNo + sTableExtension + ", check id: " + iCheckId + ", record id: " + m_oOutletTable.getOtblId());
				} else if (sResult.equals(PosCheck.API_RESULT_INVALID_BDAY) || sResult.equals(PosCheck.API_RESULT_MISSING_BDAY)) {
					if(sResult.equals(PosCheck.API_RESULT_INVALID_BDAY))
						m_sErrorMessage = AppGlobal.g_oLang.get()._("invalid_business_day");
					else
						m_sErrorMessage = AppGlobal.g_oLang.get()._("missing_active_business_day");

					String sLogMessage = "";
					if(sResult.equals(PosCheck.API_RESULT_INVALID_BDAY))
						sLogMessage = "Invalid business day";
					else
						sLogMessage = "Daily start has been carried out";
					
					sLogMessage += " [table: "+this.getTableNoWithExtensionForDisplay()+"]";
					
					AppGlobal.writeErrorLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), AppGlobal.g_oFuncStation.get().getStationId()+"", Integer.toString(AppGlobal.g_oFuncUser.get().getUserId()), sLogMessage);

					AppGlobal.startKillSingleStation(AppGlobal.g_oFuncStation.get().getStationId(), AppGlobal.g_oLang.get()._("station_is_killed_by_invalid_business_day"));
					return false;
				}
			}	
			
			if(iCheckId > 0){
				//TODO
				//Check user authority about can recall check or not
				
				// If old check, load the check
				if(bLoadCheck) {
					//check will be locked during load check
					if(loadCheck(iCheckId, false) == false)
						return false;
					
					// Prevent loading paid check
					if(this.isPaid(false)){
						// Not allow to load a paid check
						
						// Update back the pos_outlet_tables
						m_oOutletTable.setCheckId(0);
						m_oOutletTable.setStationId(0);
						m_oOutletTable.setStatus(PosOutletTable.STATUS_VACANT);
						m_oOutletTable.addUpdate(true);
						
						// Write a error log!!!
						AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "", AppGlobal.g_oFuncUser.get().getUserId() + "", "ERROR: Load a paid check for table: " + sTableNo + sTableExtension + ", check id: " + iCheckId);
						m_sErrorMessage = AppGlobal.g_oLang.get()._("cannot_load_the_check");
						return false;
					}
					
					if(AppGlobal.g_oFuncMixAndMatch.get().isSupportMixAndMatch() == true)
						// support mix and match	
						AppGlobal.g_oFuncMixAndMatch.get().getMixAndMatchRule(this);
				}else {
					m_oOutletTable.addUpdate(true);
					m_oCheck.setChksId(m_oOutletTable.getCheckId());
				}
				
			}else{
				if (m_oOutletTable.isVacant()) {
					m_oOutletTable.setStatus(PosOutletTable.STATUS_NEW_TABLE);
					m_oOutletTable.addUpdate(true);
				}
				
				// New check
				m_oCheck.setBusinessDayId(iBusinessDayId);
				m_oCheck.setShopId(iShopId);
				m_oCheck.setOutletId(iOutletId);
				m_oCheck.setOpenStatId(AppGlobal.g_oFuncStation.get().getStationId());
				
			}
		}
		
		// Store the table no. for send check
		/*m_sTableNo = sTableNo;
		m_sTableExtension = sTableExtension;*/

		// Set the lock table flag to true
		m_bIsTableLock = true;
		
		return true;
	}
	
	// Lock check: set chks_lock_stat_id, chks_lock_user_id, chks_lock_time, chks_lock_loctime
	public boolean lockCheck() {
		m_sErrorMessage = "";
		
		DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		m_oCheck.setLockStationId(AppGlobal.g_oFuncStation.get().getStationId());
		m_oCheck.setLockUserId(AppGlobal.g_oFuncUser.get().getUserId());
		m_oCheck.setLockLocTime(new DateTime());
		m_oCheck.setLockTime(formatter.print(m_oCheck.getLockLocTime().withZone(DateTimeZone.UTC)));
		String sResult = this.updateCheck(false, false, 0, 0, false, 0, 0, 0, 0, false, false, false, false, 0, 0, false);

		if(!sResult.equals(PosCheck.API_RESULT_SUCCESS))
			return false;
		
		return true;
	}
	
	// Unlock check: unset chks_lock_stat_id, chks_lock_user_id, chks_lock_time, chks_lock_loctime
	public void unlockCheck() {
		m_oCheck.setLockStationId(0);
		m_oCheck.setLockUserId(0);
		m_oCheck.setLockLocTime(null);
		m_oCheck.setLockTime(null);
		
		this.updateCheck(false, false, 0, 0, false, 0, 0, 0, 0, false, false, false, false, 0, 0, false);
	}
	
	public boolean changeTable(String sTableNo, String sTableExtension, boolean bIsFastfoodMode) {
		int iCheckId = m_oCheck.getCheckId();
		boolean bUpdate = false;		
		String sOriTableNo, sOriTableExtension, sOriTableWithExt = "" , sNewTableWithExt = "";
		PosOutletTable oTargetNewTable = null;
		m_sErrorMessage = "";
		
		if(sTableNo.equals(m_sTableNo) && sTableExtension.equals(m_sTableExtension)) {
			m_sErrorMessage = AppGlobal.g_oLang.get()._("same_table_no");
			return false;
		}
		
		// For fastfood mode, don't lock the table and replace the corresponding table directly
		if(bIsFastfoodMode) {
			m_sTableNo = sTableNo;
			m_sTableExtension = sTableExtension;
			m_oCheckTable.setTable(Integer.parseInt(m_sTableNo));
			m_oCheckTable.setTableExt(sTableExtension);
			return true;
		}
		
		// Try to lock the target table (pos_outlet_tables)
		oTargetNewTable = new PosOutletTable();
		oTargetNewTable.readByOutletIdTable(m_oOutletTable.getOutletId(), Integer.parseInt(sTableNo), sTableExtension);
		if(oTargetNewTable.getOtblId() > 0) {
			if(oTargetNewTable.isNewTable() || oTargetNewTable.isVacant()) {
				//Check whether is it logged by others
				if(oTargetNewTable.getStationId() > 0 && oTargetNewTable.getStationId() != AppGlobal.g_oFuncStation.get().getStationId()) {
					PosStation oLockedStation = new PosStation();
					oLockedStation.readById(oTargetNewTable.getStationId());
					m_sErrorMessage = AppGlobal.g_oLang.get()._("table_is_locked_by_station")+" "+oLockedStation.getName(AppGlobal.g_oCurrentLangIndex.get());
					return false;
				}
				
				//Table available
				oTargetNewTable.setStationId(AppGlobal.g_oFuncStation.get().getStationId());
				if(this.isOldCheck()) {
					oTargetNewTable.setStatus(m_oOutletTable.getStatus());
					oTargetNewTable.setCheckId(m_oCheck.getCheckId());
				}else
					oTargetNewTable.setStatus(PosOutletTable.STATUS_VACANT);
				bUpdate = true;
			}else {
				m_sErrorMessage = AppGlobal.g_oLang.get()._("table_is_already_exist");
				return false;
			}
		}else {
			oTargetNewTable.setShopId(m_oOutletTable.getShopId());
			oTargetNewTable.setOutletId(m_oOutletTable.getOutletId());
			oTargetNewTable.setTable(Integer.parseInt(sTableNo));
			oTargetNewTable.setTableExtension(sTableExtension);
			oTargetNewTable.setStationId(AppGlobal.g_oFuncStation.get().getStationId());
			if(this.isOldCheck()) {
				oTargetNewTable.setCheckId(iCheckId);
				oTargetNewTable.setStatus(m_oOutletTable.getStatus());
			}else
				oTargetNewTable.setStatus(PosOutletTable.STATUS_VACANT);
			bUpdate = false;
		}
		oTargetNewTable.addUpdate(bUpdate);
		
		// Change global table number record
		sOriTableNo = m_sTableNo;
		sOriTableExtension = m_sTableExtension;
		m_sTableNo = sTableNo;
		m_sTableExtension = sTableExtension;
		m_sTableName = AppGlobal.g_oFuncOutlet.get().getTableName(m_sTableNo, m_sTableExtension);
		m_oCheckTable.setTable(Integer.parseInt(m_sTableNo));
		m_oCheckTable.setTableExt(sTableExtension);
		
		//unlock the original outlet table record
		m_oOutletTable.setCheckId(0);
		m_oOutletTable.setStationId(0);
		m_oOutletTable.setStatus(PosOutletTable.STATUS_VACANT);
		m_oOutletTable.addUpdate(true);
		
		//copy the new outlet table to m_oOutletTable
		m_oOutletTable.init();
		m_oOutletTable.copyFromOtherOutletTable(oTargetNewTable);
		
		//print special slip if it is old check
		if(this.isOldCheck()) {
			JSONObject oHeaderJSONObject = new JSONObject(), oInfoJSONObject = new JSONObject(), oTempJSONObject = null;
			JSONArray oTempArray = new JSONArray(), oCitmIdArray = new JSONArray();
			
			try {
				//form header
				oHeaderJSONObject.put("header", "Change Table");
				oTempJSONObject = new JSONObject();
				if (sOriTableNo == null)
					sOriTableNo = "";
				if (sOriTableExtension == null)
					sOriTableExtension = "";
				if (!sOriTableExtension.isEmpty())
					sOriTableWithExt = sOriTableNo+sOriTableExtension;
				else
					sOriTableWithExt = sOriTableNo;
				if (!m_sTableExtension.isEmpty())
					sNewTableWithExt = m_sTableNo+m_sTableExtension;
				else
					sNewTableWithExt = m_sTableNo;
				oTempJSONObject.put("message", sOriTableWithExt+" -> "+sNewTableWithExt);
				oTempArray.put(oTempJSONObject);
				oHeaderJSONObject.put("messages", oTempArray);
				
				//form info
				oInfoJSONObject.put("stationId", AppGlobal.g_oFuncStation.get().getStationId());
				oInfoJSONObject.put("userName", AppGlobal.g_oFuncUser.get().getUserName(1));
				oInfoJSONObject.put("userId", AppGlobal.g_oFuncUser.get().getUserId());
				oInfoJSONObject.put("table", m_sTableNo);
				
				//print special slip "change_table"
				// *****************************************************************
				// Create thread to print special slip
				AppThreadManager oAppThreadManager = new AppThreadManager();
				
				// Add the method to the thread manager
				// Thread 1 : Print special slip
				// Create parameter array
				Object[] oParameters = new Object[5];
				oParameters[0] = "change_table";
				oParameters[1] = oHeaderJSONObject;
				oParameters[2] = oInfoJSONObject;
				oParameters[3] = AppGlobal.g_oCurrentLangIndex.get();
				oParameters[4] = 0;
				oAppThreadManager.addThread(1, m_oCheck, "printSpecialSlip", oParameters);
				
				//print special slip "change_table_item"
				for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
					for(List<FuncCheckItem> oItemListForSingleSeat:oFuncCheckParty.getWholeItemList()){
						for(FuncCheckItem oCheckItem:oItemListForSingleSeat) {
							if(oCheckItem.isOldItem() && !oCheckItem.isPendingItem()) {
								oTempJSONObject = new JSONObject();
								oTempJSONObject.put("id", oCheckItem.getCheckItem().getCitmId());
								oCitmIdArray.put(oTempJSONObject);
							}
						}
					}
				}
				oInfoJSONObject.put("citmIds", oCitmIdArray);
				
				// Thread 2 : Print special slip
				// Create parameter array
				Object[] oParameter2s = new Object[5];
				oParameter2s[0] = "change_table_item";
				oParameter2s[1] = oHeaderJSONObject;
				oParameter2s[2] = oInfoJSONObject;
				oParameter2s[3] = AppGlobal.g_oCurrentLangIndex.get();
				oParameter2s[4] = 0;
				oAppThreadManager.addThread(2, m_oCheck, "printSpecialSlip", oParameter2s);
				
				// Run the thread without wait
				oAppThreadManager.runThread();

			}catch(JSONException jsone) {
				AppGlobal.stack2Log(jsone);
			}
			
			//update pos_check_tables
			PosCheckTable oCheckTable = new PosCheckTable();
			oCheckTable.readByCheckId(m_oOutletTable.getCheckId());
			if(oCheckTable.getCtblId() > 0) {
				oCheckTable.setTable(Integer.parseInt(sTableNo));
				oCheckTable.setTableExt(sTableExtension);
				oCheckTable.addUpdate(true, AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncStation.get().getStationId());
			}
			
			//add "change_table" to action log list
			AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.change_table.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), 0, 0, 0, 0, sOriTableWithExt+" -> "+sNewTableWithExt);
			AppGlobal.g_oActionLog.get().handleActionLog(false);
		}
		
		return true;
	}
	
	public void unlockTable(boolean sSaveCheck, boolean bQuitCheckFunction){
		// Unlock table
		if(m_oOutletTable.getOtblId() == 0)
			return;
		
		// Set the lock table flag to false
		m_bIsTableLock = false;
		
		m_oOutletTable.setStationId(0);
		
		if(sSaveCheck && this.isOldCheck()) {
			// Old check
			m_oCheck.setLockTime("");
			m_oCheck.setLockLocTime(null);
			m_oCheck.setLockUserId(0);
			m_oCheck.setLockStationId(0);
			
			if(bQuitCheckFunction) {
				String sResult = updateCheck(false, true, 2, 0, true, 0, 0, 0, 0, false, false, false, false, 0, 0, false);
				if(!sResult.equals(PosCheck.API_RESULT_SUCCESS)) {
					if(m_sErrorMessage.isEmpty())
						m_sErrorMessage = AppGlobal.g_oLang.get()._("fail_to_save_check");
					return;
				}
			}else {
				String sResult = updateCheck(false, false, 0, 0, true, 0, 0, 0, 0, false, false, false, false, 0, 0, false);
				if(!sResult.equals(PosCheck.API_RESULT_SUCCESS)) {
					if(m_sErrorMessage.isEmpty())
						m_sErrorMessage = AppGlobal.g_oLang.get()._("fail_to_save_check");
					return;
				}
			}
		}else{
			if(!this.isOldCheck())
				m_oOutletTable.setStatus(PosOutletTable.STATUS_VACANT);
			
			// Update outlet table only
			m_oOutletTable.addUpdate(true);
		}
	}
	
	// Load check from OM
	public boolean loadCheck(int iCheckId, boolean bResetValue){
		m_sErrorMessage = "";
		
		if(bResetValue) {
			m_oFuncCheckPartyList.clear();
			m_oCheckDiscountList.clear();
			
			m_oCheck.clearCheckPartyArrayList();
		}
		
		//get check information by checkId
		String sLoadResult = m_oCheck.loadCheckById(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getOutletId(), iCheckId, m_oOutletTable, AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncStation.get().getStationId());
		if(!sLoadResult.equals(PosCheck.API_RESULT_SUCCESS)) {
			String sLogMessage = "";
			boolean bIncorrectBday = false;
			
			if(sLoadResult.equals(PosCheck.API_RESULT_INVALID_BDAY)) {
				sLogMessage = "Invalid business day";
				m_sErrorMessage = AppGlobal.g_oLang.get()._("invalid_business_day");
				bIncorrectBday = true;
			} else if(sLoadResult.equals(PosCheck.API_RESULT_MISSING_BDAY)){
				sLogMessage = "Daily start has been carried out";
				m_sErrorMessage = AppGlobal.g_oLang.get()._("missing_active_business_day");
				bIncorrectBday = true;
			}
			
			if(!m_sErrorMessage.isEmpty())
				m_sErrorMessage += "\n";
			m_sErrorMessage += AppGlobal.g_oLang.get()._("cannot_load_the_check");
			
			sLogMessage += " [table: "+this.getTableNoWithExtensionForDisplay();
			sLogMessage += ", Check: "+iCheckId+"]";
			
			if(bIncorrectBday) {
				AppGlobal.writeErrorLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), AppGlobal.g_oFuncStation.get().getStationId()+"", "", sLogMessage);
				AppGlobal.startKillSingleStation(AppGlobal.g_oFuncStation.get().getStationId(), AppGlobal.g_oLang.get()._("station_is_killed_by_invalid_business_day"));
			}
			
			return false;
		}
		
		// Set guest
		setCover(m_oCheck.getGuests());
		
		//form the check party list
		this.addOldCheckPartyToList();
		
		//form the check discount list
		this.addOldCheckDiscountToList();
		
		//form the check extra info list
		this.addOldCheckExtraInfoToList();
		
		//TODO
		//check synchronize
		
		return true;
	}
	
	public boolean isNewCheckWithNoItem() {
		boolean bRet = true;
		
		if(this.isOldCheck())
			return false;
		
		// Check if item is added or not for new check
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				if(oItemList.size() > 0){
					bRet = false;
					break;
				}
			}
		}
		
		return bRet;
	}
	
	// Call after finish function on items
	public void updateCheckItemsAfterFunction(){
		calcCheck();
		
		if(this.isOldCheck()) {
			// If the check has check discount(s), set all old items is modified for check update
			if(this.hasCheckDiscount(true, false)) {
				for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
					for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
						for (FuncCheckItem oFuncCheckItem:oItemList){
							PosCheckItem oCheckItem = oFuncCheckItem.getCheckItem();
							oCheckItem.setModified(true);
						}
					}
				}
			}
			updateCheck(false, true, 1, 0, false, 0, 0, 0, 0, false, false, false, false, 0, 0, false);
		}
	}
	
	public String sendCheck(boolean bPrintGuestCheck, boolean bPayCheck, boolean bInternalSendCheck, int iOutletId, String sOutletName, int iCheckPrintQueueId, int iCheckFormatId, boolean bDetailCheck, int iGetUpdateRecord, int iReceiptPrtqId, int iReceiptFormatId, String sOrderingMode, boolean bWithPayments){
		boolean bOldCheck = isOldCheck();
		m_sErrorMessage = "";
		
		//re-sequence the item
		updateCheckItemSequence(false, true, 0);
		
		m_oCheck.setOrderingMode(sOrderingMode);
		
		//reset locked information
		m_oCheck.setLockTime("");
		m_oCheck.setLockLocTime(null);
		m_oCheck.setLockUserId(0);
		m_oCheck.setLockStationId(0);
		
		// Update printing information if it is print check
		if(bPrintGuestCheck && !bDetailCheck) {
			int iPrintCount = this.getPrintCount();
			DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
			
			iPrintCount++;
			m_oCheck.setPrintLocTime(new DateTime());
			m_oCheck.setPrintTime(formatter.print(m_oCheck.getPrintLocTime().withZone(DateTimeZone.UTC)));
			m_oCheck.setPrintUserId(AppGlobal.g_oFuncUser.get().getUserId());
			m_oCheck.setPrintStationId(AppGlobal.g_oFuncStation.get().getStationId());
			m_oCheck.setPrintCount(iPrintCount);
		}
		
		// Update outlet table
		if(!bPrintGuestCheck && !bPayCheck && !bInternalSendCheck)
			m_oOutletTable.setStationId(0);
		if(this.hasNewItem(false) && iReceiptPrtqId == 0) {
			if((m_oOutletTable.isVacant() || m_oOutletTable.isNewTable())
					&& m_oOutletTable.isSeatInTag()) {
				// update chks_book_date and chks_resv_refno_with_prefix to store tms information
				JSONObject oInfo = m_oOutletTable.getInfo();
				if(oInfo != null){
					String sAction = oInfo.optString("action");
					if(sAction.equals("new_check")){
						String sBookDate = oInfo.optString("book_date");
						String sResvNo = oInfo.optString("refno_with_prefix");
						if(!sBookDate.isEmpty()) {
							try {
								SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
								Date oBookdate = format.parse(sBookDate);
								m_oCheck.setResvBookDate(oBookdate);
							} catch (ParseException e) {
								AppGlobal.stackToString(e);
							}
						}
						if(!sResvNo.isEmpty())
							m_oCheck.setRefnoWithPrefix(sResvNo);
						
						// Clear TMS information
						m_oOutletTable.setTag(PosOutletTable.TAG_NO);
						m_oOutletTable.setInfo(null);
					}
				}
			}
			m_oOutletTable.setStatus(PosOutletTable.STATUS_OCCUPIED);
		}
		
		if(AppGlobal.g_iLogLevel >= 9){
			AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "Before update check");
		}
		
		//check whether need to send both new and old items
		boolean bSendNewAndOldItem = false;
		if(this.isOldCheck()) {
			for(FuncCheckParty oFuncCheckParty: this.m_oFuncCheckPartyList) {
				if(oFuncCheckParty.getPartyCheckDiscount().size() > 0) {
					for(Entry<Integer, PosCheckDiscount> entry: oFuncCheckParty.getPartyCheckDiscount().entrySet()) {
						if(entry.getValue().getCdisId() > 0)
							bSendNewAndOldItem = true;
					}
				}
			}
		}
		
		// Save check
		String sSaveCheckResult = PosCheck.API_RESULT_FAIL;
		boolean bExit = false;
		if(bSendNewAndOldItem) {
			//As party check discount is applied and the value has been updated, need to send all items including new and old
			sSaveCheckResult = updateCheck(true, true, 2, 0, true, iGetUpdateRecord, iReceiptPrtqId, iReceiptFormatId, 0, bWithPayments, false, bPrintGuestCheck, bPayCheck, iCheckPrintQueueId, iCheckFormatId, bDetailCheck);
		}else {
			if(!this.hasNewItem(false))
				sSaveCheckResult = updateCheck(true, false, 0, 0, true, iGetUpdateRecord, iReceiptPrtqId, iReceiptFormatId, 0, bWithPayments, false, bPrintGuestCheck, bPayCheck, iCheckPrintQueueId, iCheckFormatId, bDetailCheck);
			else
				sSaveCheckResult = updateCheck(true, true, 0, 0, true, iGetUpdateRecord, iReceiptPrtqId, iReceiptFormatId, 0, bWithPayments, false, bPrintGuestCheck, bPayCheck, iCheckPrintQueueId, iCheckFormatId, bDetailCheck);
		}
		
		for(int iRetryCnt=0; iRetryCnt<=3; iRetryCnt++) {
			if(!sSaveCheckResult.equals(PosCheck.API_RESULT_SUCCESS)) {
				if(m_oCheck.getLastWsClientError().equals("record_exist")) {
					m_sErrorMessage = AppGlobal.g_oLang.get()._("duplicate_check_number_exist_when_open_new_check");
					AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "", AppGlobal.g_oFuncUser.get().getUserId() + "", "Duplicate check number exist when open new check");
					
					if(iRetryCnt == 3) {
						bExit = true;
						break;
					}
					
					AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "", AppGlobal.g_oFuncUser.get().getUserId() + "", "Send check retry:" + (iRetryCnt+1) + "");
					
					if(bSendNewAndOldItem)
						sSaveCheckResult = updateCheck(true, true, 2, 0, true, iGetUpdateRecord, iReceiptPrtqId, iReceiptFormatId, 0, bWithPayments, false, bPrintGuestCheck, bPayCheck, iCheckPrintQueueId, iCheckFormatId, bDetailCheck);
					else {
						if(!this.hasNewItem(false)) {
							sSaveCheckResult = updateCheck(true, false, 0, 0, true, iGetUpdateRecord, iReceiptPrtqId, iReceiptFormatId, 0, bWithPayments, false, bPrintGuestCheck, bPayCheck, iCheckPrintQueueId, iCheckFormatId, bDetailCheck);
						} else {
							sSaveCheckResult = updateCheck(true, true, 0, 0, true, iGetUpdateRecord, iReceiptPrtqId, iReceiptFormatId, 0, bWithPayments, false, bPrintGuestCheck, bPayCheck, iCheckPrintQueueId, iCheckFormatId, bDetailCheck);
						}
					}
					
				}else {
					bExit = true;
					m_sErrorMessage = AppGlobal.g_oLang.get()._("fail_to_save_check");
					if(m_oCheck.getLastWsClientError() != null)
						AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "", AppGlobal.g_oFuncUser.get().getUserId() + "", "API Error:" + m_oCheck.getLastWsClientError());
					break;
				}
			}else
				break;
		}
		
		if(bExit) {
			//update table status
			if(m_oOutletTable.getOtblId() > 0) {
				m_oOutletTable.setStationId(0);
				if(!bOldCheck) {
					m_oOutletTable.setCheckId(0);
					m_oOutletTable.setStatus(PosOutletTable.STATUS_VACANT);
				}
				m_oOutletTable.addUpdate(true);
			}
			
			// After update check, release the check lock
			for (FuncCheckListener listener : listeners) {
				listener.FuncCheck_finishSendCheck(this.getTableNoWithExtensionForDisplay());
			}
			
			return sSaveCheckResult;
		}
		
		//update the station last's send check prefix and check number if it is and the check number is generated by station
		if(AppGlobal.g_oFuncOutlet.get().isGenerateCheckNumByStation() && !bOldCheck)
			AppGlobal.g_oFuncStation.get().setLastCheckPrefixNumber(m_oCheck.getCheckPrefix(), getCheckNo());
		
		if(AppGlobal.g_iLogLevel >= 9){
			AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "After update check");
		}

		if(bPrintGuestCheck || bInternalSendCheck)
			m_oOutletTable.setCheckId(m_oCheck.getCheckId());
		
		/*if(bPrintGuestCheck){
			if(AppGlobal.g_iLogLevel >= 9){
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "Before print check");
			}
			
			// Print guest check
			if(printCheck(bPayCheck, AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncStation.get().getStationId(), iCheckPrintQueueId, iCheckFormatId, bDetailCheck, sOutletName, false, 0) == false){
				// Fail to print
				if(this.m_sErrorMessage.isEmpty())
					AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.print_check.name(), PosActionLog.ACTION_RESULT_FAIL, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), 0, 0, 0, 0, "Fail to print check");
				else
					AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.print_check.name(), PosActionLog.ACTION_RESULT_FAIL, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), 0, 0, 0, 0, m_sErrorMessage);
			}
			else {
				// Add "print_check" log to action log list
				AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.print_check.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), 0, 0, 0, 0, "");
			}
			
			if(AppGlobal.g_iLogLevel >= 9){
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "After print check");
			}
		}*/
		
		// After update check, release the check lock
		for (FuncCheckListener listener : listeners) {
			listener.FuncCheck_finishSendCheck(this.getTableNoWithExtensionForDisplay());
		}
		
		// Send action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
		return sSaveCheckResult;
	}
	
	public boolean printCheck(boolean bSendAndPrint, boolean bPayCheck, int iUserId, int iStationId, int iPrintQueueId, int iCheckFormatId, boolean bDetailCheck, String sOutletName, boolean bVoidCheck, int iVoidReasonId, String sChkIdCacheKey, boolean bUpdatePrintInfo){
		int iPrintCount = this.getPrintCount();
		PosCheckPrintLog oCheckPrintLog = null;
		DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		boolean bUpdateOutletTable = true;

		m_sErrorMessage = "";
		if(!bSendAndPrint && !this.isOldCheck()) {
			m_sErrorMessage = AppGlobal.g_oLang.get()._("cannot_print_new_check");
			return false;
		}
		
		if(isPaid(false))
			bUpdateOutletTable = false;
		
		// Update table status
		// OM (pos_outlet_tables)
		String sOriTableStatus = "";
		if(bUpdateOutletTable) {
			if(!bPayCheck) 
				m_oOutletTable.setStationId(0);
			m_oOutletTable.getStatus();
			if(!bDetailCheck && iPrintQueueId > 0 && iCheckFormatId > 0)
				m_oOutletTable.setStatus(PosOutletTable.STATUS_CHECK_PRINTED);
			else
				m_oOutletTable.setStatus(PosOutletTable.STATUS_OCCUPIED);
		}
		
		// Update check extra info
		if(!isPaid(false) && m_bPaymentInterfacePrinting && isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0) && isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_OUT_TRADE_NUMBER, 0)) {
			String sOutTradeNumber = AppGlobal.g_oFuncOutlet.get().getOutletCode()+AppGlobal.g_oFuncOutlet.get().getBusinessDay().getDateInStringWithFormat("yyyyMMdd")+m_oCheck.getCheckPrefixNo()+(m_oCheck.getPrintCount()+1);
			
			updateCheckExtraInfoValue(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_OUT_TRADE_NUMBER, 0, sOutTradeNumber);
			addPrintedCheckToPaymentInterfaceCheckList(sOutTradeNumber);
		}
		
		if(!bSendAndPrint && !bDetailCheck && iPrintQueueId > 0 && iCheckFormatId > 0 && bUpdatePrintInfo) {
			iPrintCount++;
			m_oCheck.setPrintLocTime(new DateTime());
			m_oCheck.setPrintTime(formatter.print(m_oCheck.getPrintLocTime().withZone(DateTimeZone.UTC)));
			m_oCheck.setPrintUserId(iUserId);
			m_oCheck.setPrintStationId(iStationId);
			m_oCheck.setPrintCount(iPrintCount);
			
			if(!updateCheck(false, false, 0, 0, true, 0, 0, 0, 0, false, false, false, false, 0, 0, false).equals(PosCheck.API_RESULT_SUCCESS)) {
				if(bUpdateOutletTable)
					m_oOutletTable.setStatus(sOriTableStatus);
				return false;
			}
		}/*else{
			if(bUpdateOutletTable)
				m_oOutletTable.addUpdate(true);
		}*/
		
		//save print log
		if (iPrintQueueId > 0 && iCheckFormatId > 0) {
			oCheckPrintLog = new PosCheckPrintLog();
			oCheckPrintLog.setChksId(m_oCheck.getCheckId());
			oCheckPrintLog.setPrintLocTime(new DateTime());
			oCheckPrintLog.setPrintTime(formatter.print(oCheckPrintLog.getPrintLocTime().withZone(DateTimeZone.UTC)));
			oCheckPrintLog.setPrintUserId(iUserId);
			oCheckPrintLog.setPrintStationId(iStationId);
			oCheckPrintLog.setPrintCheckTotal(m_oCheck.getCheckTotal());
			oCheckPrintLog.setPrintPartyTotal(BigDecimal.ZERO);
			JSONObject oResultJSONObject = null;
			
			List<PosCheckItem> oCheckItemListForPrinting = new ArrayList<PosCheckItem>();
			for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
				if(bVoidCheck)
					oFuncCheckParty.constructPosCheckPartyForSaving(2);
					
				for(PosCheckItem oPosCheckItem:oFuncCheckParty.getCheckParty().getCheckItemList())
					oCheckItemListForPrinting.add(oPosCheckItem);
			}
				
			m_oCurrentFuncCheckParty.getPartyCheckDiscount();
			HashMap<String, String> oTableName = null;
			if(AppGlobal.g_oFuncOutlet.get().isTableNameExist(m_sTableNo, m_sTableExtension))
				oTableName = AppGlobal.g_oFuncOutlet.get().getTableNameInAllLang(m_sTableNo, m_sTableExtension);
				
			oResultJSONObject = m_oCheck.printGuestCheckWithPassingDetail(PosCheck.PRINTING_NORMAL, AppGlobal.g_oCurrentLangIndex.get(), iPrintQueueId, iCheckFormatId, bDetailCheck, m_bPaymentInterfacePrinting, m_sTableNo, m_sTableExtension, sChkIdCacheKey, bVoidCheck, iVoidReasonId, AppGlobal.g_oFuncStation.get().getStation(), AppGlobal.g_oFuncUser.get().getUser(), AppGlobal.g_oFuncOutlet.get().getShop(), AppGlobal.g_oFuncOutlet.get().getOutlet(), AppGlobal.g_oFuncOutlet.get().getMediaFilename(OutMediaObject.USED_FOR_LOGO),
				AppGlobal.g_oFuncOutlet.get().getBusinessDay(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod(), oCheckPrintLog, oCheckItemListForPrinting, m_oCurrentFuncCheckParty.getPartyCheckDiscount(), oTableName, null);	
			
			List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_PAYMENT_INTERFACE);
			if(!isPaid(false) && oInterfaceConfigList.size() > 0) {
				PosInterfaceConfig oPosInterfaceConfig = oInterfaceConfigList.get(0);

				if(oResultJSONObject == null)
					return false;
				
				m_sErrorMessage = "";
				try {
					if (oResultJSONObject.has("printResult") && oResultJSONObject.getBoolean("printResult") == false) {
						if(oResultJSONObject.optInt("errorCode") != 0) {
							FuncPaymentInterface oFuncPaymentInterface = new FuncPaymentInterface(oPosInterfaceConfig);
							m_sErrorMessage = oFuncPaymentInterface.getErrorMessage(oResultJSONObject.optInt("errorCode"));
						}
						
						if(m_sErrorMessage == null)
							m_sErrorMessage = oResultJSONObject.optInt("errorCode")+": "+oResultJSONObject.optString("errorMessage");
						
						return false;
					}
					
					if (oResultJSONObject.has("url") && !oResultJSONObject.optString("url", "").isEmpty())
						m_sLastPrintCheckUrl = oResultJSONObject.optString("url", "");					
				} catch (JSONException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		
		return true;
	}
	
	public boolean updatePaymentInfo(int iOutletId, int iClosePeriodId, DateTime oCloseDateTime, int iReceiptPrtqId, int iReceiptFormatId, boolean bSendAndPaid, boolean bFastFoodMode, boolean bSelfOrderKioskMode, boolean bAdjustPayment) {
		DateTimeFormatter closeFormatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		int iCouponRedeemItemCnt = 0;
		
		m_sErrorMessage = "";
		
		//update check
		m_oCheck.setPaymentTotal(m_oCheck.getCheckTotal());
		
		// Get tips amount total
		BigDecimal dTips = BigDecimal.ZERO;
		for(PosCheckPayment oPosCheckPayment:m_oCheckPaymentList){
			if(oPosCheckPayment.isDelete())
				continue;
			
			dTips = dTips.add(oPosCheckPayment.getPayTips());
		}
		m_oCheck.setTipsTotal(dTips);
		m_oCheck.setPaid(PosCheck.PAID_FULL_PAID);
		if(iReceiptPrtqId > 0 && iReceiptFormatId > 0)
			m_oCheck.setReceiptPrintCount(1);
		m_oCheck.setCloseLocTime(oCloseDateTime);
		m_oCheck.setCloseTime(closeFormatter.print(m_oCheck.getCloseLocTime().withZone(DateTimeZone.UTC)));
		m_oCheck.setCloseUserId(AppGlobal.g_oFuncUser.get().getUserId());
		m_oCheck.setCloseStationId(AppGlobal.g_oFuncStation.get().getStationId());
		m_oCheck.setCloseBperId(iClosePeriodId);

		// Unlock the check
		m_oCheck.setLockTime("");
		m_oCheck.setLockLocTime(null);
		m_oCheck.setLockUserId(0);
		m_oCheck.setLockStationId(0);
		
		// Unlock the table
		if(!bAdjustPayment) {
			m_oOutletTable.setStationId(0);
			m_oOutletTable.setCheckId(0);
			m_oOutletTable.setStatus(PosOutletTable.STATUS_VACANT);
		}
		
		// Set the lock table flag to false
		m_bIsTableLock = false;
		
		// Update the payment's check extra info
		List<PosInterfaceConfig> oPaymentInterfaceList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_PAYMENT_INTERFACE);
		if(oPaymentInterfaceList.size() > 0) {
			DateTimeFormatter fmt = DateTimeFormat.forPattern("yyMMddHHmmss");
			for(PosCheckPayment oCheckPayment: m_oCheckPaymentList) {
				PosCheckExtraInfo oCheckExtraInfo = oCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0);
				if(oCheckExtraInfo != null) {
					for(PosInterfaceConfig oPaymentInterface: oPaymentInterfaceList) {
						if(oPaymentInterface.getInterfaceId() == Integer.valueOf(oCheckExtraInfo.getValue()).intValue() && oPaymentInterface.getInterfaceVendorKey().equals(InfVendor.KEY_PAY_AT_TABLE)) {
							PosCheckExtraInfo oCheckExtraInfo1 = oCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_REFERENCE, 0);
							String sNewValue = oCheckExtraInfo1.getValue() + fmt.print(m_oCheck.getCloseLocTime());
							oCheckPayment.updateExtraInfo(PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_REFERENCE, 0, sNewValue);
							break;
						}
					}
				}
			}
		}

		// Update database
		if(bSendAndPaid){
			String sOrderingMode;
			
			if(AppGlobal.g_iLogLevel >= 9){
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "Before send check");
			}
			
			// *****************************************************************
			// Create thread to send check and free the table
			AppThreadManager oAppThreadManager = new AppThreadManager();
			
			if(bFastFoodMode || bSelfOrderKioskMode){
				if(bSelfOrderKioskMode)
					sOrderingMode = PosCheck.ORDERING_MODE_SELF_ORDER_KIOSK;
				else
					sOrderingMode = PosCheck.ORDERING_MODE_FAST_FOOD;
				
				// Use thread to update database
				// Add the method to the thread manager
				// Thread 1 :
				// Create parameter array
				Object[] oParameters1 = new Object[13];
				oParameters1[0] = false;
				oParameters1[1] = false;
				oParameters1[2] = false;
				oParameters1[3] = iOutletId;
				oParameters1[4] = "";
				oParameters1[5] = 0;
				oParameters1[6] = 0;
				oParameters1[7] = false;
				oParameters1[8] = 0;
				oParameters1[9] = iReceiptPrtqId;
				oParameters1[10] = iReceiptFormatId;
				oParameters1[11] = sOrderingMode;
				oParameters1[12] = true;
				oAppThreadManager.addThread(1, this, "sendCheck", oParameters1);
			}else{
				sOrderingMode = PosCheck.ORDERING_MODE_FINE_DINING;
				
				if(!this.sendCheck(false, true, false, iOutletId, "", 0, 0, false, 0, iReceiptPrtqId, iReceiptFormatId, sOrderingMode, true).equals(PosCheck.API_RESULT_SUCCESS))
					return false;
				
				// Free the table
				if(!bAdjustPayment) {
					m_oOutletTable.setCheckId(0);
					m_oOutletTable.setStationId(0);
					m_oOutletTable.setStatus(PosOutletTable.STATUS_VACANT);
				}
				
				// Add the method to the thread manager
				// Thread 2 :
				// Create parameter array
				Object[] oParameters2 = new Object[1];
				oParameters2[0] = true;
				oAppThreadManager.addThread(2, m_oOutletTable, "addUpdate", oParameters2);
			}
			
			// Run the thread without wait
			oAppThreadManager.runThread();
			
			if(AppGlobal.g_iLogLevel >= 9){
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "After send check");
			}
			
		}else{
			
			if(AppGlobal.g_iLogLevel >= 9){
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "Before update check");
			}
			
			if(!updateCheck(false, false, 0, 0, true, 0, iReceiptPrtqId, iReceiptFormatId, 0, true, false, false, false, 0, 0, false).equals(PosCheck.API_RESULT_SUCCESS))
				return false;
			
			// After update payment information, release the check lock
			for (FuncCheckListener listener : listeners) {
				listener.FuncCheck_finishSendCheck(this.getTableNoWithExtensionForDisplay());
			}
			
			if(AppGlobal.g_iLogLevel >= 9){
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "After update check");
			}
		}

		// Print receipt
		// Process print receipt
		// *****************************************************************
		// Create thread to print receipt
		boolean bNotAllowPrintReceipt = AppGlobal.g_oFuncStation.get().getFineDiningNotPrintReceipt();
		
		if(!bFastFoodMode && !bSelfOrderKioskMode) {
			
			if(AppGlobal.g_iLogLevel >= 9){
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "Before print receipt");
			}
			
			AppThreadManager oAppThreadManager = new AppThreadManager();
					
			// Add the method to the thread manager
			// Thread 1 : Print receipt
	
			// Create parameter array
			if(!bNotAllowPrintReceipt) {
				Object[] oParameters = new Object[5];
				oParameters[0] = iReceiptPrtqId;
				oParameters[1] = iReceiptFormatId;
				oParameters[2] = m_oCheck.getCheckId();
				oParameters[3] = "";
				oParameters[4] = 0;
				oAppThreadManager.addThread(1, this, "printReceipt", oParameters);
			}
			
			//Add thread to print taiwan gui receipt
			if(AppGlobal.g_oFuncStation.get().supportTaiwanGui() && m_oCheck.getTaiwanGuiTran(1) != null && !m_oCheck.getTaiwanGuiTran(1).getType().equals(PosTaiwanGuiTran.TYPE_CHARITY)) {
				Object[] oParameters2 = new Object[5];
				oParameters2[0] = iReceiptPrtqId;
				oParameters2[1] = AppGlobal.g_oFuncStation.get().getTaiWanGuiPrintFormatId();
				oParameters2[2] = m_oCheck.getCheckId();
				oParameters2[3] = "";
				oParameters2[4] = 0;
				oAppThreadManager.addThread(2, this, "printReceipt", oParameters2);
			}
			
			// Run the thread without wait
			oAppThreadManager.runThread();
			
			if(AppGlobal.g_iLogLevel >= 9){
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "After print receipt");
			}
		}
		
		if(AppGlobal.g_iLogLevel >= 9){
			AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "Before update coupon");
		}
		
		//Update coupon item status for coupon item
		boolean bNeedUpdateCouponStatus = false;
		List<FuncCoupon> oItemCouponList = new ArrayList<FuncCoupon>();
		DateTime oSellDateTime = new DateTime();
		DateTimeFormatter oDateFormat = DateTimeFormat.forPattern("yyyyMMdd");
		DateTimeFormatter oTimeFormat = DateTimeFormat.forPattern("HHmmss");
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oFuncItemList:oFuncCheckParty.getWholeItemList()){
				for(FuncCheckItem oFuncCheckItem:oFuncItemList) {
					if(oFuncCheckItem.isCouponItem()) {
						bNeedUpdateCouponStatus = true;
						FuncCoupon oCoupon = new FuncCoupon();
						oCoupon.setStartCoupon(oFuncCheckItem.getExtraInfoBySectionAndVariable("online_coupon", "sell_start_coupon"));
						oCoupon.setEndCoupon(oFuncCheckItem.getExtraInfoBySectionAndVariable("online_coupon", "sell_end_coupon"));
						oCoupon.setCouponCurrentStatus(FuncCoupon.COUPON_STATUS_LOCKED);
						oCoupon.setCouponNextStatus(FuncCoupon.COUPON_STATUS_SOLD);
						oCoupon.setSellDate(oDateFormat.print(oSellDateTime));
						oCoupon.setSellTime(oTimeFormat.print(oSellDateTime));
						oCoupon.setSellPrice(oFuncCheckItem.getCheckItem().getTotal().divide(oFuncCheckItem.getCheckItem().getQty()));
						oCoupon.setEmployeeId(AppGlobal.g_oFuncUser.get().getUserId());
						oCoupon.setEmployeeName(AppGlobal.g_oFuncUser.get().getUserName(1));
						oCoupon.setSellCheck(getCheckId());
						
						oItemCouponList.add(oCoupon);
					}
				}
			}
		}
		
		//Update coupon status for coupon payment
		boolean bNeedUpdateCouponStatusForPayment = false;
		List<FuncCoupon> oPaymentCouponList = new ArrayList<FuncCoupon>();
		for(PosCheckPayment oCheckPayment:m_oCheckPaymentList) {
			if(oCheckPayment.isDelete())
				continue;
			
			if(oCheckPayment.isCouponPaymentType() && oCheckPayment.getRefData(1) != null && oCheckPayment.getRefDataByIndexAndKey(1, "coupon_number") != null) {
				bNeedUpdateCouponStatusForPayment = true;
				FuncCoupon oPaymentCoupon = new FuncCoupon();
				oPaymentCoupon.setStartCoupon(oCheckPayment.getRefDataByIndexAndKey(1, "coupon_number"));
				oPaymentCoupon.setEndCoupon(oCheckPayment.getRefDataByIndexAndKey(1, "coupon_number"));
				oPaymentCoupon.setCouponCurrentStatus(FuncCoupon.COUPON_STATUS_LOCKED);
				oPaymentCoupon.setCouponNextStatus(FuncCoupon.COUPON_STATUS_USED);
				oPaymentCoupon.setRedeemPrice(oCheckPayment.getPayTotal());
				oPaymentCoupon.setRedeemDate(oDateFormat.print(oSellDateTime));
				oPaymentCoupon.setRedeemTime(oTimeFormat.print(oSellDateTime));
				oPaymentCoupon.setRedeemOutlet(AppGlobal.g_oFuncOutlet.get().getOutletCode());
				oPaymentCoupon.setRedeemCheck(getCheckNo());
				if(oCheckPayment.getRefData(1) != null && oCheckPayment.getRefDataByIndexAndKey(1, "redeem_item_code") != null) {
					oPaymentCoupon.setRedeemItem(oCheckPayment.getRefDataByIndexAndKey(1, "redeem_item_code"));
					iCouponRedeemItemCnt++;
				}
				oPaymentCoupon.setEmployeeId(AppGlobal.g_oFuncUser.get().getUserId());
				oPaymentCoupon.setEmployeeName(AppGlobal.g_oFuncUser.get().getUserName(1));
				
				oPaymentCouponList.add(oPaymentCoupon);
			}
		}
		
		//Construct check item for saving redeem item extra information
		if(iCouponRedeemItemCnt > 0) {
			for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
				for(List<FuncCheckItem> oFuncItemList:oFuncCheckParty.getWholeItemList()){
					for(FuncCheckItem oFuncCheckItem:oFuncItemList) {
						if(oFuncCheckItem.isRedeemCouponItem()) {
							iCouponRedeemItemCnt++;
						}
					}
				}
			}
		}
		
		if(bNeedUpdateCouponStatus || bNeedUpdateCouponStatusForPayment || iCouponRedeemItemCnt > 0) {
			AppThreadManager oAppThreadManager2 = new AppThreadManager();
			int iFunctionCnt = 0;
			
			if(bNeedUpdateCouponStatus) {
				iFunctionCnt++;
				// Add the method to the thread manager
				// Thread : update multiple coupon status for coupon item
			
				// Create parameter array
				Object[] oParameters2 = new Object[2];
				oParameters2[0] = FuncCoupon.UPDATE_COUPON_TYPE_ORDER_ITEM;
				oParameters2[1] = oItemCouponList;
				oAppThreadManager2.addThread(iFunctionCnt, this, "updateMultipleCoupon", oParameters2);
			}
			
			if(bNeedUpdateCouponStatusForPayment) {
				iFunctionCnt++;
				// Add the method to the thread manager
				// Thread : update multiple coupon status for payment coupon
				
				//Create parameter array
				Object[] oParameters3 = new Object[2];
				oParameters3[0] = FuncCoupon.UPDATE_COUPON_TYPE_USE_AS_PAYMENT;
				oParameters3[1] = oPaymentCouponList;
				oAppThreadManager2.addThread(iFunctionCnt, this, "updateMultipleCoupon", oParameters3);
			}
			
			if(iCouponRedeemItemCnt > 0) {
				iFunctionCnt++;
				// Add the method to the thread manager
				// Thread : update multiple coupon status for redeemed item
				oAppThreadManager2.addThread(iFunctionCnt, this, "updateCheckItemsAfterFunction", null);
			}
			
			// Run the thread without wait
			oAppThreadManager2.runThread();
		}
		
		if(AppGlobal.g_iLogLevel >= 9){
			AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "After update coupon");
		}
		
		// Handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
		return true;
	}
	
	// Update payment tips
	public boolean adjustTips(List<HashMap<String, String>> oPaymentInfos, PosPaymentMethodList oPaymentMethodList) {
		boolean bHaveTipsChanges = false;
		FuncPMS oPMS = new FuncPMS();
		
		for(HashMap<String, String> oPaymentInfo:oPaymentInfos) {
			BigDecimal dOriTips = new BigDecimal(oPaymentInfo.get("payOriTips"));
			BigDecimal dNewTips = new BigDecimal(oPaymentInfo.get("payNewTips"));
			
			if(dOriTips.compareTo(dNewTips) != 0) {
				BigDecimal dPreviousPaymentTotal = BigDecimal.ZERO;
				for(PosCheckPayment oCheckPayment:m_oCheckPaymentList) {
					if(oCheckPayment.getCpayId() == Integer.parseInt(oPaymentInfo.get("payId"))) {
						bHaveTipsChanges = true;
						
						// first do void the pms payment
						if(oCheckPayment.havePmsPayment()) {
							PosPaymentMethod oPaymentMethod = oPaymentMethodList.getPaymentMethodList().get(oCheckPayment.getPaymentMethodId());
							if(oPMS.pmsVoidPosting(this, oCheckPayment, oPaymentMethod, dPreviousPaymentTotal) == false) {
								// fail to void posting, continue the process
								AppGlobal.writeErrorLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), AppGlobal.g_oFuncStation.get().getStationId()+"", "", "Fail to void previous PMS posting, process to next payment.");
								break;
							}
						}
						
						if(oCheckPayment.isPayByForeignCurrency()) {
							BigDecimal dPayTotalInForeignCurrency = dNewTips.add(oCheckPayment.getPayForeignTotal());
							BigDecimal dPayTotalInLocalCurrency = dPayTotalInForeignCurrency.multiply(oCheckPayment.getCurrencyRate());
							dPayTotalInLocalCurrency = AppGlobal.g_oFuncOutlet.get().roundPaymentAmountToBigDecimal(dPayTotalInLocalCurrency);
							
							if((dPayTotalInLocalCurrency.compareTo(oCheckPayment.getPayTotal())) > 0) {
								BigDecimal dPayTipsInLocalCurrency = dPayTotalInLocalCurrency.subtract(m_oCheck.getPaymentTotal());
								oCheckPayment.setPayTips(dPayTipsInLocalCurrency);
							}else
								oCheckPayment.setPayTips(BigDecimal.ZERO);
							oCheckPayment.setPayForeignTips(dNewTips);
							
						}else
							oCheckPayment.setPayTips(dNewTips);
						
						// do pms payment with new tips
						if(oCheckPayment.havePmsPayment()) {
							PosPaymentMethod oPaymentMethod = oPaymentMethodList.getPaymentMethodList().get(oCheckPayment.getPaymentMethodId());
							oPMS.pmsPosting(this, oCheckPayment, oPaymentMethod, dPreviousPaymentTotal);
						}
						
						break;
					}
					dPreviousPaymentTotal = dPreviousPaymentTotal.add(oCheckPayment.getPayTotal());
				}
			}
		}
		
		// unlock check
		m_oCheck.setLockStationId(0);
		m_oCheck.setLockUserId(0);
		m_oCheck.setLockTime(null);
		m_oCheck.setLockLocTime(null);
		
		if(bHaveTipsChanges) {
			BigDecimal dNewTipsTotal = BigDecimal.ZERO;
			for(PosCheckPayment oCheckPayment:m_oCheckPaymentList) {
				dNewTipsTotal = dNewTipsTotal.add(oCheckPayment.getPayTips());
			}
			m_oCheck.setTipsTotal(dNewTipsTotal);
			
			if(!updateCheck(false, false, 0, 0, false, 0, 0, 0, 0, true, false, false, false, 0, 0, false).equals(PosCheck.API_RESULT_SUCCESS))
				return false;
			else
				return true;
		}else {
			updateCheck(false, false, 0, 0, false, 0, 0, 0, 0, false, false, false, false, 0, 0, false);
			m_sErrorMessage = AppGlobal.g_oLang.get()._("no_tips_adjustments");
			return false;
		}
	}
	
	// Add old item to item list
	public void addOldCheckPartyToList() {
		int i = 0;
		List<PosCheckParty> checkPartiesArrayList = m_oCheck.getCheckPartiesArrayList();
		
		// Clear all check party
		m_oFuncCheckPartyList.clear();
		
		// Create check parties
		for(i=0; i<checkPartiesArrayList.size(); i++) {
			m_oCurrentFuncCheckParty = new FuncCheckParty(checkPartiesArrayList.get(i));
			m_oFuncCheckPartyList.add(m_oCurrentFuncCheckParty);
		}
		
		m_oCheck.clearCheckPartyArrayList();
	}
	
	// Add old invoice item to item list
	public void addOldInvoiceItemToItemList() {
		int i = 0, iSeatNo = 0, iLineNo = 0;
		FuncCheckItem oFuncCheckItem = null;
		List<PosStockDeliveryInvoiceItem> itemArrayList = null;
		itemArrayList = m_oPosStockDeliveryInvoice.getInvoiceItemsArrayList();
		
		for(i=0; i<itemArrayList.size(); i++) {
			// Create the FuncCheckItem from Invoice Item
			oFuncCheckItem = this.createFuncCheckItemFromStockDeliveryInvoiceItem(itemArrayList.get(i)); 
			
			iLineNo++;
			
			this.addItemToItemList(iSeatNo, iLineNo, oFuncCheckItem);
		}
		
		m_oCheck.clearCheckPartyArrayList();
	}
	
	// *** Process current check party ONLY
	public Integer moveItemToItemList(int iOriSeatNo, int iNewSeatNo, int iLineNo, BigDecimal dChgQty) {
		int iTargetItemIndex = -1;
		
		int iCurrentItemCount = getItemListCount(iNewSeatNo);
		FuncCheckItem oFuncCheckItem = m_oCurrentFuncCheckParty.getCheckItem(iOriSeatNo, iLineNo);
		
		if (dChgQty.compareTo(BigDecimal.ZERO) == 0){
			// Move all quantity
			dChgQty = oFuncCheckItem.getCheckItem().getQty();
		}
		
		if(dChgQty.compareTo(oFuncCheckItem.getCheckItem().getQty()) > 0) {
			m_sErrorMessage = "Inputted quantity is larger than item's quantity";
			return -1;
		}
		
		BigDecimal dNewQty = oFuncCheckItem.getCheckItem().getQty().subtract(dChgQty);
		if (dNewQty.compareTo(BigDecimal.ZERO) > 0) {// change some quantity
			// *** Further development
			/*
			FuncCheckItem oNewSeatFuncCheckItem = new FuncCheckItem(oFuncCheckItem, null);
			oNewSeatFuncCheckItem.getCheckItem().setQty(dChgQty);
			calcCheckItem(oNewSeatFuncCheckItem);
			
			this.addItemToItemList(iNewSeatNo, iCurrentItemCount+1, oNewSeatFuncCheckItem);
		
			// add new seat item to database
			if (oFuncCheckItem.isOldItem()) { // Old Item
				
				boolean updateItemInfo = false;
				// add new seat item's modifier
				if(oNewSeatFuncCheckItem.hasModifier()) {
					for(int i = 0; i < oNewSeatFuncCheckItem.getModifierList().size(); i++) {
						FuncCheckItem oModiFuncCheckItem = oNewSeatFuncCheckItem.getModifierList().get(i);
						oModiFuncCheckItem.getCheckItem().setParentItemId(oNewSeatFuncCheckItem.getCheckItem().getCitmId());
						oModiFuncCheckItem.getCheckItem().setSeatNo(iNewSeatNo);
					}
					updateItemInfo = true;
				}
				
				// add new seat item's discount
				if(oNewSeatFuncCheckItem.hasItemDiscount()) {
					for(int i = 0; i < oNewSeatFuncCheckItem.getItemDiscountList().size(); i++) {
						PosCheckDiscount oDiscountFuncCheckItem = oNewSeatFuncCheckItem.getItemDiscountList().get(i);
						oDiscountFuncCheckItem.setCitmId(oNewSeatFuncCheckItem.getCheckItem().getCitmId());
					}
					updateItemInfo = true;
				}
				
				if (updateItemInfo) {
					oNewSeatFuncCheckItem.getCheckItem().setModified(true);
				}
			} else { // New Item
				if(oNewSeatFuncCheckItem.hasModifier()) {
					for(int i = 0; i < oNewSeatFuncCheckItem.getModifierList().size(); i++) {
						FuncCheckItem oModiFuncCheckItem = oNewSeatFuncCheckItem.getModifierList().get(i);
						oModiFuncCheckItem.getCheckItem().setSeatNo(iNewSeatNo);
					}
				}
			}
			
			// Update quantity and total of original item
			oFuncCheckItem.getCheckItem().setQty(dNewQty);
			calcCheckItem(oFuncCheckItem);
			*/
		} else { // move all quantity to other seat
			this.addItemToItemList(iNewSeatNo, iCurrentItemCount+1, oFuncCheckItem);
			
			if(oFuncCheckItem.hasModifier()) {
				for(int i = 0; i < oFuncCheckItem.getModifierList().size(); i++) {
					FuncCheckItem oModiFuncCheckItem = oFuncCheckItem.getModifierList().get(i);
					oModiFuncCheckItem.getCheckItem().setSeatNo(iNewSeatNo);
				}
			}
			
			m_oCurrentFuncCheckParty.getItemList(iOriSeatNo).remove(iLineNo);
		}

		calcCheck();		
		
		// update check and original check item info in database
		if (oFuncCheckItem.isOldItem()) {
			oFuncCheckItem.getCheckItem().setModified(true);
		}
		
		iTargetItemIndex = iCurrentItemCount;
		return iTargetItemIndex;
	}
	
	// Add old check discount to item list
	public void addOldCheckDiscountToList() {
		List<PosCheckDiscount> oCheckDiscList = m_oCheck.getCheckDiscountArrayList();
		
		for(int i=0; i<oCheckDiscList.size(); i++) {
			PosCheckDiscount oCheckDiscount = oCheckDiscList.get(i);
			m_oCheckDiscountList.add(oCheckDiscount);
			oCheckDiscount.setCheckDiscountIndex(m_oCheckDiscountList.size()-1);
			
			//handle discount item
			List<PosCheckDiscountItem> oCheckDiscountItems = oCheckDiscount.getCheckDiscountItemList();
			if(oCheckDiscountItems.isEmpty())
				continue;
			
			oCheckDiscount.addCheckDiscountItemCount(oCheckDiscountItems.size());
			for(int j=0; j<m_oFuncCheckPartyList.size(); j++) {
				FuncCheckParty oFuncCheckParty = m_oFuncCheckPartyList.get(j);
				List<List<FuncCheckItem>> oFuncCheckItemPreSeat = oFuncCheckParty.getWholeItemList();
				
				for(int iSeat=0; iSeat<oFuncCheckItemPreSeat.size(); iSeat++) {
					for(int iItemIndex=0; iItemIndex<oFuncCheckItemPreSeat.get(iSeat).size(); iItemIndex++) {
						for(PosCheckDiscountItem oCheckDiscountItem:oCheckDiscountItems) {
							if(oCheckDiscountItem.getCitmId() == oFuncCheckItemPreSeat.get(iSeat).get(iItemIndex).getCheckItem().getCitmId()) 
								oFuncCheckItemPreSeat.get(iSeat).get(iItemIndex).addCheckDiscountItemToList(i, oCheckDiscountItem);
						}
					}
				}
			}
			
			oCheckDiscount.cleanupCheckDiscountItemList();
		}
		
		m_oCheck.clearCheckDiscountList();
	}
	
	// Add new check payment to payment list
	public void addNewCheckPaymentToList(PosCheckPayment oCheckPayment) {		
		m_oCheckPaymentList.add(oCheckPayment);
	}
	
	// Add old check payment to payment list
	public void addOldCheckPaymentToList() {
		List<PosCheckPayment> oCheckPaymentList = m_oCheck.getCheckPaymentArrayList();
		
		for(PosCheckPayment oCheckPayment: oCheckPaymentList)
			m_oCheckPaymentList.add(oCheckPayment);
		
		m_oCheck.clearCheckPaymentList();
	}
	
	// Add item to item list
	// *** Process current check party ONLY
	public void addItemToItemList(int iSeatNo, int iLineNo, FuncCheckItem oFuncCheckItem){		
		if(m_oCurrentFuncCheckParty.getWholeItemList().size() < iSeatNo) {
			m_oCurrentFuncCheckParty.getWholeItemList().add(new ArrayList<FuncCheckItem>());
		}
		
		m_oCurrentFuncCheckParty.addItemToItemList(iSeatNo, iLineNo, oFuncCheckItem);
		
		if(!oFuncCheckItem.isOldItem())
			m_bModified = true;
	}
	
	// Insert item to item list
	// *** Process current check party ONLY
	public void insertItemToItemList(int iSeatNo, int iLineNo, List<FuncCheckItem> oFuncCheckItems){		
		if(m_oCurrentFuncCheckParty.getWholeItemList().size() < iSeatNo) {
			m_oCurrentFuncCheckParty.getWholeItemList().add(new ArrayList<FuncCheckItem>());
		}
		
		m_oCurrentFuncCheckParty.insertItemToItemList(iSeatNo, iLineNo, oFuncCheckItems);
		
		for (FuncCheckItem oFuncCheckItem : oFuncCheckItems) {
			if(!oFuncCheckItem.isOldItem()) {
				m_bModified = true;
				break;
			}
		}
	}
	
	// Reset item sequence for single seat no.
	// *** Process current check party ONLY
	public void resetItemSequenceForSeat(int iSeatNo) {
		int iSeq = 1;
		for (FuncCheckItem oFuncCheckItemInSeat : m_oCurrentFuncCheckParty.getWholeItemList().get(iSeatNo)) {
			oFuncCheckItemInSeat.getCheckItem().setSeq(iSeq);
			//set the seat number of it's modifier
			if(oFuncCheckItemInSeat.hasModifier()) {
				for(FuncCheckItem oModiFuncCheckItem:oFuncCheckItemInSeat.getModifierList())
					oModiFuncCheckItem.getCheckItem().setSeatNo(iSeatNo);
			}
			iSeq++;
		}
	}
	
	// Change cover
	public boolean changeCover(int newCover) {
		DateTime modifiedLocTime = null;
		DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		int originalCover = m_oCheck.getGuests();
		
		if(originalCover == newCover) {
			m_sErrorMessage = AppGlobal.g_oLang.get()._("same_cover_value");
			return false;
		}
		
		if(originalCover > newCover) {
			int iNumOfOrderedSeats = 0;
			for(int i = 1; i <= MAX_SEATS; i++) {
				if(this.getItemListCount(i) > 0) {
					iNumOfOrderedSeats++;
				}
			}
			if(iNumOfOrderedSeats > newCover) {
				m_sErrorMessage = AppGlobal.g_oLang.get()._("the_number_of_seats_with_ordered_items_is_more_than_the_new_order");
				return false;
			}
		}
		
		m_oCheck.setGuests(newCover);
		
		if(m_oCheck.getCheckId() > 0) {
			modifiedLocTime = new DateTime();
			m_oCheck.setModifiedLocTime(modifiedLocTime);
			m_oCheck.setModifiedTime(formatter.print(modifiedLocTime.withZone(DateTimeZone.UTC)));
			m_oCheck.setModifiedUesrId(AppGlobal.g_oFuncUser.get().getUserId());
			m_oCheck.setModifiedStationId(AppGlobal.g_oFuncStation.get().getStationId());
			if(!updateCheck(false, false, 0, 0, false, 0, 0, 0, 0, false, false, false, false, 0, 0, false).equals(PosCheck.API_RESULT_SUCCESS))
				return false;
			
			// Add "change_cover" log to action log list
			AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.change_cover.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), 0, 0, 0, 0, "from "+originalCover+" to "+newCover);
			
			// Send action log
			AppGlobal.g_oActionLog.get().handleActionLog(false);
		}
				
		return true;
	}
	
	// Save split item
	public boolean splitItemToTargetCheck(FuncCheck oTargetFuncCheck, String sOriTable, String sOriTableExtension, List<Integer> oTargetCitmIds) {
		List<Integer> oItemIdsForSpecialSlip = new ArrayList<Integer>();
		
		/***** Handle Target Check *****/
		// Perform mix and match
		if(AppGlobal.g_oFuncMixAndMatch.get().isSupportMixAndMatch()){
			AppGlobal.g_oFuncMixAndMatch.get().processMixAndMatch(oTargetFuncCheck);
		}
				
		oTargetFuncCheck.calcCheck();
		
		// Unlock the target check and table
		oTargetFuncCheck.m_oCheck.setLockTime("");
		oTargetFuncCheck.m_oCheck.setLockLocTime(null);
		oTargetFuncCheck.m_oCheck.setLockUserId(0);
		oTargetFuncCheck.m_oCheck.setLockStationId(0);
		oTargetFuncCheck.m_oOutletTable.setStationId(0);
		oTargetFuncCheck.m_oOutletTable.setStatus(PosOutletTable.STATUS_OCCUPIED);

		// Set the update flag of the splitted item to true in order to update the items' check ID and others
		for(FuncCheckParty oFuncCheckParty:oTargetFuncCheck.getCheckPartyList()) {
			for(List<FuncCheckItem> oCheckItemList:oFuncCheckParty.getWholeItemList()){
				for(FuncCheckItem oCheckItem:oCheckItemList) {
					boolean bFound = false;
					for(Integer iId:oTargetCitmIds){
						if(iId == oCheckItem.getCheckItem().getCitmId()){
							bFound = true;
							break;
						}
					}
					if(bFound == false)
						continue;
					
					// Change item's check id
					oCheckItem.changeCheckId(oTargetFuncCheck.m_oCheck.getCheckId());
					
					// Add the item to default party
					oCheckItem.changeCheckPartyId(0);
					
					oCheckItem.getCheckItem().setModified(true);				
					
					// prepare the items being printed in special slip
					if(!oCheckItem.isPendingItem())
						oItemIdsForSpecialSlip.add(oCheckItem.getCheckItem().getCitmId());
				}
			}
		}
		
		DateTime oCheckOpenLocTime = null, oCurrentTime = null;
		String sCheckOpenTime = "";
		DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		// Get current time
		oCurrentTime = new DateTime();
		
		// Get current business period ID
		int iCurrentBusinessPeriodId = AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId();
		
		if(oTargetFuncCheck.isOldCheck()) {
			// Old check
			
			oTargetFuncCheck.m_oCheck.setModifiedLocTime(oCurrentTime);
			oTargetFuncCheck.m_oCheck.setModifiedTime(formatter.print(oCurrentTime.withZone(DateTimeZone.UTC)));
			oTargetFuncCheck.m_oCheck.setModifiedUesrId(AppGlobal.g_oFuncUser.get().getUserId());
			oTargetFuncCheck.m_oCheck.setModifiedStationId(AppGlobal.g_oFuncStation.get().getStationId());
			
		}else {
			// New check
			
			oCheckOpenLocTime = oCurrentTime;
			sCheckOpenTime = formatter.print(oCurrentTime.withZone(DateTimeZone.UTC));
			
			//set check period ID
			oTargetFuncCheck.m_oCheck.setBusinessPeriod(iCurrentBusinessPeriodId);
			
			//set open check local time and utc time
			oTargetFuncCheck.m_oCheck.setOpenLocTime(oCheckOpenLocTime);
			oTargetFuncCheck.m_oCheck.setOpenTime(sCheckOpenTime);
		}
		
		/***** Handle Current Check *****/
		// Perform mix and match
		if(AppGlobal.g_oFuncMixAndMatch.get().isSupportMixAndMatch()){
			AppGlobal.g_oFuncMixAndMatch.get().processMixAndMatch(this);
		}
		
		this.calcCheck();
		this.updateCheckItemSequence(false, true, 0);
		
		// *****************************************************************
		// Create thread to load detail
		AppThreadManager oAppThreadManager = new AppThreadManager();
		
		// Add the method to the thread manager
		// Thread 1 : Update target check
		// Create parameter array
		Object[] oParameters = new Object[16];
		oParameters[0] = true;
		oParameters[1] = true;
		oParameters[2] = 1;
		oParameters[3] = 1;
		oParameters[4] = true;
		oParameters[5] = 0;
		oParameters[6] = 0;
		oParameters[7] = 0;
		oParameters[8] = this.getCheckId();
		oParameters[9] = false;
		oParameters[10] = false;
		oParameters[11] = false;
		oParameters[12] = false;
		oParameters[13] = 0;
		oParameters[14] = 0;
		oParameters[15] = false;
		oAppThreadManager.addThread(1, oTargetFuncCheck, "updateCheck", oParameters);

		// Thread 2 : Update original check
		// Create parameter array
		Object[] oParameters2 = new Object[16];
		oParameters2[0] = false;
		oParameters2[1] = true;
		oParameters2[2] = 1;
		oParameters2[3] = 1;
		oParameters2[4] = false;
		oParameters2[5] = 0;
		oParameters2[6] = 0;
		oParameters2[7] = 0;
		oParameters2[8] = 0;
		oParameters2[9] = false;
		oParameters2[10] = false;
		oParameters2[11] = false;
		oParameters2[12] = false;
		oParameters2[13] = 0;
		oParameters2[14] = 0;
		oParameters2[15] = false;
		oAppThreadManager.addThread(2, this, "updateCheck", oParameters2);

		// Run all of the threads
		oAppThreadManager.runThread();

		// Wait for the thread to finish
		oAppThreadManager.waitForThread();

		String sUpdateTargetResult = (String) oAppThreadManager.getResult(1);
		String sUpdateOriginalResult = (String) oAppThreadManager.getResult(2);
		if(!sUpdateTargetResult.equals(PosCheck.API_RESULT_SUCCESS) || !sUpdateOriginalResult.equals(PosCheck.API_RESULT_SUCCESS))
            return false;
		
		// Add "split_table" log to action log
		for(FuncCheckParty oFuncCheckParty:oTargetFuncCheck.getCheckPartyList()) {
			for(List<FuncCheckItem> oCheckItemList:oFuncCheckParty.getWholeItemList()){
				for(FuncCheckItem oCheckItem:oCheckItemList) {
					AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.split_item_to_other_table.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), AppGlobal.g_oFuncStation.get().getStationId(), oTargetFuncCheck.getCheckId(), 0, oCheckItem.getCheckItem().getCitmId(), 0, 0, sOriTable+sOriTableExtension+" -> "+oTargetFuncCheck.m_sTableNo+oTargetFuncCheck.m_sTableExtension);
				}
			}
		}
		
		/***** Print Special Slip *****/
		//print action split
		JSONObject oHeaderJSONObject = new JSONObject(), oInfoJSONObject = new JSONObject(), oTempJSONObject = null;
		JSONArray oTempArray = new JSONArray(), oCitmIdArray = new JSONArray();
		try {
			//form header
			oHeaderJSONObject.put("header", "Split Table");
			oTempJSONObject = new JSONObject();
			String sMessage = sOriTable;
			if (!sOriTableExtension.isEmpty())
				sMessage += "("+sOriTableExtension+")";
			sMessage += " -> "+oTargetFuncCheck.m_sTableNo;
			if (!oTargetFuncCheck.m_sTableExtension.isEmpty())
				sMessage += "("+oTargetFuncCheck.m_sTableExtension+")";
			oTempJSONObject.put("message", sMessage);
			oTempArray.put(oTempJSONObject);
			oHeaderJSONObject.put("messages", oTempArray);
			
			//form info
			oInfoJSONObject.put("stationId", AppGlobal.g_oFuncStation.get().getStationId());
			oInfoJSONObject.put("userName", AppGlobal.g_oFuncUser.get().getUserName(AppGlobal.g_oCurrentLangIndex.get()));
			oInfoJSONObject.put("userId", AppGlobal.g_oFuncUser.get().getUserId());
			oInfoJSONObject.put("table", oTargetFuncCheck.m_sTableNo);
			for(Integer iCitmId:oItemIdsForSpecialSlip) {
				oTempJSONObject = new JSONObject();
				oTempJSONObject.put("id", iCitmId);
				oCitmIdArray.put(oTempJSONObject);
			}
			oInfoJSONObject.put("citmIds", oCitmIdArray);
			
			// *****************************************************************
			// Create thread to load detail
			AppThreadManager oAppThreadManager2 = new AppThreadManager();
			// Add the method to the thread manager
			// Thread 1 : Update target check
			// Create parameter array
			Object[] oParameters3 = new Object[5];
			oParameters3[0] = "split_table";
			oParameters3[1] = oHeaderJSONObject;
			oParameters3[2] = oInfoJSONObject;
			oParameters3[3] = AppGlobal.g_oCurrentLangIndex.get();
			oParameters3[4] = 0;
			oAppThreadManager2.addThread(1, oTargetFuncCheck.m_oCheck, "printSpecialSlip", oParameters3);
			
			// Run all of the threads
			oAppThreadManager2.runThread();
			
		}catch(JSONException jsone) {
			AppGlobal.stack2Log(jsone);
		}
		
		//Handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
		return true;
	}
	
	// Split Table
	public boolean updateSplitItems(String sFunctionKey, HashMap<FuncCheck, List<FuncCheckItem>> oSplitTableItemIndexList, int iSplitFromCheckId, DateTime oCurrentTime) {
		// Unlock the target check and table
		m_oCheck.setLockTime("");
		m_oCheck.setLockLocTime(null);
		m_oCheck.setLockUserId(0);
		m_oCheck.setLockStationId(0);
		m_oOutletTable.setStationId(AppGlobal.g_oFuncStation.get().getStationId());
		m_oOutletTable.setStatus(PosOutletTable.STATUS_OCCUPIED);

		DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		
		// Get current business period ID
		int iCurrentBusinessPeriodId = AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId();
		
		if(isOldCheck()) {
			// Old check
			
			m_oCheck.setModifiedLocTime(oCurrentTime);
			m_oCheck.setModifiedTime(formatter.print(oCurrentTime.withZone(DateTimeZone.UTC)));
			m_oCheck.setModifiedUesrId(AppGlobal.g_oFuncUser.get().getUserId());
			m_oCheck.setModifiedStationId(AppGlobal.g_oFuncStation.get().getStationId());
			
		}else {
			// New check
			
			//set check period ID
			m_oCheck.setBusinessPeriod(iCurrentBusinessPeriodId);
			
			//set open check local time and utc time
			m_oCheck.setOpenLocTime(oCurrentTime);
			m_oCheck.setOpenTime(formatter.print(oCurrentTime.withZone(DateTimeZone.UTC)));
		}
		
		/***** Handle Current Check *****/
		this.calcCheck();
		this.updateCheckItemSequence(false, true, 0);

		// Send old item first, then send new item
		if(updateCheck(true, true, 1, 1, true, 0, 0, 0, iSplitFromCheckId, false, false, false, false, 0, 0, false).equals(PosCheck.API_RESULT_SUCCESS)) {
			// Send new added item, no need to update check table and outlet table again
			if(!updateCheck(false, true, 0, 1, false, 0, 0, 0, iSplitFromCheckId, false, false, false, false, 0, 0, false).equals(PosCheck.API_RESULT_SUCCESS))
				return false;
		} else
			return false;

		// add action log
		for(Entry<FuncCheck, List<FuncCheckItem>> entry: oSplitTableItemIndexList.entrySet()) {
			FuncCheck oOriFuncCheck = entry.getKey();
			String sOriTable = oOriFuncCheck.getTableNo();
			String sOriTableExtension = oOriFuncCheck.getTableExtension();
			
			List<Integer> oTargetItemList = new ArrayList<Integer>();
			for(FuncCheckItem oCheckItem: entry.getValue()) {
				for(FuncCheckItem oCheckItem1: this.getItemList(oCheckItem.getCheckItem().getSeatNo())) {
					if(oCheckItem1 == oCheckItem) {
						if(!oCheckItem1.isPendingItem())
							oTargetItemList.add(oCheckItem1.getCheckItem().getCitmId());
		
						AppGlobal.g_oActionLog.get().addActionLog(sFunctionKey, PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), AppGlobal.g_oFuncStation.get().getStationId(), this.getCheckId(), 0, oCheckItem1.getCheckItem().getCitmId(), 0, 0, sOriTable+sOriTableExtension+" -> "+this.m_sTableNo+this.m_sTableExtension);
						
						break;
					}
				}
			}

			/***** Print Special Slip *****/
			//print action split
			JSONObject oHeaderJSONObject = new JSONObject(), oInfoJSONObject = new JSONObject(), oTempJSONObject = null;
			JSONArray oTempArray = new JSONArray(), oCitmIdArray = new JSONArray();
			try {
				//form header
				oHeaderJSONObject.put("header", "Split Table");
				oTempJSONObject = new JSONObject();
				String sMessage = sOriTable;
				if (!sOriTableExtension.isEmpty())
					sMessage += "("+sOriTableExtension+")";
				sMessage += " -> "+this.getTableNo();
				if (!this.getTableExtension().isEmpty())
					sMessage += "("+this.getTableExtension()+")";
				oTempJSONObject.put("message", sMessage);
				oTempArray.put(oTempJSONObject);
				oHeaderJSONObject.put("messages", oTempArray);
				
				//form info
				oInfoJSONObject.put("stationId", AppGlobal.g_oFuncStation.get().getStationId());
				oInfoJSONObject.put("userName", AppGlobal.g_oFuncUser.get().getUserName(AppGlobal.g_oCurrentLangIndex.get()));
				oInfoJSONObject.put("userId", AppGlobal.g_oFuncUser.get().getUserId());
				oInfoJSONObject.put("table", this.getTableNo());
				for(Integer id: oTargetItemList) {
					oTempJSONObject = new JSONObject();
					oTempJSONObject.put("id", id);
					oCitmIdArray.put(oTempJSONObject);
				}
				oInfoJSONObject.put("citmIds", oCitmIdArray);
				
				// *****************************************************************
				// Create thread to load detail
				AppThreadManager oAppThreadManager2 = new AppThreadManager();
				// Add the method to the thread manager
				// Thread 1 : Update target check
				// Create parameter array
				Object[] oParameters3 = new Object[5];
				oParameters3[0] = "split_table";
				oParameters3[1] = oHeaderJSONObject;
				oParameters3[2] = oInfoJSONObject;
				oParameters3[3] = AppGlobal.g_oCurrentLangIndex.get();
				oParameters3[4] = 0;
				oAppThreadManager2.addThread(1, m_oCheck, "printSpecialSlip", oParameters3);
				
				// Run all of the threads
				oAppThreadManager2.runThread();
				
			}catch(JSONException jsone) {
				AppGlobal.stack2Log(jsone);
			}
			
		}

		//Handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
		return true;
	}
	
	// Split Check by options
	public boolean splitCheckByOptions(List<FuncCheck> oTargetCheckList, List<BigDecimal> dSplitAmountList) {
		List<HashMap<FuncCheck, List<FuncCheckItem>>> oSplitTableItemIndexList = new ArrayList<HashMap<FuncCheck, List<FuncCheckItem>>>();
		BigDecimal dCurrentCheckTotal = this.getCheckTotal();
		
		for(FuncCheck oTargetCheck: oTargetCheckList) {
			HashMap<FuncCheck, List<FuncCheckItem>> oSplitTableItemList = new HashMap<FuncCheck, List<FuncCheckItem>>();
			oSplitTableItemList.put(this, new ArrayList<FuncCheckItem>());
			oSplitTableItemIndexList.add(oSplitTableItemList);
		}

		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oCheckItemList:oFuncCheckParty.getWholeItemList()){
				for(FuncCheckItem oCheckItem: oCheckItemList) {
					if(oCheckItem.isSetMenuItem())
						continue;
					
					BigDecimal dItemQty = oCheckItem.getCheckItem().getQty();
					BigDecimal dOriItemQty = dItemQty;
					int iSeatNo = oCheckItem.getCheckItem().getSeatNo();
					
					for(int i = 0; i < oTargetCheckList.size(); i++) {
						FuncCheck oTargetCheck = oTargetCheckList.get(i);
						BigDecimal dSplitAmount = dSplitAmountList.get(i);

						FuncCheckItem oNewCheckItem = new FuncCheckItem(oCheckItem, null);
						oNewCheckItem.resetAsNewItem();
						
						BigDecimal dNewItemQty = (dItemQty.multiply(dSplitAmount)).divide(dCurrentCheckTotal, 4, RoundingMode.HALF_UP);
						dNewItemQty = dNewItemQty.setScale(2, RoundingMode.FLOOR);
						
						oNewCheckItem.internalChangeQty(dNewItemQty);
						
						// Change item's check id
						oNewCheckItem.setSplitFromCheckId(oNewCheckItem.getCheckItem().getCheckId()); // Store the check id split from
						oNewCheckItem.changeCheckId(oTargetCheck.getCheckId());
						
						// Add the item to default party
						oNewCheckItem.changeCheckPartyId(0);
						
						oTargetCheck.addItemToItemList(iSeatNo, oTargetCheck.getItemListCount(iSeatNo)+1, oNewCheckItem);
						oSplitTableItemIndexList.get(i).get(this).add(oNewCheckItem);
	
						if (oCheckItem.isSetMenu()) {
							for (FuncCheckItem oChildCheckItem: oCheckItem.getChildItemList()) {
								int iChildSeatNo = oChildCheckItem.getCheckItem().getSeatNo();
								
								FuncCheckItem oNewChildCheckItem = new FuncCheckItem(oChildCheckItem, oNewCheckItem);
								oNewChildCheckItem.resetAsNewItem();
								
								oNewChildCheckItem.internalChangeQty(oNewChildCheckItem.getCheckItem().getBaseQty().multiply(dNewItemQty));
								
								// Change item's check id
								oNewChildCheckItem.changeCheckId(oTargetCheck.getCheckId());
								
								// Add the item to default party
								oNewChildCheckItem.changeCheckPartyId(0);
								
								oTargetCheck.addItemToItemList(iChildSeatNo, oTargetCheck.getItemListCount(iChildSeatNo)+1, oNewChildCheckItem);
								oSplitTableItemIndexList.get(i).get(this).add(oNewChildCheckItem);
							}
						}
						
						// Update quantity of original item
						dOriItemQty = dOriItemQty.subtract(dNewItemQty);
					}
					
					oCheckItem.internalChangeQty(dOriItemQty);
					oCheckItem.getCheckItem().setModified(true);
					if (oCheckItem.isSetMenu()) {
						for (FuncCheckItem oChildCheckItem: oCheckItem.getChildItemList()) {
							oChildCheckItem.internalChangeQty(oChildCheckItem.getCheckItem().getBaseQty().multiply(dOriItemQty));
							oChildCheckItem.getCheckItem().setModified(true);
						}
					}
				}
			}
		}
		
		// Get the processing time
		DateTime oCurrentTime = new DateTime();
		
		// Since the check number get from check number field in pos_station, can't use threading to handle multiple send check, otherwise the check number will be wrong
		boolean bResult = true;
		int iNewCheckCount = 0;
		for(int i = 0; i < oTargetCheckList.size(); i++) {
			FuncCheck oTargetCheck = oTargetCheckList.get(i);
			if(oTargetCheck.isOldCheck() == false){
				iNewCheckCount++;
			}
			// *** For all new checks, the open time MUST NOT the same because of the duplicate send check checking
			// *** So, the open time is incremented by 1 second for each check
			bResult = oTargetCheck.updateSplitItems(AppGlobal.FUNC_LIST.split_check_by_options.name(), oSplitTableItemIndexList.get(i), this.getCheckId(), oCurrentTime.plusSeconds(iNewCheckCount));
			if(!bResult)
				break;
		}
		
		// fail to split items
		if(!bResult) {
			m_sErrorMessage = AppGlobal.g_oLang.get()._("fail_to_split_check");
			return false;
		}
		
		// update current check
		this.calcCheck();
		if(!this.updateCheck(false, true, 1, 1, false, 0, 0, 0, 0, false, false, false, false, 0, 0, false).equals(PosCheck.API_RESULT_SUCCESS)) {
			m_sErrorMessage = AppGlobal.g_oLang.get()._("fail_to_update_check");
			return false;
		}
		
		return true;
	}

	// Merge table
	public boolean mergeTable(FuncCheck oFromFuncCheck, int iVoidCodeId) {
		int i = 0, j = 0, k = 0, itemCount = 0;
		JSONArray oCitmIdArray = new JSONArray();
		
		if (oFromFuncCheck == null)
			return false;
		
		// Loop the target check item list
		for(i=0; i<m_oFuncCheckPartyList.size(); i++){
			
			// Switch the current check party
			oFromFuncCheck.switchCheckParty(i);
			
			for(j=0; j<=MAX_SEATS; j++) {
				List<FuncCheckItem> oCheckItemList = oFromFuncCheck.getItemList(j);
				if(oCheckItemList.size() <= 0)
					continue;
				
				itemCount = oCheckItemList.size();
				for(k=(itemCount-1); k>=0; k--) {
					FuncCheckItem oTargetCheckItem = oFromFuncCheck.getCheckItem(j, 0);
					
					//add the check item id to JSONArray for printing special slip
					JSONObject oTempJSONObject = new JSONObject();
					if(!oTargetCheckItem.isPendingItem()) {
						try {
							oTempJSONObject.put("id", oTargetCheckItem.getCheckItem().getCitmId());
							oCitmIdArray.put(oTempJSONObject);
						}catch(JSONException jsone) {
							jsone.printStackTrace();
							AppGlobal.stack2Log(jsone);
						}
					}
					
					
					//remove the item from target table check
					oFromFuncCheck.removeItemFromList(j, 0);
					
					//add the item to this check
					int iCurrentItemCount = this.getItemListCount(j);
					oTargetCheckItem.changeCheckId(this.getCheckId());
					oTargetCheckItem.changeCheckPartyId(m_oCurrentFuncCheckParty.getCptyId());
					oTargetCheckItem.getCheckItem().setModified(true);
					this.addItemToItemList(j, (iCurrentItemCount+1), oTargetCheckItem);
					
					oFromFuncCheck.calcCheck();
					this.calcCheck();
				}
			}
		}
		
		//copy the information from target check to current check
		this.setCover(this.getCover()+oFromFuncCheck.getCover());
		
		oFromFuncCheck.calcCheck();
		oFromFuncCheck.m_oCheck.setLockLocTime(null);
		oFromFuncCheck.m_oCheck.setLockTime("");
		oFromFuncCheck.m_oCheck.setLockStationId(0);
		oFromFuncCheck.m_oCheck.setLockUserId(0);
		
		this.calcCheck();
		
		// *****************************************************************
		// Create thread to handle void slip
		AppThreadManager oAppThreadManager = new AppThreadManager();
		
		// Add the method to the thread manager
		// Thread 1 :
		// Create parameter array
		Object[] oParameters = new Object[6];
		oParameters[0] = iVoidCodeId;
		oParameters[1] = AppGlobal.g_oFuncUser.get().getUserId();
		oParameters[2] = AppGlobal.g_oFuncStation.get().getStationId();
		oParameters[3] = true;
		oParameters[4] = this.getCheckId();
		oParameters[5] = 0;
		oAppThreadManager.addThread(1, oFromFuncCheck, "voidCheck", oParameters);
		
		// Add the method to the thread manager
		// Thread 2 :
		// Create parameter array
		Object[] oParameters2 = new Object[16];
		oParameters2[0] = false;
		oParameters2[1] = true;
		oParameters2[2] = 1;
		oParameters2[3] = 2;
		oParameters2[4] = false;
		oParameters2[5] = 0;
		oParameters2[6] = 0;
		oParameters2[7] = 0;
		oParameters2[8] = oFromFuncCheck.getCheckId();
		oParameters2[9] = false;
		oParameters2[10] = false;
		oParameters2[11] = false;
		oParameters2[12] = false;
		oParameters2[13] = 0;
		oParameters2[14] = 0;
		oParameters2[15] = false;
		oAppThreadManager.addThread(2, this, "updateCheck", oParameters2);
		
		// Run all of the threads
		oAppThreadManager.runThread();

		// Wait for the thread to finish
		oAppThreadManager.waitForThread();
		
		boolean bVoidResult = (boolean) oAppThreadManager.getResult(1);
		String sUpdateResult = (String) oAppThreadManager.getResult(2);
		if(!bVoidResult || !sUpdateResult.equals(PosCheck.API_RESULT_SUCCESS))
            return false;
		
		//print special split
		JSONObject oHeaderJSONObject = new JSONObject(), oInfo1JSONObject = new JSONObject(), oInfo2JSONObject = new JSONObject(), oTempJSONObject = null;
		JSONArray oTempArray = new JSONArray();
		try {
			//form header
			oHeaderJSONObject.put("header", "Merge Table");
			oTempJSONObject = new JSONObject();
			oTempJSONObject.put("message", oFromFuncCheck.getTableNoWithExtensionForDisplay()+" -> "+this.getTableNoWithExtensionForDisplay() );
			oTempArray.put(oTempJSONObject);
			oHeaderJSONObject.put("messages", oTempArray);
			
			//form info for merge_table
			oInfo1JSONObject.put("stationId", AppGlobal.g_oFuncStation.get().getStationId());
			oInfo1JSONObject.put("userName", AppGlobal.g_oFuncUser.get().getUserName(AppGlobal.g_oCurrentLangIndex.get()));
			oInfo1JSONObject.put("userId", AppGlobal.g_oFuncUser.get().getUserId());
			oInfo1JSONObject.put("table", m_sTableNo);
			
			//form info for merge_table_item			
			oInfo2JSONObject.put("stationId", AppGlobal.g_oFuncStation.get().getStationId());
			oInfo2JSONObject.put("userName", AppGlobal.g_oFuncUser.get().getUserName(AppGlobal.g_oCurrentLangIndex.get()));
			oInfo2JSONObject.put("userId", AppGlobal.g_oFuncUser.get().getUserId());
			oInfo2JSONObject.put("table", m_sTableNo);
			oInfo2JSONObject.put("citmIds", oCitmIdArray);
			
			// *****************************************************************
			// Create thread to load detail
			AppThreadManager oAppThreadManager2 = new AppThreadManager();
			// Add the method to the thread manager
			// Thread 1 : print action slip "merge_table"
			// Create parameter array
			Object[] oParameters3 = new Object[5];
			oParameters3[0] = "merge_table";
			oParameters3[1] = oHeaderJSONObject;
			oParameters3[2] = oInfo1JSONObject;
			oParameters3[3] = AppGlobal.g_oCurrentLangIndex.get();
			oParameters3[4] = 0;
			oAppThreadManager2.addThread(1, m_oCheck, "printSpecialSlip", oParameters3);
			
			// Add the method to the thread manager
			// Thread 2 : print action slip "merge_table_item"
			// Create parameter array
			Object[] oParameters4 = new Object[5];
			oParameters4[0] = "merge_table_item";
			oParameters4[1] = oHeaderJSONObject;
			oParameters4[2] = oInfo2JSONObject;
			oParameters4[3] = AppGlobal.g_oCurrentLangIndex.get();
			oParameters4[4] = 0;
			oAppThreadManager2.addThread(2, m_oCheck, "printSpecialSlip", oParameters4);
			
			// Run all of the threads
			oAppThreadManager2.runThread();
		}catch(JSONException jsone) {
			AppGlobal.stack2Log(jsone);
		}
		
		//Add "merge_table" log to action log list
		AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.merge_table.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), 0, 0, 0, 0, oFromFuncCheck.getTableNoWithExtensionForDisplay()+" -> "+this.getTableNoWithExtensionForDisplay());
		
		// Send action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
		//unlock target table
		oFromFuncCheck.unlockTable(false, false);
		
		return true;
	}

	// Rush Order
	// *** Process current check party ONLY
	public int rushOrder(int iSeatNo, int iLineNo) {
		int iRushCount = 0;
		m_sErrorMessage = "";

		// Check whether selected item is new item
		FuncCheckItem oFuncCheckItem = getCheckItem(iSeatNo, iLineNo);
		if(!oFuncCheckItem.isOldItem()) {
			m_sErrorMessage = AppGlobal.g_oLang.get()._("invalid_for_new_items");
			return -1;
		}
		
		if(oFuncCheckItem.isPendingItem()) {
			m_sErrorMessage = AppGlobal.g_oLang.get()._("invalid_for_pending_items");
			return -1;
		}
		
		iRushCount = oFuncCheckItem.rushOrder(m_sTableNo);

		// update rush info of set menu's child item
		if(oFuncCheckItem.isSetMenu()) {
			for(FuncCheckItem oChildFuncCheckItem: oFuncCheckItem.getChildItemList()) {
				oChildFuncCheckItem.rushOrder(m_sTableNo);
			}
		}
		//update item database
		if(!updateCheck(false, true, 1, 0, false, 0, 0, 0, 0, false, false, false, false, 0, 0, false).equals(PosCheck.API_RESULT_SUCCESS)) {
			m_sErrorMessage = AppGlobal.g_oLang.get()._("fail_to_update_check");
			return -1;
		}
		
		oFuncCheckItem.processPrintRushOrderActionSlip(m_sTableNo);
		if(oFuncCheckItem.isSetMenu()) {
			for(FuncCheckItem oChildFuncCheckItem: oFuncCheckItem.getChildItemList()) {
				oChildFuncCheckItem.processPrintRushOrderActionSlip(m_sTableNo);
			}
		}
		
		return iRushCount;
	}
	
	public HashMap<FuncCheckItem, String> rushMultipleOrder(List<HashMap<String, Integer>> oSelectedItems){
		int iRushCount = 0;
		boolean bRushOrder = true;
		m_sErrorMessage = "";
		ArrayList<Integer> oItemIds = new ArrayList<>();
		ArrayList<Integer> oRepeatChildItemId = new ArrayList<>();
		HashMap<FuncCheckItem, String> oOrdersStatus = new HashMap<FuncCheckItem, String>();
		
		for(HashMap<String, Integer>oSelectedItem:oSelectedItems){
			// Check whether selected item is new item	
			FuncCheckItem oFuncCheckItem = getCheckItem(oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
			
			if(!oFuncCheckItem.isOldItem()) {
				m_sErrorMessage = AppGlobal.g_oLang.get()._("new_item");
				bRushOrder = false;
			}
			if(oFuncCheckItem.isPendingItem()) {
				m_sErrorMessage = AppGlobal.g_oLang.get()._("pending_item");
				bRushOrder = false;
			}
			
			if(!bRushOrder){
				oOrdersStatus.put(oFuncCheckItem, m_sErrorMessage);
			}else{
				//check menu item
				if(oFuncCheckItem.isSetMenu()){	
					//if yes, add item to rush order
					iRushCount = oFuncCheckItem.rushOrder(m_sTableNo);
					//add item to print slip queue
					oItemIds.add(oFuncCheckItem.getCheckItem().getCitmId());
					oOrdersStatus.put(oFuncCheckItem, AppGlobal.g_oLang.get()._("success"));
					//add child item to rush order
					for(FuncCheckItem oChildFuncCheckItem: oFuncCheckItem.getChildItemList()) {
						oChildFuncCheckItem.rushOrder(m_sTableNo);
						oItemIds.add(oChildFuncCheckItem.getCheckItem().getCitmId());
						//add child to repeated item id list
						oRepeatChildItemId.add(oChildFuncCheckItem.getCheckItem().getCitmId());
						oOrdersStatus.put(oChildFuncCheckItem, AppGlobal.g_oLang.get()._("success"));
					}		
				}else{
					//if not menu item, check if the child item id list is empty or not
					if(oRepeatChildItemId.size()>0){
						//child item id list is not empty, check whether item exists in child item id list
						//if not child item, add item to rush order, otherwise do nothing
						if(!oRepeatChildItemId.contains(oFuncCheckItem.getCheckItem().getCitmId())){
							iRushCount = oFuncCheckItem.rushOrder(m_sTableNo);
							//add item to print slip queue
							oItemIds.add(oFuncCheckItem.getCheckItem().getCitmId());
							oOrdersStatus.put(oFuncCheckItem, AppGlobal.g_oLang.get()._("success"));
						}
					}else{
						// if child item id list is empty, add item to rush order
						iRushCount = oFuncCheckItem.rushOrder(m_sTableNo);
						//add item to print slip queue
						oItemIds.add(oFuncCheckItem.getCheckItem().getCitmId());
						oOrdersStatus.put(oFuncCheckItem, AppGlobal.g_oLang.get()._("success"));
					}
				}
			}
		}
		
		//update item database
		if(!updateCheck(false, true, 1, 0, false, 0, 0, 0, 0, false, false, false, false, 0, 0, false).equals(PosCheck.API_RESULT_SUCCESS)) {
			m_sErrorMessage = AppGlobal.g_oLang.get()._("fail_to_update_check");
			return null;
		}
		
		// print multiple slip	
		processPrintMultiRushOrderActionSlip(oItemIds);
		
		return oOrdersStatus;	
	}
	
	public void processPrintMultiRushOrderActionSlip(ArrayList<Integer> oItemIds) {
		// print slip
		JSONObject oHeaderJSONObject = new JSONObject(), oInfoJSONObject = new JSONObject();
		try {
			//form the header
			oHeaderJSONObject.put("header", "Rush Order");
			
			//form the information of slip
			oInfoJSONObject.put("stationId", AppGlobal.g_oFuncStation.get().getStationId());
			oInfoJSONObject.put("userId", AppGlobal.g_oFuncUser.get().getUserId());
			oInfoJSONObject.put("userName", AppGlobal.g_oFuncUser.get().getUserName(AppGlobal.g_oCurrentLangIndex.get()));
			oInfoJSONObject.put("table", m_sTableNo);

			// Print rush order special slip
			m_oCheck.printMultiSpecialSlip(m_oCheck.getCheckId(), "rush_order", oHeaderJSONObject, oInfoJSONObject, oItemIds, AppGlobal.g_oCurrentLangIndex.get());
		}catch(JSONException jsone) {
			AppGlobal.stack2Log(jsone);
		}
	}
	
	// Mark delivery / clear mark delivery
	// *** Process current check party ONLY
	public void markDelivery(HashMap<Integer, Integer> oMarkDeliveryItemIds, HashMap<Integer, Integer> oClearMarkDeliveryItemIds){
	
		Boolean bNeedUpdateDatabaseBoolean = false;
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oCheckItemList:oFuncCheckParty.getWholeItemList()){
				for(FuncCheckItem oCheckItem:oCheckItemList) {
	
					if(oMarkDeliveryItemIds.containsKey(oCheckItem.getCheckItem().getCitmId())){
						// Mark delivery
						DateTime oMarkDeliveryDateTime = new DateTime();
						oCheckItem.getCheckItem().setDeliveryTime(oMarkDeliveryDateTime);
						
						oCheckItem.getCheckItem().setModified(true);
						
						bNeedUpdateDatabaseBoolean = true;
						
						// Add log to action log list
						AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.mark_delivery.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), oFuncCheckParty.getCptyId(), oCheckItem.getCheckItem().getCitmId(), 0, 0, "Mark delivery");
					}else
					if(oClearMarkDeliveryItemIds.containsKey(oCheckItem.getCheckItem().getCitmId())){
						// Clear mark delivery
						oCheckItem.getCheckItem().setDeliveryTime(null);
						
						oCheckItem.getCheckItem().setModified(true);
						
						bNeedUpdateDatabaseBoolean = true;
						
						// Add log to action log list
						AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.mark_delivery.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), oFuncCheckParty.getCptyId(), oCheckItem.getCheckItem().getCitmId(), 0, 0, "Clear mark delivery");
					}
				}
			}
		}
		
		if(bNeedUpdateDatabaseBoolean)
			updateCheck(false, true, 1, 0, false, 0, 0, 0, 0, false, false, false, false, 0, 0, false);
		
		//handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
	}
	
	public void updateCheckItemSequence(boolean bCurrentPartyOnly, boolean bAllSection, int iSection) {
		if(bCurrentPartyOnly){
			m_oCurrentFuncCheckParty.updateCheckItemSequence(bAllSection, iSection);
		}else{
			for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
				oFuncCheckParty.updateCheckItemSequence(bAllSection, iSection);
			}
		}
	}
	
	// Get no. of child in the item list
	// *** Process current check party ONLY
	public int getItemListCount(int iSeatNo){
		if(m_oCurrentFuncCheckParty.getWholeItemList().size() < iSeatNo) {
			m_oCurrentFuncCheckParty.getWholeItemList().add(new ArrayList<FuncCheckItem>());
			return 0;
		}
		
		return m_oCurrentFuncCheckParty.getItemListCount(iSeatNo);
	}
	
	// Get total quantity of ordered item
	public BigDecimal getOrderedItemCount(boolean bCurrentPartyOnly) {
		if(bCurrentPartyOnly){
			return m_oCurrentFuncCheckParty.getOrderedItemCount();
		}else{
			BigDecimal dItemCount = BigDecimal.ZERO;
			for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
				dItemCount = dItemCount.add(oFuncCheckParty.getOrderedItemCount());
			}
			
			return dItemCount;
		}
	}
	
	// Get total quantity of new item
	public BigDecimal getNewItemCount(boolean bCurrentPartyOnly) {
		if(bCurrentPartyOnly){
			return m_oCurrentFuncCheckParty.getNewItemCount();
		}else{
			BigDecimal dItemCount = BigDecimal.ZERO;
			for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
				dItemCount = dItemCount.add(oFuncCheckParty.getNewItemCount());
			}
			
			return dItemCount;
		}
	}
	
	// Get total line count of new unique item (i.e. item in different line with same menu item ID count 1)
	// *** Process current check party ONLY
	public int getNewUniqueItemCount() {
		return m_oCurrentFuncCheckParty.getNewUniqueItemCount();
	}
	
	// Get no. of child item in a item
	// *** Process current check party ONLY
	public int getChildItemListCount(int iSeatNo, int iItemIndex){
		return m_oCurrentFuncCheckParty.getChildItemListCount(iSeatNo, iItemIndex);
	}
	
	// Get no. of modifier in a item
	// *** Process current check party ONLY
	public int getModifierListCount(int iSeatNo, int iItemIndex){
		return m_oCurrentFuncCheckParty.getModifierListCount(iSeatNo, iItemIndex);
	}
	
	// Get no. of child in the item list
	// *** Process current check party ONLY
	public List<FuncCheckItem> getItemList(int iSeatNo){
		if(m_oCurrentFuncCheckParty == null)
			return null;
		
		return m_oCurrentFuncCheckParty.getItemList(iSeatNo);
	}
	
	// Get whole item list
	// *** Process current check party ONLY
	public List<List<FuncCheckItem>> getWholeItemList(){
		if(m_oCurrentFuncCheckParty == null)
			return null;
		
		return m_oCurrentFuncCheckParty.getWholeItemList();
	}
	
	// Set whole item list
	// *** Process current check party ONLY
	public void setWholeItemList(List<List<FuncCheckItem>> oItemList){
		if(m_oCurrentFuncCheckParty != null)
			m_oCurrentFuncCheckParty.setWholeItemList(oItemList);
	}
	
	// Get the FuncCheckItem by citm ID
	public FuncCheckItem getOrderedCheckItemByCitmId(int iCitmId) {
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oCheckItemList:oFuncCheckParty.getWholeItemList()){
				for(FuncCheckItem oFuncCheckItem:oCheckItemList) {
					if(!oFuncCheckItem.isOldItem())
						continue;
					
					if(oFuncCheckItem.getCheckItem().getCitmId() == iCitmId) {
						// Item found
						return oFuncCheckItem;
					}
				}
			}
		}
		
		return null;
	}
	
	// Get check item object
	// *** Process current check party ONLY
	public FuncCheckItem getCheckItem(int iSeatNo, int iItemIndex){
		return m_oCurrentFuncCheckParty.getCheckItem(iSeatNo, iItemIndex);
	}
	
	// Get check item object with party seq
	public FuncCheckItem getCheckItem(int iPartySeq, int iSeatNo, int iItemIndex){
		if(m_oFuncCheckPartyList.size() <= iPartySeq)
			return null;
		
		return m_oFuncCheckPartyList.get(iPartySeq).getCheckItem(iSeatNo, iItemIndex);
	}
	
	// Get last general item in current check party
	public int getLastGeneralCheckItemItemIndex(int iSeatNo){
		int iIndex = 0;
		for (iIndex = m_oCurrentFuncCheckParty.getWholeItemList().get(iSeatNo).size() - 1; iIndex >= 0; iIndex--) {
			FuncCheckItem oFuncCheckItemInSeat = m_oCurrentFuncCheckParty.getWholeItemList().get(iSeatNo).get(iIndex);
			if(!(oFuncCheckItemInSeat.isModifierItem() || oFuncCheckItemInSeat.isSetMenuItem())){
				break;
			}
	    }
		
		return iIndex;
	}
	
	// Change item form the check
	public boolean changeItemQty(int iSeatNo, int iLineNo, String sTable, String sTableExtension, BigDecimal dNewQty, boolean bUpdateItemCount){
		BigDecimal dOriginalQty = BigDecimal.ZERO;
		FuncCheckItem oFuncCheckItem = null;

		m_sErrorMessage = "";
		
		// parent item
		oFuncCheckItem = (FuncCheckItem) m_oCurrentFuncCheckParty.getCheckItem(iSeatNo, iLineNo);
		dOriginalQty = oFuncCheckItem.getCheckItem().getQty();
		
		// Get the items seat no. and line no. pair for delete later
		TreeMap<String, BigDecimal> oSeatNoLineNoPairs = new TreeMap<String, BigDecimal>();
		// Parent item
		String sKey = StringLib.IntToStringWithLeadingZero(iSeatNo, 3) + "_" + StringLib.IntToStringWithLeadingZero(iLineNo, 5);
		oSeatNoLineNoPairs.put(sKey, dOriginalQty.subtract(dNewQty));
		if(oFuncCheckItem.isSetMenu() && oFuncCheckItem.hasChildItem()) {
			// Child item
			for(FuncCheckItem oChildFuncCheckItem:oFuncCheckItem.getChildItemList()) {
				int iChildSeatNo = oChildFuncCheckItem.getCheckItem().getSeatNo();
				int iChildItemIndex = 0;
				for(FuncCheckItem oChildFuncCheckItem2:m_oCurrentFuncCheckParty.getItemList(iChildSeatNo)) {
					if(oChildFuncCheckItem == oChildFuncCheckItem2) {
						sKey = StringLib.IntToStringWithLeadingZero(iChildSeatNo, 3) + "_" + StringLib.IntToStringWithLeadingZero(iChildItemIndex, 5);
						oSeatNoLineNoPairs.put(sKey, oChildFuncCheckItem.getCheckItem().getQty().subtract(oChildFuncCheckItem.getCheckItem().getBaseQty().multiply(dNewQty)));
						break;
					}
					iChildItemIndex++;
				}
			}
		}
		
		// update item count
		if(bUpdateItemCount) {
			boolean bRollBackItemCount = false;
			TreeMap<String, BigDecimal> oRollBackSeatNoPairs = new TreeMap<String, BigDecimal>();
			FuncCheckItem oItmCntFuncCheckItem = null;
			BigDecimal dDifferentQty = null;
			
			for(Entry<String, BigDecimal> entry:oSeatNoLineNoPairs.entrySet()) {
				String split[] = entry.getKey().split("_");
				int iItmCntSeatNo = Integer.parseInt(split[0]);
				int iItmCntLineNo = Integer.parseInt(split[1]);
				dDifferentQty = entry.getValue();
				oItmCntFuncCheckItem = (FuncCheckItem) m_oCurrentFuncCheckParty.getCheckItem(iItmCntSeatNo, iItmCntLineNo);
				
				String sItmCntResult = "";
				String sErrMsg = "";
				if(dDifferentQty.compareTo(BigDecimal.ZERO) > 0) {
					sItmCntResult = this.updateItemCount(oItmCntFuncCheckItem.getMenuItemId(), dDifferentQty, false, false, false);
				}else {
					sItmCntResult = this.updateItemCount(oItmCntFuncCheckItem.getMenuItemId(), dDifferentQty.multiply(new BigDecimal("-1.0")), true, false, false);
				}
				
				if(sItmCntResult.equals("s")) {
					if(AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.no_display.name())) {
						bRollBackItemCount = true;
						break;
					}
					
					//Prompt error
					sErrMsg = AppGlobal.g_oLang.get()._("item")+":"+oItmCntFuncCheckItem.getItemShortDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get())+" "+AppGlobal.g_oLang.get()._("sold_out")+", "+AppGlobal.g_oLang.get()._("continue_to_order")+"?";
					FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("ok"), AppGlobal.g_oLang.get()._("cancel"), null);
					oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("item_count_control"));
					oFormConfirmBox.setMessage(sErrMsg);
					oFormConfirmBox.showAndWait();
					
					if(oFormConfirmBox.isOKClicked()) {
						if(dDifferentQty.compareTo(BigDecimal.ZERO) > 0) {
							this.updateItemCount(oItmCntFuncCheckItem.getMenuItemId(), dDifferentQty, false, true, false);
						}else {
							this.updateItemCount(oItmCntFuncCheckItem.getMenuItemId(), dDifferentQty.multiply(new BigDecimal("-1.0")), true, true, false);
						}
					}else {
						bRollBackItemCount = true;
						break;
					}
				}else if (sItmCntResult.equals("<")) {
					if(AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.no_display.name())) {
						bRollBackItemCount = true;
						break;
					}
					
					//Prompt error
					sErrMsg = AppGlobal.g_oLang.get()._("dont_have_enough_stock")+", "+AppGlobal.g_oLang.get()._("item")+":"+oItmCntFuncCheckItem.getItemShortDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get())+", "+AppGlobal.g_oLang.get()._("continue_to_order")+"?";
					FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("ok"), AppGlobal.g_oLang.get()._("cancel"), null);
					oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("item_count_control"));
					oFormConfirmBox.setMessage(sErrMsg);
					oFormConfirmBox.showAndWait();
					
					if(oFormConfirmBox.isOKClicked()) {
						if(dDifferentQty.compareTo(BigDecimal.ZERO) > 0) {
							this.updateItemCount(oItmCntFuncCheckItem.getMenuItemId(), dDifferentQty, false, true, false);
						}else {
							this.updateItemCount(oItmCntFuncCheckItem.getMenuItemId(), dDifferentQty.multiply(new BigDecimal("-1.0")), true, true, false);
						}
					}else {	
						bRollBackItemCount = true;
						break;
					}
				}else if (sItmCntResult.equals("-s") || sItmCntResult.equals("-<")) {
					if(dDifferentQty.compareTo(BigDecimal.ZERO) > 0) {
						this.updateItemCount(oItmCntFuncCheckItem.getMenuItemId(), dDifferentQty, false, true, false);
					}else {
						this.updateItemCount(oItmCntFuncCheckItem.getMenuItemId(), dDifferentQty.multiply(new BigDecimal("-1.0")), true, true, false);
					}
				}
				
				for (FuncCheckListener listener : listeners) {
					listener.FuncCheck_updateItemStockQty(oItmCntFuncCheckItem.getMenuItemId());
				}
				
				oRollBackSeatNoPairs.put(entry.getKey(), entry.getValue());
			}
			
			if(bRollBackItemCount) {
				if(oRollBackSeatNoPairs.size() > 0) {
					FuncCheckItem oRollBackFuncCheckItem = null;
					for(Entry<String, BigDecimal> entry:oRollBackSeatNoPairs.entrySet()) {
						String split[] = entry.getKey().split("_");
						int iRollBackSeatNo = Integer.parseInt(split[0]);
						int iRollBackLineNo = Integer.parseInt(split[1]);
						dDifferentQty = entry.getValue();
						oRollBackFuncCheckItem = (FuncCheckItem) m_oCurrentFuncCheckParty.getCheckItem(iRollBackSeatNo, iRollBackLineNo);
						
						if(dDifferentQty.compareTo(BigDecimal.ZERO) > 0) {
							this.updateItemCount(oRollBackFuncCheckItem.getMenuItemId(), dDifferentQty, true, true, false);
						}else {
							this.updateItemCount(oRollBackFuncCheckItem.getMenuItemId(), dDifferentQty.multiply(new BigDecimal("-1.0")), false, true, false);
						}
						
						for (FuncCheckListener listener : listeners) {
							listener.FuncCheck_updateItemStockQty(oRollBackFuncCheckItem.getMenuItemId());
						}
					}
				}
				return false;
			}
			
		}
		
		FuncCheckItem oChgQtyFuncCheckItem = null;
		List<FuncCheckItem> oChgQtyFuncCheckItemList = new ArrayList<FuncCheckItem>();
		for(Entry<String, BigDecimal> entry:oSeatNoLineNoPairs.entrySet()) {
			String split[] = entry.getKey().split("_");
			int iItmCntSeatNo = Integer.parseInt(split[0]);
			int iItmCntLineNo = Integer.parseInt(split[1]);
			oChgQtyFuncCheckItem = (FuncCheckItem) m_oCurrentFuncCheckParty.getCheckItem(iItmCntSeatNo, iItmCntLineNo);
			
			if(!oChgQtyFuncCheckItem.changeQty(sTable, sTableExtension, dOriginalQty, dNewQty)) {
				calcCheck();
				return false;
			}
			
			// store old items for print special slip after check update
			if(oChgQtyFuncCheckItem.isOldItem())
				oChgQtyFuncCheckItemList.add(oChgQtyFuncCheckItem);
		}
		
		// re-calculate the check before update check
		calcCheck();
		if(isOldCheck()) {
			if(oFuncCheckItem.isOldItem()) {
				oFuncCheckItem.getCheckItem().setModified(true);
				if(m_bStockDeliveryInvoice)
					oFuncCheckItem.getStockDeliveryInvoiceItem().setModified(true);
				if(m_oCurrentFuncCheckParty.hasPartyCheckDiscount()) {
					for(List<FuncCheckItem> oItemList:m_oCurrentFuncCheckParty.getWholeItemList()){
						for (FuncCheckItem oCheckItem:oItemList) {
							if(oCheckItem.isOldItem())
								oCheckItem.getCheckItem().setModified(true);
						}
					}
				}

				if(updateCheck(false, true, 1, 0, false, 0, 0, 0, 0, false, false, false, false, 0, 0, false).equals(PosCheck.API_RESULT_SUCCESS)) {
					for(FuncCheckItem oTmpFuncCheckItem: oChgQtyFuncCheckItemList) {
						if(!oTmpFuncCheckItem.isPendingItem())
							oTmpFuncCheckItem.processPrintChangeQtyActionSlip(sTable, sTableExtension, dOriginalQty.stripTrailingZeros().toPlainString(), dNewQty.stripTrailingZeros().toPlainString());
					}
				} else
					return false;
			}
		}
		
		return true;
	}
	
	// Change item receiving quantity for stock delivery control
	public boolean changeItemReceiveQty(int iSeatNo, int iLineNo, String sTable, String sTableExtension, BigDecimal dNewQty){
		FuncCheckItem oFuncCheckItem = null;

		m_sErrorMessage = "";
		
		oFuncCheckItem = (FuncCheckItem) m_oCurrentFuncCheckParty.getCheckItem(iSeatNo, iLineNo);
		PosStockDeliveryInvoiceItem oPosStockDeliveryInvoiceItem = oFuncCheckItem.getStockDeliveryInvoiceItem();
		oPosStockDeliveryInvoiceItem.setActualReceivedQty(dNewQty);
				
		if(isOldCheck()) {
			if(oFuncCheckItem.isOldItem()) {
				oFuncCheckItem.getCheckItem().setModified(true);
				oPosStockDeliveryInvoiceItem.setModified(true);
				updateCheck(false, true, 1, 0, false, 0, 0, 0, 0, false, false, false, false, 0, 0, false);
			}else
				updateCheck(false, false, 0, 0, false, 0, 0, 0, 0, false, false, false, false, 0, 0, false);
		}
		
		return true;
	}
	
	// Change item course no.
	public boolean changeItemCourse(int iSeatNo, int iLineNo, int iNewCourseId){
		FuncCheckItem oFuncCheckItem = null;

		m_sErrorMessage = "";
		
		oFuncCheckItem = (FuncCheckItem) m_oCurrentFuncCheckParty.getCheckItem(iSeatNo, iLineNo);
		oFuncCheckItem.getCheckItem().setCourseId(iNewCourseId);
		
		if(isOldCheck()) {
			if(oFuncCheckItem.isOldItem()) {
				oFuncCheckItem.getCheckItem().setModified(true);
			}
		}
		
		return true;
	}
	
	// Delete item from the check
	public boolean deleItem(BigDecimal dQty, int iSeatNo, int iLineNo, int iVoidCodeId, String sVoidReasonName){
		FuncCheckItem oFuncCheckItem = null;
		BigDecimal dOriQty = BigDecimal.ZERO;
		//ArrayList<Integer> childItemIds = null;
		
		m_sErrorMessage = "";
		
		oFuncCheckItem = (FuncCheckItem) m_oCurrentFuncCheckParty.getCheckItem(iSeatNo, iLineNo);
		dOriQty = oFuncCheckItem.getCheckItem().getQty();
		// Get the items seat no. and line no. pair for delete later
		TreeMap<String, Integer> oSeatNoLineNoPairs = new TreeMap<String, Integer>(Collections.reverseOrder());
		// Parent item
		String sKey = StringLib.IntToStringWithLeadingZero(iSeatNo, 3) + "_" + StringLib.IntToStringWithLeadingZero(iLineNo, 5);
		oSeatNoLineNoPairs.put(sKey, 0);
		// Child items
		/*if(oFuncCheckItem.isOldItem() && oFuncCheckItem.hasChildItem()) {
			childItemIds = new ArrayList<Integer>();
			childItemIds.add(Integer.valueOf(oFuncCheckItem.getCheckItem().getCitmId()));
		}*/

		for (FuncCheckItem oChildFuncCheckItem: oFuncCheckItem.getChildItemList()) {
			int iChildSeatNo = oChildFuncCheckItem.getCheckItem().getSeatNo();
			int iChildLineNo = oChildFuncCheckItem.getCheckItem().getSeq();
			BigDecimal dChildQty = oChildFuncCheckItem.getCheckItem().getBaseQty().multiply(dQty);

			this.updateItemCount(oChildFuncCheckItem.getMenuItemId(), dChildQty, false, false, false);
			for (FuncCheckListener listener : listeners) {
				listener.FuncCheck_updateItemStockQty(oChildFuncCheckItem.getMenuItemId());
			}
			/*for(FuncCheckItem oChildFuncCheckItem2:m_oCurrentFuncCheckParty.getItemList(iChildSeatNo)){
				if(oChildFuncCheckItem == oChildFuncCheckItem2){
					iChildLineNo = iIndex;
					/*if(oFuncCheckItem.isOldItem())
						childItemIds.add(Integer.valueOf(oChildFuncCheckItem2.getCheckItem().getCitmId()));
					//update child item count
					break;
				}
				iIndex++;
			}*/
			
			if(iChildLineNo > 0){
				int iChildLineIndex = iChildLineNo - 1;
				sKey = StringLib.IntToStringWithLeadingZero(iChildSeatNo, 3) + "_" + StringLib.IntToStringWithLeadingZero(iChildLineIndex, 5);
				oSeatNoLineNoPairs.put(sKey, 0);
			}
		}

		//update item count
		this.updateItemCount(oFuncCheckItem.getMenuItemId(), dQty, false, false, false);
		for (FuncCheckListener listener : listeners) {
			listener.FuncCheck_updateItemStockQty(oFuncCheckItem.getMenuItemId());
		}
		
		ArrayList<Integer> oCheckDiscountItemIds = new ArrayList<Integer>();
		if(oFuncCheckItem.voidItem(this, dQty, iVoidCodeId, sVoidReasonName, this.getTableNo(), this.getTableExtension(), oCheckDiscountItemIds) == false){
			m_sErrorMessage = oFuncCheckItem.getLastErrorMessage();
			return false;
		}
		
		// print special slip
		updateCheckItemSequence(true, true, 0);	
		if(oFuncCheckItem.isOldItem()) {
			if(m_oCurrentFuncCheckParty.hasPartyCheckDiscount()) {
				for(List<FuncCheckItem> oItemList:m_oCurrentFuncCheckParty.getWholeItemList()){
					for (FuncCheckItem oCheckItem:oItemList) {
						if(oCheckItem.isOldItem())
							oCheckItem.getCheckItem().setModified(true);
					}
				}
			}
			if(!updateCheck(false, true, 1, 0, false, 0, 0, 0, 0, false, false, false, false, 0, 0, false).equals(PosCheck.API_RESULT_SUCCESS)) {
				m_sErrorMessage = AppGlobal.g_oLang.get()._("fail_to_delete_item");
				return false;
			}
			
			//delete item's check discount item record
			if(oCheckDiscountItemIds.size() > 0) {
				PosCheckDiscountItem oCheckDiscountItem = new PosCheckDiscountItem();
				oCheckDiscountItem.deleteByIds(oCheckDiscountItemIds);
			}
			
			if(!oFuncCheckItem.isPendingItem()) {
				try {
					JSONObject oHeaderJSONObject = new JSONObject(), oInfoJSONObject = new JSONObject(), oTempJSONObject = null;
					JSONArray oTempJSONArray = null;
					
					//form header
					oHeaderJSONObject.put("header", "DeleteItem");
					oTempJSONArray = new JSONArray();
					oTempJSONObject = new JSONObject();
					oTempJSONObject.put("message", iVoidCodeId);
					oTempJSONArray.put(oTempJSONObject);
					oHeaderJSONObject.put("messages", oTempJSONArray);
					
					//form info
					oInfoJSONObject.put("stationId", AppGlobal.g_oFuncStation.get().getStationId());
					oInfoJSONObject.put("userId", AppGlobal.g_oFuncUser.get().getUserId());
					oInfoJSONObject.put("userName", AppGlobal.g_oFuncUser.get().getUserName(1));
					oInfoJSONObject.put("table", m_sTableNo + m_sTableExtension);
					oTempJSONArray = new JSONArray();
					oTempJSONObject = new JSONObject();
					oTempJSONObject.put(String.valueOf(oFuncCheckItem.getCheckItem().getCitmId()), dQty);
					oTempJSONArray.put(oTempJSONObject);
					oInfoJSONObject.put("removeQty", oTempJSONArray);
					
					// *****************************************************************
					// Create thread to print special slip
					AppThreadManager oAppThreadManager = new AppThreadManager();
					
					// Add the method to the thread manager
					// Thread 1 : Print special slip
					// Create parameter array
					Object[] oParameters = new Object[6];
					oParameters[0] = getCheckId();
					oParameters[1] = "delete_item";
					oParameters[2] = oHeaderJSONObject;
					oParameters[3] = oInfoJSONObject;
					oParameters[4] = null;
					oParameters[5] = AppGlobal.g_oCurrentLangIndex.get();
					oAppThreadManager.addThread(1, oFuncCheckItem.getCheckItem(), "printSpecialSlip", oParameters);
					
					// Run the thread without wait
					oAppThreadManager.runThread();
				}catch(JSONException jsone) {
					AppGlobal.stack2Log(jsone);
				}
			}
		}
		
		//update coupon status if it is coupon item
		if(oFuncCheckItem.isCouponItem()) {
			FuncCoupon oCoupon = new FuncCoupon();
			oCoupon.setStartCoupon(oFuncCheckItem.getExtraInfoBySectionAndVariable("online_coupon", "sell_start_coupon"));
			oCoupon.setEndCoupon(oFuncCheckItem.getExtraInfoBySectionAndVariable("online_coupon", "sell_end_coupon"));
			oCoupon.setCouponCurrentStatus(FuncCoupon.COUPON_STATUS_LOCKED);
			oCoupon.setCouponNextStatus(FuncCoupon.COUPON_STATUS_NEW);
			
			oCoupon.updateCoupon(FuncCoupon.UPDATE_COUPON_TYPE_ORDER_ITEM);
		}
		
		//really remove item form list
		if (dQty.compareTo(dOriQty) == 0){
			for(Entry<String, Integer> entry:oSeatNoLineNoPairs.entrySet()){
				String split[] = entry.getKey().split("_");
				int iRemoveSeatNo = Integer.parseInt(split[0]);
				int iRemoveLineNo = Integer.parseInt(split[1]);
				m_oCurrentFuncCheckParty.getItemList(iRemoveSeatNo).remove(iRemoveLineNo);
			}
			
			//re-sequence the item
			updateCheckItemSequence(true, true, 0);
		}
		
		calcCheck();
		
		return true;
	}
	
	// Delete multiple from the check
	public boolean deleMultipleItems(List<HashMap<String, Integer>> oSelectedItems, int iVoidCodeId, String sVoidReasonName) {
		int iSectionId = 0, iItemIndex = 0;
		FuncCheckItem oFuncCheckItem = null;
		BigDecimal dQty = null;
		List<Integer> oSlipItemIds = new ArrayList<Integer>();
		HashMap<Integer, BigDecimal> oSlipItemQtys = new HashMap<Integer, BigDecimal>();
		List<HashMap<String, String>> oUpdateItemCntList = new ArrayList<HashMap<String, String>>();
		ArrayList<Integer> oCheckDiscItemIdsForDeletedItems = new ArrayList<Integer>();
		
		if(oSelectedItems.size() == 0)
			return false;
		
		for(HashMap<String, Integer> oSelectedItem:oSelectedItems) {
			iSectionId = 0;
			iItemIndex = 0;
			
			iSectionId = oSelectedItem.get("sectionId");
			iItemIndex = oSelectedItem.get("itemIndex");
			
			if(oSelectedItem.get("setMenuItem") == 1)
				continue;
			
			oFuncCheckItem = (FuncCheckItem) m_oCurrentFuncCheckParty.getCheckItem(iSectionId, iItemIndex);
			dQty = oFuncCheckItem.getCheckItem().getQty();
			
			// pre-handle update item count
			HashMap<String, String> oUpdateItemCnt = new HashMap<String, String>();
			oUpdateItemCnt.put("itemId", String.valueOf(oFuncCheckItem.getCheckItem().getItemId()));
			oUpdateItemCnt.put("qty", dQty.toPlainString());
			oUpdateItemCntList.add(oUpdateItemCnt);
			
			// void item
			ArrayList<Integer> oCheckDiscountItemIds = new ArrayList<Integer>();
			if(oFuncCheckItem.voidItem(this, dQty, iVoidCodeId, sVoidReasonName, m_sTableNo, m_sTableExtension, oCheckDiscountItemIds) == false) 
				continue;
			
			for(Integer oCheckDiscItemId : oCheckDiscountItemIds) 
				oCheckDiscItemIdsForDeletedItems.add(oCheckDiscItemId);
			
			// re-sequence the item
			updateCheckItemSequence(true, true, 0);
			
			// update coupon status
			if(oFuncCheckItem.isCouponItem()) {
				FuncCoupon oCoupon = new FuncCoupon();
				oCoupon.setStartCoupon(oFuncCheckItem.getExtraInfoBySectionAndVariable("online_coupon", "sell_start_coupon"));
				oCoupon.setEndCoupon(oFuncCheckItem.getExtraInfoBySectionAndVariable("online_coupon", "sell_end_coupon"));
				oCoupon.setCouponCurrentStatus(FuncCoupon.COUPON_STATUS_LOCKED);
				oCoupon.setCouponNextStatus(FuncCoupon.COUPON_STATUS_NEW);
				
				oCoupon.updateCoupon(FuncCoupon.UPDATE_COUPON_TYPE_ORDER_ITEM);
			}
			
			if(iVoidCodeId != 0 && sVoidReasonName != null) {
				if(!oFuncCheckItem.isPendingItem()) {
					oSlipItemIds.add(Integer.valueOf(oFuncCheckItem.getCheckItem().getCitmId()));
					oSlipItemQtys.put(Integer.valueOf(oFuncCheckItem.getCheckItem().getCitmId()), oFuncCheckItem.getCheckItem().getQty());
				}
				
				/*if(oFuncCheckItem.hasChildItem()) {
					for(FuncCheckItem oChildFuncCheckItem:oFuncCheckItem.getChildItemList()){
						oSlipItemIds.add(Integer.valueOf(oChildFuncCheckItem.getCheckItem().getCitmId()));
						oSlipItemQtys.put(Integer.valueOf(oChildFuncCheckItem.getCheckItem().getCitmId()), oChildFuncCheckItem.getCheckItem().getQty());
					}
				}*/
				
				// Add log to action log list
				AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.delete_multiple_item.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId() , AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), 0, oFuncCheckItem.getCheckItem().getCitmId(), 0, 0, "");
			}
		}
		
		//handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
		//update item count
		if(oUpdateItemCntList.size() > 0) {
			updateMultipleItemCount(oUpdateItemCntList, false, false, false);
			for(HashMap<String, String> oUpdateItemCnt:oUpdateItemCntList) {
				for(FuncCheckListener listener : listeners) {
					listener.FuncCheck_updateItemStockQty(Integer.valueOf(oUpdateItemCnt.get("itemId")));
				}
			}
		}
		
		calcCheck();
		
		if(iVoidCodeId != 0 && sVoidReasonName != null) {
			if(!this.updateCheck(false, true, 1, 0, false, 0, 0, 0, 0, false, false, false, false, 0, 0, false).equals(PosCheck.API_RESULT_SUCCESS))
				return false;
			
			//delete the deleted item's check discount item records
			if(oCheckDiscItemIdsForDeletedItems.size() > 0) {
				PosCheckDiscountItem oCheckDiscountItem = new PosCheckDiscountItem();
				oCheckDiscountItem.deleteByIds(oCheckDiscItemIdsForDeletedItems);
			}
			
			if(oSlipItemIds.size() > 0) {
				try {
					JSONObject oHeaderJSONObject = new JSONObject(), oInfoJSONObject = new JSONObject(), oTempJSONObject = null;
					JSONArray oTempJSONArray = null;
					
					// form header
					oHeaderJSONObject.put("header", "delete_item");
					oTempJSONArray = new JSONArray();
					oTempJSONObject = new JSONObject();
					oTempJSONObject.put("message", iVoidCodeId);
					oTempJSONArray.put(oTempJSONObject);
					oHeaderJSONObject.put("messages", oTempJSONArray);
					
					// form info
					oInfoJSONObject.put("stationId", AppGlobal.g_oFuncStation.get().getStationId());
					oInfoJSONObject.put("userId", AppGlobal.g_oFuncUser.get().getUserId());
					oInfoJSONObject.put("userName", AppGlobal.g_oFuncUser.get().getUserName(1));
					oInfoJSONObject.put("table", m_sTableNo + m_sTableExtension);
					oTempJSONArray = new JSONArray();
					for(Integer iCitmId:oSlipItemIds) {
						oTempJSONObject = new JSONObject();
						oTempJSONObject.put(String.valueOf(iCitmId), oSlipItemQtys.get(iCitmId));
						oTempJSONArray.put(oTempJSONObject);
					}
					oInfoJSONObject.put("removeQty", oTempJSONArray);
					
					// *****************************************************************
					// Create thread to print special slip
					AppThreadManager oAppThreadManager = new AppThreadManager();
					
					// Add the method to the thread manager
					// Thread 1 : Print special slip
					// Create parameter array
					Object[] oParameters = new Object[6];
					oParameters[0] = getCheckId();
					oParameters[1] = "delete_item";
					oParameters[2] = oHeaderJSONObject;
					oParameters[3] = oInfoJSONObject;
					oParameters[4] = oSlipItemIds;
					oParameters[5] = AppGlobal.g_oCurrentLangIndex.get();
					oAppThreadManager.addThread(1, oFuncCheckItem.getCheckItem(), "printSpecialSlip", oParameters);
					
					// Run the thread without wait
					oAppThreadManager.runThread();				
				}catch(JSONException jsone) {
					AppGlobal.stack2Log(jsone);
				}
			}
		}
		
		// remove the item form list
		for(HashMap<String, Integer> oSelectedItem:oSelectedItems) {
			iSectionId = oSelectedItem.get("sectionId");
			iItemIndex = oSelectedItem.get("itemIndex");
			m_oCurrentFuncCheckParty.getItemList(iSectionId).remove(iItemIndex);			
		}
		
		// re-sequence the item
		updateCheckItemSequence(true, true, 0);
		
		return true;
	}
	
	public boolean deleModifier(BigDecimal dQty, int iSeatNo, int iLineNo, int iModifierIndex, int iVoidCodeId){
		FuncCheckItem oFuncCheckItem = null;
		
		m_sErrorMessage = "";
		
		oFuncCheckItem = (FuncCheckItem) m_oCurrentFuncCheckParty.getCheckItem(iSeatNo, iLineNo);
		oFuncCheckItem.voidModifier(iModifierIndex, dQty, iVoidCodeId);

		calcCheck();
				
		return true;
	}
	
	// Delete item from the check
	public boolean deleNewChildItemFromItem(int iSeatNo, int iLineNo, int iChildItemIndex){
		FuncCheckItem oFuncCheckItem = null, oChildCheckItem = null;
		
		m_sErrorMessage = "";
		
		oFuncCheckItem = (FuncCheckItem) m_oCurrentFuncCheckParty.getCheckItem(iSeatNo, iLineNo);
		oChildCheckItem = oFuncCheckItem.getChildItemList().get(iChildItemIndex);
		this.updateItemCount(oChildCheckItem.getMenuItemId(), oChildCheckItem.getCheckItem().getQty(), false, false, false);
		for (FuncCheckListener listener : listeners) {
			listener.FuncCheck_updateItemStockQty(oChildCheckItem.getMenuItemId());
		}
		oFuncCheckItem.deleteChildItemFromList(iChildItemIndex);

		calcCheck();
				
		return true;
	}
	
	// Delete payment from the check
	public boolean deleAllOldPaymentFromCheck(int iVdrsId) {
		DateTime dtVoidDateTime = new DateTime();
		DateTimeFormatter voidFormatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		
		if(m_oCheckPaymentList.size() == 0)
			return false;
		
		for(PosCheckPayment oCheckPayment: m_oCheckPaymentList) {
			if(oCheckPayment.getCpayId() == 0)
				continue;
			
			if(oCheckPayment.isDelete())
				continue;
			
			oCheckPayment.setVoidUserId(AppGlobal.g_oFuncUser.get().getUserId());
			oCheckPayment.setVoidStatId(AppGlobal.g_oFuncStation.get().getStationId());
			oCheckPayment.setVoidVdrsId(iVdrsId);
			oCheckPayment.setVoidLocTime(dtVoidDateTime);
			oCheckPayment.setVoidTime(voidFormatter.print(dtVoidDateTime.withZone(DateTimeZone.UTC)));
			oCheckPayment.setStatus(PosCheckPayment.STATUS_DELETED);
		}
		
		//reset payment and tips amount
		m_oCheck.setPaymentTotal(BigDecimal.ZERO);
		m_oCheck.setTipsTotal(BigDecimal.ZERO);
		
		return true;
	}
	
	// Add/Waive service charge
	public boolean addWaiveScTax(boolean bAddScTax, List<HashMap<String, Integer>> oSelectedItems, boolean[] bChosenSc, boolean[] bChosenTax) {
		FuncCheckItem oFuncCheckItem = null;
		
		// Handle inclusive SC/Tax no breakdown add/waive SC/Tax pre-process
		boolean bNeedCheckReCalculation = false;
		for(HashMap<String, Integer> oSelectedItem:oSelectedItems) {
			oFuncCheckItem = (FuncCheckItem) this.getCheckItem(oSelectedItem.get("partySeq"), oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
			if(oFuncCheckItem.addWaiveScTaxPreProcessForInclusiveTaxSCNoBreakdown(bAddScTax, bChosenSc, bChosenTax)){
				bNeedCheckReCalculation = true;
			}
		}
		if(bNeedCheckReCalculation){
			// Have inclusive tax no breakdown, need recalculate check
			calcCheck();
		}
		
		for(HashMap<String, Integer> oSelectedItem:oSelectedItems) {
			oFuncCheckItem = (FuncCheckItem) this.getCheckItem(oSelectedItem.get("partySeq"), oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
			oFuncCheckItem.addWaiveScTax(bAddScTax, bChosenSc, bChosenTax, m_sTableNo+m_sTableExtension);
			oFuncCheckItem.setWaiveServiceChargeFlagNotByOverride(true);
		}
		calcCheck();
		
		//update check if it is old check and old item
		if(isOldCheck()) {
			for(HashMap<String, Integer> oSelectedItem:oSelectedItems) {
				oFuncCheckItem = (FuncCheckItem) this.getCheckItem(oSelectedItem.get("partySeq"), oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
				if(oFuncCheckItem.isOldItem()) {
					oFuncCheckItem.getCheckItem().setModified(true);
				}
			}

			if(!updateCheck(false, true, 1, 0, false, 0, 0, 0, 0, false, true, false, false, 0, 0, false).equals(PosCheck.API_RESULT_SUCCESS)) {
				return false;
			}
		}
		
		return true;
	}
	
	// Set/clear item takeout
	public boolean takeout(List<HashMap<String, Integer>> oTakeoutItemIds, List<HashMap<String, Integer>> oClearTakeoutItemIds, boolean bAddSc) {
		boolean[] bChosenSc = new boolean[5], bChosenTax = new boolean[25];
		
		for(int i=0; i<5; i++) {
			bChosenSc[i] = true;
		}
		for(int i=0; i<25; i++) {
			bChosenTax[i] = false;
		}
		
		for(HashMap<String, Integer> oSelectedItemIndex:oTakeoutItemIds) {
			FuncCheckItem oParentFuncCheckItem = getCheckItem(oSelectedItemIndex.get("partySeq"), oSelectedItemIndex.get("sectionId"), oSelectedItemIndex.get("itemIndex"));
			oParentFuncCheckItem.addWaiveScTax(false, bChosenSc, bChosenTax, m_sTableNo+m_sTableExtension);
			oParentFuncCheckItem.setWaiveServiceChargeFlagNotByOverride(true);
			oParentFuncCheckItem.takeout(true);
			
			// Add log to action log list
			oParentFuncCheckItem.addActionLog(AppGlobal.FUNC_LIST.takeout.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), 0, 0, 0, 0, "Takeout");
		}
		for(HashMap<String, Integer> oSelectedItemIndex:oClearTakeoutItemIds) {
			FuncCheckItem oParentFuncCheckItem = getCheckItem(oSelectedItemIndex.get("partySeq"), oSelectedItemIndex.get("sectionId"), oSelectedItemIndex.get("itemIndex"));
			if(bAddSc) {
				// Check whether item has service charge
				for(int i=0; i<5; i++) {
					if(oParentFuncCheckItem.getMenuItem().getChargeSc(i).equals(MenuItem.CHARGE_SC_CHARGE))
						bChosenSc[i] = true;
					else
						bChosenSc[i] = false;
				}
				oParentFuncCheckItem.addWaiveScTax(true, bChosenSc, bChosenTax, m_sTableNo+m_sTableExtension);
				oParentFuncCheckItem.setWaiveServiceChargeFlagNotByOverride(false);
			}
			oParentFuncCheckItem.takeout(false);
			
			// Add log to action log list
			oParentFuncCheckItem.addActionLog(AppGlobal.FUNC_LIST.takeout.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), 0, 0, 0, 0, "Clear takeout");
		}
		
		calcCheck();
		
		return true;
	}
	
	// Initialize the outlet setup in current business date
	public void initBusinessDaySetup(FuncOutlet oFuncOutlet){
		PosBusinessDay oPosBusinessDay;
		
		m_oScType = new HashMap<Integer, PosTaxScType>();
		m_oTaxType = new HashMap<Integer, PosTaxScType>();
		
		oPosBusinessDay = oFuncOutlet.getBusinessDay();
		for(int i=1; i<=5; i++){
			PosTaxScType oPosTaxScType = new PosTaxScType();
			oPosTaxScType.setRate(oPosBusinessDay.getSc(i));
			oPosTaxScType.setIncludeTaxScMask(oPosBusinessDay.getTaxScIncludeTaxScMask(i));
			if(!oPosBusinessDay.getTaxScIncludePreDisc().isEmpty()){
				if(oPosBusinessDay.getTaxScIncludePreDisc().substring(i-1, i).equals("1"))
					oPosTaxScType.setIncludePreDisc(PosTaxScType.INCLUDE_PRE_DISC_YES);
			}
			m_oScType.put(i-1, oPosTaxScType);
		}

		for(int i=1; i<=25; i++){
			PosTaxScType oPosTaxScType = new PosTaxScType();
			oPosTaxScType.setRate(oPosBusinessDay.getTax(i));
			oPosTaxScType.setIncludeTaxScMask(oPosBusinessDay.getTaxScIncludeTaxScMask(5+i));
			if(!oPosBusinessDay.getTaxScIncludePreDisc().isEmpty()){
				if(oPosBusinessDay.getTaxScIncludePreDisc().substring(5+i-1, 5+i).equals("1"))
					oPosTaxScType.setIncludePreDisc(PosTaxScType.INCLUDE_PRE_DISC_YES);
			}
			if(!oPosBusinessDay.getTaxIncludeMidDisc().isEmpty()){
				if(oPosBusinessDay.getTaxIncludeMidDisc().substring(i-1, i).equals("1"))
					oPosTaxScType.setIncludeMidDisc(PosTaxScType.INCLUDE_MID_DISC_YES);
			}
			m_oTaxType.put(i-1, oPosTaxScType);
		}
	}
	
	public boolean voidCheck(int iVoidCodeId, int iUserId, int iStationId, boolean bMergeTable, int iMergeTableTargetCheckId, int iChosenCheckPftmId) {
		DateTime dtVoidDateTime = new DateTime();
		DateTimeFormatter voidFormatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		ArrayList<Integer> oItemIdList = new ArrayList<Integer>();
		String sActionLogKey = "", sActionLogRemark = "";

		//print check before void 
		if(!bMergeTable && AppGlobal.g_oFuncStation.get().getCheckPrtqId() != 0 && printCheck(false, false, AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncStation.get().getStationId(), AppGlobal.g_oFuncStation.get().getCheckPrtqId(), iChosenCheckPftmId, false, AppGlobal.g_oFuncOutlet.get().getOutletNameByIndex(AppGlobal.g_oCurrentLangIndex.get()), true, iVoidCodeId, "", true) == false) {
			m_oOutletTable.setStationId(0);
			m_oOutletTable.addUpdate(true);
			return false;
		}

		if(bMergeTable) {
			sActionLogKey = AppGlobal.FUNC_LIST.merge_table.name();
			sActionLogRemark = "Void check for merge table";
		}else
			sActionLogKey = AppGlobal.FUNC_LIST.void_check.name();
		m_sErrorMessage = "";
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			
			PosCheckParty oPosCheckParty = oFuncCheckParty.getCheckParty();
			oPosCheckParty.setVoidTime(voidFormatter.print(dtVoidDateTime.withZone(DateTimeZone.UTC)));
			oPosCheckParty.setVoidLocalTime(dtVoidDateTime);
			oPosCheckParty.setVoidStationId(iStationId);
			oPosCheckParty.setVoidReasonId(iVoidCodeId);
			oPosCheckParty.setVoidUserId(iUserId);
			oPosCheckParty.setStatus(PosCheckParty.STATUS_DELETED);
			
			for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem:oItemList){
					PosCheckItem oCheckItem = oFuncCheckItem.getCheckItem();
	
					// Remove new item
					if (oFuncCheckItem.isOldItem()) { // Update old item void info
						oCheckItem.setVoidTime(voidFormatter.print(dtVoidDateTime.withZone(DateTimeZone.UTC)));
						oCheckItem.setVoidLocalTime(dtVoidDateTime);
						oCheckItem.setVoidStationId(iStationId);
						oCheckItem.setVoidReasonId(iVoidCodeId);
						oCheckItem.setVoidUserId(iUserId);
						oCheckItem.setStatus(PosCheckItem.STATUS_DELETED);
						oCheckItem.setModified(true);
						
						//update extra info status
						if(oFuncCheckItem.hasExtraInfo()) {
							for(PosCheckExtraInfo oExtraInfo:oFuncCheckItem.getExtraInfoList())
								oExtraInfo.setStatus(PosCheckExtraInfo.STATUS_DELETED);
						}
						
						// Add to list for printing void action slip
						if(!oCheckItem.isPendingItem())
							oItemIdList.add(oCheckItem.getCitmId());
						
						// Add "void_check_delete_item" log to action log list
						AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.delete_item.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), oFuncCheckItem.getCheckItem().getCptyId(), oFuncCheckItem.getCheckItem().getCitmId(), 0, 0, "Void check");
					}
		        	
					// Void Item Discount
					if (oFuncCheckItem.hasItemDiscount(false)) {
						oFuncCheckItem.voidItemDiscount(iVoidCodeId, iUserId, iStationId);
					}
					
					// Void Item Modifier
					if (oFuncCheckItem.getModifierList().size() > 0)
						oFuncCheckItem.voidAllModifier(iVoidCodeId, iUserId, iStationId, true);
				}
			}
		}

		// Void Check Discount if any
		for(FuncCheckParty oFuncCheckParty: m_oFuncCheckPartyList) {
			if(oFuncCheckParty.hasPartyCheckDiscount()) {
				for(Entry<Integer, PosCheckDiscount> entry: oFuncCheckParty.getPartyCheckDiscount().entrySet()) 
					oFuncCheckParty.voidOldCheckDiscount(entry.getKey().intValue(), iVoidCodeId);
			}
		}
		
		m_oCheck.setVoidLocTime(dtVoidDateTime);
		m_oCheck.setVoidTime(voidFormatter.print(dtVoidDateTime.withZone(DateTimeZone.UTC)));
		m_oCheck.setVoidUserId(iUserId);
		m_oCheck.setVoidStationId(iStationId);
		m_oCheck.setVoidVdrsId(iVoidCodeId);
		m_oCheck.setStatus(PosCheck.STATUS_DELETED);
		
		int iSaveCheckType = 0;
		if(bMergeTable)
			iSaveCheckType = 2;

		if(!updateCheck(false, true, 1, iSaveCheckType, false, 0, 0, 0, iMergeTableTargetCheckId, false, false, false, false, 0, 0, false).equals(PosCheck.API_RESULT_SUCCESS)) {
			m_oOutletTable.setStationId(0);
			m_oOutletTable.addUpdate(true);
			return false;
		}

		//Update item count and coupon item status
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem:oItemList){
					PosCheckItem oCheckItem = oFuncCheckItem.getCheckItem();
					
					//update item count
					this.updateItemCount(oCheckItem.getItemId(), oCheckItem.getQty(), false, false, false);
					
					//update coupon item status
					if(oFuncCheckItem.isCouponItem()) {
						FuncCoupon oCouponItem = new FuncCoupon();
						oCouponItem.setStartCoupon(oFuncCheckItem.getExtraInfoBySectionAndVariable("online_coupon", "sell_start_coupon"));
						oCouponItem.setEndCoupon(oFuncCheckItem.getExtraInfoBySectionAndVariable("online_coupon", "sell_end_coupon"));
						oCouponItem.setCouponCurrentStatus(FuncCoupon.COUPON_STATUS_LOCKED);
						oCouponItem.setCouponNextStatus(FuncCoupon.COUPON_STATUS_NEW);
						oCouponItem.setSellPrice(BigDecimal.ZERO);
						
						oCouponItem.updateCoupon(FuncCoupon.UPDATE_COUPON_TYPE_ORDER_ITEM);
					}
				}
			}
		}

		m_oOutletTable.setCheckId(0);
		m_oOutletTable.setStationId(0);
		m_oOutletTable.setStatus(PosOutletTable.STATUS_VACANT);
		
		// *****************************************************************
		// Create thread to handle void slip
		AppThreadManager oAppThreadManager = new AppThreadManager();
		
		// Add the method to the thread manager
		// Thread 1 :
		// Create parameter array
		Object[] oParameters1 = new Object[1];
		oParameters1[0] = true;
		oAppThreadManager.addThread(1, m_oOutletTable, "addUpdate", oParameters1);

		// Add the method to the thread manager
		// Thread 2 :
		// Create parameter array
		if (!bMergeTable) {
			Object[] oParameters2 = new Object[6];
			oParameters2[0] = m_oCheck.getCheckId();
			oParameters2[1] = iVoidCodeId;
			oParameters2[2] = iUserId;
			oParameters2[3] = iStationId;
			oParameters2[4] = m_sTableNo+m_sTableExtension;
			oParameters2[5] = oItemIdList;
			oAppThreadManager.addThread(2, this, "processPrintVoidActionSlip", oParameters2);
		}
		
		// Run all of the threads without wait
		oAppThreadManager.runThread();

		// Add "void_check" log to action log list
		AppGlobal.g_oActionLog.get().addActionLog(sActionLogKey, PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), 0, 0, 0, 0, sActionLogRemark);		
		
		// Send action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
		return true;
	}
	
	// Thread process for void action slip printing
	private void processPrintVoidActionSlip(int iCheckId, int iVoidCodeId, int iUserId, int iStationId, String sTableNo, ArrayList<Integer> oItemIdList){
		PosCheck oCheck = new PosCheck();
		oCheck.setChksId(iCheckId);
		
		//print special split
		JSONObject oHeaderJSONObject = new JSONObject(), oInfoJSONObject = new JSONObject(), oTempJSONObject = null;
		JSONArray oTempArray = new JSONArray(), oCitmIdArray = new JSONArray();
		try {
			//form header
			oHeaderJSONObject.put("header", "Void Check");
			oTempJSONObject = new JSONObject();
			oTempJSONObject.put("message", iVoidCodeId);
			oTempArray.put(oTempJSONObject);
			oHeaderJSONObject.put("messages", oTempArray);
			
			//form info
			oInfoJSONObject.put("stationId", iStationId);
			oInfoJSONObject.put("userId", iUserId);
			oInfoJSONObject.put("table", sTableNo);
			for(Integer iItemId:oItemIdList) {
				oTempJSONObject = new JSONObject();
				oTempJSONObject.put("id", iItemId);
				oCitmIdArray.put(oTempJSONObject);
			}
			oInfoJSONObject.put("citmIds", oCitmIdArray);

			oCheck.printSpecialSlip("void_check", oHeaderJSONObject, oInfoJSONObject, AppGlobal.g_oCurrentLangIndex.get(), 0);
		}catch(JSONException jsone) {
			AppGlobal.stack2Log(jsone);
		}
		
	}
	
	// Void stock delivery invoice
	public void voidStockDeliveryInvoice(){
		DateTime dtVoidDateTime = new DateTime();
		DateTimeFormatter voidFormatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		
		m_oCheck.setVoidLocTime(dtVoidDateTime);
		m_oCheck.setVoidTime(voidFormatter.print(dtVoidDateTime.withZone(DateTimeZone.UTC)));
		m_oCheck.setVoidUserId(AppGlobal.g_oFuncUser.get().getUserId());
		m_oCheck.setVoidStationId(AppGlobal.g_oFuncStation.get().getStationId());
		m_oCheck.setStatus(PosCheck.STATUS_DELETED);
		
		m_oOutletTable.setCheckId(0);
		m_oOutletTable.setStationId(0);
		m_oOutletTable.setStatus(PosOutletTable.STATUS_VACANT);
		
		if (updateCheck(false, false, 0, 0, true, 0, 0, 0, 0, false, false, false, false, 0, 0, false).equals(PosCheck.API_RESULT_SUCCESS)) {
			// Add log to action log list
			AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.stock_delivery_invoice_setup.name(), PosActionLog.ACTION_RESULT_SUCCESS, "", AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId() , AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), 0, 0, 0, 0, "Delete Stock Delivery Order");
			//handle action log
			AppGlobal.g_oActionLog.get().handleActionLog(false);
		}
	}
	
	// Update multiple coupon
	public void updateMultipleCoupon(int iType, List<FuncCoupon> oCouponList) {
		if(oCouponList.size() == 0)
			return;
		
		for(FuncCoupon oCoupon:oCouponList) {
			if((oCoupon.updateCoupon(iType)) == false) {
				FormDialogBox oFormDialogBox = new FormDialogBox(AppGlobal.g_oLang.get()._("ok"), null);
				oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._("error"));
				oFormDialogBox.setMessage(oCoupon.getLastErrorMessage());
				oFormDialogBox.showAndWait();
				oFormDialogBox = null;
			}
		}
	}
	
	public void calcCheck(){
		PosCheckParty oCheckParty;
		
		// Clear all figures
		m_oCheck.setCheckTotal(BigDecimal.ZERO);
		m_oCheck.setItemTotal(BigDecimal.ZERO);
		m_oCheck.setPreDisc(BigDecimal.ZERO);
		m_oCheck.setMidDisc(BigDecimal.ZERO);
		m_oCheck.setPostDisc(BigDecimal.ZERO);
		for(int i=1; i<=5; i++)
			m_oCheck.setSc(i, BigDecimal.ZERO);
		for(int i=1; i<=25; i++)
			m_oCheck.setTax(i, BigDecimal.ZERO);
		for(int i=1; i<=4; i++)
			m_oCheck.setInclusiveTaxRef(i, BigDecimal.ZERO);
		
		// Major function for check party total calculation
		calcCheckParty();
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList){
			oCheckParty = oFuncCheckParty.getCheckParty();
        	
        	// Add value to check
			m_oCheck.setItemTotal(m_oCheck.getItemTotal().add(oCheckParty.getItemTotal()));
   			m_oCheck.setPreDisc(m_oCheck.getPreDisc().add(oCheckParty.getPreDisc()));
        	m_oCheck.setMidDisc(m_oCheck.getMidDisc().add(oCheckParty.getMidDisc()));
        	m_oCheck.setPostDisc(m_oCheck.getPostDisc().add(oCheckParty.getPostDisc()));		        
	        for(int i=1; i<=5; i++){
	        	m_oCheck.setSc(i, m_oCheck.getSc(i).add(oCheckParty.getSc(i)));
			}
	        for(int i=1; i<=25; i++){
	        	m_oCheck.setTax(i, m_oCheck.getTax(i).add(oCheckParty.getTax(i)));
			}
	        for(int i=1; i<=4; i++){
	        	m_oCheck.setInclusiveTaxRef(i, m_oCheck.getInclusiveTaxRef(i).add(oCheckParty.getInclusiveTaxRef(i)));
			}
		}
		
		// Calculate the round amount of SC, tax
		for(int i=1; i<=5; i++){
			m_oCheck.setSc(i, AppGlobal.g_oFuncOutlet.get().roundSCAmountToBigDecimal(m_oCheck.getSc(i)));
		}
        for(int i=1; i<=25; i++){
        	m_oCheck.setTax(i, AppGlobal.g_oFuncOutlet.get().roundTaxAmountToBigDecimal(m_oCheck.getTax(i)));
		}
        for(int i=1; i<=4; i++){
        	m_oCheck.setInclusiveTaxRef(i, AppGlobal.g_oFuncOutlet.get().roundTaxAmountToBigDecimal(m_oCheck.getInclusiveTaxRef(i)));
		}
				
		// Process the check
        BigDecimal dBeforeRoundCheckTotal = m_oCheck.getItemTotal();
        
		for(int i=1; i<=5; i++){
			dBeforeRoundCheckTotal = dBeforeRoundCheckTotal.add(m_oCheck.getSc(i));
		}
		for(int i=1; i<=25; i++){
			dBeforeRoundCheckTotal = dBeforeRoundCheckTotal.add(m_oCheck.getTax(i));
		}
		
		dBeforeRoundCheckTotal = dBeforeRoundCheckTotal.add(m_oCheck.getPreDisc());
		dBeforeRoundCheckTotal = dBeforeRoundCheckTotal.add(m_oCheck.getMidDisc());
		dBeforeRoundCheckTotal = dBeforeRoundCheckTotal.add(m_oCheck.getPostDisc());

		// Calculate check round amount
		if(dBeforeRoundCheckTotal.compareTo(BigDecimal.ZERO) < 0)
			m_oCheck.setCheckTotal(AppGlobal.g_oFuncOutlet.get().roundCheckAmountToBigDecimal(BigDecimal.ZERO));
		else
			m_oCheck.setCheckTotal(AppGlobal.g_oFuncOutlet.get().roundCheckAmountToBigDecimal(dBeforeRoundCheckTotal));
		m_oCheck.setRoundAmount(m_oCheck.getCheckTotal().subtract(dBeforeRoundCheckTotal));
		
		// Special calculation of inclusive VAT of Thailand in inclusive tax reference
		boolean bCalculateInclusiveTaxReferenceByCheckTotal = AppGlobal.g_oFuncStation.get().getCalcInclusiveTaxRefByCheckTotal();
		if(bCalculateInclusiveTaxReferenceByCheckTotal){
			BigDecimal[] dInclusiveTaxRef = new BigDecimal[4];
			for(int i=0; i<25; i++){
				int iInclusiveTaxIndex = i;
				if(i > 3)
					iInclusiveTaxIndex = 3;
				else
					dInclusiveTaxRef[i] = BigDecimal.ZERO;
				if(m_oCheck.getInclusiveTaxRef(iInclusiveTaxIndex+1).compareTo(BigDecimal.ZERO) > 0){				
					BigDecimal dRate = m_oTaxType.get(i).getRate();
					dInclusiveTaxRef[iInclusiveTaxIndex] = dInclusiveTaxRef[iInclusiveTaxIndex].add(m_oCheck.getCheckTotal().subtract(m_oCheck.getCheckTotal().divide(dRate.add(new BigDecimal("1.0")), 10, RoundingMode.HALF_UP)));
				}
			}
			
			for(int i=0; i<4; i++){
				m_oCheck.setInclusiveTaxRef(i+1, AppGlobal.g_oFuncOutlet.get().roundTaxAmountToBigDecimal(dInclusiveTaxRef[i]));
			}
		}
		
/*	
System.out.println("CalcCheck ---------------------------------------- (Check total: " + m_oCheck.getCheckTotal() + ")");
System.out.println("CalcCheck ---------------------------------------- (SC 1 total: " + m_oCheck.getSc(1) + ")");
System.out.println("CalcCheck ---------------------------------------- (SC 2 total: " + m_oCheck.getSc(2) + ")");
System.out.println("CalcCheck ---------------------------------------- (Tax 1 total: " + m_oCheck.getTax(1) + ")");
System.out.println("CalcCheck ---------------------------------------- (Tax 2 total: " + m_oCheck.getTax(2) + ")");
System.out.println("CalcCheck ---------------------------------------- (Tax 3 total: " + m_oCheck.getTax(3) + ")");
*/
		
    	// Generate customer display interface files
    	this.updateCustomerDisplayDataUpdateTimestamp();
    	this.generateCustomerDisplayInterfaceFiles(1);
		
	}
	
	public void calcCheckParty(){
		PosCheckParty oCheckParty;
		PosCheckItem oCheckItem;
		ArrayList<PosCheckDiscount> oItemDiscountList = null;
		
		//Reset check party's and its check item's figure
		for(FuncCheckParty oFuncCheckParty:this.m_oFuncCheckPartyList){
			oCheckParty = oFuncCheckParty.getCheckParty();
			
			oCheckParty.setPartyTotal(BigDecimal.ZERO);
			oCheckParty.setItemTotal(BigDecimal.ZERO);
			for(int i=1; i<=5; i++)
				oCheckParty.setSc(i, BigDecimal.ZERO);
			for(int i=1; i<=25; i++)
				oCheckParty.setTax(i, BigDecimal.ZERO);
			for(int i=1; i<=4; i++)
				oCheckParty.setInclusiveTaxRef(i, BigDecimal.ZERO);
			oCheckParty.setPreDisc(BigDecimal.ZERO);
			oCheckParty.setMidDisc(BigDecimal.ZERO);
			oCheckParty.setPostDisc(BigDecimal.ZERO);
			oCheckParty.setRoundAmount(BigDecimal.ZERO);
			
			for (List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem:oItemList){
					oCheckItem = oFuncCheckItem.getCheckItem();
					
					oCheckItem.setTotal(BigDecimal.ZERO);
					oCheckItem.setCarryTotal(BigDecimal.ZERO);
					for(int i=1; i<=5; i++)
						oCheckItem.setSc(i, BigDecimal.ZERO);
					for(int i=1; i<=25; i++)
						oCheckItem.setTax(i, BigDecimal.ZERO);
					for(int i=1; i<=4; i++)
						oCheckItem.setInclusiveTaxRef(i, BigDecimal.ZERO);
					oCheckItem.setPreDisc(BigDecimal.ZERO);
					oCheckItem.setMidDisc(BigDecimal.ZERO);
					oCheckItem.setPosDisc(BigDecimal.ZERO);
				}
			}
		}
		
		for(FuncCheckParty oFuncCheckParty: m_oFuncCheckPartyList){
			for (List<FuncCheckItem> oItemList: oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem: oItemList){
					oCheckItem = oFuncCheckItem.getCheckItem();
					
					if(oFuncCheckItem.isSetMenuItem()) {
						// Set menu child item: Item total = 0.0
						oCheckItem.setTotal(BigDecimal.ZERO);
					}else {
						// Calculate item price, item total, item carry total, item carry revenue, item revenue
						calcItemPrice(oFuncCheckItem, oFuncCheckItem);
					}
					
					// Calculate item round amount
			    	oCheckItem.setRoundTotal(AppGlobal.g_oFuncOutlet.get().roundItemAmountToBigDecimal(oCheckItem.getTotal()));
			    	oCheckItem.setRoundAmount(oCheckItem.getRoundTotal().subtract(oCheckItem.getTotal()));
					
					// Process party item's pre-discount
					oItemDiscountList = oFuncCheckItem.getItemDiscountList();
					for(PosCheckDiscount oCheckItemDiscount: oItemDiscountList) {
						if(oCheckItemDiscount.isDeleted())
							continue;
						
						if(oCheckItemDiscount.isPreDiscountType()) {
							// Re-calculate the item discount
			        		// Pre-discount
							List<FuncCheckItem> oFuncCheckItemList = new ArrayList<FuncCheckItem>();
							oFuncCheckItemList.add(oFuncCheckItem);
							calcPreDiscount("item", oCheckItemDiscount, oFuncCheckItemList, null);
						}
					}
				}
			}			
		}
		
		// Process party check pre-discount
		for(FuncCheckParty oFuncCheckParty: m_oFuncCheckPartyList){
			if(oFuncCheckParty.getPartyCheckDiscount().size() == 0)		//no party check discount applied
				continue;
			
			HashMap<Integer, PosCheckDiscount> oPartyCheckDiscounts = oFuncCheckParty.getPartyCheckDiscount();
			HashMap<Integer, PosCheckDiscount> oPartyPreFixDiscounts = new HashMap<Integer, PosCheckDiscount>();
			HashMap<Integer, PosCheckDiscount> oPartyPrePercentageDiscounts = new HashMap<Integer, PosCheckDiscount>();
			List<Integer> oHandledPartyDiscountIndex = new ArrayList<Integer>();
			
			for(Entry<Integer, PosCheckDiscount> entry: oPartyCheckDiscounts.entrySet()) {
				if(entry.getValue().isDeleted())
					continue;
				if(!entry.getValue().isPreDiscountType())
					continue;
				
				if(entry.getValue().isFixAmountDiscountMethod()) 
					oPartyPreFixDiscounts.put(entry.getKey(), entry.getValue());
				if(entry.getValue().isPercentageDiscountMethod())
					oPartyPrePercentageDiscounts.put(entry.getKey(), entry.getValue());
			}
			
			// handle fix discount
			for(Entry<Integer, PosCheckDiscount> entry: oPartyPreFixDiscounts.entrySet()) {
				calcPreDiscount("check", entry.getValue(), oFuncCheckParty.getAppliedCheckDiscountItemList(entry.getKey()), oHandledPartyDiscountIndex);
				oHandledPartyDiscountIndex.add(Integer.valueOf(entry.getKey()));
			}
			
			// handle percentage discount
			for(Entry<Integer, PosCheckDiscount> entry: oPartyPrePercentageDiscounts.entrySet()) {
				calcPreDiscount("check", entry.getValue(), oFuncCheckParty.getAppliedCheckDiscountItemList(entry.getKey()), oHandledPartyDiscountIndex);
				oHandledPartyDiscountIndex.add(Integer.valueOf(entry.getKey()));
			}
		}
		
		// Process Service Charge
		for(FuncCheckParty oFuncCheckParty: m_oFuncCheckPartyList){
			List<Integer> oAppliedPreDiscountIndexes = new ArrayList<Integer>();
			
			// get the applied party pre-discount index
			for(Entry<Integer, PosCheckDiscount> entry: oFuncCheckParty.getPartyCheckDiscount().entrySet()) {
				if(entry.getValue().isDeleted())
					continue;
				
				if(entry.getValue().isPreDiscountType())
					oAppliedPreDiscountIndexes.add(entry.getKey());
			}
			
			for (List<FuncCheckItem> oItemList: oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem: oItemList)
					calcSC(oFuncCheckItem, oAppliedPreDiscountIndexes);
			}
		}
		
		// Process Item's Mid-Discount
		for(FuncCheckParty oFuncCheckParty: m_oFuncCheckPartyList){
			HashMap<Integer, PosCheckDiscount> oPartyCheckDiscounts = oFuncCheckParty.getPartyCheckDiscount();
			HashMap<String, List<Integer>> oAppliedPartyDiscountIndex = new HashMap<String, List<Integer>>();
			oAppliedPartyDiscountIndex.put("preDisc", new ArrayList<Integer>());
			oAppliedPartyDiscountIndex.put("midDisc", new ArrayList<Integer>());
			for(Entry<Integer, PosCheckDiscount> entry: oPartyCheckDiscounts.entrySet()) {
				if(entry.getValue().isDeleted())
					continue;
				
				if(entry.getValue().isPreDiscountType()) 
					oAppliedPartyDiscountIndex.get("preDisc").add(entry.getKey());
			}
			
			for (List<FuncCheckItem> oItemList: oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem: oItemList) {
					oItemDiscountList = oFuncCheckItem.getItemDiscountList();
					for(PosCheckDiscount oCheckItemDiscount:oItemDiscountList) {
						if(oCheckItemDiscount.isDeleted())
							continue;
						
						if(oCheckItemDiscount.isMidDiscountType()) {
							// Re-calculate the item discount
			        		// Mid-discount
							List<FuncCheckItem> oFuncCheckItemList = new ArrayList<FuncCheckItem>();
							oFuncCheckItemList.add(oFuncCheckItem);
							calcMidDiscount("item", oCheckItemDiscount, oFuncCheckItemList, oAppliedPartyDiscountIndex);
						}
					}
				}
			}
		}
		
		// Process party check mid-discount
		for(FuncCheckParty oFuncCheckParty: m_oFuncCheckPartyList){
			if(oFuncCheckParty.getPartyCheckDiscount().size() == 0)		//no party check discount applied
				continue;
			
			HashMap<Integer, PosCheckDiscount> oPartyCheckDiscounts = oFuncCheckParty.getPartyCheckDiscount();
			HashMap<Integer, PosCheckDiscount> oPartyMidFixDiscounts = new HashMap<Integer, PosCheckDiscount>();
			HashMap<Integer, PosCheckDiscount> oPartyMidPercentageDiscounts = new HashMap<Integer, PosCheckDiscount>();
			HashMap<String, List<Integer>> oAppliedPartyDiscountIndex = new HashMap<String, List<Integer>>();
			oAppliedPartyDiscountIndex.put("preDisc", new ArrayList<Integer>());
			oAppliedPartyDiscountIndex.put("midDisc", new ArrayList<Integer>());
			
			for(Entry<Integer, PosCheckDiscount> entry: oPartyCheckDiscounts.entrySet()) {
				if(entry.getValue().isDeleted())
					continue;
				
				if(entry.getValue().isPreDiscountType()) {
					oAppliedPartyDiscountIndex.get("preDisc").add(entry.getKey());
					continue;
				}else if(entry.getValue().isPostDiscountType())
					continue;
				
				if(entry.getValue().isFixAmountDiscountMethod()) 
					oPartyMidFixDiscounts.put(entry.getKey(), entry.getValue());
				if(entry.getValue().isPercentageDiscountMethod())
					oPartyMidPercentageDiscounts.put(entry.getKey(), entry.getValue());
			}
			
			// handle fix discount
			for(Entry<Integer, PosCheckDiscount> entry: oPartyMidFixDiscounts.entrySet()) {
				calcMidDiscount("check", entry.getValue(), oFuncCheckParty.getAppliedCheckDiscountItemList(entry.getKey().intValue()), oAppliedPartyDiscountIndex);
				oAppliedPartyDiscountIndex.get("midDisc").add(entry.getKey());
			}
			
			// handle percentage discount
			for(Entry<Integer, PosCheckDiscount> entry: oPartyMidPercentageDiscounts.entrySet()) {
				calcMidDiscount("check", entry.getValue(), oFuncCheckParty.getAppliedCheckDiscountItemList(entry.getKey().intValue()), oAppliedPartyDiscountIndex);
				oAppliedPartyDiscountIndex.get("midDisc").add(entry.getKey());
			}
		}
		
		// Process Taxes
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList){
			HashMap<String, List<Integer>> oAppliedDiscountIndexes = new HashMap<String, List<Integer>>();
			List<Integer> oAppliedCheckPreDiscount = new ArrayList<Integer>();
			List<Integer> oAppliedCheckMidDiscount = new ArrayList<Integer>();
			
			// get the applied party pre-discount index
			for(Entry<Integer, PosCheckDiscount> entry: oFuncCheckParty.getPartyCheckDiscount().entrySet()) {
				if(entry.getValue().isDeleted())
					continue;
				
				if(entry.getValue().isPreDiscountType())
					oAppliedCheckPreDiscount.add(entry.getKey());
				if(entry.getValue().isMidDiscountType())
					oAppliedCheckMidDiscount.add(entry.getKey());
			}
			oAppliedDiscountIndexes.put("preDisc", oAppliedCheckPreDiscount);
			oAppliedDiscountIndexes.put("midDisc", oAppliedCheckMidDiscount);
			
			for (List<FuncCheckItem> oItemList: oFuncCheckParty.getWholeItemList()) {
				for (FuncCheckItem oFuncCheckItem:oItemList)
					calcTax(oFuncCheckItem, oAppliedDiscountIndexes);
			}
		}
		
		// Process Item's Post Discount
		for(FuncCheckParty oFuncCheckParty: m_oFuncCheckPartyList){
			HashMap<Integer, PosCheckDiscount> oPartyCheckDiscounts = oFuncCheckParty.getPartyCheckDiscount();
			HashMap<String, List<Integer>> oAppliedPartyDiscountIndex = new HashMap<String, List<Integer>>();
			oAppliedPartyDiscountIndex.put("preDisc", new ArrayList<Integer>());
			oAppliedPartyDiscountIndex.put("midDisc", new ArrayList<Integer>());
			
			for(Entry<Integer, PosCheckDiscount> entry: oPartyCheckDiscounts.entrySet()) {
				if(entry.getValue().isDeleted())
					continue;
				
				if(entry.getValue().isPreDiscountType()) 
					oAppliedPartyDiscountIndex.get("preDisc").add(entry.getKey());
				else if(entry.getValue().isMidDiscountType())
					oAppliedPartyDiscountIndex.get("midDisc").add(entry.getKey());
			}
			
			for (List<FuncCheckItem> oItemList: oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem: oItemList) {
					oItemDiscountList = oFuncCheckItem.getItemDiscountList();
					for(PosCheckDiscount oCheckItemDiscount:oItemDiscountList) {
						if(oCheckItemDiscount.isDeleted())
							continue;
						
						if(oCheckItemDiscount.isPostDiscountType()) {
							// Re-calculate the item discount
			        		// Post-discount
							List<FuncCheckItem> oFuncCheckItemList = new ArrayList<FuncCheckItem>();
							oFuncCheckItemList.add(oFuncCheckItem);
							calcPostDiscount("item", oCheckItemDiscount, oFuncCheckItemList, oAppliedPartyDiscountIndex);
						}
					}
				}
			}
		}
		
		// Process party check post-discount
		for(FuncCheckParty oFuncCheckParty: m_oFuncCheckPartyList){
			if(oFuncCheckParty.getPartyCheckDiscount().size() == 0)		//no party check discount applied
				continue;
			
			HashMap<Integer, PosCheckDiscount> oPartyCheckDiscounts = oFuncCheckParty.getPartyCheckDiscount();
			HashMap<Integer, PosCheckDiscount> oPartyPostFixDiscounts = new HashMap<Integer, PosCheckDiscount>();
			HashMap<Integer, PosCheckDiscount> oPartyPostPercentageDiscounts = new HashMap<Integer, PosCheckDiscount>();
			HashMap<String, List<Integer>> oAppliedPartyDiscountIndex = new HashMap<String, List<Integer>>();
			oAppliedPartyDiscountIndex.put("preDisc", new ArrayList<Integer>());
			oAppliedPartyDiscountIndex.put("midDisc", new ArrayList<Integer>());
			oAppliedPartyDiscountIndex.put("postDisc", new ArrayList<Integer>());
			
			for(Entry<Integer, PosCheckDiscount> entry: oPartyCheckDiscounts.entrySet()) {
				if(entry.getValue().isDeleted())
					continue;
				
				if(entry.getValue().isPreDiscountType()) {
					oAppliedPartyDiscountIndex.get("preDisc").add(entry.getKey());
					continue;
				}else if(entry.getValue().isMidDiscountType()) {
					oAppliedPartyDiscountIndex.get("midDisc").add(entry.getKey());
					continue;
				}
				
				if(entry.getValue().isFixAmountDiscountMethod()) 
					oPartyPostFixDiscounts.put(entry.getKey(), entry.getValue());
				if(entry.getValue().isPercentageDiscountMethod())
					oPartyPostPercentageDiscounts.put(entry.getKey(), entry.getValue());
			}
			
			// handle fix discount
			for(Entry<Integer, PosCheckDiscount> entry: oPartyPostFixDiscounts.entrySet()) {
				this.calcPostDiscount("check", entry.getValue(), oFuncCheckParty.getAppliedCheckDiscountItemList(entry.getKey().intValue()), oAppliedPartyDiscountIndex);
				oAppliedPartyDiscountIndex.get("postDisc").add(entry.getKey());
			}
			
			// handle percentage discount
			for(Entry<Integer, PosCheckDiscount> entry: oPartyPostPercentageDiscounts.entrySet()) {
				this.calcPostDiscount("check", entry.getValue(), oFuncCheckParty.getAppliedCheckDiscountItemList(entry.getKey().intValue()), oAppliedPartyDiscountIndex);
				oAppliedPartyDiscountIndex.get("postDisc").add(entry.getKey());
			}
		}
		
		// Calculate the Party's information
		for(FuncCheckParty oFuncCheckParty: m_oFuncCheckPartyList){
			oCheckParty = oFuncCheckParty.getCheckParty();
			
			for (List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem:oItemList){
					oCheckItem = oFuncCheckItem.getCheckItem();
					if(oCheckItem.isDeleted())
						continue;
					
		        	// Add value to check
					oCheckParty.setItemTotal(oCheckParty.getItemTotal().add(oCheckItem.getRoundTotal()));
		        	for(PosCheckDiscount oItemDiscount:oFuncCheckItem.getItemDiscountList()) {
		        		if(oItemDiscount.isDeleted())
		        			continue;
		        		
		        		if(oItemDiscount.isPreDiscountType())
		        			oCheckParty.setPreDisc(oCheckParty.getPreDisc().add(oItemDiscount.getRoundTotal()));
		        		else if(oItemDiscount.isMidDiscountType())
		        			oCheckParty.setMidDisc(oCheckParty.getMidDisc().add(oItemDiscount.getRoundTotal()));
		        		else if(oItemDiscount.isPostDiscountType())
		        			oCheckParty.setPostDisc(oCheckParty.getPostDisc().add(oItemDiscount.getRoundTotal()));
		        	}
			        for(int i=1; i<=5; i++){
			        	oCheckParty.setSc(i, oCheckParty.getSc(i).add(oCheckItem.getSc(i)));
					}
			        for(int i=1; i<=25; i++){
			        	oCheckParty.setTax(i, oCheckParty.getTax(i).add(oCheckItem.getTax(i)));
					}
			        for(int i=1; i<=4; i++){
			        	oCheckParty.setInclusiveTaxRef(i, oCheckParty.getInclusiveTaxRef(i).add(oCheckItem.getInclusiveTaxRef(i)));
					}
		        }
			}
			
			// Add party discount to check
			for(Entry<Integer, PosCheckDiscount> entry : oFuncCheckParty.getPartyCheckDiscount().entrySet()) {
				PosCheckDiscount oPartyCheckDiscount = entry.getValue();
				if(oPartyCheckDiscount.isDeleted())
					continue;
				
				if(oPartyCheckDiscount.isPreDiscountType())
					oCheckParty.setPreDisc(oCheckParty.getPreDisc().add(oPartyCheckDiscount.getRoundTotal()));
				
				if(oPartyCheckDiscount.isMidDiscountType())
					oCheckParty.setMidDisc(oCheckParty.getMidDisc().add(oPartyCheckDiscount.getRoundTotal()));
				
				if(oPartyCheckDiscount.isPostDiscountType())
					oCheckParty.setPostDisc(oCheckParty.getPostDisc().add(oPartyCheckDiscount.getRoundTotal()));
			}
			
			// Calculate the round amount of SC, tax
			for(int i=1; i<=5; i++){
				oCheckParty.setSc(i, AppGlobal.g_oFuncOutlet.get().roundSCAmountToBigDecimal(oCheckParty.getSc(i)));
			}
	        for(int i=1; i<=25; i++){
	        	oCheckParty.setTax(i, AppGlobal.g_oFuncOutlet.get().roundTaxAmountToBigDecimal(oCheckParty.getTax(i)));
			}
	        for(int i=1; i<=4; i++){
	        	oCheckParty.setInclusiveTaxRef(i, AppGlobal.g_oFuncOutlet.get().roundTaxAmountToBigDecimal(oCheckParty.getInclusiveTaxRef(i)));
			}
	        
	        // Process party check total
	        BigDecimal dBeforeRoundCheckTotal = oCheckParty.getItemTotal();
	        
			for(int i=1; i<=5; i++){
				dBeforeRoundCheckTotal = dBeforeRoundCheckTotal.add(oCheckParty.getSc(i));
			}
			for(int i=1; i<=25; i++){
				dBeforeRoundCheckTotal = dBeforeRoundCheckTotal.add(oCheckParty.getTax(i));
			}
			
			dBeforeRoundCheckTotal = dBeforeRoundCheckTotal.add(oCheckParty.getPreDisc());
			dBeforeRoundCheckTotal = dBeforeRoundCheckTotal.add(oCheckParty.getMidDisc());
			dBeforeRoundCheckTotal = dBeforeRoundCheckTotal.add(oCheckParty.getPostDisc());
			
			// Calculate party check round amount
			if(dBeforeRoundCheckTotal.compareTo(BigDecimal.ZERO) < 0) 
				oCheckParty.setPartyTotal(AppGlobal.g_oFuncOutlet.get().roundCheckAmountToBigDecimal(BigDecimal.ZERO));
			else
				oCheckParty.setPartyTotal(AppGlobal.g_oFuncOutlet.get().roundCheckAmountToBigDecimal(dBeforeRoundCheckTotal));
			oCheckParty.setRoundAmount(oCheckParty.getPartyTotal().subtract(dBeforeRoundCheckTotal));
		}
	}
	
	public void calcItemPrice(FuncCheckItem oFuncCheckItem, FuncCheckItem oParentFuncCheckItem){
		
		// Process item modifiers
		BigDecimal dModifierCarryTotal = BigDecimal.ZERO;
		BigDecimal dModifierCarryRevenue = BigDecimal.ZERO;
		ArrayList<FuncCheckItem> oModifierList = oFuncCheckItem.getModifierList();
		for(FuncCheckItem oModifierFuncCheckItem: oModifierList) {
			calcItemPrice(oModifierFuncCheckItem, oParentFuncCheckItem);
			
			dModifierCarryTotal = dModifierCarryTotal.add(oModifierFuncCheckItem.getCheckItem().getCarryTotal());
			dModifierCarryRevenue = dModifierCarryRevenue.add(oModifierFuncCheckItem.getCheckItem().getCarryRevenue());
		}
		
		// Process item child
		BigDecimal dChildCarryTotal = BigDecimal.ZERO;
		BigDecimal dChildCarryRevenue = BigDecimal.ZERO;
		ArrayList<FuncCheckItem> oChildList = oFuncCheckItem.getChildItemList();
		for(FuncCheckItem oChildFuncCheckItem: oChildList) {
			calcItemPrice(oChildFuncCheckItem, oParentFuncCheckItem);
			
			dChildCarryTotal = dChildCarryTotal.add(oChildFuncCheckItem.getCheckItem().getCarryTotal());
			dChildCarryRevenue = dChildCarryRevenue.add(oChildFuncCheckItem.getCheckItem().getCarryRevenue());			
		}
		
		// Calculate inclusive SC and tax
		calcInclusiveSCAndTax(oFuncCheckItem, oParentFuncCheckItem);
		
		PosCheckItem oCheckItem = oFuncCheckItem.getCheckItem();
		// Calculate carry total
		BigDecimal dCarryTotal = BigDecimal.ZERO;
		dCarryTotal = oCheckItem.getPrice().multiply(oCheckItem.getQty());
		dCarryTotal = dCarryTotal.add(dModifierCarryTotal);
		dCarryTotal = dCarryTotal.add(dChildCarryTotal);
		
		if(oFuncCheckItem == oParentFuncCheckItem){
			// Parent item
			oCheckItem.setTotal(dCarryTotal);
		}else{
			// Child item
			oCheckItem.setCarryTotal(dCarryTotal);
		}
		
		// Calculate carry revenue
		BigDecimal dCarryRevenue = BigDecimal.ZERO;
		if(oCheckItem.getGetRevenue().equals(PosCheckItem.GET_REVENUE_SPLIT_ORIGINAL_BASIC_PRICE)){
			dCarryRevenue = oCheckItem.getPrice().subtract(oCheckItem.getBasicPrice());
			dCarryRevenue = dCarryRevenue.multiply(oCheckItem.getQty());
		}else
		if(oCheckItem.getGetRevenue().equals(PosCheckItem.GET_REVENUE_SPLIT_PRICE)){
			dCarryRevenue = oCheckItem.getPrice().subtract(oCheckItem.getPrice());	// Should be ZERO
			dCarryRevenue = dCarryRevenue.multiply(oCheckItem.getQty());
		}else{
			dCarryRevenue = oCheckItem.getPrice().multiply(oCheckItem.getQty());
			dCarryRevenue = dCarryRevenue.add(dModifierCarryRevenue);
			dCarryRevenue = dCarryRevenue.add(dChildCarryRevenue);
		}
		if(oFuncCheckItem == oParentFuncCheckItem){
			// Parent item
			oCheckItem.setCarryRevenue(BigDecimal.ZERO);
		}else{
			// Child item
			oCheckItem.setCarryRevenue(dCarryRevenue);
		}
		
		// Calculate revenue
		BigDecimal dRevenue = BigDecimal.ZERO;
		if(oFuncCheckItem == oParentFuncCheckItem){
			// Parent item
			dRevenue = oCheckItem.getPrice().multiply(oCheckItem.getQty());
			dRevenue = dRevenue.add(dModifierCarryRevenue);
			dRevenue = dRevenue.add(dChildCarryRevenue);
		}else{
			// Child item
			if(oCheckItem.getGetRevenue().equals(PosCheckItem.GET_REVENUE_SPLIT_ORIGINAL_BASIC_PRICE)){
				dRevenue = oCheckItem.getBasicPrice().multiply(oCheckItem.getQty());
				dRevenue = dRevenue.add(dModifierCarryRevenue);
				dRevenue = dRevenue.add(dChildCarryRevenue);
			}else
			if(oCheckItem.getGetRevenue().equals(PosCheckItem.GET_REVENUE_SPLIT_PRICE)){
				dRevenue = oCheckItem.getPrice().multiply(oCheckItem.getQty());
				dRevenue = dRevenue.add(dModifierCarryRevenue);
				dRevenue = dRevenue.add(dChildCarryRevenue);
				
			}else{
				dRevenue = BigDecimal.ZERO;
			}
		}
		oCheckItem.setRevenue(dRevenue);
	}
	
	public void calcPreDiscount(String sType, PosCheckDiscount oPosCheckDiscount, List<FuncCheckItem> oFuncCheckItemList, List<Integer> oAppliedDiscountIndexes) {
		PosCheckItem oPosCheckItem = null;
		BigDecimal dBaseTotal = BigDecimal.ZERO;
		
		// Calculate Item Pre-Discount
		if(sType.equals("item")) {
			oPosCheckItem = oFuncCheckItemList.get(0).getCheckItem();
			
			for(FuncCheckItem oFuncCheckItem:oFuncCheckItemList)
				dBaseTotal = dBaseTotal.add(oFuncCheckItem.getCheckItem().getTotal());
			
			if(oPosCheckDiscount.isPercentageDiscountMethod()) {
				// Percentage discount
				oPosCheckDiscount.setTotal(dBaseTotal.multiply(oPosCheckDiscount.getRate()));
			}else {
				if(dBaseTotal.compareTo((oPosCheckDiscount.getFixAmount().multiply(new BigDecimal("-1.0")))) >= 0) // as fix amount is -ve value
					oPosCheckDiscount.setTotal(oPosCheckDiscount.getFixAmount());
				else
					oPosCheckDiscount.setTotal((dBaseTotal.multiply(new BigDecimal("-1.0"))));
			}
			
			// Calculate the round amount
			oPosCheckDiscount.setRoundTotal(AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(oPosCheckDiscount.getTotal()));
			oPosCheckDiscount.setRoundAmount(oPosCheckDiscount.getRoundTotal().subtract(oPosCheckDiscount.getTotal()));
			
			// Set pos_check_discount_item value
			if(oPosCheckDiscount.getCheckDiscountItemList() != null && oPosCheckDiscount.getCheckDiscountItemList().size() > 0) {
				PosCheckDiscountItem oCheckDiscountItem = oPosCheckDiscount.getCheckDiscountItemList().get(0);
				oCheckDiscountItem.setTotal(oPosCheckDiscount.getTotal());
				oCheckDiscountItem.setRoundTotal(oPosCheckDiscount.getRoundTotal());
				
				oPosCheckItem.addValueToPreDisc(oCheckDiscountItem.getTotal());
			}
		}
		// Calculate Party Check Pre-Discount
		else {
			List<HashMap<String, BigDecimal>> oFuncCheckItemBases = new ArrayList<HashMap<String, BigDecimal>>();
			BigDecimal dItemsRemain = BigDecimal.ZERO;
			BigDecimal dDiscountBase = BigDecimal.ZERO;
			BigDecimal dDiscountAmount = BigDecimal.ZERO;
			BigDecimal dRoundDiscount = BigDecimal.ZERO;
			
			// Calculate the item base: item remaining total, item base total
			for(int i=0; i<oFuncCheckItemList.size(); i++) {
				HashMap<String, BigDecimal> oFuncCheckItemBase = new HashMap<String, BigDecimal>();
				BigDecimal dItemBase = BigDecimal.ZERO;
				
				// item remain total
				BigDecimal dItemRemain = oFuncCheckItemList.get(i).getCheckItem().getTotal();
				if(oFuncCheckItemList.get(i).getItemDiscountList().size() > 0) {		//subtract the applied item's pre-discount
					for(int j=0; j<oFuncCheckItemList.get(i).getItemDiscountList().size(); j++) {
						if(oFuncCheckItemList.get(i).getItemDiscountList().get(j).isPreDiscountType())
							dItemRemain = dItemRemain.add(oFuncCheckItemList.get(i).getItemDiscountList().get(j).getTotal());	//-ve for discount value
					}
				}
				if(oAppliedDiscountIndexes.size() > 0) {		//subtract the applied party's pre-discount
					for(Integer iAppliedDiscountIndex: oAppliedDiscountIndexes) {
						if(oFuncCheckItemList.get(i).hasAppliedCheckDiscountByIndex(iAppliedDiscountIndex))
							dItemRemain = dItemRemain.add(oFuncCheckItemList.get(i).getCheckDiscountItemList(iAppliedDiscountIndex.intValue()).getTotal());	// -ve for discount value
					}
				}
				dItemsRemain = dItemsRemain.add(dItemRemain);
				
				// item base
				if(oPosCheckDiscount.isExcludePreviousDiscount())
					dItemBase = dItemBase.add(dItemRemain);
				else
					dItemBase = dItemBase.add(oFuncCheckItemList.get(i).getCheckItem().getTotal());
				
				oFuncCheckItemBase.put("remain", dItemRemain);
				oFuncCheckItemBase.put("base", dItemBase);
				oFuncCheckItemBases.add(oFuncCheckItemBase);
				
				if(oPosCheckDiscount.isFixAmountPerItemDiscountMethod()){
					BigDecimal dItemDiscount = oPosCheckDiscount.getFixAmount().multiply(oFuncCheckItemList.get(i).getCheckItem().getQty());
					if(dItemRemain.compareTo((dItemDiscount.multiply(new BigDecimal("-1.0")))) < 0)
						dItemDiscount = dItemRemain.multiply(new BigDecimal("-1.0"));
					oFuncCheckItemBases.get(i).put("discount", dItemDiscount);
					//oFuncCheckItemBases.get(i).put("round", AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(dItemDiscount));
					dDiscountAmount = dDiscountAmount.add(dItemDiscount);
				}
			}
			
			if(!oPosCheckDiscount.isFixAmountPerItemDiscountMethod()){
				// Calculate the discount base
				for(HashMap<String, BigDecimal> oFuncCheckItemBase: oFuncCheckItemBases)
					dDiscountBase = dDiscountBase.add(oFuncCheckItemBase.get("base"));
				
				// Calculate the discount amount
				if(oPosCheckDiscount.isPercentageDiscountMethod())
					dDiscountAmount = dDiscountBase.multiply(oPosCheckDiscount.getRate());
				else {
					if(dDiscountBase.compareTo((oPosCheckDiscount.getFixAmount().multiply(new BigDecimal("-1.0")))) >= 0) // as fix amount is -ve value
						dDiscountAmount = oPosCheckDiscount.getFixAmount();
					else
						dDiscountAmount = dDiscountBase.multiply(new BigDecimal("-1.0"));
				}
				
				// Check whether remaining items total > discount amount
				if((dDiscountAmount.multiply(new BigDecimal("-1.0"))).compareTo(dItemsRemain) > 0)
					dDiscountAmount = dItemsRemain.multiply(new BigDecimal("-1.0"));
	
				// Calculate the round discount
				dRoundDiscount = AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(dDiscountAmount);
				
				// Backward calculate the discount to each applied item
				for(int i=0; i<oFuncCheckItemList.size(); i++) {
					BigDecimal dItemBase = oFuncCheckItemBases.get(i).get("base");
					BigDecimal dItemDiscount = (dItemBase.divide(dDiscountBase, 4, RoundingMode.HALF_UP)).multiply(dRoundDiscount);
					if((dItemDiscount.multiply(new BigDecimal("-1.0"))).compareTo(oFuncCheckItemBases.get(i).get("remain")) > 0)
						dItemDiscount = (oFuncCheckItemBases.get(i).get("remain")).multiply(new BigDecimal("-1.0"));
					
					oFuncCheckItemBases.get(i).put("discount", dItemDiscount);
				}
			}else{
				// Fix amount check discount per item
				// Calculate the round discount
				dRoundDiscount = AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(dDiscountAmount);
			}
			
			// Calculate the difference
			BigDecimal dItemDiscTotal = BigDecimal.ZERO;
			for(int i=0; i<oFuncCheckItemList.size(); i++) 
				dItemDiscTotal = dItemDiscTotal.add(oFuncCheckItemBases.get(i).get("discount"));
			BigDecimal dDifference = dDiscountAmount.subtract(dItemDiscTotal);
			if(dDifference.compareTo(BigDecimal.ZERO) != 0) {
				for(int i=(oFuncCheckItemList.size() - 1); i>=0; i--) {
					BigDecimal dItemReamin = oFuncCheckItemBases.get(i).get("remain").subtract(oFuncCheckItemBases.get(i).get("discount"));
					if(dItemReamin.compareTo(new BigDecimal ("0.0")) > 0) {
						oFuncCheckItemBases.get(i).put("discount", oFuncCheckItemBases.get(i).get("discount").add(dDifference));
						break;
					}
				}
			}
			
			for(int i=0; i<oFuncCheckItemList.size(); i++)
				oFuncCheckItemBases.get(i).put("round", AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(oFuncCheckItemBases.get(i).get("discount")));
			
			// Set pos_check_discount
			BigDecimal dCheckDiscountTotal = BigDecimal.ZERO;
			for(int i=0; i<oFuncCheckItemList.size(); i++) 
				dCheckDiscountTotal = dCheckDiscountTotal.add(oFuncCheckItemBases.get(i).get("discount"));
			oPosCheckDiscount.setTotal(dCheckDiscountTotal);
			oPosCheckDiscount.setRoundTotal(AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(dCheckDiscountTotal));
			oPosCheckDiscount.setRoundAmount(oPosCheckDiscount.getRoundTotal().subtract(oPosCheckDiscount.getTotal()));
			
			// Set pos_check_discount_item
			for(int i=0; i<oFuncCheckItemList.size(); i++) {
				PosCheckDiscountItem oPosCheckDiscountItem = oFuncCheckItemList.get(i).getCheckDiscountItemList(oPosCheckDiscount.getCheckDiscountIndex());
				oPosCheckDiscountItem.setTotal(oFuncCheckItemBases.get(i).get("discount"));
				oPosCheckDiscountItem.setRoundTotal(oFuncCheckItemBases.get(i).get("round"));
			}			
		}
	}
	
	
	public void calcSC(FuncCheckItem oFuncCheckItem, List<Integer> oAppliedCheckPreDiscountList) {
		PosCheckItem oPosCheckItem = oFuncCheckItem.getCheckItem();
		
		// Process service charge		        
        for(int i=1; i<=5; i++){
        	oPosCheckItem.setSc(i, BigDecimal.ZERO);
        	// Check if the item is charged by SC
			if(oPosCheckItem.getChargeSc(i).equals(PosCheckItem.CHARGE_SC_YES) || oPosCheckItem.getChargeSc(i).equals(PosCheckItem.CHARGE_SC_CHARGED_IN_ITEM_PRICE)){
				// Re-calculate the service charge
				BigDecimal dBaseTotal = oPosCheckItem.getTotal();
				
				// Include the pre-discount or not
				if(m_oScType.get(i-1).isIncludePreDisc()) {
					dBaseTotal = dBaseTotal.add(oPosCheckItem.getPreDisc());	// item's preDisc value is -ve value
					
					if(oAppliedCheckPreDiscountList.size() > 0) {
						for(Integer iCheckDiscountIndex: oAppliedCheckPreDiscountList) {
							if(oFuncCheckItem.hasAppliedCheckDiscountByIndex(iCheckDiscountIndex))
								dBaseTotal = dBaseTotal.add(oFuncCheckItem.getCheckDiscountItemList(iCheckDiscountIndex.intValue()).getTotal());
						}
					}
				}
			
				// Include the previous S.C./Tax
				String sTaxScMask = StringLib.fillZero(m_oScType.get((i-1)).getIncludeTaxScMask(), 30);
				for(int j=1; j<i; j++){
					if(sTaxScMask.substring((j-1), j).equals("1")){
						dBaseTotal = dBaseTotal.add(oPosCheckItem.getSc(j));
					}
				}
				
				oPosCheckItem.setSc(i, dBaseTotal.multiply(m_oScType.get(i-1).getRate()));
			}
		}
	}
	
	public void calcMidDiscount(String sType, PosCheckDiscount oPosCheckDiscount, List<FuncCheckItem> oFuncCheckItemList, HashMap<String, List<Integer>> oAppliedPartyDiscountIndex) {
		BigDecimal dBaseTotal = BigDecimal.ZERO;
		PosCheckItem oPosCheckItem = null;
		
		if(sType.equals("item")) {
			// Item Mid-Discount
			for(FuncCheckItem oFuncCheckItem:oFuncCheckItemList) {
				oPosCheckItem = oFuncCheckItem.getCheckItem();
				dBaseTotal = dBaseTotal.add(oPosCheckItem.getTotal());
				
				// Include the previous pre-discount
				if(oPosCheckDiscount.isIncludePreDisc() == true) {
					dBaseTotal = dBaseTotal.add(oPosCheckItem.getPreDisc()); // preDisc value is -ve value
					
					if(oAppliedPartyDiscountIndex.containsKey("preDisc") && oAppliedPartyDiscountIndex.get("preDisc").size() > 0) {
						for(Integer iCheckDiscountIndex: oAppliedPartyDiscountIndex.get("preDisc")) 
							dBaseTotal = dBaseTotal.add(oFuncCheckItem.getCheckDiscountItemList(iCheckDiscountIndex.intValue()).getTotal());
					}
				}
				
				// Include the previous S.C./Tax
				String sScMask = StringLib.fillZero(oPosCheckDiscount.getIncludeTaxScMask(), 30);
				for(int j=1; j<=5; j++){
					if(sScMask.substring(j-1, j).equals("1")){
						dBaseTotal = dBaseTotal.add(oPosCheckItem.getSc(j));
					}
				}
			}
			
			if(oPosCheckDiscount.isPercentageDiscountMethod()){
				oPosCheckDiscount.setTotal(dBaseTotal.multiply(oPosCheckDiscount.getRate()));
			}else {
				if (dBaseTotal.compareTo((oPosCheckDiscount.getFixAmount().multiply(new BigDecimal("-1.0")))) >= 0)
					oPosCheckDiscount.setTotal(oPosCheckDiscount.getFixAmount());
				else
					oPosCheckDiscount.setTotal((dBaseTotal.multiply(new BigDecimal("-1.0"))));
			}
			
			// Calculate the round amount
			oPosCheckDiscount.setRoundTotal(AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(oPosCheckDiscount.getTotal()));
			oPosCheckDiscount.setRoundAmount(oPosCheckDiscount.getRoundTotal().subtract(oPosCheckDiscount.getTotal()));
			
			// Set pos_check_discount_item value
			PosCheckDiscountItem oCheckDiscountItem = oPosCheckDiscount.getCheckDiscountItemList().get(0);
			oCheckDiscountItem.setTotal(oPosCheckDiscount.getTotal());
			oCheckDiscountItem.setRoundTotal(oPosCheckDiscount.getRoundTotal());
			
			oFuncCheckItemList.get(0).getCheckItem().addValueToMidDisc(oPosCheckDiscount.getTotal());
			
		}
		// Calculate Party Check Mid-Discount
		else {
			List<HashMap<String, BigDecimal>> oFuncCheckItemBases = new ArrayList<HashMap<String, BigDecimal>>();
			BigDecimal dItemsRemain = BigDecimal.ZERO;
			BigDecimal dDiscountBase = BigDecimal.ZERO;
			BigDecimal dDiscountAmount = BigDecimal.ZERO;
			BigDecimal dRoundDiscount = BigDecimal.ZERO;
			
			// Calculate the item base: item remaining total, item base total
			for(int i=0; i<oFuncCheckItemList.size(); i++) {
				HashMap<String, BigDecimal> oFuncCheckItemBase = new HashMap<String, BigDecimal>();
				BigDecimal dItemBase = BigDecimal.ZERO;
				BigDecimal dPreviousPreDiscountTotal = BigDecimal.ZERO;
				BigDecimal dPreviousMidDiscountTotal = BigDecimal.ZERO;
				String sScMask = StringLib.fillZero(oPosCheckDiscount.getIncludeTaxScMask(), 30);
				
				// item remain total
				BigDecimal dItemRemain = oFuncCheckItemList.get(i).getCheckItem().getTotal();
				for(int j=1; j<=5; j++){	// add SC charge to remin if it is include SC
					if(sScMask.substring(j-1, j).equals("1")){
						dItemRemain = dItemRemain.add(oFuncCheckItemList.get(i).getCheckItem().getSc(j));
					}
				}				
				if(oFuncCheckItemList.get(i).getItemDiscountList().size() > 0) {		//subtract the previous applied item's pre-discount and mid-discount
					for(int j=0; j<oFuncCheckItemList.get(i).getItemDiscountList().size(); j++) {
						if(oFuncCheckItemList.get(i).getItemDiscountList().get(j).isDeleted())
							continue;
						
						if(oFuncCheckItemList.get(i).getItemDiscountList().get(j).isPreDiscountType())
							dPreviousPreDiscountTotal = dPreviousPreDiscountTotal.add(oFuncCheckItemList.get(i).getItemDiscountList().get(j).getTotal());
						if(oFuncCheckItemList.get(i).getItemDiscountList().get(j).isMidDiscountType())
							dPreviousMidDiscountTotal = dPreviousMidDiscountTotal.add(oFuncCheckItemList.get(i).getItemDiscountList().get(j).getTotal());
					}
				}
				if(oAppliedPartyDiscountIndex.get("preDisc").size() > 0) {		//subtract the previous applied party's pre-discount
					for(Integer iAppliedDiscountIndex: oAppliedPartyDiscountIndex.get("preDisc")) {
						if(oFuncCheckItemList.get(i).hasAppliedCheckDiscountByIndex(iAppliedDiscountIndex))
							dPreviousPreDiscountTotal = dPreviousPreDiscountTotal.add(oFuncCheckItemList.get(i).getCheckDiscountItemList(iAppliedDiscountIndex.intValue()).getTotal());
					}
				}
				if(oAppliedPartyDiscountIndex.get("midDisc").size() > 0) {		//subtract the applied party's mid-discount
					for(Integer iAppliedDiscountIndex: oAppliedPartyDiscountIndex.get("midDisc")) {
						if(oFuncCheckItemList.get(i).hasAppliedCheckDiscountByIndex(iAppliedDiscountIndex))
							dPreviousMidDiscountTotal = dPreviousMidDiscountTotal.add(oFuncCheckItemList.get(i).getCheckDiscountItemList(iAppliedDiscountIndex.intValue()).getTotal());
					}
				}
				
				dItemRemain = dItemRemain.add(dPreviousPreDiscountTotal);
				dItemRemain = dItemRemain.add(dPreviousMidDiscountTotal);
				dItemsRemain = dItemsRemain.add(dItemRemain);
				
				// item base
				if(oPosCheckDiscount.isExcludePreviousDiscount())
					dItemBase = dItemBase.add(dItemRemain);
				else {
					dItemBase = dItemBase.add(oFuncCheckItemList.get(i).getCheckItem().getTotal());
					
					if(oPosCheckDiscount.isIncludePreDisc() == true) 
						dItemBase = dItemBase.add(dPreviousPreDiscountTotal);
				}
				
				// Include the previous S.C./Tax
				for(int j=1; j<=5; j++){
					if(sScMask.substring(j-1, j).equals("1")){
						dItemBase = dItemBase.add(oFuncCheckItemList.get(i).getCheckItem().getSc(j));
					}
				}
				
				oFuncCheckItemBase.put("remain", dItemRemain);
				oFuncCheckItemBase.put("base", dItemBase);
				oFuncCheckItemBases.add(oFuncCheckItemBase);
				
				if(oPosCheckDiscount.isFixAmountPerItemDiscountMethod()){
					BigDecimal dItemDiscount = oPosCheckDiscount.getFixAmount().multiply(oFuncCheckItemList.get(i).getCheckItem().getQty());
					if(dItemRemain.compareTo((dItemDiscount.multiply(new BigDecimal("-1.0")))) < 0)
						dItemDiscount = dItemRemain.multiply(new BigDecimal("-1.0"));
					oFuncCheckItemBases.get(i).put("discount", dItemDiscount);
					//oFuncCheckItemBases.get(i).put("round", AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(dItemDiscount));
					dDiscountAmount = dDiscountAmount.add(dItemDiscount);
				}
			}
			
			if(!oPosCheckDiscount.isFixAmountPerItemDiscountMethod()){
				// Calculate the discount base
				for(HashMap<String, BigDecimal> oFuncCheckItemBase: oFuncCheckItemBases)
					dDiscountBase = dDiscountBase.add(oFuncCheckItemBase.get("base"));
				
				// Calculate the discount amount
				if(oPosCheckDiscount.isPercentageDiscountMethod())
					dDiscountAmount = dDiscountBase.multiply(oPosCheckDiscount.getRate());
				else {
					if(dDiscountBase.compareTo((oPosCheckDiscount.getFixAmount().multiply(new BigDecimal("-1.0")))) >= 0) // as fix amount is -ve value
						dDiscountAmount = oPosCheckDiscount.getFixAmount();
					else
						dDiscountAmount = dDiscountBase.multiply(new BigDecimal("-1.0"));
				}
				
				// Check whether remaining items total > discount amount
				if((dDiscountAmount.multiply(new BigDecimal("-1.0"))).compareTo(dItemsRemain) > 0)
					dDiscountAmount = dItemsRemain.multiply(new BigDecimal("-1.0"));
	
				// Calculate the round discount
				dRoundDiscount = AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(dDiscountAmount);
				
				// Backward calculate the discount to each applied item
				for(int i=0; i<oFuncCheckItemList.size(); i++) {
					BigDecimal dItemBase = oFuncCheckItemBases.get(i).get("base");
					BigDecimal dItemDiscount = (dItemBase.divide(dDiscountBase, 4, RoundingMode.HALF_UP)).multiply(dRoundDiscount);
					if((dItemDiscount.multiply(new BigDecimal("-1.0"))).compareTo(oFuncCheckItemBases.get(i).get("remain")) > 0)
						dItemDiscount = (oFuncCheckItemBases.get(i).get("remain")).multiply(new BigDecimal("-1.0"));
					
					oFuncCheckItemBases.get(i).put("discount", dItemDiscount);
				}
			}else{
				// Fix amount check discount per item
				// Calculate the round discount
				dRoundDiscount = AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(dDiscountAmount);
			}
			
			// Calculate the difference
			BigDecimal dItemDiscTotal = BigDecimal.ZERO;
			for(int i=0; i<oFuncCheckItemList.size(); i++) 
				dItemDiscTotal = dItemDiscTotal.add(oFuncCheckItemBases.get(i).get("discount"));
			BigDecimal dDifference = dDiscountAmount.subtract(dItemDiscTotal);
			if(dDifference.compareTo(BigDecimal.ZERO) != 0) {
				for(int i=(oFuncCheckItemList.size() - 1); i>=0; i--) {
					BigDecimal dItemReamin = oFuncCheckItemBases.get(i).get("remain").subtract(oFuncCheckItemBases.get(i).get("discount"));
					if(dItemReamin.compareTo(new BigDecimal ("0.0")) > 0) {
						oFuncCheckItemBases.get(i).put("discount", oFuncCheckItemBases.get(i).get("discount").add(dDifference));
						break;
					}
				}
			}
			
			for(int i=0; i<oFuncCheckItemList.size(); i++)
				oFuncCheckItemBases.get(i).put("round", AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(oFuncCheckItemBases.get(i).get("discount")));
			
			// Set pos_check_discount
			BigDecimal dCheckDiscountTotal = BigDecimal.ZERO;
			for(int i=0; i<oFuncCheckItemList.size(); i++) 
				dCheckDiscountTotal = dCheckDiscountTotal.add(oFuncCheckItemBases.get(i).get("discount"));
			oPosCheckDiscount.setTotal(dCheckDiscountTotal);
			oPosCheckDiscount.setRoundTotal(AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(dCheckDiscountTotal));
			oPosCheckDiscount.setRoundAmount(oPosCheckDiscount.getRoundTotal().subtract(oPosCheckDiscount.getTotal()));
			
			// Set pos_check_discount_item
			for(int i=0; i<oFuncCheckItemList.size(); i++) {
				PosCheckDiscountItem oPosCheckDiscountItem = oFuncCheckItemList.get(i).getCheckDiscountItemList(oPosCheckDiscount.getCheckDiscountIndex());
				oPosCheckDiscountItem.setTotal(oFuncCheckItemBases.get(i).get("discount"));
				oPosCheckDiscountItem.setRoundTotal(oFuncCheckItemBases.get(i).get("round"));
			}			
		}
	}
	
	public void calcTax(FuncCheckItem oFuncCheckItem, HashMap<String, List<Integer>> oAppliedDiscountIndexes) {
		PosCheckItem oPosCheckItem = oFuncCheckItem.getCheckItem();
		
		for(int i=1; i<=25; i++){
			oPosCheckItem.setTax(i, BigDecimal.ZERO);
			if(i <= 4)
				oPosCheckItem.setInclusiveTaxRef(i, BigDecimal.ZERO);
        	// Check if the item is charged by Tax
			if(oPosCheckItem.getChargeTax(i).equals(PosCheckItem.CHARGE_TAX_YES) || oPosCheckItem.getChargeTax(i).equals(PosCheckItem.CHARGE_TAX_CHARGED_IN_ITEM_PRICE)){
				// Re-calculate the tax
				BigDecimal dBaseTotal = oPosCheckItem.getTotal();
				
				// Include the pre-discount and mid-discount or not
				if(m_oTaxType.get(i-1).isIncludePreDisc()) {
					dBaseTotal = dBaseTotal.add(oPosCheckItem.getPreDisc());	// item's preDisc value is -ve value
					
					if(oAppliedDiscountIndexes.containsKey("preDisc") && oAppliedDiscountIndexes.get("preDisc").size() > 0) {
						for(Integer iCheckDiscountIndex: oAppliedDiscountIndexes.get("preDisc")) {
							if(oFuncCheckItem.hasAppliedCheckDiscountByIndex(iCheckDiscountIndex))
								dBaseTotal = dBaseTotal.add(oFuncCheckItem.getCheckDiscountItemList(iCheckDiscountIndex.intValue()).getTotal());
						}
					}
				}
				if(m_oTaxType.get(i-1).isIncludeMidDisc()) {
					dBaseTotal = dBaseTotal.add(oPosCheckItem.getMidDisc());	// midDisc value is -ve value
					
					if(oAppliedDiscountIndexes.containsKey("midDisc") && oAppliedDiscountIndexes.get("midDisc").size() > 0) {
						for(Integer iCheckDiscountIndex: oAppliedDiscountIndexes.get("midDisc")) {
							if(oFuncCheckItem.hasAppliedCheckDiscountByIndex(iCheckDiscountIndex))
								dBaseTotal = dBaseTotal.add(oFuncCheckItem.getCheckDiscountItemList(iCheckDiscountIndex.intValue()).getTotal());
						}
					}
				}
				
				// Include the previous S.C./Tax
				String sTaxScMask = StringLib.fillZero(m_oTaxType.get(i-1).getIncludeTaxScMask(), 30);
				for(int j=1; j<=5; j++){
					if(sTaxScMask.substring((j-1), j).equals("1")){
						dBaseTotal = dBaseTotal.add(oPosCheckItem.getSc(j));
					}
				}
				for(int j=1; j<i; j++){
					if(sTaxScMask.substring(4+j, 4+j+1).equals("1")){
						dBaseTotal = dBaseTotal.add(oPosCheckItem.getTax(j));
					}
				}
				
				// check whether it is base less than 0
				if(oPosCheckItem.getTotal().compareTo(BigDecimal.ZERO) > 0 && dBaseTotal.compareTo(BigDecimal.ZERO) < 0)
					dBaseTotal = BigDecimal.ZERO;

				oPosCheckItem.setTax(i, dBaseTotal.multiply(m_oTaxType.get(i-1).getRate()));
			}else
			if(oPosCheckItem.getChargeTax(i).equals(PosCheckItem.CHARGE_TAX_INCLUSIVE_IN_ITEM_PRICE_WITHOUT_BREAKDOWN)){
				// Re-calculate the tax
				BigDecimal dBaseTotal = oPosCheckItem.getTotal();
				BigDecimal dRate = m_oTaxType.get(i-1).getRate();

				// Include the pre-discount and mid-discount or not
				if(m_oTaxType.get(i-1).isIncludePreDisc()) {
					dBaseTotal = dBaseTotal.add(oPosCheckItem.getPreDisc());	// preDisc value is -ve value
					
					if(oAppliedDiscountIndexes.containsKey("preDisc") && oAppliedDiscountIndexes.get("preDisc").size() > 0) {
						for(Integer iCheckDiscountIndex: oAppliedDiscountIndexes.get("preDisc")) {
							if(oFuncCheckItem.hasAppliedCheckDiscountByIndex(iCheckDiscountIndex))
								dBaseTotal = dBaseTotal.add(oFuncCheckItem.getCheckDiscountItemList(iCheckDiscountIndex.intValue()).getTotal());
						}
					}
				}
				if(m_oTaxType.get(i-1).isIncludeMidDisc()) {
					dBaseTotal = dBaseTotal.add(oPosCheckItem.getMidDisc());	// midDisc value is -ve value
					
					if(oAppliedDiscountIndexes.containsKey("midDisc") && oAppliedDiscountIndexes.get("midDisc").size() > 0) {
						for(Integer iCheckDiscountIndex: oAppliedDiscountIndexes.get("midDisc")) {
							if(oFuncCheckItem.hasAppliedCheckDiscountByIndex(iCheckDiscountIndex))
								dBaseTotal = dBaseTotal.add(oFuncCheckItem.getCheckDiscountItemList(iCheckDiscountIndex.intValue()).getTotal());
						}
					}
				}
				
				// Include the previous S.C./Tax
				String sTaxScMask = StringLib.fillZero(m_oTaxType.get(i-1).getIncludeTaxScMask(), 30);
				for(int j=1; j<=5; j++){
					if(sTaxScMask.substring((j-1), j).equals("1") && oPosCheckItem.getSc(j).compareTo(BigDecimal.ZERO) != 0){
						if(oPosCheckItem.getChargeSc(j).equals(PosCheckItem.CHARGE_SC_YES)){
							dBaseTotal = dBaseTotal.add(oPosCheckItem.getSc(j));
						}else{
							dRate = dRate.add(m_oScType.get(j-1).getRate().multiply(m_oTaxType.get(i-1).getRate()));
						}
					}
				}

				for(int j=1; j<i; j++){
					if(sTaxScMask.substring(4+j, 4+j+1).equals("1")){
						if(oPosCheckItem.getChargeTax(j).equals(PosCheckItem.CHARGE_TAX_YES)){
							dBaseTotal = dBaseTotal.add(oPosCheckItem.getTax(j));
						}else{
							dRate = dRate.add(m_oTaxType.get(j-1).getRate().multiply(m_oTaxType.get(i-1).getRate()));
						}
					}
				}

				int iInclusiveTaxIndex = i;
				if(i > 4)
					iInclusiveTaxIndex = 4;
				oPosCheckItem.setInclusiveTaxRef(iInclusiveTaxIndex, oPosCheckItem.getInclusiveTaxRef(iInclusiveTaxIndex).add(dBaseTotal.subtract(dBaseTotal.divide(dRate.add(new BigDecimal("1.0")), 10, RoundingMode.HALF_UP))));
			}
		}
	}
	
	public void calcPostDiscount(String sType, PosCheckDiscount oPosCheckDiscount, List<FuncCheckItem> oFuncCheckItemList, HashMap<String, List<Integer>> oAppliedPartyDiscountIndex) {
		BigDecimal dBaseTotal = BigDecimal.ZERO;
		PosCheckItem oPosCheckItem = null;
		
		if(sType.equals("item")) {
			for(FuncCheckItem oFuncCheckItem:oFuncCheckItemList) {
				oPosCheckItem = oFuncCheckItem.getCheckItem();
				dBaseTotal = dBaseTotal.add(oPosCheckItem.getTotal());
				if(oPosCheckDiscount.isIncludePreDisc() == true) {
					dBaseTotal = dBaseTotal.add(oPosCheckItem.getPreDisc());		//preDisc is -ve value
					
					if(oAppliedPartyDiscountIndex.containsKey("preDisc") && oAppliedPartyDiscountIndex.get("preDisc").size() > 0) {
						for(Integer iCheckDiscountIndex: oAppliedPartyDiscountIndex.get("preDisc")) {
							if(oFuncCheckItem.hasAppliedCheckDiscountByIndex(iCheckDiscountIndex))
								dBaseTotal = dBaseTotal.add(oFuncCheckItem.getCheckDiscountItemList(iCheckDiscountIndex.intValue()).getTotal());
						}
					}
				}
				
				if(oPosCheckDiscount.isIncludeMidDisc() == true) {
					dBaseTotal = dBaseTotal.add(oPosCheckItem.getMidDisc());		//midDisc is -ve value
					
					if(oAppliedPartyDiscountIndex.containsKey("midDisc") && oAppliedPartyDiscountIndex.get("midDisc").size() > 0) {
						for(Integer iCheckDiscountIndex: oAppliedPartyDiscountIndex.get("midDisc")) {
							if(oFuncCheckItem.hasAppliedCheckDiscountByIndex(iCheckDiscountIndex))
								dBaseTotal = dBaseTotal.add(oFuncCheckItem.getCheckDiscountItemList(iCheckDiscountIndex.intValue()).getTotal());
						}
					}
				}
				
				// Include the previous S.C./Tax
				String sScMask = StringLib.fillZero(oPosCheckDiscount.getIncludeTaxScMask(), 30);
				for(int j=1; j<=5; j++){
					if(sScMask.substring((j-1), j).equals("1")){
						dBaseTotal = dBaseTotal.add(oPosCheckItem.getSc(j));
					}
				}
				for(int j=1; j<=25; j++){
					if(sScMask.substring(4+j, 4+j+1).equals("1")){
						dBaseTotal = dBaseTotal.add(oPosCheckItem.getTax(j));
					}
				}
				
				if(oPosCheckDiscount.isPercentageDiscountMethod()){
					// Percentage discount
					oPosCheckDiscount.setTotal(dBaseTotal.multiply(oPosCheckDiscount.getRate()));
				}else {
					if (dBaseTotal.compareTo((oPosCheckDiscount.getFixAmount().multiply(new BigDecimal("-1.0")))) >= 0)
						oPosCheckDiscount.setTotal(oPosCheckDiscount.getFixAmount());
					else
						oPosCheckDiscount.setTotal((dBaseTotal.multiply(new BigDecimal("-1.0"))));
				}
				
				// Calculate the round amount
				oPosCheckDiscount.setRoundTotal(AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(oPosCheckDiscount.getTotal()));
				oPosCheckDiscount.setRoundAmount(oPosCheckDiscount.getRoundTotal().subtract(oPosCheckDiscount.getTotal()));
				
				// Set pos_check_discount_item value
				PosCheckDiscountItem oCheckDiscountItem = oPosCheckDiscount.getCheckDiscountItemList().get(0);
				oCheckDiscountItem.setTotal(oPosCheckDiscount.getTotal());
				oCheckDiscountItem.setRoundTotal(oPosCheckDiscount.getRoundTotal());
				
				oPosCheckItem.addValueToPostDisc(oPosCheckDiscount.getTotal());
			}
		}
		// Calculate Party Check Mid-Discount
		else {
			List<HashMap<String, BigDecimal>> oFuncCheckItemBases = new ArrayList<HashMap<String, BigDecimal>>();
			BigDecimal dItemsRemain = BigDecimal.ZERO;
			BigDecimal dDiscountBase = BigDecimal.ZERO;
			BigDecimal dDiscountAmount = BigDecimal.ZERO;
			BigDecimal dRoundDiscount = BigDecimal.ZERO;
			
			// Calculate the item base: item remaining total, item base total
			for(int i=0; i<oFuncCheckItemList.size(); i++) {
				HashMap<String, BigDecimal> oFuncCheckItemBase = new HashMap<String, BigDecimal>();
				BigDecimal dItemBase = BigDecimal.ZERO;
				BigDecimal dPreviousPreDiscountTotal = BigDecimal.ZERO;
				BigDecimal dPreviousMidDiscountTotal = BigDecimal.ZERO;
				BigDecimal dPreviousPostDiscountTotal = BigDecimal.ZERO;
				String sScMask = StringLib.fillZero(oPosCheckDiscount.getIncludeTaxScMask(), 30);
				
				// item remain total
				BigDecimal dItemRemain = oFuncCheckItemList.get(i).getCheckItem().getTotal();
				for(int j=1; j<=5; j++){	// add SC charge to remain if it is include SC
					if(sScMask.substring(j-1, j).equals("1")){
						dItemRemain = dItemRemain.add(oFuncCheckItemList.get(i).getCheckItem().getSc(j));
					}
				}	
				for(int j=1; j<=25; j++){	// add Tax charge to remain if it is include Tax
					if(sScMask.substring(4+j, 4+j+1).equals("1")){
						dItemRemain = dItemRemain.add(oFuncCheckItemList.get(i).getCheckItem().getTax(j));
					}
				}
				
				if(oFuncCheckItemList.get(i).getItemDiscountList().size() > 0) {		//subtract the previous applied item's pre-discount, mid-discount and post-discount
					for(int j=0; j<oFuncCheckItemList.get(i).getItemDiscountList().size(); j++) {
						if(oFuncCheckItemList.get(i).getItemDiscountList().get(j).isDeleted())
							continue;
						
						if(oFuncCheckItemList.get(i).getItemDiscountList().get(j).isPreDiscountType())
							dPreviousPreDiscountTotal = dPreviousPreDiscountTotal.add(oFuncCheckItemList.get(i).getItemDiscountList().get(j).getTotal());
						else if(oFuncCheckItemList.get(i).getItemDiscountList().get(j).isMidDiscountType())
							dPreviousMidDiscountTotal = dPreviousMidDiscountTotal.add(oFuncCheckItemList.get(i).getItemDiscountList().get(j).getTotal());
						else 
							dPreviousPostDiscountTotal = dPreviousPostDiscountTotal.add(oFuncCheckItemList.get(i).getItemDiscountList().get(j).getTotal());
					}
				}
				if(oAppliedPartyDiscountIndex.get("preDisc").size() > 0) {		//subtract the previous applied party's pre-discount
					for(Integer iAppliedDiscountIndex: oAppliedPartyDiscountIndex.get("preDisc")) {
						if(oFuncCheckItemList.get(i).hasAppliedCheckDiscountByIndex(iAppliedDiscountIndex))
							dPreviousPreDiscountTotal = dPreviousPreDiscountTotal.add(oFuncCheckItemList.get(i).getCheckDiscountItemList(iAppliedDiscountIndex.intValue()).getTotal());
					}
					
				}
				if(oAppliedPartyDiscountIndex.get("midDisc").size() > 0) {		//subtract the previous applied party's mid-discount
					for(Integer iAppliedDiscountIndex: oAppliedPartyDiscountIndex.get("midDisc")) {
						if(oFuncCheckItemList.get(i).hasAppliedCheckDiscountByIndex(iAppliedDiscountIndex))
							dPreviousMidDiscountTotal = dPreviousMidDiscountTotal.add(oFuncCheckItemList.get(i).getCheckDiscountItemList(iAppliedDiscountIndex.intValue()).getTotal());
					}
				}
				if(oAppliedPartyDiscountIndex.get("postDisc").size() > 0) {		//subtract the previous applied party's post-discount
					for(Integer iAppliedDiscountIndex: oAppliedPartyDiscountIndex.get("postDisc")) {
						if(oFuncCheckItemList.get(i).hasAppliedCheckDiscountByIndex(iAppliedDiscountIndex))
							dPreviousPostDiscountTotal = dPreviousPostDiscountTotal.add(oFuncCheckItemList.get(i).getCheckDiscountItemList(iAppliedDiscountIndex.intValue()).getTotal());
					}
				}
				
				dItemRemain = dItemRemain.add(dPreviousPreDiscountTotal);
				dItemRemain = dItemRemain.add(dPreviousMidDiscountTotal);
				dItemRemain = dItemRemain.add(dPreviousPostDiscountTotal);
				dItemsRemain = dItemsRemain.add(dItemRemain);
				
				// item base
				if(oPosCheckDiscount.isExcludePreviousDiscount())
					dItemBase = dItemBase.add(dItemRemain);
				else {
					dItemBase = dItemBase.add(oFuncCheckItemList.get(i).getCheckItem().getTotal());
					
					if(oPosCheckDiscount.isIncludePreDisc() == true) 
						dItemBase = dItemBase.add(dPreviousPreDiscountTotal);
					
					if(oPosCheckDiscount.isIncludeMidDisc() == true)
						dItemBase = dItemBase.add(dPreviousMidDiscountTotal);
				}
				
				// Include the previous S.C./Tax
				for(int j=1; j<=5; j++){
					if(sScMask.substring(j-1, j).equals("1")){
						dItemBase = dItemBase.add(oFuncCheckItemList.get(i).getCheckItem().getSc(j));
					}
				}
				for(int j=1; j<=25; j++){
					if(sScMask.substring(4+j, 4+j+1).equals("1")){
						dItemBase = dItemBase.add(oFuncCheckItemList.get(i).getCheckItem().getTax(j));
					}
				}
				
				oFuncCheckItemBase.put("remain", dItemRemain);
				oFuncCheckItemBase.put("base", dItemBase);
				oFuncCheckItemBases.add(oFuncCheckItemBase);
				
				if(oPosCheckDiscount.isFixAmountPerItemDiscountMethod()){
					BigDecimal dItemDiscount = oPosCheckDiscount.getFixAmount().multiply(oFuncCheckItemList.get(i).getCheckItem().getQty());
					if(dItemRemain.compareTo((dItemDiscount.multiply(new BigDecimal("-1.0")))) < 0)
						dItemDiscount = dItemRemain.multiply(new BigDecimal("-1.0"));
					oFuncCheckItemBases.get(i).put("discount", dItemDiscount);
					//oFuncCheckItemBases.get(i).put("round", AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(dItemDiscount));
					dDiscountAmount = dDiscountAmount.add(dItemDiscount);
				}
			}
			
			if(!oPosCheckDiscount.isFixAmountPerItemDiscountMethod()){
				// Calculate the discount base
				for(HashMap<String, BigDecimal> oFuncCheckItemBase: oFuncCheckItemBases)
					dDiscountBase = dDiscountBase.add(oFuncCheckItemBase.get("base"));
				
				// Calculate the discount amount
				if(oPosCheckDiscount.isPercentageDiscountMethod())
					dDiscountAmount = dDiscountBase.multiply(oPosCheckDiscount.getRate());
				else {
					if(dDiscountBase.compareTo((oPosCheckDiscount.getFixAmount().multiply(new BigDecimal("-1.0")))) >= 0) // as fix amount is -ve value
						dDiscountAmount = oPosCheckDiscount.getFixAmount();
					else
						dDiscountAmount = dDiscountBase.multiply(new BigDecimal("-1.0"));
				}
				
				// Check whether remaining items total > discount amount
				if((dDiscountAmount.multiply(new BigDecimal("-1.0"))).compareTo(dItemsRemain) > 0)
					dDiscountAmount = dItemsRemain.multiply(new BigDecimal("-1.0"));
	
				// Calculate the round discount
				dRoundDiscount = AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(dDiscountAmount);
				
				// Backward calculate the discount to each applied item
				for(int i=0; i<oFuncCheckItemList.size(); i++) {
					BigDecimal dItemBase = oFuncCheckItemBases.get(i).get("base");
					BigDecimal dItemDiscount = (dItemBase.divide(dDiscountBase, 4, RoundingMode.HALF_UP)).multiply(dRoundDiscount);
					if((dItemDiscount.multiply(new BigDecimal("-1.0"))).compareTo(oFuncCheckItemBases.get(i).get("remain")) > 0)
						dItemDiscount = (oFuncCheckItemBases.get(i).get("remain")).multiply(new BigDecimal("-1.0"));
					
					oFuncCheckItemBases.get(i).put("discount", dItemDiscount);
				}
			}else{
				// Fix amount check discount per item
				// Calculate the round discount
				dRoundDiscount = AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(dDiscountAmount);
			}
			
			// Calculate the difference
			BigDecimal dItemDiscTotal = BigDecimal.ZERO;
			for(int i=0; i<oFuncCheckItemList.size(); i++) 
				dItemDiscTotal = dItemDiscTotal.add(oFuncCheckItemBases.get(i).get("discount"));
			BigDecimal dDifference = dDiscountAmount.subtract(dItemDiscTotal);
			if(dDifference.compareTo(BigDecimal.ZERO) != 0) {
				for(int i=(oFuncCheckItemList.size() - 1); i>=0; i--) {
					BigDecimal dItemReamin = oFuncCheckItemBases.get(i).get("remain").subtract(oFuncCheckItemBases.get(i).get("discount"));
					if(dItemReamin.compareTo(new BigDecimal ("0.0")) > 0) {
						oFuncCheckItemBases.get(i).put("discount", oFuncCheckItemBases.get(i).get("discount").add(dDifference));
						break;
					}
				}
			}
			
			for(int i=0; i<oFuncCheckItemList.size(); i++)
				oFuncCheckItemBases.get(i).put("round", AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(oFuncCheckItemBases.get(i).get("discount")));
			
			// Set pos_check_discount
			BigDecimal dCheckDiscountTotal = BigDecimal.ZERO;
			for(int i=0; i<oFuncCheckItemList.size(); i++) 
				dCheckDiscountTotal = dCheckDiscountTotal.add(oFuncCheckItemBases.get(i).get("discount"));
			oPosCheckDiscount.setTotal(dCheckDiscountTotal);
			oPosCheckDiscount.setRoundTotal(AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(dCheckDiscountTotal));
			oPosCheckDiscount.setRoundAmount(oPosCheckDiscount.getRoundTotal().subtract(oPosCheckDiscount.getTotal()));
			
			// Set pos_check_discount_item
			for(int i=0; i<oFuncCheckItemList.size(); i++) {
				PosCheckDiscountItem oPosCheckDiscountItem = oFuncCheckItemList.get(i).getCheckDiscountItemList(oPosCheckDiscount.getCheckDiscountIndex());
				oPosCheckDiscountItem.setTotal(oFuncCheckItemBases.get(i).get("discount"));
				oPosCheckDiscountItem.setRoundTotal(oFuncCheckItemBases.get(i).get("round"));
			}			
		}
	}
	
	// Calculate inclusive SC and tax
	private void calcInclusiveSCAndTax(FuncCheckItem oFuncCheckItem, FuncCheckItem oFuncCheckItemForSCTaxMaskRef){
		BigDecimal dSCFactor[] = {BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO};
		BigDecimal dTaxFactor[] = {BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO,
				BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO,
				BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO,
				BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO,
				BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO};
		
		PosCheckItem oPosCheckItem = oFuncCheckItem.getCheckItem();
		PosCheckItem oPosCheckItemForSCTaxMaskRef = oFuncCheckItemForSCTaxMaskRef.getCheckItem();
		BigDecimal dFinalFactor = BigDecimal.ONE;
		Boolean bHaveInclusiveSCTax = false;
		
		for(int i=1; i<=5; i++){
			if(oPosCheckItemForSCTaxMaskRef.getChargeSc(i).equals(PosCheckItem.CHARGE_SC_CHARGED_IN_ITEM_PRICE)){
				dSCFactor[i-1] = BigDecimal.ONE;
				
				// Include the previous S.C./Tax
				String sTaxScMask = StringLib.fillZero(m_oScType.get((i-1)).getIncludeTaxScMask(), 30);
				for(int j=1; j<i; j++){
					if(sTaxScMask.substring((j-1), j).equals("1")){
						dSCFactor[i-1] = dSCFactor[i-1].add(dSCFactor[j-1]);
					}
				}
				
				dSCFactor[i-1] = dSCFactor[i-1].multiply(m_oScType.get(i-1).getRate());
				
				bHaveInclusiveSCTax = true;
				
				dFinalFactor = dFinalFactor.add(dSCFactor[i-1]);
			}
		}
		
		for(int i=1; i<=25; i++){
			// Check if the item is charged by Tax
			if(oPosCheckItemForSCTaxMaskRef.getChargeTax(i).equals(PosCheckItem.CHARGE_TAX_CHARGED_IN_ITEM_PRICE)){
				dTaxFactor[i-1] = BigDecimal.ONE;
				
				// Include the previous S.C./Tax
				String sTaxScMask = StringLib.fillZero(m_oTaxType.get(i-1).getIncludeTaxScMask(), 30);
				for(int j=1; j<=5; j++){
					if(sTaxScMask.substring((j-1), j).equals("1")){
						dTaxFactor[i-1] = dTaxFactor[i-1].add(dSCFactor[j-1]);
					}
				}
				for(int j=1; j<i; j++){
					if(sTaxScMask.substring(4+j, 4+j+1).equals("1")){
						dTaxFactor[i-1] = dTaxFactor[i-1].add(dTaxFactor[j-1]);
					}
				}
				
				dTaxFactor[i-1] = dTaxFactor[i-1].multiply(m_oTaxType.get(i-1).getRate());
				
				bHaveInclusiveSCTax = true;
				
				dFinalFactor = dFinalFactor.add(dTaxFactor[i-1]);
			}
		}
		
		if(bHaveInclusiveSCTax && dFinalFactor.compareTo(BigDecimal.ZERO) > 0){
			// Reverse calculation of item price
			BigDecimal dFinalPrice = oPosCheckItem.getOriginalPrice().divide(dFinalFactor, 10, RoundingMode.HALF_UP);
			oPosCheckItem.setPrice(dFinalPrice);	
		}
	}
	
	// release payment for a check
	// It is also used for release previous payments of adjust payments
	public boolean releasePayment(int iBusinessDayId, int iOutletId, String sCheckPrefixNum, int iVoidCodeId, int iTableNo, String sTableExt, boolean bAdjustPayments, PosPaymentMethodList oPaymentMethodList) {
		DateTime dtVoidDateTime = new DateTime();
		DateTimeFormatter voidFormatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		FuncPayment oFuncPayment = new FuncPayment();
		
		// For adjust pamyents, only void PMS and coupon
		if(bAdjustPayments) {
			//void pms posting if needed
			FuncPMS oFuncPMS = new FuncPMS();
			BigDecimal dPreviousPaymentTotal = BigDecimal.ZERO;
			for(PosCheckPayment oCheckPayment:m_oCheckPaymentList) {
				if(oCheckPayment.isDelete() && oCheckPayment.havePmsPayment()) {
					PosPaymentMethod oPaymentMethod = oPaymentMethodList.getPaymentMethodList().get(oCheckPayment.getPaymentMethodId());
					if(oFuncPMS.pmsVoidPosting(this, oCheckPayment, oPaymentMethod, dPreviousPaymentTotal) == false) {
						m_sErrorMessage = AppGlobal.g_oLang.get()._("fail_to_void_pms_payment")+", "+AppGlobal.g_oLang.get()._("please_try_again");
						return false;
					}
				}
				dPreviousPaymentTotal = dPreviousPaymentTotal.add(oCheckPayment.getPayTotal());
			}
			
			//update coupon payment status
			for(PosCheckPayment oCheckPayment:m_oCheckPaymentList) {
				if(!oCheckPayment.isDelete())
					continue;
				
				if(oCheckPayment.getPaymentType().equals(PosCheckPayment.PAYMENT_TYPE_COUPON) && oCheckPayment.getRefData(1) != null && oCheckPayment.getRefDataByIndexAndKey(1, "coupon_number") != null) {
					FuncCoupon oCouponPayment = new FuncCoupon();
					oCouponPayment.setStartCoupon(oCheckPayment.getRefDataByIndexAndKey(1, "coupon_number"));
					oCouponPayment.setEndCoupon(oCheckPayment.getRefDataByIndexAndKey(1, "coupon_number"));
					oCouponPayment.setRedeemItem("");
					oCouponPayment.setCouponCurrentStatus(FuncCoupon.COUPON_STATUS_USED);
					oCouponPayment.setCouponNextStatus(FuncCoupon.COUPON_STATUS_SOLD);
					
					oCouponPayment.updateCoupon(FuncCoupon.UPDATE_COUPON_TYPE_USE_AS_PAYMENT);
				}
			}

			return true;
		}
		
		//Normal release payments process
		m_oCheck = new PosCheck();
		if (m_oCheck.readByCheckNo(iBusinessDayId, iOutletId, sCheckPrefixNum, 1).equals(PosCheck.API_RESULT_SUCCESS) == false) {
			m_sErrorMessage = AppGlobal.g_oLang.get()._("check_is_not_found");
			return false;
		}
		
		if (!isPaid(false)) {
			m_sErrorMessage = AppGlobal.g_oLang.get()._("check_is_not_paid");
			return false;
		}

		// Check if table is in use by other station
		m_oOutletTable.readByOutletIdTable(m_oCheck.getOutletId(), iTableNo, sTableExt);
		if(m_oOutletTable.getOtblId() != 0) {
			if (m_oOutletTable.getStationId() > 0 && m_oOutletTable.getStationId() != AppGlobal.g_oFuncStation.get().getStationId()) {
				FuncStation oStation = new FuncStation();
				if(oStation.loadStationById(m_oOutletTable.getStationId())){
					String sStationName = oStation.getName(AppGlobal.g_oCurrentLangIndex.get());
					m_sErrorMessage = AppGlobal.g_oLang.get()._("table_is_locked_by_station")+" "+sStationName;
				}else
					m_sErrorMessage = AppGlobal.g_oLang.get()._("table_is_locked_by_station")+" "+m_oOutletTable.getStationId();
				return false;
			}
			
			if(m_oOutletTable.getCheckId() > 0){
				m_sErrorMessage = AppGlobal.g_oLang.get()._("table")+ " " + m_oOutletTable.getTable() + m_oOutletTable.getTableExtension() + " " + AppGlobal.g_oLang.get()._("is_occupied_please_select_other_table");
				return false;
			}
		}

		//void OGS payment if needed
		List<PosInterfaceConfig> oOgsInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_PAYMENT_INTERFACE);
		if(!oOgsInterfaceConfigList.isEmpty()) {
			PosInterfaceConfig oPosInterfaceConfig = oOgsInterfaceConfigList.get(0);
			if(oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_OGS)) {
				FuncPaymentInterface oFuncPaymentInterface = new FuncPaymentInterface(oPosInterfaceConfig);

				// after void ogs payment sucessfully, mark status of check extra info to deleted
				if(oFuncPaymentInterface.releaseOgsPayment(this)) {
					for(PosCheckExtraInfo oCheckExtraInfo: this.getCheckExtraInfoList()) {
						oCheckExtraInfo.setStatus(PosCheckExtraInfo.STATUS_DELETED);
					}
				} else {
					m_sErrorMessage = oFuncPaymentInterface.getLastErrorMessage();
					return false;
				}
			}
		}
		
		//void pms posting if needed
		FuncPMS oFuncPMS = new FuncPMS();
		BigDecimal dPreviousPaymentTotal = BigDecimal.ZERO;
		for(PosCheckPayment oCheckPayment:m_oCheck.getCheckPaymentArrayList()) {
			if(oCheckPayment.havePmsPayment()) {
				PosPaymentMethod oPaymentMethod = oPaymentMethodList.getPaymentMethodList().get(oCheckPayment.getPaymentMethodId());
				oFuncPMS.pmsVoidPosting(this, oCheckPayment, oPaymentMethod, dPreviousPaymentTotal);
			}
			dPreviousPaymentTotal = dPreviousPaymentTotal.add(oCheckPayment.getPayTotal());
		}
		
		//void pms posting if needed
		dPreviousPaymentTotal = BigDecimal.ZERO;
		List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_MEMBERSHIP_INTERFACE);
		HashMap<Integer, PosInterfaceConfig> oSVCInterfaceConfingList = new HashMap<Integer, PosInterfaceConfig>();
		if(oInterfaceConfigList.size() > 0) {
			PosInterfaceConfig oLastPosInterfaceConfig = null;
			boolean bHaveSVCVoidPosting = false;
			FuncMembershipInterface oFuncMembershipInterface;
			List<Integer> iSVCIntfList = new ArrayList<Integer>();
			for(PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
				if(oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_LPS_SVC)) {
					iSVCIntfList.add(oPosInterfaceConfig.getInterfaceId());
					oSVCInterfaceConfingList.put(oPosInterfaceConfig.getInterfaceId(), oPosInterfaceConfig);
				}
			}
			
			for(PosCheckPayment oCheckPayment:m_oCheck.getCheckPaymentArrayList()) {
				List<PosCheckPayment> oCheckPayments = new ArrayList<PosCheckPayment>();
				oCheckPayments.add(oCheckPayment);
				if(iSVCIntfList.contains(oCheckPayment.getMembershipInterfaceId())) {
					bHaveSVCVoidPosting = true;
					PosInterfaceConfig oSVCInterface = oSVCInterfaceConfingList.get(oCheckPayment.getMembershipInterfaceId());
					oLastPosInterfaceConfig = oSVCInterface;
					oFuncMembershipInterface = new FuncMembershipInterface(oSVCInterface);
					oFuncMembershipInterface.svcVoidPosting(this, oCheckPayments, dPreviousPaymentTotal, false);
				}
				dPreviousPaymentTotal = dPreviousPaymentTotal.add(oCheckPayment.getPayTotal());
			}
			
			if(bHaveSVCVoidPosting && oLastPosInterfaceConfig != null) {
				oFuncMembershipInterface = new FuncMembershipInterface(oLastPosInterfaceConfig);
				oFuncMembershipInterface.svcVoidPosting(this, m_oCheck.getCheckPaymentArrayList(), dPreviousPaymentTotal, true);
			}
		}
		
		//update check
		m_oCheck.setPaymentTotal(BigDecimal.ZERO);
		m_oCheck.setTipsTotal(BigDecimal.ZERO);
		m_oCheck.setPaid(PosCheck.PAID_NOT_PAID);
		m_oCheck.setSettleShiftNo(0);
		m_oCheck.setCloseLocTime(null);
		m_oCheck.setCloseTime("");
		m_oCheck.setCloseUserId(0);
		m_oCheck.setCloseStationId(0);
		
		// Process taiwan GUI
		if(AppGlobal.g_oFuncStation.get().supportTaiwanGui()){
			this.voidTaiwanGuiTran();
		}
		
		if (!updateCheck(false, false, 0, 0, false, 0, 0, 0, 0, true, false, false, false, 0, 0, false).equals(PosCheck.API_RESULT_SUCCESS)) {
			//update outlet table
			m_oOutletTable.setCheckId(0);
			m_oOutletTable.setStationId(0);
			m_oOutletTable.setStatus(PosOutletTable.STATUS_VACANT);
			m_oOutletTable.addUpdate(true);
			return false;
		}

		//update check table
		PosCheckTable oCheckTable = new PosCheckTable();
		oCheckTable.readByCheckId(m_oCheck.getCheckId());
		if (!(iTableNo == oCheckTable.getTable() && sTableExt.equals(oCheckTable.getTableExt()))) { // Inputted table no. is not equal to record's table no.
			oCheckTable.setTable(iTableNo);
			oCheckTable.setTableExt(sTableExt);
			oCheckTable.addUpdate(true, AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncStation.get().getStationId());
		}

		//update outlet table
		m_oOutletTable.setCheckId(m_oCheck.getCheckId());
		m_oOutletTable.setStationId(0);
		m_oOutletTable.setStatus(PosOutletTable.STATUS_CHECK_PRINTED);
		m_oOutletTable.addUpdate(true);

		// get check's payment method
		for (PosCheckPayment oCheckPayment: m_oCheck.getCheckPaymentArrayList()) {
			oCheckPayment.setVoidUserId(AppGlobal.g_oFuncUser.get().getUserId());
			oCheckPayment.setVoidStatId(AppGlobal.g_oFuncStation.get().getStationId());
			oCheckPayment.setVoidVdrsId(iVoidCodeId);
			oCheckPayment.setVoidLocTime(dtVoidDateTime);
			oCheckPayment.setVoidTime(voidFormatter.print(dtVoidDateTime.withZone(DateTimeZone.UTC)));
			oCheckPayment.setStatus(PosCheckPayment.STATUS_DELETED);
			
			// Mark delete to check extra info
			for(PosCheckExtraInfo oPosCheckExtraInfo:oCheckPayment.getCheckExtraInfoArrayList()){
				oPosCheckExtraInfo.setStatus(PosCheckExtraInfo.STATUS_DELETED);
			}
			
			oFuncPayment.addOldCheckPayment(oCheckPayment);
			// add "release_payment" to action log list
			if(oCheckPayment.getCpayId() > 0)
				AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.release_payment.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), 0, 0, 0, oCheckPayment.getCpayId(), "");
		}
		
		// update payment
		oFuncPayment.saveMultipleCheckPayments(this.getCheckPrefixNo(), 0, 1, false);
		
		// update coupon payment status
		for(PosCheckPayment oCheckPayment:m_oCheckPaymentList) {
			if(oCheckPayment.getPaymentType().equals(PosCheckPayment.PAYMENT_TYPE_COUPON) && oCheckPayment.getRefData(1) != null && oCheckPayment.getRefDataByIndexAndKey(1, "coupon_number") != null) {
				FuncCoupon oCouponPayment = new FuncCoupon();
				oCouponPayment.setStartCoupon(oCheckPayment.getRefDataByIndexAndKey(1, "coupon_number"));
				oCouponPayment.setEndCoupon(oCheckPayment.getRefDataByIndexAndKey(1, "coupon_number"));
				oCouponPayment.setRedeemItem("");
				oCouponPayment.setCouponCurrentStatus(FuncCoupon.COUPON_STATUS_USED);
				oCouponPayment.setCouponNextStatus(FuncCoupon.COUPON_STATUS_SOLD);
				
				oCouponPayment.updateCoupon(FuncCoupon.UPDATE_COUPON_TYPE_USE_AS_PAYMENT);
			}
		}
		
		//update coupon item status
		int iCouponRedeemItemCnt = 0;
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oCheckItemList:oFuncCheckParty.getWholeItemList()){
				for(FuncCheckItem oCheckItem:oCheckItemList) {
					if(oCheckItem.isCouponItem()) {
						FuncCoupon oCouponItem = new FuncCoupon();
						oCouponItem.setStartCoupon(oCheckItem.getExtraInfoBySectionAndVariable("online_coupon", "sell_start_coupon"));
						oCouponItem.setEndCoupon(oCheckItem.getExtraInfoBySectionAndVariable("online_coupon", "sell_end_coupon"));
						oCouponItem.setCouponCurrentStatus(FuncCoupon.COUPON_STATUS_SOLD);
						oCouponItem.setCouponNextStatus(FuncCoupon.COUPON_STATUS_LOCKED);
						
						oCouponItem.updateCoupon(FuncCoupon.UPDATE_COUPON_TYPE_ORDER_ITEM);
					}
					
					if(oCheckItem.isRedeemCouponItem()) {
						oCheckItem.updateExtraInfoStatus("item", "online_coupon", "redeem_count", PosCheckExtraInfo.STATUS_DELETED);
						iCouponRedeemItemCnt++;
					}
				}
			}
		}
		
		if(iCouponRedeemItemCnt > 0)
			updateCheckItemsAfterFunction();
		
		// Store the void ID for further use
		m_iLastReleasePaymentVoidReasonId = iVoidCodeId;
		
		// Clear the payment list
		m_oCheckPaymentList.clear();
		
		// handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
		return true;
	}
	
	public JSONArray getCheckHistory(int iBdayId, int iOutletId, int iTable, String sTableExt) {
		PosCheck oCheck = new PosCheck();
		return oCheck.getCheckListByTable(iBdayId, iOutletId, iTable, sTableExt);
	}
	
	// get all unsettled checks of specified user
	public List<PosCheck> getUnsettleCheckList(int iBdayId, int iCloseUserId) {
		List<PosCheck> oUnsettledCheckList = new ArrayList<PosCheck>(); 
		m_oCheck = new PosCheck();
		
		JSONArray oCheckJSONArray = m_oCheck.getCheckListByCloseUserId(iBdayId, iCloseUserId);
		
		if(oCheckJSONArray != null) {
			for(int i = 0; i < oCheckJSONArray.length(); i++) {
				try {
					JSONObject oCheckJSONObject = oCheckJSONArray.getJSONObject(i);
					PosCheck oCheck = new PosCheck(oCheckJSONObject);
					oUnsettledCheckList.add(oCheck);
				} catch (JSONException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		
		return oUnsettledCheckList;
	}
	
	// get last settle shift number
	public int getSettleShiftNum(int iBdayId, int iCloseUserId) {
		int iShiftNum = 0;
		m_oCheck = new PosCheck();
		
		m_oCheck.getCheckByCloseUserId(iBdayId, iCloseUserId);
		if(m_oCheck.getCheckId() != 0)
			iShiftNum = m_oCheck.getSettleShiftNum();
		
		return iShiftNum;
	}
	
	// update shift number of paid checks for specified user
	public boolean settleChecks(List<PosCheck> oCheckList, int iShiftNo, String sBusinessDay, int iUserId, int iPrintQueueId, int iLangIndex) {
		m_oCheck = new PosCheck();

		for(PosCheck oCheck: oCheckList) {
			oCheck.setSettleShiftNo(iShiftNo);
		}
		
		return m_oCheck.cashierSettlement(oCheckList, iShiftNo, sBusinessDay, iUserId, iPrintQueueId, iLangIndex);
	}
	
	// Review Guest check
	public String previewGuestCheck(int iCheckFormatId){
		JSONObject oResultJSONObject = null;
		String sGuestCheckUrl = "";
		boolean bResult = false;
		
		//generate the item list for printing
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			// Build the PosCheckParty object for saving
			oFuncCheckParty.constructPosCheckPartyForSaving(1);
		}
		
		List<PosCheckItem> oCheckItemListForPrinting = new ArrayList<PosCheckItem>();
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(PosCheckItem oPosCheckItem:oFuncCheckParty.getCheckParty().getCheckItemList())
				oCheckItemListForPrinting.add(oPosCheckItem);
		}
		
		//get table name
		HashMap<String, String> oTableName = null;
		if(AppGlobal.g_oFuncOutlet.get().isTableNameExist(m_sTableNo, m_sTableExtension))
			oTableName = AppGlobal.g_oFuncOutlet.get().getTableNameInAllLang(m_sTableNo, m_sTableExtension);
		
		oResultJSONObject = m_oCheck.printGuestCheckWithPassingDetail(PosCheck.PRINTING_PREVIEW, AppGlobal.g_oCurrentLangIndex.get(), 0, iCheckFormatId, false, m_bPaymentInterfacePrinting, m_sTableNo, m_sTableExtension, "", false, 0, AppGlobal.g_oFuncStation.get().getStation(), AppGlobal.g_oFuncUser.get().getUser(), AppGlobal.g_oFuncOutlet.get().getShop(), AppGlobal.g_oFuncOutlet.get().getOutlet(), AppGlobal.g_oFuncOutlet.get().getMediaFilename(OutMediaObject.USED_FOR_LOGO),
				AppGlobal.g_oFuncOutlet.get().getBusinessDay(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod(), null, oCheckItemListForPrinting, m_oCurrentFuncCheckParty.getPartyCheckDiscount(), oTableName, null);
		
		//get the url
		if(oResultJSONObject == null)
			bResult = false;
		else {
			try {
				if (oResultJSONObject.has("printResult") && oResultJSONObject.getBoolean("printResult") == false) {
					if(oResultJSONObject.optInt("errorCode") != 0)
						bResult = false;
				}else {
					if (oResultJSONObject.has("url") && !oResultJSONObject.optString("url", "").isEmpty()) {
						sGuestCheckUrl = oResultJSONObject.optString("url", "");
						bResult = true;
					}
				}
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		//clean up necessary list
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			oFuncCheckParty.cleanupPosCheckPartyItemList();
			oFuncCheckParty.cleanupPosCheckPartyCheckDiscountList();
		}
		
		if(bResult == false)
			return "";
		else
			return sGuestCheckUrl;
		//return m_oCheck.previewGuestCheck(iCheckFormatId, AppGlobal.g_oCurrentLangIndex.get());
	}
	
	// Review receipt
	public String previewReceipt(int iChksId, int iReceiptFormatId){
		return m_oCheck.previewReceipt(iChksId, iReceiptFormatId, AppGlobal.g_oCurrentLangIndex.get());
	}
	
	// Print receipt
	public HashMap<String, String> printReceipt(int iReceiptPrtqId, int iReceiptFormatId, int iCheckId, String sChkIdCacheKey, int iReprintType){
		HashMap<String, String> oReturnInfo = null;
		if(iReceiptPrtqId == 0 || iReceiptFormatId == 0)
			return null;
		
		// For reprint receipt
		if(iReprintType > 0)
			return m_oCheck.printReceipt(iReceiptPrtqId, iReceiptFormatId, iCheckId, AppGlobal.g_oCurrentLangIndex.get(), iReprintType);
		
		// For printing normal receipt
		List<PosCheckItem> oCheckItemListForPrinting = new ArrayList<PosCheckItem>();
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(PosCheckItem oPosCheckItem:oFuncCheckParty.getCheckParty().getCheckItemList())
				oCheckItemListForPrinting.add(oPosCheckItem);
		}
		
		 m_oCurrentFuncCheckParty.getPartyCheckDiscount();
		HashMap<String, String> oTableName = null;
		if(AppGlobal.g_oFuncOutlet.get().isTableNameExist(m_sTableNo, m_sTableExtension))
			oTableName = AppGlobal.g_oFuncOutlet.get().getTableNameInAllLang(m_sTableNo, m_sTableExtension);
		
		JSONObject oResponseJSON = m_oCheck.printGuestCheckWithPassingDetail(PosCheck.PRINTING_NORMAL, AppGlobal.g_oCurrentLangIndex.get(), iReceiptPrtqId, iReceiptFormatId, false, m_bPaymentInterfacePrinting, m_sTableNo, m_sTableExtension, sChkIdCacheKey, false, 0, AppGlobal.g_oFuncStation.get().getStation(), AppGlobal.g_oFuncUser.get().getUser(), AppGlobal.g_oFuncOutlet.get().getShop(), AppGlobal.g_oFuncOutlet.get().getOutlet(), AppGlobal.g_oFuncOutlet.get().getMediaFilename(OutMediaObject.USED_FOR_LOGO),
				AppGlobal.g_oFuncOutlet.get().getBusinessDay(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod(), null, oCheckItemListForPrinting, m_oCurrentFuncCheckParty.getPartyCheckDiscount(), oTableName, m_oCheckPaymentList);
		
		oReturnInfo = new HashMap<String, String>();
		try {
			oReturnInfo.put("url", oResponseJSON.getString("url"));
			if(oResponseJSON.has("page"))
				oReturnInfo.put("page", String.valueOf(oResponseJSON.getInt("page")));
			if(oResponseJSON.has("error"))
				oReturnInfo.put("error", oResponseJSON.getString("error"));
			return oReturnInfo;
		} catch (JSONException e) {
			return oReturnInfo;
		}
	}
	
	public String printReceiptForFastFoodMode(int iReceiptPrtqId, int iReceiptFormatId, String sCheckPrefixNo, List<PosCheckItem> oCheckItemList, HashMap<Integer, PosCheckDiscount> oCheckDiscountList, boolean bReprint) {
		return m_oCheck.printReceiptForFastFoodMode(AppGlobal.g_oCurrentLangIndex.get(), iReceiptPrtqId, iReceiptFormatId, bReprint, sCheckPrefixNo, this.m_sTableNo, this.m_sTableExtension, AppGlobal.g_oFuncStation.get().getStation(), AppGlobal.g_oFuncUser.get().getUser(), AppGlobal.g_oFuncOutlet.get().getShop(), AppGlobal.g_oFuncOutlet.get().getOutlet(), AppGlobal.g_oFuncOutlet.get().getMediaFilename(OutMediaObject.USED_FOR_LOGO), AppGlobal.g_oFuncOutlet.get().getBusinessDay(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod(), oCheckItemList, oCheckDiscountList, m_oCheckPaymentList);
	}
	
	// Print serving list
	public String printServingList(int iServingPrtqId, int iServingFormatId) {
		JSONObject oResultJSONObject = null;
		String sGuestCheckUrl = "";
		boolean bResult = false;
		
		//generate the item list for printing
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			// Build the PosCheckParty object for saving
			oFuncCheckParty.constructPosCheckPartyForSaving(1);
		}
		
		List<PosCheckItem> oCheckItemListForPrinting = new ArrayList<PosCheckItem>();
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(PosCheckItem oPosCheckItem:oFuncCheckParty.getCheckParty().getCheckItemList())
				oCheckItemListForPrinting.add(oPosCheckItem);
		}
		
		//get table name
		HashMap<String, String> oTableName = null;
		if(AppGlobal.g_oFuncOutlet.get().isTableNameExist(m_sTableNo, m_sTableExtension))
			oTableName = AppGlobal.g_oFuncOutlet.get().getTableNameInAllLang(m_sTableNo, m_sTableExtension);
		
		oResultJSONObject = m_oCheck.printGuestCheckWithPassingDetail(PosCheck.PRINTING_SERVING_LIST, AppGlobal.g_oCurrentLangIndex.get(), iServingPrtqId, iServingFormatId, false, m_bPaymentInterfacePrinting, m_sTableNo, m_sTableExtension, "", false, 0, AppGlobal.g_oFuncStation.get().getStation(), AppGlobal.g_oFuncUser.get().getUser(), AppGlobal.g_oFuncOutlet.get().getShop(), AppGlobal.g_oFuncOutlet.get().getOutlet(), AppGlobal.g_oFuncOutlet.get().getMediaFilename(OutMediaObject.USED_FOR_LOGO),
				AppGlobal.g_oFuncOutlet.get().getBusinessDay(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod(), null, oCheckItemListForPrinting, m_oCurrentFuncCheckParty.getPartyCheckDiscount(), oTableName, null);
		
		//get the url
		if(oResultJSONObject == null)
			bResult = false;
		else {
			try {
				if (oResultJSONObject.has("printResult") && oResultJSONObject.getBoolean("printResult") == false) {
					if(oResultJSONObject.optInt("errorCode") != 0)
						bResult = false;
				}else {
					if (oResultJSONObject.has("url") && !oResultJSONObject.optString("url", "").isEmpty()) {
						sGuestCheckUrl = oResultJSONObject.optString("url", "");
						bResult = true;
					}
				}
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		//clean up necessary list
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			oFuncCheckParty.cleanupPosCheckPartyItemList();
			oFuncCheckParty.cleanupPosCheckPartyCheckDiscountList();
		}
		
		if(bResult == false)
			return "";
		else
			return sGuestCheckUrl;
		//return m_oCheck.printServingList(iServingPrtqId, iServingFormatId, AppGlobal.g_oCurrentLangIndex.get());
	}

	public boolean getAndLockTableWithoutLoadCheck(int iShopId, int iOutletId, int iTable, String sTableExtension, boolean bSkipLockTable) {
		m_oOutletTable.init();
		m_oOutletTable.setShopId(iShopId);
		m_oOutletTable.setOutletId(iOutletId);
		m_oOutletTable.setStationId(AppGlobal.g_oFuncStation.get().getStationId());
		m_oOutletTable.setTable(iTable);
		m_oOutletTable.setTableExtension(sTableExtension);
		m_oOutletTable.setStatus(PosOutletTable.STATUS_NEW_TABLE);
		
		// Check if the table is locked by other station
		// *** Skip lock table and update table status for fast food mode
		if(this.isOldCheck() || bSkipLockTable != true){
			if(!m_oOutletTable.readAndLock()) {
				this.m_sErrorMessage = AppGlobal.g_oLang.get()._("fail_to_lock_table");
				return false;
			}else if (m_oOutletTable.getStationId() > 0 && m_oOutletTable.getStationId() != AppGlobal.g_oFuncStation.get().getStationId()) {
				FuncStation oStation = new FuncStation();
				if(oStation.loadStationById(m_oOutletTable.getStationId())){
					String sStationName = oStation.getName(AppGlobal.g_oCurrentLangIndex.get());
					m_sErrorMessage = AppGlobal.g_oLang.get()._("table_is_locked_by_station")+" "+sStationName;
				}else
					m_sErrorMessage = AppGlobal.g_oLang.get()._("table_is_locked_by_station")+" "+m_oOutletTable.getStationId();
				return false;
			}
		}
		
		m_oCheck.setChksId(m_oOutletTable.getCheckId());
		
		// Store the table no. for send check
		m_sTableNo = String.valueOf(iTable);
		m_sTableExtension = sTableExtension;
		m_sTableName = AppGlobal.g_oFuncOutlet.get().getTableName(m_sTableNo, m_sTableExtension);
		m_oCheckTable.setTable(iTable);
		m_oCheckTable.setTableExt(sTableExtension);

		return true;
	}
	
	public boolean getAndUnlockTableWithoutLoadCheck(int iShopId, int iOutletId, String sTable, String sTableExtension) {
		m_oOutletTable.setShopId(iShopId);
		m_oOutletTable.setOutletId(iOutletId);
		m_oOutletTable.setTable(Integer.parseInt(sTable));
		m_oOutletTable.setTableExtension(sTableExtension);
		
		if(!m_oOutletTable.readAndUnlock()) {
			this.m_sErrorMessage = AppGlobal.g_oLang.get()._("fail_to_unlock_table");
			return false;
		}
		
		return true;
	}
	
	//apply discount
	public boolean applyDiscount(String sType, String sUsedFor, List<HashMap<String, Integer>> oSelectedItemIndexList, PosDiscountType oSelectedDiscType, BigDecimal dDiscountRateAmt, HashMap<Integer, Integer> oDiscAllowance) {
		HashMap<Integer, FuncCheckItem> oUpdateFuncCheckItemList = new HashMap<Integer, FuncCheckItem>();
		PosCheckDiscount oCheckDiscount = null;
		
		if(sType.equals("check")) {
			oCheckDiscount = addNewCheckDiscountToList(oSelectedItemIndexList, oSelectedDiscType, dDiscountRateAmt);
			calcCheck();
			
			if(isOldCheck()) {
				for(HashMap<String, Integer> oSelectedItemIndex:oSelectedItemIndexList) {
					FuncCheckItem oParentFuncCheckItem = getCheckItem(oSelectedItemIndex.get("partySeq"), oSelectedItemIndex.get("sectionId"), oSelectedItemIndex.get("itemIndex"));
					if(oParentFuncCheckItem.isOldItem()) {
						oParentFuncCheckItem.getCheckItem().setModified(true);
						oUpdateFuncCheckItemList.put(oParentFuncCheckItem.getCheckItem().getCitmId(), oParentFuncCheckItem);
					}
				}
				
			}else {
				//Add log to action log list
				String sLogRemark = oCheckDiscount.getName(AppGlobal.g_oCurrentLangIndex.get()) + ":" + oCheckDiscount.getRoundTotal().toString();
				String sKey = AppGlobal.FUNC_LIST.check_discount.name();
				if(sUsedFor.equals(PosDiscountType.USED_FOR_EXTRA_CHARGE))
					sKey = AppGlobal.FUNC_LIST.check_extra_charge.name();
				AppGlobal.g_oActionLog.get().addActionLog(sKey, PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), AppGlobal.g_oFuncStation.get().getStationId(), getCheckId(), 0, 0, 0, 0, sLogRemark);
			}
			
		}else {
			for(HashMap<String, Integer> oSelectedItemIndex:oSelectedItemIndexList) {
				FuncCheckItem oParentFuncCheckItem = getCheckItem(oSelectedItemIndex.get("partySeq"), oSelectedItemIndex.get("sectionId"), oSelectedItemIndex.get("itemIndex"));
				
				FuncCheckParty oFuncCheckParty = this.getCheckPartyBySeq(oSelectedItemIndex.get("partySeq"));
				
				oParentFuncCheckItem.addNewItemDiscountToList(oSelectedDiscType, dDiscountRateAmt, getCheckId(), oFuncCheckParty.getCptyId());
				calcCheck();
				
				if(isOldCheck() && oParentFuncCheckItem.isOldItem()) {
					oParentFuncCheckItem.getCheckItem().setModified(true);
					oUpdateFuncCheckItemList.put(oParentFuncCheckItem.getCheckItem().getCitmId(), oParentFuncCheckItem);
				}
				else if (!oParentFuncCheckItem.isOldItem()) {
					oCheckDiscount = oParentFuncCheckItem.getItemDiscountList().get(oParentFuncCheckItem.getItemDiscountList().size()-1);
					// Add log to action log list
					String sLogRemark = "[" + oParentFuncCheckItem.getMenuItemName(AppGlobal.g_oCurrentLangIndex.get()) + "] " + oCheckDiscount.getName(AppGlobal.g_oCurrentLangIndex.get()) + ":" + oCheckDiscount.getRoundTotal();
					oParentFuncCheckItem.addActionLog(AppGlobal.FUNC_LIST.item_discount.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId() , AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), AppGlobal.g_oFuncStation.get().getStationId(), this.getCheckId(), 0, 0, 0, 0, sLogRemark);
				}
			}
		}
		
		//update database if check is old and item is old
		if(oUpdateFuncCheckItemList.size() > 0) {
			if(updateCheck(false, true, 1, 0, false, 1, 0, 0, 0, false, false, false, false, 0, 0, false).equals(PosCheck.API_RESULT_SUCCESS)) {
				if(sType.equals("item")) {
					//update the FuncCheckItem
					PosCheckItemList oUpdatedItemList = new PosCheckItemList(getResultJSONArrayOfRequest());
					for(PosCheckItem oUpdatedItem:oUpdatedItemList.getCheckItemList()) {
						if(oUpdateFuncCheckItemList.containsKey(oUpdatedItem.getCitmId())) {
							int iCdisId = 0;
							String sLogRemark = "";
							
							iCdisId = oUpdatedItem.getItemDiscountList().get(oUpdatedItem.getItemDiscountList().size()-1).getCdisId();
							sLogRemark = oUpdatedItem.getItemDiscountList().get(oUpdatedItem.getItemDiscountList().size()-1).getName(AppGlobal.g_oCurrentLangIndex.get()) + ":" + oUpdatedItem.getItemDiscountList().get(oUpdatedItem.getItemDiscountList().size()-1).getRoundTotal();
							oUpdateFuncCheckItemList.get(oUpdatedItem.getCitmId()).updateCheckItem(oUpdatedItem);
							
							// Add log to action log list
							if (iCdisId != 0)
								AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.item_discount.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId() , AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), AppGlobal.g_oFuncStation.get().getStationId(), this.getCheckId(), 0, oUpdatedItem.getCitmId(), iCdisId, 0, sLogRemark);
						}
					}
				}else {
					String sLogRemark = oCheckDiscount.getName(AppGlobal.g_oCurrentLangIndex.get()) + ":" + oCheckDiscount.getRoundTotal();
					if(oCheckDiscount.getCdisId() != 0) {
						String sKey = AppGlobal.FUNC_LIST.check_discount.name();
						if(sUsedFor.equals(PosDiscountType.USED_FOR_EXTRA_CHARGE))
							sKey = AppGlobal.FUNC_LIST.check_extra_charge.name();
						AppGlobal.g_oActionLog.get().addActionLog(sKey, PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId() , AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), AppGlobal.g_oFuncStation.get().getStationId(), this.getCheckId(), 0, 0, oCheckDiscount.getCdisId(), 0, sLogRemark);
					}
				}
			} else
				return false;
			
			//handle action log
			AppGlobal.g_oActionLog.get().handleActionLog(false);
		}
		
		return true;
	}
	
	// remove discount
	public boolean voidDiscount(String sDiscountType, String sUsedFor, List<HashMap<String, Integer>> oSelectedItemList, int iDiscountIndex , int iVoidCodeId, String sVoidReasonName) {
		HashMap<Integer, FuncCheckItem> oUpdateFuncCheckItemList = new HashMap<Integer, FuncCheckItem>();
		
		if(sDiscountType.equals("item")) {
			// Void item discount
			for(HashMap<String, Integer> oSelectedItem:oSelectedItemList) {
				FuncCheckItem oParentFuncCheckItem = getCheckItem(oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
				
				// check whether the index exists in the list
				if (iDiscountIndex >= oParentFuncCheckItem.getItemDiscountList().size())
					continue;
				
				PosCheckDiscount oCheckDiscount = oParentFuncCheckItem.getItemDiscountList().get(iDiscountIndex);
				
				if(oCheckDiscount.getCdisId() > 0) {// Old item discount
					oParentFuncCheckItem.voidOldItemDiscount(iDiscountIndex, iVoidCodeId, sVoidReasonName);
					calcCheck();
					oParentFuncCheckItem.getCheckItem().setModified(true);
					oUpdateFuncCheckItemList.put(oParentFuncCheckItem.getCheckItem().getCitmId(), oParentFuncCheckItem);
					
					// Add log to action log list
					AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.item_void_discount_multiple_items.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), 0, oParentFuncCheckItem.getCheckItem().getCitmId(), oCheckDiscount.getCdisId(), 0, "VoidCodeId:"+iVoidCodeId+":"+sVoidReasonName);
					//handle action log
					AppGlobal.g_oActionLog.get().handleActionLog(false);
				} else {
					oParentFuncCheckItem.removeItemDiscount(iDiscountIndex);
					calcCheck();
					
					// Add "new_check" log to action log list
					String sLogRemark = "[" + oParentFuncCheckItem.getMenuItemName(AppGlobal.g_oCurrentLangIndex.get()) + "] " + oCheckDiscount.getName(AppGlobal.g_oCurrentLangIndex.get()) + ":" + oCheckDiscount.getRoundTotal();
					oParentFuncCheckItem.addActionLog(AppGlobal.FUNC_LIST.item_void_discount_multiple_items.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), 0, 0, 0, 0, sLogRemark);
				}
			}
			
			if(oUpdateFuncCheckItemList.size() > 0) {
				if(updateCheck(false, true, 1, 0, false, 1, 0, 0, 0, false, false, false, false, 0, 0, false).equals(PosCheck.API_RESULT_SUCCESS)) {
					//update the FuncCheckItem
					PosCheckItemList oUpdatedItemList = new PosCheckItemList(getResultJSONArrayOfRequest());
					for(PosCheckItem oUpdatedItem:oUpdatedItemList.getCheckItemList()) {
						if(oUpdateFuncCheckItemList.containsKey(oUpdatedItem.getCitmId())) {
							oUpdateFuncCheckItemList.get(oUpdatedItem.getCitmId()).removeItemDiscount(iDiscountIndex);
							oUpdateFuncCheckItemList.get(oUpdatedItem.getCitmId()).updateCheckItem(oUpdatedItem);
						}
					}
				} else
					return false;
			}
			
		}else {
			// Void party check discount
			PosCheckDiscount oCheckDiscount = m_oCurrentFuncCheckParty.getPartyCheckDiscount(iDiscountIndex);
			int iGetUpdateRecord = 1;
			String sKey = AppGlobal.FUNC_LIST.void_check_discount.name();
			if(sUsedFor.equals(PosDiscountType.USED_FOR_EXTRA_CHARGE))
				sKey = AppGlobal.FUNC_LIST.void_check_extra_charge.name();
			
			if(oCheckDiscount.getCdisId() > 0) {// Old party check discount	
				m_oCurrentFuncCheckParty.voidOldCheckDiscount(iDiscountIndex, iVoidCodeId);
				calcCheck();
				
				if(oCheckDiscount.getCheckDiscountItemCount() == 0)
					iGetUpdateRecord = 0;
			
				if(updateCheck(false, true, 1, 0, false, iGetUpdateRecord, 0, 0, 0, false, false, false, false, 0, 0, false).equals(PosCheck.API_RESULT_SUCCESS))
					m_oCurrentFuncCheckParty.removeCheckDiscountFromList(iDiscountIndex);
				else
					return false;
				
				// Add log to action log list
				AppGlobal.g_oActionLog.get().addActionLog(sKey, PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), 0, 0, oCheckDiscount.getCdisId(), 0, "VoidCodeId:"+iVoidCodeId+":"+sVoidReasonName);
				//handle action log
				AppGlobal.g_oActionLog.get().handleActionLog(false);
				
			}else {
				m_oCurrentFuncCheckParty.removeCheckDiscountFromList(iDiscountIndex);
				calcCheck();
				
				// Add "new_check" log to action log list
				String sLogRemark = oCheckDiscount.getName(AppGlobal.g_oCurrentLangIndex.get()) + ":" + oCheckDiscount.getRoundTotal();
				AppGlobal.g_oActionLog.get().addActionLog(sKey, PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), 0, 0, 0, 0, sLogRemark);
			}
		}
		return true;
	}
	
	// Pantry Message
	public void pantryMessage(int iPantryMesgIndex, List<Integer> oItemIdList) {
		JSONObject oHeaderJSONObject = new JSONObject(), oInfoJSONObject = new JSONObject(), oTempJSONObject = null;
		JSONArray oTempArray = new JSONArray(), oCitmIdArray = new JSONArray();
		if(oItemIdList.size() == 0)
			return;
		
		try {
			//form header
			oHeaderJSONObject.put("header", "Pantry Message");
			oTempJSONObject = new JSONObject();
			oTempJSONObject.put("message", iPantryMesgIndex);
			oTempArray.put(oTempJSONObject);
			oHeaderJSONObject.put("messages", oTempArray);
			
			//form info
			oInfoJSONObject.put("stationId", AppGlobal.g_oFuncStation.get().getStationId());
			oInfoJSONObject.put("userName", AppGlobal.g_oFuncUser.get().getUserName(AppGlobal.g_oCurrentLangIndex.get()));
			oInfoJSONObject.put("userId", AppGlobal.g_oFuncUser.get().getUserId());
			oInfoJSONObject.put("table", m_sTableNo);
			for(Integer iItemId:oItemIdList) {
				oTempJSONObject = new JSONObject();
				oTempJSONObject.put("id", iItemId);
				oCitmIdArray.put(oTempJSONObject);
			}
			oInfoJSONObject.put("citmIds", oCitmIdArray);
			
			// *****************************************************************
			// Create thread to print special slip
			AppThreadManager oAppThreadManager = new AppThreadManager();
			
			// Add the method to the thread manager
			// Thread 1 : Print special slip
			// Create parameter array
			Object[] oParameters = new Object[5];
			oParameters[0] = "pantry_message";
			oParameters[1] = oHeaderJSONObject;
			oParameters[2] = oInfoJSONObject;
			oParameters[3] = 0;
			oParameters[4] = AppGlobal.g_oCurrentLangIndex.get();
			oAppThreadManager.addThread(1, m_oCheck, "printSpecialSlip", oParameters);
			
			// Run the thread without wait
			oAppThreadManager.runThread();
		}catch(JSONException jsone) {
			AppGlobal.stack2Log(jsone);
		}
	}
	
	// Get current item stock list
	public void getCurrentItemStockList(int iOutletId, String sCheckStock, String sSoldout) {
		synchronized(this){
			m_oItemStockList.readOutletItemListByCheckStockSoldout(iOutletId, sCheckStock, sSoldout);
		}
	}

	// Get current item stock list
	public void getCurrentInSellItemStockList(int iOutletId, String sSoldout) {
		synchronized(this){
			m_oItemStockList.readOutletItemListBySoldout(iOutletId, sSoldout);
		}
	}
	
	public List<PosOutletItem> getItemStockList() {
		synchronized(this){
			return m_oItemStockList.getOutletItemList();
		}
	}
	
	// Search item count existence
	public String updateItemCount(int iItemId, BigDecimal dQty, boolean bSubtract, boolean bForceUpdate, boolean bCreateIfNotExist) {
		String sReturn = "";
		PosOutletItem oOutletItem = null;
		synchronized(this){
			oOutletItem = m_oItemStockList.getOutletItemByItemId(iItemId);
		}
		if(oOutletItem == null && bCreateIfNotExist){
			// No outlet item before
			// Create one
			oOutletItem = new PosOutletItem();
			oOutletItem.setShopId(AppGlobal.g_oFuncOutlet.get().getShopId());
			oOutletItem.setOletId(AppGlobal.g_oFuncOutlet.get().getOutletId());
			oOutletItem.setItemId(iItemId);
			oOutletItem.setStockControlLevel("1");
			oOutletItem.setCheckStock(PosOutletItem.CHECK_STOCK_YES);
				
			oOutletItem.addUpdate(false);
			
			synchronized(this){
				m_oItemStockList.addOutletItemToOutletItemList(oOutletItem);
			}
		}
		
		if(m_bStockDeliveryInvoice == true)
			// Skip in stock delivery invoice
			return "";
		
		if(oOutletItem != null && oOutletItem.getCheckStock().equals(PosOutletItem.CHECK_STOCK_YES)) {
			oOutletItem.updateStockQty(dQty, bSubtract, bForceUpdate);
			if (oOutletItem.getStockQty().compareTo(BigDecimal.ZERO) < 0)
				sReturn = "-"+oOutletItem.getStockAvailability();
			else
				sReturn = oOutletItem.getStockAvailability();
		}
		
		return sReturn;
	}
	
	// Search multiple item count existence
	public void updateMultipleItemCount(List<HashMap<String, String>> oItemCountInfo, boolean bSubtract, boolean bForceUpdate, boolean bCreateIfNotExist) {
		PosOutletItem oOutletItem = null;
		List<HashMap<String, String>> oUpdateOutletItems = new ArrayList<HashMap<String, String>>();
		
		for(HashMap<String, String> oItemCount:oItemCountInfo) {
			synchronized(this){
				oOutletItem = m_oItemStockList.getOutletItemByItemId(Integer.parseInt(oItemCount.get("itemId")));
			}
			if(oOutletItem == null && bCreateIfNotExist) {
				// No outlet item before
				// Create one
				oOutletItem = new PosOutletItem();
				oOutletItem.setShopId(AppGlobal.g_oFuncOutlet.get().getShopId());
				oOutletItem.setOletId(AppGlobal.g_oFuncOutlet.get().getOutletId());
				oOutletItem.setItemId(Integer.parseInt(oItemCount.get("itemId")));
				oOutletItem.setStockControlLevel("1");
				oOutletItem.setCheckStock(PosOutletItem.CHECK_STOCK_YES);
				oOutletItem.addUpdate(false);
				
				synchronized(this){
					m_oItemStockList.addOutletItemToOutletItemList(oOutletItem);
				}
			}
			
			if(m_bStockDeliveryInvoice == true) 
				continue;
			
			if(oOutletItem != null){
				HashMap<String, String> oUpdateOutletItem = new HashMap<String, String>();
				oUpdateOutletItem.put("oitmId", String.valueOf(oOutletItem.getOitmId()));
				oUpdateOutletItem.put("qty", oItemCount.get("qty"));
				oUpdateOutletItems.add(oUpdateOutletItem);
			}
		}
		
		if(oUpdateOutletItems.size() > 0){
			synchronized(this){
				m_oItemStockList.updateMultipleStockQty(oUpdateOutletItems, bSubtract, bForceUpdate);
			}
		}
	}
	
	public boolean isSoldout(int iItemId) {
		boolean bSoldout = false;
		PosOutletItem oOutletItem = null;
		synchronized(this){
			oOutletItem = m_oItemStockList.getOutletItemByItemId(iItemId);
		}
		
		if (oOutletItem != null)
			bSoldout = oOutletItem.isSoldout();
		
		return bSoldout;
	}

	//check override conditions
	public void checkOverrideConditions(String sCheckCreateTime, String sOrderTime, int iTableNo) {
		int iSphrId = 0;
		SimpleDateFormat oTimeFormat = new SimpleDateFormat("HH:mm:ss", Locale.ENGLISH);
		Time oCheckCreateTime = null, oOrderTime = null;
		OutSpecialHour oSpecialHour = null;
		
		try {
			oCheckCreateTime = new Time(oTimeFormat.parse(sCheckCreateTime).getTime());
			oOrderTime = new Time(oTimeFormat.parse(sOrderTime).getTime());
		}catch(ParseException exception) {
			exception.printStackTrace();
			AppGlobal.stack2Log(exception);
		}
		
		oSpecialHour = AppGlobal.g_oFuncOutlet.get().getCurrentSpecialPeriod();
		if(oSpecialHour != null)
			iSphrId = oSpecialHour.getSphrId();
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oItemListForSingleSeat:oFuncCheckParty.getWholeItemList()){
				for(FuncCheckItem oCheckItem:oItemListForSingleSeat) {
					if(!oCheckItem.isOldItem()) {
						AppGlobal.g_oFuncOverride.get().checkPriceOverrideForItem(oCheckItem, oCheckCreateTime, oOrderTime, iTableNo, iSphrId);
					}
				}
			}
		}
	}
	
	public BigDecimal getItemStockQty(int iItemId) {
		PosOutletItem oOutletItem = null;
		BigDecimal dQty = null;
		
		synchronized(this){
			oOutletItem = m_oItemStockList.getOutletItemByItemId(iItemId);
		}
		
		if(oOutletItem != null)
			dQty = oOutletItem.getStockQty();
		
		return dQty;
	}
	
	public void removeAllNewItemFormItemList(boolean bUpdateItemCount, boolean bQuitCheck) {
		boolean bNoNewItemExist = true;
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			do {
				bNoNewItemExist = true;
				for (List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
					for (FuncCheckItem oFuncCheckItem:oItemList){
			        	if (!oFuncCheckItem.isOldItem()) {
			        		if(bUpdateItemCount)
			        			// update item count
			        			this.updateItemCount(oFuncCheckItem.getMenuItemId(), oFuncCheckItem.getCheckItem().getQty(), false, false, false);
			        		
			        		//update coupon item status
			        		if(bQuitCheck && oFuncCheckItem.isCouponItem()) {
			        			FuncCoupon oCouponItem = new FuncCoupon();
			        			oCouponItem.setStartCoupon(oFuncCheckItem.getExtraInfoBySectionAndVariable("online_coupon", "sell_start_coupon"));
			        			oCouponItem.setEndCoupon(oFuncCheckItem.getExtraInfoBySectionAndVariable("online_coupon", "sell_end_coupon"));
			        			oCouponItem.setCouponCurrentStatus(FuncCoupon.COUPON_STATUS_LOCKED);
			        			oCouponItem.setCouponNextStatus(FuncCoupon.COUPON_STATUS_NEW);
			        			oCouponItem.setSellPrice(BigDecimal.ZERO);
			        			
			        			oCouponItem.updateCoupon(FuncCoupon.UPDATE_COUPON_TYPE_ORDER_ITEM);
			        		}
			        		
			        		oItemList.remove(oFuncCheckItem);
			        		bNoNewItemExist = false;
			        		break;
			        	}
			        }
					
					if(bNoNewItemExist == false) {
						break;
					}
				}
			}while (bNoNewItemExist == false);
		}
	}
	
	// update item count for quiting new checking
	public void updateItemCountForQuitNewCheck() {
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem:oItemList){
					if (!oFuncCheckItem.isOldItem()) 
						//update item count
						this.updateItemCount(oFuncCheckItem.getMenuItemId(), oFuncCheckItem.getCheckItem().getQty(), false, false, false);
				}
			}
		}
	}
	
	// update coupon status for quiting new check
	public void updateCouponItemStatusForQuitNewCheck() {
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem:oItemList){
					if(!oFuncCheckItem.isOldItem() && oFuncCheckItem.isCouponItem()) {
						FuncCoupon oCouponItem = new FuncCoupon();
						oCouponItem.setStartCoupon(oFuncCheckItem.getExtraInfoBySectionAndVariable("online_coupon", "sell_start_coupon"));
						oCouponItem.setEndCoupon(oFuncCheckItem.getExtraInfoBySectionAndVariable("online_coupon", "sell_end_coupon"));
						oCouponItem.setCouponCurrentStatus(FuncCoupon.COUPON_STATUS_LOCKED);
						oCouponItem.setCouponNextStatus(FuncCoupon.COUPON_STATUS_NEW);
						oCouponItem.setSellPrice(BigDecimal.ZERO);
						
						oCouponItem.updateCoupon(FuncCoupon.UPDATE_COUPON_TYPE_ORDER_ITEM);
					}
				}
			}
		}
	}
	
	// Remove item from the check
	public boolean removeItemFromList(int iSeatNo, int iLineNo){
		
		m_sErrorMessage = "";
		
		calcCheck();
		
		//really remove item form list
		m_oCurrentFuncCheckParty.getItemList(iSeatNo).remove(iLineNo);
		
		return true;
	}
	
	public void replaceItemToList(int iSeatNo, int iLineNo) {
		m_oCurrentFuncCheckParty.replaceItemToList(iSeatNo, iLineNo);
	}
	
	// Retrieve the new item information JSON array for update system menu item list
	public JSONArray createNewOrderItemJSONArray(){
		
		JSONArray itemJSONArray = new JSONArray();
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem:oItemList){
					PosCheckItem oCheckItem = oFuncCheckItem.getCheckItem();
	
					// Get new item
					if (oCheckItem.getCitmId() == 0) {
						oFuncCheckItem.createJSONArrayForItemUpdate(itemJSONArray);
					}	
				}
			}
		}

		return itemJSONArray;
	}
	
	// Update system stored menu item list and current new order item
	public boolean updateSystemMenuItemList(){
		// Retrieve the ordered new item
		JSONArray itemJSONArray = this.createNewOrderItemJSONArray();		
		
		// Update the system menu item list
		AppGlobal.g_oFuncMenu.get().updateStoredMenuItemList(itemJSONArray);
		
		// Update check item list
		this.updateCheckItemByUpdateMenuItem();
		
		// Recalculate the check
		this.calcCheck();
		
		return true;
	}
	
	// Update check new item by updated menu item list
	private boolean updateCheckItemByUpdateMenuItem(){
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem:oItemList){
					// Get new item
					if (oFuncCheckItem.isOldItem() == false) {
						if(oFuncCheckItem.isCouponItem())
							continue;
						
						if(oFuncCheckItem.updateFromUpdateMenuItemList() == false){
							// Fail to update the item
							continue;
						}
	
					}
				}
			}
		}
		
		return true;
	}
	
	public boolean getCheckByCheckNum(int iBusinessDayId, int iOutletId, String sCheckPrefixNo) {
		m_sErrorMessage = "";
		String sResult = m_oCheck.readByCheckNo(iBusinessDayId, iOutletId, sCheckPrefixNo, 1);
		if(sResult.equals(PosCheck.API_RESULT_INVALID_BDAY) || sResult.equals(PosCheck.API_RESULT_MISSING_BDAY)) {
			String sLogMessage = "";
			if(sResult.equals(PosCheck.API_RESULT_INVALID_BDAY)) {
				sLogMessage = "Invalid business day";
				m_sErrorMessage = AppGlobal.g_oLang.get()._("invalid_business_day");
			} else if(sResult.equals(PosCheck.API_RESULT_MISSING_BDAY)){
				sLogMessage = "Daily start has been carried out";
				m_sErrorMessage = AppGlobal.g_oLang.get()._("missing_active_business_day");
			}

			if(!m_sErrorMessage.isEmpty())
				m_sErrorMessage += "\n";
			m_sErrorMessage += AppGlobal.g_oLang.get()._("cannot_load_the_check")+" "+sCheckPrefixNo;
			
			sLogMessage += " [Check number: "+sCheckPrefixNo+"]";
			
			AppGlobal.writeErrorLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), AppGlobal.g_oFuncStation.get().getStationId()+"", "", sLogMessage);

			AppGlobal.startKillSingleStation(AppGlobal.g_oFuncStation.get().getStationId(), AppGlobal.g_oLang.get()._("station_is_killed_by_invalid_business_day"));
			return false;
		}
		
		if(m_oCheck.getCheckId() == 0) {
			m_sErrorMessage = AppGlobal.g_oLang.get()._("check_is_not_found");
			return false;
		}
		
		PosCheckTable oCheckTable = new PosCheckTable();
		oCheckTable.readByCheckId(m_oCheck.getCheckId());
		m_sTableNo = Integer.toString(oCheckTable.getTable());
		m_sTableExtension = oCheckTable.getTableExt();
		m_sTableName = AppGlobal.g_oFuncOutlet.get().getTableName(m_sTableNo, m_sTableExtension);
		m_oCheckTable.setTable(oCheckTable.getTable());
		m_oCheckTable.setTableExt(oCheckTable.getTableExt());
		
		//form the check party list
		this.addOldCheckPartyToList();
		
		//form the check discount list
		this.addOldCheckDiscountToList();
		
		// form the check payment list
		this.addOldCheckPaymentToList();
		
		return true;
	}
	
	// Item total (chks_item_total) : Sum of all items' (citm_round_total)
	// citm_round_total = (citm_price x citm_qty) + Sum of (Direct child item's citm_carry_total) (After round)
	public BigDecimal getItemTotal(){
		if(m_oCheck == null)
			return BigDecimal.ZERO;
		
		return m_oCheck.getItemTotal();
	}
	
	// Item net total : Sum of all items' (citm_round_total + citm_pre_disc(-ve) + citm_mid_disc(-ve) + citm_post_disc(-ve) )
	// citm_round_total = (citm_price x citm_qty) + Sum of (Direct child item's citm_carry_total) (After round)
	public BigDecimal getNetItemTotal() {
		BigDecimal dNetItemTotal = new BigDecimal(0.0);
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for(FuncCheckItem oFuncCheckItem:oItemList)
					dNetItemTotal = dNetItemTotal.add(oFuncCheckItem.getNetItemTotal());
			}
		}
		
		return dNetItemTotal;
	}
	
	// SC total : Rounded of Sum of (chks_sc1~5)
	public BigDecimal getServiceChargeTotal(){
		if(m_oCheck == null)
			return BigDecimal.ZERO;

		BigDecimal dTmp = BigDecimal.ZERO;
		for(int i=1; i<=5; i++)
			dTmp = dTmp.add(m_oCheck.getSc(i));
	
		return dTmp; 
	}
	
	// Tax total : Rounded of Sum of (chks_tax1~25)
	public BigDecimal getTaxTotal(int iIndex){
		if(m_oCheck == null)
			return BigDecimal.ZERO;
		return m_oCheck.getTax(iIndex); 
	}
	
	// Tax total : Rounded of Sum of (chks_tax1~25)
	public BigDecimal getTaxTotal(){
		if(m_oCheck == null)
			return BigDecimal.ZERO;
		
		BigDecimal dTmp = BigDecimal.ZERO;
		for(int i=1; i<=25; i++)
			dTmp = dTmp.add(m_oCheck.getTax(i));
	
		return dTmp; 
	}
	
	// Check total (chks_check_total) : chks_item_total + chks_sc1~5 + chks_tax1~25 + chks_pre_disc(-ve) + chks_mid_disc(-ve) + chks_post_disc(-ve) + chks_round_amount
	public BigDecimal getCheckTotal(){
		if(m_oCheck == null)
			return BigDecimal.ZERO;
		
		return m_oCheck.getCheckTotal();
	}
	
	// Round amount (chks_round_amount)
	public BigDecimal getRoundAmount(){
		if(m_oCheck == null)
			return BigDecimal.ZERO;
		
		return m_oCheck.getRoundAmount();
	}
	
	// Check discount total
	public BigDecimal getCheckDiscountTotal() {
		BigDecimal dChkDiscTotal = BigDecimal.ZERO;
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			HashMap<Integer, PosCheckDiscount> oCheckDiscounts = oFuncCheckParty.getPartyCheckDiscount();
			for(Entry<Integer, PosCheckDiscount> entry : oCheckDiscounts.entrySet()) {
				if(entry.getValue().isDeleted())
					continue;
				
				dChkDiscTotal = dChkDiscTotal.add(entry.getValue().getRoundTotal());
			}
		}
		
		return dChkDiscTotal;
	}
	
	// Item discount total (After round)
	public BigDecimal getItemDiscountTotal() {
		BigDecimal dItemDiscTotal = BigDecimal.ZERO;
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for(FuncCheckItem oFuncCheckItem:oItemList) {
					for(PosCheckDiscount oItemDiscount: oFuncCheckItem.getItemDiscountList())
						dItemDiscTotal = dItemDiscTotal.add(oItemDiscount.getRoundTotal());
				}
			}
		}
		
		return dItemDiscTotal;
	}
	
	//get print count
	public int getPrintCount() {
		if(m_oCheck == null)
			return -1;
		
		return m_oCheck.getPrintCount();
	}
	
	public DateTime getOpenLocTime() {
		if(m_oCheck == null)
			return null;
		
		return m_oCheck.getOpenLocTime();
	}
	
	public DateTime getCloseLocTime() {
		if(m_oCheck == null)
			return null;
		
		return m_oCheck.getCloseLocTime();
	}
	
	// Send check function
	// *** iSendMode:	0 - Send new items only
	//					1 - Send old items only
	//					2 - Send both new and old items
	// *** iSaveCheckType:	0 - Normal Send Check
	//					1 - Split Check
	//					2 - Merge Check
	public String updateCheck(boolean bUpdateCheckTable, boolean bWithItems, int iSendMode, int iSaveCheckType, boolean bUpdateOutletTable, int iGetUpdateRecord, int iReceiptPrtqId, int iReceiptFormatId, int iSplitMergeCheckId, boolean bWithPayments, boolean bContructWithAllItemFields, boolean bPrintGuestCheck, boolean bPayCheck, int iChkPrintQueueId, int iCheckFmtId, boolean bPrtDetailChk){
		boolean bResult = false, bSaveNewCheck = false;
		String sSaveCheckResult = "";
		
		// Check if send new check or not
		boolean bUpdate;
		if(this.isOldCheck())
			bUpdate = true;
		else{
			bUpdate = false;
		}
		
		// Check if update pos_outlet_tables or not
		// *** Skip lock table and update table status for fast food mode
		PosOutletTable oOutletTable = null;
		if(bUpdateOutletTable && m_oOutletTable.getOtblId() > 0)
			oOutletTable = m_oOutletTable;
		
		// Check if update pos_check_tables or not
		PosCheckTable oCheckTable = null;
		if(bUpdateCheckTable){
			oCheckTable = m_oCheckTable;
		}

		if(m_bStockDeliveryInvoice){
			// Build the invoice structure
			this.createStockDeliveryInvoiceFromCurrentCheck();

			// Build the invoice item structure
			List<PosStockDeliveryInvoiceItem> oStockDeliveryInvoiceItemList = new ArrayList<PosStockDeliveryInvoiceItem>();
			if(bWithItems || m_oPosStockDeliveryInvoice.getReceivingUserId() > 0){
				for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
					for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
						for (FuncCheckItem oFuncCheckItem1:oItemList){
							// If send old item only, skip new item
							if(iSendMode == 1 && !oFuncCheckItem1.isOldItem())
								continue;
							
							// For new set menu child item, the item is updated by the child list of the parent item, skip to be included in this update list
							// For old set menu child item, the item is independent from the parent item and should be included in this update list
							//if(oFuncCheckItem1.isSetMenuItem() == true && !oFuncCheckItem1.isOldItem())
							//	continue;
							
							oStockDeliveryInvoiceItemList.add(this.createStockDeliveryInvoiceItemFromFuncCheckItem(oFuncCheckItem1));
						}
					}
				}
			}
			
			bResult = m_oPosStockDeliveryInvoice.addUpdate(bUpdate, bUpdateOutletTable, oOutletTable, oStockDeliveryInvoiceItemList, AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId());
			if(bResult)
				sSaveCheckResult = PosCheck.API_RESULT_SUCCESS;
			else
				sSaveCheckResult = PosCheck.API_RESULT_FAIL;
			
			if(bWithItems && bResult) // cannot preview check if modified items
				m_bModified = true;
		}else{
			List<PosCheckParty> oCheckPartyList = new ArrayList<PosCheckParty>();
			List<PosCheckItem> oCheckItemListForPrinting = new ArrayList<PosCheckItem>();
			
			for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
				// Build the PosCheckParty object for saving
				oFuncCheckParty.constructPosCheckPartyForSaving(iSendMode);
				
				oCheckPartyList.add(oFuncCheckParty.getCheckParty());
				
				for(PosCheckItem oPosCheckItem:oFuncCheckParty.getCheckParty().getCheckItemList())
					oCheckItemListForPrinting.add(oPosCheckItem);
			}
			
			//Build the check discount list
			if(m_oCheckDiscountList.size() > 0) 
				m_oCheck.setCheckDiscountList(m_oCheckDiscountList);
			
			//Build the check extra info list
			if(m_oCheckExtraInfoList.size() > 0) {
				m_oCheck.setCheckExtraInfoList(m_oCheckExtraInfoList);
			}
			
			//check whether saving new check
			String sChkIdCacheKey = "";
			if(!isOldCheck()) {
				bSaveNewCheck = true;
				Calendar oCurrentInstance = Calendar.getInstance();
				SimpleDateFormat oTimeFormat = new SimpleDateFormat("HHmmss");
				sChkIdCacheKey = AppGlobal.g_oFuncStation.get().getStationId() + AppGlobal.g_oFuncOutlet.get().getBusinessDay().getDateInStringWithFormat("YYYYMMdd") + oTimeFormat.format(oCurrentInstance.getTime());
				sChkIdCacheKey = sChkIdCacheKey + AppGlobal.g_oFuncOutlet.get().getOutletId() + getTableNoWithExtensionForDisplay() + String.valueOf(getCover());
			}
			
			// Update database
			if(m_oCheck.getOrderingMode().equals(PosCheck.ORDERING_MODE_FAST_FOOD) && !AppGlobal.g_oFuncStation.get().supportTaiwanGui() && bWithPayments && iReceiptPrtqId != 0 && iReceiptFormatId != 0) {
				// Handle the update database and print receipt at same time
				// *****************************************************************
				// Create thread to handle update database and print receipt
				AppThreadManager oAppThreadManager = new AppThreadManager();
				
				// Add the method to thread manager
				// Thread 1 :
				// update database
				Object[] oParameters1 = new Object[20];
				oParameters1[0] = bUpdate;
				oParameters1[1] = AppGlobal.g_oFuncOutlet.get().getOutletId();
				oParameters1[2] = AppGlobal.g_oFuncOutlet.get().getShopId();
				oParameters1[3] = AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId();
				oParameters1[4] = bWithItems;
				oParameters1[5] = oCheckPartyList;
				oParameters1[6] = iSendMode;
				oParameters1[7] = 0;
				oParameters1[8] = oOutletTable;
				oParameters1[9] = oCheckTable;
				oParameters1[10] = iGetUpdateRecord;
				oParameters1[11] = m_iUserId;
				oParameters1[12] = m_iStationId; 
				oParameters1[13] = iReceiptPrtqId;
				oParameters1[14] = iReceiptFormatId;
				oParameters1[15] = 0;
				oParameters1[16] = bWithPayments;
				oParameters1[17] = m_oCheckPaymentList;
				oParameters1[18] = bContructWithAllItemFields;
				oParameters1[19] = sChkIdCacheKey;
				oAppThreadManager.addThread(1, m_oCheck, "addUpdate", oParameters1);
				
				// Add the method to thread manager
				// Thread 2 :
				// print receipt for fast food mode
				boolean bNotAllowPrintReceipt = AppGlobal.g_oFuncStation.get().getFastFoodNotPrintReceipt();
				
				if(!bNotAllowPrintReceipt) {
					Object[] oParameters2 = new Object[5];
					oParameters2[0] = iReceiptPrtqId;
					oParameters2[1] = iReceiptFormatId;
					oParameters2[2] = getCheckId();
					oParameters2[3] = sChkIdCacheKey;
					oParameters2[4] = 0;
					oAppThreadManager.addThread(2, this, "printReceipt", oParameters2);
				}

				// Run the thread without wait
				oAppThreadManager.runThread();
				oAppThreadManager.waitForThread();
				
				sSaveCheckResult = ((String) oAppThreadManager.getResult(1));
				
			}else {
				if(!bPrintGuestCheck)
					sSaveCheckResult = m_oCheck.addUpdate(bUpdate, AppGlobal.g_oFuncOutlet.get().getOutletId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), bWithItems , oCheckPartyList, iSendMode, iSaveCheckType, oOutletTable, oCheckTable, iGetUpdateRecord, m_iUserId, m_iStationId, iReceiptPrtqId, iReceiptFormatId, iSplitMergeCheckId, bWithPayments, m_oCheckPaymentList, bContructWithAllItemFields, "");
				else {
					//Handle send and print check
					//Handle the update database and print receipt at same time
					// *****************************************************************
					// Create thread to handle update database and print receipt
					AppThreadManager oAppThreadManager = new AppThreadManager();
					
					// Add the method to thread manager
					// Thread 1 :
					// update database
					Object[] oParameters1 = new Object[20];
					oParameters1[0] = bUpdate;
					oParameters1[1] = AppGlobal.g_oFuncOutlet.get().getOutletId();
					oParameters1[2] = AppGlobal.g_oFuncOutlet.get().getShopId();
					oParameters1[3] = AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId();
					oParameters1[4] = bWithItems;
					oParameters1[5] = oCheckPartyList;
					oParameters1[6] = iSendMode;
					oParameters1[7] = iSaveCheckType;
					oParameters1[8] = oOutletTable;
					oParameters1[9] = oCheckTable;
					oParameters1[10] = iGetUpdateRecord;
					oParameters1[11] = m_iUserId;
					oParameters1[12] = m_iStationId; 
					oParameters1[13] = iReceiptPrtqId;
					oParameters1[14] = iReceiptFormatId;
					oParameters1[15] = iSplitMergeCheckId;
					oParameters1[16] = bWithPayments;
					oParameters1[17] = m_oCheckPaymentList;
					oParameters1[18] = bContructWithAllItemFields;
					oParameters1[19] = sChkIdCacheKey;
					oAppThreadManager.addThread(1, m_oCheck, "addUpdate", oParameters1);
					
					// Add the method to thread manager
					// Thread 2 :
					// print guest check
					Object[] oParameters2 = new Object[12];
					oParameters2[0] = true;
					oParameters2[1] = bPayCheck;
					oParameters2[2] = AppGlobal.g_oFuncUser.get().getUserId();
					oParameters2[3] = AppGlobal.g_oFuncStation.get().getStationId();
					oParameters2[4] = iChkPrintQueueId;
					oParameters2[5] = iCheckFmtId;
					oParameters2[6] = bPrtDetailChk;
					oParameters2[7] = AppGlobal.g_oFuncOutlet.get().getOutletNameByIndex(AppGlobal.g_oCurrentLangIndex.get());
					oParameters2[8] = false;
					oParameters2[9] = 0;
					oParameters2[10] = sChkIdCacheKey;
					oParameters2[11] = false;
					oAppThreadManager.addThread(2, this, "printCheck", oParameters2);
					
					// Run the thread without wait
					oAppThreadManager.runThread();
					oAppThreadManager.waitForThread();
					
					sSaveCheckResult = ((String) oAppThreadManager.getResult(1));
					
					//update the m_oOutletTable's check id
					if(bSaveNewCheck && m_oOutletTable.getCheckId() == 0 && m_oCheck.getCheckId() != 0)
						m_oOutletTable.setCheckId(m_oCheck.getCheckId());
					
					//update the check status for printing
					if(!isPaid(false) && m_oOutletTable.getOtblId() > 0) {
						if(m_oOutletTable.getStationId() > 0)
							m_oOutletTable.setStationId(0);
						if(!bPrtDetailChk && iChkPrintQueueId > 0 && iCheckFmtId > 0) {
							m_oOutletTable.setStatus(PosOutletTable.STATUS_CHECK_PRINTED);
						}
						m_oOutletTable.addUpdate(true);
					}
				}
				
				if((m_oCheck.getOrderingMode().equals(PosCheck.ORDERING_MODE_FAST_FOOD) || m_oCheck.getOrderingMode().equals(PosCheck.ORDERING_MODE_SELF_ORDER_KIOSK))&& bWithPayments && iReceiptPrtqId != 0) {
					// Handle the print receipt for fastfood mode
					// *****************************************************************
					// Create thread to handle print receipt
					boolean bHaveThreadJob = false;
					AppThreadManager oAppThreadManager = new AppThreadManager();
					
					// Add the method to thread manager
					// Thread 1 :
					// print receipt for fast food mode
					boolean bNotAllowPrintReceipt = AppGlobal.g_oFuncStation.get().getFastFoodNotPrintReceipt();
					
					if(!bNotAllowPrintReceipt && iReceiptFormatId != 0) {
						bHaveThreadJob = true;
						Object[] oParameters2 = new Object[5];
						oParameters2[0] = iReceiptPrtqId;
						oParameters2[1] = iReceiptFormatId;
						oParameters2[2] = m_oCheck.getCheckId();
						oParameters2[3] = "";
						oParameters2[4] = 0;
						oAppThreadManager.addThread(2, this, "printReceipt", oParameters2);
					}
					
					if(AppGlobal.g_oFuncStation.get().supportTaiwanGui() && m_oCheck.getTaiwanGuiTran(1) != null && !m_oCheck.getTaiwanGuiTran(1).getType().equals(PosTaiwanGuiTran.TYPE_CHARITY)) {
						bHaveThreadJob = true;
						Object[] oParameters3 = new Object[5];
						oParameters3[0] = iReceiptPrtqId;
						oParameters3[1] = AppGlobal.g_oFuncStation.get().getTaiWanGuiPrintFormatId();
						oParameters3[2] = m_oCheck.getCheckId();
						oParameters3[3] = "";
						oParameters3[4] = 0;
						oAppThreadManager.addThread(3, this, "printReceipt", oParameters3);
					}
					
					// Run the thread without wait
					if(bHaveThreadJob)
						oAppThreadManager.runThread();
					//oAppThreadManager.waitForThread();
				}
			}
			
			if(sSaveCheckResult.equals(PosCheck.API_RESULT_INVALID_BDAY) || sSaveCheckResult.equals(PosCheck.API_RESULT_MISSING_BDAY)) {
				bResult = false;
				String sLogMessage = "";
				if(sSaveCheckResult.equals(PosCheck.API_RESULT_INVALID_BDAY)) {
					sLogMessage = "Invalid business day";
					m_sErrorMessage = AppGlobal.g_oLang.get()._("invalid_business_day");
				} else {
					sLogMessage = "Daily start has been carried out";
					m_sErrorMessage = AppGlobal.g_oLang.get()._("daily_start_has_been_carried_out");
				}
				
				sLogMessage += " [table: "+this.getTableNoWithExtensionForDisplay();
				
				if(this.isOldCheck())
					sLogMessage += ", Check: "+m_oCheck.getCheckId();
				
				String sItemList = "";
				for(PosCheckItem oCheckItem: oCheckItemListForPrinting) {
					if(!sItemList.isEmpty())
						sItemList += ", ";
					sItemList += "("+oCheckItem.getName(1) +": "+oCheckItem.getQty().toPlainString()+")";
				}
				
				if(!sItemList.isEmpty())
					sLogMessage += ", Item List: "+sItemList;
				
				String sPaymentList = "";
				for(PosCheckPayment oCheckPayment: m_oCheckPaymentList) {
					if(!sPaymentList.isEmpty())
						sPaymentList += ", ";
					sPaymentList += "("+oCheckPayment.getName(1) + ": "+oCheckPayment.getPayTotal().toPlainString()+")";
				}
				
				if(!sPaymentList.isEmpty())
					sLogMessage += ", Payment list: "+sPaymentList;
				sLogMessage += "]";

				AppGlobal.writeErrorLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), AppGlobal.g_oFuncStation.get().getStationId()+"", Integer.toString(AppGlobal.g_oFuncUser.get().getUserId()), sLogMessage);
				AppGlobal.startKillSingleStation(AppGlobal.g_oFuncStation.get().getStationId(), AppGlobal.g_oLang.get()._("station_is_killed_by_invalid_business_day"));
			}else if (sSaveCheckResult.equals(PosCheck.API_RESULT_FAIL)) {
				bResult = false;
			}else
				bResult = true;
			
			if(bWithItems && bResult) // cannot preview check if modified items
				m_bModified = true;

			if(bResult){
				// Send successfully
			
				// *****************************************************************
				// Create thread to print kitchen slip
				AppThreadManager oAppThreadManager = new AppThreadManager();
				
				// Update outlet table's check id
				m_oOutletTable.setCheckId(m_oCheck.getCheckId());
				
				// Update party ID,
				// Update the default check party
				m_oFuncCheckPartyList.get(0).getCheckParty().setCheckId(m_oCheck.getCheckId());
				
				// Update addition check party
				for(JSONObject oPartyInfo:m_oCheck.getPartyInfos()){
					int iId = oPartyInfo.optInt("cpty_id");
					int iSeq = oPartyInfo.optInt("cpty_seq");
					
					m_oFuncCheckPartyList.get(iSeq).getCheckParty().setCheckId(m_oCheck.getCheckId());
					m_oFuncCheckPartyList.get(iSeq).getCheckParty().setPartyId(iId);
				}
				
				// If there is new item,
				List<Integer> oNewItemIds = new ArrayList<Integer>();
				for(JSONObject oNewItemInfo:m_oCheck.getNewAddItemInfos()){
					int iId = oNewItemInfo.optInt("citm_id");
					int iSeatNo = oNewItemInfo.optInt("citm_seat");
					int iSeq = oNewItemInfo.optInt("citm_seq");
					int iPartySeq = oNewItemInfo.optInt("cpty_seq");
					JSONArray oNewChildItemInfos = oNewItemInfo.optJSONArray("citm_child_infos");

					FuncCheckItem oFuncCheckItem = m_oFuncCheckPartyList.get(iPartySeq).getItemList(iSeatNo).get(iSeq-1);
					if (!oFuncCheckItem.isNoKitchenSlip() && !oFuncCheckItem.isPendingItem())
						oNewItemIds.add(iId);
					
					if (!oFuncCheckItem.isOldItem()) {
						
						// Update item's check id and party id
						oFuncCheckItem.getCheckItem().setCheckItemId(iId);
						oFuncCheckItem.getCheckItem().setCheckId(m_oCheck.getCheckId());
						oFuncCheckItem.getCheckItem().setCheckPartyId(m_oFuncCheckPartyList.get(iPartySeq).getCptyId());
						
						// Update child item's check id and party id
						if(oFuncCheckItem.hasChildItem() && oNewChildItemInfos != null) {
							for(int i = 0; i < oNewChildItemInfos.length(); i++) {
								JSONObject oNewChildItemInfo = oNewChildItemInfos.optJSONObject(i);
								if(oNewChildItemInfo == null)
									continue;
								
								int iChildId = oNewChildItemInfo.optInt("citm_id");
								int iChildSeatNo = oNewChildItemInfo.optInt("citm_seat");
								int iChildSeq = oNewChildItemInfo.optInt("citm_seq");
								int iChildPartySeq = oNewChildItemInfo.optInt("cpty_seq");

								FuncCheckItem oChildFuncCheckItem = m_oFuncCheckPartyList.get(iChildPartySeq).getItemList(iChildSeatNo).get(iChildSeq-1);
					
								oChildFuncCheckItem.getCheckItem().setCheckItemId(iChildId);
								oChildFuncCheckItem.getCheckItem().setCheckId(m_oCheck.getCheckId());
								oChildFuncCheckItem.getCheckItem().setCheckPartyId(m_oFuncCheckPartyList.get(iChildPartySeq).getCptyId());
							}
							
						}
						
						try {
							// Action log
							oFuncCheckItem.updateActionLog(m_oCheck.getCheckId(), iId, 0);
							AppGlobal.g_oActionLog.get().addActionLogByList(oFuncCheckItem.getActionLogList());
							oFuncCheckItem.getActionLogList().clear();
						} catch (Exception e) {
							AppGlobal.stack2Log(e);
						}
					}
				}
				if(oNewItemIds.size() > 0 && iSaveCheckType != 1){ // For split table, no need print kitchen slip
					// Add the method to the thread manager
					// Thread 1 : Print kitchen slip
					// Create parameter array
					Object[] oParameters = new Object[3];
					oParameters[0] = m_oCheck.getCheckId();
					oParameters[1] = oNewItemIds;
					oParameters[2] = AppGlobal.g_oCurrentLangIndex.get();
					oAppThreadManager.addThread(1, m_oCheck, "printKitchenSlip", oParameters);
				}
				
				// If there is new check's extra info
				if(m_oCheck.getNewAddCheckExtraInfos() != null && m_oCheck.getNewAddCheckExtraInfos().size() > 0) {
					for(JSONObject oNewCheckExtraInfo: m_oCheck.getNewAddCheckExtraInfos()){
						int iCkeiId = oNewCheckExtraInfo.optInt("ckei_id");
						String sBy = oNewCheckExtraInfo.optString("ckei_by");
						String sSection = oNewCheckExtraInfo.optString("ckei_section");
						String sVariable = oNewCheckExtraInfo.optString("ckei_variable");
						int iIndex = oNewCheckExtraInfo.optInt("ckei_index");
						
						for(PosCheckExtraInfo oPosCheckExtraInfo: m_oCheckExtraInfoList) {
							if(oPosCheckExtraInfo.getBy().equals(sBy) && oPosCheckExtraInfo.getSection().equals(sSection) && oPosCheckExtraInfo.getVariable().equals(sVariable) && oPosCheckExtraInfo.getIndex() == iIndex)
								oPosCheckExtraInfo.setCkeiId(iCkeiId);
						}
					}
				}
				
				// Update mix and match parent id by using item sequence no.
				if(bWithItems && AppGlobal.g_oFuncMixAndMatch.get().isSupportMixAndMatch()){
					// Add the method to the thread manager
					// Thread 2 : Update mix and match item's master item ID	
					oAppThreadManager.addThread(2, this, "updateMixAndMatchMasterItemIds", null);
				}
				
				// Update check discount and its discount item ids
				List<JSONObject> oNewCheckDiscountInfos = m_oCheck.getNewCheckDiscountInfos();
				if(oNewCheckDiscountInfos.size() > 0) {
					for(JSONObject oCheckDiscountInfo:oNewCheckDiscountInfos) {
						int iCheckDiscIndex = oCheckDiscountInfo.optInt("checkDiscountIndex");
						
						for(int iPartySeq=0; iPartySeq<m_oFuncCheckPartyList.size(); iPartySeq++) {
							if(m_oFuncCheckPartyList.get(iPartySeq).hasPartyCheckDiscount(iCheckDiscIndex) == true) {
								m_oFuncCheckPartyList.get(iPartySeq).getPartyCheckDiscount(iCheckDiscIndex).setCdisId(oCheckDiscountInfo.optInt("checkDiscountId"));
								m_oFuncCheckPartyList.get(iPartySeq).getPartyCheckDiscount(iCheckDiscIndex).setModified(false);
								
								if(oCheckDiscountInfo.has("checkDiscountItemIds")) {
									JSONArray oCheckDiscountItemInfos = oCheckDiscountInfo.optJSONArray("checkDiscountItemIds");
									List<FuncCheckItem> oAppliedItems = m_oFuncCheckPartyList.get(iPartySeq).getAppliedCheckDiscountItemList(iCheckDiscIndex);
									
									for(int i=0; i<oCheckDiscountItemInfos.length(); i++) {
										for(FuncCheckItem oAppliedFuncCheckItem: oAppliedItems) {
											if(oAppliedFuncCheckItem.getCheckItem().getCitmId() == oCheckDiscountItemInfos.optJSONObject(i).optInt("citmId")) {
												oAppliedFuncCheckItem.getCheckDiscountItemList(iCheckDiscIndex).setCditId(oCheckDiscountItemInfos.optJSONObject(i).optInt("cditId"));
												oAppliedFuncCheckItem.getCheckDiscountItemList(iCheckDiscIndex).setCdisId(oCheckDiscountInfo.optInt("checkDiscountId"));
												break;
											}
										}
									}
								}
								break;
							}
						}
					}
				}

				if(iGetUpdateRecord == 2) {
					
					//form the check party list
					this.addOldCheckPartyToList();
					
					//form the check discount list
					this.addOldCheckDiscountToList();
					
					//form the check extra info list
					this.addOldCheckExtraInfoToList();
				}
				
				if(!bUpdate){
					// For new check,
					
					// Add "new_check" log to action log list
					AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.send_check.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), 0, 0, 0, 0, "");
				}

				List<Integer> oNewPaymentIds = m_oCheck.getNewPaymentIds();
				if(oNewPaymentIds.size() > 0) {
					int iLastPaymentId = 0;
					for(Integer iNewCpayId:oNewPaymentIds){
						// For direct payment, add "paid" log to action log list
						AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.paid.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), 0, 0, 0, iNewCpayId, "");
						
						// Get the last payment Id
						iLastPaymentId = iNewCpayId;
					}
					
					// Add Octopus transaction if last payment is Octopus payment
					for(PosCheckPayment oCheckPayment:m_oCheckPaymentList) {
						if(oCheckPayment.isOctopusPaymentType()){
							// Add the method to the thread manager
							// Thread : add Octopus transaction
							JSONObject oOctopusTransactionJsonObject = null;
							
							//Create parameter array
							try{
								// Retrieve the Octopus transaction detail from check payment ref 1
								oOctopusTransactionJsonObject = new JSONObject(oCheckPayment.getRefData(1));
								
								Object[] oParameters4 = new Object[19];
								oParameters4[0] = AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId();
								oParameters4[1] = AppGlobal.g_oFuncOutlet.get().getShopId();
								oParameters4[2] = AppGlobal.g_oFuncOutlet.get().getOutletId();
								oParameters4[3] = getCheckId();
								oParameters4[4] = iLastPaymentId;	// Last payment ID
								oParameters4[5] = PosOctopusTransaction.TYPE_DEDUCT_VALUE;
								oParameters4[6] = oOctopusTransactionJsonObject.getString("transaction_time");
								oParameters4[7] = new BigDecimal(oOctopusTransactionJsonObject.getString("transaction_amount"));
								oParameters4[8] = oCheckPayment.getPaymentMethodId();
								oParameters4[9] = oOctopusTransactionJsonObject.getString("device_id");
								oParameters4[10] = oOctopusTransactionJsonObject.getString("udsn");
								oParameters4[11] = oOctopusTransactionJsonObject.getString("card_id");
								oParameters4[12] = oOctopusTransactionJsonObject.getString("card_type");
								oParameters4[13] = new BigDecimal(oOctopusTransactionJsonObject.getString("original_remain_amount"));
								oParameters4[14] = new BigDecimal(oOctopusTransactionJsonObject.getString("current_remain_amount"));
								oParameters4[15] = AppGlobal.g_oFuncUser.get().getUserId();
								oParameters4[16] = AppGlobal.g_oFuncStation.get().getStationId();
								// Empty for deduct value
								oParameters4[17] = "";
								oParameters4[18] = "";
								oAppThreadManager.addThread(3, AppGlobal.g_oFuncOctopus.get(), "addOctopusTransaction", oParameters4);
										
							}catch (Exception e) {
								AppGlobal.stack2Log(e);
							}							
							
							break;
						}
					}
				}
				
				// Run the thread without wait
				oAppThreadManager.runThread();
			}
		}
		
		//handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		return sSaveCheckResult;
	}
	
	private void updateMixAndMatchMasterItemIds(){
		HashMap<String, String>oMasterSlaveSeatSeqList = new HashMap<String, String>();
		
		// Initial all item with NO master item
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for (List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oMasterFuncCheckItem:oItemList){
					String sKey = oMasterFuncCheckItem.getCheckItem().getCptyId() + "_" + oMasterFuncCheckItem.getCheckItem().getSeatNo() + "_" + oMasterFuncCheckItem.getCheckItem().getSeq();
					String sValue = "0_0_0";
					oMasterSlaveSeatSeqList.put(sKey, sValue);
				}
			}
		}
		
		// Set the slave item with master item
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for (List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oMasterFuncCheckItem:oItemList){
					for (FuncCheckItem oSlaveFuncCheckItem:oMasterFuncCheckItem.getMixAndMatchItemList()){
						String sKey = oSlaveFuncCheckItem.getCheckItem().getCptyId() + "_" + oSlaveFuncCheckItem.getCheckItem().getSeatNo() + "_" + oSlaveFuncCheckItem.getCheckItem().getSeq();
						String sValue = oMasterFuncCheckItem.getCheckItem().getCptyId() + "_" + oMasterFuncCheckItem.getCheckItem().getSeatNo() + "_" + oMasterFuncCheckItem.getCheckItem().getSeq();
						oMasterSlaveSeatSeqList.put(sKey, sValue);
					}
				}
			}
		}
		
		if(oMasterSlaveSeatSeqList.size() > 0){
			m_oCheck.updateMixAndMatchMasterItemIds(oMasterSlaveSeatSeqList);
		}
	}
	
	// Split multiple quantity new item to single quantity
	public void splitMultipleQtyNewItemToSingleQty(){
		ArrayList<ArrayList<FuncCheckItem>> oAllPartiesNewFuncCheckItemList = new ArrayList<ArrayList<FuncCheckItem>>();
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			ArrayList<FuncCheckItem> oNewFuncCheckItemList = new ArrayList<FuncCheckItem>();
			// Get all new ordered items
			for(int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
				ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>)oFuncCheckParty.getItemList(i);
				if(oFuncCheckItemList != null && oFuncCheckItemList.size() > 0) {					//Has ordered items in seat i
					for (int j=0; j<oFuncCheckItemList.size(); j++) {
						FuncCheckItem oFuncCheckItem = oFuncCheckItemList.get(j);
						// No need to handle old item and set menu child item
						if(!oFuncCheckItem.isOldItem() && !oFuncCheckItem.isSetMenuItem())
							oNewFuncCheckItemList.add(oFuncCheckItem);
					}
				}
			}
			
			oAllPartiesNewFuncCheckItemList.add(oNewFuncCheckItemList);
		}
		
		// Remove the new item first
		this.removeAllNewItemFormItemList(false, false);

		// Process each new ordered item
		for(int i = 0; i < oAllPartiesNewFuncCheckItemList.size(); i++) {
			
			// Switch current process party
			m_oCurrentFuncCheckParty = m_oFuncCheckPartyList.get(i);
			
			ArrayList<FuncCheckItem> oNewFuncCheckItemList = oAllPartiesNewFuncCheckItemList.get(i);
			for(int j = 0; j < oNewFuncCheckItemList.size(); j++) {
				FuncCheckItem oOriginalFuncCheckItem = oNewFuncCheckItemList.get(j);
				int iSeatNo = oOriginalFuncCheckItem.getCheckItem().getSeatNo();
				
				BigDecimal dOriginalQty = oOriginalFuncCheckItem.getCheckItem().getQty();
				BigDecimal dNewQty;
				boolean bBreakFlag = false;
				boolean bNeedSplit = true;
				
				if(oOriginalFuncCheckItem.isCouponItem()) {
					bNeedSplit = false;
				}
				
				if(bNeedSplit){
					// Check if the item is belonged to one of the rules
					boolean bMatch = false;
					for(Entry<Integer, ArrayList<PosMixAndMatchItem>> entry:AppGlobal.g_oFuncMixAndMatch.get().getMixAndMatchItemList().entrySet()){
						ArrayList<PosMixAndMatchItem> oPosMixAndMatchItemList = entry.getValue();
						for(PosMixAndMatchItem oPosMixAndMatchItem:oPosMixAndMatchItemList){
							if(oPosMixAndMatchItem.isMenuItem()){
								if(oPosMixAndMatchItem.getRecordId() == oOriginalFuncCheckItem.getMenuItemId()){
									bMatch = true;								
								}
							}else
							if(oPosMixAndMatchItem.isDepartment()){
								if(oPosMixAndMatchItem.getRecordId() == oOriginalFuncCheckItem.getMenuItem().getDeparmentId()){
									bMatch = true;
								}
							}else
							if(oPosMixAndMatchItem.isCategory()){
								if(oPosMixAndMatchItem.getRecordId() == oOriginalFuncCheckItem.getMenuItem().getCategoryId()){
									bMatch = true;
								}
							}
							if(bMatch){
								break;
							}
						}
						if(bMatch){
							break;
						}
					}
					if(bMatch == false){
						bNeedSplit = false;
					}
				}
				
				while(!bBreakFlag){
					if(bNeedSplit){
						if(dOriginalQty.compareTo(BigDecimal.ONE) > 0){
							dNewQty = BigDecimal.ONE;
							dOriginalQty = dOriginalQty.subtract(BigDecimal.ONE);
						}else{
							dNewQty = dOriginalQty;
							bBreakFlag = true;
						}
					}else{
						dNewQty = dOriginalQty;
						bBreakFlag = true;
					}
					
					// Clone a new item
					FuncCheckItem oNewFuncCheckItem = new FuncCheckItem(oOriginalFuncCheckItem, null);
					
					// Add to item list with given seat no.
					int iCurrentItemCount = this.getItemListCount(iSeatNo);
					this.addItemToItemList(iSeatNo, iCurrentItemCount+1, oNewFuncCheckItem);
					
					// Process child item
					for (FuncCheckItem oOriginalChildFuncCheckItem: oOriginalFuncCheckItem.getChildItemList()) {
						// Clone a new item
						FuncCheckItem oNewChildFuncCheckItem = new FuncCheckItem(oOriginalChildFuncCheckItem, oNewFuncCheckItem);
						
						// Add to item list with given seat no.
						iCurrentItemCount = this.getItemListCount(iSeatNo);
						this.addItemToItemList(iSeatNo, iCurrentItemCount+1, oNewChildFuncCheckItem);
						
						// Set the quantity
						oNewChildFuncCheckItem.internalChangeQty(oNewChildFuncCheckItem.getCheckItem().getBaseQty().multiply(dNewQty));
					}
					
					// Set the quantity
					oNewFuncCheckItem.internalChangeQty(dNewQty);
				}
			}
		}
	}
	
	private void createStockDeliveryInvoiceFromCurrentCheck(){

		DateTimeFormatter fmt = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		
		if(this.isOldCheck() == false){			
			m_oPosStockDeliveryInvoice.setCreateLocTime(m_oCheck.getOpenLocTime());
			m_oPosStockDeliveryInvoice.setCreateTime(m_oCheck.getOpenTime());
			m_oPosStockDeliveryInvoice.setCreateUserId(m_oCheck.getOpenUserId());
			m_oPosStockDeliveryInvoice.setCreateStationId(m_oCheck.getOpenStatId());
			
			m_oPosStockDeliveryInvoice.setSinvId(0);
		}
		
		m_oPosStockDeliveryInvoice.setModifiedLocTime(new DateTime());
		m_oPosStockDeliveryInvoice.setModifiedTime(fmt.print(m_oPosStockDeliveryInvoice.getModifiedLocTime().withZone(DateTimeZone.UTC)));
		m_oPosStockDeliveryInvoice.setModifiedUserId(m_iUserId);
		m_oPosStockDeliveryInvoice.setModifiedStationId(m_iStationId);
		
		if(m_oCheck.isDeleted()){
			// Void check
			m_oPosStockDeliveryInvoice.setVoidLocTime(m_oCheck.getVoidLocTime());
			m_oPosStockDeliveryInvoice.setVoidTime(m_oCheck.getVoidTime());
			m_oPosStockDeliveryInvoice.setVoidUserId(m_oCheck.getVoidUserId());
			m_oPosStockDeliveryInvoice.setVoidStationId(m_oCheck.getVoidStatId());
			m_oPosStockDeliveryInvoice.setStatus(PosStockDeliveryInvoice.STATUS_DELETED);
		}
	}
	
	private PosStockDeliveryInvoiceItem createStockDeliveryInvoiceItemFromFuncCheckItem(FuncCheckItem oFuncCheckItem){
		
		PosStockDeliveryInvoiceItem oPosStockDeliveryInvoiceItem = oFuncCheckItem.getStockDeliveryInvoiceItem();
		
		if(oFuncCheckItem.isOldItem() == false){
			// New item
			oPosStockDeliveryInvoiceItem.setSinvId(m_oPosStockDeliveryInvoice.getSinvId());
			oPosStockDeliveryInvoiceItem.setItemId(oFuncCheckItem.getCheckItem().getItemId());
		}
		oPosStockDeliveryInvoiceItem.setExpectDeliveryQty(oFuncCheckItem.getCheckItem().getQty());		
		oPosStockDeliveryInvoiceItem.setStatus(oFuncCheckItem.getCheckItem().getStatus());
		
		return oPosStockDeliveryInvoiceItem;
	}
	
	private FuncCheckItem createFuncCheckItemFromStockDeliveryInvoiceItem(PosStockDeliveryInvoiceItem oPosStockDeliveryInvoiceItem){
		FuncCheckItem oFuncCheckItem = new FuncCheckItem();
		
		oFuncCheckItem.retieveItemFromMenu(oPosStockDeliveryInvoiceItem.getItemId(), oPosStockDeliveryInvoiceItem.getExpectDeliveryQty(), oPosStockDeliveryInvoiceItem.getExpectDeliveryQty(), null, false, false, 0);
		oFuncCheckItem.setStockDeliveryInvoiceItem(oPosStockDeliveryInvoiceItem);
		
		return oFuncCheckItem;
	}
	
	public void checkReceiveStockDeliveryInvoice(){
		DateTimeFormatter fmt = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		
		m_oPosStockDeliveryInvoice.setReceivingLocTime(new DateTime());
		m_oPosStockDeliveryInvoice.setReceivingTime(fmt.print(m_oPosStockDeliveryInvoice.getReceivingLocTime().withZone(DateTimeZone.UTC)));
		m_oPosStockDeliveryInvoice.setReceivingUserId(m_iUserId);
		m_oPosStockDeliveryInvoice.setReceivingStationId(m_iStationId);
		m_oPosStockDeliveryInvoice.setStatus(PosStockDeliveryInvoice.STATUS_RECEIVED);
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem:oItemList){
					oFuncCheckItem.getStockDeliveryInvoiceItem().setModified(true);					
				}
			}
		}
	}
	
	public int getNewStockDeliveryInvoiceRefId(){
		int iRandNo;
		Random rand = new Random();
		rand.setSeed(new Date().getTime());
		
		while(true){
			iRandNo = rand.nextInt(60000) + 1;
			if(m_oPosStockDeliveryInvoice.readById(iRandNo, 1) == false){
				// The reference no. is not used ==> can use for new invoice
				break;
			}
		}
		return iRandNo;
	}
	
	public boolean isStockDeliveryInvoiceExist(int iRefId){
		return m_oPosStockDeliveryInvoice.readById(iRefId, 1);
	}
	
	public int getStockDeliveryInvoiceRefId(){
		return m_oPosStockDeliveryInvoice.getSinvId();
	}
	
	public int getStockDeliveryInvoiceReceiveUserId(){
		return m_oPosStockDeliveryInvoice.getReceivingUserId();
	}
	
	public void setStockDeliveryInvoiceShopId(int iShopId){
		m_oPosStockDeliveryInvoice.setShopId(iShopId);
	}
	
	public void setStockDeliveryInvoiceOutletId(int iOutletId){
		m_oPosStockDeliveryInvoice.setOletId(iOutletId);
	}
	
	public void setStockDeliveryInvoiceUserRef(String sUserRef){
		m_oPosStockDeliveryInvoice.setUserRef(sUserRef);
	}
	
	public void clearPaymentList(){
		m_oCheckPaymentList.clear();
	}
	
	public int getCheckId(){
		return m_oCheck.getCheckId();
	}
	
	/*********/
	/* For action to re-open the paid check and try to lock an empty table(pos_outlet_table), the m_oCheck-chksId will clear
	 * and it will reset to 0. It is the records of outlet_table indicate it is new table.
	 */
	/*********/
	public void setCheckIdForOldCheckAfterLockTableAndCancelAction(int iCheckId) {
		m_oCheck.setChksId(iCheckId);
	}
	
	public String getCheckPrefix() {
		return m_oCheck.getCheckPrefix();
	}
	
	public int getCheckNo(){
		return m_oCheck.getCheckNo();
	}
	
	public String getCheckPrefixNo(){
		return m_oCheck.getCheckPrefixNo();
	}
	
	public String getTableName(){
		return m_sTableName;
	}	
	
	public String getTableNoWithTableName() {
		String sTable = m_sTableNo + m_sTableExtension;
		if(AppGlobal.g_oFuncOutlet.get().isTableNameExist(m_sTableNo, m_sTableExtension) && sTable.equals(m_sTableName) == false)
			sTable = sTable + "(" + m_sTableName + ")";
		
		return sTable;
	}
	
	public String getTableNoWithExtensionForDisplay() {
		return (m_sTableNo + m_sTableExtension);
	}
	
	public String getTableNo() {
		return m_sTableNo;
	}
	
	public String getTableExtension(){
		return m_sTableExtension;
	}
	
	public boolean isModified() {
		return this.m_bModified;
	}
	
	public String getOpenUserName() {
		UserUser oUser = new UserUser();
		oUser.readByUserId(m_oCheck.getOpenUserId());
		
		String sName = oUser.getFirstName(AppGlobal.g_oCurrentLangIndex.get());
		if(!sName.isEmpty())
			sName += " ";
		sName += oUser.getLastName(AppGlobal.g_oCurrentLangIndex.get());
		return sName;
	}
	
	public HashMap<Integer, PosTaxScType> getScType() {
		return m_oScType;
	}
	
	public int getOutletTableCheckId() {
		return this.m_oOutletTable.getCheckId();
	}
	
	public int getOutletTableStationId() {
		return this.m_oOutletTable.getStationId();
	}
	
	public String getOutletTableStatus() {
		return this.m_oOutletTable.getStatus();
	}
	
	public String getOutletTableTag() {
		return this.m_oOutletTable.getTag();
	}
	
	public JSONObject getOutletTableInfo() {
		return this.m_oOutletTable.getInfo();
	}
		
	//get updated JSONArray of webservice result
	public JSONArray getResultJSONArrayOfRequest() {
		return m_oCheck.getResultJSONArrayOfRequest();
	}
	
	public ArrayList<PosCheckPayment> getCheckPaymentList() {
		return m_oCheckPaymentList;
		
	}
	
	public void updateCustomerDisplayDataUpdateTimestamp() {
		long currentTimestamp=0;
		
		DateTime currentTime = new DateTime();
		currentTimestamp = currentTime.getMillis();
		this.m_sCustomerDisplayInfo_DataUpdate_Timestamp = currentTimestamp;
	}
	
	
	private JSONArray getChildItemsJSONArray(JSONArray oChildItemJSONArray, List<FuncCheckItem> oChildItemList, int iLangIndex) {
		JSONArray oTmpChildItemsJSONArray = new JSONArray();
		JSONObject oTmpChildItemJSONObject = new JSONObject();
		JSONObject oTmpModifierJSONObject = new JSONObject();
		String sModiNames = "";
		String sModiNames_lang2 = "";
		String sModiNames_lang3 = "";
		BigDecimal dModiTotal = new BigDecimal(0);
		int iQtyRoundDecimal;
		
		oChildItemJSONArray = new JSONArray();
		
		for(FuncCheckItem oChildItem:oChildItemList) {
			oTmpChildItemJSONObject = new JSONObject();
			if(oChildItem.getModifierList().size() > 0) {
				oTmpModifierJSONObject = new JSONObject();
				sModiNames = "";
				dModiTotal = new BigDecimal(0);
				for(FuncCheckItem oChildModiItem:oChildItem.getModifierList()) {
					if (sModiNames.length() == 0) {
						sModiNames = oChildModiItem.getItemDescriptionByIndex(iLangIndex);
						sModiNames_lang2 = oChildModiItem.getItemDescriptionByIndex(2);
						sModiNames_lang3 = oChildModiItem.getItemDescriptionByIndex(3);
					}
					else {
						sModiNames = sModiNames + ", " + oChildModiItem.getItemDescriptionByIndex(iLangIndex);
						sModiNames_lang2 = sModiNames_lang2 + ", " + oChildModiItem.getItemDescriptionByIndex(2);
						sModiNames_lang3 = sModiNames_lang3 + ", " + oChildModiItem.getItemDescriptionByIndex(3);
					}
					dModiTotal = dModiTotal.add(oChildModiItem.getCheckItem().getRoundTotal());
				}
			}
			
			// Handle no decimal value quantity
			iQtyRoundDecimal = 0;		// If QTY is without decimal value, uses no decimal point value for display
			if (Util.HERORound(oChildItem.getCheckItem().getQty(), AppGlobal.g_oFuncOutlet.get().getItemRoundMethod(), AppGlobal.g_oFuncOutlet.get().getItemRoundDecimal()).compareTo(Util.HERORound(oChildItem.getCheckItem().getQty(), AppGlobal.g_oFuncOutlet.get().getItemRoundMethod(), 0)) != 0) {
				iQtyRoundDecimal = AppGlobal.g_oFuncOutlet.get().getItemRoundDecimal();
			}
			
			try {
				oTmpChildItemJSONObject.put("Desc", oChildItem.getItemDescriptionByIndex(iLangIndex));
				oTmpChildItemJSONObject.put("Desc_lang2", oChildItem.getItemDescriptionByIndex(2));
				oTmpChildItemJSONObject.put("Desc_lang3", oChildItem.getItemDescriptionByIndex(3));
				oTmpChildItemJSONObject.put("Qty", StringLib.BigDecimalToString(oChildItem.getCheckItem().getQty(), iQtyRoundDecimal));
				oTmpChildItemJSONObject.put("Total", AppGlobal.g_oFuncOutlet.get().roundItemAmountToString(oChildItem.getCheckItem().getRoundTotal()));
				if (oChildItem.getModifierList().size() > 0) {
					oTmpModifierJSONObject.put("ModiDesc", sModiNames);
					oTmpModifierJSONObject.put("ModiDesc_lang2", sModiNames_lang2);
					oTmpModifierJSONObject.put("ModiDesc_lang3", sModiNames_lang3);
					oTmpModifierJSONObject.put("ModiTotal", AppGlobal.g_oFuncOutlet.get().roundItemAmountToString(dModiTotal));
					oTmpChildItemJSONObject.put("Modifier", oTmpModifierJSONObject);
				}
				if (oChildItem.getChildItemList().size() > 0) {
					// Recursive to get the child items from list
					oTmpChildItemsJSONArray = getChildItemsJSONArray(oTmpChildItemsJSONArray, oChildItem.getChildItemList(), iLangIndex);
					oTmpChildItemJSONObject.put("ChildItems", oTmpChildItemsJSONArray);
				}
				oChildItemJSONArray.put(oTmpChildItemJSONObject);
			}catch(JSONException jsone) {
				AppGlobal.stack2Log(jsone);
			}
		}
		
		return(oChildItemJSONArray);
	}
	
	
	// iCallType : 1-From calcCheck(), 2-From updatePaymentInfo(), 3-Cancel Check Function, 4-From preProcessEachPayment()
	public void generateCustomerDisplayInterfaceFiles(int iCallType) {
		String sCurrentTimestampStr;
		long lCurrentTimestamp=0;
		String sTableNo, sCheckNo, sItemTotal, sDiscTotal, sSCTotal, sTaxTotal, sCheckTotal, sRoundAmount;
		int iLangIndex;
		int iQtyRoundDecimal;
		BigDecimal dDiscTotal = new BigDecimal(0);
		BigDecimal dSCTotal = new BigDecimal(0);
		BigDecimal dTaxTotal = new BigDecimal(0);
		BigDecimal dRoundAmount = new BigDecimal(0);
		String sOutputBaseFolder, sOutputInfosFolder, sOutputAlertsFolder;
		String sTimestampFile, sDataFile;
		
		int iUserID;

		JSONObject oBillInfoJSONObject = new JSONObject();
		JSONObject oDataControlJSONObject = new JSONObject();
		JSONObject oBillSummaryJSONObject = new JSONObject();
		JSONObject oBillItemsJSONObject = new JSONObject();
		JSONObject oBillPaymentsJSONObject = new JSONObject();
		JSONArray oNewItemsJSONArray = new JSONArray();
		JSONArray oOrderedItemsJSONArray = new JSONArray();
		JSONArray oPaymentsJSONArray = new JSONArray();
				
		JSONObject oTmpItemJSONObject;
		JSONObject oTmpModifierJSONObject;
		JSONArray oTmpChildItemsJSONArray;
		JSONObject oTmpPaymentJSONObject;
		JSONArray oTmpPaymentInfosJSONArray;
		JSONObject oTmpPaymentInfoJSONObject;
		
		if (this.m_sCustomerDisplayInfo_DataUpdate_Timestamp > this.m_sCustomerDisplayInfo_LastGenInterfaceFile_Timestamp) {
			// New customer display information is generated. Generate interface files and update last gen timestamp afterwards

			// Data Control JsonObject
			DateTime oCurrentTime = new DateTime();
			lCurrentTimestamp = oCurrentTime.getMillis();		// TimeStamp : in Milliseconds from Epoch of of 1970-01-01T00:00:00Z
			DateTimeFormatter oFmt = DateTimeFormat.forPattern("yyyyMMddHHmmSSS");			
			sCurrentTimestampStr = oFmt.print(oCurrentTime);

			try {				
				oDataControlJSONObject.put("TimeStamp", sCurrentTimestampStr);
				oDataControlJSONObject.put("InterfaceType", "b");
			}catch(JSONException jsone) {
				AppGlobal.stack2Log(jsone);
			}
			
			// Reset values
			if (iCallType == 3) {
				sTableNo = this.m_sTableNo + this.m_sTableExtension;
				sCheckNo = this.getCheckPrefixNo();
				iUserID = this.m_iUserId;		
				sItemTotal = AppGlobal.g_oFuncOutlet.get().roundItemAmountToString(new BigDecimal(0)); 
				sSCTotal = AppGlobal.g_oFuncOutlet.get().roundSCAmountToString(new BigDecimal(0));
				sTaxTotal = AppGlobal.g_oFuncOutlet.get().roundTaxAmountToString(new BigDecimal(0));
				sCheckTotal = AppGlobal.g_oFuncOutlet.get().roundCheckAmountToString(new BigDecimal(0));
				sDiscTotal = AppGlobal.g_oFuncOutlet.get().roundDiscAmountToString(new BigDecimal(0));
				sRoundAmount = AppGlobal.g_oFuncOutlet.get().roundDiscAmountToString(new BigDecimal(0));
				
				try {
					oBillSummaryJSONObject.put("TableNo", sTableNo);
					oBillSummaryJSONObject.put("CheckNo", sCheckNo);
					oBillSummaryJSONObject.put("OperUser", iUserID);
					oBillSummaryJSONObject.put("ItemTotal", sItemTotal);
					// If the value is zero, it will not be included in the interface file : Tax, SC, Disc, Round Amount 
					oBillSummaryJSONObject.put("BillTotal", sCheckTotal);
					
					oBillInfoJSONObject.put("DataControl", oDataControlJSONObject);
					oBillInfoJSONObject.put("BillSummary", oBillSummaryJSONObject);
				}catch(JSONException jsone) {
					AppGlobal.stack2Log(jsone);
				}
			}
			else {
				// BillSummary JsonObject
				sTableNo = this.m_sTableNo + this.m_sTableExtension;
				sCheckNo = this.getCheckPrefixNo();
				iUserID = this.m_iUserId;
				
				dSCTotal = this.getServiceChargeTotal();
				dTaxTotal = this.getTaxTotal();
				dRoundAmount = this.getRoundAmount();
				
				sItemTotal = AppGlobal.g_oFuncOutlet.get().roundItemAmountToString(this.getItemTotal()); 
				sSCTotal = AppGlobal.g_oFuncOutlet.get().roundSCAmountToString(dSCTotal);
				sTaxTotal = AppGlobal.g_oFuncOutlet.get().roundTaxAmountToString(dTaxTotal);
				sCheckTotal = AppGlobal.g_oFuncOutlet.get().roundCheckAmountToString(this.getCheckTotal());
				dDiscTotal = dDiscTotal.add(this.getCheckDiscountTotal());
				dDiscTotal = dDiscTotal.add(this.getItemDiscountTotal());
				sDiscTotal = AppGlobal.g_oFuncOutlet.get().roundDiscAmountToString(dDiscTotal);
				sRoundAmount = AppGlobal.g_oFuncOutlet.get().roundDiscAmountToString(dRoundAmount);
			
				try {				
					oBillSummaryJSONObject.put("TableNo", sTableNo);
					oBillSummaryJSONObject.put("CheckNo", sCheckNo);
					oBillSummaryJSONObject.put("OperUser", iUserID);
					oBillSummaryJSONObject.put("ItemTotal", sItemTotal);
					if (BigDecimal.ZERO.compareTo(dTaxTotal) != 0)
						oBillSummaryJSONObject.put("TaxTotal", sTaxTotal);
					if (BigDecimal.ZERO.compareTo(dSCTotal) != 0)
						oBillSummaryJSONObject.put("SCTotal", sSCTotal);
					if (BigDecimal.ZERO.compareTo(dDiscTotal) != 0)
						oBillSummaryJSONObject.put("DiscTotal", sDiscTotal);
					if (BigDecimal.ZERO.compareTo(dRoundAmount) != 0)
						oBillSummaryJSONObject.put("RoundAmount", sRoundAmount);
					oBillSummaryJSONObject.put("BillTotal", sCheckTotal);
				}catch(JSONException jsone) {
					AppGlobal.stack2Log(jsone);
				}		

			
				// BillItems JsonObject
				
				// Get the language index used in customer display from setup
				iLangIndex = 1;
	
				for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
					for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
						for (FuncCheckItem oFuncCheckItem:oItemList){
							oTmpItemJSONObject = new JSONObject();
							oTmpModifierJSONObject = new JSONObject();
							String sModiNames = "";
							String sModiNames_lang2 = "";
							String sModiNames_lang3 = "";
							BigDecimal dModiTotal = new BigDecimal(0);
							
							// Skip Child Items (Handled in child item list)
							if (oFuncCheckItem.isSetMenuItem()) {
								continue;
							}
											
							// Construct Modifier
							if (oFuncCheckItem.hasModifier()) {						
								for(FuncCheckItem oModifierItem:oFuncCheckItem.getModifierList()) {
									if (sModiNames.length() == 0) {
										sModiNames = oModifierItem.getItemDescriptionByIndex(iLangIndex);
										sModiNames_lang2 = oModifierItem.getItemDescriptionByIndex(2);
										sModiNames_lang3 = oModifierItem.getItemDescriptionByIndex(3);
									}
									else {
										sModiNames = sModiNames + ", " + oModifierItem.getItemDescriptionByIndex(iLangIndex);
										sModiNames_lang2 = sModiNames_lang2 + ", " + oModifierItem.getItemDescriptionByIndex(2);
										sModiNames_lang3 = sModiNames_lang3 + ", " + oModifierItem.getItemDescriptionByIndex(3);
									}
									dModiTotal = dModiTotal.add(oModifierItem.getCheckItem().getTotal());
								}
							}
							
							// Handle no decimal value quantity
							iQtyRoundDecimal = 0;		// If QTY is without decimal value, uses no decimal point value for display
							if (Util.HERORound(oFuncCheckItem.getCheckItem().getQty(), AppGlobal.g_oFuncOutlet.get().getItemRoundMethod(), AppGlobal.g_oFuncOutlet.get().getItemRoundDecimal()).compareTo(Util.HERORound(oFuncCheckItem.getCheckItem().getQty(), AppGlobal.g_oFuncOutlet.get().getItemRoundMethod(), 0)) != 0) {
								iQtyRoundDecimal = AppGlobal.g_oFuncOutlet.get().getItemRoundDecimal();
							}
							
							try {
								oTmpItemJSONObject.put("Desc", oFuncCheckItem.getItemDescriptionByIndex(iLangIndex));
								oTmpItemJSONObject.put("Desc_lang2", oFuncCheckItem.getItemDescriptionByIndex(2));
								oTmpItemJSONObject.put("Desc_lang3", oFuncCheckItem.getItemDescriptionByIndex(3));
								oTmpItemJSONObject.put("Qty", StringLib.BigDecimalToString(oFuncCheckItem.getCheckItem().getQty(), iQtyRoundDecimal));
								oTmpItemJSONObject.put("Total", AppGlobal.g_oFuncOutlet.get().roundItemAmountToString(oFuncCheckItem.getCheckItem().getTotal()));
								if (oFuncCheckItem.hasModifier()) {
									oTmpModifierJSONObject.put("ModiDesc", sModiNames);
									oTmpModifierJSONObject.put("ModiDesc_lang2", sModiNames_lang2);
									oTmpModifierJSONObject.put("ModiDesc_lang3", sModiNames_lang3);
									oTmpModifierJSONObject.put("ModiTotal", AppGlobal.g_oFuncOutlet.get().roundItemAmountToString(dModiTotal));
									oTmpItemJSONObject.put("Modifier", oTmpModifierJSONObject);
								}
							}catch(JSONException jsone) {
								AppGlobal.stack2Log(jsone);
							}					
							
							// Construct Child Items Array
							if (oFuncCheckItem.getChildItemList().size() > 0) {
								oTmpChildItemsJSONArray = new JSONArray();
								
								oTmpChildItemsJSONArray = getChildItemsJSONArray(oTmpChildItemsJSONArray, oFuncCheckItem.getChildItemList(), iLangIndex);
								
								try {
									oTmpItemJSONObject.put("ChildItems", oTmpChildItemsJSONArray);
								}catch(JSONException jsone) {
									AppGlobal.stack2Log(jsone);
								}
							}
							
							
							// Add to New Items and Ordered Items
							if (oFuncCheckItem.isOldItem()) {
								// Old Item
								oOrderedItemsJSONArray.put(oTmpItemJSONObject);
							}
							else {
								// New Item
								oNewItemsJSONArray.put(oTmpItemJSONObject);
							}
						}
					}
				}
				
				// Add to Bill Items
				try {
					if (oNewItemsJSONArray.length() > 0) {
						oBillItemsJSONObject.put("NewItems", oNewItemsJSONArray);					
					}
					if (oOrderedItemsJSONArray.length() > 0) {
						oBillItemsJSONObject.put("OrderedItems", oOrderedItemsJSONArray);
					}
				}catch(JSONException jsone) {
					AppGlobal.stack2Log(jsone);
				}
	
				
				// BillPayments JsonObject
				if (iCallType == 2) {
					// With Payment Information
					for (PosCheckPayment oPOSCheckPayment:this.getCheckPaymentList()){
						oTmpPaymentJSONObject = new JSONObject();
						try {
							oTmpPaymentJSONObject.put("PayDesc", oPOSCheckPayment.getName(iLangIndex));
							oTmpPaymentJSONObject.put("PayDesc_lang2", oPOSCheckPayment.getName(2));
							oTmpPaymentJSONObject.put("PayDesc_lang3", oPOSCheckPayment.getName(3));
							oTmpPaymentJSONObject.put("PayAmt", AppGlobal.g_oFuncOutlet.get().roundPaymentAmountToString(oPOSCheckPayment.getPayTotal()));
							
							if (oPOSCheckPayment.getPayTips().compareTo(new BigDecimal(0)) != 0) {
								oTmpPaymentJSONObject.put("Tip", AppGlobal.g_oFuncOutlet.get().roundPaymentAmountToString(oPOSCheckPayment.getPayTips()));
							}
							else if (oPOSCheckPayment.getPayChange().compareTo(new BigDecimal(0)) != 0) {
								oTmpPaymentJSONObject.put("Changes", AppGlobal.g_oFuncOutlet.get().roundPaymentAmountToString(oPOSCheckPayment.getPayChange()));
							}
							
							// Payment infos
							oTmpPaymentInfosJSONArray = new JSONArray();
							
							// Octopus payment
							if(oPOSCheckPayment.isOctopusPaymentType()){
								oTmpPaymentInfoJSONObject = new JSONObject();
								
								String sOriginalLangCode = "";
								for(HashMap<String, String> oLangInfo:AppGlobal.g_oSupportedLangList) {
									if(oLangInfo.get("index").equals(String.valueOf(AppGlobal.g_oCurrentLangIndex.get()))){
										sOriginalLangCode = oLangInfo.get("code");
									}				
									
									String sLangCode = oLangInfo.get("code");
									AppGlobal.g_oLang.get().switchLocale(sLangCode);
									
									int iIndex = Integer.parseInt(oLangInfo.get("index"));
									if(iIndex == 1){
										oTmpPaymentInfoJSONObject.put("Desc", AppGlobal.g_oLang.get()._("octopus_remaining_value"));
									}else
									if(iIndex == 2){
										oTmpPaymentInfoJSONObject.put("Desc_lang2", AppGlobal.g_oLang.get()._("octopus_remaining_value"));
									}else
									if(iIndex == 3){
										oTmpPaymentInfoJSONObject.put("Desc_lang3", AppGlobal.g_oLang.get()._("octopus_remaining_value"));
									}
								}
								// Roll back the language
								AppGlobal.g_oLang.get().switchLocale(sOriginalLangCode);
								
								JSONObject oOctopusTransactionJsonObject = new JSONObject(oPOSCheckPayment.getRefData(1));
								oTmpPaymentInfoJSONObject.put("Value", new BigDecimal(oOctopusTransactionJsonObject.getString("current_remain_amount")).setScale(1).toPlainString());
								
								oTmpPaymentInfosJSONArray.put(oTmpPaymentInfoJSONObject);
							}
							
							if(oTmpPaymentInfosJSONArray.length() > 0){
								oTmpPaymentJSONObject.put("PaymentInfos", oTmpPaymentInfosJSONArray);
							}
							
							oPaymentsJSONArray.put(oTmpPaymentJSONObject);
						}catch(JSONException jsone) {
							AppGlobal.stack2Log(jsone);
						}					
					}
					try {
						if (oPaymentsJSONArray.length() > 0) {
							oBillPaymentsJSONObject.put("Payments", oPaymentsJSONArray);					
						}
					}catch(JSONException jsone) {
						AppGlobal.stack2Log(jsone);
					}
				}
				
				// Whole Bill Info JsonObject
				try {
					oBillInfoJSONObject.put("DataControl", oDataControlJSONObject);					
					oBillInfoJSONObject.put("BillSummary", oBillSummaryJSONObject);
					oBillInfoJSONObject.put("BillItems", oBillItemsJSONObject);
					oBillInfoJSONObject.put("BillPayments", oBillPaymentsJSONObject);
				}catch(JSONException jsone) {
					AppGlobal.stack2Log(jsone);
				}
			}

			// Create interface files
			// Directly overwrite current files
			if(AppGlobal.isModuleSupport(AppGlobal.OPTIONAL_MODULE.signage.name()) == true)
				sOutputBaseFolder = AppGlobal.g_sSystemDataPath + "//www//signage_displays";
			else
				sOutputBaseFolder = AppGlobal.g_sSystemDataPath + "//www//pos_customer_displays";
			sOutputAlertsFolder = sOutputBaseFolder + "//" + "alerts";
			sOutputInfosFolder = sOutputBaseFolder + "//" + "infos";
			sTimestampFile = Integer.toString(m_iStationId) + ".txt";
			sDataFile = Integer.toString(m_iStationId) + ".txt";
			String sFilename1 = sOutputAlertsFolder + "//" + sTimestampFile;
			String sFilename2 = sOutputInfosFolder + "//" + sDataFile;			
			File oTmpFile = null;
			FileWriter fWriter;

			try {
				// Update Info File
				oTmpFile = new File(sFilename2);
				if (oTmpFile.getParentFile() != null)
					oTmpFile.getParentFile().mkdirs();
				fWriter = new FileWriter(oTmpFile, false);
				fWriter.write(oBillInfoJSONObject.toString());
				fWriter.close();
				
				// Update Alert File
				oTmpFile = new File(sFilename1);
				if (oTmpFile.getParentFile() != null)
					oTmpFile.getParentFile().mkdirs();
				fWriter = new FileWriter(oTmpFile, false);
				fWriter.write(sCurrentTimestampStr);
				fWriter.close();
			}catch(IOException fileErr) {
				AppGlobal.stack2Log(fileErr);
			}					
			
			// Update the last interface file generation timestamp
			this.m_sCustomerDisplayInfo_LastGenInterfaceFile_Timestamp = lCurrentTimestamp;			
		}
	}
	
	// Retrieve pre-order items by ref no.
	public JSONObject retrievePreorderByRefNo(String sRefNo){
		PreorderCheck oPreorderCheck = new PreorderCheck();
		return oPreorderCheck.retrievePreorderByRefNo(AppGlobal.g_oFuncOutlet.get().getOutletId(), sRefNo);
	}
	
	// Retrieve pre-order items by order id
	public JSONObject retrievePreorderByOrderId(int iOrderId){
		PreorderCheck oPreorderCheck = new PreorderCheck();
		return oPreorderCheck.retrievePreorderByOrderId(AppGlobal.g_oFuncOutlet.get().getOutletId(), iOrderId);
	}
	
	// update pre-order items by table no
	public boolean updatePreorderReadCount(String sRefNo) {
		PreorderCheck oPreorderCheck = new PreorderCheck();
		return oPreorderCheck.updatePreorderReadCount(AppGlobal.g_oFuncOutlet.get().getOutletId(), sRefNo);
	}
	
	// Retrieve reservation by date and confirmation no
	public JSONObject retrieveReservationByDateRefno(String sDate, String sRefNo, String sRequestInfo) {
		ResvResv oResvResv = new ResvResv();
		return oResvResv.retrieveResvByDateConfirmno(AppGlobal.g_oFuncOutlet.get().getOutletId(), sDate, sRefNo, sRequestInfo);
	}
	
	// Set member
	public void setMember(int iMemberId){
		DateTime modifiedLocTime = null;
		DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		
		m_oCheck.setMemberId(iMemberId);
		
		if(this.isOldCheck()) {
			modifiedLocTime = new DateTime();
			m_oCheck.setModifiedLocTime(modifiedLocTime);
			m_oCheck.setModifiedTime(formatter.print(modifiedLocTime.withZone(DateTimeZone.UTC)));
			m_oCheck.setModifiedUesrId(AppGlobal.g_oFuncUser.get().getUserId());
			m_oCheck.setModifiedStationId(AppGlobal.g_oFuncStation.get().getStationId());
			updateCheck(false, false, 0, 0, false, 0, 0, 0, 0, false, false, false, false, 0, 0, false);
		}
	}
	
	// Check if member is assigned
	public boolean hasMember(){
		if(m_oCheck.getMemberId() > 0)
			return true;
		else
			return false;
	}
	
	// Get assigned member Id
	public int getMemberId(){
		return m_oCheck.getMemberId();
	}
	
	// Get assigned member display name
	public String getMemberDisplayName() {
		if(m_oCheck.getMemberId() > 0) {
			MemMember oMember = new MemMember();
			oMember.readById(m_oCheck.getMemberId());
			return oMember.getName();
		}else
			return null;
	}
	
	public void setOrderingType(String sOrderingType) {
		m_oCheck.setOrderingType(sOrderingType);
	}
	
	public void setNonRevenue(String sNonRevenue, boolean bUpdateDB) {
		m_oCheck.setNonRevenue(sNonRevenue);
		
		if (bUpdateDB && isOldCheck())
			updateCheck(false, false, 0, 0, false, 0, 0, 0, 0, false, false, false, false, 0, 0, false);
	}
	
	public void setResvBookDate(Date oResvBookDate) {
		m_oCheck.setResvBookDate(oResvBookDate);
	}
	
	public void setRefnoWithPrefix(String sRefnoWithPrefix) {
		m_oCheck.setRefnoWithPrefix(sRefnoWithPrefix);
	}

	public Date getResvBookDate() {
		return m_oCheck.getResvBookDate();
	}
	
	public String getRefnoWithPrefix() {
		return m_oCheck.getRefnoWithPrefix();
	}
	
	public String getOrderingType() {
		return m_oCheck.getOrderingType();
	}
	
	public boolean isTakeoutOrderingType() {
		return m_oCheck.isTakeoutOrderingType();
	}
	
	public boolean isNormalOrderingType() {
		return m_oCheck.isNormalOrderingType();
	}
	
	public String getNonRevenue() {
		return m_oCheck.getNonRevenue();
	}

	public boolean isRevenue() {
		return m_oCheck.isRevenue();
	}

	// Get a section, item index list of current ordered item
	public List<HashMap<String, Integer>> getSectionItemIndexForCurrentOrderedItem() {
		int i, j, k;
		List<HashMap<String, Integer>> oSectionItemIndexList = new ArrayList<HashMap<String, Integer>>();

		for (i=0; i<m_oFuncCheckPartyList.size(); i++) {
			for (j=0; j<m_oFuncCheckPartyList.get(i).getWholeItemList().size(); j++) {
				for (k=0; k<m_oFuncCheckPartyList.get(i).getItemList(j).size(); k++) {
					HashMap<String, Integer> oItemHashMap = new HashMap<String, Integer>();
					oItemHashMap.put("partySeq", i);
					oItemHashMap.put("sectionId", j);
					oItemHashMap.put("itemIndex", k);
					oSectionItemIndexList.add(oItemHashMap);
				}
			}
		}
		
		return oSectionItemIndexList;
	}
	
	public int getLastReleasePaymentVoidReasonId() {
		return m_iLastReleasePaymentVoidReasonId;
	}
	

	public int getCheckBusinessPeriodId() {
		return this.m_oCheck.getBusinessPeriodId();
	}
	
	public JSONObject contrustPmsPostingCheckInformation(PosCheckPayment oCheckPayment) {
		List<PosCheckItem> oCheckItemListForPmsPosting = new ArrayList<PosCheckItem>();
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem1:oItemList){
					oCheckItemListForPmsPosting.add(oFuncCheckItem1.getCheckItem());
				}
			}
		}
		
		List<PosCheckDiscount> oCheckDiscountListForPmsPosting = new ArrayList<PosCheckDiscount>();
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			if(oFuncCheckParty.hasPartyCheckDiscount()) {
				for(Entry<Integer, PosCheckDiscount> oEntry: oFuncCheckParty.getPartyCheckDiscount().entrySet())
					oCheckDiscountListForPmsPosting.add(oEntry.getValue());
			}
		}
		
		return m_oCheck.contrustPmsPostingCheckInformation(oCheckItemListForPmsPosting, oCheckPayment, oCheckDiscountListForPmsPosting);
	}
	
	public JSONObject contrustSvcPostingCheckInformation(List<PosCheckPayment> oCheckPaymentList) {
		List<PosCheckItem> oCheckItemListForPmsPosting = new ArrayList<PosCheckItem>();
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem1:oItemList){
					oCheckItemListForPmsPosting.add(oFuncCheckItem1.getCheckItem());
				}
			}
		}
		
		List<PosCheckDiscount> oCheckDiscountListForPmsPosting = new ArrayList<PosCheckDiscount>();
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			if(oFuncCheckParty.hasPartyCheckDiscount()) {
				for(Entry<Integer, PosCheckDiscount> oEntry: oFuncCheckParty.getPartyCheckDiscount().entrySet())
					oCheckDiscountListForPmsPosting.add(oEntry.getValue());
			}
		}
		
		return m_oCheck.contrustSvcPostingCheckInformation(oCheckItemListForPmsPosting, oCheckPaymentList, oCheckDiscountListForPmsPosting);
	}
	
	// Check if there is Octopus payment
	public boolean hasOctopusPayment() {
		for (PosCheckPayment oCheckPayment: this.getCheckPaymentList()) {
			if(oCheckPayment.isOctopusPaymentType())
				return true;
		}
		return false;
	}
	
	// Get payment total from payment records
	public BigDecimal getPaymentRecordPayTotal() {
		BigDecimal dPayTotal = new BigDecimal("0.0");
		
		if(this.getCheckPaymentList().size() == 0)
			return dPayTotal;
		else {
			for (PosCheckPayment oCheckPayment: this.getCheckPaymentList())
				dPayTotal = dPayTotal.add(oCheckPayment.getPayTotal());
			return dPayTotal;
		}
	}
	
	// Get item total from item records
	public BigDecimal getItemRecordItemTotal() {
		BigDecimal dItemTotal = new BigDecimal("0.0");
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oCheckItemList:oFuncCheckParty.getWholeItemList()){
				for(FuncCheckItem oCheckItem:oCheckItemList) {
					dItemTotal = dItemTotal.add(oCheckItem.getCheckItem().getRoundTotal());
				}
			}
		}
		
		return dItemTotal;
	}
	
	public ArrayList<FuncCheckParty> getCheckPartyList() {
		return m_oFuncCheckPartyList;
	}
	
	public FuncCheckParty getCheckPartyBySeq(int iSeq) {
		if(m_oFuncCheckPartyList.size() <= iSeq)
			return null;
		
		return m_oFuncCheckPartyList.get(iSeq);
	}
	
	public int getCurrentCheckPartySeq() {
		return m_oFuncCheckPartyList.indexOf(m_oCurrentFuncCheckParty);
	}
	
	public void addCheckParty() {
		FuncCheckParty oFuncCheckParty = new FuncCheckParty();
		
		// Set the seq no.
		int iSeq = m_oFuncCheckPartyList.size();
		oFuncCheckParty.getCheckParty().setSeq(iSeq);
		
		m_oFuncCheckPartyList.add(oFuncCheckParty);
		
		// Set check party count
		m_oCheck.setPartyCount(m_oFuncCheckPartyList.size()-1);
	}
	
	public boolean switchCheckParty(int iSeq) {
		if(m_oFuncCheckPartyList.size() <= iSeq)
			return false;
		
		m_oCurrentFuncCheckParty = m_oFuncCheckPartyList.get(iSeq);
		
		return true;
	}
	
	public boolean hasCouponItem() {
		boolean bFound = false;
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oCheckItemList:oFuncCheckParty.getWholeItemList()){
				for(FuncCheckItem oCheckItem:oCheckItemList) {
					if(oCheckItem.isCouponItem()) {
						bFound = true;
						break;
					}
				}
			}
		}
		
		return bFound;
	}
	
	public PosCheckDiscount addNewCheckDiscountToList(List<HashMap<String, Integer>> oSelectedItemList, PosDiscountType oDiscountType, BigDecimal dDiscAmountRate) {
		int i = 0, iCurrentCheckDiscountIndex = 0;
		PosCheckDiscount oCheckDiscount = new PosCheckDiscount();
		DateTime oApplyTime = new DateTime();
		DateTimeFormatter oFormatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		
		oCheckDiscount.setModified(true);
		oCheckDiscount.setBdayId(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId());
		oCheckDiscount.setBperId(AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId());
		oCheckDiscount.setShopId(AppGlobal.g_oFuncOutlet.get().getShopId());
		oCheckDiscount.setOletId(AppGlobal.g_oFuncOutlet.get().getOutletId());
		oCheckDiscount.setChksId(getCheckId());
		oCheckDiscount.setCptyId(getCurrentCheckPartySeq());
		oCheckDiscount.setCitmId(0);
		oCheckDiscount.setDtypId(oDiscountType.getDtypId());
		for(i=1; i<=5; i++) {
			oCheckDiscount.setName(i, oDiscountType.getName(i));
			oCheckDiscount.setShortName(i, oDiscountType.getShortName(i));
		}
		oCheckDiscount.setDgrpId(oDiscountType.getDgrpId());
		oCheckDiscount.setMethod(oDiscountType.getMethod());
		oCheckDiscount.setType(oDiscountType.getType());
		oCheckDiscount.setUsedFor(oDiscountType.getUsedFor());
		oCheckDiscount.setClassKey(oDiscountType.getClassKey());
		if(oDiscountType.isPercentageDiscountMethod()) {
			oCheckDiscount.setFixAmount(BigDecimal.ZERO);
			oCheckDiscount.setRate(dDiscAmountRate);
		}else{
			oCheckDiscount.setFixAmount(dDiscAmountRate);
			oCheckDiscount.setRate(BigDecimal.ZERO);
		}
		oCheckDiscount.setIncludeTaxScMask(oDiscountType.getIncludeTaxScMask());
		oCheckDiscount.setIncludePreDisc(oDiscountType.getIncludePreDisc());
		oCheckDiscount.setIncludeMidDisc(oDiscountType.getIncludeMidDisc());
		oCheckDiscount.setApplyLocalTime(oApplyTime);
		oCheckDiscount.setApplyTime(oFormatter.print(oApplyTime.withZone(DateTimeZone.UTC)));
		oCheckDiscount.setApplyUserId(AppGlobal.g_oFuncUser.get().getUserId());
		oCheckDiscount.setApplyStationId(AppGlobal.g_oFuncStation.get().getStationId());
		oCheckDiscount.setIsCheckDiscount();
		
		iCurrentCheckDiscountIndex = m_oCurrentFuncCheckParty.addNewCheckDiscountToList(oCheckDiscount);
		oCheckDiscount.setCheckDiscountIndex(iCurrentCheckDiscountIndex);
		
		//the corresponding pos check discount item
		for(HashMap<String, Integer> oSelectedItem:oSelectedItemList) {
			FuncCheckItem oParentFuncCheckItem = getCheckItem(oSelectedItem.get("partySeq"), oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
			PosCheckDiscountItem oPosCheckDiscountItem = new PosCheckDiscountItem();
			oPosCheckDiscountItem.setCitmId(oParentFuncCheckItem.getCheckItem().getCitmId());
			oParentFuncCheckItem.addCheckDiscountItemToList(iCurrentCheckDiscountIndex, oPosCheckDiscountItem);
			
			oCheckDiscount.addCheckDiscountItemCount(1);
		}
		
		return oCheckDiscount;
	}
	
	public HashMap<Integer, PosCheckDiscount> getCurrentPartyAppliedCheckDiscount() {
		return m_oCurrentFuncCheckParty.getPartyCheckDiscount();
	}
	
	public List<HashMap<String, Integer>> getSectionItemIndexWithAppliedCheckDiscount(int iChkDiscIndex) {
		List<HashMap<String, Integer>> oAppliedItemIndexList = m_oCurrentFuncCheckParty.getSeatItemIndexPairWithAppliedCheckDiscount(iChkDiscIndex);
		return oAppliedItemIndexList;
	}
	
	public List<HashMap<String, Integer>> getPartySectionItemIndexWithAppliedCheckDiscount(int iChkDiscIndex) {
		List<HashMap<String, Integer>> oPartySectionItemIndexList = new ArrayList<HashMap<String, Integer>>();
		
		for(int i=0; i<m_oFuncCheckPartyList.size(); i++) {
			List<HashMap<String, Integer>> oAppliedItemPerParty = m_oFuncCheckPartyList.get(i).getSeatItemIndexPairWithAppliedCheckDiscount(iChkDiscIndex);
			if(!oAppliedItemPerParty.isEmpty()) {
				for(HashMap<String, Integer> oItemInfo:oAppliedItemPerParty) {
					oItemInfo.put("partySeq", i);
					oPartySectionItemIndexList.add(oItemInfo);
				}
			}
		}
		
		return oPartySectionItemIndexList;
	}
	
	// Get existing check extra info list
	public ArrayList<PosCheckExtraInfo> getCheckExtraInfoList() {
		return this.m_oCheckExtraInfoList;
	}
	
	public void clearCheckExtraInfoList() {
		this.m_oCheckExtraInfoList.clear();
	}
	
	public void addCheckExtraInfoToList(PosCheckExtraInfo oCheckExtraInfo) {
		this.m_oCheckExtraInfoList.add(oCheckExtraInfo);
	}
	
	public void removeCheckExtraInfoFromList(String sBy, String sSection, String sVariable) {
		int iRemoveIndex = -1;
		PosCheckExtraInfo oCheckExtraInfo = null;
		
		for(int i = 0; i < m_oCheckExtraInfoList.size(); i++) {
			oCheckExtraInfo = m_oCheckExtraInfoList.get(i);
			if(oCheckExtraInfo.getBy().equals(sBy) && oCheckExtraInfo.getSection().equals(sSection) && oCheckExtraInfo.getVariable().equals(sVariable)) {
				iRemoveIndex = i;
				break;
			}
		}
		
		if(iRemoveIndex >= 0)
			m_oCheckExtraInfoList.remove(iRemoveIndex);
	}
	
	//Add old check extra info to list
	public void addOldCheckExtraInfoToList() {
		List<PosCheckExtraInfo> checkExtraInfoArrayList = m_oCheck.getCheckExtraInfoArrayList();
		
		//Clear all info
		m_oCheckExtraInfoList.clear();
		
		for(PosCheckExtraInfo chkExtraInfo:checkExtraInfoArrayList) {
			m_oCheckExtraInfoList.add(chkExtraInfo);
		}
	}
	
	public void addCheckExtraInfo(String sBy, String sSection, String sVariable, int iIndex, String sValue) {
		PosCheckExtraInfo oCheckExtraInfo = new PosCheckExtraInfo();
		oCheckExtraInfo.setBy(sBy);
		oCheckExtraInfo.setCheckId(m_oCheck.getCheckId());
		oCheckExtraInfo.setSection(sSection);
		oCheckExtraInfo.setVariable(sVariable);
		oCheckExtraInfo.setIndex(iIndex);
		oCheckExtraInfo.setValue(sValue);
		m_oCheckExtraInfoList.add(oCheckExtraInfo);
	}
	
	public void updateCheckExtraInfoValue(String sBy, String sSection, String sVariable, int iIndex, String sValue) {
		for(PosCheckExtraInfo oCheckExtraInfo:m_oCheckExtraInfoList) {
			if(oCheckExtraInfo.getBy().equals(sBy) && oCheckExtraInfo.getSection().equals(sSection) && oCheckExtraInfo.getVariable().equals(sVariable) && oCheckExtraInfo.getIndex() == iIndex) {
				oCheckExtraInfo.setValue(sValue);
				return;
			}
		}
	}
	
	public boolean isCheckExtraInfoExistByVariableAndIndex(String sVariable, int iIndex) {
		boolean bFound = false;
		
		for(PosCheckExtraInfo oCheckExtraInfo:m_oCheckExtraInfoList) {
			if(oCheckExtraInfo.getVariable().equals(sVariable) && oCheckExtraInfo.getIndex() == iIndex) {
				bFound = true;
				break;
			}
		}
		
		return bFound;
	}
	
	public boolean isCheckExtraInfoExistBySectionVariableAndIndex(String sSection, String sVariable, int iIndex) {
		boolean bFound = false;
		
		for(PosCheckExtraInfo oCheckExtraInfo:m_oCheckExtraInfoList) {
			if(oCheckExtraInfo.getSection().equals(sSection) && oCheckExtraInfo.getVariable().equals(sVariable) && oCheckExtraInfo.getIndex() == iIndex) {
				bFound = true;
				break;
			}
		}
		
		return bFound;
	}
	
	public String getCheckExtraInfoByCheckIdAndVariable(int iCheckId, String sVariable) {
		for(PosCheckExtraInfo oCheckExtraInfo:m_oCheckExtraInfoList) {
			if(oCheckExtraInfo.getChksId() == iCheckId && oCheckExtraInfo.getVariable().equals(sVariable)) {
				return oCheckExtraInfo.getValue();
			}
		}
		
		return "";
	}
	
	// Get the values list by variable
	public HashMap<Integer, String> getCheckExtraInfoValueListByVariable(String sVariable) {
		HashMap<Integer, String> oCheckExtraInfoValues = new HashMap<Integer, String>();
		
		for(PosCheckExtraInfo oPosCheckExtraInfo: m_oCheckExtraInfoList) {
			if(oPosCheckExtraInfo.getVariable().equals(sVariable)) 
				oCheckExtraInfoValues.put(Integer.valueOf(oPosCheckExtraInfo.getIndex()), oPosCheckExtraInfo.getValue());
		}
		
		return oCheckExtraInfoValues;
	}
	
	// Get the values list by variable
	public String getCheckExtraInfoValueListBySectionVariable(String sSection, String sVariable) {
		String sValue = "";
		
		for(PosCheckExtraInfo oPosCheckExtraInfo: m_oCheckExtraInfoList) {
			if(oPosCheckExtraInfo.getSection().equals(sSection) && oPosCheckExtraInfo.getVariable().equals(sVariable)) 
				sValue =oPosCheckExtraInfo.getValue();
		}
		
		return sValue;
	}
	
	public void cleanupItemStockList() {
		synchronized(this) {
			m_oItemStockList.cleanupOutletItemList();
		}
	}
	
	public void addExtraInfoForPaymentInterface(HashMap<String, String> oSelectedPaytypeInfo) {
		List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_PAYMENT_INTERFACE);
		PosInterfaceConfig oPosInterfaceConfig = null;
		int iInterfaceId = Integer.valueOf(oSelectedPaytypeInfo.get("interfaceId")).intValue();
		
		for(PosInterfaceConfig oTempInterfaceConfig: oInterfaceConfigList) {
			if(oTempInterfaceConfig.getInterfaceId() == iInterfaceId)
				oPosInterfaceConfig = oTempInterfaceConfig;
		}
		
		if(oPosInterfaceConfig == null)
			return;

		try {
			JSONObject oInterfaceSetup = oPosInterfaceConfig.getInterfaceConfig();
			int iExpireTime;
			iExpireTime = oInterfaceSetup.getJSONObject("interface_setup").getJSONObject("params").getJSONObject("pay_url_expire_time").getInt("value");
			DateTime oExpireTime = (new DateTime()).plusMinutes(iExpireTime);
			DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyyMMddHHmmss");
			String sExpireTime = formatter.print(oExpireTime);
			
			String sOutTradeNumber = "";
			
			// add related information to check's extra info
			if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0))
				updateCheckExtraInfoValue(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0, oSelectedPaytypeInfo.get("interfaceId"));
			else
				addCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0, oSelectedPaytypeInfo.get("interfaceId"));
			if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_PAYTYPE, 0))
				updateCheckExtraInfoValue(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_PAYTYPE, 0, oSelectedPaytypeInfo.get("paytype"));
			else
				addCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_PAYTYPE, 0, oSelectedPaytypeInfo.get("paytype"));
			if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_OUT_TRADE_NUMBER, 0))
				updateCheckExtraInfoValue(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_OUT_TRADE_NUMBER, 0, sOutTradeNumber);
			else
				addCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_OUT_TRADE_NUMBER, 0, sOutTradeNumber);
			if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_EXPIRE_TIME, 0))
				updateCheckExtraInfoValue(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_EXPIRE_TIME, 0, sExpireTime);
			else
				addCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_EXPIRE_TIME, 0, sExpireTime);
			
			m_bPaymentInterfacePrinting = true;
			
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void addPrintedCheckToPaymentInterfaceCheckList(String sOutTradeNumber) {
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0) == false)
			return;
		
		String sInterfaceId = getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID);
		String sPaytype = getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_PAYTYPE);
		String sExpireTime = "";
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_EXPIRE_TIME, 0))
			sExpireTime = getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_EXPIRE_TIME);
		
		if(sInterfaceId.isEmpty() || sPaytype.isEmpty())
			return;
		
		HashMap<String, String> oCheckInfo = new HashMap<String, String>();
		oCheckInfo.put("checkId", String.valueOf(m_oCheck.getCheckId()));
		oCheckInfo.put("interfaceId", sInterfaceId);
		oCheckInfo.put("paytype", sPaytype);
		oCheckInfo.put("outTradeNumber", sOutTradeNumber);
		oCheckInfo.put("expireTime", sExpireTime);
		AppGlobal.addPrintedCheckToPaymentInterfaceCheckList(AppGlobal.g_oFuncOutlet.get().getOutletId(), oCheckInfo);
	}
	
	// Add a Taiwan GUI transaction
	public String addTaiwanGuiTran(String sTaiwanGuiType, String sRefNum, int iTransNum, PosPaymentMethodList oPaymentMethodList) {
		DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		
		PosTaiwanGuiTran oTaiwanGuiTran = new PosTaiwanGuiTran();
		oTaiwanGuiTran.setShopId(AppGlobal.g_oFuncOutlet.get().getShopId());
		oTaiwanGuiTran.setOletId(AppGlobal.g_oFuncOutlet.get().getOutletId());
		oTaiwanGuiTran.setTwcfId(AppGlobal.g_oFuncStation.get().getTaiwanGuiConfigId());

		BigDecimal dVatTotal = BigDecimal.ZERO;
		BigDecimal dPrintTotal = BigDecimal.ZERO;
		
		// Calculate the print total and VAT total
		BigDecimal dPrepayTotal = BigDecimal.ZERO;
		for(FuncCheckParty oFuncCheckParty: m_oFuncCheckPartyList) {
			if(oFuncCheckParty.getPartyCheckDiscount().size() > 0) {
				for(PosCheckDiscount oCheckDiscount: oFuncCheckParty.getPartyCheckDiscount().values()) {
					if(oCheckDiscount.isUsedForExtraCharge()){
						// Get the pre-pay total (extra charge total)
						dPrepayTotal = dPrepayTotal.add(oCheckDiscount.getTotal());
					}
				}
			}
		}
		
		boolean bNonGuiPaymentExist = false;
		BigDecimal dGuiPaymentTotal = BigDecimal.ZERO;
		BigDecimal dNonGuiPaymentTotal = BigDecimal.ZERO;
		BigDecimal dTips = BigDecimal.ZERO;
		for(PosCheckPayment oPosCheckPayment:m_oCheckPaymentList){
			if(oPosCheckPayment.isDelete())
				continue;
			
			// Get GUI payment total
			if(oPaymentMethodList.getPaymentMethodList().containsKey(oPosCheckPayment.getPaymentMethodId())){
				PosPaymentMethod oPosPaymentMethod = oPaymentMethodList.getPaymentMethodList().get(oPosCheckPayment.getPaymentMethodId());
				if(oPosPaymentMethod.isTaiwanNonGuiPayment()){
					// Non-gui payment
					dNonGuiPaymentTotal = dNonGuiPaymentTotal.add(oPosCheckPayment.getPayTotal());
				}else{
					bNonGuiPaymentExist = true;
					// Gui payment
					dGuiPaymentTotal = dGuiPaymentTotal.add(oPosCheckPayment.getPayTotal());					
					
					// Get tips amount total
					dTips = dTips.add(oPosCheckPayment.getPayTips());
				}
			}
		}
		
		if(!bNonGuiPaymentExist) 
			return "";
		
		dPrintTotal = dPrintTotal.add(dGuiPaymentTotal);
		dPrintTotal = dPrintTotal.subtract(dPrepayTotal);
		dPrintTotal = dPrintTotal.add(dTips);
		
		// Calculate the tax total according to GUI type
		int iTaxIndex;
		if(sTaiwanGuiType.equals(PosTaiwanGuiTran.TYPE_SPECIAL)){
			// ENT tax
			iTaxIndex = AppGlobal.g_oFuncStation.get().getTaiwanGuiEntertainmentTaxIndex();			
		}else{
			// Normal tax
			iTaxIndex = AppGlobal.g_oFuncStation.get().getTaiwanGuiNormalTaxIndex();
		}
		
		if(iTaxIndex > 0){
			BigDecimal dFinalFactor = BigDecimal.ONE;
			dFinalFactor = dFinalFactor.add(m_oTaxType.get(iTaxIndex-1).getRate());
			dVatTotal = dPrintTotal.subtract(dPrintTotal.divide(dFinalFactor, 0, RoundingMode.HALF_UP));
		}
		
		oTaiwanGuiTran.setType(sTaiwanGuiType);
		oTaiwanGuiTran.setRefNum(sRefNum);
		
		oTaiwanGuiTran.setVatTotal(dVatTotal);
		oTaiwanGuiTran.setPrintTotal(dPrintTotal);
		oTaiwanGuiTran.setPrintCount(oTaiwanGuiTran.getPrintCount()+1);
		oTaiwanGuiTran.setPrintLocTime(new DateTime());
		oTaiwanGuiTran.setPrintTime(formatter.print(oTaiwanGuiTran.getPrintLocTime().withZone(DateTimeZone.UTC)));
		oTaiwanGuiTran.setPrintUserId(AppGlobal.g_oFuncUser.get().getUserId());
		oTaiwanGuiTran.setPrintStatId(AppGlobal.g_oFuncStation.get().getStationId());
	
		String sErrorMessage = oTaiwanGuiTran.addUpdate(false, iTransNum, m_oCheck.getCheckId());
		if(sErrorMessage.length() == 0){
			// No error
			if(isOldCheck() && m_oCheck.getTaiwanGuiTran() != null)
				m_oCheck.getTaiwanGuiTran().clear();
			m_oCheck.addTaiwanGuiTran(oTaiwanGuiTran);
			return "";
		}else{
			return this.getTaiwanGUIErrorMessage(sErrorMessage);
		}
	}
	
	// Get Taiwan GUI number of the check
	public int getTaiwanGuiNum(){
		if (m_oCheck.getTaiwanGuiTran(1) == null) {
			return 0;
		} else {
			return m_oCheck.getTaiwanGuiTran(1).getTguiNum();
		}
	}
	
	// Get the warning remain no. of GUI no.
	// 0 - no need to warn
	public int getRemainTaiwanGuiNumWarning(){
		if (m_oCheck.getTaiwanGuiTran(1) == null) {
			return 0;
		} else {
			// Further development
			return 0;
		}
	}
	
	public void voidTaiwanGuiTran() {
		DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		List<PosTaiwanGuiTran> oTaiwanGuiTranList = m_oCheck.getTaiwanGuiTran();
		
		if(oTaiwanGuiTranList == null)
			return;

		for(int i=0; i<oTaiwanGuiTranList.size(); i++) {
			PosTaiwanGuiTran oTaiwanGuiTran = oTaiwanGuiTranList.get(i);
			oTaiwanGuiTran.setVoidLocTime(new DateTime());
			oTaiwanGuiTran.setVoidTime(formatter.print(oTaiwanGuiTran.getVoidLocTime().withZone(DateTimeZone.UTC)));
			oTaiwanGuiTran.setVoidUserId(AppGlobal.g_oFuncUser.get().getUserId());
			oTaiwanGuiTran.setVoidStatId(AppGlobal.g_oFuncStation.get().getStationId());
			oTaiwanGuiTran.setStatus(PosTaiwanGuiTran.STATUS_DELETED);
		}
	}
	
	private String getTaiwanGUIErrorMessage(String sErrorMessageFromAPI){
		switch (sErrorMessageFromAPI) {
		case "missing_station_setup":
		case "missing_generate_by":
			return AppGlobal.g_oLang.get()._("missing_setup");
		case "exceed_range":
			return AppGlobal.g_oLang.get()._("taiwan_gui_number_is_out_of_range");
		case "duplicate_gui":
			return AppGlobal.g_oLang.get()._("duplicate_gui");
		default:
			return AppGlobal.g_oLang.get()._("internal_error");
		}
	}
	
	//get the itemizer total with itemizer number and configure
	public BigDecimal[] getItemizerTotal(int iNumberOfItemizer, HashMap<Integer, ArrayList<Integer>> oItemizerConfig) {
		int i = 0;
		BigDecimal[] dItemizers = new BigDecimal[iNumberOfItemizer];
		
		for(i=0; i<iNumberOfItemizer; i++)
			dItemizers[i] = BigDecimal.ZERO;
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oFuncItemList:oFuncCheckParty.getWholeItemList()){
				for(FuncCheckItem oFuncCheckItem:oFuncItemList) {
					for(Entry<Integer, ArrayList<Integer>> entry:oItemizerConfig.entrySet()) {
						ArrayList oItemDeptIdList = entry.getValue();
						if(oItemDeptIdList.size() > 0 && oItemDeptIdList.contains(oFuncCheckItem.getCheckItem().getDepartmentId())) {
							dItemizers[(entry.getKey()-1)] = dItemizers[(entry.getKey()-1)].add(oFuncCheckItem.getCheckItem().getRoundTotal());
							break;
						}
					}
				}
			}
		}
		
		return dItemizers;
	}
	
	// If discount was applied before, check if the current discount can be applied or not
	public boolean checkDiscountApplyRestriction(boolean bCurrentApplyIsCheckDiscount){
		boolean bAllow = true;

		int iApplyDiscountRestriction = AppGlobal.g_oFuncStation.get().getApplyDiscountRestriction();
		
		if(iApplyDiscountRestriction > 0){
			if(bCurrentApplyIsCheckDiscount){
				// Currently apply check discount
				
				// Check if check discount was applied before
				if(hasCheckDiscount(true, true)){
					// Check discount was applied before
					bAllow = false;
				}else{
					if(iApplyDiscountRestriction == 1){
						// Check if item discount was applied before
						for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
							for(List<FuncCheckItem> oFuncItemList:oFuncCheckParty.getWholeItemList()){
								for(FuncCheckItem oFuncCheckItem:oFuncItemList) {
									if(oFuncCheckItem.hasItemDiscount(true)){
										// Item discount was applied before
										bAllow = false;
										break;
									}
								}
								if(!bAllow){
									break;
								}
							}
							if(!bAllow){
								break;
							}
						}
					}
				}
			}else{
				// Currently apply item discount
				if(iApplyDiscountRestriction == 1){
					// Check if check discount was applied before
					if(hasCheckDiscount(true, true)){
						// Check discount was applied before
						bAllow = false;
					}
				}
			}
		}
		
		return bAllow;
	}
	
	// Double check discount alert
	// Return value = 0: no alert  || 1: more than one discount || 2: same discount
	public int checkDoubleDiscountAlert(PosDiscountType oDiscountType){
		int iDoubleCheckDiscountAlert = AppGlobal.g_oFuncStation.get().getDoubleCheckDiscountAlert();
		int iAlert = 0;
		
		if(iDoubleCheckDiscountAlert > 0){
			// Check if check discount was applied before
			HashMap<Integer, PosCheckDiscount> oAppliedCheckPartyDiscountList = getCurrentPartyAppliedCheckDiscount();
			if(oAppliedCheckPartyDiscountList.size() > 0){
				if(iDoubleCheckDiscountAlert == 1){
					return iAlert = 1;
				}else{
					//check if same check discount was applied before
			    	if(oAppliedCheckPartyDiscountList.size()>0){
			    		for(Entry<Integer, PosCheckDiscount> entry: oAppliedCheckPartyDiscountList.entrySet()){
			    			if(oDiscountType.getDtypId() == entry.getValue().getDtypId()){
			    				return iAlert = 2;
			    			}			 
			        	}
			    	}
				}
			}
		}
		
		return iAlert;
	}
	
	//get guest check url
	public String getGuestCheckUrl() {
		return m_sLastPrintCheckUrl;
	}
	
	// For Waive Tax Taiwan GUI, the check need to waive the tax
	// For other type, the check need to add back the tax for roll back
	// Parameter:
	// bAdd - true: add back the tax; false: waive the tax
	public void processTaiwanGUIWaiveTax(boolean bAdd) {
		int i;
		boolean[] bChosenSc = new boolean[5], bChosenTax = new boolean[25];
		List<HashMap<String, Integer>> oSelectedItem = this.getSectionItemIndexForCurrentOrderedItem();
		for(i=0; i<5; i++)
			// No effect on SC
			bChosenSc[i] = false;
		for(i=0; i<25; i++)
			bChosenTax[i] = true;
		this.addWaiveScTax(bAdd, oSelectedItem, bChosenSc, bChosenTax);
	}
	
	//generate a item snap shot list
	public void generateItemSnapShotList() {
		m_oItemSnapShotListForPayment = new ArrayList<HashMap<String, String>>();
		
		for(int iPartySeq=0; iPartySeq<m_oFuncCheckPartyList.size(); iPartySeq++) {
			FuncCheckParty oFuncCheckParty = m_oFuncCheckPartyList.get(iPartySeq);
			List<List<FuncCheckItem>> oPartyItemList = oFuncCheckParty.getWholeItemList();
			for(int iSection=0; iSection<oPartyItemList.size(); iSection++) {
				List<FuncCheckItem> oPartySectionItemList = oPartyItemList.get(iSection);
				for(int iItemIndex=0; iItemIndex<oPartySectionItemList.size(); iItemIndex++) {
					HashMap<String, String> oTempItemInfo = new HashMap<String, String>();
					
					oTempItemInfo.put("partySeq", String.valueOf(iPartySeq));
					oTempItemInfo.put("section", String.valueOf(iSection));
					oTempItemInfo.put("itemIndex", String.valueOf(iItemIndex));
					oTempItemInfo.put("oriChargeSc", String.valueOf(oPartySectionItemList.get(iItemIndex).getChargeSc()));
					oTempItemInfo.put("oriChargeTax", String.valueOf(oPartySectionItemList.get(iItemIndex).getChargeTax()));
					List<PosCheckDiscount> oItemDiscountList = oPartySectionItemList.get(iItemIndex).getItemDiscountList();
					String sItemDiscountList = "";
					if(oItemDiscountList.size() > 0) {
						for(int i=0; i<oItemDiscountList.size(); i++) {
							if(i > 1)
								sItemDiscountList = sItemDiscountList + ",";
							sItemDiscountList = sItemDiscountList + String.valueOf(oItemDiscountList.get(i).getCdisId());
						}
					}
					oTempItemInfo.put("oriDiscountIdList", sItemDiscountList);
					m_oItemSnapShotListForPayment.add(oTempItemInfo);
				}
			}
		}
		
		//get the applied check discount list
		for(int iPartySeq=0; iPartySeq<m_oFuncCheckPartyList.size(); iPartySeq++) {
			HashMap<String, String> oTempCheckDiscInfo = new HashMap<String, String>();
			HashMap<Integer, PosCheckDiscount> oCheckDiscountList = m_oFuncCheckPartyList.get(iPartySeq).getPartyCheckDiscount();
			String sCheckDiscountString = ""; //format <check discount index>:<PosDiscountType ID>,...,<check discount index>:<PosDiscountType ID>
			if(oCheckDiscountList == null || oCheckDiscountList.size() == 0)
				continue;
			
			for(Map.Entry<Integer, PosCheckDiscount> entry: oCheckDiscountList.entrySet()) {
				PosCheckDiscount oPosCheckDiscount = entry.getValue();
				
				if(!sCheckDiscountString.isEmpty())
					sCheckDiscountString = sCheckDiscountString+",";
				sCheckDiscountString = sCheckDiscountString+oPosCheckDiscount.getCheckDiscountIndex()+":"+oPosCheckDiscount.getDtypId();
			}
			oTempCheckDiscInfo.put("checkDiscountInfo", sCheckDiscountString);
			m_oItemSnapShotListForPayment.add(oTempCheckDiscInfo);
		}
	}
	
	public List<HashMap<String, String>> getItemSnapShotList() {
		return m_oItemSnapShotListForPayment;
	}
	
	// set pending item
	public void setPendingItems(List<HashMap<String, Integer>> oPendingItemList, List<HashMap<String, Integer>> oRemovePendingItemList) {
		//set the item to pending item
		if(oPendingItemList.size() > 0) {
			for(int i=0; i<oPendingItemList.size(); i++) {
				FuncCheckItem oFuncCheckItem = getCheckItem(oPendingItemList.get(i).get("partySeq"), oPendingItemList.get(i).get("sectionId"), oPendingItemList.get(i).get("itemIndex"));
				if(oFuncCheckItem != null) {
					oFuncCheckItem.setPendingItem(PosCheckItem.PENDING_PENDING_ITEM);
					
					// Add log to action log list
					oFuncCheckItem.addActionLog(AppGlobal.FUNC_LIST.select_pending_item.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId() , AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), 0, 0, 0, 0, "Pending");
				}
			}
		}
		
		//remove pending status from item
		if(oRemovePendingItemList.size() > 0) {
			for(int i=0; i<oRemovePendingItemList.size(); i++) {
				FuncCheckItem oFuncCheckItem = getCheckItem(oRemovePendingItemList.get(i).get("partySeq"), oRemovePendingItemList.get(i).get("sectionId"), oRemovePendingItemList.get(i).get("itemIndex"));
				if(oFuncCheckItem != null) {
					oFuncCheckItem.setPendingItem(PosCheckItem.PENDING_NORMAL_ITEM);
					
					// Add log to action log list
					oFuncCheckItem.addActionLog(AppGlobal.FUNC_LIST.select_pending_item.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId() , AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), 0, 0, 0, 0, "Clear Pending");
				}
			}
		}
	}
	
	//print pending item
	public void printPendingItems(List<HashMap<String, Integer>> oPendingItemList) {
		List<Integer> oNewItemIds = new ArrayList<Integer>();
		
		for(HashMap<String, Integer> oPendingItem: oPendingItemList) {
			FuncCheckItem oFuncCheckItem = this.getCheckItem(oPendingItem.get("partySeq"), oPendingItem.get("sectionId"), oPendingItem.get("itemIndex"));
			if(oFuncCheckItem.isOldItem() && oFuncCheckItem.isPendingItem()) {
				oNewItemIds.add(oFuncCheckItem.getCheckItem().getCitmId());
				oFuncCheckItem.setPendingItem(PosCheckItem.PENDING_NORMAL_ITEM);
				
				// Add log to action log list
				AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.print_pending_item.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId() , AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), 0, oFuncCheckItem.getCheckItem().getCitmId(), 0, 0, "Print Pending");
			}
		}
		
		if(oNewItemIds.size() == 0)
			return;
		
		//handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
		// *****************************************************************
		// Create thread to print kitchen slip
		AppThreadManager oAppThreadManager = new AppThreadManager();
		
		// Add the method to the thread manager
		// Thread 1 : Print kitchen slip
		// Create parameter array
		Object[] oParameters = new Object[3];
		oParameters[0] = m_oCheck.getCheckId();
		oParameters[1] = oNewItemIds;
		oParameters[2] = AppGlobal.g_oCurrentLangIndex.get();
		oAppThreadManager.addThread(1, m_oCheck, "printKitchenSlip", oParameters);
		
		// Add the method to the thread manager
		// Thread 2 : Update check
		// Create parameter array
		Object[] oParameters2 = new Object[16];
		oParameters2[0] = false;
		oParameters2[1] = true;
		oParameters2[2] = 1;
		oParameters2[3] = 0;
		oParameters2[4] = false;
		oParameters2[5] = 0;
		oParameters2[6] = 0;
		oParameters2[7] = 0;
		oParameters2[8] = 0;
		oParameters2[9] = false;
		oParameters2[10] = false;
		oParameters2[11] = false;
		oParameters2[12] = false;
		oParameters2[13] = 0;
		oParameters2[14] = 0;
		oParameters2[15] = false;
		oAppThreadManager.addThread(2, this, "updateCheck", oParameters2);
		
		// Run the thread
		oAppThreadManager.runThread();
		oAppThreadManager.waitForThread();
	}
	
	public boolean havePendingItems() {
		boolean bHavePendingItems = false;
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oCheckItemList:oFuncCheckParty.getWholeItemList()){
				for(FuncCheckItem oFuncCheckItem:oCheckItemList) {
					if(oFuncCheckItem.isPendingItem()) {
						bHavePendingItems = true;
						break;
					}
				}
			}
		}
		
		return bHavePendingItems;
	}
	
	// Set member
	public void saveMembershipInterfaceExtraInfo(boolean bAddUpdate, ArrayList<HashMap<String, String>> oCheckExtraInfos){
		DateTime modifiedLocTime = null;
		DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		
		for(int i=0; i<oCheckExtraInfos.size(); i++) {
			HashMap<String, String> oCheckExtraInfo = oCheckExtraInfos.get(i);

			if(bAddUpdate) {
				if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, oCheckExtraInfo.get("variable"), 0))
					updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, oCheckExtraInfo.get("variable"), Integer.parseInt(oCheckExtraInfo.get("index")), oCheckExtraInfo.get("value"));
				else
					addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, oCheckExtraInfo.get("variable"), Integer.parseInt(oCheckExtraInfo.get("index")), oCheckExtraInfo.get("value"));
			}else {
				removeCheckExtraInfoFromList(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, oCheckExtraInfo.get("variable"));
			}
		}
		
		if(this.isOldCheck()) {
			modifiedLocTime = new DateTime();
			m_oCheck.setModifiedLocTime(modifiedLocTime);
			m_oCheck.setModifiedTime(formatter.print(modifiedLocTime.withZone(DateTimeZone.UTC)));
			m_oCheck.setModifiedUesrId(AppGlobal.g_oFuncUser.get().getUserId());
			m_oCheck.setModifiedStationId(AppGlobal.g_oFuncStation.get().getStationId());
			updateCheck(false, false, 0, 0, false, 0, 0, 0, 0, false, false, false, false, 0, 0, false);
		}
	}
	
	public boolean changeOrderedItemPriceLevel(List<HashMap<String, Integer>> oSelectedItems, int iTargetPriceLevel){
		boolean bHaveUpdate = false;
		
		for(HashMap<String, Integer> oSelectedItem:oSelectedItems) {
			FuncCheckItem oSelectedFuncCheckItem = this.getCheckItem(oSelectedItem.get("partySeq"), oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
			
			if(oSelectedFuncCheckItem.getCheckItem().getPriceLevel() == iTargetPriceLevel)
				continue;
			
			bHaveUpdate = true;
			
			// Set the manual change price level flag
			oSelectedFuncCheckItem.setChangePriceLevelManually(true);
			// Set item to target price level
			oSelectedFuncCheckItem.changePriceLevel(iTargetPriceLevel, false);
			
			//for child item
			if(oSelectedFuncCheckItem.hasChildItem()) {
				for(FuncCheckItem oChildCheckItem:oSelectedFuncCheckItem.getChildItemList()) {
					oChildCheckItem.setChangePriceLevelManually(true);
					oChildCheckItem.changePriceLevel(iTargetPriceLevel, false);
					
					//for child modifier item
					if(oChildCheckItem.hasModifier()) {
						for(FuncCheckItem oChildModifierCheckItem:oChildCheckItem.getModifierList()){
							oChildModifierCheckItem.setChangePriceLevelManually(true);
							oChildModifierCheckItem.changePriceLevel(iTargetPriceLevel, false);
						}
					}
					
					// Re-calculate all my modifiers' price
					oChildCheckItem.setAllModifiersPrice(true);
					
					// Set modified flag if old item
					if(oChildCheckItem.isOldItem()){
						oChildCheckItem.getCheckItem().setModified(true);
					}
				}
			}
			
			//for modifier
			if(oSelectedFuncCheckItem.hasModifier()) {
				for(FuncCheckItem oModifierCheckItem:oSelectedFuncCheckItem.getModifierList()){
					oModifierCheckItem.setChangePriceLevelManually(true);
					oModifierCheckItem.changePriceLevel(iTargetPriceLevel, false);
				}
			}
			
			// Re-calculate all my modifiers' price
			oSelectedFuncCheckItem.setAllModifiersPrice(true);
			
			// Set modified flag if old item
			if(oSelectedFuncCheckItem.isOldItem()){
				oSelectedFuncCheckItem.getCheckItem().setModified(true);
			}
		}
		
		return bHaveUpdate;
	}
}
