package app;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.sql.Time;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Queue;
import java.util.SortedSet;
import java.util.StringTokenizer;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.xml.bind.DatatypeConverter;

import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import templatebuilder.TemplateBuilder;
import virtualui.HeroActionProtocol;
import virtualui.VirtualUIForm;
import virtualui.VirtualUIFrame;
import commonui.FormConfirmBox;
import commonui.FormDatePicker;
import commonui.FormDialogBox;
import commonui.FormInputBox;
import commonui.FormListMessageBox;
import commonui.FormOptionBox;
import commonui.FormOptionBox.FormOptionBoxListener;
import commonui.FormProcessBox;
import commonui.FormSelectionBox;
import commonui.FrameAlertMessageBox;
import commonui.FrameAlertMessageBox.FrameAlertMessageBoxListener;
import commonui.FrameOptionBox;
import commonui.FrameOptionBox.FrameOptionBoxListener;
import commonui.FrameShowOnceProcessBox;
import core.Controller;
import externallib.IniReader;
import externallib.StringLib;
import om.*;

public class FormMain extends VirtualUIForm implements FrameOrderingPanelListener, FrameOrderingBasketListener,
		FrameTableFloorPlanListener, FrameCheckDetailListener,
		FrameSetMenuListener, FrameOrderingMenuLookupListener,
		FrameSeatPanelListener, FrameStationInfoBarListener,
		FrameBasketExtendBarListener, FrameCheckReviewListener,
		OMListener, FrameBasketSelectPanelListener, FrameCashierListener,
		FrameOptionBoxListener,	FrameCheckFunctionListener,
		FuncCheckListener, FormCheckHistoryListener,
		FramePanelItemSelectPanelListener, FormCheckListingListener,
		FrameSearchItemListener, FrameDirectPaymentPanelListener,
		FormSplitTableListener, FrameTabBarListener, FrameOpenTableListener, FrameSelfOrderKioskListener, FormLoginListener,
		FrameItemRemindListener, FrameOpenTableWithQwertyKeyboardListener,
		FrameEnterItemPLUListener, FormPaymentCardAuthorizationListener,
		FrameAdminPanelListener, FrameLargePopUpPanelListener, FormConfirmOrderDialogListener, FormSelectOrderingTypeListener,
		FormSearchAdvanceOrderListener, FormRewriteCardOperationListener, FormAskGratuityListener, FormMembershipRegistrationListener,
		FormMembershipInterfaceListener, FormOptionBoxListener, FormTipsTrackingListener, FrameAlertMessageBoxListener,FrameDispalyInfoBarListener{
	
	TemplateBuilder m_oTemplateBuilder;
	
	LinkedHashMap<Integer, FrameTableFloorPlan> m_oPeriodFrameTableFloorPlanList;
	FrameTableFloorPlan m_oFrameTableFloorPlan;	// Current floor plan
	FrameStationInfoBar m_oFrameStationInfoBar;
	FrameStationInfo m_oFrameStationInfo;
	FrameOrderingPanel m_oFrameOrderingPanel;
	FrameOrderingPanel m_oFrameFuncPanel2;
	FrameOrderingBasket m_oFrameOrderingBasket;
	FrameOrderingBasket m_oFrameConsolidateItemsOrderingBasket;
	FrameBasketExtendBar m_oFrameBasketExtendBar;
	FrameCheckDetail m_oFrameCheckDetail;
	VirtualUIFrame m_oFrameCheckDetailUnderline;
	FrameAdminPanel m_oFrameAdminPanel;
	FrameSeatPanel m_oFrameSeatPanel;
	FrameSetMenu m_oFrameSetMenu;
	FrameOrderingMenuLookup m_oFrameOrderingMenuLookup;
	FormCheckListing m_oFormCheckListing;
	VirtualUIFrame m_oFrameCover;
	VirtualUIFrame m_oFrameStationInfoBarCover;
	FrameCheckReview m_oFrameCheckReview;
	FrameBasketSelectPanel m_oFrameBasketSelectPanel;
	FramePanelItemSelectPanel m_oFramePanelItemSelectPanel;
	FramePanelItemSelectPanel m_oFramePanelPaymentMethodSelectPanel;
	FrameOptionBox m_oFrameOptionBox;
	// Processing box
	FormProcessBox m_oFormProcessBox;
	// Show once process box
	FrameShowOnceProcessBox m_oFrameShowOnceProcessBox;
	// Check function panel
	FrameCheckFunction m_oFrameCheckFunction;
	// Direct payment result
	FramePaymentResult m_oFrameDirectPaymentResult;
	// Search Item panel
	FrameSearchItem m_oFrameSearchItem;
	FrameSearchItem m_oFrameSearchItemOnWastageOperation;
	
	// Item Remider panel
	FrameItemRemind m_oFrameItemRemind;
	// TabBar
	FrameTabBar m_oFrameTabBar;
	// Open Table panel
	FrameOpenTable m_oFrameOpenTable;
	FrameOpenTableWithQwertyKeyboard m_oFrameOpenTableWithQwertyKeyboard;
	
	// Self-order kiosk frame
	FrameSelfOrderKiosk m_oFrameSelfOrderKiosk;
	
	FrameLargePopUpPanel m_oFrameFloorPlanFunc;
	
	FrameAlertMessageBox m_oFrameAlertMessageBox;
	
	FrameFirstPage m_oFrameFirstPage;
	
	HashMap<String,MedMedia> m_oMediaList;
	
	PosCustomTypeList m_oPosCustomTypeList;
	
	// Web report
	private String m_sWebReportBaseURL;
	
	// *********************************
	// Cashier mode
	FrameCashier m_oFrameCashier;
	FrameOrderingPanel m_oFrameCashierPanel;
	private PosDisplayPanel m_oPosCashierDisplayPanel;
	private int m_iCashierMode; // Cashier mode: 0 - not start; 1 - enter
	// cashier mode; 2 - direct payment; 3 - adjust
	// payment
	private boolean m_bIsCheckLoadedForCashierMode;
	private FrameDirectPaymentPanel m_oFrameDirectPaymentPanel;
	private boolean m_bNeedRollbackForCancelPayment;
	// *********************************
	
	// *********************************
	// Admin mode
	private PosDisplayPanel m_oPosAdminPanel;
	// *********************************
	
	// *********************************
	// Function Panel
	FrameOrderingPanel m_oFrameFloorPlanFunctionPanel;
	// *********************************
	
	private FuncCheck m_oFuncCheck;
	private FuncPayment m_oFuncPayment;
	
	// *********************************
	// Ordering panel
	private PosDisplayPanel m_oPosDisplayPanel;
	// *********************************
	
	// *********************************
	// Add Item by PLU
	private FrameEnterItemPLU m_oFrameEnterItemPLU;
	// *********************************
	
	// *********************************
	// For internal use, stored set menu
	private ArrayList<FuncCheckItem> m_oStoredFuncCheckItemList;
	private FuncCheckItem m_oSetMenuParentFuncCheckItem;
	private int m_iCurrentCourseIndexForSetMenu;
	
	private boolean m_bStockOperationSetMenu;
	// *********************************
	
	// *********************************
	// For internal use, stored the current action
	private boolean m_bFloorPlanWaitUserAction;
	private int m_iFloorPlanCurrentFuncId;
	// *********************************
	
	// *********************************
	// For internal use, stored the processing send check
	private class ProcessingCheckInfo {
		DateTime oDateTime;
		JSONObject oCheckJSONObject;
		int iSendCount;
	}
	
	private HashMap<String, ProcessingCheckInfo> m_oProcessingSendChecks;
	// *********************************
	
	// *********************************
	// For internal use, stored check list panel
	HashMap<Integer, HashMap<Integer, PosCheck>> m_oCheckListPanelRecordList;
	// *********************************
	
	// *********************************
	// For internal use, stored display style list
	HashMap<Integer, ClsPanelButtonStyle> m_oPanelButtonStyleList;
	// *********************************
	
	// *********************************
	// For internal use, stored the corresponding id for option box's option
	private ArrayList<Integer> m_oOptionBoxIdList;
	// *********************************
	
	// *********************************
	// For internal use, list to store soldout items
	private List<Integer> m_oSelectedSoldoutItemList;
	// *********************************
	
	// *********************************
	// For internal use, stored item department for repeat round items
	private ArrayList<Integer> m_oItemDeptIdListForRepeatRoundItem;
	
	// *********************************
	// Flag to determine to toggle panel to "add_item" or "search_by_panel" in
	// stock operation
	private String m_sToggleUsePanelModeOnStockOperation;
	
	// *********************************
	// For internal use, stored last update table status
	ConcurrentSkipListMap<String, ClsTableStatus> m_oTableStatusList;
	// Store the original outlet table list for checking if update is required
	// for current station
	PosOutletTableList m_oOriginalPosOutletTableList;
	// *********************************
	
	// *********************************
	// For internal use, store the start order time for ordering timeout
	// checking
	private DateTime m_dtStartOrderTime;
	private int m_iOrderingTimer = 0;
	// *********************************
	
	// *********************************
	// For internal use, store the start cashier time for cashier timeout
	// checking
	private DateTime m_dtStartCashierTime;
	private int m_iCashierTimer = 0;
	// *********************************
	
	// *********************************
	
	// For multiple select of basket item
	private TreeMap<String, Integer> m_oBasketSelectedItems;
	private String m_sCurrentFunctionKey;
	private int m_iCurrentCommonModifierLookupId;
	private HashMap<Integer, ClsMultiSelectModifierState> m_oClsMultiSelectModifierState;
	private boolean m_bMultiSelectModifier;
	private int m_iBasketSelectMode;
	private int m_iBasketSelectType;
	private int m_iOriginalBasketTop;
	private int m_iOriginalBasketHeight;
	
	// Current quantity
	private BigDecimal m_dQty;
	
	// Flag to determine if daily start is performed or not
	private boolean m_bIsDailyStart = false;
	
	// Flag to determine if station need auto sign out
	private boolean m_bHoldId = false;
	
	// Current course for normal item
	private MenuItemCourse m_oCurrentCourseForNormalItem = null;
	
	// Function list
	private PosFunctionList m_oFunctionList;
	
	// Void Reason List
	private PosVoidReasonList m_oVoidReasonList;
	
	// Paid In/Out Reason List
	private PosPaidIoReasonList m_oPosPaidIoReasonList;
	
	// Item Course List
	private MenuItemCourseList m_oMenuItemCourseList;
	
	// Business Day ID list of a month
	private ArrayList<String> m_oBusinessDayOfAMonthList;
	
	// Business Day ID list of a day
	private ArrayList<String> m_oBusinessDayOfADayList;
	
	// Table Message Reminder
	private PosTableMessageList m_oPosTableMessageList;
	
	// Price level
	private MenuPriceLevelList m_oMenuPriceLevelList;
	
	// Menu item group lookup list
	private MenuItemGroupLookupList m_oMenuItemGroupLookupList;
	
	//Table setting List
	private PosTableSettingList m_oPosTableSettingList;
	
	// Current voucher
	private String m_sCurrentVoucher;
	
	// Operation mode
	// 0 : Fine dining mode
	// 1 : Fast food mode
	// 2 : Stock delivery mode
	// 3 : Self-order kiosk mode
	private AppGlobal.OPERATION_MODE m_eOperationMode = AppGlobal.OPERATION_MODE.fine_dining;
	private AppGlobal.OPERATION_MODE m_ePreviousOperationMode;
	
	// Operation mode for stock delivery control
	// 0 : Create/Edit/Delete invoice
	// 1 : Receive invoice
	private int m_iStockDeliveryOperaionMode;
	
	// *********************************
	// For internal use, flag to determine that use panel to select item mode
	private boolean m_bUsePanelToSelectItemMode;
	private int m_iUsePanelToSelectItemModeCurrentFuncId;
	private FuncCheckItem m_oUsePanelToSelectItemParentItem;
	private int m_iOpenSelectItemId;
	private HashMap<Integer, String> m_oOpenSelectItemName;
	// private boolean m_bOpenSelectItemStart;
	private boolean m_bPanelIsShownBefore;
	private boolean m_bFloorPlanIsShownBefore;
	private boolean m_bPegasusPmsPostingFail;
	private boolean m_bEnlargeOrderingBasket;
	// *********************************
	
	//get all active user name for table status
	private HashMap<Integer, UserUser> m_oAllUserList;
	
	// *********************************
	// For internal use, to store the interfaceconfig that not in outlet config
	public static HashMap<String, InfInterface> oExtraPosInterfaceConfig;
	// *********************************
	
	// *********************************
	// For internal use, store the check that is going to be loaded to fast food
	// mode
	private String m_sTableNoForFastFoodMode;
	private String m_sTableExtensionForFastFoodMode;
	// *********************************
	
	// *********************************
	// For internal use, stored user group id list for galaxy bally card enquiry
	private HashMap<Integer, UserUserGroup> m_oResponeUserGroupIdList;
	// *********************************
	
	// *********************************
	// Smart Card
	private FuncSmartCard m_oFuncSmartCard;
	// *********************************
	
	// *********************************
	// Online Credit Card
	private FuncCreditCardOperation m_oFuncCreditCardOperation;
	// *********************************
	
	// Kitchen Monitor
	private FuncKitchenMonitor m_oFuncKitchenMonitor;
	
	// One Card Solution interface
	private FuncRewriteCard m_oFuncRewriteCard;
	
	// *********************************
	
	// *********************************
	// For display pantry message on the ordering basket
	private PosPantryMessageList m_oPantryMesgList;
	// *********************************
	
	// *********************************
	// For display tax and service charge on the ordering basket
	private PosTaxScTypeList m_oTaxTypeList;
	private PosTaxScTypeList m_oServiceChargeTypeList;
	// *********************************
	
	// *********************************
	// For internal use, flag to determine that use cashier panel to select
	// payment method
	private boolean m_bUseCashierPanelToSelectPaymentMethod;
	// *********************************
	
	// *********************************
	// For internal use, keep the remain auto function during open check
	private Queue<ArrayList<JSONObject>> m_oRemainAutoFunctions;
	// *********************************
	
	// *********************************
	// For the use of split check auto function. Rise if performing auto function
	private boolean m_bProcessingSplitCheckAutoFunction = false;
	// *********************************
	
	// *********************************
	// For display membership detail in ordering basket
	private ArrayList<JSONObject> m_oOrderingBasketExtraInfoKeys;
	// *********************************
	
	// Barcode ordering
	private FuncBarcode m_oFuncBarcode;
	
	// The login page is created by server, not in client
	private boolean m_bLoginInServer;
	
	// Flag to determine is the process is under login page
	private boolean m_bUnderLoginPage;
	
	// Flag to prevent multiple open check event
	private String m_sPreventMulitpleOpenCheckFlag = "";

	
	// Flag to indicate if the interface payment failed control by config by location
	private boolean m_bIsInterfacePaymentFailedBySetup = false;
	private boolean m_bIsInterfaceDirectPaymentFailedBySetup = false;
	
	private int m_iTogglePrintReceiptFcnId;
	private String m_sCurrentPrintMode;
	private String m_sCurrentPrintModeButtonName;
	private ArrayList<FrameGeneralLookupButton> m_oPrintModeButtonList;
	
	public static String PRINT_MODE_PRINT_RECEIPT = "pr";
	public static String PRINT_MODE_NOT_PRINT_RECEIPT = "npr";
	
	public static String FUNC_RESULT_SUCCESS = "s";
	public static String FUNC_RESULT_CANCEL_BY_USER = "c";
	public static String FUNC_RESULT_FAIL = "f";
	public static String FUNC_RESULT_NO_SUCH_RECORD = "r";
	
	//Ordering Basket Mode Variable
	private String m_sCurrentOrderingBasketMode;
	private String m_sCurrentOrderingBasketModeButtonName;
	private ArrayList<FrameGeneralLookupButton> m_oOrderingBasketModeButtonList;
	private int m_iToggleOrderingBasketFcnId;
	
	public static String FUNCTION_CHECK_ASK_AUTHORITY = "a";
	public static String FUNCTION_CHECK_ASK_APPROVAL = "p";
	
	public static String TABLE_MESSAGE_PROMPT_NONE = "";
	public static String TABLE_MESSAGE_PROMPT_OPEN_TABLE = "o";
	public static String TABLE_MESSAGE_PROMPT_PRINT_CHECK = "p";
	public static String TABLE_MESSAGE_PROMPT_ALL = "x";
	
	public static String NEW_CHECK_AUTO_FUNCTIONS_QUIT = "q";
	public static String NEW_CHECK_AUTO_FUNCTIONS_CONTINUE = "c";
	public static String NEW_PAYMENT_AUTO_FUNCTIONS_BACK = "b";
	
	// Grouping mode of Toggle ordering basket
	public static String TOGGLE_ORDERING_BASKET_GROUPING_OLD_ITEMS_ONLY = "o";
	public static String TOGGLE_ORDERING_BASKET_GROUPING_OLD_AND_NEW_ITEMS_SEPARATELY = "s";
	public static String TOGGLE_ORDERING_BASKET_GROUPING_OLD_AND_NEW_ITEMS = "a";
	
	public FormMain(Controller oParentController) {
		super(oParentController);
		
		// Add restart event listener
		try {
			OmWsClientGlobal.g_oWsClient.get().addListener(this);
			OmWsClientGlobal.g_oWsClientForHq.get().addListener(this);
		} catch (Exception e) {
			AppGlobal.stack2Log(e);
		}
	}
	
	private void showDialogBox(String sTitle, String sMessage) {
		if (sMessage.isEmpty())
			return;
		
		FormDialogBox oFormDialogBox = new FormDialogBox(AppGlobal.g_oLang.get()._("ok"), this);
		oFormDialogBox.setTitle(sTitle);
		oFormDialogBox.setMessage(sMessage);
		oFormDialogBox.show();
	}
	
	private void showErrorDialogBox(String sErrMsg) {
		showDialogBox(AppGlobal.g_oLang.get()._("error"), sErrMsg);
	}
	
	private void showWarningDialogBox(String sWarningMsg) {
		showDialogBox(AppGlobal.g_oLang.get()._("warning"), sWarningMsg);
	}
	
	private void showAttentionDialogBox(String sAttentionMsg) {
		showDialogBox(AppGlobal.g_oLang.get()._("attention"), sAttentionMsg);
	}
	
	// Load config.ini setup
	private void loadConfigIniSetup() {
		// Load the internal ID and password from config.ini
		// Read setup from the setup file
		IniReader iniReader = null;
		try {
			iniReader = new IniReader("cfg" + java.io.File.separator + "config.ini");
			String sTmp = iniReader.getValue("setup", "log_level");
			if (sTmp != null) {
				AppGlobal.g_iLogLevel = Integer.parseInt(sTmp);
			}
			
			sTmp = iniReader.getValue("setup", "show_performance_log_if_exceed_millis");
			if (sTmp != null) {
				AppGlobal.g_lExceedMillisShowPerformanceLog = Integer.parseInt(sTmp);
			}
			
		} catch (IOException e) {
			// Fail to read config.ini
			AppGlobal.stack2Log(e);
		}
	}
	
	// Login process
	private boolean login(String sLoginId, String sLoginPassword, String sLoginCardNo, String sLoginAccessToken,
	                      FuncUser oLoginedFuncUser) {
		FuncUser oFuncUser = null;
		if (oLoginedFuncUser == null) {
			oFuncUser = processLogin(sLoginId, sLoginPassword, sLoginCardNo, sLoginAccessToken);
			if (oFuncUser == null)
				// Fail to login
				return false;
		} else {
			// Login in already
			oFuncUser = oLoginedFuncUser;
		}
		// get user defined lang index
		if (oFuncUser == null || oFuncUser.getUser().getLang() == 0)
			AppGlobal.g_oCurrentLangIndex.set(new Integer(1));
		else
			AppGlobal.g_oCurrentLangIndex.set(new Integer(oFuncUser.getUser().getLang()));
		
		
		// Assign the user to global
		AppGlobal.g_oFuncUser.set(oFuncUser);
		
		return true;
	}
	
	private void promptFailLoginErrorDialogBox() {
		showErrorDialogBox(AppGlobal.g_oLang.get()._("fail_to_login"));
	}
	
	private FuncUser processLogin(String sLoginId, String sLoginPassword, String sLoginCardNo,
	                              String sLoginAccessToken) {
		FuncUser oFuncUser = new FuncUser();
		
		if (sLoginId.isEmpty() && sLoginCardNo.isEmpty() && sLoginAccessToken.isEmpty()) {
			promptFailLoginErrorDialogBox();
			return null;
		}
		
		if (sLoginId.length() == 0 || !sLoginAccessToken.isEmpty()) {
			String sTmpLoginId = sLoginId;
			
			if (sLoginCardNo.length() > 0) {
				if (sLoginCardNo.trim().isEmpty()) {
					promptFailLoginErrorDialogBox();
					// Logout session
					oFuncUser.logout();
					return null;
				}
				// Login by card no.
				// Remove \r and \n in the return card no.
				sLoginCardNo = sLoginCardNo.replace("\r", "").replace("\n", "");
				
				// Switch user by card
				if (oFuncUser.switchUserByEmployeeCard(sLoginCardNo) == false) {
					promptFailLoginErrorDialogBox();
					
					// Logout session
					oFuncUser.logout();
					
					return null;
				}
			}
			
			// Login by user login and access token
			if (!sLoginAccessToken.isEmpty()) {
				// Login by internal ID first
				oFuncUser = userLogin(oFuncUser.getServiceAccountLoginId(), oFuncUser.getServiceAccountPassword(), true);
				if (oFuncUser == null)
					return null;
				
				if (!oFuncUser.switchUserByAccessToken(sTmpLoginId, sLoginAccessToken)) {
					promptFailLoginErrorDialogBox();
					
					// Logout session
					oFuncUser.logout();
					
					return null;
				}
			}
		} else {
			oFuncUser = userLogin(sLoginId, sLoginPassword, false);
			if (oFuncUser == null)
				return null;
		}
		
		return oFuncUser;
	}
	
	private FuncUser userLogin(String sLoginId, String sLoginPassword, boolean bAllowServiceRole) {
		FuncUser oFuncUser = new FuncUser();
		String sErrorMessage = oFuncUser.login(sLoginId, sLoginPassword, bAllowServiceRole);
		if (!sErrorMessage.isEmpty()) {
			if (oFuncUser.getErrorExtraInfos() != null && !oFuncUser.getErrorExtraInfos().isEmpty()) {
				if (oFuncUser.getErrorExtraInfos().containsKey("lockTime")) {
					String sLockTime = oFuncUser.getErrorExtraInfos().get("lockTime");
					if (sLockTime != null && !sLockTime.isEmpty()) {
						int iMin = 0, iSecond = 0;
						
						// calculate the lock time
						iMin = Integer.parseInt(sLockTime) / 60;
						iSecond = Integer.parseInt(sLockTime) % 60;
						sLockTime = iMin + ":" + StringLib.IntToStringWithLeadingZero(iSecond, 2);
						
						this.showErrorDialogBox(AppGlobal.g_oLang.get()._("account_has_been_locked_for") + " "
								+ sLockTime + " " + AppGlobal.g_oLang.get()._("minutes")
								+ System.lineSeparator() + AppGlobal.g_oLang.get()._("please_try_later"));
						return null;
					}
				}
			}
			
			this.showErrorDialogBox(AppGlobal.getLoginErrorMessage(sErrorMessage));
			return null;
		}
		
		return oFuncUser;
	}
	
	public boolean init(String sLoginId, String sLoginPassword, String sLoginCardNo, String sDisplayMode, String sAccessToken, int iSwitchOutletId){
		int iOrderingBasketHeight = 0;
		
		try {
			// Add global element for swipe card / barcode / etc
			ClsActiveClient oActiveClient = AppGlobal.getActiveClient();
			if (oActiveClient != null) {
				oActiveClient.assignGlobalElement();
			}
			
			AppGlobal.g_sDisplayMode.set(new String(sDisplayMode));
			
			GeneralStyleMap m_oStyleMap = new GeneralStyleMap();
			GeneralStyle oStyleList = new GeneralStyle();
			JSONArray responseJSONArray = oStyleList.getAllStyle();
			m_oStyleMap.getAllStyleFromSources(responseJSONArray);
			AppGlobal.g_oStyleMap = m_oStyleMap;
			
			// Load config.ini setup
			loadConfigIniSetup();
			
			// Create processing box
			m_oFormProcessBox = new FormProcessBox(this);
			m_oFormProcessBox.setTitle(AppGlobal.g_oLang.get()._("loading") + "...");
			m_oFormProcessBox.setMessage(AppGlobal.g_oLang.get()._("login"));
			m_oFormProcessBox.showWithoutRemoveUI();
			
			// Login process
			m_bLoginInServer = false;
			if (sLoginId.isEmpty() && sLoginPassword.isEmpty() && sLoginCardNo.isEmpty())
				// New client connection, do login in server side
				m_bLoginInServer = true;
			
			if (!login(sLoginId, sLoginPassword, sLoginCardNo, sAccessToken, null)) {
				// Close processing box
				m_oFormProcessBox.closeShowWithoutRemoveUI();
				
				return false;
			}
			
			// Close processing box
			m_oFormProcessBox.closeShowWithoutRemoveUI();
			
			//	AppGlobal.checkModuleExisting();
			AppGlobal.checkModulesExistingAndGetSystemConfig();
			
			// Load Setup
			if (!loadStationConfigSetup()) {
				// Logout session
				AppGlobal.g_oFuncUser.get().logout();
				
				return false;
			}
			int iOutletId = AppGlobal.g_oFuncStation.get().getOutletId();
			if (iSwitchOutletId > 0)
				iOutletId = iSwitchOutletId;
			if (!loadOutletConfigSetup(iOutletId, true)) {
				// Logout session
				AppGlobal.g_oFuncUser.get().logout();
				
				return false;
			}
			
			// Get Menu Price Level List
			loadMenuPriceLevelList();
			
			// Get Pos Station List
			loadPosStationList();
			
			// Get Signage Schedule
			loadSignageSchedule(AppGlobal.g_oFuncOutlet.get().getShopId());
			
			AppGlobal.g_oFuncStation.get().loadAllUserList();
			m_oAllUserList = AppGlobal.g_oFuncStation.get().getUserUserList().getUserList();
			
			AppGlobal.g_oFuncMenu.get().loadMenuItemOrderPermissionRules();
			m_oSelectedSoldoutItemList = new ArrayList<Integer>();
			m_oTableStatusList = new ConcurrentSkipListMap<String, ClsTableStatus>();
			
			// Create processing box
			m_oFormProcessBox = new FormProcessBox(this);
			
			m_oFormProcessBox.setTitle(AppGlobal.g_oLang.get()._("loading") + "...");
			m_oFormProcessBox.setMessage(AppGlobal.g_oLang.get()._("creating_ui"));
			m_oFormProcessBox.showWithoutRemoveUI();
			
			m_oTemplateBuilder = new TemplateBuilder();
			
			// Load form from template file
			m_oTemplateBuilder.loadTemplate("frmMain.xml");
			
			// Initial the background frame
			VirtualUIFrame oBackgroundFrame = new VirtualUIFrame();
			m_oTemplateBuilder.buildFrame(oBackgroundFrame, "fraBackground");
			this.attachChild(oBackgroundFrame);
			
			// Initial the frame to cover station info bar frame
			m_oFrameStationInfoBarCover = new VirtualUIFrame();
			m_oTemplateBuilder.buildFrame(m_oFrameStationInfoBarCover, "fraStationInfoBarCoverFrame");
			m_oFrameStationInfoBarCover.setVisible(false);
			this.attachChild(m_oFrameStationInfoBarCover);
			
			// Check Info Bar
			boolean bKioskStationShowAdminButtonOnly = (AppGlobal.g_oFuncStation.get().getStationDevice().isSelfOrderKiosk() && AppGlobal.g_oFuncStation.get().isDisplayAdminModeOnly());
			m_oFrameStationInfoBar = new FrameStationInfoBar(bKioskStationShowAdminButtonOnly);
			m_oTemplateBuilder.buildFrame(m_oFrameStationInfoBar, "fraStationInfoBar");
			m_oFrameStationInfoBar.setUserName(AppGlobal.g_oFuncUser.get().getUserName());
			m_oFrameStationInfoBar.setOutletName(AppGlobal.g_oFuncOutlet.get().getOutletName());
			m_oFrameStationInfoBar.setBusinessDay(AppGlobal.g_oFuncOutlet.get().getFormatBusinessDay());
			m_oFrameStationInfoBar.setVisible(true);
			m_oFrameStationInfoBar.setEnabled(false);
			m_oFrameStationInfoBar.addListener(this);
			if (AppGlobal.g_oFuncStation.get().getDefaultTableNoForMenuMode() > 0)
				m_oFrameStationInfoBar.setSearchTableVisible(false);
			this.attachChild(m_oFrameStationInfoBar);
			
			AppGlobal.getActiveClient().registerGlobalTimerRunnable(new ClsGlobalUIRunnable() {
				@Override
				public void run() {
					//Set the last client socket ID
					AppGlobal.g_oTerm.get().setClientSocketId(this.getClientSockId());
					//Sunny
					//AppGlobal.g_oFuncSmartStation.setFailoverActionType();
					// Check if there is situation reported from role manager
					if (AppGlobal.g_oFuncSmartStation.isSmartStationModel() && !AppGlobal.g_oFuncSmartStation.isFailoverActionNoAction()) {
						// If there is situation, check if the handle form is already shown or not
						if (AppGlobal.g_oTerm.get().getLastShowForm().getClass() != FormSmartStationControl.class) {
							// If handle form is not shown, show the handle form
							FormSmartStationControl oFormSmartStationControl;
							// Require user to select failover type
							oFormSmartStationControl = new FormSmartStationControl(AppGlobal.g_oTerm.get().getLastShowForm());
							oFormSmartStationControl.show();
						}
					}
					
					// Send the UI packet to client and the thread is finished
					finishUI(true);
				}
			});
			
			// Table floor plan
			// Load all floor plans defined in current business date periods
			AppGlobal.addBackgroundScheduleTask(AppBackgroundScheduleJob.TYPE_UPDATE_TABLE_STATUS,
					AppGlobal.g_oFuncOutlet.get().getOutletId(), 200);
			m_oPeriodFrameTableFloorPlanList = new LinkedHashMap<Integer, FrameTableFloorPlan>();
			
			loadFloorMap();
			// Show the floor plan according to period
			if (!showFloorPlan(true, null)) {
				// Cannot load the floor plan
				// Logout session
				AppGlobal.g_oFuncUser.get().logout();
				
				return false;
			}
			
			// Checking whether is Table Mode as default
			int iOpenTableScreenMode = AppGlobal.g_oFuncStation.get().getOpenTableScreenModeConfig();
			if (iOpenTableScreenMode == FuncStation.OPEN_TABLE_SCREEN_MODE_TABLE_MODE)
				m_oFrameTableFloorPlan.showTableMode(true);
			
			// Check Info Frame
			m_oFrameStationInfo = new FrameStationInfo();
			m_oTemplateBuilder.buildFrame(m_oFrameStationInfo, "fraStationInfo");
			m_oFrameStationInfo.setTop(m_oFrameStationInfoBar.getTop() + m_oFrameStationInfoBar.getHeight());
			m_oFrameStationInfo.setVisible(false);
			this.attachChild(m_oFrameStationInfo);
			
			// Ordering Panel
			m_oFrameOrderingPanel = new FrameOrderingPanel();
			if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode))
				m_oTemplateBuilder.buildFrame(m_oFrameOrderingPanel, "fraOrderingPanelForKiosk");
			else
				m_oTemplateBuilder.buildFrame(m_oFrameOrderingPanel, "fraOrderingPanel");
			
			m_oFrameFuncPanel2 = new FrameOrderingPanel();
			m_oTemplateBuilder.buildFrame(m_oFrameFuncPanel2, "fraFuncPanel");
			
			//Retrieve display panel zone - ordering basket setup
			PosDisplayPanelZone oOrderingBasketDisplayPanelZone =  this.getOrderingBasketDisplayPanelZone();
			
			// Init Basket Extend Bar
			m_oFrameBasketExtendBar = new FrameBasketExtendBar(oOrderingBasketDisplayPanelZone);
			m_oTemplateBuilder.buildFrame(m_oFrameBasketExtendBar, "fraBasketExtendBar");
			
			// Init Ordering Basket
			m_oFrameOrderingBasket = new FrameOrderingBasket();
			m_oTemplateBuilder.buildFrame(m_oFrameOrderingBasket, "fraOrderingBasket");
			
			// Menu lookup
			m_oFrameOrderingMenuLookup = new FrameOrderingMenuLookup();
			m_oTemplateBuilder.buildFrame(m_oFrameOrderingMenuLookup, "fraOrderingMenuLookup");
			
			int iWidthPercent = 0;
			int iHeaderHeightPercent = 0;
			List<PosDisplayPanelZone> zones = m_oPosDisplayPanel.filterDisplayPanelZoneByZone(PosDisplayPanelZone.KEY_ORDERING);
			if (AppGlobal.g_oFuncStation.get().getStationDevice().isSelfOrderKiosk() && AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)) {
				if (!zones.isEmpty()){
					iWidthPercent = zones.get(0).getWidthPercent();
					iHeaderHeightPercent = zones.get(0).getHeaderHeightPercent();
				}
			}
			
			if (iWidthPercent > 0) {
				int iOriginalScreenWidth = m_oFrameOrderingPanel.getWidth() + m_oFrameFuncPanel2.getWidth();
				int iOriginalPadding = m_oFrameFuncPanel2.getLeft() - m_oFrameOrderingPanel.getLeft() - m_oFrameOrderingPanel.getWidth();
				
				m_oFrameOrderingPanel.setWidth((int)(iOriginalScreenWidth * iWidthPercent / 100));
				m_oFrameOrderingBasket.setWidth(iOriginalScreenWidth - m_oFrameOrderingPanel.getWidth());
				m_oFrameOrderingBasket.setLeft(m_oFrameOrderingPanel.getLeft() + m_oFrameOrderingPanel.getWidth() + iOriginalPadding);
				
				m_oFrameFuncPanel2.setWidth(iOriginalScreenWidth - m_oFrameOrderingPanel.getWidth());
				m_oFrameFuncPanel2.setLeft(m_oFrameOrderingPanel.getLeft() + m_oFrameOrderingPanel.getWidth() + iOriginalPadding);
				m_oFrameBasketExtendBar.setWidth(iOriginalScreenWidth - m_oFrameOrderingPanel.getWidth());
				m_oFrameBasketExtendBar.setLeft(m_oFrameOrderingPanel.getLeft() + m_oFrameOrderingPanel.getWidth() + iOriginalPadding);
				m_oFrameBasketExtendBar.setCheckInfoWidth();
				m_oFrameOrderingMenuLookup.setWidth(m_oFrameOrderingPanel.getWidth());
			}
			
			//Set the ordering panel header height in percentage
			if (iHeaderHeightPercent > 0)
				m_oFrameOrderingPanel.setTagHeightByPercentage(iHeaderHeightPercent);
			
			loadOrderingPanel();
			m_oFrameOrderingPanel.addListener(this);
			m_oFrameOrderingPanel.setVisible(false); // Hidden this frame during
			// first initial
			this.attachChild(m_oFrameOrderingPanel);
			
			// Start update menu item timer
			m_oFrameOrderingPanel.setUpdateMenuItemTimer(true);
			
			// Add a background job to check soldout status
			AppGlobal.addBackgroundScheduleTask(AppBackgroundScheduleJob.TYPE_UPDATE_SOLDOUT_STATUS,
					AppGlobal.g_oFuncOutlet.get().getOutletId(), 1000);
			
			// Add a background job to check item stock quantity status
			AppGlobal.addBackgroundScheduleTask(AppBackgroundScheduleJob.TYPE_UPDATE_ITEM_STOCK_QTY_STATUS,
					AppGlobal.g_oFuncOutlet.get().getOutletId(), 1000);
			
			// Add a background job to check menu item update
			AppGlobal.addBackgroundScheduleTask(AppBackgroundScheduleJob.TYPE_UPDATE_MENU_ITEM,
					AppGlobal.g_oFuncMenu.get().hashCode(), 10000);
			
			// check whether is enlarge ordering basket
			m_bEnlargeOrderingBasket = false;
			if (AppGlobal.g_oFuncStation.get().isEnlargeOrderingBasket())
				m_bEnlargeOrderingBasket = true;
			
			// Function Panel
			int iHeightPercent = 0;
			List<PosDisplayPanelZone> zonesOrderingFunc = m_oPosDisplayPanel.filterDisplayPanelZoneByZone(PosDisplayPanelZone.KEY_ORDERING_FUNCTION);
			if (AppGlobal.g_oFuncStation.get().getStation().isSelfOrderKioskOrderingMode()
					&& AppGlobal.g_oFuncStation.get().getStationDevice().isSelfOrderKiosk()) {
				if (!zonesOrderingFunc.isEmpty())
					iHeightPercent = zonesOrderingFunc.get(0).getHeightPercent();
			}
			
			int iOriginalScreenHeight = m_oFrameFuncPanel2.getHeight() + m_oFrameOrderingBasket.getHeight() + m_oFrameBasketExtendBar.getHeight();
			if (iHeightPercent > 0) {
				m_oFrameFuncPanel2.setHeight((int) (iOriginalScreenHeight * iHeightPercent / 100));
				m_oFrameOrderingBasket.setHeight(iOriginalScreenHeight - m_oFrameFuncPanel2.getHeight() - m_oFrameBasketExtendBar.getHeight());
				m_oFrameBasketExtendBar.setTop(m_oFrameOrderingBasket.getTop() + m_oFrameOrderingBasket.getHeight());
				m_oFrameFuncPanel2.setTop(m_oFrameBasketExtendBar.getTop() + m_oFrameBasketExtendBar.getHeight());
			}
			
			if (loadFunctionPanel(2, PosDisplayPanelZone.KEY_ORDERING_FUNCTION)) {
				m_oFrameFuncPanel2.addListener(this);
				m_oFrameFuncPanel2.setVisible(false);
				this.attachChild(m_oFrameFuncPanel2);
			}
			
			// Check Detail
			m_oFrameCheckDetail = new FrameCheckDetail();
			m_oTemplateBuilder.buildFrame(m_oFrameCheckDetail, "fraCheckDetail");
			m_oFrameCheckDetail.createFunctionButtons(FrameCheckDetail.FOR_FORM_MAIN);
			
			// Add listener;
			m_oFrameCheckDetail.addListener(this);
			m_oFrameCheckDetail.setVisible(false); // Hidden this frame during
			// first initial
			this.attachChild(m_oFrameCheckDetail);
			
			// Check Detail Underline
			m_oFrameCheckDetailUnderline = new VirtualUIFrame();
			m_oTemplateBuilder.buildFrame(m_oFrameCheckDetailUnderline, "fraCheckDetailUnderline");
			m_oFrameCheckDetail.attachChild(m_oFrameCheckDetailUnderline);
			// Basket Extend Bar
			m_oFrameBasketExtendBar.setBasketExtendBarImage(AppGlobal.g_oTerm.get().getClientImageURLPath()
					+ "/buttons/ordering_extend_basket_down_button.png");
			m_oFrameBasketExtendBar.addListener(this);
			m_oFrameBasketExtendBar.setVisible(false);
			this.attachChild(m_oFrameBasketExtendBar);
			
			if (m_bEnlargeOrderingBasket) {
				String sTempPanelType = FrameSeatPanel.TYPE_SEAT_PANEL;
				FrameSeatPanel oTempSeatPanel = new FrameSeatPanel(sTempPanelType);
				m_oTemplateBuilder.buildFrame(oTempSeatPanel, "fraSeatPanel");
				
				if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk))
					iOrderingBasketHeight = (m_oFrameStationInfoBar.getHeight() + m_oFrameOrderingPanel.getHeight())
							- m_oFrameCheckDetail.getHeight() - m_oFrameBasketExtendBar.getHeight();
				else
					iOrderingBasketHeight = (m_oFrameStationInfoBar.getHeight() + m_oFrameOrderingPanel.getHeight()
							+ oTempSeatPanel.getHeight()) - m_oFrameCheckDetail.getHeight()
							- m_oFrameBasketExtendBar.getHeight();
				m_oFrameBasketExtendBar.setTop(m_oFrameCheckDetail.getHeight() + iOrderingBasketHeight);
			}
			
			// Basket
			if (m_bEnlargeOrderingBasket)
				m_oFrameOrderingBasket.setHeight(iOrderingBasketHeight);
			m_oFrameOrderingBasket.init(oOrderingBasketDisplayPanelZone, FrameOrderingBasket.ORDERING_BASKET_MODE_SHOW_NORMAL);
			if (!m_oFrameOrderingBasket.isDisplayOrderingBasketExtension()) {
				m_oFrameOrderingBasket.setHeight(m_oFrameOrderingBasket.getHeight() + m_oFrameBasketExtendBar.getHeight() - m_oFrameBasketExtendBar.getRevenueHeight());
				m_oFrameOrderingBasket.extendBasket(m_oFrameBasketExtendBar.getHeight() - m_oFrameBasketExtendBar.getRevenueHeight());
			}
			
			// Add listener;
			m_oFrameOrderingBasket.addListener(this);
			m_oFrameOrderingBasket.setVisible(false); // Hidden this frame
			// during first initial
			
			if (AppGlobal.OPERATION_MODE.stock_delivery.equals(m_eOperationMode) == true) {
				if(!m_oFrameOrderingBasket.isDisplaySeatNumberSection())
					m_oFrameOrderingBasket.addSection(0, AppGlobal.g_oLang.get()._("stock_delivery_order", ""), false);
				else
					m_oFrameOrderingBasket.addSection(0, AppGlobal.g_oLang.get()._("stock_delivery_order", ""), true);
				m_oFrameOrderingBasket.setSelectedSection(0);
			} else {
				if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food)
						|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk)
						|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab)) {
					// Not show "share" section title for fast food mode and
					// self-order kiosk mode
					m_oFrameOrderingBasket.addSection(0, AppGlobal.g_oLang.get()._("shared", ""), false);
				} else {
					if(!m_oFrameOrderingBasket.isDisplaySeatNumberSection())
						m_oFrameOrderingBasket.addSection(0, AppGlobal.g_oLang.get()._("shared", ""), false);
					else
						m_oFrameOrderingBasket.addSection(0, AppGlobal.g_oLang.get()._("shared", ""), true);
				}
				for (int i = 1; i <= AppGlobal.MAX_SEATS; i++) {
					// add new section and not visible
					m_oFrameOrderingBasket.addSection(i, AppGlobal.g_oLang.get()._("seat", " ", i), false);
				}
				m_oFrameOrderingBasket.setSelectedSection(0);
			}
			
			// Init consolidate item ordering basket
			this.initializeConsolidateItemsOrderingBasket(iWidthPercent, iHeightPercent, iOrderingBasketHeight);
			this.attachChild(m_oFrameOrderingBasket);
			
			// Seat Panel
			String sPanelType = FrameSeatPanel.TYPE_SEAT_PANEL;
			String[] sSeatPanelTitle = AppGlobal.g_oLang.get()._("seat_no", "");
			boolean bOrderingPanelInputNumpad = AppGlobal.g_oFuncStation.get().getOrderingPanelInputNumpad();
			if (bOrderingPanelInputNumpad) {
				sPanelType = FrameSeatPanel.TYPE_NUMPAD;
				sSeatPanelTitle = AppGlobal.g_oLang.get()._("quantity", "");
			}
			m_oFrameSeatPanel = new FrameSeatPanel(sPanelType);
			m_oTemplateBuilder.buildFrame(m_oFrameSeatPanel, "fraSeatPanel");
			m_oFrameSeatPanel.setHeaderValue(sSeatPanelTitle);
			m_oFrameSeatPanel.setCourseDescription(AppGlobal.g_oLang.get()._("undefined_course", ""));
			m_oFrameSeatPanel.addListener(this);
			m_oFrameSeatPanel.setVisible(false);
			// Add Seat to Seat Panel
			m_oFrameSeatPanel.addNumberOfSeat(AppGlobal.MAX_SEATS);
			m_oFrameSeatPanel.resetSelectedSeat();
			this.attachChild(m_oFrameSeatPanel);
			
			// Cashier screen
			loadCashierPanel(PosDisplayPanelZone.KEY_CASHIER);
			
			// Admin screen
			loadAdminPanelConfig();
			initAdminPanel();
			
			// Floor Plan Function Panel
			loadFloorPlanFunctionPanel();
			m_oMediaList = new HashMap<String, MedMedia>();
			
			// Print Status variable init
			this.setTogglePrintReceiptButtonStatus(PRINT_MODE_PRINT_RECEIPT);
			m_oPrintModeButtonList = new ArrayList<>();
			m_iTogglePrintReceiptFcnId = m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.toggle_print_receipt.name());
			
			String sReceiptLocationConfig = AppGlobal.g_oFuncStation.get().getNotPrintReceipt(m_eOperationMode);
			if (!m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk) && sReceiptLocationConfig.equals("true"))
				this.setTogglePrintReceiptButtonStatus(PRINT_MODE_NOT_PRINT_RECEIPT);
			
			// Update Button Name in each panel
			this.updateTogglePrintReceiptButtonList(m_iTogglePrintReceiptFcnId);
			this.updateTogglePrintReceiptButtonName(m_sCurrentPrintModeButtonName);
			
			// Force update the label name in language list
			for (FrameGeneralLookupButton oFrameGeneralLookupButton : m_oPrintModeButtonList)
				oFrameGeneralLookupButton.getCurrentButton().setButtonDescByLangIndex(AppGlobal.g_oCurrentLangIndex.get()-1, m_sCurrentPrintModeButtonName);
			
			// Ordering Basket variables init
			this.setToggleOrderingBasketModeButtonStatus(FrameOrderingBasket.ORDERING_BASKET_MODE_SHOW_NORMAL);
			m_oOrderingBasketModeButtonList = new ArrayList<>();
			m_iToggleOrderingBasketFcnId = m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.toggle_ordering_basket_with_consolidate_items.name());
			
			// Update Button Name in each panel
			this.updateToggleOrderingBasketButtonList(m_iToggleOrderingBasketFcnId);
			this.updateToggleOrderingBasketButtonName(m_sCurrentOrderingBasketModeButtonName);
			
			// Force update the label name in language list
			for (FrameGeneralLookupButton oFrameGeneralLookupButton : m_oOrderingBasketModeButtonList)
				oFrameGeneralLookupButton.getCurrentButton().setButtonDescByLangIndex(AppGlobal.g_oCurrentLangIndex.get()-1, m_sCurrentOrderingBasketModeButtonName);
			
			// Initial the frame to cover other frame
			m_oFrameCover = new VirtualUIFrame();
			m_oTemplateBuilder.buildFrame(m_oFrameCover, "fraCoverFrame");
			m_oFrameCover.setVisible(false);
			this.attachChild(m_oFrameCover);
			
			// Check review frame
			m_oFrameCheckReview = new FrameCheckReview();
			m_oTemplateBuilder.buildFrame(m_oFrameCheckReview, "fraCheckReview");
			m_oFrameCheckReview.addListener(this);
			m_oFrameCheckReview.setVisible(false);
			this.attachChild(m_oFrameCheckReview);
			
			// Menu lookup
			if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)) {
				// reset the top position for self kiosk mode
				int iNewTop = m_oFrameOrderingMenuLookup.getTop() + m_oFrameSeatPanel.getHeight();
				m_oFrameOrderingMenuLookup.setTop(iNewTop);
			}
			m_oFrameOrderingMenuLookup.addListener(this);
			m_oFrameOrderingMenuLookup.createFunctionButtons();
			m_oFrameOrderingMenuLookup.setVisible(false);
			
			String sMenuLookupNumber = AppGlobal.g_oFuncStation.get().getMenuLookupButtonNumber();
			if (sMenuLookupNumber != null) {
				try {
					JSONObject oMenuLookupJSONObject = new JSONObject(sMenuLookupNumber);
					if (oMenuLookupJSONObject != null) {
						JSONObject oJSONObject;
						if (AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name()))
							oJSONObject = oMenuLookupJSONObject.optJSONObject("mobile");
						else
							oJSONObject = oMenuLookupJSONObject.optJSONObject("tablet");
						if (oJSONObject != null) {
							int iRows = oJSONObject.optInt("row", FrameOrderingMenuLookup.ROW_NUM);
							int iCols = oJSONObject.optInt("column", FrameOrderingMenuLookup.COLUMN_NUM);
							int iRowsWithImage = oJSONObject.optInt("row_with_image",
									FrameOrderingMenuLookup.ROW_NUM_WITH_IMAGE);
							int iColsWithImage = oJSONObject.optInt("column_with_image",
									FrameOrderingMenuLookup.COLUMN_NUM_WITH_IMAGE);
							int iButtonDescFontSize = oJSONObject.optInt("font_size",
									FrameLookupButton.BUTTON_DESC_FONT_SIZE);
							m_oFrameOrderingMenuLookup.setConfig(iRows, iCols, iRowsWithImage, iColsWithImage,
									iButtonDescFontSize);
						}
					}
				} catch (JSONException e) {
					e.printStackTrace();
				}
			}
			this.attachChild(m_oFrameOrderingMenuLookup);
			
			// Basket select panel
			m_oFrameBasketSelectPanel = new FrameBasketSelectPanel();
			m_oTemplateBuilder.buildFrame(m_oFrameBasketSelectPanel, "fraBasketSelectPanel");
			// Add listener;
			m_oFrameBasketSelectPanel.addListener(this);
			m_oFrameBasketSelectPanel.setVisible(false); // Hidden this frame during first initial
			this.attachChild(m_oFrameBasketSelectPanel);
			
			// Panel item select panel
			m_oFramePanelItemSelectPanel = new FramePanelItemSelectPanel(FramePanelItemSelectPanel.DISPLAY_TYPE_ITEM);
			m_oTemplateBuilder.buildFrame(m_oFramePanelItemSelectPanel, "fraPanelItemSelectPanel");
			// Add listener;
			m_oFramePanelItemSelectPanel.addListener(this);
			m_oFramePanelItemSelectPanel.setVisible(false); // Hidden this frame during first initial
			this.attachChild(m_oFramePanelItemSelectPanel);
			
			// Panel payment method select panel
			m_oFramePanelPaymentMethodSelectPanel = new FramePanelItemSelectPanel(
					FramePanelItemSelectPanel.DISPLAY_TYPE_PAYMENT_METHOD);
			m_oTemplateBuilder.buildFrame(m_oFramePanelPaymentMethodSelectPanel, "fraPanelItemSelectPanel");
			// Add listener;
			m_oFramePanelPaymentMethodSelectPanel.addListener(this);
			m_oFramePanelPaymentMethodSelectPanel.setVisible(false); // Hidden this frame during first initial
			this.attachChild(m_oFramePanelPaymentMethodSelectPanel);
			
			// Option box
			m_oFrameOptionBox = new FrameOptionBox();
			m_oTemplateBuilder.buildFrame(m_oFrameOptionBox, "fraOptionBox");
			m_oFrameOptionBox.addButton(AppGlobal.g_oLang.get()._("cancel"), "KEY_CANCEL");
			m_oFrameOptionBox.addListener(this);
			m_oFrameOptionBox.setVisible(false);
			this.attachChild(m_oFrameOptionBox);
			m_oOptionBoxIdList = new ArrayList<Integer>();
			
			// Show once processing box
			m_oFrameShowOnceProcessBox = new FrameShowOnceProcessBox();
			m_oTemplateBuilder.buildFrame(m_oFrameShowOnceProcessBox, "fraShowOnceProcessBox");
			m_oFrameShowOnceProcessBox.init();
			m_oFrameShowOnceProcessBox.setVisible(false);
			this.attachChild(m_oFrameShowOnceProcessBox);
			
			m_oPosCustomTypeList = new PosCustomTypeList();
			m_oPosCustomTypeList.getCustomTypesByType(PosCustomType.TYPE_CHECK);
			
			// Check Detail Function page
			m_oFrameCheckFunction = new FrameCheckFunction(m_oPosCustomTypeList);
			m_oTemplateBuilder.buildFrame(m_oFrameCheckFunction, "fraCheckFunction");
			m_oFrameCheckFunction.addListener(this);
			m_oFrameCheckFunction.setVisible(false);
			this.attachChild(m_oFrameCheckFunction);
			
			// Direct payment result
			m_oFrameDirectPaymentResult = new FramePaymentResult("fraDirectPaymentResult.xml");
			m_oTemplateBuilder.buildFrame(m_oFrameDirectPaymentResult, "fraDirectPaymentResult");
			m_oFrameDirectPaymentResult.setVisible(false);
			this.attachChild(m_oFrameDirectPaymentResult);
			
			// Get department list
			MenuItemDeptList oItemDeptList = new MenuItemDeptList();
			oItemDeptList.readItemDeptList();
			
			// Get category list
			MenuItemCategoryList oItemCategoryList = new MenuItemCategoryList();
			oItemCategoryList.readItemCategoryList();
			
			// Search Item
			m_oFrameSearchItem = new FrameSearchItem("fraSearchItem.xml", m_oFrameCover, FrameSearchItem.SEARCH_ITEM_LIST_FOUR_COLUMN);
			m_oTemplateBuilder.buildFrame(m_oFrameSearchItem, "fraSearchItem");
			m_oFrameSearchItem.addListener(this);
			m_oFrameSearchItem.setVisible(false);
			m_oFrameSearchItem.initDepartmentList(oItemDeptList);
			m_oFrameSearchItem.initCategoryList(oItemCategoryList);
			this.attachChild(m_oFrameSearchItem);
			
			// Search Item On Wastage Operation
			m_oFrameSearchItemOnWastageOperation = new FrameSearchItem("fraSearchItem.xml", m_oFrameCover, FrameSearchItem.SEARCH_ITEM_LIST_THREE_COLUMN);
			m_oTemplateBuilder.buildFrame(m_oFrameSearchItemOnWastageOperation, "fraSearchItem");
			m_oFrameSearchItemOnWastageOperation.addListener(this);
			m_oFrameSearchItemOnWastageOperation.setVisible(false);
			m_oFrameSearchItemOnWastageOperation.initDepartmentList(oItemDeptList);
			m_oFrameSearchItemOnWastageOperation.initCategoryList(oItemCategoryList);
			this.attachChild(m_oFrameSearchItemOnWastageOperation);
			
			// Item Remind Page
			m_oFrameItemRemind = new FrameItemRemind("fraItemRemind.xml", m_oFrameCover);
			m_oTemplateBuilder.buildFrame(m_oFrameItemRemind, "fraItemRemind");
			m_oFrameItemRemind.addListener(this);
			m_oFrameItemRemind.setVisible(false);
			this.attachChild(m_oFrameItemRemind);
			
			// TabBar
			m_oFrameTabBar = new FrameTabBar();
			m_oTemplateBuilder.buildFrame(m_oFrameTabBar, "fraTabBar");
			m_oFrameTabBar.addListener(this);
			m_oFrameSearchItem.setVisible(false);
			m_oFrameSearchItemOnWastageOperation.setVisible(false);
			
			this.attachChild(m_oFrameTabBar);
			
			m_oFrameCheckDetail.setVisible(false);
			
			// Add item by PLU
			m_oFrameEnterItemPLU = new FrameEnterItemPLU();
			m_oTemplateBuilder.buildFrame(m_oFrameEnterItemPLU, "fraEnterItemPLU");
			m_oFrameEnterItemPLU.setVisible(false);
			m_oFrameEnterItemPLU.init();
			// Add listener;
			m_oFrameEnterItemPLU.addListener(this);
			m_oFrameEnterItemPLU.setEnterBlockUI(true);
			
			// Check if PLU is numeric only or not
			if (AppGlobal.g_oFuncStation.get().getSupportNumericPluOnly()) {
				// PLU MUST be number
				m_oFrameEnterItemPLU.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.NUMBER);
			} else {
				// Default setting: PLU can be alphanumeric
				m_oFrameEnterItemPLU.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DEFAULT);
			}
			m_oFrameEnterItemPLU.setTitle(AppGlobal.g_oLang.get()._("item_code"));
			
			this.attachChild(m_oFrameEnterItemPLU);
			
			// Open Table Panel
			// Reading the floor plan function for mobile view
			ArrayList<FuncLookupButtonInfo> resultDisplayPanelLookupArrayList = null;
			if (AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name()) && !AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode))
				resultDisplayPanelLookupArrayList = this.readTableFloorPlanFunction();
			
			String sOpenCheckInfoListType = FrameOpenedCheckList.TYPE_OPEN_CHECK_LIST_CHECK_STATUS;
			if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab))
				sOpenCheckInfoListType = FrameOpenedCheckList.TYPE_OPEN_CHECK_LIST_TABLE_REFERENCE;
			m_oFrameOpenTable = new FrameOpenTable(m_oFrameCover, resultDisplayPanelLookupArrayList, m_oPosDisplayPanel.getPanelPageNumberByZone(PosDisplayPanelZone.KEY_FLOOR_PLAN_FUNCITON), sOpenCheckInfoListType);
			
			m_oTemplateBuilder.buildFrame(m_oFrameOpenTable, "fraOpenTable");
			m_oFrameOpenTable.setVisible(false);
			m_oFrameOpenTable.addListener(this);
			this.attachChild(m_oFrameOpenTable);
			
			// Open Table Panel with QwertyKeyboard
			m_oFrameOpenTableWithQwertyKeyboard = new FrameOpenTableWithQwertyKeyboard(m_oFrameCover, resultDisplayPanelLookupArrayList, m_oPosDisplayPanel.getPanelPageNumberByZone(PosDisplayPanelZone.KEY_FLOOR_PLAN_FUNCITON), sOpenCheckInfoListType);
			
			m_oTemplateBuilder.buildFrame(m_oFrameOpenTableWithQwertyKeyboard, "fraOpenTableWithQwertyKeyboard");
			m_oFrameOpenTableWithQwertyKeyboard.setVisible(false);
			m_oFrameOpenTableWithQwertyKeyboard.addListener(this);
			this.attachChild(m_oFrameOpenTableWithQwertyKeyboard);
			
			if(AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode))
				this.setOpenTableCloseButtonVisible(false);
			
			if (AppGlobal.g_oFuncStation.get()
					.getAskTableWithAdvanceMode() == FuncStation.OPEN_TABLE_SCREEN_KEYBOARD_NUMBER) {
				m_oFrameOpenTable.setTableTextBoxFocus();
				AppGlobal.g_oFuncStation.get()
						.setOpenTableScreenKeyboard(FuncStation.OPEN_TABLE_SCREEN_KEYBOARD_NUMBER);
			} else {
				m_oFrameOpenTableWithQwertyKeyboard.setTableTextBoxFocus();
				AppGlobal.g_oFuncStation.get()
						.setOpenTableScreenKeyboard(FuncStation.OPEN_TABLE_SCREEN_KEYBOARD_QWERTY);
			}
			
			if (AppGlobal.g_oFuncStation.get().getOpenTableScreenMode() == FuncStation.OPEN_TABLE_SCREEN_MODE_ASK_TABLE
					|| AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name())) {
				if(!AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name()) || AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode)){
					m_oFrameCover.setVisible(true);
					m_oFrameCover.bringToTop();
				}
				if (AppGlobal.g_oFuncStation.get()
						.getOpenTableScreenKeyboard() == FuncStation.OPEN_TABLE_SCREEN_KEYBOARD_NUMBER) {
					m_oFrameOpenTable.setVisible(true);
					m_oFrameOpenTable.setFocusOnTxtBox();
					m_oFrameOpenTableWithQwertyKeyboard.setVisible(false);
				} else {
					m_oFrameOpenTable.setVisible(false);
					m_oFrameOpenTableWithQwertyKeyboard.setVisible(true);
					m_oFrameOpenTableWithQwertyKeyboard.setFocusOnTxtBox();
				}
			}
			
			// Self-order kiosk
			m_oFrameSelfOrderKiosk = new FrameSelfOrderKiosk(AppGlobal.g_oFuncOutlet.get().getMediaUrl(OutMediaObject.USED_FOR_PHOTO_GALLERY));
			m_oTemplateBuilder.buildFrame(m_oFrameSelfOrderKiosk, "fraSelfOrderKiosk");
			m_oFrameSelfOrderKiosk.addListener(this);
			m_oFrameSelfOrderKiosk.setVisible(false);
			
			// Resize the new order page, if station info bar is hidden
			if(AppGlobal.g_oFuncStation.get().getStationDevice().isSelfOrderKiosk() && AppGlobal.g_oFuncStation.get().isHideStationInfoBar())
				m_oFrameSelfOrderKiosk.resizeNewOrderPage(m_oFrameStationInfoBar.getHeight());
			
			this.attachChild(m_oFrameSelfOrderKiosk);
			
			boolean bHaveAlertMsgBtn = false;
			if (AppGlobal.g_oFuncStation.get().isEnableUserCheckingPrintQueueIfAlertMessage())
				bHaveAlertMsgBtn = true;
			
			// prepare alert message blocking dialog box for kiosk mode
			m_oFrameAlertMessageBox = new FrameAlertMessageBox();
			m_oFrameAlertMessageBox.init(bHaveAlertMsgBtn);
			m_oTemplateBuilder.buildFrame(m_oFrameAlertMessageBox, "fraSelfOrderKiosk");
			m_oFrameAlertMessageBox.setMessage("");
			m_oFrameAlertMessageBox.setTitle(AppGlobal.g_oLang.get()._("notice"));
			if(bHaveAlertMsgBtn)
				m_oFrameAlertMessageBox.setButtonValue(AppGlobal.g_oLang.get()._("retry"));
			m_oFrameAlertMessageBox.setVisible(false);
			m_oFrameAlertMessageBox.addListener(this);
			this.attachChild(m_oFrameAlertMessageBox);
			
			// Check whether printed check list for payment interface exist
			if (AppGlobal.isPrintedCheckListExist(AppGlobal.g_oFuncOutlet.get().getOutletId()) == false) {
				List<String> oInterfaceIdList = new ArrayList<String>();
				if (AppGlobal.isModuleSupport(AppGlobal.OPTIONAL_MODULE.pos_interface.name())) {
					List<PosInterfaceConfig> oPaymentInterfaceList = new ArrayList<PosInterfaceConfig>();
					oPaymentInterfaceList = AppGlobal
							.getPosInterfaceConfigByInfType(InfInterface.TYPE_PAYMENT_INTERFACE);
					if (oPaymentInterfaceList.size() > 0) {
						for (PosInterfaceConfig oPaymentInterfaceConfig : oPaymentInterfaceList)
							oInterfaceIdList.add(String.valueOf(oPaymentInterfaceConfig.getInterfaceId()));
					}
					
					if (!oInterfaceIdList.isEmpty()) {
						PosCheck oPosCheck = new PosCheck();
						JSONArray oPrintedCheckJSONArray = oPosCheck.getPrintedAndNonPaidCheckListByInterfaceIds(
								AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
								AppGlobal.g_oFuncOutlet.get().getOutletId(), oInterfaceIdList);
						if (oPrintedCheckJSONArray != null) {
							for (int i = 0; i < oPrintedCheckJSONArray.length(); i++) {
								if (oPrintedCheckJSONArray.isNull(i))
									continue;
								
								oPosCheck = new PosCheck(oPrintedCheckJSONArray.optJSONObject(i));
								String sInterfaceId = "", sPaytype = "", sOutTradeNumber = "", sExpireTime = "";
								
								List<PosCheckExtraInfo> oPosCheckExtraInfos = oPosCheck.getCheckExtraInfoArrayList();
								if (oPosCheckExtraInfos.size() > 0) {
									for (PosCheckExtraInfo oPosCheckExtraInfo : oPosCheckExtraInfos) {
										if (!oPosCheckExtraInfo.getSection().equals(InfVendor.TYPE_PAYMENT_INTERFACE))
											continue;
										
										if (oPosCheckExtraInfo.getVariable()
												.equals(PosCheckExtraInfo.VARIABLE_INTERFACE_ID))
											sInterfaceId = oPosCheckExtraInfo.getValue();
										else if (oPosCheckExtraInfo.getVariable()
												.equals(PosCheckExtraInfo.VARIABLE_PAYTYPE))
											sPaytype = oPosCheckExtraInfo.getValue();
										else if (oPosCheckExtraInfo.getVariable()
												.equals(PosCheckExtraInfo.VARIABLE_OUT_TRADE_NUMBER))
											sOutTradeNumber = oPosCheckExtraInfo.getValue();
										else if (oPosCheckExtraInfo.getVariable()
												.equals(PosCheckExtraInfo.VARIABLE_EXPIRE_TIME))
											sExpireTime = oPosCheckExtraInfo.getValue();
									}
									
									HashMap<String, String> oCheckInfo = new HashMap<String, String>();
									oCheckInfo.put("checkId", String.valueOf(oPosCheck.getCheckId()));
									oCheckInfo.put("interfaceId", sInterfaceId);
									oCheckInfo.put("paytype", sPaytype);
									oCheckInfo.put("outTradeNumber", sOutTradeNumber);
									oCheckInfo.put("expireTime", sExpireTime);
									AppGlobal.addPrintedCheckToPaymentInterfaceCheckList(
											AppGlobal.g_oFuncOutlet.get().getOutletId(), oCheckInfo);
								}
							}
						}
					}
				}
			}
			
			// Close processing box
			m_oFormProcessBox.closeShowWithoutRemoveUI();
		} catch (Exception e) {
			AppGlobal.stack2Log(e);
			
			this.showErrorDialogBox(AppGlobal.g_oLang.get()._("fail_to_initialize_station"));
			
			// Logout session
			AppGlobal.g_oFuncUser.get().logout();
			
			return false;
		}
		
		// Initial internal usage variable
		m_bFloorPlanWaitUserAction = false;
		m_iFloorPlanCurrentFuncId = 0;
		m_bUsePanelToSelectItemMode = false;
		m_bPanelIsShownBefore = false;
		m_bFloorPlanIsShownBefore = false;
		m_bPegasusPmsPostingFail = false;
		m_iUsePanelToSelectItemModeCurrentFuncId = 0;
		m_oUsePanelToSelectItemParentItem = null;
		m_iOpenSelectItemId = 0;
		m_oOpenSelectItemName = new HashMap<Integer, String>();
		m_oProcessingSendChecks = new HashMap<String, ProcessingCheckInfo>();
		m_oBasketSelectedItems = new TreeMap<String, Integer>();
		m_oItemDeptIdListForRepeatRoundItem = new ArrayList<Integer>();
		m_sCurrentFunctionKey = "";
		m_iCurrentCommonModifierLookupId = 0;
		m_oClsMultiSelectModifierState = new HashMap<Integer, ClsMultiSelectModifierState>();
		m_bMultiSelectModifier = false;
		m_iBasketSelectMode = FrameBasketSelectPanel.BASKET_SELECT_MODE_NO;
		m_iBasketSelectType = FrameOrderingBasket.SELECT_TYPE_ALL;
		m_iOriginalBasketTop = 0;
		m_iOriginalBasketHeight = 0;
		m_iCashierMode = 0;
		m_bIsCheckLoadedForCashierMode = false;
		m_bNeedRollbackForCancelPayment = false;
		m_bStockOperationSetMenu = false;
		m_sTableNoForFastFoodMode = "";
		m_sTableExtensionForFastFoodMode = "";
		m_bUnderLoginPage = false;
		m_oPantryMesgList = null;
		m_oTaxTypeList = null;
		m_oServiceChargeTypeList = null;
		m_bUseCashierPanelToSelectPaymentMethod = false;
		m_oRemainAutoFunctions = new LinkedList<>();
		oExtraPosInterfaceConfig = new HashMap<String, InfInterface>();
		m_bIsInterfacePaymentFailedBySetup = false;
		m_bIsInterfaceDirectPaymentFailedBySetup = false;
		
		// Read setup for barcode ordering
		m_oFuncBarcode = null;
		
		String sBarcodeOrderingFomat = AppGlobal.g_oFuncStation.get().getBarcodeOrderingFormat();
		if (sBarcodeOrderingFomat != null) {
			m_oFuncBarcode = new FuncBarcode();
			m_oFuncBarcode.initBarcodeOrderingSetup(sBarcodeOrderingFomat);
		}
		
		// Start auto station
		this.launchAutoStation(AppGlobal.g_oFuncOutlet.get().getOutletId(), false, false);
		
		// Write application log
		AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
				AppGlobal.g_oFuncUser.get().getUserId() + "", "Function: login");
		
		// surveillance eConnect employee event: SignIn
		HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
		this.doSurveillanceEvent(FuncSurveillance.SURVEILLANCE_TYPE_SIGN_IN, oSurveillanceEventInfo);
		
		// Fast food mode or self-order kiosk mode
		if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
				|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
				|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode)) {
			// Fast food mode or self-order kiosk mode
			showTableFloorPlanScreen(false);
		} else if (AppGlobal.OPERATION_MODE.stock_delivery.equals(m_eOperationMode) == true) {
			// Stock delivery mode
			startStockDeliveryMode();
		} else if (AppGlobal.OPERATION_MODE.fine_dining.equals(m_eOperationMode) == true) {
			// Start update table status timer
			this.updateTableFloorPlanTimer(true);
			
			// Stop ordering timeout timer
			setOrderingTimeoutChecking(false);
			
			// Update table status cleaning list for every station init if outlet is not found in the list
			AppGlobal.updateCleaningTableList(null, null);
		}
		
		// hide the check detail bar if the station device = "self order kiosk" and hidden_table_cover_bar = "true" in config by location.
		if(AppGlobal.g_oFuncStation.get().getStationDevice().isSelfOrderKiosk() && AppGlobal.g_oFuncStation.get().isHideCheckDetailBar())
			m_oFrameCheckDetail.setVisible(false);
		
		if (!changePasswordControl())
			return false;
		
		List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_MEMBERSHIP_INTERFACE);
		for(PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList){
			if(oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_GENERAL_V2))
				AppGlobal.generateUpdateInterfaceSession(oPosInterfaceConfig.getInterfaceId(), "");
		}
		
		return true;
	}
	
	public void printerStatusChecking(String sLatestAlertMessage) {
		boolean bIsShowBlockFrame = false;
		boolean bIsSelfOrderKioskMode = m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk);
		
		// if not kiosk mode, "show block frame" always return false
		if (!bIsSelfOrderKioskMode) {
			AppGlobal.getActiveClient().setIsShowBlockFrame(false);
			return;
		}
		
		switch(sLatestAlertMessage) {
			case ClsAlertMessage.PRINT_QUEUE_STATUS_NORMAL:
				if(!isAllPrintQueueNormal())
					bIsShowBlockFrame = true;
				if(!bIsShowBlockFrame && bIsSelfOrderKioskMode && m_oFrameAlertMessageBox != null) {
					m_oFrameAlertMessageBox.setMessage("");
					m_oFrameAlertMessageBox.setVisible(false);
				}
				break;
			case ClsAlertMessage.PRINT_QUEUE_STATUS_PAPER_NEAR_END:
				bIsShowBlockFrame = true;
				// self order kiosk mode only
				// 1. show block frame if it is in open check panel,
				//    otherwise, show block frame when open new check
				// 2. prompt "payment process box" when finish payment, no need to show block frame
				if(m_oFrameSelfOrderKiosk.getVisible() && m_oFrameAlertMessageBox != null) {
					m_oFrameAlertMessageBox.setMessage(AppGlobal.g_oLang.get()._("do_not_use_this_station")
							+ System.lineSeparator() + AppGlobal.g_oLang.get()._("please_check_printer_queue_status_first"));
					m_oFrameAlertMessageBox.setVisible(true);
					m_oFrameAlertMessageBox.bringToTop();
				}
				break;
			case ClsAlertMessage.PRINT_QUEUE_STATUS_PAPER_OUT:
			case ClsAlertMessage.PRINT_QUEUE_STATUS_OFFLINE:
				bIsShowBlockFrame = true;
				// self order kiosk mode only
				// 1. show block frame immediately if it is not in admin panel
				// 2. prompt "payment process box" when finish payment, no need to show block frame
				if(m_oFrameAlertMessageBox != null &&
						(m_oFrameAdminPanel == null || !m_oFrameAdminPanel.getVisible())) {
					m_oFrameAlertMessageBox.setMessage(AppGlobal.g_oLang.get()._("do_not_use_this_station")
							+ System.lineSeparator() + AppGlobal.g_oLang.get()._("please_check_printer_queue_status_first"));
					m_oFrameAlertMessageBox.setVisible(true);
					m_oFrameAlertMessageBox.bringToTop();
				}
				break;
		}
		
		AppGlobal.getActiveClient().setIsShowBlockFrame(bIsShowBlockFrame);
	}
	
	// check all print queue monitoring by current station are normal or not
	public boolean isAllPrintQueueNormal(){
		// get all station print queue
		ArrayList<Integer> oPrintQueueIds = AppGlobal.g_oAlertMessageStationIdToPrintQueueIdsTable.get(AppGlobal.g_oFuncStation.get().getStationId());
		
		// check all print queue whether normal or not
		PosAlertStatusList oPosAlertMessageList = new PosAlertStatusList();
		oPosAlertMessageList.readPrinterDevicesStatusByPrintQueueIds(oPrintQueueIds);
		
		//update all printer status for current station
		// NOT yet done
		
		return oPosAlertMessageList.isAllPrinterDevicesStatusNormal();
	}
	
	
	/*** Normal Functions ***/
	private boolean checkLicense() {
		boolean bLicensePass = true;
		
		// License error
		String sLicenseError = AppGlobal.getLicenseErrorMessage(AppGlobal.g_oFuncStation.get().getStationId());
		if (sLicenseError.length() > 0) {
			
			AppGlobal.writeErrorLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(),
					"", "", sLicenseError);
			
			this.showErrorDialogBox(sLicenseError);
			
			bLicensePass = false;
		} else {
			// License warning
			String sWarningMessage = AppGlobal.getLicenseWarningMessage();
			if (sWarningMessage.length() > 0)
				this.showAttentionDialogBox(sWarningMessage);
			
			sWarningMessage = AppGlobal.getLicenseExpireWarningMessage();
			if (sWarningMessage.length() > 0) {
				FormListMessageBox oFormListMessageBox = null;
				oFormListMessageBox = new FormListMessageBox(false, AppGlobal.g_oLang.get()._("ok"), this);
				oFormListMessageBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
				oFormListMessageBox.addColumnHeader("", 900);
				
				String[] sMessages = sWarningMessage.split("\n");
				for (int i=0; i<sMessages.length; i++) {
					ArrayList<String> sMessage = new ArrayList<>();
					sMessage.add(sMessages[i]);
					oFormListMessageBox.addMessage(sMessage);
				}
				oFormListMessageBox.show();
			}
		}
		
		return bLicensePass;
	}
	
	private boolean loadStationConfigSetup() {
		String sErrMsg = "";
		
		// Create processing box
		m_oFormProcessBox = new FormProcessBox(this);
		
		m_oFormProcessBox.setTitle(AppGlobal.g_oLang.get()._("loading") + "...");
		m_oFormProcessBox.setMessage(AppGlobal.g_oLang.get()._("loading_station"));
		m_oFormProcessBox.showWithoutRemoveUI();
		
		// Load station setup
		AppGlobal.g_oFuncStation.set(new FuncStation());
		if (AppGlobal.g_oFuncStation.get().loadStation(AppGlobal.g_oTCP.get().getClientAddress(), true) == false) {
			// Load station error
			// Prompt error
			sErrMsg = AppGlobal.g_oFuncStation.get().getLastErrorMessage();
			this.showErrorDialogBox(sErrMsg);
			
			return false;
		}
		
		// Check License by providing station ID
		if (!checkLicense()) {
			return false;
		}
		
		// Check if setup is properly
		if (AppGlobal.g_oFuncStation.get().getDisplayPanelId() == 0) {
			// Load display panel failed
			// Prompt error
			sErrMsg = AppGlobal.g_oLang.get()._("missing_panel_id");
			this.showErrorDialogBox(sErrMsg);
			
			return false;
		}
		
		// Check if there is daily operation is running
		if (AppGlobal.g_oFuncStation.get().getOutletId() > 0) {
			if (AppGlobal.checkDailyOperationRunning(AppGlobal.g_oFuncStation.get().getOutletId())) {
				// Daily operation is running
				// Prompt error
				sErrMsg = AppGlobal.g_oLang.get()._("daily_operation_is_running");
				this.showErrorDialogBox(sErrMsg);
				
				return false;
			}
		}
		
		// Get auto sign out right
		if (AppGlobal.g_oFuncStation.get().getAutoSignOut().isEmpty())
			m_bHoldId = true;
		else if (AppGlobal.g_oFuncStation.get().getAutoSignOut()
				.equals(PosStation.AUTO_SIGN_OUT_HOLD_USER_ID_NOT_SWITCH))
			m_bHoldId = true;
		
		// Get the operation mode
		if (AppGlobal.g_oFuncStation.get().isFastFoodOrderingMode())
			m_eOperationMode = AppGlobal.OPERATION_MODE.fast_food;
		else if (AppGlobal.g_oFuncStation.get().isSelfOrderKioskOrderingMode())
			m_eOperationMode = AppGlobal.OPERATION_MODE.self_order_kiosk;
		else if (AppGlobal.g_oFuncStation.get().isBarTabOrderingMode())
			m_eOperationMode = AppGlobal.OPERATION_MODE.bar_tab;
		else
			m_eOperationMode = AppGlobal.OPERATION_MODE.fine_dining;
		
		m_oFormProcessBox.closeShowWithoutRemoveUI();
		m_oFormProcessBox = new FormProcessBox(this);
		m_oFormProcessBox.setTitle(AppGlobal.g_oLang.get()._("loading") + "...");
		m_oFormProcessBox.setMessage(AppGlobal.g_oLang.get()._("loading_panel"));
		m_oFormProcessBox.showWithoutRemoveUI();
		
		//Load Display Panel
		m_oPosDisplayPanel = new PosDisplayPanel();
		loadDisplayPanelAndDisplayStyle(AppGlobal.g_oFuncStation.get().getDisplayPanelId(), AppGlobal.g_oFuncStation.get().getOutletId());
		
		// Close processing box
		m_oFormProcessBox.closeShowWithoutRemoveUI();
		
		// Save the station's current station ID
		ClsActiveClient oActiveClient = AppGlobal.getActiveClient();
		if (oActiveClient != null) {
			oActiveClient.setCurrentStationId(AppGlobal.g_oFuncStation.get().getStationId());
		}
		
		return true;
	}
	
	private void updateDisplayPanelStyleList() {
		PosDisplayStyle oDisplayStyle;
		JSONArray oDisplayStyleJSONArray = null;
		
		if (m_oPanelButtonStyleList == null)
			m_oPanelButtonStyleList = new HashMap<Integer, ClsPanelButtonStyle>();
		
		if (m_oPosDisplayPanel != null)
			oDisplayStyleJSONArray = m_oPosDisplayPanel.getDisplayStyleJSONArray();
		
		if (oDisplayStyleJSONArray != null) {
			for (int i = 0; i < oDisplayStyleJSONArray.length(); i++) {
				try {
					oDisplayStyle = new PosDisplayStyle(oDisplayStyleJSONArray.getJSONObject(i));
					if (!m_oPanelButtonStyleList.containsKey(oDisplayStyle.getDstyId())) {
						
						JSONObject oTextJSONObject = new JSONObject(oDisplayStyle.getText());
						ClsPanelButtonStyle oPanelButtonStyle = new ClsPanelButtonStyle(oTextJSONObject, oDisplayStyle.getBackgroundMediUrl(), oDisplayStyle.getIconMediUrl());
						
						m_oPanelButtonStyleList.put(oDisplayStyle.getDstyId(), oPanelButtonStyle);
					}
				} catch (JSONException e) {
					AppGlobal.stack2Log(e);
				}
			}
		}
	}
	
	private boolean loadOutletConfigSetup(int iOutletId, boolean bAskDailyStart) {
		boolean bFirstProcess = true;
		String sErrMsg = "";
		
		while (true) {
			// Create processing box
			m_oFormProcessBox = new FormProcessBox(this);
			m_oFormProcessBox.setTitle(AppGlobal.g_oLang.get()._("loading") + "...");
			m_oFormProcessBox.setMessage(AppGlobal.g_oLang.get()._("loading_outlet"));
			m_oFormProcessBox.showWithoutRemoveUI();
			
			// Load outlet setup
			AppGlobal.g_oFuncOutlet.set(new FuncOutlet());
			int iRet = AppGlobal.g_oFuncOutlet.get().loadOutlet(iOutletId, false);
			if (iRet == 1) {
				// Load outlet error
				
				// Close processing box
				m_oFormProcessBox.closeShowWithoutRemoveUI();
				
				// Prompt error
				sErrMsg = AppGlobal.g_oFuncOutlet.get().getLastErrorMessage();
				this.showErrorDialogBox(sErrMsg);
				
				return false;
			}
			
			//Check failover station and outlet station gp
			if((AppGlobal.g_oFuncSmartStation.isServiceMasterRole() || AppGlobal.g_oFuncSmartStation.isWorkstationRole())
					&& (AppGlobal.g_oFuncOutlet.get().getOutletFailoverStationGroupId() > 0 && AppGlobal.g_oFuncSmartStation.getFailoverStationGroupId() != AppGlobal.g_oFuncOutlet.get().getOutletFailoverStationGroupId())) {
				// Close processing box
				m_oFormProcessBox.closeShowWithoutRemoveUI();
				
				// Prompt error
				this.showErrorDialogBox(AppGlobal.g_oLang.get()._("this_station_is_not_allowed_to_login_to_outlet")
						+ ": "
						+ AppGlobal.g_oFuncOutlet.get().getOutletNameByIndex(AppGlobal.g_oCurrentLangIndex.get()));
				
				return false;
			}
			
			// Check check number setting
			if (AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId().compareTo("") != 0
					&& ((!AppGlobal.g_oFuncOutlet.get().getBusinessDay().isCheckNumGeneratedByOutlet()
					&& AppGlobal.g_oFuncStation.get().getStationStartCheckNumber() == 0)
					|| (AppGlobal.g_oFuncOutlet.get().getBusinessDay().isCheckNumGeneratedByOutlet()
					&& AppGlobal.g_oFuncOutlet.get().getOutletStartCheckNumber() == 0))) {
				// Load station error
				
				// Close processing box
				m_oFormProcessBox.closeShowWithoutRemoveUI();
				
				// Prompt error
				sErrMsg = AppGlobal.g_oLang.get()._("start_check_number_cannot_be_zero");
				this.showErrorDialogBox(sErrMsg);
				
				return false;
				
			}
			
			// *****************************************************************
			// Create thread to load detail
			AppThreadManager oAppThreadManager = new AppThreadManager();
			
			oAppThreadManager.addThread(1, this, "loadDetailForConfigListAndPayments", null);
			
			PosCheck oLastSentPosCheck = new PosCheck();
			
			if (iRet != 2) {
				// Thread 4 : Load payment function class
				m_oFuncPayment = new FuncPayment();
				PosBusinessDay oBusinessDay = AppGlobal.g_oFuncOutlet.get().getBusinessDay();
				DateTimeFormatter dateFormat = DateTimeFormat.forPattern("yyyy-MM-dd");
				Object[] oParameter4s = new Object[8];
				oParameter4s[0] = AppGlobal.g_oFuncOutlet.get().getShopId();
				oParameter4s[1] = AppGlobal.g_oFuncOutlet.get().getOutletId();
				oParameter4s[2] = dateFormat.print(oBusinessDay.getDate());
				oParameter4s[3] = oBusinessDay.isHoliday();
				oParameter4s[4] = oBusinessDay.isDayBeforeHoliday();
				oParameter4s[5] = oBusinessDay.isSpecialDay();
				oParameter4s[6] = oBusinessDay.isDayBeforeSpecialDay();
				oParameter4s[7] = oBusinessDay.getDayOfWeek();
				oAppThreadManager.addThread(2, m_oFuncPayment, "readAllPaymentMethod", oParameter4s);
				
				if (!AppGlobal.g_oFuncOutlet.get().getBusinessDay().isCheckNumGeneratedByOutlet() || AppGlobal.g_oFuncSmartStation.isStandaloneRole()) {
					// Assign the station check prefix to check object
					oLastSentPosCheck.setCheckPrefix(AppGlobal.g_oFuncStation.get().getCheckPrefix());
					
					// Thread 5 : Load the last sent check's check prefix and
					// number
					Object[] oParameter5s = new Object[7];
					oParameter5s[0] = AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId();
					oParameter5s[1] = AppGlobal.g_oFuncOutlet.get().getOutletId();
					oParameter5s[2] = AppGlobal.g_oFuncStation.get().getStationId();
					oParameter5s[3] = AppGlobal.g_oFuncStation.get().getStationStartCheckNumber();
					oParameter5s[4] = AppGlobal.g_oFuncStation.get().getStationEndCheckNumber();
					oParameter5s[5] = AppGlobal.g_oFuncOutlet.get().isResetCheckNum();
					oParameter5s[6] = AppGlobal.g_oFuncOutlet.get().getBusinessDay().isCheckNumGeneratedByOutlet();
					oAppThreadManager.addThread(3, oLastSentPosCheck, "getStationLastCheckNo", oParameter5s);
				}
				
				// Support Taiwan GUI
				if (AppGlobal.g_oFuncStation.get().supportTaiwanGui()) {
					// Thread 6 : Load Taiwan GUI configuration
					// Create parameter array
					Object[] oParameter6s = new Object[2];
					oParameter6s[0] = AppGlobal.g_oFuncOutlet.get().getBusinessDay().getDateInString();
					oParameter6s[1] = 0;
					oAppThreadManager.addThread(4, AppGlobal.g_oFuncStation.get(), "loadTaiwanGuiConfig", oParameter6s);
				}
			}
			
			// Run all of the threads
			oAppThreadManager.runThread();
			
			// Wait for the thread to finish
			oAppThreadManager.waitForThread();
			
			HashMap<String, Object> oReturnResult = new HashMap<String, Object>();
			oReturnResult = (HashMap<String, Object>) oAppThreadManager.getResult(1);
			
			PosConfigList oPosConfigList = (PosConfigList) oReturnResult.get("posConfig");
			PosInterfaceConfigList oInterfaceConfigList = (PosInterfaceConfigList) oReturnResult.get("interfaceConfig");
			PosItemRemindRuleList oPosItemRemindRuleList = (PosItemRemindRuleList) oReturnResult.get("itemRemindRule");
			
			// Check if Taiwan GUI configuration is loaded or not
			if (iRet != 2 && AppGlobal.g_oFuncStation.get().supportTaiwanGui()) {
				if ((Boolean) oAppThreadManager.getResult(4) == false) {
					// Load Taiwan GUI configuration error
					
					// Close processing box
					m_oFormProcessBox.closeShowWithoutRemoveUI();
					
					// Prompt error
					sErrMsg = AppGlobal.g_oFuncStation.get().getLastErrorMessage();
					this.showErrorDialogBox(sErrMsg);
					
					return false;
				}
			}
			
			AppGlobal.setPosConfigList(oPosConfigList.getPosConfigList());
			if (AppGlobal.g_oFuncStation.get().getHeroStyle() != null) {
				GeneralStyleMap oGeneralStyleMap = new GeneralStyleMap();
				String sStyle = AppGlobal.g_oFuncStation.get().getHeroStyle();
				if(sStyle != null) {
					try {
						JSONArray oHeroStyleJSONArray = new JSONArray(sStyle);
						oGeneralStyleMap.getAllStyleFromSources(new JSONArray(oHeroStyleJSONArray.getString(0)));
						AppGlobal.g_oFuncStation.get().setHeroStyleMap(oGeneralStyleMap);
					} catch (JSONException e) {
					}
				}
			}
			
			AppGlobal.setPosInterfaceConfigList(oInterfaceConfigList);
			boolean bHaveGeneralV2Interface = false;
			List<PosInterfaceConfig> oPosInterfaceConfigs = AppGlobal.g_oPosInterfaceConfigList.get().getInterfaceConfigListByInterfaceType(InfInterface.TYPE_MEMBERSHIP_INTERFACE);
			for(PosInterfaceConfig oPosInterfaceConfig: oPosInterfaceConfigs) {
				if(oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_GENERAL_V2)) {
					bHaveGeneralV2Interface = true;
					break;
				}
			}
			
			if(bHaveGeneralV2Interface && AppGlobal.isModuleSupport(AppGlobal.OPTIONAL_MODULE.woh.name())) {
				WohAwardSettingList oWohAwardSettingList = new WohAwardSettingList();
				AppThreadManager oThreadManager = new AppThreadManager();
				Object[] oParameter2s = new Object[2];
				oParameter2s[0] = AppGlobal.g_oFuncOutlet.get().getShopId();
				oParameter2s[1] = AppGlobal.g_oFuncOutlet.get().getOutletId();
				oThreadManager.addThread(1, oWohAwardSettingList, "readAwardSettingListByShopOutlet", oParameter2s);
				
				// Run all of the threads
				oThreadManager.runThread();
				
				// Wait for the thread to finish
				oThreadManager.waitForThread();
				
				AppGlobal.setWohAwardSettingList(oWohAwardSettingList);
			}
			
			if(iRet != 2 && (!AppGlobal.g_oFuncOutlet.get().getBusinessDay().isCheckNumGeneratedByOutlet() || AppGlobal.g_oFuncSmartStation.isStandaloneRole())) {
				if((Boolean)oAppThreadManager.getResult(3) == false) {
					if (AppGlobal.g_oFuncSmartStation.isStandaloneRole())
						AppGlobal.g_oFuncStation.get().setLastCheckPrefixNumber(AppGlobal.g_oFuncStation.get().getOverrideCheckPrefix(), 0);
					else
						AppGlobal.g_oFuncStation.get().setLastCheckPrefixNumber(AppGlobal.g_oFuncStation.get().getCheckPrefix(), (AppGlobal.g_oFuncStation.get().getStationStartCheckNumber() - 1));
				} else {
					if (AppGlobal.g_oFuncSmartStation.isStandaloneRole())
						AppGlobal.g_oFuncStation.get().setLastCheckPrefixNumber(AppGlobal.g_oFuncStation.get().getOverrideCheckPrefix(), (oLastSentPosCheck.getCheckNo() % 10000));
					else
						AppGlobal.g_oFuncStation.get().setLastCheckPrefixNumber(oLastSentPosCheck.getCheckPrefix(), oLastSentPosCheck.getCheckNo());
				}
			}
			AppGlobal.setPosItemRemindRuleList(oPosItemRemindRuleList);
			
			// Get station UI image path and Set client image path
			String sInterfaceURL = AppGlobal.g_oFuncStation.get().getInterfaceUrl();
			if (sInterfaceURL == null)
				sInterfaceURL = "";
			AppGlobal.g_oTerm.get().setClientImageURLPath(sInterfaceURL + "/cfg/images/");
			
			// Take Check Ownership
			if(AppGlobal.g_oFuncSmartStation.isStandaloneRole() &&		// In standalone mode
					bFirstProcess &&						// First process
					iRet != 2 &&							// With business date
					!checkIfPerformPurgeSalesForStandaloneMode()			// Check if purge sales is performed before or not
			) {
				// Close processing box
				m_oFormProcessBox.closeShowWithoutRemoveUI();
				
				// Ask if print all old checks
				printAllOldChecksForStandalone();
				
				// Remove all checks from DB
				AppGlobal.g_oFuncOutlet.get().purgeCurrentBusinessDateTransactionData();
				
				// Mark that the purge sales for standalone mode is performed
				markPurgeSalesForStandaloneModeFinish();
				
				// Ask user to perform daily start again
				this.showAttentionDialogBox(AppGlobal.g_oLang.get()._("please_perform_daily_start_again"));
				
				continue;
			}
			
			// Get the ordering timeout
			int iOrderingTimeout = AppGlobal.g_oFuncStation.get().getOrderingTimeout();
			
			m_iOrderingTimer = 0;
			if (iOrderingTimeout > -1)
				m_iOrderingTimer = 1000 * iOrderingTimeout;
			
			// Get the ordering timeout
			m_iCashierTimer = 0;
			if (iOrderingTimeout > -1)
				m_iCashierTimer = 1000 * iOrderingTimeout;
			
			// Get the open table screen mode
			int iOpenTableScreenMode = AppGlobal.g_oFuncStation.get().getOpenTableScreenModeConfig();
			if (iOpenTableScreenMode > -1)
				AppGlobal.g_oFuncStation.get().setOpenTableScreenMode(iOpenTableScreenMode);
			
			if (bAskDailyStart && bFirstProcess) {
				// Initialize peripheral devices
				initPeripheralDevices();
				
				// Close processing box
				m_oFormProcessBox.closeShowWithoutRemoveUI();
				
				if (m_bLoginInServer) {
					FormLogin oFormLogin = new FormLogin(this);
					oFormLogin.init(true, m_oFuncSmartCard);
					
					// Set Outlet logo
					oFormLogin.setOutletLogo(AppGlobal.g_oFuncOutlet.get().getMediaUrl(OutMediaObject.USED_FOR_LOGO));
					
					// Set Outlet Desc
					oFormLogin.setOutletDesc(
							AppGlobal.g_oFuncOutlet.get().getOutletNameByIndex(AppGlobal.g_oCurrentLangIndex.get()));
					
					m_bUnderLoginPage = true;
					oFormLogin.show();
					m_bUnderLoginPage = false;
					
					if (oFormLogin.isExit())
						// Exit program
						return false;
					
					// Re-do login process
					this.login("", "", "", "", (FuncUser) oFormLogin.getFuncUser().clone());
				}
				
				bFirstProcess = false;
				
				//continue;
			}
			
			// *****************************************************************
			// Create thread to load detail
			AppThreadManager oAppThreadManager2 = new AppThreadManager();
			
			// Add the method to the thread manager
			// Thread 1 : Load function list
			m_oFunctionList = new PosFunctionList();
			// Create parameter array
			Object[] oParameter1s = new Object[4];
			oParameter1s[0] = AppGlobal.g_oFuncUser.get().getUserId();
			oParameter1s[1] = AppGlobal.g_oFuncUser.get().getUserGroupList();
			oParameter1s[2] = AppGlobal.g_oFuncOutlet.get().getOutletId();
			oParameter1s[3] = AppGlobal.g_oFuncOutlet.get().getOutletGroupList();
			oAppThreadManager2.addThread(1, m_oFunctionList, "readAll", oParameter1s);
			
			// Thread 2 : Load web report URL
			oAppThreadManager2.addThread(2, this, "loadWebReportURL", null);
			
			FuncOverride oFuncOverride = new FuncOverride();
			FuncDiscountAcl oFuncDiscountAcl = new FuncDiscountAcl();
			if (iRet != 2) {
				// Thread 3 : Load the business day ID of a month
				m_oBusinessDayOfAMonthList = new ArrayList<String>();
				
				m_oBusinessDayOfADayList = new ArrayList<String>();
				oAppThreadManager2.addThread(3, this, "loadBusinessDayOfAMonth", null);
				
				// Thread 4 : Load override condition
				Object[] oParameter3s = new Object[1];
				oParameter3s[0] = AppGlobal.g_oFuncOutlet.get().getOutletId();
				oAppThreadManager2.addThread(4, oFuncOverride, "readAllOverrideCondition", oParameter3s);
				
				// Thread 5 : Load mix and match rule
				AppGlobal.g_oFuncMixAndMatch.set(new FuncMixAndMatch());
				// Create parameter array
				Object[] oParameter4s = new Object[2];
				oParameter4s[0] = AppGlobal.g_oFuncOutlet.get().getShopId();
				oParameter4s[1] = AppGlobal.g_oFuncOutlet.get().getOutletId();
				oAppThreadManager2.addThread(5, AppGlobal.g_oFuncMixAndMatch.get(), "loadRuleList", oParameter4s);
				
				// Thread 6 : Load discount allowance
				// Create parameter array
				Object[] oParameter5s = new Object[1];
				oParameter5s[0] = AppGlobal.g_oFuncOutlet.get().getOutletId();
				oAppThreadManager2.addThread(6, oFuncDiscountAcl, "readAllDiscountAclByOutlet", oParameter5s);
			}
			
			// Run all of the threads
			oAppThreadManager2.runThread();
			
			// Wait for the thread to finish
			oAppThreadManager2.waitForThread();
			
			if (iRet == 0 && !this.crossDateLoginChecking()) {
				// Close processing box
				m_oFormProcessBox.closeShowWithoutRemoveUI();
				
				return false;
			}
			
			AppGlobal.g_oFuncOverrideList.put(AppGlobal.g_oFuncOutlet.get().getOutletId(), oFuncOverride);
			AppGlobal.g_oFuncDiscountAclList.put(AppGlobal.g_oFuncOutlet.get().getOutletId(), oFuncDiscountAcl);
			
			// Get the tender amount for direct payment
			AppGlobal.g_oTenderAmountList.clear();
			String sTenderAmount = AppGlobal.g_oFuncStation.get().getTenderAmount();
			if (sTenderAmount != null) {
				try {
					JSONArray oTenderAmountJSONArray = new JSONArray(sTenderAmount);
					for (int i = 0; i < oTenderAmountJSONArray.length(); i++) {
						BigDecimal oTenderAmount = new BigDecimal(
								StringLib.DoubleToStringWithoutZeroDecimal(oTenderAmountJSONArray.getDouble(i)));
						AppGlobal.g_oTenderAmountList.add(oTenderAmount);
					}
				} catch (JSONException e) {
					AppGlobal.stack2Log(e);
				}
			}
			
			// Check if check stock operation should be skipped or not
			AppGlobal.g_bNotCheckStock = AppGlobal.g_oFuncStation.get().getNotCheckStock();
			
			// Close processing box
			m_oFormProcessBox.closeShowWithoutRemoveUI();
			
			if (iRet == 2) {
				// Not yet daily start
				this.showAttentionDialogBox(AppGlobal.g_oFuncOutlet.get().getLastErrorMessage());
				
				if (bAskDailyStart == false)
					return false;
				
				boolean bBreakFlag = true;
				while (true) {
					// Select the operation
					ArrayList<Integer> oFunctionIDList = new ArrayList<Integer>();
					ArrayList<String> oOptionList = new ArrayList<String>();
					
					PosFunction oFunction = m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.daily_start.name());
					if (oFunction != null) {
						// Function key
						oFunctionIDList.add(oFunction.getFuncId());
						oOptionList.add(oFunction.getName(AppGlobal.g_oCurrentLangIndex.get()));
					}
					
					oFunction = m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.web_report.name());
					if (oFunction != null) {
						// Function key
						oFunctionIDList.add(oFunction.getFuncId());
						oOptionList.add(oFunction.getName(AppGlobal.g_oCurrentLangIndex.get()));
					}
					
					FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
					oFormSelectionBox.initWithSingleSelection(
							AppGlobal.g_oLang.get()._("please_select_the_action_type"), oOptionList, false);
					oFormSelectionBox.show();
					if (oFormSelectionBox.isUserCancel()) {
						// Back to login page
						return false;
					} else {
						ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
						fcnSwitch(oFunctionIDList.get(oSelectionBoxResult.get(0)), "", -1, -1, false, null);
						
						if (oSelectionBoxResult.get(0) == 0 && m_bIsDailyStart) {
							// Daily start is performed
							// Continue to operation mode
							
							bBreakFlag = false;
							break;
						}
					}
				}
				if (bBreakFlag == false)
					continue;
			}
			
			break;
		}
		
		m_oStoredFuncCheckItemList = new ArrayList<FuncCheckItem>();
		
		// Initialize the quantity to 1.0
		m_dQty = new BigDecimal("1.0");
		
		// Daily start is performed
		m_bIsDailyStart = true;
		
		// Save the station's current outlet ID
		ClsActiveClient oActiveClient = AppGlobal.getActiveClient();
		if (oActiveClient != null) {
			oActiveClient.setCurrentOutletId(AppGlobal.g_oFuncOutlet.get().getOutletId());
		}
		
		// Clear store table status list for previous outlet
		m_oTableStatusList = new ConcurrentSkipListMap<String, ClsTableStatus>();
		
		return true;
	}
	
	private void loadSignageSchedule(int iShopId) {
		if(AppGlobal.isModuleSupport(AppGlobal.OPTIONAL_MODULE.signage.name())) {
			// Load signage schedule
			AppGlobal.g_oFuncSignage.set(new FuncSignage());
			AppGlobal.g_oFuncSignage.get().loadSignageScheduleByShopId(iShopId);
		}
	}
	
	private void loadMenuPriceLevelList() {
		AppGlobal.g_oMenuPriceLevelList = new MenuPriceLevelList();
		AppGlobal.g_oMenuPriceLevelList.readAll();
	}
	
	private void loadPosStationList() {
		AppGlobal.g_oPosStationList = new PosStationList();
		AppGlobal.g_oPosStationList.readStationMappingListByOutletId(AppGlobal.g_oFuncOutlet.get().getOutletId());
	}
	
	// Initialize the peripheral devices (e.g. octopus)
	private void initPeripheralDevices() {
		// Create system element to connect to device manager
		String sIPAddress = "";
		int iPortNo = 0;
		List<PosInterfaceConfig> oInterfaceConfigList = new ArrayList<PosInterfaceConfig>();
		
		// Get the configure from interface module
		oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_PERIPHERAL_DEVICE);
		for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
			if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_DEVICE_MANAGER)) {
				try {
					JSONObject oInterfaceSetup = oPosInterfaceConfig.getInterfaceConfig();
					
					// IP Address
					sIPAddress = oInterfaceSetup.getJSONObject("device_manager_setup").getJSONObject("params")
							.getJSONObject("ip_address").getString("value");
					
					// Port no.
					iPortNo = oInterfaceSetup.getJSONObject("device_manager_setup").getJSONObject("params")
							.getJSONObject("port").getInt("value");
					
				} catch (Exception e) {
					AppGlobal.stack2Log(e);
				}
			}
		}
		
		if (sIPAddress.length() > 0 && iPortNo > 0) {
			FormDeviceManager oFormDeviceManager = new FormDeviceManager(this);
			oFormDeviceManager.init(sIPAddress, iPortNo);
			oFormDeviceManager.show();
		}
		
		// Initialize Speactra Credit Card
		m_oFuncCreditCardOperation = new FuncCreditCardOperation();
		m_oFuncCreditCardOperation.readSetup();
		
		// Initialize Kitchen Monitor
		m_oFuncKitchenMonitor = new FuncKitchenMonitor();
		m_oFuncKitchenMonitor.readSetup();
		
		// Initialize One Card Solution Device
		m_oFuncRewriteCard = new FuncRewriteCard();
		m_oFuncRewriteCard.readSetup();
	}
	
	private void loadWebReportURL() {
		m_sWebReportBaseURL = PosReport.getWebReportBaseURL();
		if (m_sWebReportBaseURL.length() > 0) {
			if (m_sWebReportBaseURL.substring(m_sWebReportBaseURL.length() - 1).equals("/") == false)
				m_sWebReportBaseURL = m_sWebReportBaseURL + "/";
		}
	}
	
	// Load business day of a month
	private void loadBusinessDayOfAMonth() {
		PosBusinessDayList oBusinessDayList = new PosBusinessDayList();
		String sStartDate = "", sEndDate = "";
		BigInteger iTodayYear, iTodayMonth;
		
		// generate a range
		sStartDate = AppGlobal.g_oFuncOutlet.get().getBusinessDay().getDateInString().substring(0, 8) + "01";
		iTodayYear = new BigInteger(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getDateInString().substring(0, 4));
		iTodayMonth = new BigInteger(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getDateInString().substring(5, 7));
		if (iTodayMonth.equals(new BigInteger("1")) || iTodayMonth.equals(new BigInteger("3"))
				|| iTodayMonth.equals(new BigInteger("5")) || iTodayMonth.equals(new BigInteger("7"))
				|| iTodayMonth.equals(new BigInteger("8")) || iTodayMonth.equals(new BigInteger("10"))
				|| iTodayMonth.equals(new BigInteger("12")))
			sEndDate = AppGlobal.g_oFuncOutlet.get().getBusinessDay().getDateInString().substring(0, 8) + "31";
		else if (iTodayMonth.equals(new BigInteger("4")) || iTodayMonth.equals(new BigInteger("6"))
				|| iTodayMonth.equals(new BigInteger("9")) || iTodayMonth.equals(new BigInteger("11")))
			sEndDate = AppGlobal.g_oFuncOutlet.get().getBusinessDay().getDateInString().substring(0, 8) + "30";
		else {
			if (iTodayYear.mod(new BigInteger("4")).equals(new BigInteger("0")))
				sEndDate = AppGlobal.g_oFuncOutlet.get().getBusinessDay().getDateInString().substring(0, 8) + "29";
			else
				sEndDate = AppGlobal.g_oFuncOutlet.get().getBusinessDay().getDateInString().substring(0, 8) + "28";
		}
		
		int iShopId = 0;
		if (AppGlobal.g_oFuncStation.get().getDutyMealOnCreditLimit("dutymeal_shop_limit") > 0 || AppGlobal.g_oFuncStation.get().getDutyMealOnCreditLimit("on_credit_shop_limit") > 0)
			iShopId = AppGlobal.g_oFuncOutlet.get().getShopId();
		oBusinessDayList.readBusinessDayByShopOrOutletPeriod(iShopId, AppGlobal.g_oFuncOutlet.get().getOutletId(), sStartDate,
				sEndDate);
		// get business day list by month list
		m_oBusinessDayOfAMonthList = oBusinessDayList.getListOfBusinessDayId();
		m_oBusinessDayOfADayList.add(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId());
	}
	
	// Check whether current time exceeds business hour but not yet daily close
	// during login
	private boolean crossDateLoginChecking() {
		String sErrMsg;
		
		// daily close warning level
		// 1: pos not allowed
		// 2: allowed but passwd needed
		// 0: not warning
		// -1: no PosConfig record
		int iWarnLevel = AppGlobal.g_oFuncStation.get().getBusinessHourWarnLevel();
		if (iWarnLevel <= 0) // No Warning
			return true;
		
		boolean bCrossDay = AppGlobal.g_oFuncOutlet.get().checkCrossDay();
		String sBusinessDay = AppGlobal.g_oFuncOutlet.get().getBusinessDay().getDateInString();
		
		if (!bCrossDay)
			return true;
		
		if (iWarnLevel == 1) {
			sErrMsg = sBusinessDay + " " + AppGlobal.g_oLang.get()._("daily_close_not_yet_completed") + "!\n"
					+ AppGlobal.g_oLang.get()._("hero_pos_not_allowed");
			this.showWarningDialogBox(sErrMsg);
			return false;
		}
		
		sErrMsg = AppGlobal.g_oFuncOutlet.get().getBusinessDay().getDateInString() + " "
				+ AppGlobal.g_oLang.get()._("daily_close_not_yet_completed") + "!" + System.lineSeparator() + System.lineSeparator()
				+ AppGlobal.g_oLang.get()._("you_must_perform_daily_close_procedure") + System.lineSeparator()
				+ AppGlobal.g_oLang.get()._("or_subsequent_sales_will_be_mixed_to") + " " + sBusinessDay;
		this.showWarningDialogBox(sErrMsg);
		
		ArrayList<String> oOptionList = new ArrayList<String>();
		
		oOptionList.add(AppGlobal.g_oLang.get()._("continue"));
		PosFunction oFunction = m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.daily_close.name());
		if (oFunction != null)
			oOptionList.add(oFunction.getName(AppGlobal.g_oCurrentLangIndex.get()));
		oOptionList.add(AppGlobal.g_oLang.get()._("exit"));
		
		FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
		oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select_the_action_type"),
				oOptionList, false);
		oFormSelectionBox.show();
		if (oFormSelectionBox.isUserCancel()) {
			// Back to login page
			this.showAttentionDialogBox(AppGlobal.g_oLang.get()._("cancel_to_continue_operation"));
			return false;
		} else {
			ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
			int iOption = oSelectionBoxResult.get(0).intValue();
			
			if (iOption == 0) {
				FuncUser oUser = this.askUserPassword(AppGlobal.g_oLang.get()._("login"), true);
				if (oUser == null) {
					this.showAttentionDialogBox(AppGlobal.g_oLang.get()._("cancel_to_continue_operation"));
					return false;
				}
				
				// Write a log for cross date
				AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
						AppGlobal.g_oFuncUser.get().getUserId() + "", "CROSS DATE: Continue HERO POS [User Name: "
								+ oUser.getUserName(1) + ", User Login: " + oUser.getLoginId() + "]");
			} else if (iOption == 1) {
				fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.daily_close.name()), "", -1, -1, false,
						null);
				return false;
			} else
				return false;
		}
		
		return true;
	}
	
	// Check whether current time exceeds business hour but not yet daily close
	// during open check
	private boolean crossDateOpenCheckChecking() {
		String sErrMsg;
		
		// daily close warning level
		// 1: pos not allowed
		// 2: allowed but passwd needed
		// 3: allowed but passwd needed (Warning At Login Only)
		// 0: not warning
		// -1: no PosConfig record
		int iWarnLevel = AppGlobal.g_oFuncStation.get().getBusinessHourWarnLevel();
		if (iWarnLevel <= 0) // No Warning
			return true;
		
		boolean bCrossDay = AppGlobal.g_oFuncOutlet.get().checkCrossDay();
		String sBusinessDay = AppGlobal.g_oFuncOutlet.get().getBusinessDay().getDateInString();
		
		if (!bCrossDay)
			return true;
		
		if (iWarnLevel == 1 || AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)) {
			sErrMsg = sBusinessDay + " " + AppGlobal.g_oLang.get()._("daily_close_not_yet_completed") + "!\n"
					+ AppGlobal.g_oLang.get()._("hero_pos_not_allowed");
			this.showWarningDialogBox(sErrMsg);
			return false;
		} else if (iWarnLevel == 2) {
			sErrMsg = AppGlobal.g_oFuncOutlet.get().getBusinessDay().getDateInString() + " "
					+ AppGlobal.g_oLang.get()._("daily_close_not_yet_completed") + "!" + System.lineSeparator() + System.lineSeparator()
					+ AppGlobal.g_oLang.get()._("you_must_perform_daily_close_procedure") + System.lineSeparator()
					+ AppGlobal.g_oLang.get()._("or_subsequent_sales_will_be_mixed_to") + " " + sBusinessDay;
			this.showWarningDialogBox(sErrMsg);
			
			FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
					AppGlobal.g_oLang.get()._("no"), this);
			oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
			oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("continue") + "?");
			oFormConfirmBox.show();
			if (oFormConfirmBox.isOKClicked() == false)
				return false;
		}
		
		return true;
	}
	
	private void loadFloorMap() {
		// Remove the pointer of floor plan
		m_oFrameTableFloorPlan = null;
		
		// Clear the map if set before
		for (FrameTableFloorPlan oFrameTableFloorPlan : m_oPeriodFrameTableFloorPlanList.values())
			oFrameTableFloorPlan.removeMyself();
		
		m_oPeriodFrameTableFloorPlanList.clear();
		
		ArrayList<FuncLookupButtonInfo> resultDisplayPanelLookupArrayList = null;
		resultDisplayPanelLookupArrayList = this.readTableFloorPlanFunction();
		for (Entry<Integer, OutFloorPlan> entry : AppGlobal.g_oFuncOutlet.get().getFloorPlanList().entrySet()) {
			// Build Floor Plan
			OutFloorPlan oOutFloorPlan = entry.getValue();
			if (oOutFloorPlan == null) {
				continue;
			}
			
			FrameTableFloorPlan oFrameTableFloorPlan = new FrameTableFloorPlan();
			m_oTemplateBuilder.buildFrame(oFrameTableFloorPlan, "fraTableFloorPlan");
			
			oFrameTableFloorPlan.init(resultDisplayPanelLookupArrayList, m_oPosDisplayPanel.getPanelPageNumberByZone(PosDisplayPanelZone.KEY_FLOOR_PLAN_FUNCITON));
			// Add listener;
			oFrameTableFloorPlan.addListener(this);
			oFrameTableFloorPlan.setVisible(false); // Hidden the frame
			this.attachChild(oFrameTableFloorPlan);
			
			// If add table in a batch, skip the re-sequence of table mode
			// tables first
			// Do re-sequence after finish add tables
			oFrameTableFloorPlan.updateTableModeStatusPreProcess();
			
			if (oOutFloorPlan.getMapCount() > 0) {
				for (int i = 0; i < oOutFloorPlan.getMapCount(); i++) {
					OutFloorPlanMap oOutFloorPlanMap = oOutFloorPlan.getMap(i);
					oFrameTableFloorPlan.addMap(oOutFloorPlanMap.getName(), oOutFloorPlanMap.getWidth(),
							oOutFloorPlanMap.getHeight(), oOutFloorPlanMap.getMediaUrl());
					for (int j = 0; j < oOutFloorPlanMap.getTableCount(); j++) {
						OutFloorPlanTable oOutFloorPlanTable = oOutFloorPlanMap.getTable(j);
						oFrameTableFloorPlan.addTable(i + 1, oOutFloorPlanTable.getTop(), oOutFloorPlanTable.getLeft(),
								oOutFloorPlanTable.getWidth(), oOutFloorPlanTable.getHeight(),
								oOutFloorPlanTable.getName(), oOutFloorPlanTable.getShape(),
								oOutFloorPlanTable.getTable(), oOutFloorPlanTable.getTableExt(),
								oOutFloorPlanTable.getSize());
					}
				}
			}
			
			// Do re-sequence after finish add tables
			oFrameTableFloorPlan.updateTableModeStatusPostProcess();
			oFrameTableFloorPlan.addMapIndicator(oOutFloorPlan.getMapCount());
			JSONObject oSwitchCheckInfo = AppGlobal.g_oFuncStation.get().getSwitchCheckInfoSetting();
			boolean bIsTurnOffAllSwitchCheckInfo = this.isTurnOffAllSwitchCheckInfo(oSwitchCheckInfo);
			
			// Add table detail e.g. check open time
			if(bIsTurnOffAllSwitchCheckInfo || (oSwitchCheckInfo != null && oSwitchCheckInfo.optString(FrameTableButton.STATUS_OPEN_TIME).equals("y")))
				oFrameTableFloorPlan.addTableDetailType(FrameTableButton.STATUS_OPEN_TIME,
						AppGlobal.g_oTerm.get().getClientImageURLPath() + "/icons/floor_check_open_time.png");
			if(bIsTurnOffAllSwitchCheckInfo || (oSwitchCheckInfo != null && oSwitchCheckInfo.optString(FrameTableButton.STATUS_COVER_NO).equals("y")))
				oFrameTableFloorPlan.addTableDetailType(FrameTableButton.STATUS_COVER_NO,
						AppGlobal.g_oTerm.get().getClientImageURLPath() + "/icons/floor_cover_no.png");
			if(bIsTurnOffAllSwitchCheckInfo || (oSwitchCheckInfo != null && oSwitchCheckInfo.optString(FrameTableButton.STATUS_CHECK_TOTAL).equals("y")))
				oFrameTableFloorPlan.addTableDetailType(FrameTableButton.STATUS_CHECK_TOTAL, "");
			if(bIsTurnOffAllSwitchCheckInfo || (oSwitchCheckInfo != null && oSwitchCheckInfo.optString(FrameTableButton.STATUS_MEMBER_NUMBER).equals("y")))
				oFrameTableFloorPlan.addTableDetailType(FrameTableButton.STATUS_MEMBER_NUMBER, "");
			if(bIsTurnOffAllSwitchCheckInfo || (oSwitchCheckInfo != null && oSwitchCheckInfo.optString(FrameTableButton.STATUS_MEMBER_NAME).equals("y")))
				oFrameTableFloorPlan.addTableDetailType(FrameTableButton.STATUS_MEMBER_NAME, "");
			if(bIsTurnOffAllSwitchCheckInfo || (oSwitchCheckInfo != null && oSwitchCheckInfo.optString(FrameTableButton.STATUS_OWNER_NAME).equals("y")))
				oFrameTableFloorPlan.addTableDetailType(FrameTableButton.STATUS_OWNER_NAME, "");
			if(AppGlobal.g_oFuncStation.get().isAllowShowTableSize())
				oFrameTableFloorPlan.addTableDetailType(FrameTableButton.STATUS_TABLE_SIZE, "");
			if(oSwitchCheckInfo != null && oSwitchCheckInfo.optString(FrameTableButton.STATUS_CHECK_INFO_ONE).equals("y"))
				oFrameTableFloorPlan.addTableDetailType(FrameTableButton.STATUS_CHECK_INFO_ONE, "");
			if(oSwitchCheckInfo != null && oSwitchCheckInfo.optString(FrameTableButton.STATUS_CHECK_INFO_TWO).equals("y"))
				oFrameTableFloorPlan.addTableDetailType(FrameTableButton.STATUS_CHECK_INFO_TWO, "");
			if(oSwitchCheckInfo != null && oSwitchCheckInfo.optString(FrameTableButton.STATUS_CHECK_INFO_THREE).equals("y"))
				oFrameTableFloorPlan.addTableDetailType(FrameTableButton.STATUS_CHECK_INFO_THREE, "");
			if(oSwitchCheckInfo != null && oSwitchCheckInfo.optString(FrameTableButton.STATUS_CHECK_INFO_FOUR).equals("y"))
				oFrameTableFloorPlan.addTableDetailType(FrameTableButton.STATUS_CHECK_INFO_FOUR, "");
			if(oSwitchCheckInfo != null && oSwitchCheckInfo.optString(FrameTableButton.STATUS_CHECK_INFO_FIVE).equals("y"))
				oFrameTableFloorPlan.addTableDetailType(FrameTableButton.STATUS_CHECK_INFO_FIVE, "");
			
			if (oSwitchCheckInfo != null){
				String sDefaultDisplay = oSwitchCheckInfo.optString("default_display", "");
				if (sDefaultDisplay != null && !sDefaultDisplay.isEmpty())
					oFrameTableFloorPlan.setCurrentDetailByKey(sDefaultDisplay);
			}
			
			// Check support Menu Mode or not. if yes, add Menu Mode frame to
			// table floor plan
			if (AppGlobal.g_oFuncStation.get().getDefaultTableNoForMenuMode() > 0) {
				// Create the start screen for Menu Mode
				oFrameTableFloorPlan.createMenuModeStartScreen(AppGlobal.g_oFuncStation.get().getDefaultTableNoForMenuMode());
			}
			oFrameTableFloorPlan.setMapIndicator(1);
			m_oPeriodFrameTableFloorPlanList.put(entry.getKey(), oFrameTableFloorPlan);
		}
	}
	
	private boolean showFloorPlan(boolean bShowUI, Boolean bIsNowShowingTableMode) {
		// Check the current floor plan ID in current period
		int iNewFloorPlanId = 0;
		boolean bIsTableModeShowing = false;
		if (m_oFrameTableFloorPlan == null) {
			if (bIsNowShowingTableMode != null) {
				if (bIsNowShowingTableMode.booleanValue())
					bIsTableModeShowing = true;
			} else {
				int iOpenTableScreenMode = AppGlobal.g_oFuncStation.get().getOpenTableScreenModeConfig();
				if (iOpenTableScreenMode == FuncStation.OPEN_TABLE_SCREEN_MODE_TABLE_MODE)
					bIsTableModeShowing = true;
			}
		} else
			bIsTableModeShowing = m_oFrameTableFloorPlan.isTableModeShowing();
		
		// *** Need further development
		iNewFloorPlanId = AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getFloorPlanId();
		// floor plan
		if (iNewFloorPlanId == 0) {
			if (m_oPeriodFrameTableFloorPlanList.isEmpty()) {
				// Prompt error
				if (bShowUI)
					this.showErrorDialogBox(AppGlobal.g_oLang.get()._("no_floor_plan_is_defined"));
				return false;
			}
			
			m_oFrameTableFloorPlan = (FrameTableFloorPlan) m_oPeriodFrameTableFloorPlanList.values().toArray()[0];
			if (m_oFrameTableFloorPlan.getMapCount() == 0) {
				this.showErrorDialogBox(AppGlobal.g_oLang.get()._("no_floor_plan_map_is_defined"));
				return false;
			}
			m_oFrameTableFloorPlan.setVisible(true);
			
			m_oFrameTableFloorPlan.setUpdateTableStatusTimer(true);
			
			// Get default setting to check if table mode is on or not
			if (bIsTableModeShowing)
				m_oFrameTableFloorPlan.showTableMode(true);
			
			if ((AppGlobal.g_oFuncStation.get().getOpenTableScreenMode() == FuncStation.OPEN_TABLE_SCREEN_MODE_ASK_TABLE
					|| AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name()))) {
				if (m_oFrameOpenTable != null && m_oFrameOpenTableWithQwertyKeyboard != null) {
					if (AppGlobal.g_oFuncStation.get()
							.getOpenTableScreenKeyboard() == FuncStation.OPEN_TABLE_SCREEN_KEYBOARD_NUMBER) {
						m_oFrameOpenTable.bringToTop();
						m_oFrameOpenTable.setFocusOnTxtBox();
					} else {
						m_oFrameOpenTableWithQwertyKeyboard.bringToTop();
						m_oFrameOpenTableWithQwertyKeyboard.setFocusOnTxtBox();
					}
				}
			}
			
			// Update table status
			updateTableFloorPlanTableStatus(true);
			m_oFrameStationInfoBar.showFunctionButton(true);
			return true;
		}
		
		// Check if floor plan is needed to change by period
		int iCurrentFloorPlanId = 0;
		if (m_oFrameTableFloorPlan != null) {
			for (Entry<Integer, FrameTableFloorPlan> entry : m_oPeriodFrameTableFloorPlanList.entrySet()) {
				if (m_oFrameTableFloorPlan == entry.getValue()) {
					iCurrentFloorPlanId = entry.getKey();
					break;
				}
			}
		}
		
		if (iNewFloorPlanId != iCurrentFloorPlanId) {
			// Check if the new floor plan is existing or not
			if (m_oPeriodFrameTableFloorPlanList.containsKey(iNewFloorPlanId) == false) {
				// Prompt error
				if (bShowUI)
					this.showErrorDialogBox(AppGlobal.g_oLang.get()._("no_floor_plan_is_defined"));
				return false;
			}
			
			// Change floor plan
			// Set the previous floor plan visible = false;
			if (m_oFrameTableFloorPlan != null) {
				m_oFrameTableFloorPlan.setVisible(false);
				updateTableFloorPlanTimer(false);
			}
			
			m_oFrameTableFloorPlan = m_oPeriodFrameTableFloorPlanList.get(iNewFloorPlanId);
			if (m_oFrameTableFloorPlan.getMapCount() == 0) {
				this.showErrorDialogBox(AppGlobal.g_oLang.get()._("no_floor_plan_map_is_defined"));
				return false;
			}
			
			m_oFrameTableFloorPlan.setVisible(true);
			updateTableFloorPlanTimer(true);
			
			// Get default setting to check if table mode is on or not
			if (bIsTableModeShowing)
				m_oFrameTableFloorPlan.showTableMode(true);
			
			if ((AppGlobal.g_oFuncStation.get().getOpenTableScreenMode() == FuncStation.OPEN_TABLE_SCREEN_MODE_ASK_TABLE
					|| AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name()))) {
				if (m_oFrameOpenTable != null && m_oFrameOpenTableWithQwertyKeyboard != null) {
					if (AppGlobal.g_oFuncStation.get().getOpenTableScreenKeyboard() == FuncStation.OPEN_TABLE_SCREEN_KEYBOARD_NUMBER) {
						m_oFrameOpenTable.bringToTop();
						m_oFrameOpenTable.setFocusOnTxtBox();
					} else {
						m_oFrameOpenTableWithQwertyKeyboard.bringToTop();
						m_oFrameOpenTableWithQwertyKeyboard.setFocusOnTxtBox();
					}
				}
			}
			
			// Update table status
			updateTableFloorPlanTableStatus(true);
			m_oFrameStationInfoBar.showFunctionButton(true);
		}
		return true;
	}
	
	private boolean loadOrderingPanel() {
		ArrayList<JSONObject> pagesArrayList = new ArrayList<JSONObject>();
		ArrayList<FuncLookupButtonInfo> displayPanelLookupArrayList = new ArrayList<FuncLookupButtonInfo>();
		List<PosDisplayPanelPage> pages = m_oPosDisplayPanel.filterDisplayPanelPageByZone(PosDisplayPanelZone.KEY_ORDERING);
		List<PosDisplayPanelZone> zones = m_oPosDisplayPanel.filterDisplayPanelZoneByZone(PosDisplayPanelZone.KEY_ORDERING);
		
		if (pages.isEmpty()) // No setup
			return true;
		
		pagesArrayList = preparePageTabsWithPanel(pages);
		
		// For self-kiosk device and self-kiosk mode, resize the ordering Panel, if station info bar is hidden
		if(AppGlobal.g_oFuncStation.get().getStationDevice().isSelfOrderKiosk() && AppGlobal.g_oFuncStation.get().isHideStationInfoBar()) {
			m_oFrameOrderingPanel.setTop(m_oFrameStationInfoBar.getTop() + m_oFrameOrderingPanel.getLeft());
			m_oFrameOrderingPanel.setHeight(m_oFrameOrderingPanel.getHeight() + m_oFrameStationInfoBar.getHeight());
			m_oFrameOrderingPanel.createTabsWithPage(pagesArrayList);
			m_oFrameOrderingPanel.getCommonPageContainer().setHeight(m_oFrameOrderingPanel.getHeight() + m_oFrameStationInfoBar.getHeight());
		} else
			m_oFrameOrderingPanel.createTabsWithPage(pagesArrayList);
		
		// Function Panel
		int iHeaderHeightPercent = 0;
		if (!zones.isEmpty())
			iHeaderHeightPercent = zones.get(0).getHeaderHeightPercent();
		
		int iPanelWidth = m_oFrameOrderingPanel.getWidth();
		int iPanelHeight = m_oFrameOrderingPanel.getHeight();
		
		if (pages.size() > 1){
			if(iHeaderHeightPercent == 0)
				iPanelHeight -= FrameOrderingPanel.PANEL_TAB_HEIGHT;
			else
				iPanelHeight -= m_oFrameOrderingPanel.getHeight() * iHeaderHeightPercent / 100;
		}
		
		// Ordering Panel Background image
		String sMediaUrl = null;
		MedMedia oMedMedia = new MedMedia();
		if (zones.get(0).getMediaId() > 0) {
			oMedMedia.readInfoAndUrlById(zones.get(0).getMediaId());
			sMediaUrl = oMedMedia.getUrl();
		}
		
		int iIndex = 0;
		for (PosDisplayPanelPage page : pages) {
			double dWidthRatio = (double) iPanelWidth / zones.get(iIndex).getBaseWidth();
			double dHeightRatio = (double) iPanelHeight / zones.get(iIndex).getBaseHeight();
			
			displayPanelLookupArrayList = preparePanelLookupArrayWithPanel(
					m_oPosDisplayPanel.filterDisplayPanelLookupByPageId(page.getPageId()), zones.get(iIndex));
			m_oFrameOrderingPanel.createDisplayPanelsWithLookup(pages.indexOf(page) + 1, displayPanelLookupArrayList,
					dWidthRatio, dHeightRatio, sMediaUrl);
			
			if (page.getType().equals("s")) {
				if (!page.getName(1).isEmpty())
					m_oFrameOrderingPanel.getCommonPageContainer().hideHorizontalChild(page.getName(1));
				if (!page.getShortName(1).isEmpty())
					m_oFrameOrderingPanel.getCommonPageContainer().hideHorizontalChild(page.getShortName(1));
			}
			iIndex++;
		}
		
		m_oFrameOrderingPanel.showDisplayPanelAtPage(1);
		
		if (m_iOrderingTimer > 0) {
			// Add check ordering timeout timer
			m_oFrameOrderingPanel.setCheckOrderingTimeout(m_iOrderingTimer);
		}
		return true;
	}
	
	private boolean loadFunctionPanel(int iPanelIndex, String sZoneName) {
		ArrayList<JSONObject> pagesArrayList = new ArrayList<JSONObject>();
		ArrayList<FuncLookupButtonInfo> displayPanelLookupArrayList = new ArrayList<FuncLookupButtonInfo>();
		List<PosDisplayPanelPage> pages = m_oPosDisplayPanel.filterDisplayPanelPageByZone(sZoneName);
		List<PosDisplayPanelZone> zones = m_oPosDisplayPanel.filterDisplayPanelZoneByZone(sZoneName);
		if (pages.isEmpty()) // No setup
			return false;
		
		pagesArrayList = preparePageTabsWithPanel(pages);
		
		if (iPanelIndex == 1) {
		} else {
			m_oFrameFuncPanel2.createTabsWithPage(pagesArrayList);
			
			int iPanelWidth = m_oFrameFuncPanel2.getWidth();
			int iPanelHeight = m_oFrameFuncPanel2.getHeight();
			int iIndex = 0;
			for (PosDisplayPanelPage page : pages) {
				double dWidthRatio = (double) (iPanelWidth - zones.get(iIndex).getLookupPadding())
						/ zones.get(iIndex).getBaseWidth();
				double dHeightRatio = (double) (iPanelHeight - zones.get(iIndex).getLookupPadding())
						/ zones.get(iIndex).getBaseHeight();
				
				displayPanelLookupArrayList = preparePanelLookupArrayWithPanel(
						m_oPosDisplayPanel.filterDisplayPanelLookupByPageId(page.getPageId()), zones.get(iIndex));
				m_oFrameFuncPanel2.createDisplayPanelsWithLookup(pages.indexOf(page) + 1, displayPanelLookupArrayList,
						dWidthRatio, dHeightRatio, null);
				iIndex++;
			}
			
			// Show the first page of panel
			m_oFrameFuncPanel2.showDisplayPanelAtPage(1);
		}
		
		return true;
	}
	
	private boolean loadCashierPanel(String sZoneName) {
		boolean bHideNumberPad = false;
		if (AppGlobal.g_oFuncStation.get().getStationDevice().isSelfOrderKiosk() && AppGlobal.g_oFuncStation.get().isHideCashierPanelNumpad())
			bHideNumberPad = true;
		// Direct payment panel
		m_oFrameDirectPaymentPanel = new FrameDirectPaymentPanel(bHideNumberPad, m_oFuncPayment.isSupportSurcharge());
		m_oTemplateBuilder.buildFrame(m_oFrameDirectPaymentPanel, "fraDirectPaymentPanel");
		m_oFrameDirectPaymentPanel.resetNumpadHeight();
		m_oFrameDirectPaymentPanel.setTitle(AppGlobal.g_oLang.get()._("direct_payment", ""));
		m_oFrameDirectPaymentPanel.addListener(this);
		this.attachChild(m_oFrameDirectPaymentPanel);
		
		ArrayList<JSONObject> pagesArrayList = new ArrayList<JSONObject>();
		ArrayList<FuncLookupButtonInfo> displayPanelLookupArrayList = new ArrayList<FuncLookupButtonInfo>();
		List<PosDisplayPanelPage> pages = m_oPosDisplayPanel.filterDisplayPanelPageByZone(sZoneName);
		List<PosDisplayPanelZone> zones = m_oPosDisplayPanel.filterDisplayPanelZoneByZone(sZoneName);
		
		if (pages.isEmpty()) { // No setup
			loadCashierPanel();
			return false;
		} else {
			m_oFrameCashier = new FrameCashier(false, bHideNumberPad, m_oFuncPayment.isSupportSurcharge());
			m_oTemplateBuilder.buildFrame(m_oFrameCashier, "fraCashier");
			m_oFrameCashier.resetNumpadHeight();
			m_oFrameCashier.addListener(this);
			this.attachChild(m_oFrameCashier);
			
			m_oFrameCashierPanel = new FrameOrderingPanel();
			m_oTemplateBuilder.buildFrame(m_oFrameCashierPanel, "fraCashierPanel");
			
			// Set custom height and width for cashier panel
			
			m_oFrameCashierPanel.addListener(this);
			this.attachChild(m_oFrameCashierPanel);
			
			// Hide the screen first
			showCashierScreen(false, false);
		}
		
		pagesArrayList = preparePageTabsWithPanel(pages);
		
		m_oFrameCashierPanel.createTabsWithPage(pagesArrayList);
		
		int iPanelWidth = m_oFrameCashierPanel.getWidth();
		int iPanelHeight = m_oFrameCashierPanel.getHeight();
		if (pages.size() > 1)
			iPanelHeight -= FrameOrderingPanel.PANEL_TAB_HEIGHT;
		int iIndex = 0;
		for (PosDisplayPanelPage page : pages) {
			double dWidthRatio = (double) iPanelWidth / zones.get(iIndex).getBaseWidth();
			double dHeightRatio = (double) iPanelHeight / zones.get(iIndex).getBaseHeight();
			
			displayPanelLookupArrayList = preparePanelLookupArrayWithPanel(
					m_oPosDisplayPanel.filterDisplayPanelLookupByPageId(page.getPageId()), zones.get(iIndex));
			m_oFrameCashierPanel.createDisplayPanelsWithLookup(pages.indexOf(page) + 1, displayPanelLookupArrayList,
					dWidthRatio, dHeightRatio, null);
			iIndex++;
		}
		// Show the first page of panel
		m_oFrameCashierPanel.showDisplayPanelAtPage(1);
		
		if (m_iCashierTimer > 0){
			// Add check cashier timeout timer
			m_oFrameOrderingPanel.setCheckCashierTimeout(m_iCashierTimer);
		}
		
		return true;
	}
	
	private boolean loadCashierPanel() {
		boolean bHideNumberPad = false;
		if (AppGlobal.g_oFuncStation.get().getStationDevice().isSelfOrderKiosk() && AppGlobal.g_oFuncStation.get().isHideCashierPanelNumpad())
			bHideNumberPad = true;
		m_oFrameCashier = new FrameCashier(false, bHideNumberPad, m_oFuncPayment.isSupportSurcharge());
		m_oTemplateBuilder.buildFrame(m_oFrameCashier, "fraCashier");
		m_oFrameCashier.resetNumpadHeight();
		m_oFrameCashier.addListener(this);
		this.attachChild(m_oFrameCashier);
		
		m_oFrameCashierPanel = new FrameOrderingPanel();
		m_oTemplateBuilder.buildFrame(m_oFrameCashierPanel, "fraCashierPanel");
		
		m_oFrameCashierPanel.addListener(this);
		this.attachChild(m_oFrameCashierPanel);
		
		try {
			int iMaxMethodCount = 20; // Define no of payment methods in each
			// page
			if (AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name()))
				iMaxMethodCount = 6;
			
			PosPaymentMethodList oPosPaymentMethodList = m_oFuncPayment.getPaymentMethodList();
			int iPaymentMethodCount = oPosPaymentMethodList.getPaymentMethodListForDisplay().size();
			int iPageCount = (iPaymentMethodCount / iMaxMethodCount);
			if (iPaymentMethodCount % iMaxMethodCount > 0)
				iPageCount++;
			
			JSONArray oJSONArrayPages = new JSONArray();
			// Show payment methods each page
			for (int i = 1; i <= iPageCount; i++) {
				// Create the payment method page
				PosDisplayPanelPage oPosDisplayPanelPage = new PosDisplayPanelPage();
				
				// Set name
				String[] sNameArray = AppGlobal.g_oLang.get()._("method_list", " ", i);
				for (int j = 0; j < AppGlobal.LANGUAGE_COUNT; j++) {
					oPosDisplayPanelPage.setName(j + 1, sNameArray[j]);
				}
				
				oPosDisplayPanelPage.setPageId(i);
				oPosDisplayPanelPage.setStatus(PosDisplayPanelPage.STATUS_ACTIVE);
				JSONObject oJSONObjectPageContent = new JSONObject();
				oJSONObjectPageContent = oPosDisplayPanelPage.constructAddSaveJSON(true);
				
				JSONObject oJSONObjectPage = new JSONObject();
				oJSONObjectPage.put("PosDisplayPanelPage", oJSONObjectPageContent);
				
				// Create zone
				PosDisplayPanelZone oPosDisplayPanelZone = new PosDisplayPanelZone();
				oPosDisplayPanelZone.setZoneId(i);
				oPosDisplayPanelZone.setKey("payment");
				oPosDisplayPanelZone.setStatus(PosDisplayPanelZone.STATUS_ACTIVE);
				oPosDisplayPanelZone.setLookupPadding(2);
				JSONObject oJSONObjectZone = new JSONObject();
				oJSONObjectZone = oPosDisplayPanelZone.constructAddSaveJSON(true);
				oJSONObjectPage.put("PosDisplayPanelZone", oJSONObjectZone);
				
				// Create content
				int j = 0;
				int iAddButtonCount = 0;
				int iColumnCount = 5;
				if (AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name()))
					iColumnCount = 3;
				JSONArray oJSONArrayLookups = new JSONArray();
				for (Map.Entry<Integer, PosPaymentMethod> entry : oPosPaymentMethodList.getPaymentMethodListForDisplay()
						.entrySet()) {
					PosPaymentMethod oPosPaymentMethod = entry.getValue();
					
					if (iAddButtonCount == 0 && ((j + 1) / iMaxMethodCount) == (i - 1)
							&& ((j + 1) % iMaxMethodCount) > 0) {
						iAddButtonCount = 1;
					}
					
					if (iAddButtonCount > 0 && iAddButtonCount <= iMaxMethodCount) {
						PosDisplayPanelLookup oPosDisplayPanelLookup = new PosDisplayPanelLookup();
						oPosDisplayPanelLookup.setPaymentId(oPosPaymentMethod.getPaymId());
						oPosDisplayPanelLookup.setType(PosDisplayPanelLookup.TYPE_DIRECT_PAYMENT);
						oPosDisplayPanelLookup.setTop((iAddButtonCount - 1) / iColumnCount * 150);
						oPosDisplayPanelLookup.setLeft((iAddButtonCount - 1) % iColumnCount * 150);
						oPosDisplayPanelLookup.setWidth(150);
						oPosDisplayPanelLookup.setHeight(150);
						oPosDisplayPanelLookup.setCharacter("");
						for (int l = 1; l <= 5; l++) {
							String sPaymentMethod;
							if (oPosPaymentMethod.getShortName(l).isEmpty())
								sPaymentMethod = oPosPaymentMethod.getName(l);
							else
								sPaymentMethod = oPosPaymentMethod.getShortName(l);
							oPosDisplayPanelLookup.setName(l, sPaymentMethod);
						}
						
						JSONObject oJSONObjectLookup = new JSONObject();
						JSONObject oJSONObjectLookupContent = new JSONObject();
						oJSONObjectLookupContent = oPosDisplayPanelLookup.constructAddSaveJSON(true);
						oJSONObjectLookup.put("PosDisplayPanelLookup", oJSONObjectLookupContent);
						
						JSONObject oJSONObjectLookupDisplayStyle = new JSONObject();
						oJSONObjectLookup.put("PosDisplayStyle", oJSONObjectLookupDisplayStyle);
						
						JSONObject oJSONObjectLookupFunction = new JSONObject();
						oJSONObjectLookup.put("PosFunction", oJSONObjectLookupFunction);
						
						// Add to array
						oJSONArrayLookups.put(oJSONObjectLookup);
						
						iAddButtonCount++;
					}
					
					if (iAddButtonCount > iMaxMethodCount)
						break;
					
					j++;
				}
				
				oJSONObjectPage.put("display_panel_lookups", oJSONArrayLookups);
				
				oJSONArrayPages.put(oJSONObjectPage);
			}
			
			// Prepare the cashier panel
			PosDisplayPanel oPosCashierDisplayPanel = new PosDisplayPanel();
			oPosCashierDisplayPanel.setStatus(PosDisplayPanel.STATUS_ACTIVE);
			JSONObject oJSONObjectPanel = new JSONObject();
			oJSONObjectPanel = oPosCashierDisplayPanel.constructAddSaveJSON(true);
			oJSONObjectPanel.put("display_panel_pages", oJSONArrayPages);
			
			JSONObject oJSONObject = new JSONObject();
			oJSONObject.put("PosDisplayPanel", oJSONObjectPanel);
			
			m_oPosCashierDisplayPanel = new PosDisplayPanel(oJSONObject);
			
		} catch (JSONException e) {
			AppGlobal.stack2Log(e);
		}
		
		ArrayList<JSONObject> pagesArrayList = new ArrayList<JSONObject>();
		ArrayList<FuncLookupButtonInfo> displayPanelLookupArrayList = new ArrayList<FuncLookupButtonInfo>();
		List<PosDisplayPanelPage> pages = m_oPosCashierDisplayPanel.filterDisplayPanelPageByZone("payment");
		List<PosDisplayPanelZone> zones = m_oPosCashierDisplayPanel.filterDisplayPanelZoneByZone("payment");
		
		// Hide the screen first
		showCashierScreen(false, false);
		
		if (pages.isEmpty()) // No setup
			return true;
		
		pagesArrayList = preparePageTabsWithPanel(pages);
		m_oFrameCashierPanel.createTabsWithPage(pagesArrayList);
		
		int iIndex = 0;
		for (PosDisplayPanelPage page : pages) {
			displayPanelLookupArrayList = preparePanelLookupArrayWithPanel(
					m_oPosCashierDisplayPanel.filterDisplayPanelLookupByPageId(page.getPageId()), zones.get(iIndex));
			m_oFrameCashierPanel.createDisplayPanelsWithLookup(pages.indexOf(page) + 1, displayPanelLookupArrayList, 1, 1, null);
			iIndex++;
		}
		m_oFrameCashierPanel.showDisplayPanelAtPage(1);
		
		return true;
	}
	
	private boolean loadAdminPanelConfig() {
		LinkedHashMap<String[], List<PosFunction>> oPosFunctionList = this.prepareAdminFunctionList();
		try {
			JSONArray oJSONArrayPages = new JSONArray();
			// Show payment methods each page
			int i = 0;
			int iPadding = 8;
			for (Map.Entry<String[], List<PosFunction>> entry1 : oPosFunctionList.entrySet()) {
				// Create the payment method page
				PosDisplayPanelPage oPosDisplayPanelPage = new PosDisplayPanelPage();
				
				// Set name
				String[] sNameArray = entry1.getKey();
				for (int j = 0; j < AppGlobal.LANGUAGE_COUNT; j++) {
					oPosDisplayPanelPage.setName(j + 1, sNameArray[j]);
				}
				
				oPosDisplayPanelPage.setPageId(i);
				oPosDisplayPanelPage.setStatus(PosDisplayPanelPage.STATUS_ACTIVE);
				JSONObject oJSONObjectPageContent = new JSONObject();
				oJSONObjectPageContent = oPosDisplayPanelPage.constructAddSaveJSON(true);
				
				JSONObject oJSONObjectPage = new JSONObject();
				oJSONObjectPage.put("PosDisplayPanelPage", oJSONObjectPageContent);
				
				// Create zone
				PosDisplayPanelZone oPosDisplayPanelZone = new PosDisplayPanelZone();
				oPosDisplayPanelZone.setZoneId(i);
				oPosDisplayPanelZone.setKey("function");
				oPosDisplayPanelZone.setStatus(PosDisplayPanelZone.STATUS_ACTIVE);
				oPosDisplayPanelZone.setLookupPadding(iPadding);
				JSONObject oJSONObjectZone = new JSONObject();
				oJSONObjectZone = oPosDisplayPanelZone.constructAddSaveJSON(true);
				oJSONObjectPage.put("PosDisplayPanelZone", oJSONObjectZone);
				
				// Create content
				int j = 1;
				int iColumnCount = 6;
				if (AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name()))
					iColumnCount = 3;
				int iWidth = 160;
				int iHeight = 72;
				JSONArray oJSONArrayLookups = new JSONArray();
				for (PosFunction oPosFunction : entry1.getValue()) {
					
					PosDisplayPanelLookup oPosDisplayPanelLookup = new PosDisplayPanelLookup();
					
					oPosDisplayPanelLookup.setFunctionId(oPosFunction.getFuncId());
					oPosDisplayPanelLookup.setType(PosDisplayPanelLookup.TYPE_FUNCTION);
					
					oPosDisplayPanelLookup.setTop((j - 1) / iColumnCount * iHeight);
					oPosDisplayPanelLookup.setLeft((j - 1) % iColumnCount * iWidth);
					
					oPosDisplayPanelLookup.setWidth(iWidth);
					oPosDisplayPanelLookup.setHeight(iHeight);
					oPosDisplayPanelLookup.setCharacter("");
					for (int l = 1; l <= 5; l++) {
						String sFunction;
						if (oPosFunction.getShortName(l).isEmpty())
							sFunction = oPosFunction.getName(l);
						else
							sFunction = oPosFunction.getShortName(l);
						oPosDisplayPanelLookup.setName(l, sFunction);
					}
					
					JSONObject oJSONObjectLookup = new JSONObject();
					JSONObject oJSONObjectLookupContent = new JSONObject();
					oJSONObjectLookupContent = oPosDisplayPanelLookup.constructAddSaveJSON(true);
					oJSONObjectLookup.put("PosDisplayPanelLookup", oJSONObjectLookupContent);
					
					JSONObject oJSONObjectLookupDisplayStyle = new JSONObject();
					oJSONObjectLookup.put("PosDisplayStyle", oJSONObjectLookupDisplayStyle);
					
					// Add to array
					oJSONArrayLookups.put(oJSONObjectLookup);
					
					j++;
				}
				
				oJSONObjectPage.put("display_panel_lookups", oJSONArrayLookups);
				
				oJSONArrayPages.put(oJSONObjectPage);
				i++;
			}
			
			// Prepare the cashier panel
			PosDisplayPanel oPosCashierDisplayPanel = new PosDisplayPanel();
			oPosCashierDisplayPanel.setStatus(PosDisplayPanel.STATUS_ACTIVE);
			JSONObject oJSONObjectPanel = new JSONObject();
			oJSONObjectPanel = oPosCashierDisplayPanel.constructAddSaveJSON(true);
			oJSONObjectPanel.put("display_panel_pages", oJSONArrayPages);
			
			JSONObject oJSONObject = new JSONObject();
			oJSONObject.put("PosDisplayPanel", oJSONObjectPanel);
			
			m_oPosAdminPanel = new PosDisplayPanel(oJSONObject);
			
		} catch (JSONException e) {
			AppGlobal.stack2Log(e);
		}
		
		return true;
	}
	
	private void initAdminPanel(){
		ArrayList<JSONObject> pagesArrayList = new ArrayList<JSONObject>();
		ArrayList<FuncLookupButtonInfo> displayPanelLookupArrayList = new ArrayList<FuncLookupButtonInfo>();
		List<PosDisplayPanelPage> pages = m_oPosAdminPanel.filterDisplayPanelPageByZone("function");
		List<PosDisplayPanelZone> zones = m_oPosAdminPanel.filterDisplayPanelZoneByZone("function");
		
		if (pages.isEmpty()) // No setup
			return;
		
		pagesArrayList = preparePageTabsWithPanel(pages);
		
		// Open Admin Panel
		m_oFrameAdminPanel = new FrameAdminPanel();
		
		// Load form from template file
		m_oTemplateBuilder.buildFrame(m_oFrameAdminPanel, "fraAdminPanel");
		m_oFrameAdminPanel.addListener(this);
		this.attachChild(m_oFrameAdminPanel);
		
		if (AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.horizontal_desktop.name()))
			m_oFrameAdminPanel.initCommonPageContainer(60, 130, 976, 600, 160, 90, 5, "#0055B8", "#999999", "#FFFFFF", "#FFFFFF", 26, true, true);
		else
			m_oFrameAdminPanel.initCommonPageContainer(0, 0, 478, 748, 120, 60, 3, "#FFFFFF", "#015384", "#015384", "#CEEDFF", 0, false, true);
		m_oFrameAdminPanel.createTabsWithPage(pagesArrayList);
		
		int iIndex = 0;
		for (PosDisplayPanelPage page : pages) {
			displayPanelLookupArrayList = preparePanelLookupArrayWithPanel(
					m_oPosAdminPanel.filterDisplayPanelLookupByPageId(page.getPageId()), zones.get(iIndex));
			for(FuncLookupButtonInfo oFuncLookupButtonInfo : displayPanelLookupArrayList){
				oFuncLookupButtonInfo.setTop(oFuncLookupButtonInfo.getTop() + 25);
				oFuncLookupButtonInfo.setLeft(oFuncLookupButtonInfo.getLeft() + m_oFrameOrderingBasket.getShadowRadius());
				oFuncLookupButtonInfo.setWidth(oFuncLookupButtonInfo.getWidth() + (m_oFrameOrderingBasket.getShadowRadius() * 2));
				oFuncLookupButtonInfo.setHeight(oFuncLookupButtonInfo.getHeight() + (m_oFrameOrderingBasket.getShadowRadius() * 2));
			}
			m_oFrameAdminPanel.createDisplayPanelsWithLookup(pages.indexOf(page) + 1, displayPanelLookupArrayList, 1, 1);
			iIndex++;
		}
		m_oFrameAdminPanel.setVisible(false);
	}
	
	private List<PosFunction> generatePosFunctionList(String[] oFuncKeyList) {
		List<PosFunction> oFunctionList = new ArrayList<PosFunction>();
		for (String sFuncKey : oFuncKeyList) {
			if (AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name())) {
				if (sFuncKey.equals(AppGlobal.FUNC_LIST.cashier_mode.name())
						|| sFuncKey.equals(AppGlobal.FUNC_LIST.stock_balance_chg.name())
						|| sFuncKey.equals(AppGlobal.FUNC_LIST.wastage_operation.name())
						|| sFuncKey.equals(AppGlobal.FUNC_LIST.search_item_stock.name()))
					continue;
			}
			
			if (!FuncInventoryInterface.isSupportInventInterface()) {
				if (sFuncKey.equals(AppGlobal.FUNC_LIST.wastage_operation.name())
						|| sFuncKey.equals(AppGlobal.FUNC_LIST.search_item_stock.name()))
					continue;
			}
			
			if (!AppGlobal.g_oFuncStation.get().isPartialPayment()
					&& sFuncKey.equals(AppGlobal.FUNC_LIST.void_payment.name()))
				continue;
			
			PosFunction oFunction = m_oFunctionList.getFunctionByKey(sFuncKey);
			if (oFunction != null)
				oFunctionList.add(oFunction);
		}
		return oFunctionList;
	}
	
	public LinkedHashMap<String[], List<PosFunction>> prepareAdminFunctionList() {
		LinkedHashMap<String[], List<PosFunction>> oPosFunctionList = new LinkedHashMap<String[], List<PosFunction>>();
		
		/** General*/
		String[] sGeneralFuncKeyList = { AppGlobal.FUNC_LIST.logout.name(), AppGlobal.FUNC_LIST.change_password.name(),
				AppGlobal.FUNC_LIST.change_language.name(), AppGlobal.FUNC_LIST.assign_employee_card_number.name(),
				AppGlobal.FUNC_LIST.testing_printer.name(), AppGlobal.FUNC_LIST.toggle_fast_food_mode.name(),
				AppGlobal.FUNC_LIST.toggle_self_order_kiosk_mode.name(), AppGlobal.FUNC_LIST.toggle_bar_tab_mode.name(),
				AppGlobal.FUNC_LIST.open_drawer.name() };
		oPosFunctionList.put(AppGlobal.g_oLang.get()._("general", ""),
				this.generatePosFunctionList(sGeneralFuncKeyList));
		
		/** Check Operation*/
		String[] sCheckOperationFuncKeyList = { AppGlobal.FUNC_LIST.void_check.name(),
				AppGlobal.FUNC_LIST.release_payment.name(), AppGlobal.FUNC_LIST.void_payment.name(),
				AppGlobal.FUNC_LIST.cashier_mode.name(), AppGlobal.FUNC_LIST.check_listing.name(),
				AppGlobal.FUNC_LIST.cashier_settlement.name(), AppGlobal.FUNC_LIST.print_paid_check.name(),
				AppGlobal.FUNC_LIST.unlock_table.name(), AppGlobal.FUNC_LIST.refresh_table_status_by_table_num.name() };
		oPosFunctionList.put(AppGlobal.g_oLang.get()._("check_operation", ""), 	this.generatePosFunctionList(sCheckOperationFuncKeyList));
		
		/** Business Operation*/
		String[] sBusinessDayOperationFuncKeyList = { AppGlobal.FUNC_LIST.reload_business_setting.name(),
				AppGlobal.FUNC_LIST.daily_close.name(), AppGlobal.FUNC_LIST.paid_in.name(),
				AppGlobal.FUNC_LIST.paid_out.name(), AppGlobal.FUNC_LIST.drop.name() };
		oPosFunctionList.put(AppGlobal.g_oLang.get()._("business_operation", ""), this.generatePosFunctionList(sBusinessDayOperationFuncKeyList));
		
		/** Stock*/
		String[] sStockFuncKeyList = { AppGlobal.FUNC_LIST.stock_delivery_invoice_setup.name(),
				AppGlobal.FUNC_LIST.receive_stock_delivery_invoice.name(), AppGlobal.FUNC_LIST.stock_soldout.name(), AppGlobal.FUNC_LIST.stock_soldout_by_shop.name(),
				AppGlobal.FUNC_LIST.stock_operation.name(), AppGlobal.FUNC_LIST.stock_balance_chg.name(),
				AppGlobal.FUNC_LIST.wastage_operation.name(), AppGlobal.FUNC_LIST.search_item_stock.name() };
		
		oPosFunctionList.put(AppGlobal.g_oLang.get()._("stock", ""), this.generatePosFunctionList(sStockFuncKeyList));
		
		/* * Report*/
		String[] sReprtionFuncKeyList = { AppGlobal.FUNC_LIST.web_report.name(),
				AppGlobal.FUNC_LIST.direct_report.name() };
		oPosFunctionList.put(AppGlobal.g_oLang.get()._("report", ""), this.generatePosFunctionList(sReprtionFuncKeyList));
		
		/** Past Date Check*/
		String[] sPastDayCheckFuncKeyList = { AppGlobal.FUNC_LIST.print_past_date_check.name() };
		oPosFunctionList.put(AppGlobal.g_oLang.get()._("print_past_date_check", ""), this.generatePosFunctionList(sPastDayCheckFuncKeyList));
		
		/**PMS Operation*/
		if (FuncPMS.isSupportPMS()) {
			String[] sPmsOperationFuncKeyList = { AppGlobal.FUNC_LIST.restart_pms_shell.name(),
					AppGlobal.FUNC_LIST.stop_pms_shell.name(), AppGlobal.FUNC_LIST.pms_enquiry.name() };
			oPosFunctionList.put(AppGlobal.g_oLang.get()._("pms_operation", ""), this.generatePosFunctionList(sPmsOperationFuncKeyList));
		}
		
		/** Payment Interface Operation*/
		if (FuncPaymentInterface.isSupportPaymentInterface()) {
			String[] sPaymentInterfaceOperationFuncKeyList = {
					AppGlobal.FUNC_LIST.restart_payment_interface_shell.name(),
					AppGlobal.FUNC_LIST.stop_payment_interface_shell.name(),
					AppGlobal.FUNC_LIST.restart_auto_station.name(),
					AppGlobal.FUNC_LIST.scanpay_status_enquiry.name() };
			oPosFunctionList.put(AppGlobal.g_oLang.get()._("payment_interface_operation", ""), this.generatePosFunctionList(sPaymentInterfaceOperationFuncKeyList));
		}
		
		if (FuncStation.isSupportPortalInterface()) {
			String[] sProtalInterfaceOperationFuncKeyList = { AppGlobal.FUNC_LIST.restart_portal_station.name() };
			oPosFunctionList.put(AppGlobal.g_oLang.get()._("portal_interface_operation", ""), this.generatePosFunctionList(sProtalInterfaceOperationFuncKeyList));
		}
		
		/** Membership Interface Operation*/
		String[] sMembershipInterfaceOperationFuncKeyList = { AppGlobal.FUNC_LIST.svc_enquiry.name(),
				AppGlobal.FUNC_LIST.membership_registration.name() };
		oPosFunctionList.put(AppGlobal.g_oLang.get()._("membership_interface_operation", ""), this.generatePosFunctionList(sMembershipInterfaceOperationFuncKeyList));
		
		return oPosFunctionList;
	}
	
	private boolean loadFloorPlanFunctionPanel() {
		if(m_oFrameFloorPlanFunc != null)
			m_oFrameFloorPlanFunc.removeMyself();
		m_oFrameFloorPlanFunc = new FrameLargePopUpPanel(AppGlobal.g_oLang.get()._("operation_type", ""), AppGlobal.g_oLang.get()._("please_select", ""));
		m_oTemplateBuilder.buildFrame(m_oFrameFloorPlanFunc, "fraFloorPlanFuncPanel");
		m_oFrameFloorPlanFunc.addListener(this);
		this.attachChild(m_oFrameFloorPlanFunc);
		m_oFrameFloorPlanFunc.setVisible(false);
		
		if(m_oFrameFloorPlanFunctionPanel != null)
			m_oFrameFloorPlanFunctionPanel.removeMyself();
		
		m_oFrameFloorPlanFunctionPanel = new FrameOrderingPanel();
		
		m_oTemplateBuilder.buildFrame(m_oFrameFloorPlanFunctionPanel, "fraFloorPlanFuncPanelLookup");
		m_oFrameFloorPlanFunctionPanel.addListener(this);
		this.attachChild(m_oFrameFloorPlanFunctionPanel);
		m_oFrameFloorPlanFunctionPanel.setVisible(false);
		
		ArrayList<JSONObject> pagesArrayList = new ArrayList<JSONObject>();
		ArrayList<FuncLookupButtonInfo> displayPanelLookupArrayList = new ArrayList<FuncLookupButtonInfo>();
		List<PosDisplayPanelPage> pages = m_oPosDisplayPanel
				.filterDisplayPanelPageByZone(PosDisplayPanelZone.KEY_FLOOR_PLAN_FUNCITON);
		List<PosDisplayPanelZone> zones = m_oPosDisplayPanel
				.filterDisplayPanelZoneByZone(PosDisplayPanelZone.KEY_FLOOR_PLAN_FUNCITON);
		
		pagesArrayList = preparePageTabsWithPanel(pages);
		
		m_oFrameFloorPlanFunctionPanel.createTabsWithPage(pagesArrayList);
		
		int iPanelWidth = m_oFrameFloorPlanFunctionPanel.getWidth();
		int iPanelHeight = m_oFrameFloorPlanFunctionPanel.getHeight();
		if (pages.size() > 1)
			iPanelHeight -= FrameOrderingPanel.PANEL_TAB_HEIGHT;
		int iIndex = 0;
		for (PosDisplayPanelPage page : pages) {
			double dWidthRatio = (double) iPanelWidth / zones.get(iIndex).getBaseWidth();
			double dHeightRatio = (double) iPanelHeight / zones.get(iIndex).getBaseHeight();
			
			displayPanelLookupArrayList = preparePanelLookupArrayWithPanel(
					m_oPosDisplayPanel.filterDisplayPanelLookupByPageId(page.getPageId()), zones.get(iIndex));
			
			ArrayList<FuncLookupButtonInfo> resultDisplayPanelLookupArrayList = new ArrayList<FuncLookupButtonInfo>();
			for (FuncLookupButtonInfo oButtonInfo : displayPanelLookupArrayList) {
				String sType = oButtonInfo.getType();
				if (!sType.equals(PosDisplayPanelLookup.TYPE_FUNCTION))
					continue;
				
				resultDisplayPanelLookupArrayList.add(oButtonInfo);
			}
			m_oFrameFloorPlanFunctionPanel.createDisplayPanelsWithLookup(pages.indexOf(page) + 1,
					resultDisplayPanelLookupArrayList, dWidthRatio, dHeightRatio, null);
			iIndex++;
		}
		// Show the first page of panel
		m_oFrameFloorPlanFunctionPanel.showDisplayPanelAtPage(1);
		
		FrameOrderingPanel oFrameFloorPlanFunctionPanel = m_oFrameFloorPlanFunctionPanel;
		m_oFrameFloorPlanFunc.setContentFrame(oFrameFloorPlanFunctionPanel);
		
		return true;
	}
	
	// Prepare Ordering Panel Tabs
	private ArrayList<JSONObject> preparePageTabsWithPanel(List<PosDisplayPanelPage> posDisplayPanelPages) {
		ArrayList<JSONObject> displayPanelPage = new ArrayList<JSONObject>();
		
		for (PosDisplayPanelPage posDisplayPanelPage : posDisplayPanelPages) {
			JSONObject oJSONObject = new JSONObject();
			try {
				String[] sNameArray = new String[AppGlobal.LANGUAGE_COUNT];
				for (int i = 0; i < AppGlobal.LANGUAGE_COUNT; i++) {
					int iBilingualLangIndex = AppGlobal.g_oFuncOutlet.get().getBilingualLangIndexByeLangIndex(i + 1);
					sNameArray[i] = posDisplayPanelPage.getBilingualName(i + 1, iBilingualLangIndex);
				}
				oJSONObject.put(FrameOrderingPanel.PAGE_NAME, sNameArray);
				oJSONObject.put(FrameOrderingPanel.PAGE_TYPE, posDisplayPanelPage.getType());
				oJSONObject.put(FrameOrderingPanel.PANEL_PAGE_ID, posDisplayPanelPage.getPageId());
			} catch (JSONException e) {
				e.printStackTrace();
			}
			
			displayPanelPage.add(oJSONObject);
		}
		
		return displayPanelPage;
	}
	
	// Prepare Ordering Panel Content
	private ArrayList<FuncLookupButtonInfo> preparePanelLookupArrayWithPanel(
			List<PosDisplayPanelLookup> posDisplayPanelLookups, PosDisplayPanelZone oPosDisplayPanelZone) {
		ArrayList<FuncLookupButtonInfo> displayPanelLookup = new ArrayList<FuncLookupButtonInfo>();
		MenuItem oMenuItem = null;
		MenuMenu oMenuMenu = null;
		
		for (PosDisplayPanelLookup posDisplayPanelLookup : posDisplayPanelLookups) {
			FuncLookupButtonInfo oButtonInfo = new FuncLookupButtonInfo();
			// Bilingual display
			if (posDisplayPanelLookup.isAlphabetNumberic())
				oButtonInfo.setName(
						StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, posDisplayPanelLookup.getCharacter()));
			else {
				String[] sNameArray = new String[AppGlobal.LANGUAGE_COUNT];
				for (int i = 0; i < AppGlobal.LANGUAGE_COUNT; i++) {
					int iBilingualLangIndex = AppGlobal.g_oFuncOutlet.get().getBilingualLangIndexByeLangIndex(i + 1);
					sNameArray[i] = posDisplayPanelLookup.getBilingualName(i + 1, iBilingualLangIndex);
				}
				
				oButtonInfo.setName(sNameArray);
			}
			oButtonInfo.setAllowImage(true);
			oButtonInfo.setAllowIconImage(true);
			
			oButtonInfo.setHaveStockQty(true);
			oButtonInfo.setType(posDisplayPanelLookup.getType());
			oButtonInfo.setParameter(posDisplayPanelLookup.getParam());
			boolean bBlockUI = false;
			if (posDisplayPanelLookup.isHotItem() || posDisplayPanelLookup.isHotModifier()) {
				// hot item or hot modifier
				oMenuItem = m_oPosDisplayPanel
						.getMenuItemFromDisplayPanelMenuItemList(posDisplayPanelLookup.getItemId());
				if (oMenuItem != null) {
					if (oMenuItem.isInactiveMode())
						continue;
					if (oMenuItem.getChildCount() > 0) {
						// Has child item, click block UI
						bBlockUI = true;
					} else {
						if (oMenuItem.isForceModifierSelectModifierMethod()) {
							for (int i = 0; i < 10; i++) {
								if (oMenuItem.getSelectModifierMenuId(i) > 0) {
									// Has force modifier, click block UI
									bBlockUI = true;
									break;
								}
							}
						}
					}
					
					// Check the corresponding setup of pos_display_panel_lookup
					// (not_show_image)
					if (!posDisplayPanelLookup.getParamByVariableName(PosDisplayPanelLookup.PARAM_NOT_SHOW_IMAGE).isEmpty()) {
						if (posDisplayPanelLookup.getParamByVariableName(PosDisplayPanelLookup.PARAM_NOT_SHOW_IMAGE).equals(PosDisplayPanelLookup.PARAM_NOT_SHOW_IMAGE_TRUE))
							oButtonInfo.setImage(null);
						else
							oButtonInfo.setImage(oMenuItem.getMediaUrl(MenuMediaObject.USED_FOR_THUMBNAIL));
					} else {
						if (AppGlobal.g_oFuncStation.get().getOrderingPanelNotShowImage() == true)
							oButtonInfo.setImage(null);
						else
							oButtonInfo.setImage(oMenuItem.getMediaUrl(MenuMediaObject.USED_FOR_THUMBNAIL));
					}
					
					boolean bOrderingPanelShowPrice = AppGlobal.g_oFuncStation.get().getOrderingPanelShowPrice();
					if (bOrderingPanelShowPrice) {
						// Show item price in button
						if (posDisplayPanelLookup.isHotItem()) {
							if (oMenuItem
									.getBasicPriceByPriceLevel(AppGlobal.g_oFuncOutlet.get().getPriceLevel()) != null)
								oButtonInfo.setPrice(
										AppGlobal.g_oFuncOutlet.get().getCurrencySign() + StringLib.BigDecimalToString(
												oMenuItem.getBasicPriceByPriceLevel(
														AppGlobal.g_oFuncOutlet.get().getPriceLevel()),
												AppGlobal.g_oFuncOutlet.get().getItemRoundDecimal()));
						}
					}
				}
				oButtonInfo.setId(posDisplayPanelLookup.getItemId());
				oButtonInfo.setBlockUI(bBlockUI);
			} else if (posDisplayPanelLookup.isMenuLookup() || posDisplayPanelLookup.isModifierLookup()) {
				// menu lookup or modifier lookup
				oMenuMenu = m_oPosDisplayPanel
						.getMenuMenuFromDisplayPanelMenuMenuList(posDisplayPanelLookup.getMenuId());
				if (oMenuMenu != null) {
					// Click block UI
					oButtonInfo.setBlockUI(true);
					// Check the corresponding setup of pos_config
					// (not_show_image)
					if (AppGlobal.g_oFuncStation.get().getOrderingPanelNotShowImage() == true)
						oButtonInfo.setImage(null);
					else
						oButtonInfo.setImage(oMenuMenu.getMediaUrl(MenuMediaObject.USED_FOR_THUMBNAIL));
				}
				
				oButtonInfo.setId(posDisplayPanelLookup.getMenuId());
			} else if (posDisplayPanelLookup.isFunction()) {
				// function
				// Click block UI
				oButtonInfo.setBlockUI(true);
				oButtonInfo.setId(posDisplayPanelLookup.getFuncId());
			} else if (posDisplayPanelLookup.isDirectDiscount()) {
				// discount
				// Click block UI
				oButtonInfo.setBlockUI(true);
				oButtonInfo.setId(posDisplayPanelLookup.getDiscountTypeId());
			} else if (posDisplayPanelLookup.isDirectPayment()) {
				// payment
				// Click block UI
				oButtonInfo.setBlockUI(true);
				oButtonInfo.setId(posDisplayPanelLookup.getPaymentId());
				PosPaymentMethod oPosPaymentMethod = m_oFuncPayment.getPaymentMethodList().getPaymentMethodList().get(posDisplayPanelLookup.getPaymentId());
				if (oPosPaymentMethod != null && !AppGlobal.g_oFuncUser.get().isSystemAdmin() && !m_oFuncPayment.checkPaymentMethodAuthority(oPosPaymentMethod, AppGlobal.g_oFuncUser.get()))
					oButtonInfo.setDim(true);
			} else if (posDisplayPanelLookup.isSubPanelPage()) {
				// sub panel page
				oButtonInfo.setId(posDisplayPanelLookup.getSubPanelPageId());
			} else if (posDisplayPanelLookup.isAlphabetNumberic()) {
				// alphabet or numeric
				oButtonInfo.setId(0);
			} else if (posDisplayPanelLookup.isDirectReport()) {
				// report
				oButtonInfo.setId(0);
			} else {
				// no function
				oButtonInfo.setId(0);
			}
			oButtonInfo.setTop(posDisplayPanelLookup.getTop());
			oButtonInfo.setLeft(posDisplayPanelLookup.getLeft());
			oButtonInfo.setWidth(posDisplayPanelLookup.getWidth());
			oButtonInfo.setHeight(posDisplayPanelLookup.getHeight());
			oButtonInfo.setPadding(oPosDisplayPanelZone.getLookupPadding());
			
			if (m_oPanelButtonStyleList != null && m_oPanelButtonStyleList.size() > 0) {
				ClsPanelButtonStyle oPanelButtonStyle = m_oPanelButtonStyleList.get(posDisplayPanelLookup.getDstyId());
				if (oPanelButtonStyle != null) {
					oButtonInfo.setFontColor(oPanelButtonStyle.getFontColor(1));
					oButtonInfo.setFontSize(oPanelButtonStyle.getFontSize(1));
					oButtonInfo.setBacgroundColor(oPanelButtonStyle.getBackgroundColor());
					oButtonInfo.setBorderColor(oPanelButtonStyle.getBorderColor());
					oButtonInfo.setBorderStyle(oPanelButtonStyle.getBorderStyle());
					if (oButtonInfo.getImage() == null || oButtonInfo.getImage().equals(""))
						oButtonInfo.setImage(oPanelButtonStyle.getBackgroundMediaUrl());
					if (oButtonInfo.getIconImage() == null || oButtonInfo.getIconImage().isEmpty())
						oButtonInfo.setIconImage(oPanelButtonStyle.getIconMediaUrl());
				} else {
					oButtonInfo.setTextFontColor("FFFFFF");
					oButtonInfo.setPriceFontColor("015384");
				}
			}
			
			displayPanelLookup.add(oButtonInfo);
		}
		return displayPanelLookup;
	}
	
	private void showCashierScreen(boolean bShow, boolean bIsCheckLoaded) {
		if (bShow) {
			// Clear the screen for new check
			m_oFrameCashier.clearPaymentBasket();
			
			// Hide the result page
			if (m_iCashierMode != 2)
				m_oFrameCashier.showPaymentResult(false, "", "", "", "", "", "", "", "", "", "", false,
						StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, ""), "" ,true);
			else {
				m_oFrameDirectPaymentResult.clearPaymentBasket();
				if(AppGlobal.g_oFuncStation.get().isPartialPayment()) {
					int i=0;
					BigDecimal dPayAmt = m_oFuncCheck.getCheckTotal();
					for(PosCheckPayment oOldPayment: m_oFuncCheck.getCheckPaymentList()) {
						String sPaymentMethod = "";
						if (oOldPayment.getShortName(AppGlobal.g_oCurrentLangIndex.get()).isEmpty())
							sPaymentMethod = oOldPayment.getName(AppGlobal.g_oCurrentLangIndex.get());
						else
							sPaymentMethod = oOldPayment.getShortName(AppGlobal.g_oCurrentLangIndex.get());
						String sPaymentInfo1 = "", sPaymentInfo2 = ""; //Partial payment second enhances
						m_oFrameDirectPaymentResult.addPayment(0, i, sPaymentMethod, sPaymentInfo1, sPaymentInfo2,
								dPayAmt, oOldPayment.getPayTips(), oOldPayment.getPayTotal(), false);
						dPayAmt = dPayAmt.subtract(oOldPayment.getPayTotal());
						i++;
					}
				}
			}
			
			// Hide the partial payment related button
			// not allow if it is fastfood / self-kiosk or supporting taiwan GUI or adjusting payment
			if(AppGlobal.g_oFuncStation.get().isPartialPayment()
					&& !AppGlobal.g_oFuncStation.get().supportTaiwanGui()
					&& !AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode)
					&& !AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
					&& AppGlobal.g_oFuncStation.get().getDefaultTableNoForMenuMode() == 0
					&& m_iCashierMode != 3)
				m_oFrameCashier.showPartialPaymentButton(true);
			else
				m_oFrameCashier.showPartialPaymentButton(false);
			
			// Check if check is loaded or not
			if (bIsCheckLoaded) {
				String sTable = m_oFuncCheck.getTableName()[AppGlobal.g_oCurrentLangIndex.get() - 1];
				if(m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab) && m_oFuncCheck.getTableExtension().length() > 0 && m_oFuncCheck.getTableExtension().substring(m_oFuncCheck.getTableExtension().length() - 1).compareTo(AppGlobal.BAR_TAB_TABLE_EXTENSION) == 0)
					sTable = AppGlobal.g_oLang.get()._("auto");
				m_oFrameCashier.setTable(sTable);
				if ((((AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) || AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode))
						&& !AppGlobal.g_oFuncOutlet.get().getBusinessDay().isCheckNumGeneratedByOutlet()) || AppGlobal.g_oFuncSmartStation.isStandaloneRole())
						&& !m_oFuncCheck.isOldCheck())
					m_oFrameCashier.setCheckNo(AppGlobal.g_oFuncStation.get().getNextCheckPrefixNumber(false));
				else
					m_oFrameCashier.setCheckNo(m_oFuncCheck.getCheckPrefixNo());
				
				m_oFrameCashier
						.setTotal(AppGlobal.g_oFuncOutlet.get().roundCheckAmountToString(m_oFuncCheck.getCheckTotal()));
				Integer dDecimal = AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal();
				if (AppGlobal.g_oFuncOutlet.get().getCheckRoundDecimal() > AppGlobal.g_oFuncOutlet.get()
						.getPayRoundDecimal())
					dDecimal = AppGlobal.g_oFuncOutlet.get().getCheckRoundDecimal();
				m_oFrameCashier.setBalance(StringLib.BigDecimalToString(m_oFuncPayment.getCurrentBalance(),
						dDecimal));
				m_oFrameCashier.setSurcharge(StringLib.BigDecimalToString(m_oFuncPayment.getSurchargeTotal(),
						dDecimal));
				m_oFrameCashier.setTotalDue(StringLib.BigDecimalToString(m_oFuncPayment.getTotalDue(),
						dDecimal));
				m_oFrameCashier.setTextboxCheckNo("");
			} else {
				// Clear the header
				m_oFrameCashier.clearPaymentHeader(true);
			}
			
			// Set check to be loaded or not
			m_bIsCheckLoadedForCashierMode = bIsCheckLoaded;
			
			m_oFrameCashier.setIsCheckLoaded(bIsCheckLoaded, false);
			
			// For self-kiosk device and self-kiosk mode, reposition direct payment panel
			if(AppGlobal.g_oFuncStation.get().getStationDevice().isSelfOrderKiosk()
					&& AppGlobal.g_oFuncStation.get().isHideStationInfoBar() && !m_oFrameStationInfoBar.getVisible()) {
				if(m_iCashierMode == 2) {
					m_oFrameDirectPaymentPanel.setTop(m_oFrameStationInfoBar.getTop() + m_oFrameOrderingPanel.getLeft());
					m_oFrameDirectPaymentPanel.setHeight(m_oFrameDirectPaymentPanel.getHeight() + m_oFrameStationInfoBar.getHeight() );
					m_oFrameDirectPaymentPanel.resizeDirectPaymentPanel(false);
				}else
					m_oFrameCashierPanel.setTop(m_oFrameStationInfoBar.getTop() + m_oFrameOrderingPanel.getLeft());
			}
			
			// Start step
			m_oFrameCashier.setCurrentStep(0);
			
			m_oFrameCashier.setVisible(true);
			
			m_oFrameStationInfoBar.changeInfosPosition(230, 830, false);
			m_oFrameCashier.bringToTop();
			if (m_iCashierMode != 2) {
				m_oFrameCashierPanel.setVisible(true);
				m_oFrameSeatPanel.setVisible(false);
				m_oFrameOrderingPanel.setVisible(false);
				m_oFrameCashierPanel.bringToTop();
			}
			
			m_oFrameConsolidateItemsOrderingBasket.setVisible(false);
			m_oFrameOrderingBasket.setVisible(false);
			m_oFrameFuncPanel2.setVisible(false);
			m_oFrameCheckDetail.setVisible(false);
			m_oFrameOpenTable.setVisible(false);
			
			setOrderingTimeoutChecking(false);
			
			// Set timer if it is kiosk mode
			if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode))
				setCashierTimeoutChecking(true);
			
			// ***** DEBUG *****
			// Auto click enter in cashier screen to finish payment
			if (AppGlobal.g_iDebugMode == 1)
				m_oFrameDirectPaymentPanel.autoClickEnter();
			// *****************
			
			//reset the frame station info bar position
			if(m_oFrameStationInfoBar.getLeft() != 230 && !AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode))
				m_oFrameStationInfoBar.changeInfosPosition(230, 830, false);
			
		} else {
			if (AppGlobal.g_oFuncStation.get().supportTaiwanGui())
				m_oFrameCashier.showOtherInformation(false);
			m_oFrameCashier.setVisible(false);
			m_oFrameCashierPanel.setVisible(false);
			
			if(!(AppGlobal.g_oFuncStation.get().getStationDevice().isSelfOrderKiosk() && AppGlobal.g_oFuncStation.get().isHideCheckDetailBar()))
				m_oFrameCheckDetail.setVisible(true);
			
			// For self-kiosk device and self-kiosk mode, repositiion direct payment panel
			if(AppGlobal.g_oFuncStation.get().getStationDevice().isSelfOrderKiosk()
					&& AppGlobal.g_oFuncStation.get().isHideStationInfoBar() && !m_oFrameStationInfoBar.getVisible()) {
				if(m_iCashierMode == 2)
					m_oFrameDirectPaymentPanel.resizeDirectPaymentPanel(true);
			}
			// Restart ordering timeout if payment not success in kiosk mode
			if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) && m_oFuncCheck != null && !m_oFuncCheck.isPaid(false))
				setOrderingTimeoutChecking(true);
			
			// Disable timer for cashier panel
			setCashierTimeoutChecking(false);
		}
		
	}
	
	/*
	 * 1. bShow = true, show table floor plan, hide ordering panel 2. bShow =
	 * false, hide table floor plan, open ordering panel, check whether is fast
	 * food mode, open ordering panel if yes 3. check whether visibility of
	 * table floor plan is equal to bShow, no need to update visibility if yes
	 */
	private void showTableFloorPlanScreen(boolean bShow) {
		
		// Turn off the flag for preventing multiple open check
		m_sPreventMulitpleOpenCheckFlag = "";
		
		if (AppGlobal.g_oFuncStation.get()
				.getOpenTableScreenKeyboard() == FuncStation.OPEN_TABLE_SCREEN_KEYBOARD_NUMBER) {
			if (bShow == m_oFrameTableFloorPlan.getVisible() || ((AppGlobal.g_oFuncStation.get()
					.getOpenTableScreenMode() == FuncStation.OPEN_TABLE_SCREEN_MODE_ASK_TABLE
					|| AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name()))
					&& bShow == m_oFrameOpenTable.getVisible()
					&& AppGlobal.OPERATION_MODE.fine_dining.equals(m_eOperationMode) == false)) {
				m_oFrameOpenTable.resetTableNo();
				return;
			}
		} else {
			if (bShow == m_oFrameTableFloorPlan.getVisible() || ((AppGlobal.g_oFuncStation.get()
					.getOpenTableScreenMode() == FuncStation.OPEN_TABLE_SCREEN_MODE_ASK_TABLE
					|| AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name()))
					&& bShow == m_oFrameOpenTableWithQwertyKeyboard.getVisible()
					&& AppGlobal.OPERATION_MODE.fine_dining.equals(m_eOperationMode) == false)) {
				m_oFrameOpenTableWithQwertyKeyboard.resetTableNo();
				return;
			}
		}
		boolean bShowSelfOrderStartScreen = false;
		
		if (AppGlobal.g_oFuncStation.get().getOpenTableScreenMode() == FuncStation.OPEN_TABLE_SCREEN_MODE_ASK_TABLE
				|| AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name())) {
			
			if (AppGlobal.g_oFuncStation.get()
					.getOpenTableScreenKeyboard() == FuncStation.OPEN_TABLE_SCREEN_KEYBOARD_NUMBER)
				m_oFrameOpenTable.setVisible(bShow);
			else
				m_oFrameOpenTableWithQwertyKeyboard.setVisible(bShow);
			
			if (bShow) {
				if (AppGlobal.g_oFuncStation.get()
						.getOpenTableScreenKeyboard() == FuncStation.OPEN_TABLE_SCREEN_KEYBOARD_NUMBER) {
					m_oFrameOpenTable.setFocusOnTxtBox();
					m_oFrameOpenTable.resetTableNo();
					m_oFrameOpenTable.resetFrame();
				} else {
					m_oFrameOpenTableWithQwertyKeyboard.resetTableNo();
					m_oFrameOpenTableWithQwertyKeyboard.setFocusOnTxtBox();
					m_oFrameOpenTableWithQwertyKeyboard.resetFrame();
				}
			}
		}
		
		m_oFrameTableFloorPlan.setVisible(bShow);
		this.updateTableFloorPlanTimer(bShow);
		
		// Rearrange the station information bar information
		if (!bShow) {
			if(AppGlobal.g_oFuncStation.get().getStationDevice().isSelfOrderKiosk() && AppGlobal.g_oFuncStation.get().isHideCheckDetailBar())
				m_oFrameStationInfoBar.changeInfosPosition(667, 1280, false);
			else
				m_oFrameStationInfoBar.changeInfosPosition(230, 830, false);
			m_oFrameStationInfoBar.displayMode( true, AppGlobal.g_oFuncOutlet.get().getOutletNameByIndex(AppGlobal.g_oCurrentLangIndex.get()));
			
		} else {
			if (AppGlobal.g_oFuncStation.get().getDefaultTableNoForMenuMode() > 0) {
				m_oFrameStationInfoBar.showFunctionButton(bShow);
				m_oFrameStationInfoBar.changeInfosPosition(667, 1280, false);
				this.updateTableFloorPlanTimer(false);
			} else
				m_oFrameStationInfoBar.changeInfosPosition(667, 1280, true);
			m_oFrameStationInfoBar.displayMode( false, "");
			
			//Check if swipe card control is required
			ClsActiveClient oActiveClient = AppGlobal.getActiveClient();
			oActiveClient.getSwipeCardReaderElement().setValueChangedServerRequestNote(FuncMSR.FRAME_SWIPE_CARD_DEFAULT);
			if(m_oFrameOpenTable.getVisible())
				oActiveClient.getSwipeCardReaderElement().setValueChangedServerRequestNote(FuncMSR.FRAME_SWIPE_CARD_OPENTABLE);
			else if(m_oFrameOpenTableWithQwertyKeyboard.getVisible())
				oActiveClient.getSwipeCardReaderElement().setValueChangedServerRequestNote(FuncMSR.FRAME_SWIPE_CARD_OPENTABLE_QWERTY);
		}
		
		boolean bShowOrderingPanel = !bShow;
		boolean bAskTableNumber = false;
		m_oFrameOrderingPanel.setVisible(bShowOrderingPanel);
		if (m_bEnlargeOrderingBasket)
			m_oFrameFuncPanel2.setVisible(false);
		else
			m_oFrameFuncPanel2.setVisible(bShowOrderingPanel);
		m_oFrameOrderingBasket.setVisible(bShowOrderingPanel);
		
		m_oFrameConsolidateItemsOrderingBasket.setVisible(bShowOrderingPanel);
		
		// Ordering Basket variables init
		this.setToggleOrderingBasketModeButtonStatus(FrameOrderingBasket.ORDERING_BASKET_MODE_SHOW_NORMAL);
		
		// Update Button Name in each panel
		this.updateToggleOrderingBasketButtonList(m_iToggleOrderingBasketFcnId);
		this.updateToggleOrderingBasketButtonName(m_sCurrentOrderingBasketModeButtonName);
		
		// Force update the label name in language list
		for (FrameGeneralLookupButton oFrameGeneralLookupButton : m_oOrderingBasketModeButtonList)
			oFrameGeneralLookupButton.getCurrentButton().setButtonDescByLangIndex(AppGlobal.g_oCurrentLangIndex.get()-1, m_sCurrentOrderingBasketModeButtonName);
		
		m_oFrameBasketExtendBar.setVisible(bShowOrderingPanel);
		if(!(AppGlobal.g_oFuncStation.get().getStationDevice().isSelfOrderKiosk() && AppGlobal.g_oFuncStation.get().isHideCheckDetailBar()))
			m_oFrameCheckDetail.setVisible(bShowOrderingPanel);
		m_oFrameSeatPanel.setVisible(bShowOrderingPanel);
		m_oFrameTabBar.setVisible(bShowOrderingPanel);
		if (bShowOrderingPanel == false) {
			if (m_oFrameOrderingMenuLookup != null)
				m_oFrameOrderingMenuLookup.setVisible(false);
		}
		
		// Show default display panel page
		int iDefaultPanelPageId = AppGlobal.g_oFuncStation.get().getDefaultDisplayPanelPageId();
		if (bShowOrderingPanel && iDefaultPanelPageId != 0)
			m_oFrameOrderingPanel.showDisplayPanelById(iDefaultPanelPageId);
		
		// Cancel ordering timeout here, activate at other function (e.g. open check / new check in kiosk mode)
		setOrderingTimeoutChecking(false);
		
		// Fine Dining and Bar mode enter if config by location - Stay in cashier after interface payment posting failed turned on && interface payment posting failed && is from direct payment
		// Show table floor plan
		if (bShowOrderingPanel && (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode)
				|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
				// For bar mode: Only show table floor plan when interface payment succeed or configure by location is turned off
				|| (AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) && !m_bIsInterfacePaymentFailedBySetup)
				// For fine dining / bar mode: Only show table floor plan when interface direct payment failed
				|| ((AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) || AppGlobal.OPERATION_MODE.fine_dining.equals(m_eOperationMode)) && m_bIsInterfaceDirectPaymentFailedBySetup))) {
			// Open Check fast food mode or self-order kiosk mode
			String sTableNo = "";
			String sTableExtension = "";
			boolean bSkipLockTable = false, bShowSelfOrderKioskFrame = true;
			
			// Update the table number if it is fastfood mode or self order kiosk mode and the check
			// number is generated by station
			// Otherwise, not show table number view
			if (((AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) || AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode))
					&& !AppGlobal.g_oFuncOutlet.get().getBusinessDay().isCheckNumGeneratedByOutlet()) || m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab))
				m_oFrameCheckDetail.setTableNo(StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT,
						String.valueOf(AppGlobal.g_oFuncStation.get().getNextCheckPrefixNumber(true))));
			else
				m_oFrameCheckDetail.setTableFrameVisible(false);
			
			// For self-order mode, hide seat no/quantity panel
			if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)) {
				m_oFrameSeatPanel.setVisible(false);
				m_oFrameCheckDetail.setVisible(false);
			}
			
			if (m_sTableNoForFastFoodMode.length() > 0) {
				// Load old check
				sTableNo = m_sTableNoForFastFoodMode;
				sTableExtension = m_sTableExtensionForFastFoodMode;
				bShowSelfOrderKioskFrame = false;
			} else if(AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode)){
				DateTimeFormatter formatter = DateTimeFormat.forPattern("MMddHHmmss");
				DateTime oCurrentTime = AppGlobal.getCurrentTime(false);
				String sStationCode = AppGlobal.g_oFuncStation.get().getCode();
				
				sTableNo = formatter.print(oCurrentTime);
				if (sStationCode.length() > 4)	// use first 4 character of station code and bar tab table extension symbol "^" as table extension
					sStationCode = sStationCode.substring(0, 4);
				sTableExtension = sStationCode + AppGlobal.BAR_TAB_TABLE_EXTENSION;
				
				JSONObject oOpenCheckSetting = AppGlobal.g_oFuncStation.get().getOpenCheckSetting();
				
				if(oOpenCheckSetting != null && oOpenCheckSetting.has("support") && oOpenCheckSetting.optString("support", "").equals("y")) {
					String[] sPeriodList = null;
					if(oOpenCheckSetting.has("period_ids"))
						sPeriodList = (String[]) oOpenCheckSetting.opt("period_ids");
					String sBusinessPeriodId = Integer.toString(AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getPeriodId());
					boolean bMatch = true;
					if(sPeriodList != null) {
						bMatch = false;
						for(int i = 0 ; i < sPeriodList.length ; i++) {
							if(sPeriodList[i].equals(sBusinessPeriodId)) {
								bMatch = true;
								break;
							}
						}
					}
					if (bMatch) {
						if(oOpenCheckSetting.has("ask_table_number") && oOpenCheckSetting.optString("ask_table_number", "").equals("y")) {
							bAskTableNumber = true;
							showAskTableScreen();
						}
					}
				}else {
					bAskTableNumber = true;
					showAskTableScreen();
				}
			} else {
				// Load new check
				// Auto-generate the table no.
				sTableNo = AppGlobal.g_oFuncStation.get().getStationId() + "";
				sTableExtension = AppGlobal.FAST_FOOD_TABLE_EXTENSION;
				
				// Skip lock table
				bSkipLockTable = true;
				
				bShowSelfOrderKioskFrame = true;
			}
			
			// For fine dining / bar mode, stay in ordering panel if interface direct payment failed with config by location turned on
			if ((AppGlobal.OPERATION_MODE.fine_dining.equals(m_eOperationMode) || AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode)) && m_bIsInterfaceDirectPaymentFailedBySetup) {
				sTableNo = m_oFuncCheck.getTableNo();
				sTableExtension = m_oFuncCheck.getTableExtension();
				
				bAskTableNumber = false;
				bSkipLockTable = false;
				bShowSelfOrderKioskFrame = false;
				
				m_bIsInterfacePaymentFailedBySetup = false;
				m_bIsInterfaceDirectPaymentFailedBySetup = false;
				
				m_oFrameCheckDetail.setTableFrameVisible(true);
			}
			
			if(!bAskTableNumber) {
				// Open Check for fast food mode / self order mode
				if (openCheck(sTableNo, sTableExtension, true, 1, bSkipLockTable, false) == false) {
					// Fail to open check in fast food mode
					// Force call admin mode
					if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode)) {
						// Fast food mode
						PosFunction oFunction = m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.admin_mode.name());
						fcnSwitch(oFunction.getFuncId(), "", -1, -1, false, null);
					}
				}
			}
			
			if(AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode)) {
				String[] sTable = StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, sTableNo + sTableExtension);
				if(sTableExtension.length() > 0 && sTableExtension.substring(sTableExtension.length() - 1).compareTo(AppGlobal.BAR_TAB_TABLE_EXTENSION) == 0)
					sTable = StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, AppGlobal.g_oLang.get()._("auto"));
				m_oFrameCheckDetail.setTableNo(sTable);
			}
			
			// Show new order screen for self-order kiosk mode
			if (bShowSelfOrderKioskFrame && AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)) {
				m_oFrameSelfOrderKiosk.showNewOrderButton();
				m_oFrameStationInfoBar.changeInfosPosition(667, 1280, false);
				m_oFrameSelfOrderKiosk.setVisible(true);
				m_oFrameSelfOrderKiosk.bringToTop();
				
				bShowSelfOrderStartScreen = true;
				if(m_oFrameCheckDetail.getVisible())
					m_oFrameCheckDetail.setVisible(false);
				
				if(AppGlobal.g_oFuncStation.get().getStationDevice().isSelfOrderKiosk() && AppGlobal.g_oFuncStation.get().isHideStationInfoBar())
					if(m_oFrameStationInfoBar.getVisible())
						m_oFrameStationInfoBar.setVisible(false);
			}
		}
		
		if (!bAskTableNumber && m_oFuncCheck != null && bShowOrderingPanel
				&& AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name())) {
			this.frameTabBar_tabClicked(m_oFuncCheck.isOldCheck() ? 0 : 1);
			m_oFrameTabBar.setSelectedTabIdx(m_oFuncCheck.isOldCheck() ? 0 : 1);
		}
	}
	
	private void drawOrderingBasket(boolean bResetSeat) {
		for (int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
			// Create ordering basket section for seat
			ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck.getItemList(i);
			
			if (oFuncCheckItemList != null && oFuncCheckItemList.size() > 0) { // Has ordered items in seat i
				if (!m_oFrameOrderingBasket.isSectionVisible(i)) {
					if ((m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food)
							|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk)
							|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab)) && i == 0) {
						// Not show "share" section title for fast food mode
					} else {
						if(!m_oFrameOrderingBasket.isDisplaySeatNumberSection())
							m_oFrameOrderingBasket.setSectionVisible(i, false);
						else
							m_oFrameOrderingBasket.setSectionVisible(i, true);
					}
				}
				if(!m_oFrameOrderingBasket.isDisplaySeatNumberSection())
					m_oFrameOrderingBasket.setSectionVisible(i, false);
				
				for (int j = 0; j < oFuncCheckItemList.size(); j++) {
					FuncCheckItem oFuncCheckItem = oFuncCheckItemList.get(j);
					PosCheckItem oPosCheckItem = oFuncCheckItem.getCheckItem();
					PosStockDeliveryInvoiceItem oPosStockDeliveryInvoiceItem = oFuncCheckItem
							.getStockDeliveryInvoiceItem();
					// Add normal item to ordering basket
					boolean bIsChildItem = false;
					if (oFuncCheckItem.isSetMenuItem())
						bIsChildItem = true;
					
					String[] sNameArray = new String[AppGlobal.LANGUAGE_COUNT];
					for (int k = 0; k < AppGlobal.LANGUAGE_COUNT; k++) {
						sNameArray[k] = oFuncCheckItem.getBilingualItemDescriptionByIndex(k + 1);
					}
					if (AppGlobal.OPERATION_MODE.stock_delivery.equals(m_eOperationMode)) {
						if (m_iStockDeliveryOperaionMode == 0)
							m_oFrameOrderingBasket.addItem(i, j, oPosCheckItem.getQty(),
									oPosStockDeliveryInvoiceItem.getActualReceivedQty(), sNameArray,
									AppGlobal.g_oFuncOutlet.get().getItemRoundDecimal(), BigDecimal.ZERO, true,
									bIsChildItem, 2, true, oPosCheckItem.getSeq());
						else {
							// Set the default receive qty = delivery qty
							oPosStockDeliveryInvoiceItem.setActualReceivedQty(oPosCheckItem.getQty());
							
							m_oFrameOrderingBasket.addItem(i, j, oPosCheckItem.getQty(),
									oPosStockDeliveryInvoiceItem.getActualReceivedQty(), sNameArray,
									AppGlobal.g_oFuncOutlet.get().getItemRoundDecimal(), BigDecimal.ZERO, true,
									bIsChildItem, 2, false, oPosCheckItem.getSeq());
						}
					} else
						m_oFrameOrderingBasket.addItem(i, j, oPosCheckItem.getQty(), BigDecimal.ZERO, sNameArray,
								AppGlobal.g_oFuncOutlet.get().getItemRoundDecimal(), BigDecimal.ZERO,
								oFuncCheckItem.isOldItem(), bIsChildItem, 0, false, oPosCheckItem.getSeq());
					this.updateBasketItemInfo(i, j);
				}
			}
		}
		
		// After finish drawing the basket, update each item's price
		for (int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
			// Create ordering basket section for seat
			ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck.getItemList(i);
			
			if (oFuncCheckItemList != null && oFuncCheckItemList.size() > 0) { // Has ordered items in seat i
				for (int j = 0; j < oFuncCheckItemList.size(); j++) {
					FuncCheckItem oFuncCheckItem = oFuncCheckItemList.get(j);
					updateBasketItemPrice(i, j, oFuncCheckItem);
				}
			}
		}
		if (bResetSeat) {
			//m_oFrameSeatPanel.setSeatLabelColor(0);
			
			// Set the selected basket to shared
			m_oFrameOrderingBasket.setSelectedSection(0);
			
			// Move the scroll view to the last insert node
			m_oFrameOrderingBasket.moveScrollToSectionBottom(0);
		}
	}
	
	private void drawConsolidateItemsOrderingBasket(boolean bResetSeat){
		//Create a local sortedConsolidateItemsList
		ArrayList<ArrayList<FuncCheckItem>> oTmpSortedFuncCheckItemsList = new ArrayList<ArrayList<FuncCheckItem>>();
		for (int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
			// Create ordering basket section for seat
			ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck.getItemList(i);
			// Sort the funcCheckItemList, based on the config by location setting
			ArrayList<FuncCheckItem> oSortedFuncCheckItemsList = this.sortConsolidateItemsList(oFuncCheckItemList);
			// Update the tmpSortedFuncCheckItemsList
			oTmpSortedFuncCheckItemsList.add(oSortedFuncCheckItemsList);
			if (oSortedFuncCheckItemsList != null && oSortedFuncCheckItemsList.size() > 0) { // Has ordered items in seat i
				if (!m_oFrameConsolidateItemsOrderingBasket.isSectionVisible(i)) {
					if ((m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food)
							|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk)
							|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab)) && i == 0) {
						// Not show "share" section title for fast food mode
					} else {
						if(!m_oFrameConsolidateItemsOrderingBasket.isDisplaySeatNumberSection())
							m_oFrameConsolidateItemsOrderingBasket.setSectionVisible(i, false);
						else
							m_oFrameConsolidateItemsOrderingBasket.setSectionVisible(i, true);
					}
				}
				if(!m_oFrameConsolidateItemsOrderingBasket.isDisplaySeatNumberSection())
					m_oFrameConsolidateItemsOrderingBasket.setSectionVisible(i, false);
				
				for (int j = 0; j < oSortedFuncCheckItemsList.size(); j++) {
					FuncCheckItem oFuncCheckItem = oSortedFuncCheckItemsList.get(j);
					PosCheckItem oPosCheckItem = oFuncCheckItem.getCheckItem();
					PosStockDeliveryInvoiceItem oPosStockDeliveryInvoiceItem = oFuncCheckItem
							.getStockDeliveryInvoiceItem();
					
					// Add normal item to ordering basket
					boolean bIsChildItem = false;
					if (oFuncCheckItem.isSetMenuItem())
						bIsChildItem = true;
					
					String[] sNameArray = new String[AppGlobal.LANGUAGE_COUNT];
					for (int k = 0; k < AppGlobal.LANGUAGE_COUNT; k++) {
						sNameArray[k] = oFuncCheckItem.getBilingualItemDescriptionByIndex(k + 1);
					}
					if (AppGlobal.OPERATION_MODE.stock_delivery.equals(m_eOperationMode)) {
						if (m_iStockDeliveryOperaionMode == 0)
							m_oFrameConsolidateItemsOrderingBasket.addItem(i, j, oPosCheckItem.getQty(),
									oPosStockDeliveryInvoiceItem.getActualReceivedQty(), sNameArray,
									AppGlobal.g_oFuncOutlet.get().getItemRoundDecimal(), BigDecimal.ZERO, true,
									bIsChildItem, 2, true, oPosCheckItem.getSeq());
						else {
							// Set the default receive qty = delivery qty
							oPosStockDeliveryInvoiceItem.setActualReceivedQty(oPosCheckItem.getQty());
							
							m_oFrameConsolidateItemsOrderingBasket.addItem(i, j, oPosCheckItem.getQty(),
									oPosStockDeliveryInvoiceItem.getActualReceivedQty(), sNameArray,
									AppGlobal.g_oFuncOutlet.get().getItemRoundDecimal(), BigDecimal.ZERO, true,
									bIsChildItem, 2, false, oPosCheckItem.getSeq());
						}
					} else
						m_oFrameConsolidateItemsOrderingBasket.addItem(i, j, oPosCheckItem.getQty(), BigDecimal.ZERO, sNameArray,
								AppGlobal.g_oFuncOutlet.get().getItemRoundDecimal(), BigDecimal.ZERO,
								oFuncCheckItem.isOldItem(), bIsChildItem, 0, false, oPosCheckItem.getSeq());
					
					// Only need to update modifier list
					m_oFrameConsolidateItemsOrderingBasket.updateInfo(i, j, StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, ""), StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, ""),
							oFuncCheckItem.getModifierList(), StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, ""), StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, ""), new ArrayList<PosTaxScType>(), new ArrayList<PosTaxScType>());
				}
			}
		}
		
		// After finish drawing the basket, update each item's price
		for (int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
			if (oTmpSortedFuncCheckItemsList.get(i) != null && oTmpSortedFuncCheckItemsList.get(i).size() > 0) { // Has ordered items in seat i
				for (int j = 0; j < oTmpSortedFuncCheckItemsList.get(i).size(); j++) {
					FuncCheckItem oFuncCheckItem = oTmpSortedFuncCheckItemsList.get(i).get(j);
					//updateConsolidateItemsBasketItemPrice(i, j, oFuncCheckItem);
					updateBasketItemPriceWithMode(i, j, oFuncCheckItem, FrameOrderingBasket.ORDERING_BASKET_MODE_SHOW_CONSOLIDATE_ITEMS);
				}
			}
		}
		
		if (bResetSeat) {
			//m_oFrameSeatPanel.setSeatLabelColor(0);
			
			// Set the selected basket to shared
			m_oFrameConsolidateItemsOrderingBasket.setSelectedSection(0);
			
			// Move the scroll view to the last insert node
			m_oFrameConsolidateItemsOrderingBasket.moveScrollToSectionBottom(0);
		}
	}
	
	// Sort the FuncCheckItem List based on the consolidate Items Grouping Method
	public ArrayList<FuncCheckItem> sortConsolidateItemsList(ArrayList<FuncCheckItem> oOriginalItemList){
		// Get the grouping method
		String sGroupingMethod = AppGlobal.g_oFuncStation.get().getOrderingBasketToggleConsolidateItemsGroupingMethod();
		if(sGroupingMethod.isEmpty())
			sGroupingMethod = TOGGLE_ORDERING_BASKET_GROUPING_OLD_AND_NEW_ITEMS;
		ArrayList<FuncCheckItem> oSortFuncCheckItemList = new ArrayList<FuncCheckItem>();
		LinkedHashMap<String, FuncCheckItem> oSortFuncCheckItemIdMap = new LinkedHashMap<String, FuncCheckItem>();
		
		// Create the FuncCheckItemIdList
		for (int i = 0; i < oOriginalItemList.size(); i++){
			// Create tmpFuncCheckItem
			FuncCheckItem oTmpFuncCheckItem = new FuncCheckItem(oOriginalItemList.get(i).getCheckItem());
			
			// Check if allow merge
			boolean bAllowMerge = true;
			if(oTmpFuncCheckItem.isSetMenu() || oTmpFuncCheckItem.getCheckItem().getRole().equals(PosCheckItem.ROLE_SET_MENU_CHILD_ITEM) || oTmpFuncCheckItem.isOpenDescription() || oTmpFuncCheckItem.isMinimumChargeItem())
				bAllowMerge = false;
			// Create key for item
			String sItemKey = Integer.toString(oOriginalItemList.get(i).getCheckItem().getItemId());
			if(!oOriginalItemList.get(i).isOldItem() && !sGroupingMethod.equals(TOGGLE_ORDERING_BASKET_GROUPING_OLD_AND_NEW_ITEMS))
				sItemKey = sItemKey + "n";
			//First item
			if(oSortFuncCheckItemIdMap.size() == 0){
				oSortFuncCheckItemIdMap.put(sItemKey, oTmpFuncCheckItem);
			}else if(sGroupingMethod.equals(TOGGLE_ORDERING_BASKET_GROUPING_OLD_ITEMS_ONLY) && bAllowMerge){
				//Merge old items only
				if(oTmpFuncCheckItem.isOldItem() && oSortFuncCheckItemIdMap.containsKey(sItemKey)){
					FuncCheckItem oUpdateItem = new FuncCheckItem(oSortFuncCheckItemIdMap.get(sItemKey).getCheckItem());
					// Update Item price
					oUpdateItem.getCheckItem().setPrice(oUpdateItem.getCheckItem().getPrice().add(oTmpFuncCheckItem.getCheckItem().getPrice()));
					oUpdateItem.getCheckItem().setRoundTotal(oUpdateItem.getCheckItem().getRoundTotal().add(oUpdateItem.getCheckItem().getPreDisc().add(oUpdateItem.getCheckItem().getMidDisc().add(oUpdateItem.getCheckItem().getPostDisc())))
							.add(oTmpFuncCheckItem.getCheckItem().getRoundTotal().add(oTmpFuncCheckItem.getCheckItem().getPreDisc().add(oTmpFuncCheckItem.getCheckItem().getMidDisc().add(oTmpFuncCheckItem.getCheckItem().getPostDisc())))));
					// Update Item qty
					oUpdateItem.getCheckItem().setQty(oUpdateItem.getCheckItem().getQty().add(oTmpFuncCheckItem.getCheckItem().getQty()));
					// Update Modifier list
					List<PosCheckItem> oUpdatedModifierList = oUpdateItem.getCheckItem().getModifierList();
					for(FuncCheckItem oModifier : oTmpFuncCheckItem.getModifierList()){
						oUpdateItem.addModifierToList(oModifier, true);
						oUpdatedModifierList.add(oModifier.getCheckItem());
					}
					oUpdateItem.getCheckItem().setModifierList(oUpdatedModifierList);
					oSortFuncCheckItemIdMap.put(sItemKey, oUpdateItem);
				}else if(!oTmpFuncCheckItem.isOldItem()){
					// If mode is ORDERING_BASKET_GROUPING_MODE_OLD and the item is new item, no merge. Just add to the list
					if(oSortFuncCheckItemIdMap.containsKey(sItemKey))
						// If the list already have a new item, need to modify the key
						sItemKey = sItemKey +oTmpFuncCheckItem.getCheckItem().getSeq();
					oSortFuncCheckItemIdMap.put(sItemKey, oTmpFuncCheckItem);
				}else
					// For old items and not containsKey --> just add to the list
					oSortFuncCheckItemIdMap.put(sItemKey, oTmpFuncCheckItem);
			}else if((sGroupingMethod.equals(TOGGLE_ORDERING_BASKET_GROUPING_OLD_AND_NEW_ITEMS_SEPARATELY) || sGroupingMethod.equals(TOGGLE_ORDERING_BASKET_GROUPING_OLD_AND_NEW_ITEMS)) && bAllowMerge){
				// Merge old items and new items separately or merge old items and new items together based on the setup
				if(oSortFuncCheckItemIdMap.containsKey(sItemKey)){
					FuncCheckItem oUpdateItem = new FuncCheckItem(oSortFuncCheckItemIdMap.get(sItemKey).getCheckItem());
					// Update Item price
					oUpdateItem.getCheckItem().setPrice(oUpdateItem.getCheckItem().getPrice().add(oTmpFuncCheckItem.getCheckItem().getPrice()));
					oUpdateItem.getCheckItem().setRoundTotal(oUpdateItem.getCheckItem().getRoundTotal().add(oUpdateItem.getCheckItem().getPreDisc().add(oUpdateItem.getCheckItem().getMidDisc().add(oUpdateItem.getCheckItem().getPostDisc())))
							.add(oTmpFuncCheckItem.getCheckItem().getRoundTotal().add(oTmpFuncCheckItem.getCheckItem().getPreDisc().add(oTmpFuncCheckItem.getCheckItem().getMidDisc().add(oTmpFuncCheckItem.getCheckItem().getPostDisc())))));
					// Update Item qty
					oUpdateItem.getCheckItem().setQty(oUpdateItem.getCheckItem().getQty().add(oTmpFuncCheckItem.getCheckItem().getQty()));
					// Update Modifier list
					List<PosCheckItem> oUpdatedModifierList = oUpdateItem.getCheckItem().getModifierList();
					for(FuncCheckItem oModifier : oTmpFuncCheckItem.getModifierList()){
						oUpdateItem.addModifierToList(oModifier, true);
						oUpdatedModifierList.add(oModifier.getCheckItem());
					}
					oUpdateItem.getCheckItem().setModifierList(oUpdatedModifierList);
					oSortFuncCheckItemIdMap.put(sItemKey, oUpdateItem);
				}else
					oSortFuncCheckItemIdMap.put(sItemKey, oTmpFuncCheckItem);
			}else{
				// Not allow merge, add to list
				if(oSortFuncCheckItemIdMap.containsKey(sItemKey))
					// If the list already have a new item, need to modify the key
					sItemKey = sItemKey +oTmpFuncCheckItem.getCheckItem().getSeq();
				oSortFuncCheckItemIdMap.put(sItemKey, oTmpFuncCheckItem);
			}
		}
		
		// Update the sortFuncCheckItemList
		for (Map.Entry<String, FuncCheckItem> entry : oSortFuncCheckItemIdMap.entrySet()) {
			FuncCheckItem oTmpFuncCheckItem = entry.getValue();
			//If the grouping method is TOGGLE_ORDERING_BASKET_GROUPING_OLD_AND_NEW_ITEMS, set the funcCheckItem to new item
			if(sGroupingMethod.equals(TOGGLE_ORDERING_BASKET_GROUPING_OLD_AND_NEW_ITEMS))
				oTmpFuncCheckItem.getCheckItem().clearCitmId();
			oSortFuncCheckItemList.add(oTmpFuncCheckItem);
		}
		return oSortFuncCheckItemList;
	}
	
	synchronized private boolean addProcessCheck(String sStoredProcessingCheckKey) {
		if (m_oProcessingSendChecks.containsKey(sStoredProcessingCheckKey)) {
			// Another send check is processing
			return false;
		}
		
		ProcessingCheckInfo oProcessingCheckInfo = new ProcessingCheckInfo();
		oProcessingCheckInfo.oDateTime = AppGlobal.getCurrentTime(false);
		oProcessingCheckInfo.oCheckJSONObject = null;
		oProcessingCheckInfo.iSendCount = 0;
		m_oProcessingSendChecks.put(sStoredProcessingCheckKey, oProcessingCheckInfo);
		return true;
	}
	
	synchronized private void removeProcessCheck(String sStoredProcessingCheckKey) {
		// Finish send check, remove process to stored processing check list
		if (m_oProcessingSendChecks.containsKey(sStoredProcessingCheckKey))
			m_oProcessingSendChecks.remove(sStoredProcessingCheckKey);
	}
	
	private void waitForProcessCheckFinish(String sTable, String sTableExtension) {
		// Timeout for wait = 20 seconds
		// int iTimeout = 20000;
		int iSleepInterval = 50;
		// int iWaitTime = 0;
		
		// Check if the check is processing or not
		while (m_oProcessingSendChecks.size() > 0) {
			// If the thread is still processing, sleep for a while until finish
			try {
				// If table and table extension is passed to this function,
				// check if this check is under send check ONLY, not concern
				// other check
				if (sTable.length() > 0) {
					boolean bFound = false;
					for (Entry<String, ProcessingCheckInfo> entry : m_oProcessingSendChecks.entrySet()) {
						String sKey = sTable + sTableExtension;
						if (entry.getKey().equals(sKey)) {
							bFound = true;
							break;
						}
					}
					if (bFound == false)
						// Check is not under sending, no need to wait
						return;
				}
				
				Thread.sleep(iSleepInterval);
			} catch (InterruptedException e) {
				AppGlobal.stack2Log(e);
				
				break;
			}
			
			// Check if there is a check which save time already passed 20
			// seconds
			boolean bTimeout = false;
			StringBuilder sBuilder = new StringBuilder();
			String sProcessCheckKey = null;
			for (Entry<String, ProcessingCheckInfo> entry : m_oProcessingSendChecks.entrySet()) {
				ProcessingCheckInfo oProcessCheckInfo = entry.getValue();
				sProcessCheckKey = entry.getKey();
				if ((oProcessCheckInfo.oDateTime.plusSeconds(20)).isBeforeNow()) {
					sBuilder.append("Sending Table : " + sTable + ":" + sTableExtension + "; ");
					sBuilder.append("Processing check: ");
					sBuilder.append("<");
					sBuilder.append(entry.getKey());
					sBuilder.append("> ");
					sBuilder.append(oProcessCheckInfo.oCheckJSONObject.toString());
					
					if (oProcessCheckInfo.iSendCount < 2) {
						AppThreadManager oAppThreadManager = new AppThreadManager();
						PosCheck oPosCheck = new PosCheck();
						
						final String sTmpStoredProcessingCheckKey = entry.getKey();
						// Run it if send check success
						Runnable oRunnable1 = new Runnable() {
							@Override
							public void run() {
								FormMain.this.removeProcessCheck(sTmpStoredProcessingCheckKey);
							}
						};
						
						// Run it if send check fail and print the error log
						Runnable oRunnable2 = new Runnable() {
							@Override
							public void run() {
								AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
										AppGlobal.g_oFuncUser.get().getUserId() + "",
										"ERROR: Fail to send check, table " + sTmpStoredProcessingCheckKey);
							}
						};
						// Thread 1 : Use thread to save previous check by
						// stored oCheckJSONObject
						Object[] oParameters = new Object[3];
						oParameters[0] = oProcessCheckInfo.oCheckJSONObject;
						oParameters[1] = oRunnable1;
						oParameters[2] = oRunnable2;
						oAppThreadManager.addThread(1, oPosCheck, "saveCheckByJSONObject", oParameters);
						oAppThreadManager.runThread();
						
						oProcessCheckInfo.oDateTime = AppGlobal.getCurrentTime(false);
						oProcessCheckInfo.iSendCount++;
						m_oProcessingSendChecks.put(entry.getKey(), oProcessCheckInfo);
						
						bTimeout = true;
					} else
						sBuilder.append(", retry excess 2 times");
					break;
				}
			}
			
			// Have check which already used 20 seconds to save check
			if (sBuilder.length() > 0)
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(),
						new Exception().getStackTrace()[1].getMethodName(), sBuilder.toString());
			
			// Timeout, reset iWaitTime and recount 20 seconds
			if (bTimeout)
				continue;
			
			// Have check which already used 20 seconds to save check
			// Clear related object
			if (sBuilder.length() > 0) {
				m_oProcessingSendChecks.remove(sProcessCheckKey);
				break;
			}
		}
	}
	
	private boolean openCheck(String sTableNo, String sTableExtension, boolean bShowUI, int iDefaultCover,
	                          boolean bSkipLockTable, boolean bUseThread) {
		if (isShowTableFloorAfterSwitchUserWithCheckingOperationMode()
				&& m_oFrameTableFloorPlan.getSwitchUserModeStatus().equals(FrameTableFloorPlan.SWITCH_USER_MODE_ON)) {
			if (!askLogin())
				return false;
		}
		int iCover = 0;
		String sErrMsg = "", sTableStatus = PosOutletTable.STATUS_NEW_TABLE;
		boolean bNewCheck = true;
		
		// Pre-checking before open check
		if (openCheckPreChecking(sTableNo, sTableExtension) == false)
			return false;
		
		// Pre-process before open check
		openCheckPreProcess(Integer.parseInt(sTableNo), sTableExtension);
		
		if (bUseThread) {
			// *****************************************************************
			// Create thread to load detail
			AppThreadManager oAppThreadManager = new AppThreadManager();
			
			// Thread 1 : Use thread to
			Object[] oParameters = new Object[4];
			oParameters[0] = sTableNo;
			oParameters[1] = sTableExtension;
			oParameters[2] = bShowUI;
			oParameters[3] = bSkipLockTable;
			oAppThreadManager.addThread(1, this, "openCheckThread", oParameters);
			
			// Run the open check in background
			oAppThreadManager.runThread();
			
			// Check if the check is new or not
			int iSeatInGuest = 0;
			if (m_oTableStatusList.containsKey(sTableNo + "_" + sTableExtension)) {
				ClsTableStatus oTableStatus = m_oTableStatusList.get(sTableNo + "_" + sTableExtension);
				PosOutletTable oPosOutletTable = oTableStatus.getPosOutletTable();
				sTableStatus = oPosOutletTable.getStatus();
				if (oPosOutletTable.isOccupied()
						|| oPosOutletTable.isCheckPrinted()
						|| oPosOutletTable.isCookingOvertimeTable()
						|| oPosOutletTable.isCleaningTable())
					bNewCheck = false;
				
				if ((oPosOutletTable.isVacant() || oPosOutletTable.isNewTable()) && oPosOutletTable.isSeatInTag()
						&& oPosOutletTable.getInfo() != null) {
					JSONObject oInfo = oPosOutletTable.getInfo();
					String sAction = oInfo.optString("action");
					if (sAction.equals("new_check"))
						iSeatInGuest = oInfo.optInt("guests");
				}
			}
			
			// split revenue checking
			if (splitRevenueAllowedChecking(bNewCheck, sTableStatus))
				return false;
			
			// Ask Cover
			if (bNewCheck) {
				if(m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab))
					iCover = askBarTabCover(sTableNo, sTableExtension);
				else {
					if (iDefaultCover > 0)
						iCover = iDefaultCover;
					else {
						if (iSeatInGuest > 0)
							iCover = iSeatInGuest;
						else{
							//Skip Ask Cover
							if (AppGlobal.g_oFuncStation.get().isSkipAskCover())
								iCover = AppGlobal.g_oFuncStation.get().getDefaultCover();
							else
								iCover = askCover(sTableNo, sTableExtension);
						}
					}
				}
			}
			
			// Wait for the "open check" thread to finish
			oAppThreadManager.waitForThread();
			
			sErrMsg = (String) oAppThreadManager.getResult(1);
			
			// Check if "open check" and "ask cover" are success or not
			if (sErrMsg.length() > 0) {
				// Fail to open check
				if (!(bNewCheck && iCover == -1))
					this.showErrorDialogBox(sErrMsg);
				
				return false;
			}
		} else {
			sErrMsg = openCheckThread(sTableNo, sTableExtension, bShowUI, bSkipLockTable);
			if (sErrMsg.length() > 0) {
				// Fail to open check
				this.showErrorDialogBox(sErrMsg);
				return false;
			}
			
			bNewCheck = !m_oFuncCheck.isOldCheck();
			
			// get reserved table guest number
			int iSeatInGuest = 0;
			if ((m_oFuncCheck.getOutletTableStatus().equals(PosOutletTable.STATUS_VACANT) || m_oFuncCheck.getOutletTableStatus().equals(PosOutletTable.STATUS_NEW_TABLE))
					&& m_oFuncCheck.getOutletTableTag().equals(PosOutletTable.TAG_SEAT_IN) && m_oFuncCheck.getOutletTableInfo() != null) {
				JSONObject oInfo = m_oFuncCheck.getOutletTableInfo();
				String sAction = oInfo.optString("action");
				if (sAction.equals("new_check"))
					iSeatInGuest = oInfo.optInt("guests");
			}
			
			// Ask Cover
			if (sErrMsg.length() == 0 && bNewCheck) {
				if (splitRevenueAllowedChecking(bNewCheck, PosOutletTable.STATUS_NEW_TABLE))
					return false;
				
				if(m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab))
					iCover = askBarTabCover(sTableNo, sTableExtension);
				else {
					if (iDefaultCover > 0)
						iCover = iDefaultCover;
					else{
						//Skip Ask Cover
						if (AppGlobal.g_oFuncStation.get().isSkipAskCover())
							iCover = AppGlobal.g_oFuncStation.get().getDefaultCover();
						else
							iCover = askCover(sTableNo, sTableExtension);
					}
				}
			}
		}
		
		// Cancel by user
		if (bNewCheck && iCover == -1) {
			// Clear the current stored stock item list, for next open check
			// will be update whole item list
			if (m_oFuncCheck != null)
				m_oFuncCheck.cleanupItemStockList();
			
			// Unlock the table
			this.unlockTableByThread(true, false);
			
			return false;
		}
		
		//reset the swipe card control
		ClsActiveClient oActiveClient = AppGlobal.getActiveClient();
		oActiveClient.getSwipeCardReaderElement().setValueChangedServerRequestNote(FuncMSR.FRAME_SWIPE_CARD_DEFAULT);
		
		m_oFrameCover.setVisible(false);
		m_oFrameOpenTable.setVisible(false);
		m_oFrameOpenTableWithQwertyKeyboard.setVisible(false);
		
		if (m_oFuncCheck.isOldCheck()) {
			HashMap<String, String> oResultMap = getCheckOwnershipSetting();
			if (oResultMap.get("support").equals("y")) {
				if (oResultMap.get("type").equals("r")) {
					if (m_oFuncCheck.getCheckOwnerUserId() != AppGlobal.g_oFuncUser.get().getUserId()) {
						String sName = "";
						//UserUser oUser = new UserUser();
						//oUser.readByUserId(m_oFuncCheck.getCheckOwnerUserId());
						UserUser oUser = m_oAllUserList.get(m_oFuncCheck.getCheckOwnerUserId());
						if (oUser.getUserId() != 0)
							sName = oUser.getFirstName(AppGlobal.g_oCurrentLangIndex.get()) + " "
									+ oUser.getLastName(AppGlobal.g_oCurrentLangIndex.get());
						String sMessage = AppGlobal.g_oLang.get()._("cannot_open_this_check_since_this_check_owned_by")
								+ ": " + System.lineSeparator() + sName;
						this.showErrorDialogBox(sMessage);
						this.unlockTableByThread(true, false);
						return false;
					}
				}
			}
			
			// If check is opened by others, prompt alert
			if (iCover > 0)
				this.showAttentionDialogBox(AppGlobal.g_oLang.get()._("table_is_occupied"));
			
			//calculate the check again if it is not delivery stock
			if(!AppGlobal.OPERATION_MODE.stock_delivery.equals(m_eOperationMode))
				m_oFuncCheck.calcCheck();
		} else {
			// Check if daily close warning should be prompted or not
			if (crossDateOpenCheckChecking() == false) {
				// Unlock the table
				this.unlockTableByThread(true, false);
				
				return false;
			}
			
			// Double get the default guest no. from TMS to prevent no update
			// table status issue
			JSONObject oInfo = m_oFuncCheck.getOutletTableInfo();
			if (oInfo != null) {
				String sAction = oInfo.optString("action");
				if (sAction.equals("new_check"))
					iCover = oInfo.optInt("guests");
			}
		}
		
		// Show Table Message Reminder if any
		// :::IMPORTANT:::
		// A FormDialogBox inside will block the basket to display properly,
		// so it has to be shown before preparing screen
		this.showTableMessageReminder(TABLE_MESSAGE_PROMPT_OPEN_TABLE);
		
		// Prepare the screen
		if (openCheckPrepareScreen(sTableNo, sTableExtension, bShowUI, iCover) == false) {
			// Unlock the table
			this.unlockTableByThread(true, false);
			
			return false;
		}
		
		if (bShowUI) {
			// Mark that the station is under ordering panel
			AppGlobal.g_oFuncStation.get().setUnderOrdering(true);
		}
		
		if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode)) {
			boolean bFastFoodAutoTakeout = AppGlobal.g_oFuncStation.get().getFastFoodAutoTakeout();
			if (bFastFoodAutoTakeout && !m_oFuncCheck.isOldCheck()) {
				HashMap<String, String> oFunctionParams = new HashMap<String, String>();
				oFunctionParams.put("askToConfirm", "false");
				PosFunction oFunction = m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.check_takeout.name());
				fcnSwitch(oFunction.getFuncId(), "", -1, -1, false, oFunctionParams);
			}
		}
		
		if (bNewCheck) {
			if (m_oFuncCheck.getOutletTableTag().equals(PosOutletTable.TAG_SEAT_IN)) {
				// update chks_book_date and chks_resv_refno_with_prefix to
				// store tms information
				JSONObject oInfo = m_oFuncCheck.getOutletTableInfo();
				if (oInfo != null) {
					String sAction = oInfo.optString("action");
					if (sAction.equals("new_check")) {
						int iResvInterfaceId = oInfo.optInt("member_intf_id", 0);
						boolean bIsSvcEnquiry = false;
						
						if (iResvInterfaceId != 0) {
							JSONObject oResultJSONObject = m_oFuncCheck.retrieveReservationByDateRefno(oInfo.optString("book_date", ""), oInfo.optString("refno_with_prefix", ""), ResvResv.REQUEST_INFO_RESERVATION);
							JSONObject oResvJSONObject = oResultJSONObject.optJSONObject("resv");
							String sResvMemberNumber = oResvJSONObject.optString("resv_member", "");
							String sResvLastName = oResvJSONObject.optString("resv_last_name", "");
							
							bIsSvcEnquiry = this.performAutoFunctionForSvcEnquiry(iResvInterfaceId, sResvMemberNumber, sResvLastName);
						}
						
						if (!bIsSvcEnquiry) {
							int iMemberId = Integer.parseInt(oInfo.optString("member_id", "0"));
							if (iMemberId > 0) {
								HashMap<String, String> oFuncParam = new HashMap<String, String>();
								oFuncParam.put("memberId", Integer.toString(iMemberId));
								this.fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.set_member.name()), "", -1, -1, false, oFuncParam);
							}
						}
					}
				}
			}
			
			// ask table section
			int iSection = this.checkAndSetTableSectionBeforeNewTable(AppGlobal.g_oFuncOutlet.get().getOutletId(), 0,
					sTableNo, sTableExtension);
			m_oFuncCheck.setSection(iSection);
			
			// Add default item with minimum charge
			if (AppGlobal.g_oFuncStation.get().getTableValidationTableMinimumCharge().compareTo(BigDecimal.ZERO) > 0)
				addMinimumChargeDefaultItem("", AppGlobal.g_oFuncStation.get().getTableValidationTableMinimumCharge());
			
			// ask tms interface
			ArrayList<String> oVendors = new ArrayList<String>();
			oVendors.add(InfVendor.KEY_RESPAK);
			String sTitle = AppGlobal.g_oLang.get()._("please_select_the_tms_interface");
			PosInterfaceConfig oTmsConfig = this.getInterfaceConfig(InfInterface.TYPE_TMS, oVendors, sTitle, false);
			if (oTmsConfig != null) {
				if (m_oFuncCheck.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_TMS,
						PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0))
					m_oFuncCheck.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_TMS,
							PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0, Integer.toString(oTmsConfig.getInterfaceId()));
				else
					m_oFuncCheck.addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_TMS,
							PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0, Integer.toString(oTmsConfig.getInterfaceId()));
			}
			
			// do auto function during open new check & call from ordering panel
			if (!AppGlobal.OPERATION_MODE.stock_delivery.equals(m_eOperationMode) && !AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) && bShowUI) {
				JSONArray oCheckAutoFunctionsJSONArray = AppGlobal.g_oFuncStation.get().getCheckAutoFunctions();
				prepareAutoFunctionList(oCheckAutoFunctionsJSONArray);
				performAutoFunction();
			}
			// surveillance event: NewCheck
			HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
			oSurveillanceEventInfo.put("checkNum", AppGlobal.g_oFuncStation.get().getNextCheckPrefixNumber(false));
			this.doSurveillanceEvent(FuncSurveillance.SURVEILLANCE_TYPE_NEW_CHECK, oSurveillanceEventInfo);
			
		} else {
			//If the check not paid, Recall
			if (!m_oFuncCheck.isPaid(false)) {
				// surveillance event: RecallCheck
				HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
				oSurveillanceEventInfo.put("checkNum", ""+m_oFuncCheck.getCheckPrefixNo());
				this.doSurveillanceEvent(FuncSurveillance.SURVEILLANCE_TYPE_RECALL_CHECK, oSurveillanceEventInfo);
			}
		}
		
		if (m_oFuncCheck != null && m_oFrameOrderingPanel.getVisible()
				&& AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode)
				&& AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name())) {
			this.frameTabBar_tabClicked(m_oFuncCheck.isOldCheck() ? 0 : 1);
			m_oFrameTabBar.setSelectedTabIdx(m_oFuncCheck.isOldCheck() ? 0 : 1);
		}
		
		if(!AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name()))
			prepareOrderingBasketExtraInfo();
		
		if (bShowUI && !AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode))
			// Start ordering timeout timer (except kiosk mode, kiosk mode start at other function)
			setOrderingTimeoutChecking(true);
		
		return true;
	}
	
	private void prepareOrderingBasketExtraInfo() {
		if(AppGlobal.OPERATION_MODE.stock_delivery.equals(m_eOperationMode))
			m_oFrameOrderingBasket.showOrderingBasketExtraInfoFrame(false);
		else {
			m_oFrameOrderingBasket.showOrderingBasketExtraInfoFrame(true);
			//get extra info keys for display
			if(m_oOrderingBasketExtraInfoKeys == null)
				m_oOrderingBasketExtraInfoKeys = AppGlobal.g_oFuncStation.get().getOrderingBasketExtraInfo();
			//get the corresponding value of the keys
			ArrayList<JSONObject> oOrderingBasketExtraInfoContentList = new ArrayList<JSONObject>();
			oOrderingBasketExtraInfoContentList = m_oFuncCheck.prepareOrderingBasketExtraInfoList(m_oOrderingBasketExtraInfoKeys);
			if(oOrderingBasketExtraInfoContentList != null && !oOrderingBasketExtraInfoContentList.isEmpty())
				m_oFrameOrderingBasket.createExtraInfoSection(oOrderingBasketExtraInfoContentList);
		}
	}
	
	private void prepareAutoFunctionList(JSONArray oCheckAutoFunctionsJSONArray) {
		ArrayList<JSONObject> oCheckAutoFunctionsList = new ArrayList<JSONObject>();
		if (oCheckAutoFunctionsJSONArray != null) {
			for (int i = 0; i < oCheckAutoFunctionsJSONArray.length(); i++) {
				JSONObject oCheckAutoFunctionsJSONObject = oCheckAutoFunctionsJSONArray.optJSONObject(i);
				if (oCheckAutoFunctionsJSONObject == null)
					continue;
				oCheckAutoFunctionsList.add(oCheckAutoFunctionsJSONObject);
			}
			
			// sorting the target function in sequence
			Collections.sort(oCheckAutoFunctionsList, new Comparator<JSONObject>() {
				public int compare(JSONObject CheckAutoFunctions1, JSONObject CheckAutoFunctions2) {
					return CheckAutoFunctions1.optInt("seq") - CheckAutoFunctions2.optInt("seq");
				}
			});
			
			int iCurrentSeq = 0;
			ArrayList<JSONObject> oTmpArrayList = new ArrayList<JSONObject>();
			m_oRemainAutoFunctions.clear();
			for (int i = 0; i < oCheckAutoFunctionsList.size(); i++) {
				if (i == 0) {
					iCurrentSeq = oCheckAutoFunctionsList.get(i).optInt("seq");
					oTmpArrayList.add(oCheckAutoFunctionsList.get(i));
				} else {
					if (oCheckAutoFunctionsList.get(i).optInt("seq") != iCurrentSeq) {
						iCurrentSeq = oCheckAutoFunctionsList.get(i).optInt("seq");
						if (oTmpArrayList.size() > 0) {
							m_oRemainAutoFunctions.offer(oTmpArrayList);
							oTmpArrayList = new ArrayList<JSONObject>();
						}
					}
					oTmpArrayList.add(oCheckAutoFunctionsList.get(i));
				}
			}
			if (oTmpArrayList.size() > 0)
				m_oRemainAutoFunctions.offer(oTmpArrayList);
		}
	}
	
	private void performAutoFunction() {
		m_sCurrentFunctionKey = "auto_function";
		
		if (m_oRemainAutoFunctions.size() == 0) {
			//If performAutoFunction success, set back VALUE of FINISH to TRUE in Auto Function Extra Info
			if (AppGlobal.g_oFuncStation.get().getCheckAutoFunctionsOption()
					&& m_oFuncCheck.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_AUTO_FUNCTIONS,
					PosCheckExtraInfo.VARIABLE_FINISH, 0)) {
				m_oFuncCheck.updateCheckExtraInfoValue (PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_AUTO_FUNCTIONS,
						PosCheckExtraInfo.VARIABLE_FINISH, 0, PosCheckExtraInfo.VALUE_TRUE);
			}
			return;
		}
		
		ArrayList<JSONObject> oAutoFunctionsList = m_oRemainAutoFunctions.poll();
		
		// Set result flag = fail as default for auto station
		AppGlobal.g_sResultForAutoFunction.set(AppGlobal.AUTO_FUNCTIONS_RESULT_LIST.fail.name());
		
		//some functions should not be supported in split check auto functions
		if(m_bProcessingSplitCheckAutoFunction){
			for(int i = oAutoFunctionsList.size() -1; i >= 0 ; i--){
				JSONObject oSelectedKeyJsonObject = oAutoFunctionsList.get(i);
				try {
					if (oSelectedKeyJsonObject.getString("function_key").equals(AppGlobal.FUNC_LIST.admin_mode.name())
							|| oSelectedKeyJsonObject.getString("function_key").equals(AppGlobal.FUNC_LIST.paid.name())
							|| oSelectedKeyJsonObject.getString("function_key").equals(AppGlobal.FUNC_LIST.print_and_paid.name()))
						oAutoFunctionsList.remove(i);
				} catch (JSONException e) {
					AppGlobal.stack2Log(e);
				}
			}
		}
		
		if (oAutoFunctionsList.size() == 1) {
			try {
				JSONObject oSelectedKeyJsonObject = oAutoFunctionsList.get(0);
				
				PosFunction oPosFunction = m_oFunctionList.getFunctionByKey(oSelectedKeyJsonObject.getString("function_key"));
				HashMap<String, String> oFuncParam = null;
				if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.set_member.name())) {
					oFuncParam = new HashMap<String, String>();
					oFuncParam.put("memberId", Integer.toString(0));
					oFuncParam.put("autoFunction", "true");
				}
				else if(oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.svc_enquiry.name())) {
					oFuncParam = new HashMap<String, String>();
					oFuncParam.put("memberNumber", oSelectedKeyJsonObject.optJSONObject("params").optString("member_number"));
					oFuncParam.put("memberSurname", oSelectedKeyJsonObject.optJSONObject("params").optString("member_surname"));
					oFuncParam.put("interfaceId", oSelectedKeyJsonObject.optJSONObject("params").optString("interface_id"));
					oFuncParam.put("autoFunction", "true");
				}
				this.fcnSwitch(oPosFunction.getFuncId(), "", -1, -1, false, oFuncParam);
				
				// Quit check if fail to perform function
				if (AppGlobal.g_sResultForAutoFunction.get().equals(AppGlobal.AUTO_FUNCTIONS_RESULT_LIST.fail.name())) {
					if (oSelectedKeyJsonObject.getString("fail_handling").equals(NEW_CHECK_AUTO_FUNCTIONS_QUIT)) {
						this.fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.cancel.name()), "", -1, -1,
								false, null);
						
						// Clear the remain auto function
						m_oRemainAutoFunctions.clear();
					} else if (oSelectedKeyJsonObject.getString("fail_handling").equals(NEW_PAYMENT_AUTO_FUNCTIONS_BACK))
						m_oRemainAutoFunctions.clear();
				}
				// must quit the loop after quit check
				else if (AppGlobal.g_sResultForAutoFunction.get().equals(AppGlobal.AUTO_FUNCTIONS_RESULT_LIST.forced_quit.name()))
					// Clear the remin auto function
					m_oRemainAutoFunctions.clear();
			} catch (Exception e) {
				AppGlobal.stack2Log(e);
			}
			
			// Perform next auto function
			performAutoFunction();
		}
		else if (oAutoFunctionsList.size() == 0)
			performAutoFunction();
		else {
			FormOptionBox oFormOptionBox = new FormOptionBox(this);
			oFormOptionBox.addListener(this);
			oFormOptionBox.setTitle(AppGlobal.g_oLang.get()._("please_select_the_function") + ":");
			
			for (JSONObject oTmpJsonObject : oAutoFunctionsList) {
				PosFunction oPosFunction = m_oFunctionList.getFunctionByKey(oTmpJsonObject.optString("function_key"));
				try {
					JSONObject oKeyJsonObject = new JSONObject();
					oKeyJsonObject.put("function_key", oTmpJsonObject.optString("function_key"));
					oKeyJsonObject.put("fail_handling", oTmpJsonObject.optString("fail_handling"));
					oFormOptionBox.addOption(oPosFunction.getName(AppGlobal.g_oCurrentLangIndex.get()),oKeyJsonObject);
				} catch (Exception e) {
					AppGlobal.stack2Log(e);
				}
			}
			oFormOptionBox.setVisible(true);
			oFormOptionBox.show();
		}
	}
	
	private void splitCheckAutoFunctionDetermineByExtraInfo() {
		//check if split check auto func enable, and if auto func extra info exist
		if (AppGlobal.g_oFuncStation.get().getCheckAutoFunctionsOption()
				&& m_oFuncCheck.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_AUTO_FUNCTIONS,
				PosCheckExtraInfo.VARIABLE_FINISH, 0)) {
			//check if split auto func not finished and not processing previously
			if(m_oFuncCheck.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_AUTO_FUNCTIONS,
					PosCheckExtraInfo.VARIABLE_FINISH).equals(PosCheckExtraInfo.VALUE_FALSE) && !m_bProcessingSplitCheckAutoFunction) {
				JSONArray oCheckAutoFunctionsJSONArray = AppGlobal.g_oFuncStation.get().getCheckAutoFunctions();
				prepareAutoFunctionList(oCheckAutoFunctionsJSONArray);
				m_bProcessingSplitCheckAutoFunction = true;
				performAutoFunction();
				m_bProcessingSplitCheckAutoFunction = false;
			}
		}
	}
	
	// Pre-checking for open check process
	private boolean openCheckPreChecking(String sTableNo, String sTableExtension) {
		// Check if period is defined
		if (AppGlobal.g_oFuncOutlet.get().getBusinessPeriod() == null
				|| AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId().compareTo("") == 0) {
			FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
					AppGlobal.g_oLang.get()._("no"), this);
			oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
			oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("missing_period_setting") + ", "
					+ AppGlobal.g_oLang.get()._("continue") + "?");
			oFormConfirmBox.show();
			if (oFormConfirmBox.isOKClicked() == false) {
				return false;
			}
		}
		
		// Flag for preventing multiple open check
		if (!m_sPreventMulitpleOpenCheckFlag.isEmpty()) {
			AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
					AppGlobal.g_oFuncUser.get().getUserId() + "",
					"Table (" + m_sPreventMulitpleOpenCheckFlag + ") is opening, skip open table (" + sTableNo + sTableExtension + ")");
			
			return false;
		}
		
		return true;
	}
	
	// Pre-process for open check process
	private void openCheckPreProcess(int iTableNo, String sTableExt) {
		// Check and do panel override
		panelOverride(iTableNo, sTableExt, false);
		
		// Check if price level is manually changed before
		// If yes, ask user if need to back to default of not
		if (AppGlobal.g_oFuncOutlet.get().isPriceLevelChangeManually()) {
			FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
					AppGlobal.g_oLang.get()._("no"), this);
			oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
			oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("price_level_is_changed_manaully") + System.lineSeparator()
					+ AppGlobal.g_oLang.get()._("current_price_level") + ":"
					+ AppGlobal.g_oFuncOutlet.get().getPriceLevel() + System.lineSeparator()
					+ AppGlobal.g_oLang.get()._("back_to_outlet_default_price_level") + "?");
			oFormConfirmBox.show();
			if (oFormConfirmBox.isOKClicked() == true) {
				AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
						AppGlobal.g_oFuncUser.get().getUserId() + "",
						"Price level back to default from " + AppGlobal.g_oFuncOutlet.get().getPriceLevel());
				
				// Change back to default price level
				AppGlobal.g_oFuncOutlet.get().setManualPriceLevel(-1);
			}
		}
		
		// cleanup stored temporary item list
		m_oStoredFuncCheckItemList.clear();
	}
	
	// Call API to lock table and load check
	private String openCheckThread(String sTableNo, String sTableExtension, boolean bShowUI, boolean bSkipLockTable) {
		String sErrMsg = "";
		
		// ***** DEBUG *****
		// Show memory usage
		if (AppGlobal.g_iDebugMode > 0)
			AppGlobal.showMemory();
		// *****************
		
		// Memory check
		AppGlobal.checkMemory();
		
		if (AppGlobal.g_iLogLevel >= 9) {
			AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(),
					"Start open check");
		}
		
		if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) != true
				&& AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) != true
				&& AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) != true)
			// Wait for previous check processing finish (*** except fast food
			// mode, this will be done in payment)
			waitForProcessCheckFinish(sTableNo, sTableExtension);
		
		if (AppGlobal.g_iLogLevel >= 9) {
			AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(),
					"Finish previous check");
		}
		
		m_oFuncCheck = new FuncCheck();
		m_oFuncCheck.addListener(this);
		if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
				|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) == true
				|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) == true)
			m_oFuncCheck.setFastFoodCheck(true);
		else if (AppGlobal.OPERATION_MODE.stock_delivery.equals(m_eOperationMode) == true)
			m_oFuncCheck.setStockDeliveryInvoice(true);
		
		// Init business date setup
		m_oFuncCheck.initBusinessDaySetup(AppGlobal.g_oFuncOutlet.get());
		
		if (AppGlobal.g_iLogLevel >= 9) {
			AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(),
					"Before update stock");
		}
		
		AppThreadManager oAppThreadManager = new AppThreadManager();
		
		// Get current active client to check if item stock quantity status is required
		// to update or not
		boolean bNeedUpdateItemList = false;
		ClsActiveClient oActiveClient = AppGlobal.getActiveClient(AppGlobal.g_oFuncStation.get().getAddress());
		if (oActiveClient != null) {
			if (oActiveClient.getNeedUpdateItemStockQtyStatus()) {
				bNeedUpdateItemList = true;
			}
		}
		
		// Create thread to get current item stock list
		// Thread 1 :
		if (AppGlobal.g_bNotCheckStock == false && bNeedUpdateItemList) {
			Object[] oParameters = new Object[3];
			oParameters[0] = AppGlobal.g_oFuncOutlet.get().getOutletId();
			oParameters[1] = PosOutletItem.CHECK_STOCK_YES;
			oParameters[2] = PosOutletItem.SOLDOUT_YES;
			oAppThreadManager.addThread(1, m_oFuncCheck, "getCurrentItemStockList", oParameters);
		}
		
		oAppThreadManager.runThread();
		
		// Get period id
		String sPeriodId = AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId();
		
		if (AppGlobal.g_iLogLevel >= 9) {
			AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(),
					"Before lock table");
		}
		
		// Try to lock table
		// For old check, load the old check
		String sOrderingMode;
		if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food))
			sOrderingMode = PosCheck.ORDERING_MODE_FAST_FOOD;
		else if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk))
			sOrderingMode = PosCheck.ORDERING_MODE_SELF_ORDER_KIOSK;
		else if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.stock_delivery))
			sOrderingMode = PosCheck.ORDERING_MODE_DELIVERY;
		else if(m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab))
			sOrderingMode = PosCheck.ORDERING_MODE_BAR_TAB;
		else
			sOrderingMode = PosCheck.ORDERING_MODE_FINE_DINING;
		
		if (m_oFuncCheck.lockTable(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), sPeriodId,
				AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(), sTableNo,
				sTableExtension, true, bSkipLockTable, sOrderingMode, "", false) == true) {
			if (AppGlobal.g_iLogLevel >= 9) {
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(),
						new Exception().getStackTrace()[0].getMethodName(), "After lock table");
			}
			
			// Wait for loading the current item stock list
			oAppThreadManager.waitForThread();
			
			if (AppGlobal.g_iLogLevel >= 9) {
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(),
						new Exception().getStackTrace()[0].getMethodName(), "After update stock");
			}
			
			boolean bReservedCheck = false;
			if (m_oFuncCheck.getOutletTableTag().equals(PosOutletTable.TAG_SEAT_IN) &&
					(m_oFuncCheck.getOutletTableStatus().equals(PosOutletTable.STATUS_NEW_TABLE) || m_oFuncCheck.getOutletTableStatus().equals(PosOutletTable.STATUS_VACANT)))
				bReservedCheck = true;
			
			// Allow to load old check / new reserved check only
			if (!bShowUI && !m_oFuncCheck.isOldCheck() && !bReservedCheck) {
				m_oFuncCheck.unlockTable(true, false);
				sErrMsg = AppGlobal.g_oLang.get()._("cannot_load_new_check");
			}
			
			// Calculate the loyalty base total
			m_oFuncCheck.calcLoyaltyBaseTotal();
			
			// For new check, set check attr id if table setting is found
			if (!m_oFuncCheck.isOldCheck()) {
				PosCheckAttribute oPosCheckAttribute = new PosCheckAttribute();
				PosTableSetting oPosTableSetting = m_oPosTableSettingList.getPosTableSettingByTable(sTableNo, sTableExtension);
				if (oPosTableSetting != null && oPosTableSetting.getTblsId() > 0) {
					oPosCheckAttribute.setOutletId(AppGlobal.g_oFuncOutlet.get().getOutletId());
					oPosCheckAttribute.setAttrAttoId(oPosTableSetting.getTblsCheckAttrAutoId());
				}
				m_oFuncCheck.setCheckAttribute(oPosCheckAttribute);
			} else{
				// Init FuncPayment for payment process
				m_oFuncPayment.init(m_oFuncCheck.getCheckTotal(), AppGlobal.g_oFuncOutlet.get().getCheckRoundMethod(),
						AppGlobal.g_oFuncOutlet.get().getCheckRoundDecimal(), AppGlobal.g_oFuncOutlet.get().getPayRoundMethod(),
						AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal());
				
				// Add old payment to list
				for(PosCheckPayment oOldPayment: m_oFuncCheck.getCheckPaymentList()){
					m_oFuncPayment.addOldPayment(oOldPayment);
					// Add currency payment
					if(oOldPayment.isPayByForeignCurrency())
						m_oFuncPayment.addCurrencyToList(oOldPayment.getCurrencyCode());
				}
			}
		} else {
			// Wait for loading the current item stock list
			oAppThreadManager.waitForThread();
			
			// Fail to lock table
			sErrMsg = m_oFuncCheck.getLastErrorMessage();
		}
		
		// To prevent useless checking on item stock quantity
		// Set the update flag to false if no outlet item records is found
		// The flag turn on if there is any new update on outlet item records checked by background jobs
		if (m_oFuncCheck.getItemStockList().size() == 0) {
			oActiveClient.setNeedUpdateItemStockQtyStatus(false);
		}
		
		return sErrMsg;
	}
	
	private boolean checkValidIntegerValue(String sValue) {
		try {
			Integer.valueOf(sValue);
			return true;
		} catch (NumberFormatException e) {
			this.showErrorDialogBox(AppGlobal.g_oLang.get()._("invalid_input"));
			return false;
		}
	}
	
	// Ask cover for new check
	private int askCover(String sTableNo, String sTableExtension) {
		int iCover = -1;
		// ask cover
		while (true) {
			// Initialize
			iCover = -1;
			
			FormInputBox oFormInputBox = new FormInputBox(this);
			//if (AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name())) {
			//m_oFrameCover.setVisible(true);
			//m_oFrameCover.bringToTop();
			//}
			oFormInputBox.init();
			oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("welcome"));
			String sTable = AppGlobal.g_oFuncOutlet.get().getTableNameWithTableNo(sTableNo,
					sTableExtension)[AppGlobal.g_oCurrentLangIndex.get() - 1];
			if(m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab) && sTableExtension.length() > 0 && sTableExtension.substring(sTableExtension.length() - 1).compareTo(AppGlobal.BAR_TAB_TABLE_EXTENSION) == 0)
				sTable = AppGlobal.g_oLang.get()._("auto");
			oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("please_input_the_no_of_guests_for_table") + " "
					+ sTable + ":");
			oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.NUMBER);
			if (AppGlobal.g_oFuncStation.get().getDefaultCover() >= 0)
				oFormInputBox.setDefaultInputValue(String.valueOf(AppGlobal.g_oFuncStation.get().getDefaultCover()));
			oFormInputBox.show();
			
			String sCover = oFormInputBox.getInputValue();
			String sErrMsg;
			
			if (sCover == null) {
				m_oFrameTableFloorPlan.setIdleTimeLogoutTimer(true);
				break;
			}
			
			if (!checkValidIntegerValue(sCover))
				continue;
			
			iCover = Integer.valueOf(sCover);
			
			if(iCover < 0) {
				sErrMsg = AppGlobal.g_oLang.get()._("please_input_cover_with_positive_amount");
				this.showErrorDialogBox(sErrMsg);
				continue;
			}
			
			// Checking the cover upper bound
			int iCoverLimitNumber = AppGlobal.g_oFuncStation.get().getCoverUpperBound();
			if (iCoverLimitNumber > 0 && iCover > iCoverLimitNumber) {
				sErrMsg = AppGlobal.g_oLang.get()._("cannot_input_cover_more_than") + " " + iCoverLimitNumber;
				this.showErrorDialogBox(sErrMsg);
				continue;
			}
			
			// Checking the cover warning
			int iCoverWarningLimit = AppGlobal.g_oFuncStation.get().getCoverWarningLimit();
			if (iCoverWarningLimit > 0 && iCover > iCoverWarningLimit) {
				sErrMsg = AppGlobal.g_oLang.get()._("exceed_the_cover_limit") + " : " + iCoverWarningLimit;
				
				FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
						AppGlobal.g_oLang.get()._("no"), this);
				oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
				oFormConfirmBox.setMessage(sErrMsg + System.lineSeparator() + AppGlobal.g_oLang.get()._("continue") + "?");
				oFormConfirmBox.show();
				if (oFormConfirmBox.isOKClicked() == false)
					continue;
				
			}
			
			m_oFrameCover.setVisible(false);
			
			break;
		}
		
		return iCover;
	}
	
	// Prepare screen for open check process
	private boolean openCheckPrepareScreen(String sTableNo, String sTableExtension, boolean bShowUI, int iCover) {
		this.showOrderingModeImage();
		this.showRevenueImage();
		
		if (AppGlobal.g_iLogLevel >= 9) {
			AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(),
					"Before prepare screen");
		}
		
		// Update item stock qty to ordering panel button
		m_oFrameOrderingPanel.updateStockQtyButton(m_oFuncCheck.getItemStockList());
		
		if (m_oFuncCheck.isOldCheck()) {
			// Old check
			// Add item to ordering basket
			if (bShowUI && !m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name()))
				// Use timer to draw the basket
				m_oFrameOrderingBasket.startUpdateBasket();
			
		} else {
			// New check
			// For Stock Delivery Mode, ask outlet for new invoice
			if (AppGlobal.OPERATION_MODE.stock_delivery.equals(m_eOperationMode) == true) {
				OutOutlet oOutOutlet = selectOutlet();
				if (oOutOutlet == null)
					return false;
				m_oFuncCheck.setStockDeliveryInvoiceShopId(oOutOutlet.getShopId());
				m_oFuncCheck.setStockDeliveryInvoiceOutletId(oOutOutlet.getOletId());
			}
			
			// Set cover
			m_oFuncCheck.setCover(iCover, true);
			
			// Create section for each seat in basket
			if (iCover > 1) {
				m_oFrameSeatPanel.setSeatLabelColor(0);
			}
			
			// override check ordering type to takeout if override conditions
			// are matched
			if (AppGlobal.g_oFuncOverrideList.get(AppGlobal.g_oFuncOutlet.get().getOutletId())
					.checkOrderingTypeOverride(Integer.parseInt(sTableNo), sTableExtension, 0, m_oFuncCheck.getCustomTypeId()))
				this.checkTakeout(false);
		}
		
		if (bShowUI) {
			// Set the selected basket to shared
			if (!m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name()))
				m_oFrameOrderingBasket.setSelectedSection(0);
			
			// Update screen with calculated check figure
			if ((AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) || AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode))
					&& !AppGlobal.g_oFuncOutlet.get().getBusinessDay().isCheckNumGeneratedByOutlet()) {
				if (m_oFuncCheck.isOldCheck())
					m_oFrameCheckDetail.setTableNo(StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT,
							m_oFuncCheck.getCheckPrefixNo() + "#"));
				else
					m_oFrameCheckDetail.setTableNo(StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT,
							AppGlobal.g_oFuncStation.get().getNextCheckPrefixNumber(true)));
			} else {
				if(m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab) && sTableExtension.length() > 0 && sTableExtension.substring(sTableExtension.length() - 1).compareTo(AppGlobal.BAR_TAB_TABLE_EXTENSION) == 0) {
					String[] sTable = StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, AppGlobal.g_oLang.get()._("auto"));
					m_oFrameCheckDetail.setTableNo(sTable);
				}else
					m_oFrameCheckDetail.setTableNo(AppGlobal.g_oFuncOutlet.get().getTableName(sTableNo, sTableExtension));
			}
			m_oFrameCheckDetail.setCover(m_oFuncCheck.getCover());
			
			if (!m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name()))
				this.updateBasketExtendBarCheckTotal();
			
			// Hidden the table floor
			showTableFloorPlanScreen(false);
			
			// Turn on the flag for preventing multiple open check
			m_sPreventMulitpleOpenCheckFlag = sTableNo + sTableExtension;
		}
		
		// Reset current course no.
		manualIncrementCourseNoFunction(true);
		
		if (AppGlobal.g_iLogLevel >= 9) {
			AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(),
					"After prepare screen");
		}
		
		// Write application log
		if (bShowUI) {
			if (m_oFuncCheck.isOldCheck())
				AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
						AppGlobal.g_oFuncUser.get().getUserId() + "", "Open old table " + sTableNo + sTableExtension);
			else
				AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
						AppGlobal.g_oFuncUser.get().getUserId() + "", "Open new table " + sTableNo + sTableExtension);
		}
		
		if (AppGlobal.g_iLogLevel >= 9) {
			AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(),
					"Finish open check");
		}
		
		return true;
	}
	
	private void unlockTableByThread(boolean sSaveCheck, boolean bQuitCheckFunction) {
		// Unlock table
		// *****************************************************************
		AppThreadManager oAppThreadManager = new AppThreadManager();
		
		// Add the method to the thread manager
		// Thread 1 :
		Object[] oParameters = new Object[2];
		oParameters[0] = sSaveCheck;
		oParameters[1] = bQuitCheckFunction;
		oAppThreadManager.addThread(1, m_oFuncCheck, "unlockTable", oParameters);
		
		oAppThreadManager.runThread();
	}
	
	// Add hot item - 1st step
	private boolean addHotItem(int iId, BigDecimal dQty, boolean bPreorder) {
		boolean bOpenSetMenuMode = false;
		boolean bSelfAppendItemDescMode = false;
		
		// Check business hour warning in kiosk mode
		if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) && !crossDateOpenCheckChecking()) {
			// Force exit
			quitCheck(true);
			
			logout(true);
			
			return false;
		}
		
		// Check whether item is exist or not
		FuncMenuItem oFuncMenuItem = AppGlobal.g_oFuncMenu.get().getFuncMenuItemByItemId(iId);
		if (oFuncMenuItem == null) {
			this.showErrorDialogBox(AppGlobal.g_oLang.get()._("item_cannot_be_found"));
			return false;
		}
		
		m_bStockOperationSetMenu = false;
		// Under use panel to select item for function mode
		if (m_bUsePanelToSelectItemMode == true) {
			int iFuncId = m_iUsePanelToSelectItemModeCurrentFuncId;
			if (iFuncId == m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.stock_operation.name())
					|| iFuncId == m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.stock_soldout.name())
					|| iFuncId == m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.stock_soldout_by_shop.name())) {
				
				m_bStockOperationSetMenu = true;
				if (!m_oFramePanelItemSelectPanel.haveRecord(iId)){
					if (oFuncMenuItem.getMenuItem().getChildCount() > 0 && oFuncMenuItem.isSelfSelectedSetMenu()){
						ArrayList<String> oOptionList = new ArrayList<String>();
						oOptionList.add(AppGlobal.g_oLang.get()._("set_menu_parent_item"));
						oOptionList.add(AppGlobal.g_oLang.get()._("child_item"));
						
						FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
						oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select"),
								oOptionList, false);
						oFormSelectionBox.show();
						if (oFormSelectionBox.isUserCancel()) // User cancel
							return false;
						else {
							ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
							if(oSelectionBoxResult.get(0) == 0)
								m_oFramePanelItemSelectPanel.addItem(0, iId, oFuncMenuItem.getMenuItem().getName(AppGlobal.g_oCurrentLangIndex.get()));
							else if (oSelectionBoxResult.get(0) == 1){
								if(iFuncId == m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.stock_operation.name()))
									initSetMenu(null, oFuncMenuItem.getMenuItem(), FrameSetMenu.SET_MENU_FROM_OPERATION, false);
								else if(iFuncId == m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.stock_soldout.name())
										|| iFuncId == m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.stock_soldout_by_shop.name()))
									initSetMenu(null, oFuncMenuItem.getMenuItem(), FrameSetMenu.SET_MENU_FROM_SOLDOUT, false);
							}
						}
					}
					else
						m_oFramePanelItemSelectPanel.addItem(0, iId, oFuncMenuItem.getMenuItem().getName(AppGlobal.g_oCurrentLangIndex.get()));
				}
			} else if (iFuncId == m_oFunctionList
					.getFunctionIdByKey(AppGlobal.FUNC_LIST.set_menu_replace_item.name())) {
				String sKey = m_oBasketSelectedItems.firstKey();
				int iSlashIndex = sKey.indexOf("_");
				int iSectionId = Integer.parseInt(sKey.substring(0, iSlashIndex));
				int iItemIndex = Integer.parseInt(sKey.substring(iSlashIndex + 1));
				m_oBasketSelectedItems.clear();
				
				HashMap<String, String> oFuncParam = new HashMap<String, String>();
				oFuncParam.put("itemId", Integer.toString(iId));
				fcnSwitch(iFuncId, "", iSectionId, iItemIndex, true, oFuncParam);
				
				this.toggleUsePanelToSelectItemMode(false, false);
			} else if (iFuncId == m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.wastage_operation.name()) ||
					iFuncId == m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.search_item_stock.name())) {
				
				if(iFuncId == m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.wastage_operation.name()))
					frameSearchItem_askQty(iId, oFuncMenuItem.getMenuItem().getName(AppGlobal.g_oCurrentLangIndex.get()), oFuncMenuItem.getMenuItem().getCode());
				else if(iFuncId == m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.search_item_stock.name()))
					frameSearchItem_searchItemStock(iId, oFuncMenuItem.getMenuItem().getName(AppGlobal.g_oCurrentLangIndex.get()), oFuncMenuItem.getMenuItem().getCode());
				
				this.toggleUsePanelToSelectItemMode(false, false);
			} else if (iFuncId == 0 && m_oUsePanelToSelectItemParentItem != null) {
				if (oFuncMenuItem.getMenuItem().isChild() && oFuncMenuItem.getMenuItem().getChildCount() == 0
						&& !oFuncMenuItem.getMenuItem().isOpenSetMenu()) {
					int iPriceLevel = AppGlobal.g_oFuncOutlet.get().getPriceLevel();
					if (addItem(m_oUsePanelToSelectItemParentItem, oFuncMenuItem.getMenuItem().getItemId(),
							new BigDecimal("1.0"), new BigDecimal("1.0"), false, true, false, iPriceLevel,
							null) == true) {
						autoAssignCourseToNewOrderItem();
						finishAddItem(false);
						m_oFramePanelItemSelectPanel.addItem(0, iId,
								oFuncMenuItem.getMenuItem().getName(AppGlobal.g_oCurrentLangIndex.get()));
					} else {
						return false;
					}
				} else {
					this.showErrorDialogBox(AppGlobal.g_oLang.get()._("new_item_is_not_a_child_item"));
					return false;
				}
			} else if (m_iOpenSelectItemId > 0)
				m_oFramePanelItemSelectPanel.addItem(0, iId,
						oFuncMenuItem.getMenuItem().getName(AppGlobal.g_oCurrentLangIndex.get()));
			return true;
		} else {
			if (!oFuncMenuItem.getMenuItem().isCalculateMehodSumUp() && oFuncMenuItem.getMenuItem().isOpenSetMenu() && oFuncMenuItem.isValidSetMenu()) {
				m_iUsePanelToSelectItemModeCurrentFuncId = 0;
				this.toggleUsePanelToSelectItemMode(true, true);
				bOpenSetMenuMode = true;
			} else if (oFuncMenuItem.getMenuItem().isAppendDescriptionWithPanelButton()) {
				m_iUsePanelToSelectItemModeCurrentFuncId = 0;
				this.toggleUsePanelToSelectItemMode(true, true);
				bSelfAppendItemDescMode = true;
			}
		}
		
		if (bSelfAppendItemDescMode) {
			m_iOpenSelectItemId = iId;
			return true;
		} else {
			if (addItem(null, iId, dQty, new BigDecimal("1.0"), false, false, bPreorder,
					AppGlobal.g_oFuncOutlet.get().getPriceLevel(), null) == true) {
				// Check if course is set.
				// If yes, auto-assign course to new order NORMAL item
				autoAssignCourseToNewOrderItem();
				
				// Add hot item success
				finishAddItem(bPreorder);
				
				if (bOpenSetMenuMode) {
					int iSelectedSeatNo = m_oFrameOrderingBasket.getSelectedSectionId();
					for (int i = 1; i < m_oFuncCheck.getItemListCount(iSelectedSeatNo) + 1 ; i++){
						m_oUsePanelToSelectItemParentItem = m_oFuncCheck.getCheckItem(iSelectedSeatNo,
								m_oFuncCheck.getItemListCount(iSelectedSeatNo) - i);
						if (m_oUsePanelToSelectItemParentItem.getMenuItem().isOpenSetMenu())
							break;
					}
				}
				return true;
			} else // Fail to add item
				return false;
		}
	}
	
	// Add item - core part
	private boolean addItem(FuncCheckItem oParentFuncCheckItem, int iId, BigDecimal dQty, BigDecimal dBaseQty,
	                        boolean bModifier, boolean bChildItem, boolean bPreorder, int iPriceLevel, BigDecimal oFixOpenPrice) {
		boolean bBreak, bAuthorizeByOther = false;
		FuncUser oUser = AppGlobal.g_oFuncUser.get();
		String sErrMsg = "";
		
		// Check errors : Retrieve item from menu error,
		// disable or inactive,
		// item sold out,
		// item count
		FuncCheckItem oFuncCheckItem = this.addItemPreChecking(oParentFuncCheckItem, iId, dQty, dBaseQty, bModifier,
				bChildItem, iPriceLevel);
		if (oFuncCheckItem == null)
			return false;
		
		if(m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name())) {
			if (oFuncCheckItem.isForceModifier())
				sErrMsg = AppGlobal.g_oLang.get()._("cannot_add_item_with_modifier_in_split_revenue_function");
			else if(oFuncCheckItem.isSetMenu())
				sErrMsg = AppGlobal.g_oLang.get()._("cannot_add_set_menu_in_split_revenue_function");
			else if(!(m_oUsePanelToSelectItemParentItem.getNetItemTotal().compareTo(BigDecimal.ZERO) > 0))
				sErrMsg = AppGlobal.g_oLang.get()._("no_revenue_can_be_splitted");
			
			if (!sErrMsg.isEmpty()) {
				this.showErrorDialogBox(sErrMsg);
				return false;
			}
		}
		
		// check order permission
		String sAllow = AppGlobal.g_oFuncMenu.get()
				.getItemOrderAllowance(oFuncCheckItem.getMenuItem().getOrderItemGroupId(), oUser.getUserGroupList());
		if (!sAllow.equals(PosOrderItemAcl.ALLOW_YES)) {
			boolean bFirstAsk = true;
			AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
					AppGlobal.g_oFuncUser.get().getUserId() + "", "Function: Order item permission(Ask authority)");
			do{
				this.showErrorDialogBox(AppGlobal.g_oLang.get()._("not_allow_order_this_item"));
				cancelAddItemChecking(oFuncCheckItem.getMenuItemId(), dQty);
				if(bFirstAsk && sAllow.equals(PosOrderItemAcl.ALLOW_NO))
					return false;
				
				oUser = askUserPassword(AppGlobal.g_oLang.get()._("ask_approval"), true);
				if (oUser == null)
					return false;
				
				sAllow = AppGlobal.g_oFuncMenu.get()
						.getItemOrderAllowance(oFuncCheckItem.getMenuItem().getOrderItemGroupId(), oUser.getUserGroupList());
				
				if(sAllow.equals(PosOrderItemAcl.ALLOW_YES))
					bAuthorizeByOther = true;
			}while(sAllow.equals(PosOrderItemAcl.ALLOW_NO_ASK_FOR_ANOTHER_USER_AUTHORITY));
		}
		
		if (oFuncCheckItem.getCheckItem().getCode().equals(AppGlobal.g_oFuncStation.get().getTableValidationTableMinimumChargeItemCode())) {
			String sMinimumCharge = m_oFuncCheck.getCheckExtraInfoBySectionAndVariable("", PosCheckExtraInfo.VARIABLE_MIN_CHARGE, 0);
			if (sMinimumCharge != null && !sMinimumCharge.equals("0") && !sMinimumCharge.isEmpty() && oFixOpenPrice == null) {
				this.showErrorDialogBox(AppGlobal.g_oLang.get()._("not_allow_to_order_minimum_charge_item"));
				cancelAddItemChecking(oFuncCheckItem.getMenuItemId(), dQty);
				return false;
			}
		}
		
		// Check order item control
		if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) && oParentFuncCheckItem == null){
			boolean bAllowOrder = this.checkOrderItemControlLimit(oFuncCheckItem.getCheckItem().getItemId(), dQty);
			if(!bAllowOrder){
				showErrorDialogBox(AppGlobal.g_oLang.get()._("item_quantity_limit_per_check_exceeded")+ ":" + System.lineSeparator() + oFuncCheckItem.getCheckItem().getName(AppGlobal.g_oCurrentLangIndex.get()));
				cancelAddItemChecking(oFuncCheckItem.getMenuItemId(), dQty);
				return false;
			}
		}
		
		// Check if item is open-description
		if (oFuncCheckItem.isOpenDescription()) {
			// Ask open description
			FormInputBox oFormInputBox;
			String sOpenDesc = null;
			
			do {
				bBreak = false;
				oFormInputBox = new FormInputBox(this);
				oFormInputBox.init();
				oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DEFAULT);
				oFormInputBox.showKeyboard();
				oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("open_description"));
				oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("please_input_the_description") + ":");
				oFormInputBox.show();
				
				sOpenDesc = oFormInputBox.getInputValue();
				if (sOpenDesc == null) {
					cancelAddItemChecking(oFuncCheckItem.getMenuItemId(), dQty);
					return false;
				} else if (sOpenDesc.length() == 0 || sOpenDesc.trim().isEmpty()) {
					sErrMsg = AppGlobal.g_oLang.get()._("not_allow_blank_item_description");
					this.showErrorDialogBox(sErrMsg);
				} else
					bBreak = true;
				
			} while (!bBreak);
			oFuncCheckItem.setItemDesc(false, sOpenDesc);
			oFuncCheckItem.setItemShortDesc(false, sOpenDesc);
		}
		
		// Check if item is append-description
		if (oFuncCheckItem.isAppendOpenDescription()) {
			// Ask append description
			FormInputBox oFormInputBox = new FormInputBox(this);
			oFormInputBox.init();
			oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DEFAULT);
			oFormInputBox.showKeyboard();
			oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("append_description"));
			oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("please_input_the_append_description_to_item") + " - \""
					+ oFuncCheckItem.getItemShortDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get()) + "\"");
			oFormInputBox.show();
			
			String sAppendDesc = oFormInputBox.getInputValue();
			if (sAppendDesc != null) {
				oFuncCheckItem.setItemDesc(true, sAppendDesc);
				oFuncCheckItem.setItemShortDesc(true, sAppendDesc);
			} else {
				cancelAddItemChecking(oFuncCheckItem.getMenuItemId(), dQty);
				return false;
			}
		}
		
		// Check if item is item-selection-description
		if (oFuncCheckItem.isAppendPanelButtonDescription()) {
			// Ask item selection for description
			if (m_oOpenSelectItemName != null) {
				for (int i = 1; i <= 5; i++) {
					oFuncCheckItem.setItemDescByIndex(true, m_oOpenSelectItemName.get(i), i);
					oFuncCheckItem.setItemShortDescByIndex(true, m_oOpenSelectItemName.get(i), i);
				}
				m_oOpenSelectItemName.clear();
			} else {
				cancelAddItemChecking(oFuncCheckItem.getMenuItemId(), dQty);
				return false;
			}
		}
		
		// Check if fix open price provided
		if (oFixOpenPrice != null)
			oFuncCheckItem.setOpenPriceToItem(oFixOpenPrice);
		
		// Check if item is open-price item
		if (oFuncCheckItem.isOpenPrice() && oFixOpenPrice == null) {
			BigDecimal dOpenPrice = BigDecimal.ZERO;
			BigDecimal oMinPrice = null, oMaxPrice = null;
			FormInputBox oFormInputBox;
			
			bBreak = false;
			if (bChildItem) {
				oMinPrice = oFuncCheckItem.getMenuItem().getChildMinPrice();
				oMaxPrice = oFuncCheckItem.getMenuItem().getChildMaxPrice();
				dOpenPrice = oFuncCheckItem.getMenuItem().getChildPriceByPriceLevel(iPriceLevel);
			} else {
				oMinPrice = oFuncCheckItem.getMenuItem().getBasicMinPrice();
				oMaxPrice = oFuncCheckItem.getMenuItem().getBasicMaxPrice();
				dOpenPrice = oFuncCheckItem.getMenuItem().getBasicPriceByPriceLevel(iPriceLevel);
			}
			
			while (true) {
				bBreak = true;
				oFormInputBox = new FormInputBox(this);
				oFormInputBox.init();
				oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DECIMAL);
				oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("open_price"));
				oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("please_input_the_price") + ":");
				if (dOpenPrice != null)
					oFormInputBox
							.setDefaultInputValue(AppGlobal.g_oFuncOutlet.get().roundItemAmountToString(dOpenPrice));
				oFormInputBox.show();
				
				if (oFormInputBox.getInputValue() == null) {
					cancelAddItemChecking(oFuncCheckItem.getMenuItemId(), dQty);
					return false;
				}
				
				try {
					Double.valueOf(oFormInputBox.getInputValue());
				} catch (NumberFormatException e) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("invalid_input"));
					continue;
				}
				
				dOpenPrice = new BigDecimal(oFormInputBox.getInputValue());
				
				if (oMinPrice == null && oMaxPrice == null)
					break;
				
				if (oMinPrice != null && dOpenPrice.compareTo(oMinPrice) >= 0)
					bBreak = true;
				else if (oMinPrice != null) {
					bBreak = false;
					showErrorDialogBox(AppGlobal.g_oLang.get()._("open_price_need_to_be_larger_than") + " " + oMinPrice);
				}
				
				if (bBreak == false)
					continue;
				
				if (oMaxPrice != null && dOpenPrice.compareTo(oMaxPrice) <= 0)
					bBreak = true;
				else if (oMaxPrice != null) {
					bBreak = false;
					showErrorDialogBox(AppGlobal.g_oLang.get()._("open_price_need_to_be_less_than") + " " + oMaxPrice);
				}
				
				if (bBreak)
					break;
			}
			oFuncCheckItem.setOpenPriceToItem(dOpenPrice);
		}
		
		// Check if modifier should be applied or not
		if (AppGlobal.OPERATION_MODE.stock_delivery.equals(m_eOperationMode) == false && bPreorder == false
				&& oFuncCheckItem.isForceModifier()) {
			// Show modifier selection panel
			List<MenuMenu> oModifierMenuList = oFuncCheckItem.getModifierMenuList();
			if (oModifierMenuList.size() > 0) {
				// Special handle for keyboard during add item by PLU function
				if (m_oFrameEnterItemPLU.getVisible() == true)
					// Hide the keyboard
					AppGlobal.g_oTerm.get().hideKeyboard();
				
				if (!callModifierLookup(oFuncCheckItem, oModifierMenuList, -1, -1, false)) {
					cancelAddItemChecking(oFuncCheckItem.getMenuItemId(), dQty);
					return false;
				}
			} else {
				// No modifier lookup is defined
			}
		}
		
		oFuncCheckItem.getCheckItem().setOrderingType(m_oFuncCheck.getOrderingType());
		if(bAuthorizeByOther)
			oFuncCheckItem.setItemAuthorizedUserNum(oUser.getUserNumber());
		
		// Check whether included in applied check discount
		checkDiscountForNewlyAddedItem(oFuncCheckItem);
		
		// Add to item to list according to typ
		if (bChildItem && oParentFuncCheckItem != null) {
			oFuncCheckItem.getCheckItem().setOrderUserId(AppGlobal.g_oFuncUser.get().getUserId());
			oParentFuncCheckItem.addChildItemToList(oFuncCheckItem, true);
			m_oStoredFuncCheckItemList.add(oFuncCheckItem);
		} else if (bModifier && oParentFuncCheckItem != null)
			oParentFuncCheckItem.addModifierToList(oFuncCheckItem, true);
		else
			m_oStoredFuncCheckItemList.add(oFuncCheckItem);
		return true;
	}
	
	private FuncCheckItem addItemPreChecking(FuncCheckItem oParentFuncCheckItem, int iId, BigDecimal dQty,
	                                         BigDecimal dBaseQty, boolean bModifier, boolean bChildItem, int iPriceLevel) {
		String sErrMsg = "";
		FuncCheckItem oFuncCheckItem = new FuncCheckItem();
		
		// Create func check item from menu item
		if (oFuncCheckItem.retieveItemFromMenu(iId, dQty, dBaseQty, oParentFuncCheckItem, bModifier, bChildItem,
				iPriceLevel) == false) {
			// Retrieve item from menu error
			// Prompt error
			showErrorDialogBox(oFuncCheckItem.getLastErrorMessage());
			return null;
		}
		oFuncCheckItem.getCheckItem().setOrderUserId(AppGlobal.g_oFuncUser.get().getUserId());
		oFuncCheckItem.getCheckItem().setBusinessDayId(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId());
		
		// Check if disable or inactive or suspended
		if (oFuncCheckItem.isDisable() || oFuncCheckItem.isInactive() || oFuncCheckItem.isSuspended()) {
			// Check with menu module again
			oFuncCheckItem.updateFuncCheckItemFromDB();
			if (oFuncCheckItem.isDisable() || oFuncCheckItem.isInactive() || oFuncCheckItem.isSuspended()) {
				// Prompt error
				showErrorDialogBox(oFuncCheckItem.getLastErrorMessage());
				return null;
			}
		}
		
		// Check whether item sold out
		if (!m_eOperationMode.equals(AppGlobal.OPERATION_MODE.stock_delivery)
				&& m_oFuncCheck.isSoldout(oFuncCheckItem.getMenuItemId())) {
			String sMessage = AppGlobal.g_oLang.get()._("item_soldout");
			if (oParentFuncCheckItem != null)
				sMessage = sMessage + System.lineSeparator() + AppGlobal.g_oLang.get()._("child_item") + ": "
						+ oFuncCheckItem.getItemDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get());
			showDialogBox(AppGlobal.g_oLang.get()._("notice"), sMessage);
			return null;
		}
		
		// update item count
		String updateItmCntResult = m_oFuncCheck.updateItemCount(oFuncCheckItem.getMenuItemId(),
				oFuncCheckItem.getCheckItem().getQty(), true, false, false);
		if (updateItmCntResult.equals("s")) {
			// Prompt error
			if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
					|| AppGlobal.g_oFuncStation.get().getNotAllowToOrderWhenZeroStock()) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("item") + ":"
						+ oFuncCheckItem.getItemShortDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get()) + " "
						+ AppGlobal.g_oLang.get()._("sold_out"));
				return null;
			} else {
				sErrMsg = AppGlobal.g_oLang.get()._("item") + ":"
						+ oFuncCheckItem.getItemShortDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get()) + " "
						+ AppGlobal.g_oLang.get()._("sold_out") + ", " + AppGlobal.g_oLang.get()._("continue_to_order")
						+ "?";
				FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("ok"),
						AppGlobal.g_oLang.get()._("cancel"), this);
				oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("item_count_control"));
				oFormConfirmBox.setMessage(sErrMsg);
				oFormConfirmBox.show();
				
				if (oFormConfirmBox.isOKClicked())
					m_oFuncCheck.updateItemCount(oFuncCheckItem.getMenuItemId(), dQty, true, true, false);
				else
					return null;
			}
		} else if (updateItmCntResult.equals("<")) {
			// Prompt error
			if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
					|| AppGlobal.g_oFuncStation.get().getNotAllowToOrderWhenZeroStock()) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("dont_have_enough_stock"));
				return null;
			} else {
				sErrMsg = AppGlobal.g_oLang.get()._("dont_have_enough_stock") + ", "
						+ AppGlobal.g_oLang.get()._("continue_to_order") + "?";
				FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("ok"),
						AppGlobal.g_oLang.get()._("cancel"), this);
				oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("item_count_control"));
				oFormConfirmBox.setMessage(sErrMsg);
				oFormConfirmBox.show();
				
				if (oFormConfirmBox.isOKClicked())
					m_oFuncCheck.updateItemCount(oFuncCheckItem.getMenuItemId(), dQty, true, true, false);
				else
					return null;
			}
		} else if (updateItmCntResult.equals("-s") || updateItmCntResult.equals("-<")) {
			m_oFuncCheck.updateItemCount(oFuncCheckItem.getMenuItemId(), dQty, true, true, false);
		}
		
		this.updateLookupButtonStockQty(oFuncCheckItem.getMenuItemId());
		
		return oFuncCheckItem;
	}
	
	public void cancelAddItemChecking(int iMenuItemId, BigDecimal dQty) {
		m_oFuncCheck.updateItemCount(iMenuItemId, dQty, false, false, false);
		updateLookupButtonStockQty(iMenuItemId);
	}
	
	public void refundItem(List<HashMap<String, Integer>> oSelectedItems) {
		for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
			int iSectionId = oSelectedItem.get("sectionId");
			int iItemIndex = oSelectedItem.get("itemIndex");
			int iChildItemIndex = iItemIndex;
			FuncCheckItem oTargetItem = m_oFuncCheck.getCheckItem(iSectionId, iItemIndex);
			// change parent modifier qty
			for (FuncCheckItem oModifier : oTargetItem.getModifierList()) {
				BigDecimal dNewQty = oModifier.getCheckItem().getQty().negate();
				oModifier.getCheckItem().setQty(dNewQty);
			}
			// change child item qty
			for (FuncCheckItem oChildCheckItem : oTargetItem.getChildItemList()) {
				// change child item modifier qty
				for (FuncCheckItem oChildItemModifier : oChildCheckItem.getModifierList()) {
					BigDecimal dNewQty = oChildItemModifier.getCheckItem().getQty().negate();
					oChildItemModifier.getCheckItem().setQty(dNewQty);
				}
				// change child item qty
				BigDecimal dNewQty = oChildCheckItem.getCheckItem().getQty().negate();
				oChildCheckItem.getCheckItem().setQty(dNewQty);
				iChildItemIndex++;
				
				this.updateBasketItemPrice(iSectionId, iChildItemIndex, oChildCheckItem);
				this.updateBasketItemQty(iSectionId, iChildItemIndex, oChildCheckItem.getCheckItem().getQty());
			}
			
			BigDecimal dNewQty = oTargetItem.getCheckItem().getQty().negate();
			oTargetItem.getCheckItem().setQty(dNewQty);
			// Update check information
			this.calculateCheck();
			this.updateBasketItemPrice(iSectionId, iItemIndex, oTargetItem);
			this.updateBasketItemQty(iSectionId, iItemIndex, oTargetItem.getCheckItem().getQty());
		}
	}
	
	public void startAddItemByItemCodeScreen() {
		if (!m_oFrameCover.getVisible()) {
			m_oFrameCover.setBackgroundColor("#00000000");
			m_oFrameCover.setVisible(true);
			m_oFrameCover.bringToTop();
		}
		if (!m_oFrameEnterItemPLU.getVisible())
			m_oFrameEnterItemPLU.setVisible(true);
		m_oFrameEnterItemPLU.bringToTop();
		if (AppGlobal.g_oFuncStation.get().getSupportNumericPluOnly()) {
			// PLU MUST be number
		} else {
			// Default setting: PLU can be alphanumeric
			m_oFrameEnterItemPLU.showKeyboard();
		}
		
		m_oFrameEnterItemPLU.resetScreen();
	}
	
	public String addItemByItemCode(String sItemCode, BigDecimal dQuantity, FuncBenefit oFuncBenefit,
	                                ArrayList<PosCheckExtraInfo> oPosCheckExtraInfoList, BigDecimal dOpenPrice) {
		String sErrMsg = "";
		do {
			
			ArrayList<FuncMenuItem> oFuncMenuItemList = new ArrayList<>();
			oFuncMenuItemList = AppGlobal.g_oFuncMenu.get().getFuncMenuItemByItemCodeCaseInsensitive(sItemCode);
			
			if (oFuncMenuItemList.isEmpty()) {
				sErrMsg = AppGlobal.g_oLang.get()._("item_cannot_be_found");
				break;
			}
			
			FuncMenuItem oFuncMenuItem;
			if (oFuncMenuItemList.size() > 1) {
				ArrayList<String> oOptionList = new ArrayList<String>();
				for (FuncMenuItem oFuncMenuItem2 : oFuncMenuItemList)
					oOptionList.add(oFuncMenuItem2.getMenuItem().getCode() + ": "
							+ oFuncMenuItem2.getMenuItem().getName(AppGlobal.g_oCurrentLangIndex.get()));
				
				FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
				oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select_the_item"),
						oOptionList, false);
				oFormSelectionBox.show();
				if (oFormSelectionBox.isUserCancel()) // User cancel
					break;
				else {
					ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
					
					// Add the menu item to cache
					oFuncMenuItem = oFuncMenuItemList.get(oSelectionBoxResult.get(0));
				}
			} else
				oFuncMenuItem = oFuncMenuItemList.get(0);
			
			if (!oFuncMenuItem.getMenuItem().isBasic()) {
				if (oFuncMenuItem.getMenuItem().isModifier())
					sErrMsg = AppGlobal.g_oLang.get()._("cannot_add_modifier");
				else if (oFuncMenuItem.getMenuItem().isChild())
					sErrMsg = AppGlobal.g_oLang.get()._("cannot_add_child_item");
				
				if (!sErrMsg.equals("")) {
					break;
				}
			}
			
			// handle loyalty benefit item
			BigDecimal oFixOpenPrice = null;
			if (oFuncBenefit != null) {
				// Calculate the fix open price
				switch (oFuncBenefit.getValueType()) {
					case 1:
						// Add the item with quantity = -1
						oFixOpenPrice = oFuncBenefit.getValue();
						break;
					case 2:
						// Add the item with percentage discount
						oFixOpenPrice = oFuncMenuItem.getBasicItemPrice(AppGlobal.g_oFuncOutlet.get().getPriceLevel())
								.multiply(BigDecimal.ONE.subtract(oFuncBenefit.getValue().divide(new BigDecimal(100))));
						break;
					case 3:
						// Add the item with fix discount
						oFixOpenPrice = oFuncMenuItem.getBasicItemPrice(AppGlobal.g_oFuncOutlet.get().getPriceLevel())
								.subtract(oFuncBenefit.getValue());
						break;
					default:
						break;
				}
			}
			
			if (dOpenPrice != null && oFixOpenPrice == null)
				oFixOpenPrice = dOpenPrice;
			
			if (addItem(null, oFuncMenuItem.getMenuItem().getItemId(), dQuantity, new BigDecimal("1.0"), false, false,
					false, AppGlobal.g_oFuncOutlet.get().getPriceLevel(), oFixOpenPrice) == true) {
				// Check if course is set.
				// If yes, auto-assign course to new order NORMAL item
				autoAssignCourseToNewOrderItem();
				
				// Add hot item success
				finishAddItem(false);
				
				// Add log to action log list
				int iSectionId = m_oFrameOrderingBasket.getSelectedSectionId();
				int iItemIndex = m_oFuncCheck.getItemListCount(iSectionId) - 1;
				FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iSectionId, iItemIndex);
				oFuncCheckItem.addActionLog(AppGlobal.FUNC_LIST.add_item_by_code.name(),
						PosActionLog.ACTION_RESULT_SUCCESS, m_oFuncCheck.getTableNoWithExtensionForDisplay(),
						AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
						AppGlobal.g_oFuncOutlet.get().getOutletId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
						AppGlobal.g_oFuncStation.get().getStationId(), m_oFuncCheck.getCheckId(), "", "", "", "", "");
				
				// Add the ExtraInfo to the item when it is the loyalty benefit
				// item
				if (oFuncBenefit != null) {
					oFuncCheckItem.addExtraInfo(PosCheckExtraInfo.BY_ITEM, PosCheckExtraInfo.SECTION_LOYALTY,
							PosCheckExtraInfo.VARIABLE_USER_ID,
							Integer.toString(AppGlobal.g_oFuncUser.get().getUserId()));
					oFuncCheckItem.addExtraInfo(PosCheckExtraInfo.BY_ITEM, PosCheckExtraInfo.SECTION_LOYALTY,
							PosCheckExtraInfo.VARIABLE_BENEFIT_TYPE, "I");
					oFuncCheckItem.addExtraInfo(PosCheckExtraInfo.BY_ITEM, PosCheckExtraInfo.SECTION_LOYALTY,
							PosCheckExtraInfo.VARIABLE_BENEFIT_CODE, oFuncBenefit.getCode());
					oFuncCheckItem.addExtraInfo(PosCheckExtraInfo.BY_ITEM, PosCheckExtraInfo.SECTION_LOYALTY,
							PosCheckExtraInfo.VARIABLE_BENEFIT_AMOUNT, Integer.toString(oFuncBenefit.getBonusDebit()));
				}
				
				// Add the ExtraInfo to the item
				if (oPosCheckExtraInfoList != null) {
					for (PosCheckExtraInfo oPosCheckExtraInfo : oPosCheckExtraInfoList)
						oFuncCheckItem.addExtraInfo(oPosCheckExtraInfo.getBy(), oPosCheckExtraInfo.getSection(),
								oPosCheckExtraInfo.getVariable(), oPosCheckExtraInfo.getValue());
				}
				int iSelectedItemSeatNo = m_oFrameOrderingBasket.getSelectedSectionId();
				int iSelectedItemIndex = m_oFuncCheck.getItemListCount(iSelectedItemSeatNo) - 1;
				this.updateBasketItemInfo(iSelectedItemSeatNo, iSelectedItemIndex);
			}
			
			break;
		} while (true);
		
		return sErrMsg;
	}
	
	public String addItemByItemCodeWithPriceLevel(String sDefaultItemCode, int iPriceLevel) {
		String sItemCode = null;
		String sErrMsg = "";
		BigDecimal dQuantity = BigDecimal.ONE;
		do {
			sItemCode = sDefaultItemCode;
			
			ArrayList<FuncMenuItem> oFuncMenuItemList = new ArrayList<>();
			oFuncMenuItemList = AppGlobal.g_oFuncMenu.get().getFuncMenuItemByItemCodeCaseInsensitive(sItemCode);
			
			if (oFuncMenuItemList.isEmpty()) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("item_cannot_be_found"));
				break;
			}
			
			FuncMenuItem oFuncMenuItem;
			if (oFuncMenuItemList.size() > 1) {
				ArrayList<String> oOptionList = new ArrayList<String>();
				for (FuncMenuItem oFuncMenuItem2 : oFuncMenuItemList)
					oOptionList.add(oFuncMenuItem2.getMenuItem().getCode() + ": "
							+ oFuncMenuItem2.getMenuItem().getName(AppGlobal.g_oCurrentLangIndex.get()));
				
				FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
				oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select_the_item"),
						oOptionList, false);
				oFormSelectionBox.show();
				if (oFormSelectionBox.isUserCancel()) // User cancel
					break;
				else {
					ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
					
					// Add the menu item to cache
					oFuncMenuItem = oFuncMenuItemList.get(oSelectionBoxResult.get(0));
				}
			} else
				oFuncMenuItem = oFuncMenuItemList.get(0);
			
			// For more than one item found, in item list selection, if user
			// click cancel, no further action will do
			if (oFuncMenuItem.getMenuItem().getItemId() == 0)
				break;
			
			if (!oFuncMenuItem.getMenuItem().isBasic()) {
				sErrMsg = null;
				
				if (oFuncMenuItem.getMenuItem().isModifier())
					sErrMsg = AppGlobal.g_oLang.get()._("cannot_add_modifier");
				else if (oFuncMenuItem.getMenuItem().isChild())
					sErrMsg = AppGlobal.g_oLang.get()._("cannot_add_child_item");
				
				if (sErrMsg != null) {
					showErrorDialogBox(sErrMsg);
					break;
				}
			}
			
			if (addItem(null, oFuncMenuItem.getMenuItem().getItemId(), dQuantity, new BigDecimal("1.0"), false, false,
					false, iPriceLevel, null) == true) {
				// Check if course is set.
				// If yes, auto-assign course to new order NORMAL item
				autoAssignCourseToNewOrderItem();
				
				// Add hot item success
				finishAddItem(false);
				
				// Add log to action log list
				int iSectionId = m_oFrameOrderingBasket.getSelectedSectionId();
				int iItemIndex = m_oFuncCheck.getItemListCount(iSectionId) - 1;
				FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iSectionId, iItemIndex);
				oFuncCheckItem.addActionLog(AppGlobal.FUNC_LIST.add_item_by_code.name(),
						PosActionLog.ACTION_RESULT_SUCCESS, m_oFuncCheck.getTableNoWithExtensionForDisplay(),
						AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
						AppGlobal.g_oFuncOutlet.get().getOutletId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
						AppGlobal.g_oFuncStation.get().getStationId(), m_oFuncCheck.getCheckId(), "", "", "", "", "");
				
				if (m_oFrameSetMenu != null) {
					m_sCurrentFunctionKey = AppGlobal.FUNC_LIST.add_item_by_code.name();
					break;
				}
			}
			
			if (!sDefaultItemCode.isEmpty())
				break;
		} while (true);
		
		return sErrMsg;
	}
	
	// Add Hot modifier
	private boolean addHotModifier(int iModifierId, int iSectionId, int iItemIndex) {
		boolean bSetMenu = false;
		AtomicInteger iModifierIndex = new AtomicInteger(0);
		
		int iSelectedSeatNo = -1;
		int iCurrentItemIndex = -1;
		if (iSectionId != -1)
			iSelectedSeatNo = iSectionId;
		else
			iSelectedSeatNo = m_oFrameOrderingBasket.getSelectedSectionId();
		
		if (iItemIndex != -1)
			iCurrentItemIndex = iItemIndex;
		else
			iCurrentItemIndex = m_oFuncCheck.getItemListCount(iSelectedSeatNo) - 1;
		
		List<FuncCheckItem> oSelectedSectionList = m_oFuncCheck.getItemList(iSelectedSeatNo);
		
		if (oSelectedSectionList.isEmpty()) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("no_item_ordered"));
			return false;
		}
		
		FuncCheckItem oLastCheckItem = m_oFuncCheck.getCheckItem(iSelectedSeatNo, iCurrentItemIndex);
		
		// No new item on the list
		if (oLastCheckItem.isOldItem()) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("no_new_item_ordered"));
			return false;
		}
		
		if (oLastCheckItem.isSetMenu()) {
			if(oLastCheckItem.getChildItemList().size() > 0) {
				oLastCheckItem = oLastCheckItem.getChildItemList().get(oLastCheckItem.getChildItemList().size() - 1);
				bSetMenu = true;
			}
		}
		
		switch (duplicateModifier(oLastCheckItem, iModifierId, iModifierIndex)) {
			case 0: // DUPLICATE/ADD
				if (bSetMenu)
					// Not handle set menu
					return false;
				
				if (oLastCheckItem.isOpenModifier()) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("this_item_already_have_open_price_modifier") + ", "
							+ AppGlobal.g_oLang.get()._("cannot_apply_modifier_again"));
					return false;
				}
				
				if (!addModifier(oLastCheckItem, iModifierId, -1, new BigDecimal("1.0"), null)) {
					String sErrMsg = m_oFuncCheck.getLastErrorMessage();
					if (!sErrMsg.isEmpty())
						showErrorDialogBox(sErrMsg);
				}
				break;
			case 1: // DELETE
				deleteModifier(new BigDecimal("1.0"), iSelectedSeatNo, iCurrentItemIndex, iModifierIndex.get());
				break;
			case 2: // CANCEL
				return false;
		}
		
		// Add hot modifier success
		finishAddModifier(iSelectedSeatNo, iCurrentItemIndex);
		
		return true;
	}
	
	// Add modifier
	private boolean addModifier(FuncCheckItem oParentFuncCheckItem, int iId, int iModifierListIdx, BigDecimal dQty,
	                            String sNewName) {
		
		if(m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name())) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_add_modifier_in_split_revenue_function"));
			return false;
		}
		boolean bBreak = false;
		FuncCheckItem oModiFuncCheckItem = new FuncCheckItem();
		
		// Create the modifier func check item from menu item
		if (oModiFuncCheckItem.retieveItemFromMenu(iId, dQty, new BigDecimal("1.0"), oParentFuncCheckItem, true, false,
				AppGlobal.g_oFuncOutlet.get().getPriceLevel()) == false) {
			// Retrieve item from menu error
			// Prompt error
			showErrorDialogBox(oModiFuncCheckItem.getLastErrorMessage());
			return false;
		}
		
		if(this.isMinimumChargeItem(oParentFuncCheckItem))
			return false;
		
		// Set Parent Tab Index
		oModiFuncCheckItem.setPanelLookupContent(iModifierListIdx, -1, null);
		
		// Check if item is open-description
		if (oModiFuncCheckItem.isOpenDescription()) {
			if (sNewName != null && !sNewName.isEmpty())
				oModiFuncCheckItem.setItemDesc(false, sNewName);
			else {
				// Ask open description
				FormInputBox oFormInputBox;
				String sOpenDesc = null;
				
				if (m_bMultiSelectModifier == false || (m_oClsMultiSelectModifierState.containsKey(iId)
						&& m_oClsMultiSelectModifierState.get(iId).getDescription().equals(""))) {
					do {
						bBreak = false;
						oFormInputBox = new FormInputBox(this);
						oFormInputBox.init();
						oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DEFAULT);
						oFormInputBox.showKeyboard();
						oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("open_description"));
						oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("please_input_the_description") + ":");
						oFormInputBox.show();
						
						sOpenDesc = oFormInputBox.getInputValue();
						if (sOpenDesc == null) {
							if (m_oClsMultiSelectModifierState.containsKey(iId))
								m_oClsMultiSelectModifierState.get(iId).setButtonCancel(true);
							return false;
						} else if (sOpenDesc.length() == 0 || sOpenDesc.trim().isEmpty())
							showErrorDialogBox(AppGlobal.g_oLang.get()._("not_allow_blank_item_description"));
						else
							bBreak = true;
						
					} while (!bBreak);
					oModiFuncCheckItem.setItemDesc(false, sOpenDesc);
					oModiFuncCheckItem.setItemShortDesc(false, sOpenDesc);
					if (m_oClsMultiSelectModifierState.containsKey(iId))
						m_oClsMultiSelectModifierState.get(iId).setDescription(sOpenDesc);
				} else {
					if (m_oClsMultiSelectModifierState.containsKey(iId)
							&& !m_oClsMultiSelectModifierState.get(iId).getDescription().isEmpty())
						oModiFuncCheckItem.setItemDesc(false, m_oClsMultiSelectModifierState.get(iId).getDescription());
				}
			}
		}
		
		// Check if item is append-description
		if (oModiFuncCheckItem.isAppendOpenDescription()) {
			// Ask append description
			if (m_bMultiSelectModifier == false || (m_oClsMultiSelectModifierState.containsKey(iId)
					&& m_oClsMultiSelectModifierState.get(iId).getDescription().equals(""))) {
				FormInputBox oFormInputBox = new FormInputBox(this);
				oFormInputBox.init();
				oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DEFAULT);
				oFormInputBox.showKeyboard();
				oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("append_description"));
				oFormInputBox.setMessage(
						AppGlobal.g_oLang.get()._("please_input_the_append_description_to_modifier") + " - \""
								+ oModiFuncCheckItem.getItemShortDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get())
								+ "\"");
				oFormInputBox.show();
				
				String sAppendDesc = oFormInputBox.getInputValue();
				if (sAppendDesc == null) {
					if (m_oClsMultiSelectModifierState.containsKey(iId))
						m_oClsMultiSelectModifierState.get(iId).setButtonCancel(true);
					return false;
				} else {
					oModiFuncCheckItem.setItemDesc(true, sAppendDesc);
					oModiFuncCheckItem.setItemShortDesc(true, sAppendDesc);
					if (m_oClsMultiSelectModifierState.containsKey(iId))
						m_oClsMultiSelectModifierState.get(iId).setDescription(sAppendDesc);
				}
			} else {
				if (m_oClsMultiSelectModifierState.containsKey(iId)
						&& !m_oClsMultiSelectModifierState.get(iId).getDescription().isEmpty()) {
					oModiFuncCheckItem.setItemDesc(true, m_oClsMultiSelectModifierState.get(iId).getDescription());
					oModiFuncCheckItem.setItemShortDesc(true, m_oClsMultiSelectModifierState.get(iId).getDescription());
				}
			}
		}
		
		// open modifier price
		if (oModiFuncCheckItem.isOpenModifier()) {
			if (m_bMultiSelectModifier == true && m_oClsMultiSelectModifierState.get(iId).isShowPriceBox() == false
					&& m_oClsMultiSelectModifierState.get(iId).getPrice() == BigDecimal.ZERO) {
				FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
						AppGlobal.g_oLang.get()._("no"), this);
				oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("open_price"));
				oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("modifier") + ": "
						+ oModiFuncCheckItem.getMenuItem().getName(AppGlobal.g_oCurrentLangIndex.get())
						+ System.lineSeparator() + AppGlobal.g_oLang.get()._("apply_same_price_for_all") + "?");
				oFormConfirmBox.show();
				if (oFormConfirmBox.isOKClicked())
					m_oClsMultiSelectModifierState.get(iId).setPriceForAll(true);
				m_oClsMultiSelectModifierState.get(iId).setShowPriceBox(true);
			}
			
			BigDecimal dOpenPriceRate = BigDecimal.ZERO;
			BigDecimal dMaxPriceRate = null, dMinPriceRate = null;
			FormInputBox oFormInputBox;
			
			if (oModiFuncCheckItem.getMenuItem().isMultipleRateModifierOperator()) {
				dMaxPriceRate = oModiFuncCheckItem.getMenuItem().getModifierMaxRate();
				dMinPriceRate = oModiFuncCheckItem.getMenuItem().getModifierMinRate();
				dOpenPriceRate = oModiFuncCheckItem.getMenuItem()
						.getModifierRateByPriceLevel(oModiFuncCheckItem.getCheckItem().getPriceLevel());
			} else {
				dMaxPriceRate = oModiFuncCheckItem.getMenuItem().getModifierMaxPrice();
				dMinPriceRate = oModiFuncCheckItem.getMenuItem().getModifierMinPrice();
				dOpenPriceRate = oModiFuncCheckItem.getMenuItem()
						.getModifierPriceByPriceLevel(oModiFuncCheckItem.getCheckItem().getPriceLevel());
			}
			
			if (m_bMultiSelectModifier == false || (m_oClsMultiSelectModifierState.containsKey(iId)
					&& m_oClsMultiSelectModifierState.get(iId).getPrice() == BigDecimal.ZERO)) {
				while (true) {
					bBreak = true;
					StringBuilder sMessage = new StringBuilder();
					oFormInputBox = new FormInputBox(this);
					oFormInputBox.init();
					oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DECIMAL);
					oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("open_price"));
					sMessage.append(AppGlobal.g_oLang.get()._("modifier") + ": "
							+ oModiFuncCheckItem.getMenuItem().getName(AppGlobal.g_oCurrentLangIndex.get()) + System.lineSeparator());
					if (oModiFuncCheckItem.getMenuItem().isAddUnitModifierPriceToUnitPriceModifierOperator())
						sMessage.append(AppGlobal.g_oLang.get()._("please_input_the_price") + " ("
								+ AppGlobal.g_oLang.get()._("modifier_price_x_quantity_of_item") + ")");
					else if (oModiFuncCheckItem.getMenuItem().isAddUnitModifierPriceToTotalModifierOperator())
						sMessage.append(AppGlobal.g_oLang.get()._("please_input_the_price") + " ("
								+ AppGlobal.g_oLang.get()._("add_modifier_price_on_whole_item") + ")");
					else
						sMessage.append(AppGlobal.g_oLang.get()._("please_input_the_rate_in_%") + " ("
								+ AppGlobal.g_oLang.get()._("rate_x_unit_price_of_item") + ")");
					oFormInputBox.setMessage(sMessage.toString());
					if (dOpenPriceRate != null)
						oFormInputBox.setDefaultInputValue(
								AppGlobal.g_oFuncOutlet.get().roundItemAmountToString(dOpenPriceRate));
					oFormInputBox.show();
					
					if (oFormInputBox.getInputValue() == null) {
						if (m_oClsMultiSelectModifierState.containsKey(iId))
							m_oClsMultiSelectModifierState.get(iId).setButtonCancel(true);
						return false;
					}
					
					try {
						Double.valueOf(oFormInputBox.getInputValue());
					} catch (NumberFormatException e) {
						showErrorDialogBox(AppGlobal.g_oLang.get()._("invalid_input"));
						continue;
					}
					
					if (oModiFuncCheckItem.getMenuItem().isMultipleRateModifierOperator())
						dOpenPriceRate = new BigDecimal(oFormInputBox.getInputValue()).divide(new BigDecimal("100.0"));
					else
						dOpenPriceRate = new BigDecimal(oFormInputBox.getInputValue());
					
					if (dMinPriceRate == null && dMaxPriceRate == null)
						break;
					
					if (dMinPriceRate != null && dOpenPriceRate.compareTo(dMinPriceRate) >= 0)
						bBreak = true;
					else if (dMinPriceRate != null) {
						bBreak = false;
						String sErrMsg;
						if (oModiFuncCheckItem.getMenuItem().isMultipleRateModifierOperator())
							sErrMsg = AppGlobal.g_oLang.get()._("value_need_to_be_larger_than") + " "
									+ (dMinPriceRate.multiply(new BigDecimal("100"))).toPlainString() + "%";
						else
							sErrMsg = AppGlobal.g_oLang.get()._("value_need_to_be_larger_than") + " "
									+ dMinPriceRate.toPlainString();
						showErrorDialogBox(sErrMsg);
					}
					
					if (bBreak == false)
						continue;
					
					if (dMaxPriceRate != null && dOpenPriceRate.compareTo(dMaxPriceRate) <= 0)
						bBreak = true;
					else if (dMaxPriceRate != null) {
						bBreak = false;
						String sErrMsg = "";
						if (oModiFuncCheckItem.getMenuItem().isMultipleRateModifierOperator())
							sErrMsg = AppGlobal.g_oLang.get()._("value_need_to_be_less_than") + " "
									+ (dMaxPriceRate.multiply(new BigDecimal("100.0"))).toPlainString() + "%";
						else
							sErrMsg = AppGlobal.g_oLang.get()._("value_need_to_be_less_than") + " "
									+ dMaxPriceRate.toPlainString();
						showErrorDialogBox(sErrMsg);
					}
					
					if (bBreak == true)
						break;
				}
				oModiFuncCheckItem.setOpenModiPriceRate(dOpenPriceRate);
				if (m_oClsMultiSelectModifierState.containsKey(iId)
						&& m_oClsMultiSelectModifierState.get(iId).isPriceForAll() == true)
					m_oClsMultiSelectModifierState.get(iId).setPrice(dOpenPriceRate);
				
			} else {
				if (m_oClsMultiSelectModifierState.containsKey(iId)
						&& m_oClsMultiSelectModifierState.get(iId).getPrice() != BigDecimal.ZERO)
					oModiFuncCheckItem.setOpenModiPriceRate(m_oClsMultiSelectModifierState.get(iId).getPrice());
			}
		}
		
		// Change Modifer Price Level with 2700 membership interface
		toggleItemPriceLevelForMembership(oModiFuncCheckItem);
		
		// TODO
		// check order level
		
		oModiFuncCheckItem.getCheckItem().setOrderUserId(AppGlobal.g_oFuncUser.get().getUserId());
		
		// add modifier to parent's item
		oParentFuncCheckItem.addModifierToList(oModiFuncCheckItem, true);
		
		// surveillance event: ItemOption
		List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);
		if (!oInterfaceConfigList.isEmpty()) {
			for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
				if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
					FuncSurveillance oFuncSurveillance = new FuncSurveillance(oPosInterfaceConfig);
					HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
					String sCheckNum = (m_oFuncCheck.isOldCheck()) ? m_oFuncCheck.getCheckPrefixNo() : AppGlobal.g_oFuncStation.get().getNextCheckPrefixNumber(false);
					int iLangIndex = 1;
					if(oPosInterfaceConfig.getInterfaceConfig().has("general_setup") && oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").has("language_index"))
						iLangIndex = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").optJSONObject("language_index").optInt("value");
					oSurveillanceEventInfo.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_ITEM_OPTION);
					oSurveillanceEventInfo.put("checkNum", sCheckNum);
					oSurveillanceEventInfo.put("optionName", oModiFuncCheckItem.getCheckItem().getName(iLangIndex));
					oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo, null);
				}
			}
		}
		
		// Add log to action log list
		String sLogRemark = "Add modifierId:" + iId + ","
				+ oModiFuncCheckItem.getItemDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get());
		oParentFuncCheckItem.addActionLog(AppGlobal.FUNC_LIST.item_modifier.name(), PosActionLog.ACTION_RESULT_SUCCESS,
				m_oFuncCheck.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(),
				AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
				AppGlobal.g_oFuncStation.get().getStationId(), m_oFuncCheck.getCheckId(), "", "", "", "", sLogRemark);
		
		return true;
	}
	
	// Call modifier lookup
	private boolean callModifierLookup(FuncCheckItem oParentFuncCheckItem, List<MenuMenu> oModifierMenuList,
	                                   int iSectionId, int iItemIndex, boolean bHotModifierLookup) {
		FormCommonLookup oFormCommonLookup = new FormCommonLookup(this);
		// Set lookup title
		oFormCommonLookup.setLabelTitleBar(AppGlobal.g_oLang.get()._("apply_modifier"));
		oFormCommonLookup.setLabelDescBar(AppGlobal.g_oLang.get()._("please_select_the_modifiers_for") + " "
				+ oParentFuncCheckItem.getItemShortDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get()));
		// Set lookup image
		oFormCommonLookup
				.setLookupImage(oParentFuncCheckItem.getMenuItem().getMediaUrl(MenuMediaObject.USED_FOR_THUMBNAIL));
		// Hide close button
		// oFormCommonLookup.hideCloseButton(true);
		// Prepare different pages of modifier lookups
		List<HashMap<String, Object>> oModiLookupArray = new ArrayList<HashMap<String, Object>>();
		for (MenuMenu oModifierMenu : oModifierMenuList) {
			String sLookupName;
			if (oModifierMenu.getShortName(AppGlobal.g_oCurrentLangIndex.get()).isEmpty())
				sLookupName = oModifierMenu.getName(AppGlobal.g_oCurrentLangIndex.get());
			else
				sLookupName = oModifierMenu.getShortName(AppGlobal.g_oCurrentLangIndex.get());
			List<FuncLookupButtonInfo> oContentLookupList = new ArrayList<FuncLookupButtonInfo>();
			HashMap<String, Object> oLookupData = new HashMap<String, Object>();
			
			// form the lookup data list
			FuncMenu oFuncMenu = new FuncMenu();
			oFuncMenu.constructContentLookupList(oModifierMenu, MenuMenuLookup.TYPE_SUB_MENU, oContentLookupList, true);
			oFuncMenu.constructContentLookupList(oModifierMenu, MenuMenuLookup.TYPE_ITEM, oContentLookupList, true);
			
			oLookupData.put(FormCommonLookup.COMMON_LOOKUP_ID, oModifierMenu.getMenuId());
			oLookupData.put(FormCommonLookup.COMMON_LOOKUP_NAME, sLookupName);
			oLookupData.put(FormCommonLookup.COMMON_LOOKUP_DATA_LIST, oContentLookupList);
			oLookupData.put(FormCommonLookup.COMMON_LOOKUP_MAX, oModifierMenu.getModifierMaxOrder());
			oLookupData.put(FormCommonLookup.COMMON_LOOKUP_MIN, oModifierMenu.getModifierMinOrder());
			
			oModiLookupArray.add(oLookupData);
		}
		
		// Create a page of modifier lookups
		oFormCommonLookup.createTabsAndLookupButtons(oModiLookupArray);
		
		// New item in Basket, add selected modifiers into Form
		if (oParentFuncCheckItem.getModifierList().size() > 0) {
			// Already has Existing Modifiers
			List<JSONObject> oModifierData = new ArrayList<JSONObject>();
			for (FuncCheckItem oModifier : oParentFuncCheckItem.getModifierList()) {
				try {
					JSONObject oSingleModifierJSONObject = new JSONObject();
					oSingleModifierJSONObject.put(FormCommonLookup.SELECTED_ITEM_ID, oModifier.getMenuItemId());
					oSingleModifierJSONObject.put(FormCommonLookup.SELECTED_ITEM_NAME,
							oModifier.getItemShortDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get()));
					oSingleModifierJSONObject.put(FormCommonLookup.SELECTED_ITEM_TAB_INDEX,
							oModifier.getPanelLookupContent().parentTabIndex);
					
					oModifierData.add(oSingleModifierJSONObject);
				} catch (JSONException e) {
					e.printStackTrace();
				}
			}
			oFormCommonLookup.addExistingItems(oModifierData);
		}
		
		oFormCommonLookup.show();
		
		if (oParentFuncCheckItem.isForceModifier() && !oFormCommonLookup.haveMinOrder())
			return false;
		// Return to OrderingPanel
		
		StringBuilder sModifierList = new StringBuilder();
		// If there are existing modifiers and is clicked to be removed, remove
		// it from Parent Item
		for (Integer iDeletedId : oFormCommonLookup.getDeletedItems()) {
			// String sDeletedId = (String) oDeletedId;
			for (FuncCheckItem oModifier : oParentFuncCheckItem.getModifierList()) {
				if (oModifier.getMenuItemId() == iDeletedId) {
					oParentFuncCheckItem.getModifierList().remove(oModifier);
					// Add log to action log list
					oParentFuncCheckItem.addActionLog(AppGlobal.FUNC_LIST.item_modifier.name(),
							PosActionLog.ACTION_RESULT_SUCCESS, m_oFuncCheck.getTableNoWithExtensionForDisplay(),
							AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
							AppGlobal.g_oFuncOutlet.get().getOutletId(),
							AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
							AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
							AppGlobal.g_oFuncStation.get().getStationId(), m_oFuncCheck.getCheckId(), "", "", "", "",
							"Delete Modifier:" + iDeletedId);
					break;
				}
			}
		}
		// Prepare info string for Basket
		for (FuncCheckItem oModifier : oParentFuncCheckItem.getModifierList()) {
			if (sModifierList.length() > 0) {
				sModifierList.append(", ");
			}
			sModifierList.append(oModifier.getItemShortDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get()));
		}
		
		// Locate the item
		if (iSectionId == -1 && iItemIndex == -1 && bHotModifierLookup) {
			iSectionId = m_oFrameOrderingBasket.getSelectedSectionId();
			iItemIndex = m_oFuncCheck.getItemListCount(iSectionId) - 1;
		}
		
		// Handle selected items
		if (oFormCommonLookup.getSelectedItems().size() > 0) {
			List<JSONObject> oSelectedModifierList = oFormCommonLookup.getSelectedItems();
			for (JSONObject oModifier : oSelectedModifierList) {
				// Add modifier
				Integer iModifierId = oModifier.optInt(FormCommonLookup.SELECTED_ITEM_ID);
				Integer iModifierListIndex = oModifier.optInt(FormCommonLookup.SELECTED_ITEM_TAB_INDEX);
				String sModifierName = oModifier.optString(FormCommonLookup.SELECTED_ITEM_NAME);
				if (!addModifier(oParentFuncCheckItem, iModifierId, iModifierListIndex, new BigDecimal("1.0"), sModifierName))
					continue;
				
				if (bHotModifierLookup) {
					int iLastModifierIndex = m_oFuncCheck.getModifierListCount(iSectionId, iItemIndex) - 1;
					FuncCheckItem oModifierFuncCheckItem = oParentFuncCheckItem.getModifierList()
							.get(oParentFuncCheckItem.getModifierList().size() - 1);
					
					if (iLastModifierIndex < 0)
						iLastModifierIndex = 0;
					if (sModifierList.length() > 0) {
						sModifierList.append(", ");
					}
					sModifierList.append(
							oModifierFuncCheckItem.getItemShortDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get()));
				}
			}
			
			calculateCheck();
		}
		if (iSectionId != -1 && iItemIndex != -1)
			finishAddModifier(iSectionId, iItemIndex);
		return true;
	}
	
	// Call modifier lookup for multiple items in current check party
	private boolean callModifierLookupForMultipleItems(List<HashMap<String, Integer>> oSelectedItems,
	                                                   List<MenuMenu> oModifierMenuList) {
		FormCommonLookup oFormCommonLookup = new FormCommonLookup(this);
		// Set lookup title
		oFormCommonLookup.setLabelTitleBar(AppGlobal.g_oLang.get()._("apply_modifier"));
		oFormCommonLookup.setLabelDescBar(AppGlobal.g_oLang.get()._("please_select_the_modifiers_for_selected_items"));
		
		// Prepare different pages of modifier lookups
		List<HashMap<String, Object>> oModiLookupArray = new ArrayList<HashMap<String, Object>>();
		for (MenuMenu oModifierMenu : oModifierMenuList) {
			String sLookupName;
			if (oModifierMenu.getShortName(AppGlobal.g_oCurrentLangIndex.get()).isEmpty())
				sLookupName = oModifierMenu.getName(AppGlobal.g_oCurrentLangIndex.get());
			else
				sLookupName = oModifierMenu.getShortName(AppGlobal.g_oCurrentLangIndex.get());
			List<FuncLookupButtonInfo> oContentLookupList = new ArrayList<FuncLookupButtonInfo>();
			HashMap<String, Object> oLookupData = new HashMap<String, Object>();
			
			// form the lookup data list
			FuncMenu oFuncMenu = new FuncMenu();
			oFuncMenu.constructContentLookupList(oModifierMenu, MenuMenuLookup.TYPE_SUB_MENU, oContentLookupList, true);
			oFuncMenu.constructContentLookupList(oModifierMenu, MenuMenuLookup.TYPE_ITEM, oContentLookupList, true);
			
			oLookupData.put(FormCommonLookup.COMMON_LOOKUP_ID, oModifierMenu.getMenuId());
			oLookupData.put(FormCommonLookup.COMMON_LOOKUP_NAME, sLookupName);
			oLookupData.put(FormCommonLookup.COMMON_LOOKUP_DATA_LIST, oContentLookupList);
			oLookupData.put(FormCommonLookup.COMMON_LOOKUP_MAX, oModifierMenu.getModifierMaxOrder());
			oLookupData.put(FormCommonLookup.COMMON_LOOKUP_MIN, oModifierMenu.getModifierMinOrder());
			
			oModiLookupArray.add(oLookupData);
		}
		
		// Create a page of modifier lookup
		oFormCommonLookup.createTabsAndLookupButtons(oModiLookupArray);
		oFormCommonLookup.show();
		
		if (!oFormCommonLookup.haveMinOrder())
			return false;
		
		if (oSelectedItems.size() > 0 && oFormCommonLookup.getSelectedItems().size() > 0) {
			List<JSONObject> oSelectedModifierList = oFormCommonLookup.getSelectedItems();
			FuncCheckItem oParentFuncCheckItem = null;
			
			ClsMultiSelectModifierState oClsMultiSelectModifierState = null;
			m_bMultiSelectModifier = true;
			
			for (HashMap<String, Integer> oSelectedParentItem : oSelectedItems) {
				oParentFuncCheckItem = m_oFuncCheck.getCheckItem(oSelectedParentItem.get("sectionId"),
						oSelectedParentItem.get("itemIndex"));
				StringBuilder sModifierString = new StringBuilder();
				
				// Prepare info string for Basket
				for (FuncCheckItem oModifier : oParentFuncCheckItem.getModifierList()) {
					if (sModifierString.length() > 0)
						sModifierString.append(", ");
					sModifierString.append(oModifier.getItemDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get()));
				}
				
				// Handle selected modifier
				for (JSONObject oSelectedModifier : oSelectedModifierList) {
					Integer iModifierId = oSelectedModifier.optInt(FormCommonLookup.SELECTED_ITEM_ID);
					Integer iModifierListIndex = oSelectedModifier.optInt(FormCommonLookup.SELECTED_ITEM_TAB_INDEX);
					String sModifierName = oSelectedModifier.optString(FormCommonLookup.SELECTED_ITEM_NAME);
					
					if (!m_oClsMultiSelectModifierState.containsKey(iModifierId)) {
						oClsMultiSelectModifierState = new ClsMultiSelectModifierState();
						m_oClsMultiSelectModifierState.put(iModifierId, oClsMultiSelectModifierState);
						// if one selected item, do not ask price for all
						if (oSelectedItems.size() == 1)
							m_oClsMultiSelectModifierState.get(iModifierId).setShowPriceBox(true); // set
						// already
						// show
						// before
					}
					addModifier(oParentFuncCheckItem, iModifierId, iModifierListIndex, new BigDecimal("1.0"),
							sModifierName);
				}
				
				calculateCheck();
				finishAddModifier(oSelectedParentItem.get("sectionId"), oSelectedParentItem.get("itemIndex"));
			}
			
			m_bMultiSelectModifier = false;
			m_oClsMultiSelectModifierState.clear();
		}
		
		return true;
	}
	
	// Call item void reason lookup
	private PosVoidReason callVoidReasonLookup(String sTitleName, String sDesc, String sVoidType) {
		if (m_oVoidReasonList == null) {
			m_oVoidReasonList = new PosVoidReasonList();
			m_oVoidReasonList.readAll();
		}
		List<HashMap<String, Object>> oLookupArray = new ArrayList<HashMap<String, Object>>();
		HashMap<String, Object> oLookupData = new HashMap<String, Object>();
		List<FuncLookupButtonInfo> oContentLookupList = new ArrayList<FuncLookupButtonInfo>();
		PosVoidReason oSelectedVoidReason = null;
		int iVoidCodeId = 0;
		
		// check merge check void reason first
		ArrayList<PosVoidReason> oVoidReasonTypeList = new ArrayList<PosVoidReason>();
		
		if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.merge_table.name()))
			oVoidReasonTypeList = m_oVoidReasonList.getVoidReasonListByType(PosVoidReason.TYPE_MERGE_TABLE);
		else if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.transfer_check_to_target_outlet.name()))
			oVoidReasonTypeList = m_oVoidReasonList
					.getVoidReasonListByType(PosVoidReason.TYPE_TRANSFER_CHECK_TO_TARGET_OUTLET);
		if (oVoidReasonTypeList.isEmpty())
			// form the lookup data list
			oVoidReasonTypeList = m_oVoidReasonList.getVoidReasonListByType(sVoidType);
		if (oVoidReasonTypeList.size() == 1) {
			// Only 1 reason, return directly
			PosVoidReason oPosVoidReason = oVoidReasonTypeList.get(0);
			return oPosVoidReason;
		}
		
		for (PosVoidReason oVoidReason : oVoidReasonTypeList) {
			FuncLookupButtonInfo oLookupButtonInfo = new FuncLookupButtonInfo();
			
			String[] sNameArray = new String[AppGlobal.LANGUAGE_COUNT];
			for (int i = 0; i < AppGlobal.LANGUAGE_COUNT; i++) {
				int iBilingualLangIndex = AppGlobal.g_oFuncOutlet.get().getBilingualLangIndexByeLangIndex(i + 1);
				sNameArray[i] = oVoidReason.getBilingualName(i + 1, iBilingualLangIndex);
			}
			oLookupButtonInfo.setName(sNameArray);
			oLookupButtonInfo.setType(PosDisplayPanelLookup.TYPE_HOT_ITEM);
			oLookupButtonInfo.setId(oVoidReason.getVdrsId());
			oLookupButtonInfo.setSeq(oVoidReason.getSeq());
			oContentLookupList.add(oLookupButtonInfo);
		}
		
		oLookupData.put(FormCommonLookup.COMMON_LOOKUP_NAME, AppGlobal.g_oLang.get()._("reasons"));
		oLookupData.put(FormCommonLookup.COMMON_LOOKUP_DATA_LIST, oContentLookupList);
		oLookupArray.add(oLookupData);
		
		FormCommonLookup oFormCommonLookup = new FormCommonLookup(this);
		oFormCommonLookup.setLabelTitleBar(sTitleName);
		oFormCommonLookup.setLabelDescBar(sDesc);
		oFormCommonLookup.setSingleSelection(true);
		oFormCommonLookup.createTabsAndLookupButtons(oLookupArray);
		// if void check function is processed by
		// transfer_check_to_target_outlet
		// not allow exit the lookup
		if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.transfer_check_to_target_outlet.name()))
			oFormCommonLookup.hideCloseButton(true);
		oFormCommonLookup.show();
		
		if (oFormCommonLookup.getSelectedItems().size() > 0) {
			List<JSONObject> oSelectedVoidReasonList = oFormCommonLookup.getSelectedItems();
			for (JSONObject oVoidCode : oSelectedVoidReasonList) {
				iVoidCodeId = oVoidCode.optInt(FormCommonLookup.SELECTED_ITEM_ID);
			}
		}
		
		for (PosVoidReason oVoidReason : oVoidReasonTypeList) {
			if (oVoidReason.getVdrsId() == iVoidCodeId) {
				oSelectedVoidReason = oVoidReason;
				break;
			}
		}
		return oSelectedVoidReason;
	}
	
	// Calculate check
	private void calculateCheck() {
		if(m_oFuncCheck == null)
			return;
		// Recalculate the check
		m_oFuncCheck.calcCheck();
		this.updateBasketExtendBarCheckTotal();
	}
	
	private void finishAddItem(boolean bPreorder) {
		int iSphrId = 0;
		boolean bNeedClearItemList = false;
		
		// If under direct payment mode, cannot add item
		if (m_iCashierMode == 2 || m_bIsCheckLoadedForCashierMode)
			return;
		
		OutSpecialHour oSpecialHour = AppGlobal.g_oFuncOutlet.get().getCurrentSpecialPeriod();
		if (oSpecialHour != null)
			iSphrId = oSpecialHour.getSphrId();
		
		boolean bHaveNewAddItem = false;
		if (m_oStoredFuncCheckItemList.size() > 0) {
			// Set the new add flag to true
			bHaveNewAddItem = true;
		}
		
		// For Preorder, do not group items
		// For self_order_kiosk operation mode and having mix and match rules,
		// do not group items
		boolean bGroupItem = false;
		if (!bPreorder) {
			if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
					&& AppGlobal.g_oFuncMixAndMatch.get().isSupportMixAndMatch())
				bGroupItem = false;
			else
				bGroupItem = true;
		}
		
		// Add the item to check
		PosCheckItem oPosCheckItem;
		int iSelectedSeatNo = m_oFrameOrderingBasket.getSelectedSectionId();
		for (FuncCheckItem oFuncCheckItem : m_oStoredFuncCheckItemList) {
			int iCurrentItemCount = m_oFuncCheck.getItemListCount(iSelectedSeatNo);
			
			// Do override checking
			DateTime oCheckOpenDateTime = null;
			DateTime oItemOrderDateTime = AppGlobal.getCurrentTime(false);
			Time oCheckOpenTime = null, oItemOrderTime = null;
			DateTimeFormatter oTimeFormatter = DateTimeFormat.forPattern("HH:mm:ss");
			SimpleDateFormat oSimpleTimeFormat = new SimpleDateFormat("HH:mm:ss", Locale.ENGLISH);
			if (m_oFuncCheck.isOldCheck())
				oCheckOpenDateTime = m_oFuncCheck.getOpenLocTime();
			else
				oCheckOpenDateTime = AppGlobal.getCurrentTime(false);
			try {
				oCheckOpenTime = new Time(oSimpleTimeFormat.parse(oTimeFormatter.print(oCheckOpenDateTime)).getTime());
				oItemOrderTime = new Time(oSimpleTimeFormat.parse(oTimeFormatter.print(oItemOrderDateTime)).getTime());
			} catch (ParseException exception) {
				exception.printStackTrace();
				AppGlobal.stack2Log(exception);
			}
			
			// get discount type id list
			List<Integer> oDtypeIdList = new ArrayList<Integer>();
			if (oFuncCheckItem.getItemDiscountList().size() > 0) {
				for (PosCheckDiscount oCheckDiscount : oFuncCheckItem.getItemDiscountList())
					oDtypeIdList.add(oCheckDiscount.getDtypId());
			}
			
			if (m_oFuncCheck.getCurrentPartyAppliedCheckDiscount().size() > 0) {
				for (PosCheckDiscount oCheckDiscount : m_oFuncCheck.getCurrentPartyAppliedCheckDiscount())
					oDtypeIdList.add(oCheckDiscount.getDtypId());
			}
			
			// Toggle new item price level for attached membership check
			toggleItemPriceLevelForMembership(oFuncCheckItem);
			
			boolean bFastFoodCheck = (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food)
					|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk));
			AppGlobal.g_oFuncOverrideList.get(AppGlobal.g_oFuncOutlet.get().getOutletId()).checkPriceOverrideForItem(
					oFuncCheckItem, bFastFoodCheck, oCheckOpenTime, oItemOrderTime,
					Integer.valueOf(m_oFuncCheck.getTableNo()).intValue(), m_oFuncCheck.getTableExtension(), iSphrId,
					m_oFuncCheck.getCustomTypeId(), oDtypeIdList);
			
			// Add print status for adding new item for old check
			// Get the continuous printing flag
			if (m_oFuncCheck.isOldCheck()) {
				if (!m_oFuncCheck.getAllowContinuousPrint().equals(FuncCheck.NOT_ALLOW_CONTINUOUS_PRINT)) {
					oFuncCheckItem.setIsAddUpdatePrinted(false);
					m_oFuncCheck.setAllowContinuousPrint(FuncCheck.ALLOW_CONTINUOUS_PRINT);
				}
			}
			BigDecimal dOriRoundTotal = oFuncCheckItem.getCheckItem().getRoundTotal();
			if (iCurrentItemCount > 0) {
				//get ordering basket item grouping method by setup
				// 1 = combine last item only, a = combine all similar items in ordering basket
				String sGroupingMethod = AppGlobal.g_oFuncStation.get().getGroupingMethodSetting();
				
				boolean bCanMerge = false;
				if(!sGroupingMethod.isEmpty() && sGroupingMethod.equals("l")){
					int iLastItemIndex = iCurrentItemCount - 1;
					FuncCheckItem oLastFuncCheckItem = m_oFuncCheck.getCheckItem(iSelectedSeatNo, iLastItemIndex);
					
					bCanMerge = orderingBasketItemGrouping(bGroupItem, oFuncCheckItem, oLastFuncCheckItem);
					
					if(bCanMerge){
						dOriRoundTotal = oLastFuncCheckItem.getCheckItem().getRoundTotal();
						BigDecimal dNewQty = oLastFuncCheckItem.getCheckItem().getQty();
						dNewQty = dNewQty.add(oFuncCheckItem.getCheckItem().getQty());
						
						boolean bReachZeroCntNotAllow = false;
						if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
								|| AppGlobal.g_oFuncStation.get().getNotAllowToOrderWhenZeroStock())
							bReachZeroCntNotAllow = true;
						if (m_oFuncCheck.changeItemQty(bReachZeroCntNotAllow, iSelectedSeatNo, iLastItemIndex,
								m_oFuncCheck.getTableNo(), m_oFuncCheck.getTableExtension(), dNewQty, false) == false) {
							// Error
							String sErrMsg = oFuncCheckItem.getLastErrorMessage();
							if (sErrMsg != null && !sErrMsg.isEmpty() && !m_oFrameSeatPanel.getPanelType().equals(FrameSeatPanel.TYPE_NUMPAD))
								showErrorDialogBox(sErrMsg);
							
							bNeedClearItemList = true;
							break;
						}
						
						// Change cover based on selected item group
						changeCoverByItem(oFuncCheckItem.getMenuItemId(), null, false);
						
						if (dNewQty.compareTo(BigDecimal.ZERO) == 0) {
							// Remove all child item and modifier from the basket
							m_oFrameOrderingBasket.removeAllChildItem(iSelectedSeatNo, iLastItemIndex);
							m_oFrameOrderingBasket.removeAllModifier(iSelectedSeatNo, iLastItemIndex);
							m_oFrameOrderingBasket.removeItem(iSelectedSeatNo, iLastItemIndex);
							m_oFuncCheck.removeItemFromList(iSelectedSeatNo, iLastItemIndex);
							this.updateSeatPanelQty();
							this.calculateCheck();
							break;
						}
						
						// Update basket
						this.updateBasketItemPrice(iSelectedSeatNo, iLastItemIndex, oLastFuncCheckItem);
						this.updateBasketItemQty(iSelectedSeatNo, iLastItemIndex, dNewQty);
						
						// surveillance event: ItemAdd
						List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);
						if (!oInterfaceConfigList.isEmpty()) {
							for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
								if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
									FuncSurveillance oFuncSurveillance = new FuncSurveillance(oPosInterfaceConfig);
									String sCheckNum = (m_oFuncCheck.isOldCheck()) ? m_oFuncCheck.getCheckPrefixNo() : AppGlobal.g_oFuncStation.get().getNextCheckPrefixNumber(false);
									int iLangIndex = 1;
									if(oPosInterfaceConfig.getInterfaceConfig().has("general_setup") && oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").has("language_index"))
										iLangIndex = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").optJSONObject("language_index").optInt("value");
									HashMap<String, String> oSurveillanceEventInfo= new HashMap<String, String> ();
									oSurveillanceEventInfo.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_ITEMADD);
									oSurveillanceEventInfo.put("qty", oFuncCheckItem.getCheckItem().getQty().toString());
									oSurveillanceEventInfo.put("amount", oLastFuncCheckItem.getCheckItem().getRoundTotal().subtract(dOriRoundTotal).toPlainString());
									oSurveillanceEventInfo.put("checkNum", sCheckNum);
									oSurveillanceEventInfo.put("itemCode", oLastFuncCheckItem.getCheckItem().getCode());
									oSurveillanceEventInfo.put("itemName", oLastFuncCheckItem.getCheckItem().getName(iLangIndex));
									oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo, null);
								}
							}
						}
						
						continue;
					}
				}else{
					int iItemIndex = 0;
					for (FuncCheckParty oFuncCheckParty : m_oFuncCheck.getCheckPartyList()) {
						for (List<FuncCheckItem> oItemListForSingleSeat : oFuncCheckParty.getWholeItemList()) {
							for (FuncCheckItem oBasketCheckItem : oItemListForSingleSeat) {
								
								iItemIndex = oBasketCheckItem.getCheckItem().getSeq() - 1;
								
								bCanMerge = orderingBasketItemGrouping(bGroupItem, oFuncCheckItem, oBasketCheckItem);
								
								if(bCanMerge){
									BigDecimal dNewQty = oBasketCheckItem.getCheckItem().getQty();
									dNewQty = dNewQty.add(oFuncCheckItem.getCheckItem().getQty());
									boolean bReachZeroCntNotAllow = false;
									if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
											|| AppGlobal.g_oFuncStation.get().getNotAllowToOrderWhenZeroStock())
										bReachZeroCntNotAllow = true;
									if (m_oFuncCheck.changeItemQty(bReachZeroCntNotAllow, iSelectedSeatNo, iItemIndex,
											m_oFuncCheck.getTableNo(), m_oFuncCheck.getTableExtension(), dNewQty, false) == false) {
										// Error
										String sErrMsg = oFuncCheckItem.getLastErrorMessage();
										if (!sErrMsg.isEmpty() && !m_oFrameSeatPanel.getPanelType().equals(FrameSeatPanel.TYPE_NUMPAD))
											showErrorDialogBox(sErrMsg);
										
										bNeedClearItemList = true;
										break;
									}
									
									if (dNewQty.compareTo(BigDecimal.ZERO) == 0) {
										// Remove all child item and modifier from the basket
										m_oFrameOrderingBasket.removeAllChildItem(iSelectedSeatNo, iItemIndex);
										m_oFrameOrderingBasket.removeAllModifier(iSelectedSeatNo, iItemIndex);
										m_oFrameOrderingBasket.removeItem(iSelectedSeatNo, iItemIndex);
										m_oFuncCheck.removeItemFromList(iSelectedSeatNo, iItemIndex);
										this.updateSeatPanelQty();
										
										// Change cover based on selected item group
										changeCoverByItem(oFuncCheckItem.getMenuItemId(), null, false);
										
										this.calculateCheck();
										break;
									}
									
									// Update basket
									this.updateBasketItemPrice(iSelectedSeatNo, iItemIndex, oBasketCheckItem);
									this.updateBasketItemQty(iSelectedSeatNo, iItemIndex, dNewQty);
									
									// surveillance eConnect check detail event: ItemAdd
									List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);
									if (!oInterfaceConfigList.isEmpty()) {
										for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
											if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
												FuncSurveillance oFuncSurveillance = new FuncSurveillance(oPosInterfaceConfig);
												String sCheckNum = (m_oFuncCheck.isOldCheck()) ? m_oFuncCheck.getCheckPrefixNo() : AppGlobal.g_oFuncStation.get().getNextCheckPrefixNumber(false);
												int iLangIndex = 1;
												if(oPosInterfaceConfig.getInterfaceConfig().has("general_setup") && oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").has("language_index"))
													iLangIndex = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").optJSONObject("language_index").optInt("value");
												
												HashMap<String, String> oSurveillanceEventInfo= new HashMap<String, String> ();
												oSurveillanceEventInfo.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_ITEMADD);
												oSurveillanceEventInfo.put("qty", oFuncCheckItem.getCheckItem().getQty().toString());
												oSurveillanceEventInfo.put("amount", oBasketCheckItem.getCheckItem().getRoundTotal().subtract(dOriRoundTotal).toPlainString());
												oSurveillanceEventInfo.put("checkNum", sCheckNum);
												oSurveillanceEventInfo.put("itemCode", oBasketCheckItem.getCheckItem().getCode());
												oSurveillanceEventInfo.put("itemName", oBasketCheckItem.getCheckItem().getName(iLangIndex));
												oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo, null);
											}
										}
									}
									break;
								}
							}
						}
					}
					if(bCanMerge)
						continue;
				}
			}
			// Add to item list with given seat no.
			m_oFuncCheck.addItemToItemList(iSelectedSeatNo, iCurrentItemCount + 1, oFuncCheckItem);
			this.updateSeatPanelQty();
			
			// Change cover based on selected item group
			changeCoverByItem(oFuncCheckItem.getMenuItemId(), null, false);
			
			calculateCheck();
			
			// Add to the basket
			if (!m_oFrameOrderingBasket.isSectionVisible(iSelectedSeatNo)) {
				if ((m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food) || m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab)) && iSelectedSeatNo == 0) {
					// Not show "share" section title for fast food mode
				} else{
					if(!m_oFrameOrderingBasket.isDisplaySeatNumberSection())
						m_oFrameOrderingBasket.setSectionVisible(iSelectedSeatNo, false);
					else
						m_oFrameOrderingBasket.setSectionVisible(iSelectedSeatNo, true);
				}
			}
			else{
				if(!m_oFrameOrderingBasket.isDisplaySeatNumberSection())
					m_oFrameOrderingBasket.setSectionVisible(iSelectedSeatNo, false);
			}
			oPosCheckItem = oFuncCheckItem.getCheckItem();
			boolean bIsChildItem = false;
			if (oFuncCheckItem.isSetMenuItem())
				bIsChildItem = true;
			boolean bRet = false;
			
			String[] sNameArray = new String[AppGlobal.LANGUAGE_COUNT];
			for (int i = 0; i < AppGlobal.LANGUAGE_COUNT; i++) {
				sNameArray[i] = oFuncCheckItem.getBilingualItemDescriptionByIndex(i + 1);
			}
			
			if (AppGlobal.OPERATION_MODE.stock_delivery.equals(m_eOperationMode)) {
				if (m_iStockDeliveryOperaionMode == 0)
					bRet = m_oFrameOrderingBasket.addItem(iSelectedSeatNo, iCurrentItemCount, oPosCheckItem.getQty(),
							BigDecimal.ZERO, sNameArray, AppGlobal.g_oFuncOutlet.get().getItemRoundDecimal(),
							BigDecimal.ZERO, false, bIsChildItem, 2, true, oPosCheckItem.getSeq());
				else
					bRet = m_oFrameOrderingBasket.addItem(iSelectedSeatNo, iCurrentItemCount, oPosCheckItem.getQty(),
							BigDecimal.ZERO, sNameArray, AppGlobal.g_oFuncOutlet.get().getItemRoundDecimal(),
							BigDecimal.ZERO, false, bIsChildItem, 2, false, oPosCheckItem.getSeq());
			} else{
				bRet = m_oFrameOrderingBasket.addItem(iSelectedSeatNo, iCurrentItemCount, oPosCheckItem.getQty(),
						BigDecimal.ZERO, sNameArray, AppGlobal.g_oFuncOutlet.get().getItemRoundDecimal(),
						BigDecimal.ZERO, false, bIsChildItem, 0, false, oPosCheckItem.getSeq());
			}
			
			if (bRet == false) {
				// Error in add item to basket
				// Redraw the basket
				redrawOrderingBasket(true, FrameOrderingBasket.ORDERING_BASKET_MODE_SHOW_NORMAL);
			}
			
			updateBasketItemPrice(iSelectedSeatNo, iCurrentItemCount, oFuncCheckItem);
			this.updateBasketItemInfo(iSelectedSeatNo, iCurrentItemCount);
			
			// Move the scroll view to the last insert node
			m_oFrameOrderingBasket.moveScrollToItem(iSelectedSeatNo, iCurrentItemCount);
			
			// check if the check total is excess limit or not, if over limit,
			// delete the last item
			if (isRollbackNeededForCheckLimit(m_oFuncCheck, BigDecimal.ZERO)) {
				if (!oFuncCheckItem.isSetMenuItem()) {
					deleteItem(iSelectedSeatNo, iCurrentItemCount, oFuncCheckItem.getCheckItem().getQty());
					bHaveNewAddItem = false;
					break;
				}
			}
			
			if(m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name())) {
				if(overrideItemPrice(iSelectedSeatNo, iCurrentItemCount, m_oUsePanelToSelectItemParentItem.getCheckItem().getOriginalPrice().multiply(m_oUsePanelToSelectItemParentItem.getCheckItem().getQty()), true)) {
					oFuncCheckItem.setParentFuncCheckItem(m_oUsePanelToSelectItemParentItem);
					m_oUsePanelToSelectItemParentItem.addChildItemToList(oFuncCheckItem, true);
					BigDecimal oNewItemTotal = m_oUsePanelToSelectItemParentItem.getCheckItem().getOriginalPrice().multiply(m_oUsePanelToSelectItemParentItem.getCheckItem().getQty()).subtract(oFuncCheckItem.getCheckItem().getOriginalPrice()).divide(m_oUsePanelToSelectItemParentItem.getCheckItem().getQty(), 10, BigDecimal.ROUND_HALF_UP);
					oFuncCheckItem.setRole(PosCheckItem.ROLE_SET_MENU_CHILD_ITEM);
					oFuncCheckItem.setParentItemId(m_oUsePanelToSelectItemParentItem.getCheckItem().getCitmId());
					overrideItemPrice(m_oUsePanelToSelectItemParentItem.getCheckItem().getSeatNo(), m_oUsePanelToSelectItemParentItem.getCheckItem().getSeq() - 1, oNewItemTotal, false);
					m_oUsePanelToSelectItemParentItem.setModified(true);
				} else
					deleteItem(iSelectedSeatNo, iCurrentItemCount, oFuncCheckItem.getCheckItem().getQty());
			}
			
			// surveillance eConnect check detail event: ItemAdd
			List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);
			if (!oInterfaceConfigList.isEmpty()) {
				for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
					if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
						FuncSurveillance oFuncSurveillance = new FuncSurveillance(oPosInterfaceConfig);
						String sCheckNum = (m_oFuncCheck.isOldCheck()) ? m_oFuncCheck.getCheckPrefixNo() : AppGlobal.g_oFuncStation.get().getNextCheckPrefixNumber(false);
						int iLangIndex = 1;
						if(oPosInterfaceConfig.getInterfaceConfig().has("general_setup") && oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").has("language_index"))
							iLangIndex = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").optJSONObject("language_index").optInt("value");
						
						HashMap<String, String> oSurveillanceEventInfo= new HashMap<String, String> ();
						oSurveillanceEventInfo.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_ITEMADD);
						oSurveillanceEventInfo.put("qty", oFuncCheckItem.getCheckItem().getQty().toString());
						oSurveillanceEventInfo.put("amount", oFuncCheckItem.getCheckItem().getRoundTotal().subtract(dOriRoundTotal).toPlainString());
						oSurveillanceEventInfo.put("checkNum", sCheckNum);
						oSurveillanceEventInfo.put("itemCode", oFuncCheckItem.getCheckItem().getCode());
						oSurveillanceEventInfo.put("itemName", oFuncCheckItem.getCheckItem().getName(iLangIndex));
						oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo, null);
					}
				}
			}
		}
		
		if(!m_sCurrentOrderingBasketMode.equals(FrameOrderingBasket.ORDERING_BASKET_MODE_SHOW_NORMAL))
			// Redraw consolidate items ordering basket
			redrawOrderingBasket(true, FrameOrderingBasket.ORDERING_BASKET_MODE_SHOW_CONSOLIDATE_ITEMS);
		
		// cleanup stored temporary item list
		m_oStoredFuncCheckItemList.clear();
		
		if(bNeedClearItemList)
			return;
		
		if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk)) {
			// Self order mode
			// Mix and match function
			mixAndMatchFunction();
		}
		
		// Check if last item is set-menu
		if (bHaveNewAddItem) {
			boolean bSetMenu = false, bRepeatItem = false;
			FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iSelectedSeatNo,
					m_oFuncCheck.getItemListCount(iSelectedSeatNo) - 1);
			if (oFuncCheckItem != null)
				bSetMenu = oFuncCheckItem.isSetMenu();
			if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.repeat_item)
					|| (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.repeat_multiple_items))
					|| (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.repeat_round_items)))
				bRepeatItem = true;
			
			if (bSetMenu && bPreorder == false && !bRepeatItem) {
				// Clear course no. for parent item
				// oFuncCheckItem.getCheckItem().setCourseId(0);
				
				if(m_oFrameSetMenu == null){
					m_bStockOperationSetMenu = false;
					initSetMenu(oFuncCheckItem, null, FrameSetMenu.SET_MENU_FROM_OPERATION, false);
				}
			} else
				// Make sure the set menu frame is null
				handleCoverAndClearSetMenuFrameAndCalCheck();
		}
		
	}
	
	public boolean orderingBasketItemGrouping(boolean bGroupItem, FuncCheckItem oFuncCheckNewItem, FuncCheckItem oFuncCheckExisitngItem){
		// Check if the item can be merge to previous item
		boolean bCanMerge = false;
		
		while (true && bGroupItem) {
			// Check if the ordering basket item is old item or not
			if (oFuncCheckExisitngItem.isOldItem())
				break;
			// Check if menu id is matched or not
			if (oFuncCheckNewItem.getMenuItemId() != oFuncCheckExisitngItem.getMenuItemId())
				break;
			// Cannot merge if have modifier
			if (oFuncCheckNewItem.getModifierList().size() > 0 || oFuncCheckExisitngItem.getModifierList().size() > 0)
				break;
			// Cannot merge if have child
			if (oFuncCheckNewItem.isSetMenu() || oFuncCheckNewItem.getChildItemList().size() > 0
					|| oFuncCheckExisitngItem.getChildItemList().size() > 0)
				break;
			// Cannot merge if act as child item
			if (oFuncCheckNewItem.isSetMenuItem())
				break;
			// Cannot merge if menu id is the same but course id is different
			if (oFuncCheckNewItem.getCheckItem().getCourseId() != oFuncCheckExisitngItem.getCheckItem().getCourseId())
				break;
			// Cannot merge if have discount
			if (oFuncCheckNewItem.hasItemDiscount(false) || oFuncCheckExisitngItem.hasItemDiscount(false))
				break;
			// Cannot merge if open description
			if (oFuncCheckNewItem.isOpenDescription() || oFuncCheckExisitngItem.isOpenDescription()
					|| oFuncCheckNewItem.isAppendOpenDescription() || oFuncCheckExisitngItem.isAppendOpenDescription())
				break;
			// Cannot merge if open price
			if (oFuncCheckNewItem.isOpenPrice() || oFuncCheckExisitngItem.isOpenPrice())
				break;
			// Check if the price is matched or not
			if (oFuncCheckNewItem.getCheckItem().getPrice()
					.compareTo(oFuncCheckExisitngItem.getCheckItem().getPrice()) != 0)
				break;
			// Cannot merge if pending item
			if (oFuncCheckExisitngItem.isPendingItem())
				break;
			// Cannot merge if SVC coupon redeem item
			if (oFuncCheckExisitngItem.isSVCCouponRedeemItem())
				break;
			// Cannot merge if it is loyalty benefit item
			if (oFuncCheckNewItem.isLoyaltyBenefitItem())
				break;
			// Cannot merge if it is loyalty SVC card item
			if (oFuncCheckNewItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY,
					PosCheckExtraInfo.VARIABLE_SVC_CARD_NUMBER) != null
					|| oFuncCheckNewItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY,
					PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER) != null)
				break;
			// Cannot merge if different price level
			if(oFuncCheckNewItem.getCheckItem().getPriceLevel()!=(oFuncCheckExisitngItem.getCheckItem().getPriceLevel()))
				break;
			// Cannot merge if the item is not allow to item grouping
			if(!oFuncCheckExisitngItem.isAllowItemGrouping())
				break;
			
			// Check if item is item-selection-description
			// Group with last item if both item description is the same
			boolean bIsSameDesc = true;
			if (oFuncCheckExisitngItem.isAppendPanelButtonDescription()
					&& oFuncCheckNewItem.isAppendPanelButtonDescription()) {
				for (int i = 1; i <= 5; i++) {
					// compare description
					if ((!oFuncCheckExisitngItem.getItemDescriptionByIndex(i)
							.equals(oFuncCheckNewItem.getItemDescriptionByIndex(i)))
							|| (!oFuncCheckExisitngItem.getItemShortDescriptionByIndex(i)
							.equals(oFuncCheckNewItem.getItemShortDescriptionByIndex(i)))) {
						bIsSameDesc = false;
						break;
					}
				}
			}
			if (!bIsSameDesc)
				break;
			
			bCanMerge = true;
			
			break;
		}
		return bCanMerge;
	}
	
	private void finishAddModifier(int iSeatNo, int iItemIndex) {
		FuncCheckItem oLastCheckItem = m_oFuncCheck.getCheckItem(iSeatNo, iItemIndex);
		
		// Re-calculate the parent item's all modifiers' price
		oLastCheckItem.setAllModifiersPrice(false);
		
		calculateCheck();
		// check if the check total is excess limit or not, if over limit,
		// delete the last modifier
		if (isRollbackNeededForCheckLimit(m_oFuncCheck, BigDecimal.ZERO)) {
			deleteModifier(BigDecimal.ONE, iSeatNo, iItemIndex, oLastCheckItem.getModifierList().size() - 1);
			calculateCheck();
		} else {
			this.updateBasketItemInfo(iSeatNo, iItemIndex);
			
			// Update basket
			this.updateBasketItemPrice(iSeatNo, iItemIndex, oLastCheckItem);
		}
		
		// Focus to last add modifier
		if (oLastCheckItem.getModifierList().size() > 0) {
			m_oFrameOrderingBasket.moveScrollToModifier(iSeatNo, iItemIndex,
					oLastCheckItem.getModifierList().size() - 1);
		}
	}
	
	private void updateBasketItemPrice(int i, int j, FuncCheckItem oFuncCheckItem) {
		updateBasketItemPriceWithMode(i, j, oFuncCheckItem, FrameOrderingBasket.ORDERING_BASKET_MODE_SHOW_NORMAL);
	}
	
	private void updateBasketItemPriceWithMode(int iSeatNo, int iItemIndex, FuncCheckItem oFuncCheckItem, String sCurrentOrderingBasketMode) {
		FrameOrderingBasket oFrameOrderingBasket = m_oFrameOrderingBasket;
		if(sCurrentOrderingBasketMode.equals(FrameOrderingBasket.ORDERING_BASKET_MODE_SHOW_CONSOLIDATE_ITEMS))
			oFrameOrderingBasket = m_oFrameConsolidateItemsOrderingBasket;
		
		BigDecimal dNewPrice = oFuncCheckItem.getCheckItem().getRoundTotal()
				.add(oFuncCheckItem.getCheckItem().getPreDisc().add(
						oFuncCheckItem.getCheckItem().getMidDisc().add(oFuncCheckItem.getCheckItem().getPostDisc())));
		
		if(oFuncCheckItem.isSplitRevenueParent())
			dNewPrice = dNewPrice.subtract(oFuncCheckItem.getAppliedItemDiscountTotal());
		
		if(AppGlobal.g_oFuncStation.get().IsDisplayTaxInItems())
			dNewPrice = dNewPrice.add(oFuncCheckItem.getTaxTotal(true));
		
		String sNewPrice = AppGlobal.g_oFuncOutlet.get().roundItemAmountToString(dNewPrice);
		
		oFrameOrderingBasket.setNewPrice(iSeatNo, iItemIndex, sNewPrice);
		
		this.updateBasketExtendBarCheckTotal();
		
		if(!oFuncCheckItem.isMinimumChargeItem())
			this.updateSeatPanelQty();
		if(sCurrentOrderingBasketMode.equals(FrameOrderingBasket.ORDERING_BASKET_MODE_SHOW_NORMAL)){
			// If the item is child, update parent item's basket display
			if (oFuncCheckItem.isSetMenuItem()) {
				FuncCheckItem oParentFuncCheckItem = oFuncCheckItem.getParentFuncCheckItem();
				int iParentSeatNo = oParentFuncCheckItem.getCheckItem().getSeatNo();
				int iParentItemIndex = 0;
				for (FuncCheckItem oFuncCheckItem2 : m_oFuncCheck.getItemList(iParentSeatNo)) {
					if (oFuncCheckItem2 == oParentFuncCheckItem) {
						// Locate the parent item to update basket
						updateBasketItemPriceWithMode(iParentSeatNo, iParentItemIndex, oFuncCheckItem2, FrameOrderingBasket.ORDERING_BASKET_MODE_SHOW_NORMAL);
						break;
					}
					iParentItemIndex++;
				}
			}
		}
	}
	
	private void updateBasketExtendBarCheckTotal() {
		if(m_oFuncCheck == null)
			return;
		m_oFrameBasketExtendBar.setCheckTotal(
				StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, AppGlobal.g_oFuncOutlet.get().getCurrencySign()
						+ AppGlobal.g_oFuncOutlet.get().roundCheckAmountToString(m_oFuncCheck.getCheckTotal())));
		m_oFrameBasketExtendBar.setItemQuantity(StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT,
				StringLib.BigDecimalToStringWithoutZeroDecimal(m_oFuncCheck.getNewItemCount(true))));
		m_oFrameBasketExtendBar.setItemLineCount(StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT,
				"(" + m_oFuncCheck.getNewUniqueItemCount() + ")"));
		BigDecimal oItemTotal = m_oFuncCheck.getItemDiscountTotal().multiply(new BigDecimal("-1"));
		oItemTotal = oItemTotal.add(m_oFuncCheck.getNetItemTotal());
		m_oFrameBasketExtendBar.setItemDiscount(StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT,
				AppGlobal.g_oFuncOutlet.get().getCurrencySign() + AppGlobal.g_oFuncOutlet.get().roundDiscAmountToString(
						m_oFuncCheck.getCheckDiscountTotal().add(m_oFuncCheck.getItemDiscountTotal()))));
		BigDecimal oScTotal = m_oFuncCheck.getServiceChargeTotal().add(m_oFuncCheck.getGratuityTotal());
		
		m_oFrameBasketExtendBar.setItemTotal(
				StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, AppGlobal.g_oFuncOutlet.get().getCurrencySign()
						+ AppGlobal.g_oFuncOutlet.get().roundItemAmountToString(oItemTotal)));
		
		m_oFrameBasketExtendBar.setItemDiscount(StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT,
				AppGlobal.g_oFuncOutlet.get().getCurrencySign() + AppGlobal.g_oFuncOutlet.get().roundDiscAmountToString(
						m_oFuncCheck.getCheckDiscountTotal().add(m_oFuncCheck.getItemDiscountTotal().subtract(m_oFuncCheck.getExtraChargeTotal())))));
		BigDecimal oScTaxTotal = m_oFuncCheck.getServiceChargeTotal().add(m_oFuncCheck.getTaxTotal());
		oScTaxTotal = oScTaxTotal.add(m_oFuncCheck.getGratuityTotal());
		oScTaxTotal = oScTaxTotal.add(m_oFuncCheck.getExtraChargeTotal());
		if(AppGlobal.g_oFuncStation.get().getSeparateInclusiveTaxOnDisplay()) {
			String sTaxStartBracket = "(", sTaxEndBracket = ")";
			if(m_oFuncCheck.getTaxTotal().compareTo(BigDecimal.ZERO) != 0 || m_oFuncCheck.getInclusiveTaxTotal().compareTo(BigDecimal.ZERO) == 0) {
				sTaxStartBracket = "";
				sTaxEndBracket = "";
			}
			m_oFrameBasketExtendBar.setScTaxTotal(
					StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, AppGlobal.g_oFuncOutlet.get().getCurrencySign()
							+ AppGlobal.g_oFuncOutlet.get().roundSCAmountToString(oScTotal)),
					StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, sTaxStartBracket + AppGlobal.g_oFuncOutlet.get().getCurrencySign()
							+ AppGlobal.g_oFuncOutlet.get().roundTaxAmountToString(m_oFuncCheck.getTaxTotal().add(m_oFuncCheck.getInclusiveTaxTotal())) + sTaxEndBracket));
		}else
			m_oFrameBasketExtendBar.setScTaxTotal(
					StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, AppGlobal.g_oFuncOutlet.get().getCurrencySign()
							+ AppGlobal.g_oFuncOutlet.get().roundSCAmountToString(oScTotal)),
					StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, AppGlobal.g_oFuncOutlet.get().getCurrencySign()
							+ AppGlobal.g_oFuncOutlet.get().roundTaxAmountToString(m_oFuncCheck.getTaxTotal())));
	}
	
	private void updateBasketItemDesc(int iSeatNo, int iItemIndex, String[] sNewDesc) {
		m_oFrameOrderingBasket.setNewDesc(iSeatNo, iItemIndex, sNewDesc);
	}
	
	private void updateBasketItemQty(int iSeatNo, int iItemIndex, BigDecimal dNewQty) {
		String sNewQtyForDisplay = dNewQty.stripTrailingZeros().toPlainString();
		m_oFrameOrderingBasket.setNewQty(iSeatNo, iItemIndex, sNewQtyForDisplay, m_eOperationMode);
	}
	
	private void updateBasketItemReceiveQty(int iSeatNo, int iItemIndex, BigDecimal dNewReceiveQty) {
		String sNewReceiveQtyForDisplay = dNewReceiveQty.stripTrailingZeros().toPlainString();
		
		m_oFrameOrderingBasket.setNewReceiveQty(iSeatNo, iItemIndex, sNewReceiveQtyForDisplay);
	}
	
	private void updateSeatPanelQty(){
		// Update the seat panel qty tag if in numpad type
		if(m_oFrameSeatPanel.getPanelType().equals(FrameSeatPanel.TYPE_NUMPAD)){
			int iCurrentSeatNo = m_oFrameOrderingBasket.getSelectedSectionId();
			int iLastItemIndex = m_oFuncCheck.getItemListCount(iCurrentSeatNo) - 1;
			
			// Edit set menu
			FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iCurrentSeatNo, iLastItemIndex);
			
			// Reset Seat Panel Qty tag if there is no item
			if (oFuncCheckItem == null){
				m_oFrameSeatPanel.resetSelectedSeat();
				return;
			}
			
			if (oFuncCheckItem.isSetMenuItem()) {
				iCurrentSeatNo = oFuncCheckItem.getParentFuncCheckItem().getCheckItem().getSeatNo();
				iLastItemIndex = oFuncCheckItem.getParentFuncCheckItem().getCheckItem().getSeq() - 1;
			}
			
			FuncCheckItem oTargetItem = m_oFuncCheck.getCheckItem(iCurrentSeatNo, iLastItemIndex);
			
			// Store the number of item, if the item over than 99, it will reset the selected quantity to 1
			int iItemQuantity = oTargetItem.getCheckItem().getQty().intValue();
			
			// Check whether the input is Integer, if it is not integer, it will reset the selected quantity to 1
			Double dCheckItemInteger = iItemQuantity - oTargetItem.getCheckItem().getQty().doubleValue();
			
			// Set the selected quantity number
			if(!oTargetItem.isOldItem() && iItemQuantity > 0 && iItemQuantity < 100 && dCheckItemInteger == 0)
				m_oFrameSeatPanel.setQtySeatLabelColor(iItemQuantity - 1);
			else
				m_oFrameSeatPanel.resetSelectedSeat();
		}
	}
	
	private void extendOrderingBasket(boolean bExtend, int iExtendedHeight) {
		if (bExtend) {
			// Extend the basket
			m_oFrameOrderingBasket.setHeight(m_oFrameOrderingBasket.getHeight() + iExtendedHeight);
			m_oFrameOrderingBasket.extendBasket(iExtendedHeight);
			
			m_oFrameFuncPanel2.setTop(m_oFrameFuncPanel2.getTop() + iExtendedHeight);
			m_oFrameFuncPanel2.setHeight(m_oFrameFuncPanel2.getHeight() - iExtendedHeight);
			
			m_oFrameBasketExtendBar.setTop(m_oFrameBasketExtendBar.getTop() + iExtendedHeight);
			m_oFrameBasketExtendBar.setBasketExtended(true);
			m_oFrameBasketExtendBar.setBasketExtendBarImage(
					AppGlobal.g_oTerm.get().getClientImageURLPath() + "/buttons/ordering_extend_basket_up_button.png");
		} else {
			// Minimize the basket
			m_oFrameOrderingBasket.setHeight(m_oFrameOrderingBasket.getHeight() - iExtendedHeight);
			m_oFrameOrderingBasket.minimizeBasket(iExtendedHeight);
			
			m_oFrameFuncPanel2.setTop(m_oFrameFuncPanel2.getTop() - iExtendedHeight);
			m_oFrameFuncPanel2.setHeight(m_oFrameFuncPanel2.getHeight() + iExtendedHeight);
			
			m_oFrameBasketExtendBar.setTop(m_oFrameBasketExtendBar.getTop() - iExtendedHeight);
			m_oFrameBasketExtendBar.setBasketExtended(false);
			m_oFrameBasketExtendBar.setBasketExtendBarImage(AppGlobal.g_oTerm.get().getClientImageURLPath()
					+ "/buttons/ordering_extend_basket_down_button.png");
		}
	}
	
	///////////////////////////////////////////////////////////////////////
	// SetMenu Function
	///////////////////////////////////////////////////////////////////////
	// setup for setMenu UI
	private void initSetMenu(FuncCheckItem oFuncCheckItem, MenuItem oMenuItemFromStockOperation, String sOperation, boolean bEdit) {
		int iBilingualLangIndex = AppGlobal.g_oFuncOutlet.get()
				.getBilingualLangIndexByeLangIndex(AppGlobal.g_oCurrentLangIndex.get());
		int iMenuItemId = 0;
		if(m_bStockOperationSetMenu == false)
			iMenuItemId = oFuncCheckItem.getMenuItemId();
		else
			iMenuItemId = oMenuItemFromStockOperation.getItemId();
		// Store the parent item
		m_oSetMenuParentFuncCheckItem = oFuncCheckItem;
		
		if(m_bStockOperationSetMenu == false){
			// Set the section
			m_oFrameOrderingBasket.setSelectedSection(m_oSetMenuParentFuncCheckItem.getCheckItem().getSeatNo());
			m_oFrameSeatPanel.setSeatLabelColor(m_oSetMenuParentFuncCheckItem.getCheckItem().getSeatNo());
		}
		
		// Reset course index
		m_iCurrentCourseIndexForSetMenu = 0;
		
		// Retrieve the set menu content lookup
		List<MenuSetMenuLookup> oSetMenuLookupsList = null;
		MenuItem oMenuItem = AppGlobal.g_oFuncMenu.get().getFuncMenuItemByItemId(iMenuItemId).getMenuItem();
		if (oMenuItem.getSetMenuLookup().isEmpty()) {
			// Retrieve the set menu content lookup
			MenuSetMenuLookupList oMenuSetMenuLookupList = new MenuSetMenuLookupList();
			oMenuSetMenuLookupList.readMenuSetMenuLookupListById(iMenuItemId);
			oSetMenuLookupsList = oMenuSetMenuLookupList.getLookupList();
			
			oMenuItem.setSetMenuLookups(oSetMenuLookupsList);
			AppGlobal.g_oFuncMenu.get().addMenuItemToCache(oMenuItem);
			
		} else{
			if(m_bStockOperationSetMenu == false)
				oSetMenuLookupsList = m_oSetMenuParentFuncCheckItem.getMenuItem().getSetMenuLookup();
			else
				oSetMenuLookupsList = oMenuItemFromStockOperation.getSetMenuLookup();
		}
		// Pre-process to load pre-defined items and menu
		// Use thread to perform function "getFuncMenuItemByItemId" to load item
		// from DB
		// Use thread to perform function "getMenuAndContentById" to load menu
		// from DB
		// *****************************************************************
		// Create thread to load pre-defined items and menu
		AppThreadManager oAppThreadManager = new AppThreadManager();
		int iSelectListCnt = 0;
		int iThreadCount = 0;
		ArrayList<Integer> oPreDefindItemIdList = new ArrayList<Integer>();
		
		for (int iCount = 0; iCount < oSetMenuLookupsList.size(); iCount++) {
			MenuSetMenuLookup oMenuSetMenuLookup = oSetMenuLookupsList.get(iCount);
			if (oMenuSetMenuLookup.isChildItem()) {
				int iItemId = oMenuSetMenuLookup.getChildItemId();
				oPreDefindItemIdList.add(iItemId);
				
				// Add the method to the thread manager
				// Thread : load menu
				Object[] oParameters = new Object[1];
				oParameters[0] = iItemId;
				oAppThreadManager.addThread(iThreadCount, AppGlobal.g_oFuncMenu.get(), "getFuncMenuItemByItemId",
						oParameters);
				
				iThreadCount++;
			} else if (oMenuSetMenuLookup.isSelfSelectMenu()) {
				int iMenuId = oMenuSetMenuLookup.getSelectMenuId();
				
				// Add the method to the thread manager
				// Thread : load menu
				Object[] oParameters = new Object[1];
				oParameters[0] = iMenuId;
				oAppThreadManager.addThread(iThreadCount, AppGlobal.g_oFuncMenu.get(), "getMenuAndContentById",
						oParameters);
				
				iSelectListCnt++;
				iThreadCount++;
			}
		}
		if (iThreadCount > 0) {
			oAppThreadManager.runThread();
			oAppThreadManager.waitForThread();
		}
		
		// Init the setMenu frame if self select menu exists
		if (iSelectListCnt > 0) {
			// Init UI
			if (m_oFrameSetMenu == null) {
				// Edit Set Menu
				if(m_bStockOperationSetMenu){
					m_oFrameSetMenu = new FrameSetMenu(false);
					m_oFrameSetMenu.setMinMaxVisible(false);
				}
				else{
					if(m_oSetMenuParentFuncCheckItem.getChildItemList().size() > 0 || bEdit)
						m_oFrameSetMenu = new FrameSetMenu(true);
					else
						m_oFrameSetMenu = new FrameSetMenu(false);
				}
				m_oTemplateBuilder.buildFrame(m_oFrameSetMenu, "fraSetMenu");
				m_oFrameSetMenu.setVisible(false);
				m_oFrameSetMenu.setOperationMode(m_eOperationMode);
				
				// Add listener
				m_oFrameSetMenu.addListener(this);
				this.attachChild(m_oFrameSetMenu);
				
				if(!m_bStockOperationSetMenu)
					// Add hot item success
					finishAddItem(oFuncCheckItem.isPreorderItem());
			}
			
			String sItemDesc = "";
			if(m_bStockOperationSetMenu == false){
				m_oFrameSetMenu.setSetMenuImage(oFuncCheckItem.getMenuItem().getMediaUrl(MenuMediaObject.USED_FOR_THUMBNAIL));
				
				// set the item description label
				sItemDesc = oFuncCheckItem.getItemShortDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get());
				if (iBilingualLangIndex > 0) {
					if (!sItemDesc.equals(oFuncCheckItem.getItemShortDescriptionByIndex(iBilingualLangIndex)))
						sItemDesc += " " + oFuncCheckItem.getItemShortDescriptionByIndex(iBilingualLangIndex);
				}
			} else{
				m_oFrameSetMenu.setSetMenuImage(oMenuItemFromStockOperation.getMediaUrl(MenuMediaObject.USED_FOR_THUMBNAIL));
				// set the item description label
				sItemDesc = oMenuItemFromStockOperation.getBilingualName(AppGlobal.g_oCurrentLangIndex.get(), iBilingualLangIndex);
			}
			
			m_oFrameSetMenu.setItemDescription(sItemDesc);
			m_oFrameSetMenu.setFromStockoperation(m_bStockOperationSetMenu);
			if(sOperation.equals(FrameSetMenu.SET_MENU_FROM_SOLDOUT)){
				FuncCheck oFuncCheck = new FuncCheck();
				oFuncCheck.getCurrentItemStockList(AppGlobal.g_oFuncOutlet.get().getOutletId(), PosOutletItem.CHECK_STOCK_YES, PosOutletItem.SOLDOUT_YES);
				m_oFrameSetMenu.setItemStockList(oFuncCheck.getItemStockList());
			} else if(sOperation.equals(FrameSetMenu.SET_MENU_FROM_OPERATION)){
				FuncCheck oFuncCheck = new FuncCheck();
				oFuncCheck.getCurrentInSellItemStockList(AppGlobal.g_oFuncOutlet.get().getOutletId(), PosOutletItem.SOLDOUT_NO);
				m_oFrameSetMenu.setItemStockList(oFuncCheck.getItemStockList());
			}
			
			String sSetMenuLookupConfig = AppGlobal.g_oFuncStation.get().getSetMenuButtonNumber();
			if (sSetMenuLookupConfig != null) {
				try {
					JSONObject oMenuLookupJSONObject = new JSONObject(sSetMenuLookupConfig);
					if (oMenuLookupJSONObject != null) {
						JSONObject oJSONObject;
						if (AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name()))
							oJSONObject = oMenuLookupJSONObject.optJSONObject("mobile");
						else
							oJSONObject = oMenuLookupJSONObject.optJSONObject("tablet");
						
						if(oJSONObject != null) {
							int iRows = oJSONObject.optInt("row", FrameSetMenu.ROW_NUM);
							int iCols = oJSONObject.optInt("column", FrameSetMenu.COL_NUM);
							int iRowsWithImage = oJSONObject.optInt("row_with_image", AppGlobal.g_sDisplayMode.get().equals
									(AppGlobal.DISPLAY_MODE.horizontal_desktop.name()) ? FrameSetMenu.ROW_NUM_WITH_IMAGE : FrameSetMenu.ROW_NUM_FOR_MOBILE);
							int iColsWithImage = oJSONObject.optInt("column_with_image",AppGlobal.g_sDisplayMode.get().equals
									(AppGlobal.DISPLAY_MODE.horizontal_desktop.name()) ? FrameSetMenu.COLUMN_NUM_WITH_IMAGE : FrameSetMenu.COL_NUM_FOR_MOBILE);
							int iButtonFontSize = oJSONObject.optInt("font_size", FrameLookupButton.BUTTON_DESC_FONT_SIZE);
							m_oFrameSetMenu.setConfig(iRows, iCols, iRowsWithImage, iColsWithImage, iButtonFontSize);
						}
					}
				} catch (JSONException e) {
					e.printStackTrace();
				}
			}
		} else {
			if (bEdit && m_oStoredFuncCheckItemList.size() > 0)
				// remove the pre added set menu parent item for edit set menu
				m_oStoredFuncCheckItemList.remove(m_oStoredFuncCheckItemList.size() - 1);
		}
		
		List<FuncCheckItem> oOldSetMeuItemList = new ArrayList<FuncCheckItem>();
		if(m_bStockOperationSetMenu == false){
			// add pre-defined items
			boolean bPredefinedItemNotReady = false;
			if(bEdit){
				if(m_oFrameSetMenu == null)
					return;
				m_oFrameSetMenu.setOldChildCount(m_oSetMenuParentFuncCheckItem.getChildItemList().size());
				//int iChildItemSeq = 1;
				for(FuncCheckItem oFuncCheckMenuItem : m_oSetMenuParentFuncCheckItem.getChildItemList()){
					FuncMenuItem oFuncMenuItem = AppGlobal.g_oFuncMenu.get().getFuncMenuItemByItemId(oFuncCheckMenuItem.getMenuItem().getItemId());
					if (oFuncMenuItem == null)
						// Item not found
						continue;
					
					// Skip performing setMenu frame handling if no self select menu
					if (iSelectListCnt == 0)
						continue;
					
					String[] sNameArray = new String[AppGlobal.LANGUAGE_COUNT];
					for (int i = 0; i < AppGlobal.LANGUAGE_COUNT; i++) {
						sNameArray[i] = oFuncCheckMenuItem.getBilingualItemDescriptionByIndex(i + 1);
					}
					
					oFuncCheckMenuItem.setNewOrderItem(false);
					
					//boolean bFound = false;
					
					if(oFuncCheckMenuItem.getPanelLookupContent().predefinedItem || oFuncCheckMenuItem.getPanelLookupContent().parentTabIndex == -1){
						for(int iIndex = 0 ; iIndex < oPreDefindItemIdList.size() ; iIndex++){
							if(oFuncMenuItem.getMenuItem().getItemId() == oPreDefindItemIdList.get(iIndex)){
								//bFound = true;
								oPreDefindItemIdList.remove(iIndex);
								oFuncCheckMenuItem.setPreDefinedItem(true);
								break;
							}
						}
					}
					//if(!bFound){
					// if old set menu item
					FuncCheckItem oCheckItem = new FuncCheckItem();
					List<Integer> oSubPanelList = null;
					// Set the Sub Panel Menu id list
					
					if(oFuncCheckMenuItem.getPanelLookupContent().panelMenuIdList != null && oFuncCheckMenuItem.getPanelLookupContent().panelMenuIdList.size() > 1)
						oSubPanelList = oFuncCheckMenuItem.getPanelLookupContent().panelMenuIdList.subList(1, oFuncCheckMenuItem.getPanelLookupContent().panelMenuIdList.size());
					
					oCheckItem.getCheckItem().setItemId(oFuncMenuItem.getMenuItem().getItemId());
					oCheckItem.updateCheckItemFromMenuItem(oFuncMenuItem);
					oCheckItem.setPanelLookupContent(oFuncCheckMenuItem.getPanelLookupContent().parentTabIndex, oFuncCheckMenuItem.getPanelLookupContent().parentTabItemSeq, oSubPanelList);
					oCheckItem.setPreDefinedItem(oFuncCheckMenuItem.getPanelLookupContent().predefinedItem);
					
					oOldSetMeuItemList.add(oCheckItem);
					//} else {
					// if new set menu item
					//m_oFrameSetMenu.addSelectedItemToList(iChildItemSeq, sNameArray, -1, oFuncCheckMenuItem.getMenuItemId(), false, true, oFuncCheckMenuItem.getCheckItem().getSeatNo(),
					//oFuncCheckMenuItem.getCheckItem().getSeq(), oFuncCheckMenuItem.getPanelLookupContent().parentTabIndex);
					//}
					//iChildItemSeq++;
				}
			}else{
				for (int iCount = 0; iCount < oSetMenuLookupsList.size(); iCount++) {
					MenuSetMenuLookup oMenuSetMenuLookup = oSetMenuLookupsList.get(iCount);
					if (oMenuSetMenuLookup.isChildItem()) {
						int iItemId = oMenuSetMenuLookup.getChildItemId();
						
						FuncMenuItem oFuncMenuItem = AppGlobal.g_oFuncMenu.get().getFuncMenuItemByItemId(iItemId);
						if (oFuncMenuItem == null)
							// Item not found
							continue;
						MenuItem oPredefinedMenuItem = oFuncMenuItem.getMenuItem();
						
						// Child item price level
						int iPriceLevel = AppGlobal.g_oFuncOutlet.get().getPriceLevel();
						if (oMenuSetMenuLookup.isChangePriceLevel())
							iPriceLevel = oMenuSetMenuLookup.getPriceLevel();
						
						if (this.addItem(m_oSetMenuParentFuncCheckItem, oPredefinedMenuItem.getItemId(), new BigDecimal("1.0"),
								oMenuSetMenuLookup.getChildItemBaseQty(), false, true, false, iPriceLevel, null) == false) {
							bPredefinedItemNotReady = true;
							break;
						}
						m_oFuncCheck.calcCheck();
						if (isRollbackNeededForCheckLimit(m_oFuncCheck, BigDecimal.ZERO)) {
							bPredefinedItemNotReady = true;
							break;
						}
						
						FuncCheckItem oFuncCheckChildItem = m_oSetMenuParentFuncCheckItem.getChildItemList()
								.get(m_oSetMenuParentFuncCheckItem.getChildItemList().size() - 1);
						
						// Set as pre defined item
						oFuncCheckChildItem.setPreDefinedItem(true);
						
						// Course no. handling
						if (oFuncCheckChildItem.getCheckItem().getCourseId() == 0)
							this.autoUpdateCourseNoForSetMenu(oFuncCheckChildItem);
						
						// Skip performing setMenu frame handling if no self select menu
						if (iSelectListCnt == 0)
							continue;
						
						String[] sNameArray = new String[AppGlobal.LANGUAGE_COUNT];
						for (int i = 0; i < AppGlobal.LANGUAGE_COUNT; i++) {
							sNameArray[i] = oFuncCheckChildItem.getBilingualItemDescriptionByIndex(i + 1);
						}
						m_oFrameSetMenu.addSelectedItemToList(oMenuSetMenuLookup.getSeq(), sNameArray, -1,
								oFuncCheckChildItem.getMenuItemId(), false, false, -1, -1, oFuncCheckChildItem.getPanelLookupContent().parentTabIndex);
					}
				}
			}
			
			// check if there are any pre-defined item not ready and cancel order of
			// set menu
			if (bPredefinedItemNotReady) {
				frameSetMenuLookup_ButtonClicked("Cancel");
				return;
			}
		}
		
		// finish if no self select menu
		if (iSelectListCnt == 0) {
			m_oSetMenuParentFuncCheckItem = null;
			
			// Process the predefined items in new set menu
			if(!bEdit)
				finishAddItem(false);
			
			// cleanup stored temporary item list
			m_oStoredFuncCheckItemList.clear();
			return;
		}
		
		// add setMenu Lookup list
		List<HashMap<String, Object>> oLookupArray = new ArrayList<HashMap<String, Object>>();
		for (int iCount = 0; iCount < oSetMenuLookupsList.size(); iCount++) {
			MenuSetMenuLookup oMenuSetMenuLookup = oSetMenuLookupsList.get(iCount);
			if (oMenuSetMenuLookup.isSelfSelectMenu()) {
				int iMenuId = oMenuSetMenuLookup.getSelectMenuId();
				MenuMenu oMenuMenu = AppGlobal.g_oFuncMenu.get().getMenuAndContentById(iMenuId);
				// Check if the sub menu is ready or not
				if (oMenuMenu == null || oMenuMenu.getMenuLookupList().isEmpty())
					continue;
				
				int iPriceLevel = -1;
				int iMinOrder = oMenuMenu.getChildMinOrder();
				int iMaxOrder = oMenuMenu.getChildMaxOrder();
				if (oMenuSetMenuLookup.isChangePriceLevel())
					iPriceLevel = oMenuSetMenuLookup.getPriceLevel();
				
				// set to 0 if the min order and max order are not valid
				if(iMinOrder > 0 && iMaxOrder > 0 && iMaxOrder < iMinOrder) {
					iMinOrder = 0;
					iMaxOrder = 0;
				}
				
				List<MenuMenuLookup> oMenuLookupList = oMenuMenu.getMenuLookupList();
				List<FuncLookupButtonInfo> oCurrentLookupList = prepareCurrentLUList(oMenuLookupList, true,
						oMenuMenu.getRole());
				
				HashMap<String, Object> oLookupData = new HashMap<String, Object>();
				oLookupData.put(FrameSetMenu.SET_MENU_PANEL_SEQ, oMenuSetMenuLookup.getSeq());
				oLookupData.put(FrameSetMenu.SET_MENU_PANEL_MENU_ID, iMenuId);
				oLookupData.put(FrameSetMenu.SET_MENU_PANEL_NAME,
						oMenuMenu.getBilingualName(AppGlobal.g_oCurrentLangIndex.get(), iBilingualLangIndex));
				oLookupData.put(FrameSetMenu.SET_MENU_PANEL_MAX, iMaxOrder);
				oLookupData.put(FrameSetMenu.SET_MENU_PANEL_MIN, iMinOrder);
				oLookupData.put(FrameSetMenu.SET_MENU_PRICE_LEVEL, iPriceLevel);
				oLookupData.put(FrameSetMenu.SET_MENU_PANEL_DATA_LIST, oCurrentLookupList);
				oLookupArray.add(oLookupData);
			}
		}
		m_oFrameSetMenu.createTabsAndLookupButtons(oLookupArray);
		m_oFrameSetMenu.showPageButton();
		
		if(oOldSetMeuItemList != null && oOldSetMeuItemList.size() > 0){
			//Add old set menu item to set menu panel without add to funcCheck
			for(FuncCheckItem CheckItemLookupContent : oOldSetMeuItemList){
				int iParentTabIndex = CheckItemLookupContent.getPanelLookupContent().parentTabIndex;
				
				// Do not change the selected LookupTab when the item add by Replace Item
				if(iParentTabIndex >= 0)
					m_oFrameSetMenu.changeSelectedLookupTab(iParentTabIndex);
				
				// Set the display panel id when adding old set menu sub panel item
				if(CheckItemLookupContent.getPanelLookupContent().panelMenuIdList != null){
					for(int iSubPanelId : CheckItemLookupContent.getPanelLookupContent().panelMenuIdList){
						MenuMenu oMenuMenu = AppGlobal.g_oFuncMenu.get().getMenuAndContentById(iSubPanelId);
						
						if (!m_oFrameSetMenu.containSubMenu(iSubPanelId)) {
							List<MenuMenuLookup> oMenuLookupList = oMenuMenu.getMenuLookupList();
							List<FuncLookupButtonInfo> oCurrentLookupList = prepareCurrentLUList(oMenuLookupList, true,
									oMenuMenu.getRole());
							m_oFrameSetMenu.addSetMenuLookupPanelButtons(iSubPanelId, oCurrentLookupList);
						}
						m_oFrameSetMenu.showSubMenuPanel(iSubPanelId);
					}
				}
				
				addSelfSelectSetMenuItem(CheckItemLookupContent.getMenuItem(),
						CheckItemLookupContent.getPanelLookupContent().parentTabItemSeq, CheckItemLookupContent.getPanelLookupContent().parentTabIndex, true, !CheckItemLookupContent.getPanelLookupContent().predefinedItem);
			}
			m_oFrameSetMenu.changeSelectedLookupTab(0);
			m_oFrameSetMenu.changeSelectedTagButton(0);
			
		}
		
		m_oFrameCover.setVisible(true);
		m_oFrameCover.bringToTop();
		m_oFrameSetMenu.setVisible(true);
		m_oFrameSetMenu.bringToTop();
	}
	
	// Auto-update course no. for set menu child item
	private void autoUpdateCourseNoForSetMenu(FuncCheckItem oFuncCheckItem) {
		if (m_oMenuItemCourseList == null) {
			m_oMenuItemCourseList = new MenuItemCourseList();
			m_oMenuItemCourseList.readItemCourseList();
		}
		
		if (m_oMenuItemCourseList.getItemCourseList().isEmpty())
			// No course is defined
			return;
		
		int iDefinedIndex = -1;
		// Has pre-defined course no, get the index of the course
		if (oFuncCheckItem.getCheckItem().getCourseId() > 0) {
			iDefinedIndex = 0;
			for (MenuItemCourse oMenuItemCourse : m_oMenuItemCourseList.getItemCourseList()) {
				if (oMenuItemCourse.getIcouId() == oFuncCheckItem.getCheckItem().getCourseId())
					break;
				iDefinedIndex++;
			}
		}
		
		// Check for setting the course no
		if (iDefinedIndex < m_iCurrentCourseIndexForSetMenu) {
			// Assign the course no. to the item
			int iIndex = 0;
			for (MenuItemCourse oMenuItemCourse : m_oMenuItemCourseList.getItemCourseList()) {
				if (iIndex == m_iCurrentCourseIndexForSetMenu) {
					oFuncCheckItem.getCheckItem().setCourseId(oMenuItemCourse.getIcouId());
					break;
				}
				iIndex++;
			}
		}
		
		// Update the current course index for next child item
		if (iDefinedIndex > m_iCurrentCourseIndexForSetMenu)
			// Set the next course index to defined index + 1
			m_iCurrentCourseIndexForSetMenu = iDefinedIndex + 1;
		else
			// Auto-increment course no. if no course no. is set
			m_iCurrentCourseIndexForSetMenu++;
		
		// If the index is excess the setup course, set the next course index to
		// last index
		if (m_iCurrentCourseIndexForSetMenu >= m_oMenuItemCourseList.getItemCourseList().size())
			m_iCurrentCourseIndexForSetMenu = m_oMenuItemCourseList.getItemCourseList().size() - 1;
	}
	
	private void initCheckList(int iCheckListingbyType) {
		if (m_bFloorPlanWaitUserAction)
			return;
		
		// Add log to action log list
		AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.check_listing.name(),
				PosActionLog.ACTION_RESULT_SUCCESS, "", AppGlobal.g_oFuncUser.get().getUserId(),
				AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
				AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "", "");
		// handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
		m_oFormCheckListing = new FormCheckListing(this, m_eOperationMode);
		m_oFormCheckListing.addListener(this);
		
		//Consider to switch ON the "table reference option" inside m_oFormCheckListing
		m_oFormCheckListing.setCheckListingByType(iCheckListingbyType);
		
		m_oFormCheckListing.init(null, FrameCheckListing.TYPE_NORMAL);
		m_oFormCheckListing.show();
	}
	
	private void initMenuPage(int iSetMenuId) {
		MenuMenu oMenuMenu = AppGlobal.g_oFuncMenu.get().getMenuAndContentById(iSetMenuId);
		if (oMenuMenu == null)
			return;
		
		if (!m_oFrameSetMenu.containSubMenu(iSetMenuId)) {
			List<MenuMenuLookup> oMenuLookupList = oMenuMenu.getMenuLookupList();
			List<FuncLookupButtonInfo> oCurrentLookupList = prepareCurrentLUList(oMenuLookupList, true,
					oMenuMenu.getRole());
			m_oFrameSetMenu.addSetMenuLookupPanelButtons(iSetMenuId, oCurrentLookupList);
		}
		m_oFrameSetMenu.showSubMenuPanel(iSetMenuId);
	}
	
	private void addSelfSelectSetMenuItem(MenuItem oSelectedItem, int iButtonSeq, int iParentTabIndex, boolean bOldSelectedItem, boolean bAllowClick) {
		int iPriceLevel = AppGlobal.g_oFuncOutlet.get().getPriceLevel();
		if (m_oFrameSetMenu.getCurrentTabPriceLevel() > -1)
			iPriceLevel = m_oFrameSetMenu.getCurrentTabPriceLevel();
		
		// add new item to check
		if(!bOldSelectedItem){
			if (this.addItem(m_oSetMenuParentFuncCheckItem, oSelectedItem.getItemId(), new BigDecimal("1.0"),
					new BigDecimal("1.0"), false, true, false, iPriceLevel, null) == false)
				return;
		}
		
		// Recalculate the check
		this.calculateCheck();
		
		// update set menu Lookup UI
		FuncCheckItem oFuncCheckChildItem = m_oSetMenuParentFuncCheckItem.getChildItemList()
				.get(m_oSetMenuParentFuncCheckItem.getChildItemList().size() - 1);
		
		// Set child item's parent tab index and item seq
		if(!bOldSelectedItem){
			oFuncCheckChildItem.setPanelLookupContent(iParentTabIndex, iButtonSeq, oFuncCheckChildItem.getPanelLookupContent().panelMenuIdList);
			oFuncCheckChildItem.setPreDefinedItem(!bAllowClick);
			
			// Set the sub panel menu id in funcCheckItem
			List<Integer> oSubPanelList = new ArrayList<Integer>();
			for(int iListIndex = 0 ; iListIndex < m_oFrameSetMenu.getDisplayedLookupList().size() ; iListIndex++)
				oSubPanelList.add(m_oFrameSetMenu.getDisplayedLookupList().get(iListIndex));
			oFuncCheckChildItem.updatePanelMenuIdList(oSubPanelList);
		}
		
		// Course no. handling
		if (oFuncCheckChildItem.getCheckItem().getCourseId() == 0)
			autoUpdateCourseNoForSetMenu(oFuncCheckChildItem);
		
		String[] sAddItemName = new String[AppGlobal.LANGUAGE_COUNT];
		for (int i = 0; i<AppGlobal.LANGUAGE_COUNT; i++)
			sAddItemName[i] = oSelectedItem.getName(i + 1);
		
		m_oFrameSetMenu.finishAddSelectedItem(iButtonSeq, oSelectedItem.getItemId(), sAddItemName, bOldSelectedItem, oFuncCheckChildItem.getCheckItem().getSeatNo(), oFuncCheckChildItem.getCheckItem().getSeq(), bAllowClick);
		if (isRollbackNeededForCheckLimit(m_oFuncCheck, BigDecimal.ZERO)) {
			int iSelectedSeatNo = m_oSetMenuParentFuncCheckItem.getCheckItem().getSeatNo();
			int iCurrentItemIndex = m_oSetMenuParentFuncCheckItem.getCheckItem().getSeq() + m_oSetMenuParentFuncCheckItem.getCheckItem().getChildCount() - 1;
			FuncCheckItem oChildCheckItem = m_oFuncCheck.getCheckItem(iSelectedSeatNo, iCurrentItemIndex);
			deleteSetMenuItem(oChildCheckItem.getChildItemList().size() - 1);
			this.calculateCheck();
		}
	}
	
	private void deleteSetMenuItem(int iItemIndex) {
		// Get the Selected Seat No. and total corresponding number of items
		int iSelectedSeatNo = m_oSetMenuParentFuncCheckItem.getCheckItem().getSeatNo();
		int iCurrentItemIndex = m_oFuncCheck.getFuncCheckItemItemIndex(m_oSetMenuParentFuncCheckItem.getCheckItem().getSeatNo(), m_oSetMenuParentFuncCheckItem.getCheckItem().getItemId());
		
		if(!m_oFrameSetMenu.isEditSetmenu()){
			// Remove child item from m_oStoredFuncCheckItemList
			FuncCheckItem oTempFuncCheckItem = null;
			boolean bCheckItemFind = false;
			int iDeleteItemIndex = -1;
			FuncCheckItem oChildCheckItem = m_oSetMenuParentFuncCheckItem.getChildItemList().get(iItemIndex);
			for (int i = 0; i < m_oStoredFuncCheckItemList.size(); i++) {
				oTempFuncCheckItem = m_oStoredFuncCheckItemList.get(i);
				if (oChildCheckItem.isSameFuncCheckItemContent(oTempFuncCheckItem)) {
					iDeleteItemIndex = i;
					bCheckItemFind = true;
					break;
				}
			}
			if (bCheckItemFind && iDeleteItemIndex >= 0)
				m_oStoredFuncCheckItemList.remove(iDeleteItemIndex);
		}
		
		// Remove the child item from basket
		int iOriItemIndex = iItemIndex;
		List<Integer> iRemoveItemIndexList = new ArrayList<Integer>();
		
		// Sort the remove items id list
		for(FuncCheckItem oChildItem : m_oFrameSetMenu.getRemovedItemSetMenuLookupSeqList())
			iRemoveItemIndexList.add(oChildItem.getCheckItem().getSeq() - 1 - m_oSetMenuParentFuncCheckItem.getCheckItem().getSeq());
		
		Collections.sort(iRemoveItemIndexList);
		
		for(int i = 0; i < iRemoveItemIndexList.size(); i++){
			if(iRemoveItemIndexList.get(i) < iItemIndex + 1)
				iItemIndex++;
		}
		
		FuncCheckItem oSetMenuItem = m_oSetMenuParentFuncCheckItem.getChildItemList().get(iItemIndex);
		
		// Check the item is replaced item or not
		boolean bReplacedItem = oSetMenuItem.getPanelLookupContent().parentTabIndex == -1 && oSetMenuItem.getPanelLookupContent().parentTabItemSeq == -1 &&
				!oSetMenuItem.getPanelLookupContent().newOrderItem;
		if(m_oSetMenuParentFuncCheckItem.getChildItemList().size() > iItemIndex &&
				((oSetMenuItem.getPanelLookupContent().panelMenuIdList != null &&
						m_oFrameSetMenu.isSelectedOldItem(oSetMenuItem.getPanelLookupContent().parentTabIndex, oSetMenuItem.getPanelLookupContent().parentTabItemSeq,
								oSetMenuItem.getPanelLookupContent().panelMenuIdList.get(oSetMenuItem.getPanelLookupContent().panelMenuIdList.size() - 1))) || bReplacedItem)){
			if(m_oFrameSetMenu.isEditSetmenu())
				m_oFrameSetMenu.addRemovedItemSetMenuLookupSeqList(oSetMenuItem);
		} else{
			if(!m_oFrameSetMenu.isEditSetmenu())
				m_oFuncCheck.deleNewChildItemFromItem(iSelectedSeatNo, iCurrentItemIndex, iOriItemIndex);
		}
		m_oFrameSetMenu.removeSelectedItem(iOriItemIndex);
	}
	
	// Prepare HashMap for MenuLookup frame
	private List<FuncLookupButtonInfo> prepareCurrentLUList(List<MenuMenuLookup> oLookupList, boolean bSetMenu,
	                                                        String sMenuType) {
		List<FuncLookupButtonInfo> oCurrentLookupData = new ArrayList<FuncLookupButtonInfo>();
		MenuItem oMenuItem = null;
		MenuMenu oSubMenu = null;
		
		for (MenuMenuLookup oMenuMenuLookup : oLookupList) {
			FuncLookupButtonInfo oLookupButtonInfo = new FuncLookupButtonInfo();
			
			if (oMenuMenuLookup.isMenuItem()) { // MenuItem
				String sType = PosDisplayPanelLookup.TYPE_HOT_ITEM;
				String sPrice = "---";
				boolean bBlockUI = false;
				oMenuItem = oMenuMenuLookup.getMenuItem();
				
				// In modifier menu, if the item is not as modifier, do not show
				// this item
				if (!oMenuItem.isModifier() && sMenuType.equals(MenuMenu.ROLE_MODIFIER_MENU))
					continue;
				
				// If item is both basic item and modifier item, this item will
				// act as modifier item in modifier menu (ignore its item
				// activity)
				if (oMenuItem.isBasic() && !sMenuType.equals(MenuMenu.ROLE_MODIFIER_MENU)) {
					// Item
					if (oMenuItem.getChildCount() > 0) {
						// Has child item, click block UI
						bBlockUI = true;
					} else {
						if (oMenuItem.isForceModifierSelectModifierMethod()) {
							for (int i = 0; i < 10; i++) {
								if (oMenuItem.getSelectModifierMenuId(i) > 0) {
									// Has force modifier, click block UI
									bBlockUI = true;
									break;
								}
							}
						}
					}
					
					boolean bOrderingPanelShowPrice = AppGlobal.g_oFuncStation.get().getOrderingPanelShowPrice();
					if (bOrderingPanelShowPrice) {
						// Show item price in button
						if (bSetMenu) {
							if (oMenuItem
									.getChildPriceByPriceLevel(AppGlobal.g_oFuncOutlet.get().getPriceLevel()) != null)
								sPrice = AppGlobal.g_oFuncOutlet.get().getCurrencySign() + StringLib.BigDecimalToString(
										oMenuItem.getChildPriceByPriceLevel(
												AppGlobal.g_oFuncOutlet.get().getPriceLevel()),
										AppGlobal.g_oFuncOutlet.get().getItemRoundDecimal());
							else if (AppGlobal.g_oFuncOutlet.get().getPriceLevel() != 0
									&& oMenuItem.getChildPriceByPriceLevel(0) != null)
								sPrice = AppGlobal.g_oFuncOutlet.get().getCurrencySign()
										+ StringLib.BigDecimalToString(oMenuItem.getChildPriceByPriceLevel(0),
										AppGlobal.g_oFuncOutlet.get().getItemRoundDecimal());
							oLookupButtonInfo.setAddMinusBtn(true);
							oLookupButtonInfo.setPriceInLeftTopCorner(true);
							oLookupButtonInfo.setStockQtyInRightTopCorner(true);
						} else {
							if (oMenuItem
									.getBasicPriceByPriceLevel(AppGlobal.g_oFuncOutlet.get().getPriceLevel()) != null)
								sPrice = AppGlobal.g_oFuncOutlet.get().getCurrencySign() + StringLib.BigDecimalToString(
										oMenuItem.getBasicPriceByPriceLevel(
												AppGlobal.g_oFuncOutlet.get().getPriceLevel()),
										AppGlobal.g_oFuncOutlet.get().getItemRoundDecimal());
						}
						oLookupButtonInfo.setPrice(sPrice);
					}
					
					sType = PosDisplayPanelLookup.TYPE_HOT_ITEM;
				} else if (oMenuItem.isModifier()) // Modifier
					sType = PosDisplayPanelLookup.TYPE_HOT_MODIFIER;
				
				oLookupButtonInfo.setId(oMenuMenuLookup.getItemId());
				
				String[] sNameArray = new String[AppGlobal.LANGUAGE_COUNT];
				for (int i = 0; i < AppGlobal.LANGUAGE_COUNT; i++) {
					int iBilingualLangIndex = AppGlobal.g_oFuncOutlet.get().getBilingualLangIndexByeLangIndex(i + 1);
					sNameArray[i] = oMenuItem.getBilingualName(i + 1, iBilingualLangIndex);
				}
				oLookupButtonInfo.setName(sNameArray);
				oLookupButtonInfo.setType(sType);
				if (AppGlobal.g_oFuncStation.get().getOrderingPanelNotShowImage() == true)
					oLookupButtonInfo.setImage(null);
				else
					oLookupButtonInfo.setImage(oMenuItem.getMediaUrl(MenuMediaObject.USED_FOR_THUMBNAIL));
				oLookupButtonInfo.setBlockUI(bBlockUI);
			} else if (oMenuMenuLookup.isSubMenu()) { // Sub-menu
				oSubMenu = oMenuMenuLookup.getMenuMenu();
				
				oLookupButtonInfo.setId(oMenuMenuLookup.getSubMenuId());
				String[] sNameArray = new String[AppGlobal.LANGUAGE_COUNT];
				for (int i = 0; i < AppGlobal.LANGUAGE_COUNT; i++) {
					int iBilingualLangIndex = AppGlobal.g_oFuncOutlet.get().getBilingualLangIndexByeLangIndex(i + 1);
					sNameArray[i] = oSubMenu.getBilingualName(i + 1, iBilingualLangIndex);
				}
				oLookupButtonInfo.setName(sNameArray);
				oLookupButtonInfo.setType(PosDisplayPanelLookup.TYPE_MENU_LOOKUP);
				if (AppGlobal.g_oFuncStation.get().getOrderingPanelNotShowImage() == true)
					oLookupButtonInfo.setImage(null);
				else
					oLookupButtonInfo.setImage(oSubMenu.getMediaUrl(MenuMediaObject.USED_FOR_THUMBNAIL));
				oLookupButtonInfo.setBlockUI(true);
			}
			
			oLookupButtonInfo.setAllowImage(true);
			oLookupButtonInfo.setHaveStockQty(true);
			oLookupButtonInfo.setSeq(oCurrentLookupData.size() + 1);
			oCurrentLookupData.add(oLookupButtonInfo);
		}
		
		return oCurrentLookupData;
	}
	
	private void deleteAllOrderedSetMenuItems() {
		if(m_bStockOperationSetMenu == true || m_oFuncCheck == null)
			return;
		int iSelectedSeatNo = m_oFrameOrderingBasket.getSelectedSectionId();
		
		// delete parent item from function check and basket
		int iParentItemIndex = m_oFuncCheck.getItemListCount(iSelectedSeatNo) - 1;
		BigDecimal qty = m_oFuncCheck.getCheckItem(iSelectedSeatNo, iParentItemIndex).getCheckItem().getQty();
		
		// Remove all child item and modifier from the basket
		m_oFrameOrderingBasket.removeAllChildItem(iSelectedSeatNo, iParentItemIndex);
		m_oFrameOrderingBasket.removeAllModifier(iSelectedSeatNo, iParentItemIndex);
		m_oFrameOrderingBasket.removeItem(iSelectedSeatNo, iParentItemIndex);
		
		if (iSelectedSeatNo > 0) {
			ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck
					.getItemList(iSelectedSeatNo);
			
			if (oFuncCheckItemList == null || oFuncCheckItemList.isEmpty()) {
				m_oFrameOrderingBasket.setSectionVisible(iSelectedSeatNo, false);
			}
		}
		
		m_oFuncCheck.deleItem(qty, iSelectedSeatNo, iParentItemIndex, 0, null, false);
	}
	
	private void handleCoverAndClearSetMenuFrameAndCalCheck() {
		m_oSetMenuParentFuncCheckItem = null;
		
		if (!m_oFrameSearchItem.getVisible()) {
			if (!m_oFrameEnterItemPLU.getVisible() && !m_oFrameItemRemind.getVisible())
				m_oFrameCover.setVisible(false);
		} else
			m_oFrameSearchItem.bringToTop();
		if (m_oFrameSetMenu != null) {
			// m_oFrameSetMenu.removeMyself();
			m_oFrameSetMenu.setVisible(false);
			m_oFrameSetMenu.clearData();
			m_oFrameSetMenu.removeMyself();
		}
		m_oFrameSetMenu = null;
		
		// Recalculate the check
		calculateCheck();
	}
	
	///////////////////////////////////////////////////////////////////////
	// POS Function
	///////////////////////////////////////////////////////////////////////
	
	// Delete item
	private void deleteItem(int iSeatNo, int iItemIndex, BigDecimal dDefaultDelQty) {
		PosVoidReason oVoidReason = null;
		BigDecimal dQty;
		BigDecimal dOriQty;
		boolean bSuccess = false;
		FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iSeatNo, iItemIndex);
		if(m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name())) {
			if(oFuncCheckItem.isOldItem()) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_delete_old_item_in_split_revenue_function"));
				return;
			}
		}
		dQty = oFuncCheckItem.getCheckItem().getQty();
		dOriQty = oFuncCheckItem.getCheckItem().getQty();
		
		// Check if the item is attached to CRM voucher
		for (PosCheckExtraInfo oPosCheckExtraInfo : oFuncCheckItem.getExtraInfoList()) {
			if (oPosCheckExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_VOUCHER_TYPE)
					&& oPosCheckExtraInfo.getStatus().equals(PosCheckExtraInfo.STATUS_ACTIVE)) {
				if (oPosCheckExtraInfo.getValue().compareToIgnoreCase("freeitem") == 0
						|| oPosCheckExtraInfo.getValue().compareToIgnoreCase("iddiscount") == 0) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("please_void_the_attached_voucher_first"));
					return;
				}
			}
		}
		
		// Check if the item is set menu item
		if (oFuncCheckItem.isSetMenuItem() && (oFuncCheckItem.getParentFuncCheckItem() != null && !oFuncCheckItem.getParentFuncCheckItem().isSplitRevenueParent())) {
			if(m_oFrameSetMenu == null || !m_oFrameSetMenu.isEditSetmenu()){
				// Cannot delete set menu child item
				showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_delete_set_menu_item"));
				return;
			}
		}
		
		if(m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name()) && m_oUsePanelToSelectItemParentItem != null)
			deleteSplitRevenueNewItem(m_oUsePanelToSelectItemParentItem.getCheckItem().getSeatNo(), m_oUsePanelToSelectItemParentItem.getCheckItem().getSeq() - 1, oFuncCheckItem);
		// Ask quantity if default delete quantity is zero
		if (dDefaultDelQty.compareTo(BigDecimal.ZERO) == 0) {
			// If item has discount, must delete all of the quantity
			if (oFuncCheckItem.hasItemDiscount(false)) {
				FormConfirmBox oComfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
						AppGlobal.g_oLang.get()._("no"), this);
				oComfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
				oComfirmBox
						.setMessage(AppGlobal.g_oLang.get()._("must_delete_the_maximum_quantity_for_item_with_discount")
								+ ", " + AppGlobal.g_oLang.get()._("continue") + "?");
				oComfirmBox.show();
				
				if (!oComfirmBox.isOKClicked())
					return;
				
				dQty = new BigDecimal(oFuncCheckItem.getCheckItem().getQty().toPlainString());
			} else if (oFuncCheckItem.isSetMenu() || (oFuncCheckItem.getCheckItem().getChildCount() > 0 && oFuncCheckItem.isSplitRevenueParent())) {
				FormConfirmBox oComfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
						AppGlobal.g_oLang.get()._("no"), this);
				oComfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
				oComfirmBox.setMessage(AppGlobal.g_oLang.get()._("must_delete_the_maximum_quantity_for_set_menu_item")
						+ ", " + AppGlobal.g_oLang.get()._("continue") + "?");
				oComfirmBox.show();
				
				if (!oComfirmBox.isOKClicked())
					return;
				
				dQty = new BigDecimal(oFuncCheckItem.getCheckItem().getQty().toPlainString());
			} else {
				if (oFuncCheckItem.getCheckItem().getQty().compareTo(new BigDecimal("1.0")) > 0) {
					// Delete item
					// Ask quantity
					FormInputBox oFormInputBox = new FormInputBox(this);
					oFormInputBox.init();
					oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.NUMBER);
					oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("quantity"));
					oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("please_input_quantity_to_delete") + ":");
					oFormInputBox.setDefaultInputValue(
							StringLib.BigDecimalToStringWithoutZeroDecimal(oFuncCheckItem.getCheckItem().getQty())); // Set  default delete quantity
					oFormInputBox.show();
					
					String sTmp = oFormInputBox.getInputValue();
					if (sTmp == null)
						return;
					
					dQty = new BigDecimal(sTmp);
				}
				
				if (dQty.compareTo(BigDecimal.ZERO) == 0) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("this_function_does_not_allow_zero_item_quantity"));
					return;
				}
				
				if (dQty.compareTo(BigDecimal.ZERO) < 0) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("quantity_must_be_larger_than_zero"));
					return;
				}
				
				if (dQty.compareTo(oFuncCheckItem.getCheckItem().getQty()) > 0) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("only") + " "
							+ oFuncCheckItem.getCheckItem().getQty().stripTrailingZeros().toPlainString() + " "
							+ AppGlobal.g_oLang.get()._("items_are_ordered"));
					return;
				}
			}
		} else {
			dQty = dDefaultDelQty;
		}
		
		if (dOriQty.subtract(dQty).compareTo(BigDecimal.ZERO) < 0)
			dQty = dOriQty;
		
		// Get the seat no. and item index pair for basket delete later
		TreeMap<String, BigDecimal> oSeatNoLineNoPairs = new TreeMap<String, BigDecimal>(Collections.reverseOrder());
		// Parent item
		String sKey = StringLib.IntToStringWithLeadingZero(iSeatNo, 3) + "_"
				+ StringLib.IntToStringWithLeadingZero(iItemIndex, 5);
		oSeatNoLineNoPairs.put(sKey, dOriQty.subtract(dQty));
		// Child items
		for (FuncCheckItem oChildFuncCheckItem : oFuncCheckItem.getChildItemList()) {
			int iChildSeatNo = oChildFuncCheckItem.getCheckItem().getSeatNo();
			int iChildItemIndex = 0;
			for (FuncCheckItem oChildFuncCheckItem2 : m_oFuncCheck.getItemList(iChildSeatNo)) {
				if (oChildFuncCheckItem == oChildFuncCheckItem2) {
					BigDecimal dNewChildQty = oChildFuncCheckItem2.getCheckItem().getBaseQty()
							.multiply(dOriQty.subtract(dQty));
					sKey = StringLib.IntToStringWithLeadingZero(iChildSeatNo, 3) + "_"
							+ StringLib.IntToStringWithLeadingZero(iChildItemIndex, 5);
					oSeatNoLineNoPairs.put(sKey, dNewChildQty);
					
					break;
				}
				iChildItemIndex++;
			}
		}
		
		// Check if there is any old item
		if (oVoidReason == null && oFuncCheckItem.isOldItem()) {
			// Ask void code for first old item found
			oVoidReason = this.callVoidReasonLookup(AppGlobal.g_oLang.get()._("void_reason"),
					AppGlobal.g_oLang.get()._("please_select_the_void_reason_for") + " "
							+ oFuncCheckItem.getItemShortDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get()),
					PosVoidReason.TYPE_VOID_ITEM);
			if (oVoidReason == null)
				return;
			BigDecimal dOriRoundTotal = oFuncCheckItem.getCheckItem().getRoundTotal();
			bSuccess = m_oFuncCheck.deleItem(dQty, iSeatNo, iItemIndex, oVoidReason.getVdrsId(),
					oVoidReason.getName(AppGlobal.g_oCurrentLangIndex.get()), false);
			
			if(bSuccess) {
				List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);
				if (!oInterfaceConfigList.isEmpty()) {
					for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
						if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
							int iLangIndex = 1;
							if(oPosInterfaceConfig.getInterfaceConfig().has("general_setup") && oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").has("language_index"))
								iLangIndex = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").optJSONObject("language_index").optInt("value");
							
							FuncSurveillance oFuncSurveillance = new FuncSurveillance(oPosInterfaceConfig);
							HashMap<String, String> oSurveillanceEventInfo= new HashMap<String, String> ();
							oSurveillanceEventInfo.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_ITEM_VOID);
							oSurveillanceEventInfo.put("checkNum", m_oFuncCheck.getCheckPrefixNo());
							oSurveillanceEventInfo.put("itemCode", oFuncCheckItem.getCheckItem().getCode());
							oSurveillanceEventInfo.put("itemName", oFuncCheckItem.getCheckItem().getName(iLangIndex));
							oSurveillanceEventInfo.put("qty", dQty.negate().toString());
							oSurveillanceEventInfo.put("amount", dOriRoundTotal.negate().toPlainString());
							oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo, null);
							
							if (oFuncCheckItem.isSetMenu()) {
								for (FuncCheckItem oChildFuncCheckItem : oFuncCheckItem.getChildItemList()) {
									HashMap<String, String> oSurveillanceEventInfo1= new HashMap<String, String> ();
									oSurveillanceEventInfo1.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_ITEM_VOID);
									oSurveillanceEventInfo1.put("checkNum", m_oFuncCheck.getCheckPrefixNo());
									oSurveillanceEventInfo1.put("itemCode", oChildFuncCheckItem.getCheckItem().getCode());
									oSurveillanceEventInfo1.put("itemName", oChildFuncCheckItem.getCheckItem().getName(iLangIndex));
									oSurveillanceEventInfo1.put("qty", dQty.multiply(oChildFuncCheckItem.getCheckItem().getBaseQty()).negate().toPlainString());
									oSurveillanceEventInfo1.put("amount", oChildFuncCheckItem.getCheckItem().getPrice().multiply(dQty).negate().toPlainString()); ///????
									oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo1, null);
								}
							}
						}
					}
				}
			}
		} else {
			BigDecimal dQriRoundTotal = oFuncCheckItem.getCheckItem().getRoundTotal();
			bSuccess = m_oFuncCheck.deleItem(dQty, iSeatNo, iItemIndex, 0, null, false);
			if(bSuccess) {
				// surveillance event: ItemCancel
				List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);
				if (!oInterfaceConfigList.isEmpty()) {
					if (!oFuncCheckItem.isOldItem()) {
						for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
							if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
								String sCheckNum = (m_oFuncCheck.isOldCheck()) ? m_oFuncCheck.getCheckPrefixNo() : AppGlobal.g_oFuncStation.get().getNextCheckPrefixNumber(false);
								int iLangIndex = 1;
								if(oPosInterfaceConfig.getInterfaceConfig().has("general_setup") && oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").has("language_index"))
									iLangIndex = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").optJSONObject("language_index").optInt("value");
								
								FuncSurveillance oFuncSurveillance = new FuncSurveillance(oPosInterfaceConfig);
								HashMap<String, String> oSurveillanceEventInfo= new HashMap<String, String> ();
								oSurveillanceEventInfo.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_ITEM_CANCEL);
								oSurveillanceEventInfo.put("checkNum", sCheckNum);
								oSurveillanceEventInfo.put("itemCode", oFuncCheckItem.getCheckItem().getCode());
								oSurveillanceEventInfo.put("itemName", oFuncCheckItem.getCheckItem().getName(iLangIndex));
								oSurveillanceEventInfo.put("qty", dQty.negate().toPlainString());
								if(dQty.compareTo(oFuncCheckItem.getCheckItem().getQty()) == 0)
									oSurveillanceEventInfo.put("amount", dQriRoundTotal.negate().toPlainString());
								else
									oSurveillanceEventInfo.put("amount", dQriRoundTotal.subtract(oFuncCheckItem.getCheckItem().getRoundTotal()).negate().toPlainString());
								oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo, null);
								
								if (oFuncCheckItem.isSetMenu()) {
									for (FuncCheckItem oChildFuncCheckItem : oFuncCheckItem.getChildItemList()) {
										HashMap<String, String> oSurveillanceEventInfo1= new HashMap<String, String> ();
										oSurveillanceEventInfo1.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_ITEM_CANCEL);
										oSurveillanceEventInfo1.put("checkNum", sCheckNum);
										oSurveillanceEventInfo1.put("itemCode", oChildFuncCheckItem.getCheckItem().getCode());
										oSurveillanceEventInfo1.put("itemName", oChildFuncCheckItem.getCheckItem().getName(iLangIndex));
										oSurveillanceEventInfo1.put("qty", dQty.multiply(oChildFuncCheckItem.getCheckItem().getBaseQty()).negate().toPlainString());
										oSurveillanceEventInfo1.put("amount", oChildFuncCheckItem.getCheckItem().getPrice().multiply(dQty).negate().toPlainString()); ///????
										oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo1, null);
									}
								}
							}
						}
					}
				}
			}
		}
		
		if (!bSuccess) {
			// Prompt error
			showErrorDialogBox(m_oFuncCheck.getLastErrorMessage());
			return;
		}
		this.updateSeatPanelQty();
		
		// Change cover based on selected item group
		changeCoverByItem(oFuncCheckItem.getMenuItemId(), null, false);
		
		// Update check information
		calculateCheck();
		
		// update the ordering basket
		if (dQty.compareTo(dOriQty) == 0) {
			// Remove all child item and modifier from the basket
			for (Entry<String, BigDecimal> entry : oSeatNoLineNoPairs.entrySet()) {
				String split[] = entry.getKey().split("_");
				int iRemoveSeatNo = Integer.parseInt(split[0]);
				int iRemoveLineNo = Integer.parseInt(split[1]);
				m_oFrameOrderingBasket.removeAllChildItem(iRemoveSeatNo, iRemoveLineNo);
				m_oFrameOrderingBasket.removeAllModifier(iRemoveSeatNo, iRemoveLineNo);
				m_oFrameOrderingBasket.removeItem(iRemoveSeatNo, iRemoveLineNo);
			}
			
			if (iSeatNo > 0) {
				ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck
						.getItemList(iSeatNo);
				
				if (oFuncCheckItemList == null || oFuncCheckItemList.isEmpty()) {
					m_oFrameOrderingBasket.setSectionVisible(iSeatNo, false);
				}
			}
			
		} else {
			// Update basket
			for (Entry<String, BigDecimal> entry : oSeatNoLineNoPairs.entrySet()) {
				String split[] = entry.getKey().split("_");
				int iRemoveSeatNo = Integer.parseInt(split[0]);
				int iRemoveLineNo = Integer.parseInt(split[1]);
				oFuncCheckItem = m_oFuncCheck.getCheckItem(iRemoveSeatNo, iRemoveLineNo);
				
				this.updateBasketItemPrice(iRemoveSeatNo, iRemoveLineNo, oFuncCheckItem);
				this.updateBasketItemQty(iRemoveSeatNo, iRemoveLineNo, entry.getValue());
				// Update basket item info
				this.updateBasketItemInfo(iRemoveSeatNo, iRemoveLineNo);
			}
		}
		
		if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk)) {
			// Self order mode
			// Mix and match function
			mixAndMatchFunction();
		}
		
		if (m_oFuncCheck.isOldCheck())
			processKitchenMonitorQsrVoidItem(oFuncCheckItem, dQty);
		
		if(!m_sCurrentOrderingBasketMode.equals(FrameOrderingBasket.ORDERING_BASKET_MODE_SHOW_NORMAL))
			// Redraw consolidate items ordering basket
			redrawOrderingBasket(true, FrameOrderingBasket.ORDERING_BASKET_MODE_SHOW_CONSOLIDATE_ITEMS);
		
	}
	
	private void deleteSplitRevenueNewItem(int iSection, int iItemindex, FuncCheckItem oFuncCheckItem) {
		if(m_oUsePanelToSelectItemParentItem.getChildItemList().contains(oFuncCheckItem)) {
			//updateSplitRevenueParentPrice(false, oFuncCheckItem, null);
			overrideItemPrice(m_oUsePanelToSelectItemParentItem.getCheckItem().getSeatNo(), m_oUsePanelToSelectItemParentItem.getCheckItem().getSeq()-1, (m_oUsePanelToSelectItemParentItem.getCheckItem().getOriginalPrice().multiply(m_oUsePanelToSelectItemParentItem.getCheckItem().getQty()).add(oFuncCheckItem.getCheckItem().getOriginalPrice()).divide(m_oUsePanelToSelectItemParentItem.getCheckItem().getQty(), 10, BigDecimal.ROUND_HALF_UP)), false);
			
			int iRemoveChildIndex = 0;
			boolean bChildFound = false;
			for(FuncCheckItem oCurrentFuncCheckItem :m_oUsePanelToSelectItemParentItem.getChildItemList()) {
				if(oCurrentFuncCheckItem.equals(oFuncCheckItem)) {
					bChildFound = true;
					break;
				} else
					iRemoveChildIndex++;
			}
			if(bChildFound)
				m_oUsePanelToSelectItemParentItem.deleteChildItemFromList(iRemoveChildIndex);
			updateBasketItemPrice(iSection, iItemindex, m_oUsePanelToSelectItemParentItem);
		}
	}
	// Delete multiple item from current check party
	private void deleteMultipleItem(boolean bFirstStep, List<HashMap<String, Integer>> oSelectedItems) {
		// Ask delete new or old item (for the first step)
		if (bFirstStep) {
			boolean bOldItem = false;
			
			if (m_oFuncCheck.isOldCheck()) {
				if(!m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name())) {
					if (m_oFuncCheck.hasNewItem(true)) {
						ArrayList<String> oOptionList = new ArrayList<String>();
						oOptionList.add(AppGlobal.g_oLang.get()._("delete_new_items"));
						oOptionList.add(AppGlobal.g_oLang.get()._("delete_old_items"));
						
						FormSelectionBox oSelectionBox = new FormSelectionBox(this);
						oSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("delete_multiple_items"),
								oOptionList, false);
						oSelectionBox.show();
						if (oSelectionBox.isUserCancel())
							return;
						else {
							if (oSelectionBox.getResultList().get(0) == 1)
								bOldItem = true;
						}
					} else
						bOldItem = true;
				}
			}
			
			HashMap<String, String> oFuncParam = new HashMap<String, String>();
			if (bOldItem)
				oFuncParam.put("deleteItemType", "o");
			else
				oFuncParam.put("deleteItemType", "n");
			fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.delete_multiple_item.name()), "", -1, -1,
					false, oFuncParam);
			return;
		}
		
		// Process the selected item
		if (oSelectedItems.isEmpty()) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("no_selected_items"));
			return;
		}
		
		// Re-order the selected items in reverse order
		ArrayList<String> oListToSort = new ArrayList<String>();
		ArrayList<String> oBasketListToSort = new ArrayList<String>();
		List<FuncCheckItem> oDeletedFuncCheckItemList = new ArrayList<FuncCheckItem>();
		for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
			FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(oSelectedItem.get("sectionId"),
					oSelectedItem.get("itemIndex"));
			String sSortString = StringLib.IntToStringWithLeadingZero(oSelectedItem.get("sectionId"), 3) + "_"
					+ StringLib.IntToStringWithLeadingZero(oSelectedItem.get("itemIndex"), 6);
			oListToSort.add(sSortString);
			oBasketListToSort.add(sSortString);
			
			if(m_oFuncCheck.isSplitRevenueMode() && m_oUsePanelToSelectItemParentItem != null)
				deleteSplitRevenueNewItem(m_oUsePanelToSelectItemParentItem.getCheckItem().getSeatNo(), m_oUsePanelToSelectItemParentItem.getCheckItem().getSeq() - 1, oFuncCheckItem);
			oDeletedFuncCheckItemList.add(oFuncCheckItem);
			
			for (FuncCheckItem oChildFuncCheckItem : oFuncCheckItem.getChildItemList()) {
				int iChildSectionId = oFuncCheckItem.getCheckItem().getSeatNo();
				int iChildItemIndex = 0;
				for (FuncCheckItem oChildFuncCheckItem2 : m_oFuncCheck.getItemList(iChildSectionId)) {
					if (oChildFuncCheckItem == oChildFuncCheckItem2) {
						String sChildSortString = StringLib.IntToStringWithLeadingZero(iChildSectionId, 3) + "_"
								+ StringLib.IntToStringWithLeadingZero(iChildItemIndex, 6);
						oBasketListToSort.add(sChildSortString);
						break;
					}
					iChildItemIndex++;
				}
			}
		}
		Collections.sort(oListToSort);
		Collections.sort(oBasketListToSort);
		
		TreeMap<String, String> oReverseList = new TreeMap<String, String>(Collections.reverseOrder());
		TreeMap<String, String> oReverseBasketList = new TreeMap<String, String>(Collections.reverseOrder());
		for (String sKey : oListToSort)
			oReverseList.put(sKey, sKey);
		for (String sKey : oBasketListToSort)
			oReverseBasketList.put(sKey, sKey);
		
		oSelectedItems.clear();
		
		for (Entry<String, String> entry : oReverseBasketList.entrySet()) {
			String sSplit[] = entry.getKey().split("_");
			HashMap<String, Integer> oSelectItem = new HashMap<String, Integer>();
			oSelectItem.put("sectionId", Integer.parseInt(sSplit[0]));
			oSelectItem.put("itemIndex", Integer.parseInt(sSplit[1]));
			if (m_oFuncCheck.getCheckItem(Integer.parseInt(sSplit[0]), Integer.parseInt(sSplit[1]))
					.isSetMenuItem() == true)
				oSelectItem.put("setMenuItem", 1);
			else
				oSelectItem.put("setMenuItem", 0);
			oSelectedItems.add(oSelectItem);
		}
		
		// Ask void code if delete old items
		PosVoidReason oVoidReason = null;
		if (m_iBasketSelectType == FrameOrderingBasket.SELECT_TYPE_OLD_ITEM) {
			oVoidReason = callVoidReasonLookup(AppGlobal.g_oLang.get()._("void_reason"),
					AppGlobal.g_oLang.get()._("please_select_the_void_reason_for"), PosVoidReason.TYPE_VOID_ITEM);
			if (oVoidReason == null)
				return;
		}
		
		if (oVoidReason != null) {
			if (!m_oFuncCheck.deleMultipleItems(oSelectedItems, oVoidReason.getVdrsId(),
					oVoidReason.getName(AppGlobal.g_oCurrentLangIndex.get())))
				return;
		} else {
			if (!m_oFuncCheck.deleMultipleItems(oSelectedItems, 0, null))
				return;
		}
		
		// Update the ordering basket
		for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
			m_oFrameOrderingBasket.removeAllChildItem(oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
			m_oFrameOrderingBasket.removeAllModifier(oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
			m_oFrameOrderingBasket.removeItem(oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
		}
		this.updateSeatPanelQty();
		
		// Change cover based on selected item group
		changeCoverByItem(0, null, false);
		
		// calculate check total and update check extend bar
		calculateCheck();
		
		if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk)) {
			// Self order mode
			// Mix and match function
			mixAndMatchFunction();
		}
		
		if (m_oFuncCheck.isOldCheck()) {
			for (FuncCheckItem oDeletedFuncCheckItem : oDeletedFuncCheckItemList) {
				if (oDeletedFuncCheckItem.isSetMenuItem())
					continue;
				
				BigDecimal dQty = oDeletedFuncCheckItem.getCheckItem().getQty();
				processKitchenMonitorQsrVoidItem(oDeletedFuncCheckItem, dQty);
			}
		}
		
		if(!m_sCurrentOrderingBasketMode.equals(FrameOrderingBasket.ORDERING_BASKET_MODE_SHOW_NORMAL))
			// Redraw consolidate items ordering basket
			redrawOrderingBasket(true, FrameOrderingBasket.ORDERING_BASKET_MODE_SHOW_CONSOLIDATE_ITEMS);
		return;
	}
	
	// Change item seat no.
	private FuncCheckItem moveItemToOtherSeat(int iOriSeatNo, FuncCheckItem oOriFuncCheckItem, int iNewSeatNo,
	                                          BigDecimal dChgQty) {
		int iTargetItemIndex = -1;
		
		// Add item to new seat
		int iOriItemIndex = 0;
		boolean bFound = false;
		for (FuncCheckItem oFuncCheckItem : m_oFuncCheck.getItemList(iOriSeatNo)) {
			if (oFuncCheckItem == oOriFuncCheckItem) {
				bFound = true;
				break;
			}
			iOriItemIndex++;
		}
		if (bFound == false)
			return null;
		
		if (dChgQty.compareTo(BigDecimal.ZERO) == 0) {
			// Move all quantity
			dChgQty = oOriFuncCheckItem.getCheckItem().getQty();
		}
		
		BigDecimal dNewQty = oOriFuncCheckItem.getCheckItem().getQty().subtract(dChgQty);
		iTargetItemIndex = m_oFuncCheck.moveItemToItemList(iOriSeatNo, iNewSeatNo, iOriItemIndex, dChgQty);
		if (iTargetItemIndex == -1)
			return null;
		
		int iCurrentItemCount = m_oFuncCheck.getItemListCount(iNewSeatNo) - 1;
		FuncCheckItem oNewSeatFuncCheckItem = m_oFuncCheck.getItemList(iNewSeatNo).get(iCurrentItemCount);
		PosCheckItem oNewSeatPosCheckItem = oNewSeatFuncCheckItem.getCheckItem();
		
		boolean bIsChildItem = false;
		if (oNewSeatFuncCheckItem.isSetMenuItem())
			bIsChildItem = true;
		
		String[] sNameArray = new String[AppGlobal.LANGUAGE_COUNT];
		for (int i = 0; i < AppGlobal.LANGUAGE_COUNT; i++) {
			sNameArray[i] = oNewSeatFuncCheckItem.getBilingualItemDescriptionByIndex(i + 1);
		}
		
		m_oFrameOrderingBasket.addItem(oNewSeatPosCheckItem.getSeatNo(), oNewSeatPosCheckItem.getSeq() - 1,
				oNewSeatPosCheckItem.getQty(), BigDecimal.ZERO, sNameArray,
				AppGlobal.g_oFuncOutlet.get().getItemRoundDecimal(), BigDecimal.ZERO, oNewSeatFuncCheckItem.isOldItem(),
				bIsChildItem, 0, false, oNewSeatPosCheckItem.getSeq());
		updateBasketItemPrice(oNewSeatPosCheckItem.getSeatNo(), oNewSeatPosCheckItem.getSeq() - 1,
				oNewSeatFuncCheckItem);
		
		this.updateBasketItemInfo(iNewSeatNo, iCurrentItemCount);
		
		// Move the scroll view to the last insert node
		if (!m_oFrameOrderingBasket.isSectionVisible(iNewSeatNo)) {
			if ((m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food)
					|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk)
					|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab)) && iNewSeatNo == 0) {
				// Not show "share" section title for fast food mode
			} else {
				if(!m_oFrameOrderingBasket.isDisplaySeatNumberSection())
					m_oFrameOrderingBasket.setSectionVisible(iNewSeatNo, false);
				else
					m_oFrameOrderingBasket.setSectionVisible(iNewSeatNo, true);
			}
		}
		else{
			if(!m_oFrameOrderingBasket.isDisplaySeatNumberSection())
				m_oFrameOrderingBasket.setSectionVisible(iNewSeatNo, false);
		}
		m_oFrameSeatPanel.setSeatLabelColor(iNewSeatNo);
		m_oFrameOrderingBasket.setSelectedSection(iNewSeatNo);
		m_oFrameOrderingBasket.moveScrollToSectionBottom(iNewSeatNo);
		
		// Remove item from old seat
		if (dNewQty.compareTo(BigDecimal.ZERO) == 0) { // move all quantity to
			// new seat
			m_oFrameOrderingBasket.removeAllChildItem(iOriSeatNo, iOriItemIndex);
			m_oFrameOrderingBasket.removeAllModifier(iOriSeatNo, iOriItemIndex);
			m_oFrameOrderingBasket.removeItem(iOriSeatNo, iOriItemIndex);
			
			if (iOriSeatNo > 0) {
				ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck
						.getItemList(iOriSeatNo);
				
				if (oFuncCheckItemList == null || oFuncCheckItemList.isEmpty()) {
					m_oFrameOrderingBasket.setSectionVisible(iOriSeatNo, false);
				}
			}
		} else {
			// Update basket
			this.updateBasketItemPrice(iOriSeatNo, iOriItemIndex, oOriFuncCheckItem);
			this.updateBasketItemQty(iOriSeatNo, iOriItemIndex, dNewQty);
		}
		
		return m_oFuncCheck.getItemList(iNewSeatNo).get(iTargetItemIndex);
	}
	
	// Change item course no.
	private boolean changeItemCourse(int iSeatNo, FuncCheckItem oTargetFuncCheckItem, int iNewCourseId) {
		
		int iItemIndex = 0;
		boolean bFound = false;
		for (FuncCheckItem oFuncCheckItem : m_oFuncCheck.getItemList(iSeatNo)) {
			if (oFuncCheckItem == oTargetFuncCheckItem) {
				bFound = true;
				break;
			}
			iItemIndex++;
		}
		if (bFound == false)
			return false;
		
		return m_oFuncCheck.changeItemCourse(iSeatNo, iItemIndex, iNewCourseId);
	}
	
	// Check last item exist in current selected seat
	private boolean checkLastItemExist() {
		int iSelectedSeatNo = m_oFrameOrderingBasket.getSelectedSectionId();
		List<FuncCheckItem> oSelectedSectionList = m_oFuncCheck.getItemList(iSelectedSeatNo);
		
		if (oSelectedSectionList.isEmpty()) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("no_item_ordered"));
			return false;
		}
		
		return true;
	}
	
	// Delete Modifier
	private void deleteModifier(BigDecimal dQty, int iSeatNo, int iItemIndex, int iModifierIndex) {
		int iVoidCodeId = 0;
		
		FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iSeatNo, iItemIndex);
		if (iVoidCodeId == 0 && oFuncCheckItem.getCheckItem().getItemId() > 0) {
			// Ask void code for first old item found
			// TODO
			iVoidCodeId = 1;
		}
		// Delete modifier from FuncCheckItem
		m_oFuncCheck.deleModifier(dQty, iSeatNo, iItemIndex, iModifierIndex, iVoidCodeId);
		
		// Remove the modifier from basket
		m_oFrameOrderingBasket.removeModifier(iSeatNo, iItemIndex, iModifierIndex);
	}
	
	// Change item quantity
	private boolean changeItemQuantity(int iSeatNo, int iItemIndex, BigDecimal dDefaultAddQty, boolean bNumpadClick) {
		String sErrMsg = "";
		String sNewQty;
		
		if(m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name())) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_perform_this_function_at_this_mode"));
			return false;
		}
		// Get the selected item in ordering basket
		FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iSeatNo, iItemIndex);
		FuncCheckItem oFuncCheckItemForSurvPost = oFuncCheckItem;  // must keep, otherwise missing post of setmenu items
		FuncCheckItem oParentFuncCheckItem = oFuncCheckItem;
		BigDecimal dOriRoundTotal = oParentFuncCheckItem.getCheckItem().getRoundTotal();
		
		if (oFuncCheckItem == null) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("no_item_ordered"));
			return false;
		}
		
		// Cannot change item quantity if it is an old item and set to now allow
		// to change
		if (!AppGlobal.g_oFuncStation.get().isAllowChangeItemQuantityOnOldItem() && oFuncCheckItem.isOldItem()) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_change_item_quantity_on_old_item"));
			return false;
		}
		
		// Cannot change old item quantity if support mix and match
		if (AppGlobal.g_oFuncMixAndMatch.get().isSupportMixAndMatch() && oFuncCheckItem.isOldItem()) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_change_old_item_quantity_if_support_mix_and_match"));
			return false;
		}
		
		if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
				&& AppGlobal.g_oFuncMixAndMatch.get().isSupportMixAndMatch() && !oFuncCheckItem.isOldItem()) {
			return false;
		}
		
		// Check if the item is set menu item
		if (oFuncCheckItem.isSetMenuItem()) {
			if (oFuncCheckItem.isSumUpChildItemToParent()) {
				// If basicCalculateMethod is sum up to parent, cannot delete
				// set menu child item
				showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_change_set_menu_item_quantity"));
				return false;
			} else {
				oFuncCheckItem = oFuncCheckItem.getParentFuncCheckItem();
				iSeatNo = oFuncCheckItem.getCheckItem().getSeatNo();
				iItemIndex = oFuncCheckItem.getCheckItem().getSeq() - 1;
			}
		}
		
		// Check if the item is coupon item
		if (oFuncCheckItem.isCouponItem() || oFuncCheckItem.isSVCCouponRedeemItem()
				|| oFuncCheckItem.isMembershipVoucherItem()) {
			// cannot change quantity for coupon item
			showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_change_coupon_item_quantity"));
			return false;
		}
		
		// Check if the item is benefit item
		if (oFuncCheckItem.isLoyaltyBenefitItem() && dDefaultAddQty.compareTo(new BigDecimal("1.0")) != 0) {
			// cannot change quantity for benefit item
			showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_change_benefit_item_quantity"));
			return false;
		}
		
		// Check if the item is SVC card item
		if (oFuncCheckItem.isLoyaltyItem()) {
			// cannot change quantity for benefit item
			showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_change_loyalty_item_quantity"));
			return false;
		}
		
		// Check if the item has discount
		if (oFuncCheckItem.hasItemDiscount(false)) {
			// cannot change quantity if discount applied
			showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_change_the_quantity_for_the_item_with_discount"));
			return false;
		}
		
		if (oFuncCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_CARRY_FORWARD, PosCheckExtraInfo.VARIABLE_ORIGINAL_BUSINESS_DAY) != null) {
			showAttentionDialogBox(AppGlobal.g_oLang.get()._("cannot_change_items_carried_forward_from_previous_business_date"));
			return false;
		}
		
		// Ask quantity if default add quantity is zero
		if (dDefaultAddQty.compareTo(BigDecimal.ZERO) == 0) {
			while (true) {
				// Ask new quantity
				FormInputBox oFormInputBox = new FormInputBox(this);
				oFormInputBox.init();
				oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DECIMAL);
				oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("quantity"));
				oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("please_input_the_new_quantity") + ":");
				if (oFuncCheckItem.isOldItem())
					oFormInputBox.setEnterBlockUI(true);
				oFormInputBox.show();
				
				sNewQty = oFormInputBox.getInputValue();
				if (sNewQty == null)
					return false;
				
				try {
					Double.valueOf(sNewQty);
				} catch (NumberFormatException e) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("invalid_input"));
					continue;
				}
				
				if ((new BigDecimal(sNewQty)).compareTo(BigDecimal.ZERO) <= 0) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("quantity_must_be_larger_than_zero"));
					continue;
				}
				
				break;
			}
		} else if (!bNumpadClick && dDefaultAddQty.compareTo(new BigDecimal("1.0")) == 0) {
			sNewQty = (dDefaultAddQty.add(oFuncCheckItem.getCheckItem().getQty())).toPlainString();
		} else
			sNewQty = dDefaultAddQty.toPlainString();
		
		// If new quantity > original quantity and item is soldout, not allow to
		// change quantity
		if ((new BigDecimal(sNewQty)).compareTo(oFuncCheckItem.getCheckItem().getQty()) > 0
				&& m_oFuncCheck.isSoldout(oFuncCheckItem.getMenuItemId())) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_change_the_quantity_for_the_item") + ": "
					+ AppGlobal.g_oLang.get()._("item_soldout"));
			return false;
		}
		
		if (oFuncCheckItem.isSetMenu()) {
			for (FuncCheckItem oChildFuncCheckItem : oFuncCheckItem.getChildItemList()) {
				if (((new BigDecimal(sNewQty)).multiply(oChildFuncCheckItem.getCheckItem().getBaseQty()))
						.compareTo(oChildFuncCheckItem.getCheckItem().getQty()) > 0
						&& m_oFuncCheck.isSoldout(oChildFuncCheckItem.getMenuItemId())) {
					sErrMsg = AppGlobal.g_oLang.get()._("cannot_change_the_quantity_for_the_item") + ": "
							+ AppGlobal.g_oLang.get()._("item_soldout");
					sErrMsg += System.lineSeparator() + AppGlobal.g_oLang.get()._("child_item") + ": "
							+ oChildFuncCheckItem.getItemDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get());
					showErrorDialogBox(sErrMsg);
					return false;
				}
			}
		}
		
		// Get the seat no. and item index pair for basket delete later
		TreeMap<String, Integer> oSeatNoLineNoPairs = new TreeMap<String, Integer>();
		TreeMap<String, Integer> oChildSeatLineNoPairs = new TreeMap<String, Integer>();
		// Parent item
		String sKey = StringLib.IntToStringWithLeadingZero(iSeatNo, 3) + "_"
				+ StringLib.IntToStringWithLeadingZero(iItemIndex, 5);
		oSeatNoLineNoPairs.put(sKey, 0);
		// Child item
		for (FuncCheckItem oChildFuncCheckItem : oFuncCheckItem.getChildItemList()) {
			int iChildSeatNo = oChildFuncCheckItem.getCheckItem().getSeatNo();
			int iChildItemIndex = 0;
			for (FuncCheckItem oChildFuncCheckItem2 : m_oFuncCheck.getItemList(iChildSeatNo)) {
				if (oChildFuncCheckItem == oChildFuncCheckItem2) {
					sKey = StringLib.IntToStringWithLeadingZero(iChildSeatNo, 3) + "_"
							+ StringLib.IntToStringWithLeadingZero(iChildItemIndex, 5);
					oSeatNoLineNoPairs.put(sKey, 0);
					oChildSeatLineNoPairs.put(sKey, 0);
					
					break;
				}
				iChildItemIndex++;
			}
		}
		
		boolean bReachZeroCntNotAllow = false;
		if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
				|| AppGlobal.g_oFuncStation.get().getNotAllowToOrderWhenZeroStock())
			bReachZeroCntNotAllow = true;
		
		BigDecimal dItemChange = oFuncCheckItem.getCheckItem().getQty().subtract(new BigDecimal(sNewQty));
		if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)){
			boolean bAllowOrder = this.checkOrderItemControlLimit(oFuncCheckItem.getCheckItem().getItemId(), new BigDecimal(sNewQty).subtract(oFuncCheckItem.getCheckItem().getQty()));
			if(!bAllowOrder){
				showErrorDialogBox(AppGlobal.g_oLang.get()._("item_quantity_limit_per_check_exceeded")+ ":" + System.lineSeparator() + oFuncCheckItem.getCheckItem().getName(AppGlobal.g_oCurrentLangIndex.get()));
				return false;
			}
		}
		
		if (new BigDecimal(sNewQty).compareTo(oFuncCheckItem.getCheckItem().getQty()) < 0) {
			// Ask void code for deduct qty of old item
			int iVoidReasonId = 0;
			String sVoidReason = null;
			if(oFuncCheckItem.isOldItem()){
				PosVoidReason oVoidReason = null;
				oVoidReason = callVoidReasonLookup(AppGlobal.g_oLang.get()._("void_reason"),
						AppGlobal.g_oLang.get()._("please_select_the_void_reason_for") + " "
								+ oFuncCheckItem.getItemShortDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get()),
						PosVoidReason.TYPE_VOID_ITEM);
				
				if (oVoidReason == null)
					return false;
				
				iVoidReasonId = oVoidReason.getVdrsId();
				sVoidReason = oVoidReason.getName(AppGlobal.g_oCurrentLangIndex.get());
			}
			
			if (!m_oFuncCheck.deleItem(dItemChange, iSeatNo, iItemIndex, iVoidReasonId, sVoidReason, true)) {
				// Prompt error
				sErrMsg = m_oFuncCheck.getLastErrorMessage();
				showErrorDialogBox(sErrMsg);
				return false;
			} else {
				if (m_oFuncCheck.isOldCheck())
					processKitchenMonitorQsrVoidItem(oFuncCheckItem, dItemChange);
			}
		} else {
			BigDecimal dNewAddedQty = (new BigDecimal(sNewQty)).subtract(oFuncCheckItem.getCheckItem().getQty());
			if (m_oFuncCheck.changeItemQty(bReachZeroCntNotAllow, iSeatNo, iItemIndex, m_oFuncCheck.getTableNo(),
					m_oFuncCheck.getTableExtension(), new BigDecimal(sNewQty), true) == false) {
				// Error
				sErrMsg = oFuncCheckItem.getLastErrorMessage();
				if (!sErrMsg.isEmpty() && !m_oFrameSeatPanel.getPanelType().equals(FrameSeatPanel.TYPE_NUMPAD)) {
					showErrorDialogBox(sErrMsg);
				} else {
					sErrMsg = m_oFuncCheck.getLastErrorMessage();
					if (!sErrMsg.isEmpty()) {
						showErrorDialogBox(sErrMsg);
					}
				}
				return false;
			} else
				processKitchenMonitorQsrAddItem(oFuncCheckItem, dNewAddedQty, null, false, null);
		}
		
		if (oFuncCheckItem.getCheckItem().getQty().compareTo(BigDecimal.ZERO) == 0) {
			// Remove all item and modifier from the basket
			int iFirstLineNo = -1;
			for (Entry<String, Integer> entry : oSeatNoLineNoPairs.entrySet()) {
				String split[] = entry.getKey().split("_");
				int iRemoveSeatNo = Integer.parseInt(split[0]);
				if (iFirstLineNo == -1)
					iFirstLineNo = Integer.parseInt(split[1]);
				m_oFrameOrderingBasket.removeAllChildItem(iRemoveSeatNo, iFirstLineNo);
				m_oFrameOrderingBasket.removeAllModifier(iRemoveSeatNo, iFirstLineNo);
				m_oFrameOrderingBasket.removeItem(iRemoveSeatNo, iFirstLineNo);
				m_oFuncCheck.removeItemFromList(iRemoveSeatNo, iFirstLineNo);
			}
			// re-sequence the item
			m_oFuncCheck.updateCheckItemSequence(true, true, 0);
			if (iSeatNo > 0) {
				ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck
						.getItemList(iSeatNo);
				
				if (oFuncCheckItemList == null || oFuncCheckItemList.isEmpty()) {
					m_oFrameOrderingBasket.setSectionVisible(iSeatNo, false);
				}
			}
		} else {
			// Update basket
			for (Entry<String, Integer> entry : oSeatNoLineNoPairs.entrySet()) {
				String split[] = entry.getKey().split("_");
				int iRemoveSeatNo = Integer.parseInt(split[0]);
				int iRemoveLineNo = Integer.parseInt(split[1]);
				oFuncCheckItem = m_oFuncCheck.getCheckItem(iRemoveSeatNo, iRemoveLineNo);
				
				this.updateBasketItemPrice(iRemoveSeatNo, iRemoveLineNo, oFuncCheckItem);
				this.updateBasketItemQty(iRemoveSeatNo, iRemoveLineNo, oFuncCheckItem.getCheckItem().getQty());
				// Update basket info
				this.updateBasketItemInfo(iRemoveSeatNo, iRemoveLineNo);
			}
		}

/**ItemAdd, ItemCancel & ItemVoid [changeItemQuantity] */
/** To get the language setting correctly, "iLangIndex" is created using if-clause, preset value = 1
 *  Change the qty & amount calculation method: from total to value difference
 *  New add "ItemCancel" & "ItemVoid" when changing qty
 *  Fix the SetMenu item handling */
		
		// surveillance event: ItemAdd, ItemCancel & ItemVoid
		List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);
		if (!oInterfaceConfigList.isEmpty()) {
			for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
				if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
					FuncSurveillance oFuncSurveillance = new FuncSurveillance(oPosInterfaceConfig);
					
					String sEventType = "";
					if(dItemChange.compareTo(BigDecimal.ZERO) < 0)
						sEventType = FuncSurveillance.SURVEILLANCE_TYPE_ITEMADD;
					else
						sEventType = (oFuncCheckItemForSurvPost.isOldItem() ? FuncSurveillance.SURVEILLANCE_TYPE_ITEM_VOID : FuncSurveillance.SURVEILLANCE_TYPE_ITEM_CANCEL);
					String sCheckNum = (m_oFuncCheck.isOldCheck()) ? m_oFuncCheck.getCheckPrefixNo() : AppGlobal.g_oFuncStation.get().getNextCheckPrefixNumber(false);
					BigDecimal dNewRoundTotal = oFuncCheckItemForSurvPost.getCheckItem().getRoundTotal();
					BigDecimal dQtyChange = dItemChange;
					BigDecimal dAmtChange = dNewRoundTotal.subtract(dOriRoundTotal);
					int iLangIndex = 1;
					if(oPosInterfaceConfig.getInterfaceConfig().has("general_setup") && oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").has("language_index"))
						iLangIndex = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").optJSONObject("language_index").optInt("value");
					
					HashMap<String, String> oSurveillanceEventInfo= new HashMap<String, String> ();
					oSurveillanceEventInfo.put("eventType", sEventType);
					oSurveillanceEventInfo.put("checkNum", sCheckNum);
					oSurveillanceEventInfo.put("itemCode", oFuncCheckItemForSurvPost.getCheckItem().getCode());
					oSurveillanceEventInfo.put("itemName", oFuncCheckItemForSurvPost.getCheckItem().getName(iLangIndex));
					oSurveillanceEventInfo.put("qty", dQtyChange.negate().toPlainString());
					oSurveillanceEventInfo.put("amount", dAmtChange.toPlainString());
					oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo, null);
					
					if (oFuncCheckItemForSurvPost.isSetMenu()) {
						for (FuncCheckItem oChildFuncCheckItem : oFuncCheckItemForSurvPost.getChildItemList()) {
							HashMap<String, String> oSurveillanceEventInfo1= new HashMap<String, String> ();
							oSurveillanceEventInfo1.put("eventType", sEventType);
							oSurveillanceEventInfo1.put("checkNum", sCheckNum);
							oSurveillanceEventInfo1.put("itemCode", oChildFuncCheckItem.getCheckItem().getCode());
							oSurveillanceEventInfo1.put("itemName", oChildFuncCheckItem.getCheckItem().getName(iLangIndex));
							oSurveillanceEventInfo1.put("qty", oChildFuncCheckItem.getCheckItem().getBaseQty().multiply(dQtyChange).negate().toPlainString());
							oSurveillanceEventInfo1.put("amount", oChildFuncCheckItem.getCheckItem().getBaseQty().multiply(dQtyChange).multiply(oChildFuncCheckItem.getCheckItem().getPrice()).toPlainString());
							oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo1, null);
						}
					}
				}
			}
		}
		
		this.updateSeatPanelQty();
		
		// Change cover based on selected item group
		changeCoverByItem(oFuncCheckItem.getMenuItemId(), null, false);
		
		this.calculateCheck();
		return true;
	}
	
	// Change item receive quantity
	private void changeItemReceiverQuantity(int iSeatNo, int iItemIndex, BigDecimal dReceiveQty) {
		String sNewQty;
		
		// Get the selected item in ordering basket
		FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iSeatNo, iItemIndex);
		
		if (oFuncCheckItem == null) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("no_item_ordered"));
			return;
		}
		
		// Can't change the quantity if item is set menu
		if (oFuncCheckItem.isSetMenu()) {
			// Error
			showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_change_set_menu_quantity"));
			return;
		}
		
		// Check if the item is set menu item
		if (oFuncCheckItem.isSetMenuItem()) {
			// Cannot delete set menu child item
			showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_change_set_menu_item_quantity"));
			return;
		}
		
		// Ask quantity if default add quantity is zero
		if (dReceiveQty.compareTo(BigDecimal.ZERO) == 0) {
			while (true) {
				// Ask new quantity
				FormInputBox oFormInputBox = new FormInputBox(this);
				oFormInputBox.init();
				oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DECIMAL);
				oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("quantity"));
				oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("please_input_the_new_quantity") + ":");
				if (oFuncCheckItem.isOldItem())
					oFormInputBox.setEnterBlockUI(true);
				oFormInputBox.show();
				
				sNewQty = oFormInputBox.getInputValue();
				if (sNewQty == null)
					return;
				
				try {
					Double.valueOf(sNewQty);
				} catch (NumberFormatException e) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("invalid_input"));
					continue;
				}
				
				break;
			}
		} else {
			sNewQty = (dReceiveQty.add(oFuncCheckItem.getCheckItem().getQty())).toPlainString();
		}
		
		if (m_oFuncCheck.changeItemReceiveQty(iSeatNo, iItemIndex, m_oFuncCheck.getTableNo(),
				m_oFuncCheck.getTableExtension(), new BigDecimal(sNewQty)) == false) {
			
			// Error
			showErrorDialogBox(oFuncCheckItem.getLastErrorMessage());
			return;
		}
		
		// Update basket
		this.updateBasketItemReceiveQty(iSeatNo, iItemIndex, new BigDecimal(sNewQty));
	}
	
	// Quit check
	private void quitCheck(boolean bForceQuit) {
		if(m_oFuncCheck == null)
			return;
		
		// Add log to action log list
		AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.cancel.name(), PosActionLog.ACTION_RESULT_SUCCESS,
				m_oFuncCheck.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(),
				AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
				AppGlobal.g_oFuncStation.get().getStationId(), m_oFuncCheck.getCheckId(), "", "", "", "", "");
		// handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
		// Not allow quit check if CRM item voucher is attached
		if (!m_oFuncCheck.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE,
				PosCheckExtraInfo.VARIABLE_NRIC_NUMBER).isEmpty() && m_oFuncCheck.hasNewItem(false)) {
			for (FuncCheckParty oFuncCheckParty : m_oFuncCheck.getCheckPartyList()) {
				for (List<FuncCheckItem> oItemListForSingleSeat : oFuncCheckParty.getWholeItemList()) {
					for (FuncCheckItem oCheckItem : oItemListForSingleSeat) {
						if (oCheckItem.isOldItem())
							continue;
						List<PosCheckDiscount> oCurrentDiscountList = oCheckItem.getItemDiscountList();
						for (PosCheckDiscount oPosCheckDiscount : oCurrentDiscountList) {
							PosCheckExtraInfo oExtraInfo = oPosCheckDiscount.getExtraInfoFromList(
									PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE,
									PosCheckExtraInfo.VARIABLE_VOUCHER_NUMBER, 0);
							if (oExtraInfo != null && oExtraInfo.getValue() != null) {
								this.showErrorDialogBox(AppGlobal.g_oLang.get()._("member_is_attached"));
								return;
							}
						}
					}
				}
			}
		}
		
		// Not allow quit check if payment interface card has authorized before
		if(!m_oFuncCheck.isOldCheck() && m_oFuncCheck.hasNewPaymentGatewayTransactions()){
			this.showErrorDialogBox(AppGlobal.g_oLang.get()._("has_card_authorization_before"));
			return;
		}
		
		// Roll back split revenue new added item
		if(m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name())) {
			m_oFrameStationInfoBarCover.setVisible(false);
			if(m_oUsePanelToSelectItemParentItem != null) {
				List<FuncCheckItem> oCheckItemRemoveList = new ArrayList <FuncCheckItem> ();
				for(FuncCheckItem oFuncCheckItem : m_oUsePanelToSelectItemParentItem.getChildItemList()) {
					if(!oFuncCheckItem.isOldItem())
						if(m_oUsePanelToSelectItemParentItem.isSplitRevenueParent())
							if(m_oUsePanelToSelectItemParentItem != null && m_oUsePanelToSelectItemParentItem.getChildItemList().contains(oFuncCheckItem))
								oCheckItemRemoveList.add(oFuncCheckItem);
				}
				for(FuncCheckItem oFuncCheckItem : oCheckItemRemoveList)
					deleteSplitRevenueNewItem(m_oUsePanelToSelectItemParentItem.getCheckItem().getSeatNo(), m_oUsePanelToSelectItemParentItem.getCheckItem().getSeq() - 1, oFuncCheckItem);
				
				if(m_oUsePanelToSelectItemParentItem.getCheckItem().getChildCount() == 0) {
					m_oUsePanelToSelectItemParentItem.removeExtraInfoFromList(PosCheckExtraInfo.BY_ITEM, PosCheckExtraInfo.SECTION_ITEM_TYPE, PosCheckExtraInfo.VARIABLE_SPLIT_REVENUE_ITEM);
					m_oUsePanelToSelectItemParentItem.resetBasicCalculateMethod();
				}
				oCheckItemRemoveList.clear();
				m_oUsePanelToSelectItemParentItem.setModified(true);
			}
		}
		
		if(m_oFuncCheck.isOldCheck()) {
			// Change cover based on selected item group
			if(getItemCountForTrackCover(0, m_oFuncCheck, true, false) > 0)
				changeCoverByItem(0, null, true);
			
			m_oFuncCheck.removeAllNewItemFormItemList(true, true);
			
			// Handle item over time table list (update table cooking overtime)
			m_oFuncCheck.handleCheckForOverCookingTimeTableList(null, null, false);
			
			// Mix and match function
			mixAndMatchFunction();
			
			splitRevenueAddActionLogAndRemoveExtraInfo();
			
			this.calculateCheck();
		} else {
			m_oFuncCheck.updateItemCountForQuitNewCheck();
			m_oFuncCheck.updateCouponItemStatusForQuitNewCheck();
			
			// Update target advance order's retrieved to false
			if (m_oFuncCheck.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_ADVANCE_ORDER,
					PosCheckExtraInfo.VARIABLE_ADVANCE_ORDER_CHKS_ID, 0)) {
				String sTargetAdvanceOrderId = m_oFuncCheck.getCheckExtraInfoValueListBySectionVariable(
						PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_ADVANCE_ORDER_CHKS_ID);
				if (!sTargetAdvanceOrderId.isEmpty()) {
					PosCheckExtraInfo oCheckExtraInfo = this.constructCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_RETRIEVED, "false");
					oCheckExtraInfo.setCheckId(sTargetAdvanceOrderId);
					oCheckExtraInfo.updateCheckExtraInfoByOtherIdSectionVariable();
				}
			}
			boolean bResult = m_oFuncCheck.closeLoyaltyTransaction();
			if (!bResult && !m_oFuncCheck.getLastErrorMessage().isEmpty())
				showErrorDialogBox(m_oFuncCheck.getLastErrorMessage());
		}
		
		// Remove un-necessary check extra info
		if (m_oFuncCheck.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_PREORDER,
				PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER, 0))
			m_oFuncCheck.removeCheckExtraInfoFromList(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_PREORDER,
					PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER);
		
		//Check whether need to update non revenue to liability
		if(m_oFuncCheck.isUpdateLiability())
			m_oFuncCheck.setNonRevenue(PosCheck.NON_REVENUE_LIABILITY, true);
		
		// Add the process to stored list
		String sStoredProcessingCheckKey = m_oFuncCheck.getTableNoWithExtensionForDisplay();
		this.addProcessCheck(sStoredProcessingCheckKey);
		
		// Unlock the table
		// *****************************************************************
		// Create thread to unlock table
		AppThreadManager oAppThreadManager = new AppThreadManager();
		
		// Add the method to the thread manager
		// Thread 1 : Unlock table
		Object[] oParameters = new Object[2];
		oParameters[0] = m_oFuncCheck;
		oParameters[1] = sStoredProcessingCheckKey;
		oAppThreadManager.addThread(1, this, "processQuitCheck", oParameters);
		
		oAppThreadManager.runThread();
		
		// For not partial send check, the check is send to database but unable
		// to back to floorplan. Renew the
		// m_oFuncCheck so that the user will not change the check content
		// unexpectedly
		m_oFuncCheck = new FuncCheck();
		
		// Mark that the station is NOT under ordering panel
		AppGlobal.g_oFuncStation.get().setUnderOrdering(false);
		
		// Clear the ordering basket
		m_oFrameOrderingBasket.clearAllSections();
		
		// Reset the seat panel
		m_oFrameSeatPanel.resetSelectedSeat();
		
		// Show back the floor plan
		showTableFloorPlanScreen(true);
		
		if ((AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
				|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) == true) && bForceQuit == false) {
			// Fast food mode
			showTableFloorPlanScreen(false);
		} else if(AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) && bForceQuit == false) {
			m_sTableExtensionForFastFoodMode = "";
			m_sTableNoForFastFoodMode = "";
			showTableFloorPlanScreen(false);
		} else if (AppGlobal.OPERATION_MODE.stock_delivery.equals(m_eOperationMode) == true) {
			// Stock delivery mode
			startStockDeliveryMode();
		} else if (AppGlobal.OPERATION_MODE.fine_dining.equals(m_eOperationMode)) {
			// Check auto sign out
			checkAutoSignOut();
		}
		
		// must be forced quit after quit check
		AppGlobal.g_sResultForAutoFunction.set(AppGlobal.AUTO_FUNCTIONS_RESULT_LIST.forced_quit.name());
	}
	
	// Thread for process quit check
	private void processQuitCheck(FuncCheck oFuncCheck, String sStoredProcessingCheckKey) {
		try {
			oFuncCheck.unlockTable(true, true);
		} catch (Exception e) {
			AppGlobal.stack2Log(e);
		}
		
		// Finish quit check, remove process to stored processing check list
		this.removeProcessCheck(sStoredProcessingCheckKey);
		
		// Generate customer display interface files for Payment
		oFuncCheck.updateCustomerDisplayDataUpdateTimestamp();
		oFuncCheck.generateCustomerDisplayInterfaceFiles(3);
	}
	
	public HashMap<String, String> selectPaymentInterfacePaytype() {
		// If it is new check, not allow to print OGS
		if (!m_oFuncCheck.isOldCheck())
			return null;
		
		List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal
				.getPosInterfaceConfigByInfType(InfInterface.TYPE_PAYMENT_INTERFACE);
		if (oInterfaceConfigList.isEmpty())
			return null;
		
		PosInterfaceConfig oPosInterfaceConfig = null;
		for (PosInterfaceConfig oTempInterfaceConfig : oInterfaceConfigList) {
			if (oTempInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_OGS)) {
				oPosInterfaceConfig = oTempInterfaceConfig;
				break;
			}
		}
		if (oPosInterfaceConfig == null)
			return null;
		
		HashMap<String, String> oSelectedPaytypeInfo = new HashMap<String, String>();
		JSONObject oInterfaceSetup = oPosInterfaceConfig.getInterfaceConfig();
		
		String sLangUrl = "";
		for (HashMap<String, String> oLangInfo : AppGlobal.g_oSupportedLangList) {
			if (oLangInfo.get("index").equals(String.valueOf(AppGlobal.g_oCurrentLangIndex.get())))
				sLangUrl = oLangInfo.get("url");
		}
		
		ArrayList<String> oOptionList = new ArrayList<String>();
		HashMap<Integer, HashMap<String, String>> oPaytypeList = new HashMap<Integer, HashMap<String, String>>();
		oOptionList.add(AppGlobal.g_oLang.get()._("normal"));
		HashMap<String, String> oTempPayTypeInfo = new HashMap<String, String>();
		oTempPayTypeInfo.put("interfaceId", "0");
		oTempPayTypeInfo.put("interfaceVenderKey", "");
		oTempPayTypeInfo.put("paytype", "0");
		oPaytypeList.put(0, oTempPayTypeInfo);
		if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_OGS)) {
			if (!oInterfaceSetup.isNull("payment_type_support")
					&& oInterfaceSetup.optJSONObject("payment_type_support").has("params")) {
				JSONObject oPaymentTypeSupportList = oInterfaceSetup.optJSONObject("payment_type_support")
						.optJSONObject("params");
				Iterator<String> keys = oPaymentTypeSupportList.keys();
				int iCount = 1;
				while (keys.hasNext()) {
					String key = keys.next();
					JSONObject oPaytypeJSONObject = oPaymentTypeSupportList.optJSONObject(key);
					if (oPaytypeJSONObject == null)
						continue;
					
					String sPayTypeName;
					if (oPaytypeJSONObject.has("name_" + sLangUrl))
						sPayTypeName = oPaytypeJSONObject.optString("name_" + sLangUrl);
					else
						sPayTypeName = oPaytypeJSONObject.optString("name");
					int iPayTypeValue = Integer.parseInt(oPaytypeJSONObject.optString("value"));
					
					oOptionList.add(AppGlobal.g_oLang.get()._("ogs_paytype") + " - " + sPayTypeName);
					oTempPayTypeInfo = new HashMap<String, String>();
					oTempPayTypeInfo.put("interfaceId", String.valueOf(oPosInterfaceConfig.getInterfaceId()));
					oTempPayTypeInfo.put("interfaceVenderKey", oPosInterfaceConfig.getInterfaceVendorKey());
					oTempPayTypeInfo.put("paytype", String.valueOf(iPayTypeValue));
					oPaytypeList.put(iCount, oTempPayTypeInfo);
					iCount++;
				}
			}
		}
		
		if (oOptionList.size() > 1) {
			FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
			oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select"), oOptionList, false);
			oFormSelectionBox.show();
			
			if (oFormSelectionBox.isUserCancel()) {
				return null;
			} else {
				ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
				int iPaytypeIndex = oSelectionBoxResult.get(0);
				if (iPaytypeIndex > 0) {
					HashMap<String, String> oPaytypeInfo = oPaytypeList.get(iPaytypeIndex);
					if (oPaytypeInfo.get("interfaceVenderKey").equals(InfVendor.KEY_OGS)) {
						oSelectedPaytypeInfo.put("interfaceId", oPaytypeInfo.get("interfaceId"));
						oSelectedPaytypeInfo.put("interfaceVenderKey", oPaytypeInfo.get("interfaceVenderKey"));
						oSelectedPaytypeInfo.put("paytype", oPaytypeInfo.get("paytype"));
					}
				} else {
					oSelectedPaytypeInfo.put("interfaceId", "");
					oSelectedPaytypeInfo.put("interfaceVenderKey", "");
					oSelectedPaytypeInfo.put("paytype", "0");
				}
			}
		}
		
		return oSelectedPaytypeInfo;
	}
	
	// allow user to select continuous printing or re-print whole check
	public boolean selectContinuousPrint() {
		boolean bIsContPrint = false;
		ArrayList<String> oOptionList = new ArrayList<String>();
		if (m_oFuncCheck.getAllowContinuousPrint().equals(FuncCheck.ALLOW_CONTINUOUS_PRINT)) {
			oOptionList.add(AppGlobal.g_oLang.get()._("continuous_print"));
			oOptionList.add(AppGlobal.g_oLang.get()._("reprint_whole_check"));
		}
		else if (m_oFuncCheck.getAllowContinuousPrint().equals(FuncCheck.NOT_ALLOW_CONTINUOUS_PRINT))
			oOptionList.add(AppGlobal.g_oLang.get()._("reprint_whole_check"));
		
		FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
		oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select_print_type"), oOptionList, false);
		oFormSelectionBox.show();
		
		if (oFormSelectionBox.isUserCancel()) {
			// if user select cancel, default as "reprint whole check"
			bIsContPrint = false;
		} else {
			ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
			String sOptionString = oOptionList.get(oSelectionBoxResult.get(0));
			if (sOptionString.equals(AppGlobal.g_oLang.get()._("continuous_print")))
				bIsContPrint = true;
			else if (sOptionString.equals(AppGlobal.g_oLang.get()._("reprint_whole_check")))
				bIsContPrint = false;
		}
		
		return bIsContPrint;
	}
	
	// Select print format
	public HashMap<String, Integer> selectCheckPrintFormat(boolean bPayCheck, boolean bPrtDetailCheck, boolean bAllowSkipPrint) {
		int iChosenCheckPfmtId = 0;
		boolean bDetailCheck = false, bStatCheckFmtOverride = false;
		HashMap<String, Integer> oReturnValue = new HashMap<String, Integer>();
		
		// Check the user authority of print check
		
		// Get the print check format (at station)
		int iCheckPrtFmtCount = 0;
		if (!bPrtDetailCheck) {
			for (int i = 1; i <= 5; i++) {
				if (AppGlobal.g_oFuncStation.get().getStation().getCheckPfmtId(i) > 0) {
					iCheckPrtFmtCount++;
					iChosenCheckPfmtId = AppGlobal.g_oFuncStation.get().getStation().getCheckPfmtId(i);
					bDetailCheck = false;
				}
			}
		}
		if (!bPayCheck) {
			for (int i = 1; i <= 5; i++) {
				if (AppGlobal.g_oFuncStation.get().getStation().getDetailCheckPfmtId(i) > 0) {
					iCheckPrtFmtCount++;
					iChosenCheckPfmtId = AppGlobal.g_oFuncStation.get().getStation().getDetailCheckPfmtId(i);
					bDetailCheck = true;
				}
			}
		}
		
		// No check format is defined
		if (iCheckPrtFmtCount == 0) {
			if (!bPrtDetailCheck) {
				for (int i = 1; i <= 5; i++) {
					if (AppGlobal.g_oFuncOutlet.get().getCheckPfmtId(i) > 0) {
						iCheckPrtFmtCount++;
						iChosenCheckPfmtId = AppGlobal.g_oFuncOutlet.get().getCheckPfmtId(i);
						bDetailCheck = false;
					}
				}
			}
			if (!bPayCheck) {
				for (int i = 1; i <= 5; i++) {
					if (AppGlobal.g_oFuncOutlet.get().getDetailCheckPfmtId(i) > 0) {
						iCheckPrtFmtCount++;
						iChosenCheckPfmtId = AppGlobal.g_oFuncOutlet.get().getDetailCheckPfmtId(i);
						bDetailCheck = true;
					}
				}
			}
			
			if (iCheckPrtFmtCount == 0) {
				// Error occur
				showErrorDialogBox(AppGlobal.g_oLang.get()._("no_print_format_is_defined"));
				oReturnValue.put("result", 0);
				return oReturnValue;
			}
		} else
			bStatCheckFmtOverride = true;
		
		// Show the print check format selection if more than one format is set
		if (iCheckPrtFmtCount > 1) {
			iChosenCheckPfmtId = 0;
			bDetailCheck = false;
			ArrayList<String> oOptionList = new ArrayList<String>();
			HashMap<Integer, HashMap<String, Integer>> oPrintFormatIdList = new HashMap<Integer, HashMap<String, Integer>>();
			int iPfmtId = 0;
			int iFormatCount = 0;
			
			// get check format
			if(!bPrtDetailCheck) {
				for (int i = 1; i <= 5; i++) {
					if (bStatCheckFmtOverride)
						iPfmtId = AppGlobal.g_oFuncStation.get().getStation().getCheckPfmtId(i);
					else
						iPfmtId = AppGlobal.g_oFuncOutlet.get().getCheckPfmtId(i);
					if (iPfmtId > 0) {
						HashMap<String, Integer> oPrtFmtInfo = new HashMap<String, Integer>();
						oPrtFmtInfo.put("pfmtId", iPfmtId);
						oPrtFmtInfo.put("detailCheck", 0);
						
						if (bStatCheckFmtOverride)
							oOptionList.add(AppGlobal.g_oFuncStation.get().getPrintFormatNameByPfmtId(iPfmtId,
									AppGlobal.g_oCurrentLangIndex.get()));
						else
							oOptionList.add(AppGlobal.g_oFuncOutlet.get().getPrintFormatNameByPfmtId(iPfmtId,
									AppGlobal.g_oCurrentLangIndex.get()));
						oPrintFormatIdList.put(iFormatCount, oPrtFmtInfo);
						iFormatCount++;
					}
				}
			}
			
			// get check detail format
			if (!bPayCheck) {
				for (int i = 1; i <= 5; i++) {
					if (bStatCheckFmtOverride)
						iPfmtId = AppGlobal.g_oFuncStation.get().getStation().getDetailCheckPfmtId(i);
					else
						iPfmtId = AppGlobal.g_oFuncOutlet.get().getDetailCheckPfmtId(i);
					if (iPfmtId > 0) {
						HashMap<String, Integer> oPrtFmtInfo = new HashMap<String, Integer>();
						oPrtFmtInfo.put("pfmtId", iPfmtId);
						oPrtFmtInfo.put("detailCheck", 1);
						
						if (bStatCheckFmtOverride)
							oOptionList.add(AppGlobal.g_oFuncStation.get().getPrintFormatNameByPfmtId(iPfmtId,
									AppGlobal.g_oCurrentLangIndex.get()));
						else
							oOptionList.add(AppGlobal.g_oFuncOutlet.get().getPrintFormatNameByPfmtId(iPfmtId,
									AppGlobal.g_oCurrentLangIndex.get()));
						oPrintFormatIdList.put(iFormatCount, oPrtFmtInfo);
						iFormatCount++;
					}
				}
			}
			
			FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
			oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select_the_print_format"),
					oOptionList, false);
			oFormSelectionBox.show();
			
			if (oFormSelectionBox.isUserCancel()) {
				oReturnValue.put("result", 0);
				return oReturnValue;
			} else {
				ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
				int iPrtFmtIndex = oSelectionBoxResult.get(0);
				iChosenCheckPfmtId = oPrintFormatIdList.get(iPrtFmtIndex).get("pfmtId");
				if (oPrintFormatIdList.get(iPrtFmtIndex).get("detailCheck") == 1)
					bDetailCheck = true;
				else
					bDetailCheck = false;
				
			}
		} else if (bAllowSkipPrint) { // For only one print format setting, show
			// selection box to provide an option to
			// user for skip printing
			ArrayList<String> oOptionList = new ArrayList<String>();
			if (bStatCheckFmtOverride)
				oOptionList.add(AppGlobal.g_oFuncStation.get().getPrintFormatNameByPfmtId(iChosenCheckPfmtId,
						AppGlobal.g_oCurrentLangIndex.get()));
			else
				oOptionList.add(AppGlobal.g_oFuncOutlet.get().getPrintFormatNameByPfmtId(iChosenCheckPfmtId,
						AppGlobal.g_oCurrentLangIndex.get()));
			FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
			oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select_the_print_format"),
					oOptionList, false);
			oFormSelectionBox.show();
			
			if (oFormSelectionBox.isUserCancel()) {
				oReturnValue.put("result", 0);
				return oReturnValue;
			}
		}
		
		oReturnValue.put("pfmtId", Integer.valueOf(iChosenCheckPfmtId));
		if (bDetailCheck)
			oReturnValue.put("detailCheck", 1);
		else
			oReturnValue.put("detailCheck", 0);
		oReturnValue.put("result", 1);
		return oReturnValue;
	}
	
	// Send check
	private String sendCheck(boolean bPrintGuestCheck, boolean bPayCheck, boolean bDirectPayment,
	                         boolean bCheckAutoSignOut, boolean bFromTableFloorPlan, int iCheckPfmtId, boolean bWaitCheckUpdate,
	                         int iGetUpdateRecord) {
		boolean bIsOldCheck = false, bDetailCheck = false, bPayCheckSendResult = false;
		int iChosenCheckPfmtId = 0;
		boolean bIsContPrint = false;
		
		List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal
				.getPosInterfaceConfigByInfType(InfInterface.TYPE_MEMBERSHIP_INTERFACE);
		for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
			if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_GENERAL_V2)) {
				if (m_oServiceChargeTypeList == null) {
					m_oServiceChargeTypeList = new PosTaxScTypeList();
					m_oServiceChargeTypeList.getAllServiceCharges();
				}
				BigDecimal dEgligibleAmount = m_oFuncCheck.calPointRedemptionAmount(oPosInterfaceConfig, m_oServiceChargeTypeList);
				m_oFuncCheck.addOrUpdateCheckExtraInfoValue(3, PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE,
						PosCheckExtraInfo.VARIABLE_MAX_REDEMPT_AMOUNT, 0, AppGlobal.g_oFuncOutlet.get().roundPaymentAmountToString(dEgligibleAmount));
				break;
			}
		}
		splitRevenueAddActionLogAndRemoveExtraInfo();
		
		HashMap<String, Integer> oCheckPfmtInfo = null;
		
		bIsOldCheck = m_oFuncCheck.isOldCheck();
		
		// Increment the check no. for new check in standalone mode
		if (!bIsOldCheck && AppGlobal.g_oFuncSmartStation.isStandaloneRole()) {
			AppGlobal.g_oFuncStation.get().addOneToLastCheckNumber();
		}
		
		//Calculate item cooking time
		m_oFuncCheck.calculateItemCookingTime();
		
		//Check whether need to update non revenue to liability
		if(m_oFuncCheck.isUpdateLiability())
			m_oFuncCheck.setNonRevenue(PosCheck.NON_REVENUE_LIABILITY, true);
		
		if (bPrintGuestCheck == true) {
			// check whether have pending items
			if (m_oFuncCheck.havePendingItems()) {
				showAttentionDialogBox(AppGlobal.g_oLang.get()._("cannot_print_check_with_pending_items"));
				if (bFromTableFloorPlan)
					m_oFuncCheck.unlockTable(false, false);
				return FUNC_RESULT_FAIL;
			}
			
			// check whether it is from table floorplan and have max and match
			// rule
			// if it is, user need to print check at ordering panel as the item
			// price may change accordingly
			if (bFromTableFloorPlan && AppGlobal.g_oFuncMixAndMatch.get().isSupportMixAndMatch()) {
				showAttentionDialogBox(AppGlobal.g_oLang.get()._("mix_and_match_rule_exist") + System.lineSeparator()
						+ AppGlobal.g_oLang.get()._("please_print_check_at_ordering_panel"));
				m_oFuncCheck.unlockTable(false, false);
				return FUNC_RESULT_FAIL;
			}
			// get check print format
			if (iCheckPfmtId == 0) {
				iChosenCheckPfmtId = 0;
				bDetailCheck = false;
				oCheckPfmtInfo = selectCheckPrintFormat(bPayCheck, false, false);
				if (oCheckPfmtInfo.get("result") == 0) {
					if (bFromTableFloorPlan)
						m_oFuncCheck.unlockTable(false, false);
					return FUNC_RESULT_CANCEL_BY_USER;
				}
				iChosenCheckPfmtId = oCheckPfmtInfo.get("pfmtId");
				if (oCheckPfmtInfo.get("detailCheck") == 1)
					bDetailCheck = true;
			} else
				iChosenCheckPfmtId = iCheckPfmtId;
			// check whether need to print with payment interface
			HashMap<String, String> oSelectedPaytypeInfo = selectPaymentInterfacePaytype();
			if (oSelectedPaytypeInfo != null && !oSelectedPaytypeInfo.get("paytype").equals("0")) {
				m_oFuncCheck.addExtraInfoForPaymentInterface(oSelectedPaytypeInfo);
			}
			
			// check whether support continuous printing or not
			if (AppGlobal.g_oFuncStation.get().getSupportContinuousPrinting()) {
				if (m_oFuncCheck.getAllowContinuousPrint().equals(FuncCheck.ALLOW_CONTINUOUS_PRINT) || m_oFuncCheck.getAllowContinuousPrint().equals(FuncCheck.NOT_ALLOW_CONTINUOUS_PRINT))
					bIsContPrint = selectContinuousPrint();
				if((m_oFuncCheck.getPrintCount() == 0) && (!m_oFuncCheck.getAllowContinuousPrint().equals(FuncCheck.NOT_ALLOW_CONTINUOUS_PRINT)))
					bIsContPrint = true;
				if (!bIsContPrint) {
					// restore all item "printed status" to false when select reprint whole check
					List<List<FuncCheckItem>> oWholePartyItemList = m_oFuncCheck.getWholeItemList();
					for (List<FuncCheckItem> oFuncCheckItems : oWholePartyItemList) {
						for (FuncCheckItem oFuncCheckItem : oFuncCheckItems) {
							oFuncCheckItem.setIsAddUpdatePrinted(false);
							oFuncCheckItem.setIsVoidPrinted(false);
						}
					}
				}
			}
		}
		
		// Kitchen monitor add new item
		ArrayList<FuncCheckItem> oNewItemList = null;
		if (m_oFuncKitchenMonitor.isSupportKitchenMonitor()) {
			oNewItemList = new ArrayList<FuncCheckItem>();
			List<List<FuncCheckItem>> oWholePartyItemList = m_oFuncCheck.getWholeItemList();
			int iLastestSequence = m_oFuncCheck.getLargestItemSequenceNumber();
			// assign sequence number to new item
			for (List<FuncCheckItem> oPartyItemList : oWholePartyItemList) {
				for (FuncCheckItem oFuncCheckItem : oPartyItemList) {
					if (!oFuncCheckItem.isOldItem() && !oFuncCheckItem.isNoKitchenSlip()) {
						if (oFuncCheckItem.getParentFuncCheckItem() != null
								&& oFuncCheckItem.getParentFuncCheckItem().isNoKitchenSlip())
							continue;
						
						String sSequence = Integer.toString(++iLastestSequence);
						if (m_oFuncCheck.isCheckExtraInfoExistByVariableAndIndex(PosCheckExtraInfo.VARIABLE_CALL_NO, 0))
							oFuncCheckItem.updateExtraInfoValue(PosCheckExtraInfo.BY_ITEM, PosCheckExtraInfo.SECTION_KITCHEN_MONITOR, PosCheckExtraInfo.VARIABLE_DISPLAY_SEQUENCE, sSequence);
						else
							oFuncCheckItem.addExtraInfo(PosCheckExtraInfo.BY_ITEM, PosCheckExtraInfo.SECTION_KITCHEN_MONITOR, PosCheckExtraInfo.VARIABLE_DISPLAY_SEQUENCE, sSequence);
						if (!oFuncCheckItem.isPendingItem() || oFuncCheckItem.isPartialPendingItem())
							oNewItemList.add(oFuncCheckItem);
						if (oFuncCheckItem.hasModifier()) {
							for (FuncCheckItem oModifier : oFuncCheckItem.getModifierList()) {
								sSequence = Integer.toString(++iLastestSequence);
								if (m_oFuncCheck.isCheckExtraInfoExistByVariableAndIndex(PosCheckExtraInfo.VARIABLE_CALL_NO, 0))
									oModifier.updateExtraInfoValue(PosCheckExtraInfo.BY_ITEM, PosCheckExtraInfo.SECTION_KITCHEN_MONITOR, PosCheckExtraInfo.VARIABLE_DISPLAY_SEQUENCE, sSequence);
								else
									oModifier.addExtraInfo(PosCheckExtraInfo.BY_ITEM, PosCheckExtraInfo.SECTION_KITCHEN_MONITOR, PosCheckExtraInfo.VARIABLE_DISPLAY_SEQUENCE, sSequence);
								if (!oFuncCheckItem.isPendingItem() || oFuncCheckItem.isPartialPendingItem())
									oNewItemList.add(oModifier);
							}
						}
					}
				}
			}
			
			if (m_oFuncCheck.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_KITCHEN_MONITOR,
					PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0))
				m_oFuncCheck.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK,
						PosCheckExtraInfo.SECTION_KITCHEN_MONITOR, PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0,
						Integer.toString(m_oFuncKitchenMonitor.getInterfaceId()));
			else
				m_oFuncCheck.addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_KITCHEN_MONITOR,
						PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0,
						Integer.toString(m_oFuncKitchenMonitor.getInterfaceId()));
		}
		
		if (m_oFuncCheck.isNewCheckWithNoItem() == false) {
			// Add the process to stored list
			String sStoredProcessingCheckKey = m_oFuncCheck.getTableNoWithExtensionForDisplay();
			if (!this.addProcessCheck(sStoredProcessingCheckKey)) {
				// Another send check is processing
				return FUNC_RESULT_FAIL;
			}
			// Update the item according to database first
			m_oFuncCheck.updateSystemMenuItemList();
			
			// Set the check open time accordingly and do override
			if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode))
				m_oFuncCheck.setCheckOpenTimeValue(AppGlobal.g_oFuncOutlet.get().getOutletId(), true, 0);
			else
				m_oFuncCheck.setCheckOpenTimeValue(AppGlobal.g_oFuncOutlet.get().getOutletId(), false, 0);
			
			// Mix and match function
			mixAndMatchFunction();
			
			
			String sOriginalTableStatus = m_oFuncCheck.getOutletTableStatus();
			if (AppGlobal.OPERATION_MODE.stock_delivery.equals(m_eOperationMode) == true) {
				if (m_iStockDeliveryOperaionMode == 1)
					// Check if the invoice is received or not
					m_oFuncCheck.checkReceiveStockDeliveryInvoice();
				
				processSendCheck(m_oFuncCheck, false, false, AppGlobal.g_oFuncOutlet.get().getOutletId(),
						AppGlobal.g_oFuncOutlet.get().getOutletNameByIndex(AppGlobal.g_oCurrentLangIndex.get()),
						AppGlobal.g_oFuncStation.get().getCheckPrtqId(), iChosenCheckPfmtId, bDetailCheck,
						iGetUpdateRecord, sStoredProcessingCheckKey, bIsOldCheck, false);
				
				// Display reference no.
				if (m_iStockDeliveryOperaionMode == 0) {
					showAttentionDialogBox(AppGlobal.g_oLang.get()._("invoice_reference_id") + ": "
							+ m_oFuncCheck.getStockDeliveryInvoiceRefId());
				}
			} else {
				// update the maximum redemption amount and points into check extra_info when update check (for golden circle membership interface)
				m_oFuncCheck.updateMaxRedemptionPointsAndAmountForGoldenCircle();
				
				// Show processing box for send check
				if (AppGlobal.OPERATION_MODE.fine_dining.equals(m_eOperationMode) == true
						|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode)) {
					m_oFrameShowOnceProcessBox.setMessage(AppGlobal.g_oLang.get()._("table") + " "
							+ AppGlobal.g_oFuncOutlet.get().getTableNameWithTableNo(m_oFuncCheck.getTableNo(),
							m_oFuncCheck.getTableExtension())[AppGlobal.g_oCurrentLangIndex.get() - 1]
							+ " " + AppGlobal.g_oLang.get()._("is_processing") + "...");
					m_oFrameShowOnceProcessBox.showProcessBox();
					
					// *****************************************************************
					// Create thread to load detail
					AppThreadManager oAppThreadManager = new AppThreadManager();
					
					// Add the method to the thread manager
					// Thread 1 : Send check if it is old check
					// Create parameter array
					Object[] oParameters = new Object[12];
					oParameters[0] = m_oFuncCheck;
					oParameters[1] = bPrintGuestCheck;
					oParameters[2] = bPayCheck;
					oParameters[3] = AppGlobal.g_oFuncOutlet.get().getOutletId();
					oParameters[4] = AppGlobal.g_oFuncOutlet.get()
							.getOutletNameByIndex(AppGlobal.g_oCurrentLangIndex.get());
					oParameters[5] = AppGlobal.g_oFuncStation.get().getCheckPrtqId();
					oParameters[6] = iChosenCheckPfmtId;
					oParameters[7] = bDetailCheck;
					oParameters[8] = iGetUpdateRecord;
					oParameters[9] = sStoredProcessingCheckKey;
					oParameters[10] = bIsOldCheck;
					oParameters[11] = bIsContPrint;
					oAppThreadManager.addThread(1, this, "processSendCheck", oParameters);
					
					// Run all of the threads
					oAppThreadManager.runThread();
					
					if (bIsContPrint)
						bWaitCheckUpdate = true;
					
					if (m_oFuncKitchenMonitor.isSupportKitchenMonitor())
						bWaitCheckUpdate = true;
					
					if (bWaitCheckUpdate) {
						oAppThreadManager.waitForThread();
						bPayCheckSendResult = ((Boolean) oAppThreadManager.getResult(1)).booleanValue();
						if (!bPayCheckSendResult)
							return FUNC_RESULT_FAIL;
					}
					
					//Assign the table's earliest finish cooking time to the global list
					m_oFuncCheck.handleCheckForOverCookingTimeTableList(null, null, false);
				} else {
					bPayCheckSendResult = processSendCheck(m_oFuncCheck, bPrintGuestCheck, bPayCheck,
							AppGlobal.g_oFuncOutlet.get().getOutletId(),
							AppGlobal.g_oFuncOutlet.get().getOutletNameByIndex(AppGlobal.g_oCurrentLangIndex.get()),
							AppGlobal.g_oFuncStation.get().getCheckPrtqId(), iChosenCheckPfmtId, bDetailCheck,
							iGetUpdateRecord, sStoredProcessingCheckKey, bIsOldCheck, false);
					if (!bPayCheckSendResult)
						return FUNC_RESULT_FAIL;
				}
			}
			
			String sNewTableStatus = PosOutletTable.STATUS_OCCUPIED;
			if (bPrintGuestCheck || bPayCheck)
				sNewTableStatus = PosOutletTable.STATUS_CHECK_PRINTED;
			if (sNewTableStatus.equals(sOriginalTableStatus) == false)
				this.instantUpdateTableFloorPlanTableStatus(m_oFuncCheck.getTableNo(), m_oFuncCheck.getTableExtension(),
						sNewTableStatus);
			
			if (m_oFuncKitchenMonitor.isSupportKitchenMonitor() && oNewItemList.size() > 0)
				this.processKitchenMonitorQsrAddItem(null, null, oNewItemList, false, null);
		} else {
			// Not allow to partial send check if is new check with no items
			if (!bPayCheck && iGetUpdateRecord == 2 ){
				showErrorDialogBox(AppGlobal.g_oLang.get()._("partial_send_check_is_not_allowed"));
				return FUNC_RESULT_FAIL;
			}
			
			if(m_oFuncCheck.getPosPaymentGatewayTransactionsLists().getPosPaymentGatewayTransactionsList().size() > 0){
				// Not allow quit check without send check if check contains payment gateway transaction records
				for(PosPaymentGatewayTransactions oPosPaymentGatewayTransactions : m_oFuncCheck.getPosPaymentGatewayTransactionsLists().getPosPaymentGatewayTransactionsList()){
					if(!oPosPaymentGatewayTransactions.getStatus().equals(PosPaymentGatewayTransactions.STATUS_VOIDED)){
						// Error occur
						showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_send_new_check_with_no_order_item_but_payment_gateway_transactions"));
						return FUNC_RESULT_FAIL;
					}
				}
			}else if(m_oFuncCheck.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_ADVANCE_ORDER,PosCheckExtraInfo.VARIABLE_ADVANCE_ORDER_CHKS_ID, 0) && !m_oFuncCheck.getCheckExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_ADVANCE_ORDER,PosCheckExtraInfo.VARIABLE_ADVANCE_ORDER_CHKS_ID, 0).isEmpty()) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("advance_order_attached"));
				return FUNC_RESULT_FAIL;
			}else if(bPrintGuestCheck == true) {
				// Error occur
				showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_print_new_check_with_no_order_item"));
				return FUNC_RESULT_FAIL;
				
			} else
				// quit without send check if it is new check and no new item
				m_oFuncCheck.unlockTable(false, false);
		}
		
		// Mark that the station is NOT under ordering panel
		AppGlobal.g_oFuncStation.get().setUnderOrdering(false);
		
		if (!bPayCheck) {
			// For not partial send check, the check is send to database but
			// unable to back to floorplan. Renew the
			// m_oFuncCheck so that the user will not change the check content
			// unexpectedly
			if (iGetUpdateRecord != 2)
				m_oFuncCheck = new FuncCheck();
			
			// Clear the ordering basket
			m_oFrameOrderingBasket.clearAllSections();
			
			if (iGetUpdateRecord == 2) {
				// Send check without quit the ordering
				this.drawOrderingBasket(false);
				
				// Mark that the station is still under ordering panel
				AppGlobal.g_oFuncStation.get().setUnderOrdering(true);
			} else {
				// Reset the seat panel
				m_oFrameSeatPanel.resetSelectedSeat();
				
				// Show back the floor plan
				showTableFloorPlanScreen(true);
			}
			
			if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
					|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) == true) {
				// Fast food mode
				showTableFloorPlanScreen(false);
			} else if(AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) ) {
				//load new check base on the length of "m_sTableNoForFastFoodMode"
				m_sTableNoForFastFoodMode = "";
				m_sTableExtensionForFastFoodMode = "";
				showTableFloorPlanScreen(false);
			} else if (AppGlobal.OPERATION_MODE.stock_delivery.equals(m_eOperationMode) == true) {
				// Stock delivery mode
				startStockDeliveryMode();
			} else {
				// Check auto sign out
				if (bCheckAutoSignOut)
					checkAutoSignOut();
			}
		} else
			m_oFrameStationInfoBar.showFunctionButton(true);
		
		if (bPayCheck && bPayCheckSendResult == false)
			return FUNC_RESULT_FAIL;
		else
			return FUNC_RESULT_SUCCESS;
	}
	
	// Process send check in Thread
	private boolean processSendCheck(FuncCheck oFuncCheck, boolean bPrintGuestCheck, boolean bPayCheck, int iOutletId,
	                                 String sOutletName, int iCheckPrintQueueId, int iCheckFormatId, boolean bDetailCheck, int iGetUpdateRecord,
	                                 String sStoredProcessingCheckKey, boolean bIsOldCheck, boolean bIsContPrint) {
		boolean bResult = false;
		// Send check
		try {
			String sOrderingMode;
			if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food))
				sOrderingMode = PosCheck.ORDERING_MODE_FAST_FOOD;
			else if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk))
				sOrderingMode = PosCheck.ORDERING_MODE_SELF_ORDER_KIOSK;
			else if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.stock_delivery))
				sOrderingMode = PosCheck.ORDERING_MODE_DELIVERY;
			else if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab))
				sOrderingMode = PosCheck.ORDERING_MODE_BAR_TAB;
			else
				sOrderingMode = PosCheck.ORDERING_MODE_FINE_DINING;
			
			// For partial send check (iGetUpdateRecord = 2), set
			// bInternalSendCheck = true, therefore station id of outlet table
			// is not be reset
			boolean bInternalSendCheck = false;
			if (iGetUpdateRecord == 2)
				bInternalSendCheck = true;
			
			String sResult = oFuncCheck.sendCheck(bPrintGuestCheck, bPayCheck, bInternalSendCheck, iOutletId,
					sOutletName, iCheckPrintQueueId, iCheckFormatId, bDetailCheck, iGetUpdateRecord, 0, 0,
					sOrderingMode, false, bIsContPrint);
			
			if (!sResult.equals(PosCheck.API_RESULT_SUCCESS)) {
				// Fail to send check
				// Write application log
				AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
						AppGlobal.g_oFuncUser.get().getUserId() + "",
						"ERROR: Fail to send check, table " + oFuncCheck.getTableNo() + oFuncCheck.getTableExtension());
				
				// Close process box
				m_oFrameShowOnceProcessBox.finishShow();
				
				return false;
			} else {
				// Send success
				if (AppGlobal.OPERATION_MODE.stock_delivery.equals(m_eOperationMode) == false) {
					// Write application log
					AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
							AppGlobal.g_oFuncUser.get().getUserId() + "",
							"Finish send check, table " + oFuncCheck.getTableNo() + oFuncCheck.getTableExtension());
				} else {
					if (m_iStockDeliveryOperaionMode == 0) {
						String sLogRemark = (bIsOldCheck) ? "Create Stock Delivery Order" : "Edit Stock Delivery Order";
						// Add log to action log list
						AppGlobal.g_oActionLog.get().addActionLog(
								AppGlobal.FUNC_LIST.stock_delivery_invoice_setup.name(),
								PosActionLog.ACTION_RESULT_SUCCESS, "", AppGlobal.g_oFuncUser.get().getUserId(),
								AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
								AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
								AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
								AppGlobal.g_oFuncStation.get().getStationId(), oFuncCheck.getCheckId(), "", "", "", "",
								sLogRemark);
					} else if (m_iStockDeliveryOperaionMode == 1) {
						// Add log to action log list
						AppGlobal.g_oActionLog.get().addActionLog(
								AppGlobal.FUNC_LIST.receive_stock_delivery_invoice.name(),
								PosActionLog.ACTION_RESULT_SUCCESS, "", AppGlobal.g_oFuncUser.get().getUserId(),
								AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
								AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
								AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
								AppGlobal.g_oFuncStation.get().getStationId(), oFuncCheck.getCheckId(), "", "", "", "",
								"");
					}
					// handle action log
					AppGlobal.g_oActionLog.get().handleActionLog(false);
				}
				
				bResult = true;
			}
		} catch (Exception e) {
			AppGlobal.stack2Log(e);
			
			// Fail to send check
			// Write application log
			AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
					AppGlobal.g_oFuncUser.get().getUserId() + "",
					"ERROR: Fail to send check, table " + oFuncCheck.getTableNo() + oFuncCheck.getTableExtension());
		}
		
		// Finish send check, remove process to stored processing check list
		this.removeProcessCheck(sStoredProcessingCheckKey);
		
		// Close process box
		m_oFrameShowOnceProcessBox.finishShow();
		
		return bResult;
	}
	
	// Start cashier mode before loading any check
	private boolean startCashierMode(boolean bAdjustPayments) {
		
		// Hidden the table floor
		if (!(bAdjustPayments && (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
				|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) == true
				|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) == true))
				&& AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.horizontal_desktop.name())) {
			showTableFloorPlanScreen(false);
		}
		
		// Turn on cashier mode
		if (bAdjustPayments) {
			m_oFrameCashier.setIsFinishPaymentByAdjustPayment(false);
			m_iCashierMode = 3;
		} else
			m_iCashierMode = 1;
		
		// Cleanup the existing m_oFuncCheck
		if (!bAdjustPayments && !m_bIsInterfacePaymentFailedBySetup)
			m_oFuncCheck = null;
		
		// Start cashier mode screen
		if (bAdjustPayments) {
			// init FuncPayment
			m_oFuncPayment.init(m_oFuncCheck.getCheckTotal(), AppGlobal.g_oFuncOutlet.get().getCheckRoundMethod(),
					AppGlobal.g_oFuncOutlet.get().getCheckRoundDecimal(),
					AppGlobal.g_oFuncOutlet.get().getPayRoundMethod(),
					AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal());
			
			showCashierScreen(true, true);
		} else
			showCashierScreen(true, false);
		
		// Add log to action log list
		AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.cashier_mode.name(),
				PosActionLog.ACTION_RESULT_SUCCESS, "", AppGlobal.g_oFuncUser.get().getUserId(),
				AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
				AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "", "");
		// handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
		return true;
	}
	
	// Before payment checking
	private boolean preCheckingForPayment() {
		if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
				|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) == true) {
			if (m_oFuncCheck.isPaid(false)) {
				this.showErrorDialogBox(AppGlobal.g_oLang.get()._("check_is_already_paid"));
				return false;
			}
			
			if (!m_oFuncCheck.isOldCheck()) {
				if (m_oFuncCheck.hasNewItem(false) == false) {
					this.showErrorDialogBox(AppGlobal.g_oLang.get()._("no_item_ordered"));
					return false;
				}
			} else {
				// Modify old check in fast food mode or self order mode
				// Auto perform send check
				if (m_oFuncCheck.hasNewItem(false)) {
					
					// Update the item according to database first
					m_oFuncCheck.updateSystemMenuItemList();
					
					// Set the check open time accordingly and do override
					if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode))
						m_oFuncCheck.setCheckOpenTimeValue(AppGlobal.g_oFuncOutlet.get().getOutletId(), true, 0);
					else
						m_oFuncCheck.setCheckOpenTimeValue(AppGlobal.g_oFuncOutlet.get().getOutletId(), false, 0);
					
					// Mix and match function
					mixAndMatchFunction();
					
					// Calculate the Loyalty transaction
					/*
					 * if (!m_oFuncCheck.calculateLoyaltyTransaction() &&
					 * !m_oFuncCheck.getLastErrorMessage().isEmpty()) {
					 * FormDialogBox oFormDialogBox = new
					 * FormDialogBox(AppGlobal.g_oLang.get()._("ok"), this);
					 * oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._("error"
					 * )); oFormDialogBox.setMessage(m_oFuncCheck.
					 * getLastErrorMessage()); oFormDialogBox.show(); }
					 */
					if (!m_oFuncCheck.calculateLoyaltyTransaction()) {
						String sErrorMessage = m_oFuncCheck.getLastErrorMessage();
						if (!sErrorMessage.isEmpty())
							showErrorDialogBox(sErrorMessage);
					}
					
					processSendCheck(m_oFuncCheck, false, false, AppGlobal.g_oFuncOutlet.get().getOutletId(),
							AppGlobal.g_oFuncOutlet.get().getOutletNameByIndex(AppGlobal.g_oCurrentLangIndex.get()),
							AppGlobal.g_oFuncStation.get().getCheckPrtqId(), 0, false, 2, "", true, false);
				}
			}
		} else {
			if (!m_oFuncCheck.isOldCheck()) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_pay_new_check"));
				return false;
			}
			
			if (m_oFuncCheck.hasNewItem(false)) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_paid_with_new_items_ordered"));
				return false;
			}
			
			if (m_oFuncCheck.isPaid(false)) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("check_is_already_paid"));
				return false;
			}
			
			if (AppGlobal.g_oFuncStation.get().isSkipPrintCheckForPayment() == false) {
				if (!m_oFuncCheck.isPrinted()) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("check_is_not_printed"));
					return false;
				}
				
				if (!m_oFuncCheck.isCheckTotalEqualToPrintTotal()) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("have_unprint_item"));
					return false;
				}
			} else {
				if (m_oFuncCheck.havePendingItems()) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_pay_check_with_pending_items"));
					return false;
				}
			}
		}
		if (isRollbackNeededForCheckLimit(m_oFuncCheck, BigDecimal.ZERO))
			return false;
		
		//Determine to run auto function or not, referencing extra info
		AppGlobal.g_sResultForAutoFunction.set(AppGlobal.AUTO_FUNCTIONS_RESULT_LIST.success.name());
		splitCheckAutoFunctionDetermineByExtraInfo();
		if (AppGlobal.g_sResultForAutoFunction.get().equals(AppGlobal.AUTO_FUNCTIONS_RESULT_LIST.forced_quit.name()))
			return false;
		
		// prepare a item list snap shot
		m_oFuncCheck.generateItemSnapShotList(false);
		
		return true;
	}
	
	// Pay check
	private boolean payCheck(boolean bDirectPayment, boolean bFullPayment) {
		if (AppGlobal.g_iLogLevel >= 9) {
			AppGlobal.g_bWriteClientConnectionLog = true;
		}
		
		if (!prePrintCheckHandling())
			return false;
		
		if (preCheckingForPayment() == false) {
			return false;
		}
		
		//do pay check auto functions
		JSONArray oPayCheckAutoFunctionsJSONArray = AppGlobal.g_oFuncStation.get().getPayCheckAutoFunctions();
		if(oPayCheckAutoFunctionsJSONArray != null){
			prepareAutoFunctionList(oPayCheckAutoFunctionsJSONArray);
			performAutoFunction();
			if (AppGlobal.g_sResultForAutoFunction.get().equals(AppGlobal.AUTO_FUNCTIONS_RESULT_LIST.forced_quit.name()))
				return false;
		}
		
		HashMap<String, String> oResultMap = getCheckOwnershipSetting();
		if (oResultMap.get("support").equals("y")) {
			if (oResultMap.get("type").equals("c")) {
				if (m_oFuncCheck.getCheckOwnerUserId() != AppGlobal.g_oFuncUser.get().getUserId()) {
					String sName = "";
					//UserUser oUser = new UserUser();
					//oUser.readByUserId(m_oFuncCheck.getCheckOwnerUserId());
					UserUser oUser = m_oAllUserList.get(m_oFuncCheck.getCheckOwnerUserId());
					if (oUser.getUserId() != 0)
						sName = oUser.getFirstName(AppGlobal.g_oCurrentLangIndex.get()) + " "
								+ oUser.getLastName(AppGlobal.g_oCurrentLangIndex.get());
					String sMessage = AppGlobal.g_oLang.get()._("abort_operation_since_this_check_owned_by") + ": " + System.lineSeparator()
							+ sName;
					showErrorDialogBox(sMessage);
					return false;
				}
			}
		}
		
		// For fast food mode, set the check open time and do override
		if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode)
				|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)) {
			if (!m_oFuncCheck.isOldCheck()) {
				// Set the check open time and do override
				if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode))
					m_oFuncCheck.setCheckOpenTimeValue(AppGlobal.g_oFuncOutlet.get().getOutletId(), true, 0);
				else
					m_oFuncCheck.setCheckOpenTimeValue(AppGlobal.g_oFuncOutlet.get().getOutletId(), false, 0);
				
				// Update basket
				for (int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
					// Create ordering basket section for seat
					ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck
							.getItemList(i);
					
					if (oFuncCheckItemList != null && oFuncCheckItemList.size() > 0) { // Has ordered items in seat i
						for (int j = 0; j < oFuncCheckItemList.size(); j++) {
							FuncCheckItem oFuncCheckItem = oFuncCheckItemList.get(j);
							updateBasketItemPrice(i, j, oFuncCheckItem);
						}
					}
				}
			} else {
				if (m_oFuncCheck.hasNewItem(false))
					m_oFuncCheck.setCheckOpenTimeValue(AppGlobal.g_oFuncOutlet.get().getOutletId(), true, 0);
			}
		}
		
		// Mix and match function
		mixAndMatchFunction();
		
		// Init FuncPayment for payment process
		m_oFuncPayment.init(m_oFuncCheck.getCheckTotal(), AppGlobal.g_oFuncOutlet.get().getCheckRoundMethod(),
				AppGlobal.g_oFuncOutlet.get().getCheckRoundDecimal(), AppGlobal.g_oFuncOutlet.get().getPayRoundMethod(),
				AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal());
		
		// Mark that the station is NOT under ordering panel
		AppGlobal.g_oFuncStation.get().setUnderOrdering(false);
		
		// Turn on cashier mode in different mode
		if (bDirectPayment) {
			m_iCashierMode = 2;
			m_oFrameOrderingPanel.setDirectPaymentMode(true);
		} else
			m_iCashierMode = 1;
		
		// Start cashier mode screen
		if (bFullPayment == false){
			showCashierScreen(true, true);
			// If not full payment, display ordering panel
			//m_oFrameOrderingPanel.setVisible(true);
		}
		else {
			// Start step
			m_oFrameCashier.setCurrentStep(0);
			m_oFrameDirectPaymentResult.clearPaymentBasket();
		}
		
		// For auto cashier payment
		if (AppGlobal.g_oFuncStation.get().isAutoCashierPayment()) {
			int iPaymentId = 0;
			BigDecimal dPayAmount = BigDecimal.ZERO;
			String sCheckPaymentRefData = "";
			
			HashMap<Integer, String> oDefaultPayements = m_oFuncCheck.getCheckExtraInfoValueListWithIndexBySectionVariable(PosCheckExtraInfo.SECTION_DEFAULT_PAYMENT, PosCheckExtraInfo.VARIABLE_DEFAULT_PAYMENT_DETAIL);
			for (Map.Entry<Integer, String> entry : oDefaultPayements.entrySet()) {
				String sExtraInfoValue = entry.getValue();
				try {
					ArrayList<PosCheckExtraInfo> oPosExtraInfoList = new ArrayList<PosCheckExtraInfo>();
					JSONObject oJSONObject = new JSONObject(sExtraInfoValue);
					sCheckPaymentRefData = "";
					
					Iterator<String> keys = oJSONObject.keys();
					while (keys.hasNext()) {
						String key = keys.next();
						if(key.equals("paym_id")){
							iPaymentId = oJSONObject.optInt("paym_id");
							continue;
						} else if (key.equals("amount")){
							dPayAmount = new BigDecimal(oJSONObject.optString("amount"));
							continue;
						} else if (key.equals(PosCheckExtraInfo.VARIABLE_VOUCHER_NAME))
							sCheckPaymentRefData = oJSONObject.getString(key);
						
						// add extra info to payment
						PosCheckExtraInfo oPaymentExtraInfo = this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, key, oJSONObject.getString(key));
						oPaymentExtraInfo.setCheckId(m_oFuncCheck.getCheckId());
						oPosExtraInfoList.add(oPaymentExtraInfo);
					}
					if(oPosExtraInfoList.isEmpty())
						oPosExtraInfoList = null;
					if(!preProcessEachPayment(iPaymentId, sCheckPaymentRefData, oPosExtraInfoList, true, dPayAmount))
						rollBackCheckForCancelPayment(iPaymentId);
				} catch (JSONException e) {
				}
			}
			
			// assign sequence number to new item
			for (List<FuncCheckItem> oPartyItemList : m_oFuncCheck.getWholeItemList()) {
				for (FuncCheckItem oFuncCheckItem : oPartyItemList) {
					if (oFuncCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_DEFAULT_PAYMENT,
							PosCheckExtraInfo.VARIABLE_DEFAULT_PAYMENT_DETAIL) != null
							&& !oFuncCheckItem
							.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_DEFAULT_PAYMENT,
									PosCheckExtraInfo.VARIABLE_DEFAULT_PAYMENT_DETAIL)
							.isEmpty()) {
						try {
							JSONObject oJSONObject = new JSONObject(oFuncCheckItem.getExtraInfoBySectionAndVariable(
									PosCheckExtraInfo.SECTION_DEFAULT_PAYMENT,
									PosCheckExtraInfo.VARIABLE_DEFAULT_PAYMENT_DETAIL));
							if (oJSONObject.has("paym_id"))
								iPaymentId = oJSONObject.optInt("paym_id");
							if (oJSONObject.has("amount"))
								dPayAmount = new BigDecimal(oJSONObject.optString("amount"));
							if(!preProcessEachPayment(iPaymentId, "", null, true, dPayAmount))
								rollBackCheckForCancelPayment(iPaymentId);
						} catch (JSONException e) {
						}
					}
				}
			}
		}
		PosPaymentMethodList oPosPaymentMethodList = m_oFuncPayment.getPaymentMethodList();
		// add the old payemnt
		for(PosCheckPayment oOldPayment: m_oFuncCheck.getCheckPaymentList()) {
			m_oFuncPayment.addOldPayment(oOldPayment);
			
			// add currency to list
			if(oOldPayment.isPayByForeignCurrency())
				m_oFuncPayment.addCurrencyToList(oOldPayment.getCurrencyCode());
			
			String sPaymentMethod = "";
			if (oOldPayment.getShortName(AppGlobal.g_oCurrentLangIndex.get()).isEmpty())
				sPaymentMethod = oOldPayment.getName(AppGlobal.g_oCurrentLangIndex.get());
			else
				sPaymentMethod = oOldPayment.getShortName(AppGlobal.g_oCurrentLangIndex.get());
			
			String sPaymentInfo1 = "", sPaymentInfo2 = ""; //Partial payment second enhances
			if (oOldPayment.getPaymentType().equals(PosCheckPayment.PAYMENT_TYPE_DUTY_MEAL)) {
				int iUserId  = oOldPayment.getMealUserId();
				//UserUser oEmployee = new UserUser();
				//oEmployee.readByUserId(iUserId);
				UserUser oEmployee = m_oAllUserList.get(iUserId);
				
				sPaymentInfo1 = oEmployee.getFirstName(AppGlobal.g_oCurrentLangIndex.get()) + " "
						+ oEmployee.getLastName(AppGlobal.g_oCurrentLangIndex.get());
				sPaymentInfo2 = oEmployee.getNumber();
			} else {
				if (oOldPayment.getRefData(1) != null)
					sPaymentInfo1 = oOldPayment.getRefDataValueByIndexWithoutKey(1);
				
				if (oOldPayment.getRefData(2) != null)
					sPaymentInfo2 = oOldPayment.getRefData(2);
			}
			
			m_oFrameCashier.addPayment(0, m_oFuncPayment.getCheckPaymentList().size() - 1, sPaymentMethod,
					sPaymentInfo1, sPaymentInfo2, m_oFuncPayment.getCurrentBalance(), oOldPayment.getPayTips(),
					oOldPayment.getPayTotal(), false, false, true, true);
			
			// update old payment basket and payment info background color
			m_oFrameCashier.updatePartialPaymentBasketFieldBackgroundColor(0, m_oFuncPayment.getCheckPaymentList().size() -1);
			if (!sPaymentInfo1.isEmpty())
				m_oFrameCashier.updatePartialPaymentInfo1BackgroundColor(0, m_oFuncPayment.getCheckPaymentList().size() -1);
			if (!sPaymentInfo2.isEmpty())
				m_oFrameCashier.updatePartialPaymentInfo2BackgroundColor(0, m_oFuncPayment.getCheckPaymentList().size() -1);
			
		}
		
		// check any deposit amount by retrieving advance order, set the default payment for deposit amount in cashier screen
		if (m_oFuncCheck.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_REFERENCE, 0) &&
				m_oFuncCheck.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_DEPOSIT_AMOUNT, 0)) {
			String sAdvancedOrderReferenceNo = m_oFuncCheck.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_REFERENCE);
			String sAdvancedOrderDepositAmount = m_oFuncCheck.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_DEPOSIT_AMOUNT);
			if (!sAdvancedOrderDepositAmount.isEmpty()) {
				BigDecimal dDepositAmount = new BigDecimal(sAdvancedOrderDepositAmount.toString());
				HashMap<String, String> oResultSettingMap = getAdvanceOrderDefaultPaymentMethodForDeposit();
				if (oResultSettingMap.get("support").equals("y")) {
					int iPaymentId = Integer.parseInt(oResultSettingMap.get("paymentId"));
					addDefaultDepositPaymentForAdvancedOrder(sAdvancedOrderReferenceNo, dDepositAmount, iPaymentId);
				}
			}
		}
		return true;
	}
	
	// Load check for cashier mode
	private void loadCheckForCashierMode(String sCheckPrefixNo, String sTableNo, String sTableExtension) {
		// Force to turn off the flag for preventing multiple open check to prevent forever blocking
		m_sPreventMulitpleOpenCheckFlag = "";
		
		if (sCheckPrefixNo.length() > 0) {
			// Get table no. and extension by check
			FuncCheck oFuncCheck = new FuncCheck();
			if (!oFuncCheck.getCheckByCheckNum(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
					AppGlobal.g_oFuncOutlet.get().getOutletId(), sCheckPrefixNo, true)) {
				// Fail to load check
				showErrorDialogBox(oFuncCheck.getLastErrorMessage());
				return;
			}
			
			sTableNo = oFuncCheck.getTableNo();
			sTableExtension = oFuncCheck.getTableExtension();
		}
		
		if (openCheck(sTableNo, sTableExtension, false, 0, false, false) == false) {
			// Fail to open check
			
			// Free the check object
			m_oFuncCheck = null;
			
			return;
		}
		
		//Block if Split Check Auto Function Not Finished
		if (AppGlobal.g_oFuncStation.get().getCheckAutoFunctionsOption()
				&& m_oFuncCheck.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_AUTO_FUNCTIONS,
				PosCheckExtraInfo.VARIABLE_FINISH, 0)) {
			//check if split auto func not finished and not processing previously
			if(m_oFuncCheck.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_AUTO_FUNCTIONS,
					PosCheckExtraInfo.VARIABLE_FINISH).equals(PosCheckExtraInfo.VALUE_FALSE)){
				showErrorDialogBox(AppGlobal.g_oLang.get()._("auto_function_not_done"));
				m_oFrameCashier.clearPaymentHeader(true);
				return;
			}
		}
		
		// Pre-checking for payment
		if (preCheckingForPayment() == false) {
			// Unlock the table
			m_oFuncCheck.unlockTable(true, false);
			
			// Free the check object
			m_oFuncCheck = null;
			
			return;
		}
		
		// Clear the screen for new check
		m_oFrameCashier.clearPaymentHeader(true);
		m_oFrameCashier.clearPaymentBasket();
		m_oFrameDirectPaymentResult.clearPaymentBasket();
		
		if(AppGlobal.g_oFuncStation.get().isPartialPayment()) {
			// add the old payments in the cashier screen
			int iPaymentIndex = 0;
			PosPaymentMethodList oPosPaymentMethodList = m_oFuncPayment.getPaymentMethodList();
			for(PosCheckPayment oOldPayment: m_oFuncCheck.getCheckPaymentList()) {
				String sPaymentMethod = "";
				if (oOldPayment.getShortName(AppGlobal.g_oCurrentLangIndex.get()).isEmpty())
					sPaymentMethod = oOldPayment.getName(AppGlobal.g_oCurrentLangIndex.get());
				else
					sPaymentMethod = oOldPayment.getShortName(AppGlobal.g_oCurrentLangIndex.get());
				
				String sPaymentInfo1 = "", sPaymentInfo2 = ""; //Partial payment second enhances
				if (oOldPayment.getPaymentType().equals(PosCheckPayment.PAYMENT_TYPE_DUTY_MEAL)) {
					int iUserId  = oOldPayment.getMealUserId();
					//UserUser oEmployee = new UserUser();
					//oEmployee.readByUserId(iUserId);
					UserUser oEmployee = m_oAllUserList.get(iUserId);
					
					sPaymentInfo1 = oEmployee.getFirstName(AppGlobal.g_oCurrentLangIndex.get()) + " "
							+ oEmployee.getLastName(AppGlobal.g_oCurrentLangIndex.get());
					sPaymentInfo2 = oEmployee.getNumber();
				} else {
					if (oOldPayment.getRefData(1) != null)
						sPaymentInfo1 = oOldPayment.getRefDataValueByIndexWithoutKey(1);
					
					if (oOldPayment.getRefData(2) != null)
						sPaymentInfo2 = oOldPayment.getRefData(2);
				}
				
				m_oFrameCashier.addPayment(0, iPaymentIndex, sPaymentMethod,
						sPaymentInfo1, sPaymentInfo2, m_oFuncPayment.getCurrentBalance(), oOldPayment.getPayTips(),
						oOldPayment.getPayTotal(), false, false, true, true);
				
				// update check total in cashier screen
				m_oFuncPayment.setCurrentBalance(m_oFuncCheck.getCheckTotal().subtract(m_oFuncPayment.getPaidBalance()));
				
				// update old payment basket and payment info background color
				m_oFrameCashier.updatePartialPaymentBasketFieldBackgroundColor(0, iPaymentIndex);
				if (!sPaymentInfo1.isEmpty())
					m_oFrameCashier.updatePartialPaymentInfo1BackgroundColor(0, iPaymentIndex);
				if (!sPaymentInfo2.isEmpty())
					m_oFrameCashier.updatePartialPaymentInfo2BackgroundColor(0, iPaymentIndex);
				m_oFrameCashier.updateBasketPaymentAmount(0, iPaymentIndex, StringLib.BigDecimalToString(oOldPayment.getPayTotal(), AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal()));
				m_oFrameCashier.updateBasketPaymentTips(0, iPaymentIndex, StringLib.BigDecimalToString(oOldPayment.getPayTips(), AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal()));
				
				iPaymentIndex++;
			}
		}
		else
			// Hide the result page
			m_oFrameCashier.showPaymentResult(false, "", "", "", "", "", "", "", "", "", "", false,
					StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, ""), "",true);
		
		// Update cashier mode screen
		String sTable = m_oFuncCheck.getTableName()[AppGlobal.g_oCurrentLangIndex.get() - 1];
		
		if(AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode)) {
			if(sTableExtension.length() > 0 && sTableExtension.substring(sTableExtension.length() - 1).compareTo(AppGlobal.BAR_TAB_TABLE_EXTENSION) == 0)
				sTable = StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, AppGlobal.g_oLang.get()._("auto"))[AppGlobal.g_oCurrentLangIndex.get() - 1];
		}
		
		m_oFrameCashier.setTable(sTable);
		m_oFrameCashier.setCheckNo(m_oFuncCheck.getCheckPrefixNo());
		m_oFrameCashier.setTotal(AppGlobal.g_oFuncOutlet.get().roundCheckAmountToString(m_oFuncCheck.getCheckTotal()));
		m_oFrameCashier.setSurcharge(AppGlobal.g_oFuncOutlet.get().roundCheckAmountToString(BigDecimal.ZERO));
		m_oFrameCashier.setTotalDue(AppGlobal.g_oFuncOutlet.get().roundCheckAmountToString(m_oFuncCheck.getCheckTotal()));
		Integer dDecimal = AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal();
		dDecimal = AppGlobal.g_oFuncOutlet.get().getCheckRoundDecimal();
		m_oFrameCashier.setBalance(StringLib.BigDecimalToString(m_oFuncPayment.getCurrentBalance(),
				dDecimal));
		
		// Set check to be loaded or not
		m_bIsCheckLoadedForCashierMode = true;
		
		m_oFrameCashier.setIsCheckLoaded(true, false);
	}
	
	public void handlePaymentKey(int iPaymId, String sParameter, HashMap<String, String> oPaymentInfo){
		JSONObject oParameter = null;
		boolean bFullPayment = false;
		boolean bHaveValue = false;
		boolean bAutoSendCheck = false;
		String sReferenceNo = "";
		m_oFuncPayment.setIsNextDummyPayment(false);
		
		//check if the check is loaded
		if(!m_oFrameCashier.isCheckLoaded() && m_iCashierMode == 1) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("check_is_not_loaded"));
			return;
		}
		
		// Get the payment method object
		PosPaymentMethod oPosPaymentMethod = m_oFuncPayment.getPaymentMethodList().getPaymentMethodList().get(iPaymId);
		if (oPosPaymentMethod == null) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("no_such_payment_method"));
			return;
		}
		
		//check if user have authority
		ArrayList<PosCheckExtraInfo> oPaymentExtraInfoList = new ArrayList<PosCheckExtraInfo>();
		if(!handlePaymentMethodAuthority(oPosPaymentMethod, oPaymentExtraInfoList))
			return;
		
		// Non revenue payment method is not allowed while the check is marked liability
		if(m_oFuncCheck.isLiability() == true && oPosPaymentMethod.getNonRevenue().equals(PosPaymentMethod.NON_REVENUE_YES)){
			showErrorDialogBox(AppGlobal.g_oLang.get()._("non_revenue_payment_method_is_not_allowed"));
			return;
		}
		
		// Under use panel to select payment method for function mode
		if (m_bUseCashierPanelToSelectPaymentMethod) {
			PosPaymentMethodList oPosPaymentMethodList = m_oFuncPayment.getPaymentMethodList();
			if (oPosPaymentMethodList.getPaymentMethodList().containsKey(iPaymId) == false) {
				// No payment method is found
				showErrorDialogBox(AppGlobal.g_oLang.get()._("no_such_payment_method"));
				return;
			}
			
			int iFuncId = m_iUsePanelToSelectItemModeCurrentFuncId;
			if (iFuncId == m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.assign_default_payment.name())) {
				// Ask amount
				FormInputBox oFormInputBox;
				
				oFormInputBox = new FormInputBox(this);
				oFormInputBox.init();
				oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DECIMAL);
				oFormInputBox.setEnterBlockUI(true);
				oFormInputBox.setTitle(oPosPaymentMethod.getName(AppGlobal.g_oCurrentLangIndex.get()));
				oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("please_input_amount") + ":");
				oFormInputBox.show();
				
				String sInput = oFormInputBox.getInputValue();
				if (sInput != null) {
					BigDecimal dAmount = BigDecimal.ZERO;
					try {
						dAmount = new BigDecimal(sInput);
					} catch (Exception e) {
						AppGlobal.stack2Log(e);
					}
					String sAmount = AppGlobal.g_oFuncOutlet.get().roundPaymentAmountToString(dAmount);
					// Add to basket
					m_oFramePanelPaymentMethodSelectPanel.addPaymentMethod(0, iPaymId,
							oPosPaymentMethod.getName(AppGlobal.g_oCurrentLangIndex.get()), sAmount, null);
				}
			}
			return;
		}
		
		// Checking allow to add payment for partial payment
		if (AppGlobal.g_oFuncStation.get().isPartialPayment() && m_oFrameCashier.getCurrentStep() != 4 && m_oFuncCheck.getPaid().equals(PosCheck.PAID_PARTIAL_PAID)) {
			if(m_oFuncPayment.getAllPaymentTotal().abs().compareTo(m_oFuncCheck.getCheckTotal().abs()) >= 0) {
				// Not allow add payment if total payment total > check total
				showErrorDialogBox(AppGlobal.g_oLang.get()._("existing_payment_total_is_already_equal_to_or_exceed_current_check_total"));
				return;
			}
		}
		
		// Handle setup in button parameter
		if (sParameter.length() > 0) {
			try {
				oParameter = new JSONObject(sParameter);
				if (oParameter.has(PosDisplayPanelLookup.PARAM_FULL_PAYMENT))
					bFullPayment = oParameter.optBoolean(PosDisplayPanelLookup.PARAM_FULL_PAYMENT, false);
				
				if (oParameter.has(PosDisplayPanelLookup.PARAM_AUTO_SEND_CHECK))
					bAutoSendCheck = oParameter.optBoolean(PosDisplayPanelLookup.PARAM_AUTO_SEND_CHECK, false);
				
				if (oParameter.has(PosDisplayPanelLookup.PARAM_REFERENCE_NO))
					sReferenceNo = oParameter.optString(PosDisplayPanelLookup.PARAM_REFERENCE_NO);
			} catch (JSONException e) {
				e.printStackTrace();
				// Error setting
				AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
						AppGlobal.g_oFuncUser.get().getUserId() + "",
						"Error parameter: " + sParameter + ", exception: " + AppGlobal.stackToString(e));
			}
		}
		
		// Check if payment method have set rounding method, if have set rounding method and button set full payment, system will block the payment
		if(bFullPayment && !oPosPaymentMethod.getRoundingMethod().isEmpty()){
			showErrorDialogBox(AppGlobal.g_oLang.get()._("dummy_payment_not_support_direct_payment_with_full_payment_setting"));
			return;
		}
		
		// Check payment support E-Signature
		// Payment clicked
		if (AppGlobal.g_oFuncStation.get().isPartialPayment() && m_oFrameCashier.getCurrentStep() == 4) {
			showAttentionDialogBox(AppGlobal.g_oLang.get()._("action_not_allowed")
					+ System.lineSeparator() +
					AppGlobal.g_oLang.get()._("please_exit_check"));
			return;
		}
		
		if (m_iCashierMode == 0 || m_bIsCheckLoadedForCashierMode == false) {
			AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
					AppGlobal.g_oFuncUser.get().getUserId() + "", "Function: Direct payment");
			
			// block direct payment for Bally interface
			if (oPosPaymentMethod.isGamingInterfacePayment(InfVendor.KEY_BALLY)) {
				this.showAttentionDialogBox(AppGlobal.g_oLang.get()._("not_support_direct_payment"));
				return;
			}
			
			/*partial send check for direct payment in bar tab mode if
			 *1: current mode is bar tab mode
			 *2: isSkipPrintCheckForPayment set as true in config by location
			 *3: the payment button parameter "auto send check" set as "yes"
			 *4: current payment is direct payment
			 *5: new item exist */
			if (AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) && m_oFuncCheck.hasNewItem(false)
					&& AppGlobal.g_oFuncStation.get().isSkipPrintCheckForPayment() && bAutoSendCheck) {
				if (!fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.partial_send_check.name()), "", -1, -1, false, null))
					return;
			}
			
			// First click direct payment, init and start cashier mode for
			// direct payment
			if (this.payCheck(true, bFullPayment) == false)
				return;
		}
		
		// Cashier mode
		int iCurrentStep = m_oFrameCashier.getCurrentStep();
		if (iCurrentStep == 1 || iCurrentStep == 2) {
			// Cannot press payment during ask amount
			return;
		}
		
		boolean bIsSetMemberBeforeSignature = false;
		if (oPosPaymentMethod.isMembershipInterfacePayment(InfVendor.KEY_ASPEN)) {
			List<PosInterfaceConfig> oAspenInterfaceConfigs = oPosPaymentMethod.getInterfaceConfigByTypeAndVendorKey(InfVendor.TYPE_MEMBERSHIP_INTERFACE, InfVendor.KEY_ASPEN);
			if(oAspenInterfaceConfigs.get(0).getConfigValue() != null && oAspenInterfaceConfigs.get(0).getConfigValue().has("general_setup")){
				JSONObject oAspenGeneralSetup = oAspenInterfaceConfigs.get(0).getConfigValue().optJSONObject("general_setup").optJSONObject("params");
				bIsSetMemberBeforeSignature = oAspenGeneralSetup.has("display_member_enquiry_before_esignature") &&
						oAspenGeneralSetup.optJSONObject("display_member_enquiry_before_esignature").optString("value", "0").equals("1");
			}
		}
		
		// Check payment support E-Signature
		if (oPosPaymentMethod.captureEsignature() && !bIsSetMemberBeforeSignature) {
			if (oPosPaymentMethod.isMembershipInterfacePayment(InfVendor.KEY_GOLDEN_CIRCLE) && !oPosPaymentMethod.isVoucherPaymentType()) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("payment_is_aborted"));
				
				return;
			}
			
			int iChosenCheckPfmtId = this.getCheckPrintFormatid();
			if (iChosenCheckPfmtId == 0)
				return;
			
			FormESignature oFormESignature = new FormESignature(this,
					oPosPaymentMethod.getName(AppGlobal.g_oCurrentLangIndex.get()));
			String sURL = m_oFuncCheck.previewGuestCheck(iChosenCheckPfmtId, false).optString("url", "");
			oFormESignature.setCheckURL(sURL);
			
			// Display Check slip if the payment method rules is to show check slip first
			if(AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name()) &&
					oPosPaymentMethod.isMobileDisplayCheckSlipFirst())
				oFormESignature.switchDisplayFrame(true);
			oFormESignature.show();
			
			if (oFormESignature.isUserCancel())
				return;
			
			// Return when the E-Signature is empty
			if (oFormESignature.getESignture().isEmpty()) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("fail_to_add_payment"));
				return;
			}
			
			// add the extra info in payment
			oPaymentExtraInfoList.add(
					this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE,
							PosCheckExtraInfo.VARIABLE_E_SIGNATURE, oFormESignature.getESignture()));
		}
		
		// Add the payment to cashier mode
		addPaymentToCashier(iPaymId, sReferenceNo, oPaymentExtraInfoList, false, oParameter, bFullPayment, bHaveValue);
	}
	
	// Add the payment to cashier mode
	public void addPaymentToCashier(int iPaymId, String sReferenceNo, ArrayList<PosCheckExtraInfo> oPaymentExtraInfoList,
	                                boolean bFromDefaultpayment, JSONObject oParameter, boolean bFullPayment, boolean bHaveValue) {
		PosPaymentMethod oPosPaymentMethod = m_oFuncPayment.getPaymentMethodList().getPaymentMethodList().get(iPaymId);
		if (preProcessEachPayment(iPaymId, sReferenceNo, oPaymentExtraInfoList, false, BigDecimal.ZERO)) {
			// Get payment amount from panel button or direct payment
			BigDecimal dPaymentAmount = BigDecimal.ZERO;
			BigDecimal dTipsAmount = BigDecimal.ZERO;
			boolean bPayByForeignCurrency = false;
			BigDecimal dFCRate = BigDecimal.ONE;
			BigDecimal dPaymentAmtInForeignCurrency = BigDecimal.ZERO;
			BigDecimal dTipsAmtInForeignCurrency = BigDecimal.ZERO;
			
			if (bFullPayment) {
				// Full payment
				dPaymentAmount = m_oFuncPayment.getCurrentBalance();
				bHaveValue = true;
			} else if (oParameter != null) {
				// Handle setup in button parameter
				try {
					if (oParameter.has(PosDisplayPanelLookup.PARAM_DEFAULT_AMOUNT)) {
						// Check if the default amount is fixed amount or
						// percentage amount
						String sValue = oParameter.optString(PosDisplayPanelLookup.PARAM_DEFAULT_AMOUNT, "0.0");
						if (sValue.length() > 0 && sValue.substring(sValue.length() - 1).equals("%")) {
							// Calculate amount by percentage
							String sPercentage = sValue.substring(0, sValue.length() - 1);
							BigDecimal dPercentage = BigDecimal.ZERO;
							try {
								dPercentage = new BigDecimal(sPercentage);
								dPercentage = dPercentage.divide(new BigDecimal("100.0"));
							} catch (Exception e) {
								AppGlobal.stack2Log(e);
							}
							dPaymentAmount = m_oFuncCheck.getCheckTotal().multiply(dPercentage);
							dPaymentAmount = AppGlobal.g_oFuncOutlet.get()
									.roundPaymentAmountToBigDecimal(dPaymentAmount);
							bHaveValue = true;
						} else {
							/*PosPaymentMethodList oPosPaymentMethodList = m_oFuncPayment.getPaymentMethodList();
							oPosPaymentMethod = oPosPaymentMethodList.getPaymentMethodList().get(iPaymId);
							
							if(oPosPaymentMethod.getPaymentType().equals(PosPaymentMethod.PAYMENT_TYPE_REWRITE_CARD) && m_iCashierMode == 2){
								dPaymentAmount = m_oFuncPayment.getCheckPaymentList().get(m_oFuncPayment.getCheckPaymentListCount() - 1).getPayTotal();
								bHaveValue = true;
								System.out.println("FormMain 10102 " + m_oFuncPayment.getCheckPaymentList().get(m_oFuncPayment.getCheckPaymentListCount() - 1).getPayTotal());
							} else {*/
							// Calculate amount by fixed amount
							dPaymentAmount = new BigDecimal(oParameter.optString(PosDisplayPanelLookup.PARAM_DEFAULT_AMOUNT, "0.0"));
							if (!dPaymentAmount.equals(BigDecimal.ZERO))
								bHaveValue = true;
							//}
						}
					}
				} catch (Exception e) {
					AppGlobal.stack2Log(e);
				}
			}
			
			if (!bHaveValue) {
				if (m_iCashierMode == 2) {
					// Direct payment key
					// Ask payment amount
					// Get Amount
					dPaymentAmount = m_oFuncPayment.getCurrentBalance();
					PosPaymentMethodList oPosPaymentMethodList = m_oFuncPayment.getPaymentMethodList();
					oPosPaymentMethod = oPosPaymentMethodList.getPaymentMethodList().get(iPaymId);
					bPayByForeignCurrency = oPosPaymentMethod
							.isPayByForeignCurrency(AppGlobal.g_oFuncOutlet.get().getCurrencyCode());
					OutCurrency oCurrency = null;
					
					// Calculate the payment amount in foreign currency
					if (bPayByForeignCurrency) {
						oCurrency = m_oFuncPayment.getCurrency(oPosPaymentMethod.getCurrencyCode());
						dFCRate = oCurrency.getRate();
						dPaymentAmtInForeignCurrency = dPaymentAmount.multiply(dFCRate);
						dPaymentAmtInForeignCurrency = oPosPaymentMethod
								.currencyRoundUpAmountWithCurrenctDecimalToBigDecimal(dPaymentAmtInForeignCurrency);
						dTipsAmtInForeignCurrency = dTipsAmount.multiply(dFCRate);
						dTipsAmtInForeignCurrency = oPosPaymentMethod
								.currencyRoundUpAmountWithCurrenctDecimalToBigDecimal(dTipsAmtInForeignCurrency);
					}
					
					//Initialize the Direct Payment Panel and Cashier Basket for Direct Payment Input procedure
					//*** skip for preset amount type payments. e.g. voucher, coupon ***
					//	Workflow of this If-case:
					//		- prepare the Cashier basket (e.g. Payment Type = "Cash(HKD)", amount = 0, tips = 0)
					//		- prepare direct payment panel for Inputting Amount and Tips
					if (!oPosPaymentMethod.isDutyMealPaymentType() && !oPosPaymentMethod.isOnCreditPaymentType()
							&& !oPosPaymentMethod.isVoucherPaymentType() && !oPosPaymentMethod.isCouponPaymentType()
							&& !oPosPaymentMethod.isMembershipInterfacePayment(InfVendor.KEY_GENERAL_V2)//point redeem type
							&& !oPosPaymentMethod.isOctopusPaymentType() && !oPosPaymentMethod.isReservationPayment()
							&& !oPosPaymentMethod.isRewriteCardPaymentType() && oPosPaymentMethod.isPaymentUseDirectPaymentPanel()) {
						// First initial the basket
						this.editPayment(0, m_oFuncPayment.getCheckPaymentList().size() - 1, BigDecimal.ZERO,
								BigDecimal.ZERO, true);
						
						boolean bNeedTips = false;
						if (oPosPaymentMethod.HaveTips() && !AppGlobal.g_oFuncStation.get()
								.isPaymentSkipTips(oPosPaymentMethod.getPaymentCode()))
							bNeedTips = true;
						
						// Get short name if exist
						String sPaymentMethod;
						if (oPosPaymentMethod.getShortName(AppGlobal.g_oCurrentLangIndex.get()).isEmpty())
							sPaymentMethod = oPosPaymentMethod.getName(AppGlobal.g_oCurrentLangIndex.get());
						else
							sPaymentMethod = oPosPaymentMethod.getShortName(AppGlobal.g_oCurrentLangIndex.get());
						
						// Show the direct payment panel
						if (AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name()))
							m_oFrameDirectPaymentPanel.showCheckInfo(m_oFuncCheck.getCheckPrefixNo(),
									m_oFuncCheck.getTableNoWithExtensionForDisplay());
						m_oFrameDirectPaymentPanel.showPanel(sPaymentMethod, dPaymentAmount, dTipsAmount, bNeedTips,
								bPayByForeignCurrency, oPosPaymentMethod, oCurrency, dPaymentAmtInForeignCurrency,
								dTipsAmtInForeignCurrency);
						
						// add the payment record to direct payment panel
						int iPaymentRecordIndex = 0;
						for (PosCheckPayment oPosCheckPaymentRecord : m_oFuncPayment.getCheckPaymentList()) {
							
							String sPaymentMethodName = "";
							if (oPosCheckPaymentRecord.getShortName(AppGlobal.g_oCurrentLangIndex.get()).isEmpty())
								sPaymentMethodName = oPosCheckPaymentRecord.getName(AppGlobal.g_oCurrentLangIndex.get());
							else
								sPaymentMethodName = oPosCheckPaymentRecord.getShortName(AppGlobal.g_oCurrentLangIndex.get());
							
							String sPaymentInfo1 = "", sPaymentInfo2 = ""; //Partial payment second enhances
							if (oPosCheckPaymentRecord.getPaymentType().equals(PosCheckPayment.PAYMENT_TYPE_DUTY_MEAL)) {
								int iUserId  = oPosCheckPaymentRecord.getMealUserId();
								//UserUser oEmployee = new UserUser();
								//oEmployee.readByUserId(iUserId);
								UserUser oEmployee = m_oAllUserList.get(iUserId);
								
								sPaymentInfo1 = oEmployee.getFirstName(AppGlobal.g_oCurrentLangIndex.get()) + " "
										+ oEmployee.getLastName(AppGlobal.g_oCurrentLangIndex.get());
								sPaymentInfo2 = oEmployee.getNumber();
							} else {
								if (oPosCheckPaymentRecord.getRefData(1) != null)
									sPaymentInfo1 = oPosCheckPaymentRecord.getRefDataValueByIndexWithoutKey(1);
								
								if (oPosCheckPaymentRecord.getRefData(2) != null)
									sPaymentInfo2 = oPosCheckPaymentRecord.getRefData(2);
							}
							PosPaymentMethod oPosPaymentMethodRecord = oPosPaymentMethodList.getPaymentMethod(oPosCheckPaymentRecord.getPaymentMethodId());
							if(oPosPaymentMethodRecord.isGamingInterfacePayment(InfVendor.KEY_BALLY)) {
								PosInterfaceConfig oSelectedGamingInterfaceConfig = oPosPaymentMethod.getInterfaceConfig(InfInterface.TYPE_GAMING_INTERFACE).get(0);
								JSONObject oPosInterfaceConfigJson = oSelectedGamingInterfaceConfig.getConfigValue();
								String sPaymentType = "";
								if (oPosInterfaceConfigJson.has("payment_setup")
										&& oPosInterfaceConfigJson.optJSONObject("payment_setup").has("params") && oPosInterfaceConfigJson
										.optJSONObject("payment_setup").optJSONObject("params").has("payment_type"))
									sPaymentType = oPosInterfaceConfigJson.optJSONObject("payment_setup").optJSONObject("params")
											.optJSONObject("payment_type").optString("value");
								if (sPaymentType.equals(FuncGamingInterface.PAYMENT_TYPE_COMP_SLIP)) {
									PosCheckExtraInfo oGamingPosCheckExtraInfo = oPosCheckPaymentRecord.getExtraInfoFromList("gaming_interface","payment_info", 0);
									if (oGamingPosCheckExtraInfo != null) {
										if(sPaymentInfo1.isEmpty())
											sPaymentInfo1 = AppGlobal.g_oLang.get()._("comp_slip_no")+" : "+oGamingPosCheckExtraInfo.getValue();
										else
											sPaymentInfo2 = AppGlobal.g_oLang.get()._("comp_slip_no")+" : "+oGamingPosCheckExtraInfo.getValue();
									}
								}
							}
							m_oFrameDirectPaymentPanel.addPaymentRecord(0, iPaymentRecordIndex, sPaymentMethodName,
									sPaymentInfo1, sPaymentInfo2, oPosCheckPaymentRecord.getPayTips(),
									oPosCheckPaymentRecord.getPayTotal());
							
							// update old payment basket and payment info background color
							if (oPosCheckPaymentRecord.isOldPayment()) {
								m_oFrameDirectPaymentPanel.updatePartialPaymentBasketFieldBackgroundColor(0, iPaymentRecordIndex);
								if (!sPaymentInfo1.isEmpty())
									m_oFrameDirectPaymentPanel.updatePartialPaymentInfo1BackgroundColor(0, iPaymentRecordIndex);
								if (!sPaymentInfo2.isEmpty())
									m_oFrameDirectPaymentPanel.updatePartialPaymentInfo2BackgroundColor(0, iPaymentRecordIndex);
							}
							iPaymentRecordIndex++;
						}
						
						if (AppGlobal.g_oFuncStation.get().supportTaiwanGui()) {
							PosTaiwanGuiTran oTaiwanGuiTran = new PosTaiwanGuiTran();
							boolean bFound = false;
							if (AppGlobal.g_oFuncStation.get().isTaiwanGuiGeneratedByStation())
								bFound = oTaiwanGuiTran.getLastTaiwanGuiTranByConfigAndBy(
										AppGlobal.g_oFuncStation.get().getTaiwanGuiConfigId(),
										AppGlobal.g_oFuncStation.get().getStationId(), 0, PosTaiwanGuiTran.BY_STATION);
							else
								bFound = oTaiwanGuiTran.getLastTaiwanGuiTranByConfigAndBy(
										AppGlobal.g_oFuncStation.get().getTaiwanGuiConfigId(), 0,
										AppGlobal.g_oFuncOutlet.get().getOutletId(), PosTaiwanGuiTran.BY_OUTLET);
							int iEndNum = AppGlobal.g_oFuncStation.get().getTaiwanGuiEndNum();
							int iNextTransNum = AppGlobal.g_oFuncStation.get().getTaiwanGuiStartNum();
							String sNextTransNum = "";
							if (bFound) {
								iNextTransNum = oTaiwanGuiTran.getTguiNum() + 1;
								sNextTransNum = AppGlobal.g_oFuncStation.get().getTaiwanGuiNumPrefix()
										+ StringLib.fillZeroAtBegin(Integer.toString(iNextTransNum), 8);
							} else
								sNextTransNum = AppGlobal.g_oFuncStation.get().getTaiwanGuiNumPrefix()
										+ StringLib.fillZeroAtBegin(
										Integer.toString(AppGlobal.g_oFuncStation.get().getTaiwanGuiStartNum()),
										8);
							m_oFrameDirectPaymentPanel.showOtherInformation(true);
							m_oFrameDirectPaymentPanel.setOtherInformationHeader(AppGlobal.g_oLang.get()._("next_gui"));
							m_oFrameDirectPaymentPanel.setOtherInformation(sNextTransNum);
							
							if (iEndNum - iNextTransNum + 1 > 0) {
								m_oFrameDirectPaymentPanel
										.setOtherInformationHeader2(AppGlobal.g_oLang.get()._("remain_gui"));
								m_oFrameDirectPaymentPanel
										.setOtherInformation2(Integer.toString(iEndNum - iNextTransNum + 1));
							} else {
								m_oFrameDirectPaymentPanel
										.setOtherInformationHeader2(AppGlobal.g_oLang.get()._("remain_gui"));
								m_oFrameDirectPaymentPanel.setOtherInformation2("0");
							}
							
							m_oFrameDirectPaymentPanel.setOtherInformationHeader3(AppGlobal.g_oLang.get()._("ref_num"));
							m_oFrameDirectPaymentPanel.setOtherInformation3("");
							m_oFrameDirectPaymentPanel.setOtherInformationHeader4(AppGlobal.g_oLang.get()._("carrier"));
							m_oFrameDirectPaymentPanel.setOtherInformation4("");
							m_oFrameDirectPaymentPanel
									.setOtherInformation5(AppGlobal.g_oLang.get()._("taiwan_gui_no_gui"));
						}
					}
				}
			} else {
				// Have default value
				// Finish asking amount, edit the payment amount stored in
				// PosCheckPayment list of FuncPayment
				this.editPayment(0, m_oFuncPayment.getCheckPaymentList().size() - 1, dPaymentAmount, dTipsAmount,
						false);
				
				try {
					AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "", AppGlobal.g_oFuncUser.get().getUserId() + "",
							"Select payment: " + oPosPaymentMethod.getName(1) + " $" + dPaymentAmount.toPlainString());
				} catch (Exception e) {}
				
				m_oFrameCashier.setCurrentStep(0);
			}
			
		} else {
			rollBackCheckForCancelPayment(iPaymId);
			if (m_iCashierMode == 2 && m_oFuncPayment.getCheckPaymentList().size() == 0) {
				String sErrorMessage = isAllowExitCashierPanel();
				if (sErrorMessage.isEmpty()) {
					exitCashier();
					if (!m_oFuncPayment.getCheckPaymentList().isEmpty())
						quitCheck(false);
				} else
					showErrorDialogBox(sErrorMessage);
			}
		}
	}
	
	public boolean preProcessEachPayment(int iPaymId, String sReferenceNo,
	                                     ArrayList<PosCheckExtraInfo> oPaymentExtraInfoList, boolean bFromDefaultPayment, BigDecimal dDefaultValue) {
		PosPaymentMethodList oPosPaymentMethodList = m_oFuncPayment.getPaymentMethodList();
		BigDecimal dPayTotal = BigDecimal.ZERO, dTipsTotal = BigDecimal.ZERO;
		BigDecimal dPaymentTotal = BigDecimal.ZERO; // For setting default value
		BigDecimal dTempPaymentAmount = BigDecimal.ZERO;
		int iRet = 0, iEmployeeId = 0, iMemberId = 0;
		String[] sCheckPaymentRefData = new String[3];
		ArrayList<PosCheckExtraInfo> oCheckPaymentExtraInfos = new ArrayList<PosCheckExtraInfo>();
		String sPaymentInfo1 = "";
		String sPaymentInfo2 = "";
		boolean bExceedCreditLimitForPMS = false;
		boolean bHaveDefaultPaymentAmount = false;
		m_bNeedRollbackForCancelPayment = false;
		
		// Check business hour warning in kiosk mode
		if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) && !crossDateOpenCheckChecking()) {
			// Force exit
			quitCheck(true);
			
			logout(true);
			
			return false;
		}
		
		if (oPaymentExtraInfoList != null)
			oCheckPaymentExtraInfos = oPaymentExtraInfoList;
		
		for (int i = 0; i < 3; i++)
			sCheckPaymentRefData[i] = null;
		
		if (oPosPaymentMethodList.getPaymentMethodList().containsKey(iPaymId) == false) {
			// No payment method is found
			showErrorDialogBox(AppGlobal.g_oLang.get()._("no_such_payment_method"));
			return false;
		}
		
		PosPaymentMethod oPosPaymentMethod = oPosPaymentMethodList.getPaymentMethodList().get(iPaymId);
		
		// check whether have currency attached
		if (oPosPaymentMethod.isPayByForeignCurrency(AppGlobal.g_oFuncOutlet.get().getCurrencyCode())) {
			if (m_oFuncPayment.addCurrencyToList(oPosPaymentMethod.getCurrencyCode()) == false) {
				// No currency setup is found
				showErrorDialogBox(AppGlobal.g_oLang.get()._("no_such_currency_setup") + " : "
						+ oPosPaymentMethod.getCurrencyCode());
				return false;
			}
		}
		
		// check whether have reference number attached to payment
		if (!sReferenceNo.isEmpty())
			sCheckPaymentRefData[1] = sReferenceNo;
		
		// check whether have interface configure attached and interface module
		// existence
		if (oPosPaymentMethod.hasInterfaceConfig()) {
			if (AppGlobal.isModuleSupport(AppGlobal.OPTIONAL_MODULE.pos_interface.name()) == false) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("interface_module_is_not_supported"));
				return false;
			}
		}
		// Check if the payment non-revenue is match or not
		if (m_oFuncPayment.getCheckPaymentList().size() > 0) {
			String sNonRevenue = m_oFuncPayment.getNonRevenue();
			if (!AppGlobal.g_oFuncStation.get().isAllowMixedPayment() && sNonRevenue.equals(oPosPaymentMethod.getNonRevenue()) == false && !m_oFuncCheck.isLiability()) {
				// Non revenue is not matched
				String sErrMsg = "";
				if (sNonRevenue.equals(PosCheckPayment.NON_REVENUE_YES))
					sErrMsg = AppGlobal.g_oLang.get()._("please_select_non_revenue_payment_type");
				else
					sErrMsg = AppGlobal.g_oLang.get()._("please_select_revenue_payment_type");
				showErrorDialogBox(sErrMsg);
				
				return false;
			}
			
			if (AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name())
					&& (m_oFrameOpenTable != null || m_oFrameOpenTableWithQwertyKeyboard != null)) {
				m_oFrameCashier.setVisible(true);
				m_oFrameCashierPanel.setVisible(true);
				
				m_oFrameOrderingBasket.setVisible(false);
				m_oFrameConsolidateItemsOrderingBasket.setVisible(false);
				
				m_oFrameOrderingPanel.setVisible(false);
				
				m_oFrameFuncPanel2.setVisible(false);
			}
		} else {
			// First payment checking
			
			// Check if the round method is override by payment method
			boolean bNeedRound = false;
			// *** need further development
			if (false) {
				// Change the check rounding
				// *** need further development
				AppGlobal.g_oFuncOutlet.get().overrideCheckRoundMethod(true, "", 0);
				
				bNeedRound = true;
			} else if (AppGlobal.g_oFuncOutlet.get().isOverrideCheckRound()) {
				// Roll back rounding
				AppGlobal.g_oFuncOutlet.get().overrideCheckRoundMethod(false, "", 0);
				
				bNeedRound = true;
			}
			
			if (bNeedRound) {
				// Need do rounding
				
				// Recalculate the check
				m_oFuncCheck.calcCheck();
				
				if (m_oFuncCheck.isOldCheck()) {
					// For old check, re-print guest check and update database
					int iChosenCheckPfmtId = 0;
					boolean bPrintCheck = false;
					boolean bDetailCheck = false;
					HashMap<String, Integer> oCheckPfmtInfo = null;
					
					if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food) == false
							&& m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk) == false) {
						oCheckPfmtInfo = selectCheckPrintFormat(true, false, false);
						if (oCheckPfmtInfo.get("result") > 0) {
							// Print check
							bPrintCheck = true;
							
							iChosenCheckPfmtId = oCheckPfmtInfo.get("pfmtId");
							if (oCheckPfmtInfo.get("detailCheck") == 1)
								bDetailCheck = true;
						}
					}
					
					processSendCheck(m_oFuncCheck, bPrintCheck, false, AppGlobal.g_oFuncOutlet.get().getOutletId(),
							AppGlobal.g_oFuncOutlet.get().getOutletNameByIndex(AppGlobal.g_oCurrentLangIndex.get()),
							AppGlobal.g_oFuncStation.get().getCheckPrtqId(), iChosenCheckPfmtId, bDetailCheck, 0, "",
							true, false);
				}
				
				// update check total in cashier screen
				m_oFuncPayment
						.setCurrentBalance(m_oFuncCheck.getCheckTotal().subtract(m_oFuncPayment.getPaidBalance()));
				
				if (m_oFrameCashier.getVisible()) {
					m_oFrameCashier.setTotal(
							AppGlobal.g_oFuncOutlet.get().roundCheckAmountToString(m_oFuncCheck.getCheckTotal()));
					Integer dDecimal = AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal();
					if (AppGlobal.g_oFuncOutlet.get().getCheckRoundDecimal() > AppGlobal.g_oFuncOutlet.get()
							.getPayRoundDecimal())
						dDecimal = AppGlobal.g_oFuncOutlet.get().getCheckRoundDecimal();
					m_oFrameCashier.setBalance(StringLib.BigDecimalToString(m_oFuncPayment.getCurrentBalance(),
							dDecimal));
				}
			}
		}
		
		/*** Check Auto Discount ***/
		boolean bWaiveSC = false, bWaiveTax = false;
		int iAutoDiscId = 0, iChosenCheckPfmtId = 0;
		String sAutoDiscType = "item";
		
		// Waive SC and Tax as necessary
		if (oPosPaymentMethod.isAutoWaiveSc())
			bWaiveSC = true;
		
		if (oPosPaymentMethod.isAutoWaiveTax())
			bWaiveTax = true;
		
		// Check whether have auto discount
		if (!oPosPaymentMethod.getAutoDiscountTypeId().equals("")) {
			iAutoDiscId = Integer.valueOf(oPosPaymentMethod.getAutoDiscountTypeId());
			if (oPosPaymentMethod.isAutoCheckDiscountType())
				sAutoDiscType = "check";
		}
		
		if ((bWaiveSC || bWaiveTax || iAutoDiscId > 0)
				&& AppGlobal.OPERATION_MODE.fine_dining.equals(m_eOperationMode) == true) {
			// ask check print format
			HashMap<String, Integer> oCheckPfmtInfo = null;
			oCheckPfmtInfo = selectCheckPrintFormat(true, false, true);
			// User can skip reprinting the check
			if (oCheckPfmtInfo.get("result") > 0)
				iChosenCheckPfmtId = oCheckPfmtInfo.get("pfmtId");
		}
		
		// Really waive SC/Tax
		if (bWaiveSC || bWaiveTax) {
			int i;
			boolean[] bChosenSc = new boolean[5];
			String[] sChosenTax = new String[25];
			List<HashMap<String, Integer>> oSelectedItem = new ArrayList<HashMap<String, Integer>>();
			
			oSelectedItem = m_oFuncCheck.getSectionItemIndexForCurrentOrderedItem();
			for (i = 0; i < 5; i++)
				bChosenSc[i] = bWaiveSC;
			for (i = 0; i < 25; i++){
				if(bWaiveTax)
					sChosenTax[i] = PosOverrideCondition.CHARGE_TAX_WAIVE;
				else
					sChosenTax[i] = PosOverrideCondition.CHARGE_TAX_NO_CHANGE;
			}
			if (!m_oFuncCheck.addWaiveScTax(false, oSelectedItem, bChosenSc, sChosenTax))
				return false;
		}
		
		// Check whether have auto discount
		if (iAutoDiscId > 0) {
			String sApplyDiscountResult = autoDiscountForPayment(sAutoDiscType, iAutoDiscId, null, null, null);
			if (sApplyDiscountResult.equals(FormMain.FUNC_RESULT_NO_SUCH_RECORD)) {
				AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
						AppGlobal.g_oFuncUser.get().getUserId() + "", "Payment with " + oPosPaymentMethod.getName(1)
								+ " and cannot find the predefine auto discount(id:" + iAutoDiscId + ")");
			} else if (sApplyDiscountResult.equals(FormMain.FUNC_RESULT_FAIL))
				return false;
		}
		
		if (bWaiveSC || bWaiveTax || iAutoDiscId > 0) {
			// update check total in cashier screen
			m_oFuncPayment.setCurrentBalance(m_oFuncCheck.getCheckTotal().subtract(m_oFuncPayment.getPaidBalance()));
			
			if (m_oFrameCashier.getVisible()) {
				m_oFrameCashier
						.setTotal(AppGlobal.g_oFuncOutlet.get().roundCheckAmountToString(m_oFuncCheck.getCheckTotal()));
				if (AppGlobal.g_oFuncOutlet.get().getCheckRoundDecimal() > AppGlobal.g_oFuncOutlet.get()
						.getPayRoundDecimal()) {
					m_oFrameCashier.setBalance(StringLib.BigDecimalToString(m_oFuncPayment.getCurrentBalance(),
							AppGlobal.g_oFuncOutlet.get().getCheckRoundDecimal()));
				} else {
					m_oFrameCashier.setBalance(StringLib.BigDecimalToString(m_oFuncPayment.getCurrentBalance(),
							AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal()));
				}
			}
			
			// print check if fine dining mode
			// only when user choose print format in select print format panel,
			// the check will be printed
			if (AppGlobal.OPERATION_MODE.fine_dining.equals(m_eOperationMode) == true && iChosenCheckPfmtId > 0) {
				showAttentionDialogBox(AppGlobal.g_oLang.get()._("guest_check_will_be_re_print"));
				
				String sResult = "";
				if (m_iCashierMode == 2)
					sResult = this.sendCheck(true, true, true, false, false, iChosenCheckPfmtId, true, 0);
				else
					sResult = this.sendCheck(true, true, false, false, false, iChosenCheckPfmtId, true, 0);
				
				if (sResult.equals(FUNC_RESULT_FAIL))
					return false;
			}
		}
		
		m_bNeedRollbackForCancelPayment = true;
		// Check if payment type is "duty_meal" or "on_credit"
		if (oPosPaymentMethod.isDutyMealPaymentType() || oPosPaymentMethod.isOnCreditPaymentType()) {
			FormInputBox oFormInputBox;
			String sEmployeeNumber = null, sVariable = "", sVariableCheckLimit = "", sVariableOutletLimit = "", sVariableShopLimit = "",
					sPaymentType = "", sLimitPeriod = PosPaymentMethod.CREDIT_LIMIT_PERIOD_MONTH;
			boolean bBreak = false;
			BigDecimal dCreditLimit, dCheckUsedCreditTotal = BigDecimal.ZERO;
			UserUser oEmployee = new UserUser();
			
			if (oPosPaymentMethod.isDutyMealPaymentType()) {
				sVariable = "duty_meal_limit";
				sVariableCheckLimit = "dutymeal_check_limit";
				sVariableOutletLimit = "dutymeal_outlet_limit";
				sVariableShopLimit = "dutymeal_shop_limit";
				sLimitPeriod = AppGlobal.g_oFuncStation.get().getDutyMealOnCreditLimitPeriod(true);
				sPaymentType = PosPaymentMethod.PAYMENT_TYPE_DUTY_MEAL;
			} else if (oPosPaymentMethod.isOnCreditPaymentType()) {
				sVariable = "on_credit_limit";
				sVariableCheckLimit = "on_credit_check_limit";
				sVariableOutletLimit = "on_credit_outlet_limit";
				sVariableShopLimit = "on_credit_shop_limit";
				sLimitPeriod = AppGlobal.g_oFuncStation.get().getDutyMealOnCreditLimitPeriod(false);
				sPaymentType = PosPaymentMethod.PAYMENT_TYPE_ON_CREDIT;
			}
			oEmployee = this.getUserByNameOrNumber();
			iEmployeeId = oEmployee.getUserId();
			sEmployeeNumber = oEmployee.getNumber();
			
			// Check whether employee has max value
			if (oEmployee.getUserId() != 0 && oEmployee.getModuleInfoByModuleAliasAndVariable("pos", sVariable) == null) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("this_employee") + " " + "(" + sEmployeeNumber + ")"
						+ " " + AppGlobal.g_oLang.get()._("cant_apply_this_payment_method"));
				return false;
			}
			
			if(oEmployee.getUserId() == 0)
				return false;
			
			dCreditLimit = new BigDecimal(oEmployee.getModuleInfoByModuleAliasAndVariable("pos", sVariable));
			
			// Calculate the current check used credit total for that employee
			for(PosCheckPayment oPosCheckPayment : m_oFuncPayment.getCheckPaymentList()) {
				if(((oPosPaymentMethod.isDutyMealPaymentType() && oPosCheckPayment.getPaymentType().equals(PosCheckPayment.PAYMENT_TYPE_DUTY_MEAL))
						|| (oPosPaymentMethod.isOnCreditPaymentType() && oPosCheckPayment.getPaymentType().equals(PosCheckPayment.PAYMENT_TYPE_ON_CREDIT)))
						&& oPosCheckPayment.getMealUserId() == iEmployeeId)
					dCheckUsedCreditTotal = dCheckUsedCreditTotal.add(oPosCheckPayment.getPayTotal());
			}
			
			// Checking credit limit (Still having remaining limit)
			BigDecimal dPayTotalSum = BigDecimal.ZERO, dRemainLimit = BigDecimal.ZERO;
			int iShopId = 0, iOutletId = 0, iTmpEmployeeId = 0;
			boolean bOnlyEmployeeLimit = false;
			ArrayList<String> oBusinessDay = new ArrayList<String>();
			
			if(sLimitPeriod.equals(PosPaymentMethod.CREDIT_LIMIT_PERIOD_DAY))
				oBusinessDay = m_oBusinessDayOfADayList;
			else
				oBusinessDay = m_oBusinessDayOfAMonthList;
			
			if(AppGlobal.g_oFuncStation.get().getDutyMealOnCreditLimit(sVariableShopLimit) > 0)
				iShopId = AppGlobal.g_oFuncOutlet.get().getShopId();
			else {
				if(AppGlobal.g_oFuncStation.get().getDutyMealOnCreditLimit(sVariableOutletLimit) <= 0)
					bOnlyEmployeeLimit = true;
			}
			
			iOutletId = AppGlobal.g_oFuncOutlet.get().getOutletId();
			iTmpEmployeeId = iEmployeeId;
			JSONObject oResponseJSONObject = m_oFuncPayment.getPaymentTotalByShopAndOutletAndUser(iShopId, iOutletId, iTmpEmployeeId, sPaymentType, oBusinessDay, bOnlyEmployeeLimit);
			
			if (oResponseJSONObject != null && oResponseJSONObject.has("employeePayTotal"))
				dPayTotalSum = new BigDecimal(oResponseJSONObject.optString("employeePayTotal"));
			dRemainLimit = dCreditLimit.subtract(dPayTotalSum).subtract(dCheckUsedCreditTotal);
			dTempPaymentAmount = dRemainLimit;
			
			if (dRemainLimit.compareTo(BigDecimal.ZERO) <= 0) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("exceed_the_allowed_credit_limit"));
				return false;
			}
			
			// checking check limit
			dCreditLimit = new BigDecimal(AppGlobal.g_oFuncStation.get().getDutyMealOnCreditLimit(sVariableCheckLimit));
			if (dCreditLimit.compareTo(BigDecimal.ZERO) > 0) {
				// Checking credit limit (Still having remaining limit)
				dPayTotalSum = BigDecimal.ZERO;
				dRemainLimit = BigDecimal.ZERO;
				dRemainLimit = dCreditLimit.subtract(dCheckUsedCreditTotal);
				if(dRemainLimit.compareTo(dTempPaymentAmount) < 0)	//If remaining check limit is less than current remaining limit, then use remaining check limit as current allowed one
					dTempPaymentAmount = dRemainLimit;
			}
			
			// checking outlet limit
			dCreditLimit = new BigDecimal(AppGlobal.g_oFuncStation.get().getDutyMealOnCreditLimit(sVariableOutletLimit));
			if (dCreditLimit.compareTo(BigDecimal.ZERO) > 0) {
				// Checking credit limit (Still having remaining limit)
				dPayTotalSum = BigDecimal.ZERO;
				dRemainLimit = BigDecimal.ZERO;
				if (oResponseJSONObject != null && oResponseJSONObject.has("outletPayTotal"))
					dPayTotalSum = new BigDecimal(oResponseJSONObject.optString("outletPayTotal"));
				dRemainLimit = dCreditLimit.subtract(dPayTotalSum).subtract(dCheckUsedCreditTotal);
				if(dRemainLimit.compareTo(dTempPaymentAmount) < 0) //If outlet remaining limit is less than current allowed limit, use outlet remaining limit as current allowed one
					dTempPaymentAmount = dRemainLimit;
				if (dRemainLimit.compareTo(BigDecimal.ZERO) <= 0) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("exceed_the_allowed_credit_limit"));
					return false;
				}
			}
			
			// checking shop limit
			dCreditLimit = new BigDecimal(AppGlobal.g_oFuncStation.get().getDutyMealOnCreditLimit(sVariableShopLimit));
			if (dCreditLimit.compareTo(BigDecimal.ZERO) > 0) {
				// Checking credit limit (Still having remaining limit)
				dPayTotalSum = BigDecimal.ZERO;
				dRemainLimit = BigDecimal.ZERO;
				
				if (oResponseJSONObject != null && oResponseJSONObject.has("shopPayTotal"))
					dPayTotalSum = new BigDecimal(oResponseJSONObject.optString("shopPayTotal"));
				dRemainLimit = dCreditLimit.subtract(dPayTotalSum).subtract(dCheckUsedCreditTotal);
				if(dRemainLimit.compareTo(dTempPaymentAmount) < 0) //If shop remaining limit is less than current allowed limit, use shop remaining limit as current allowed one
					dTempPaymentAmount = dRemainLimit;
				if (dRemainLimit.compareTo(BigDecimal.ZERO) <= 0) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("exceed_the_allowed_credit_limit"));
					return false;
				}
			}
			
			// ask amount
			BigDecimal dTargetAmount = BigDecimal.ZERO;
			String sErrorMessage = "";
			do {
				bBreak = true;
				sErrorMessage = "";
				oFormInputBox = new FormInputBox(this);
				oFormInputBox.init();
				oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.NUMBER);
				oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("limit_amount"));
				oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("please_input_the_amount_to_use") + ": ");
				if(dTempPaymentAmount.compareTo(m_oFuncPayment.getCurrentBalance()) > 0)
					dTempPaymentAmount = m_oFuncPayment.getCurrentBalance();
				oFormInputBox.setDefaultInputValue(dTempPaymentAmount.setScale(AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal(), BigDecimal.ROUND_DOWN).toString());
				oFormInputBox.show();
				
				if (oFormInputBox.getInputValue() == null)
					return false;
				else {
					try {
						dTargetAmount = new BigDecimal(oFormInputBox.getInputValue());
					}catch (NumberFormatException e) {
						sErrorMessage = AppGlobal.g_oLang.get()._("invalid_input");
					}
					
					if(dTargetAmount.compareTo(BigDecimal.ZERO) < 0)
						sErrorMessage = AppGlobal.g_oLang.get()._("invalid_input");
					else if(dTargetAmount.compareTo(dTempPaymentAmount) > 0) {
						sErrorMessage = AppGlobal.g_oLang.get()._("maximum_limit_amount") + ": "
								+ dTempPaymentAmount.setScale(AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal(), BigDecimal.ROUND_DOWN).toString()
								+ System.lineSeparator()
								+ AppGlobal.g_oLang.get()._("remaining_amount_are_not_enough");
					}
					
					if (!sErrorMessage.isEmpty()) {
						showWarningDialogBox(sErrorMessage);
						bBreak = false;
					}
				}
			} while (!bBreak);
			dPaymentTotal = dTargetAmount;
			
			// Add information to basket
			sPaymentInfo1 = oEmployee.getFirstName(AppGlobal.g_oCurrentLangIndex.get()) + " "
					+ oEmployee.getLastName(AppGlobal.g_oCurrentLangIndex.get());
			sPaymentInfo2 = oEmployee.getNumber();
		}
		
		// Check if payment type is "coupon"
		if (oPosPaymentMethod.isCouponPaymentType()) {
			FormInputBox oFormInputBox = null;
			FuncCoupon oRedeemCoupon = null;
			FuncCheckItem oOrderedRedeemItem = null;
			String sCouponNumber = "", sRedeemItemCode = "";
			String iRedeemCitmId = "";
			JSONObject oRefDataJSONObject = new JSONObject();
			boolean bBreak = false;
			
			oRedeemCoupon = new FuncCoupon();
			if (!oRedeemCoupon.isCouponServerSetupExist()) {
				showDialogBox(AppGlobal.g_oLang.get()._("redeem_coupon"), AppGlobal.g_oLang.get()._("missing_coupon_server_setup"));
				return false;
			}
			
			do {
				sCouponNumber = "";
				bBreak = false;
				oRedeemCoupon.reset();
				
				oFormInputBox = new FormInputBox(this);
				oFormInputBox.init();
				oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DEFAULT);
				oFormInputBox.showKeyboard();
				oFormInputBox.setEnterBlockUI(true);
				oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("coupon_number"));
				oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("please_input_the_coupon_number") + ":");
				oFormInputBox.show();
				
				sCouponNumber = oFormInputBox.getInputValue();
				if (sCouponNumber == null)
					return false;
				
				if (sCouponNumber.length() > 20)
					continue;
				
				oRedeemCoupon.setRedeemCheck(m_oFuncCheck.getCheckNo());
				oRedeemCoupon.setStartCoupon(sCouponNumber);
				oRedeemCoupon.setEndCoupon(sCouponNumber);
				if ((oRedeemCoupon.getCouponType()) == false) {
					showDialogBox(AppGlobal.g_oLang.get()._("redeem_coupon"), oRedeemCoupon.getLastErrorMessage());
					return false;
				}
				
				if ((oRedeemCoupon.checkCoupon()) == false) {
					showDialogBox(AppGlobal.g_oLang.get()._("redeem_coupon"), oRedeemCoupon.getLastErrorMessage());
					return false;
				}
				
				if (oRedeemCoupon.getType() != FuncCoupon.COUPON_TYPE_PAID_FIXED_AMOUNT
						&& oRedeemCoupon.getType() != FuncCoupon.COUPON_TYPE_PAID_ITEM) {
					showDialogBox(AppGlobal.g_oLang.get()._("redeem_coupon"), AppGlobal.g_oLang.get()._("it_is_not_a_paid_coupon"));
					return false;
				}
				
				if (oRedeemCoupon.getType() == FuncCoupon.COUPON_TYPE_PAID_ITEM) {
					ArrayList<String> oDefinedRedeemItemList = new ArrayList<String>();
					ArrayList<HashMap<String, String>> oOrderedRedeemItemList = new ArrayList<HashMap<String, String>>();
					HashMap<String, String> oRedeemItemInfo = null;
					ArrayList<String> oRedeemItemIdList = new ArrayList<String>();
					ArrayList<String> oRedeemItemNameList = new ArrayList<String>();
					
					for (int i = 1; i <= 30; i++) {
						oRedeemCoupon.getRedeemItem(i);
						if (oRedeemCoupon.getRedeemItem(i).equals(""))
							continue;
						
						oDefinedRedeemItemList.add(oRedeemCoupon.getRedeemItem(i));
					}
					
					if (oDefinedRedeemItemList.isEmpty()) {
						showDialogBox(AppGlobal.g_oLang.get()._("redeem_coupon"), AppGlobal.g_oLang.get()._("no_redeem_items_defined"));
						return false;
					}
					
					oOrderedRedeemItemList = m_oFuncCheck.getOrderedRedeemItemCodeList(oDefinedRedeemItemList);
					if (oOrderedRedeemItemList.isEmpty()) {
						showDialogBox(AppGlobal.g_oLang.get()._("redeem_coupon"), AppGlobal.g_oLang.get()._("no_redeem_item_ordered"));
						return false;
					}
					
					if (oOrderedRedeemItemList.size() == 1) {
						oRedeemItemInfo = oOrderedRedeemItemList.get(0);
						sRedeemItemCode = oRedeemItemInfo.get("code");
						
					} else {
						for (HashMap<String, String> oOrderedItemInfo : oOrderedRedeemItemList) {
							oRedeemItemIdList.add(oOrderedItemInfo.get("code"));
							oRedeemItemNameList.add(oOrderedItemInfo.get("name"));
						}
						
						FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
						oFormSelectionBox.initWithSingleSelection(
								AppGlobal.g_oLang.get()._("please_select_the_redeem_item"), oRedeemItemNameList, false);
						oFormSelectionBox.show();
						
						if (oFormSelectionBox.isUserCancel())
							return false;
						else
							sRedeemItemCode = oRedeemItemIdList.get(oFormSelectionBox.getResultList().get(0));
					}
					
					oOrderedRedeemItem = m_oFuncCheck.getTargetRedeemItemByItemCode(sRedeemItemCode);
					if (oOrderedRedeemItem == null)
						return false;
					iRedeemCitmId = oOrderedRedeemItem.getCheckItem().getCitmId();
					
					if (oOrderedRedeemItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_ONLINE_COUPON,
							PosCheckExtraInfo.VARIABLE_REDEEM_COUNT) != null) {
						int iRedeemCount = Integer.valueOf(oOrderedRedeemItem.getExtraInfoBySectionAndVariable(
								PosCheckExtraInfo.SECTION_ONLINE_COUPON, PosCheckExtraInfo.VARIABLE_REDEEM_COUNT))
								.intValue();
						iRedeemCount++;
						oOrderedRedeemItem.updateExtraInfoValue(PosCheckExtraInfo.BY_ITEM,
								PosCheckExtraInfo.SECTION_ONLINE_COUPON, PosCheckExtraInfo.VARIABLE_REDEEM_COUNT,
								String.valueOf(iRedeemCount));
					} else
						oOrderedRedeemItem.addExtraInfo(PosCheckExtraInfo.BY_ITEM,
								PosCheckExtraInfo.SECTION_ONLINE_COUPON, PosCheckExtraInfo.VARIABLE_REDEEM_COUNT, "1");
				}
				
				try {
					oRefDataJSONObject.put("coupon_number", sCouponNumber);
					if (oRedeemCoupon.getType() == FuncCoupon.COUPON_TYPE_PAID_ITEM && !iRedeemCitmId.equals("")) {
						oRefDataJSONObject.put("redeem_item_code", String.valueOf(sRedeemItemCode));
						oRefDataJSONObject.put("redeem_citm_id", String.valueOf(iRedeemCitmId));
					}
					sCheckPaymentRefData[0] = oRefDataJSONObject.toString();
					
					if (oRedeemCoupon.getType() == FuncCoupon.COUPON_TYPE_PAID_ITEM && !iRedeemCitmId.equals("")) {
						if (oOrderedRedeemItem.getCheckItem().getQty().equals(new BigDecimal("1.0")))
							dPaymentTotal = oOrderedRedeemItem.getCheckItem().getRoundTotal();
						else
							dPaymentTotal = oOrderedRedeemItem.getCheckItem().getRoundTotal()
									.divide(oOrderedRedeemItem.getCheckItem().getQty());
					} else
						dPaymentTotal = oRedeemCoupon.getFacePrice();
					
					// Add information to basket
					sPaymentInfo1 = sCouponNumber;
				} catch (JSONException e) {
					e.printStackTrace();
					AppGlobal.stack2Log(e);
				}
				
				// update coupon
				if (oRedeemCoupon.getType() == FuncCoupon.COUPON_TYPE_PAID_ITEM && !sRedeemItemCode.isEmpty())
					oRedeemCoupon.setRedeemItem(sRedeemItemCode);
				oRedeemCoupon.setCouponCurrentStatus(FuncCoupon.COUPON_STATUS_SOLD);
				oRedeemCoupon.setCouponNextStatus(FuncCoupon.COUPON_STATUS_LOCKED);
				
				oRedeemCoupon.updateCoupon(FuncCoupon.UPDATE_COUPON_TYPE_USE_AS_PAYMENT);
				
				bBreak = true;
			} while (!bBreak);
			
		}
		
		// Member payment
		if (oPosPaymentMethod.isMemberPaymentType()) {
			iMemberId = setPaymentMemberNo();
			if (iMemberId == 0) {
				// No member is assigned, abort payment
				return false;
			}
		}
		
		// Credit card payment
		if (oPosPaymentMethod.isCreditCardPaymentType()) {
			if (oPosPaymentMethod.getInterfaceConfig(InfInterface.TYPE_PERIPHERAL_DEVICE) != null) {
				List<PosInterfaceConfig> oPosInterfaceConfigs = oPosPaymentMethod
						.getInterfaceConfig(InfInterface.TYPE_PERIPHERAL_DEVICE);
				for (PosInterfaceConfig oPosInterfaceConfig : oPosInterfaceConfigs) {
					if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_MSR)) {
						// Show the UI to capture the credit card value
						List<String> oMsgList = new ArrayList<String>();
						
						oMsgList.add(AppGlobal.g_oLang.get()._("card_no"));
						oMsgList.add(AppGlobal.g_oLang.get()._("expiry_date") + " (YYMM)");
						oMsgList.add(AppGlobal.g_oLang.get()._("card_holder_name"));
						
						String sCardNo = "";
						String sExpiryDate = "";
						String sName = "";
						
						while (true) {
							FormInputBox oFormInputBox = new FormInputBox(this);
							oFormInputBox.initWithInputNum(3);
							oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("credit_card_payment"));
							oFormInputBox.setMessages(oMsgList);
							oFormInputBox.setKeyboardType(0, HeroActionProtocol.View.Attribute.KeyboardType.NUMBER);
							oFormInputBox.setDefaultInputValue(0, sCardNo);
							oFormInputBox.setKeyboardType(1, HeroActionProtocol.View.Attribute.KeyboardType.NUMBER);
							oFormInputBox.setDefaultInputValue(1, sExpiryDate);
							oFormInputBox.setKeyboardType(2, HeroActionProtocol.View.Attribute.KeyboardType.DEFAULT);
							oFormInputBox.setDefaultInputValue(2, sName);
							oFormInputBox.show();
							
							// Get input value / swipe card value
							sCardNo = oFormInputBox.getInputValue(0);
							sExpiryDate = oFormInputBox.getInputValue(1);
							sName = oFormInputBox.getInputValue(2);
							
							String sCreditCardContent = oFormInputBox.getSwipeCardValue();
							
							boolean bSwipeCard = false;
							if (!sCreditCardContent.isEmpty()) {
								// Capture information from swipe card
								FuncMSR oFuncMSR = new FuncMSR();
								if (oFuncMSR.processCardContent(sCreditCardContent,
										oPosInterfaceConfig.getInterfaceConfig()) == FuncMSR.ERROR_CODE_NO_ERROR) {
									// Get the necessary value
									sCardNo = oFuncMSR.getCardNo();
									DateTimeFormatter formatter = DateTimeFormat.forPattern("yyMM");
									try {
										sExpiryDate = formatter.print(oFuncMSR.getExpiryDate());
									} catch (Exception e) {
										AppGlobal.stack2Log(e);
									}
									sName = oFuncMSR.getName();
									
									bSwipeCard = true;
								} else {
									// Fail to process swipe card
									showErrorDialogBox(oFuncMSR.getLastErrorMessage());
									return false;
								}
							}
							
							// Check the input is valid or not
							if ((sCardNo.isEmpty() || sExpiryDate.isEmpty()) && sCreditCardContent.isEmpty())
								return false;
							
							// Check card no.
							// TODO: Further development
							if (sCardNo.length() < 10) {
								showErrorDialogBox(AppGlobal.g_oLang.get()._("incorrect_card_format"));
								sCardNo = "";
								continue;
							}
							
							// Check expiry date
							SimpleDateFormat formatter = new SimpleDateFormat("yyMM");
							formatter.setLenient(false);
							SimpleDateFormat formatter2 = new SimpleDateFormat("MM/yy");
							try {
								sExpiryDate = formatter2.format(formatter.parse(sExpiryDate));
							} catch (ParseException e) {
								showErrorDialogBox(AppGlobal.g_oLang.get()._("incorrect_date_format"));
								sExpiryDate = "";
								continue;
							}
							
							// Mask the credit card no.
							int iMaskLength = sCardNo.length() - 4;
							char[] chars = new char[iMaskLength];
							Arrays.fill(chars, '*');
							String sMask = new String(chars);
							sCardNo = sCardNo.substring(sCardNo.length() - 4, sCardNo.length());
							sCardNo = sMask + sCardNo;
							
							// If swipe card, need user double confirmation
							if (bSwipeCard) {
								String sMsg = AppGlobal.g_oLang.get()._("card_no") + " : " + sCardNo + " "
										+ System.lineSeparator() + AppGlobal.g_oLang.get()._("expiry_date") + " (YYMM)"
										+ " : " + sExpiryDate + " " + System.lineSeparator()
										+ AppGlobal.g_oLang.get()._("card_holder_name") + " : " + sName;
								FormConfirmBox oFormConfirmBox = new FormConfirmBox(
										AppGlobal.g_oLang.get()._("confirm"), AppGlobal.g_oLang.get()._("cancel"),
										this);
								oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
								oFormConfirmBox.setMessage(sMsg);
								oFormConfirmBox.show();
								if (oFormConfirmBox.isOKClicked() == false) {
									sCardNo = "";
									sExpiryDate = "";
									sName = "";
									continue;
								}
							}
							// card no
							oCheckPaymentExtraInfos.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT,
									PosCheckExtraInfo.SECTION_CREDIT_CARD, PosCheckExtraInfo.VARIABLE_CARD_NO,
									sCardNo));
							// expiry date
							oCheckPaymentExtraInfos.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT,
									PosCheckExtraInfo.SECTION_CREDIT_CARD, PosCheckExtraInfo.VARIABLE_EXPIRY_DATE,
									sExpiryDate));
							// holder name
							oCheckPaymentExtraInfos.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT,
									PosCheckExtraInfo.SECTION_CREDIT_CARD, PosCheckExtraInfo.VARIABLE_CARD_HOLDER_NAME,
									sName));
							
							break;
						}
						break;
					}
				}
			}
		}
		
		// check payment need to ask PMS info
		if (oPosPaymentMethod.getInterfaceConfig(InfInterface.TYPE_PMS) != null
				&& oPosPaymentMethod.getInterfaceConfig(InfInterface.TYPE_PMS).size() > 0) {
			List<PosInterfaceConfig> oPosInterfaceConfigs = oPosPaymentMethod.getInterfaceConfig(InfInterface.TYPE_PMS);
			PosInterfaceConfig oPosInterfaceConfig = null;
			
			// Ask to select PMS interface as necessary
			if (oPosInterfaceConfigs.size() > 1) {
				ArrayList<String> oOptionList = new ArrayList<String>();
				HashMap<Integer, HashMap<String, String>> oInterfaceIdList = new HashMap<Integer, HashMap<String, String>>();
				int iInterfaceCount = 0, iSelectedInterfaceId = -1;
				
				for (PosInterfaceConfig oInterfaceConfig : oPosInterfaceConfigs) {
					oOptionList.add(oInterfaceConfig.getInterfaceName(AppGlobal.g_oCurrentLangIndex.get()));
					HashMap<String, String> oTempInterfaceInfo = new HashMap<String, String>();
					oTempInterfaceInfo.put("interfaceId", String.valueOf(oInterfaceConfig.getInterfaceId()));
					oTempInterfaceInfo.put("vendorKey", oInterfaceConfig.getInterfaceVendorKey());
					
					if (oInterfaceConfig.getInterfaceConfig() != null)
						oTempInterfaceInfo.put("setup", oInterfaceConfig.getInterfaceConfig().toString());
					else
						oTempInterfaceInfo.put("setup", "");
					
					oInterfaceIdList.put(iInterfaceCount, oTempInterfaceInfo);
					iInterfaceCount++;
				}
				
				FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
				oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select_the_pms_interface"),
						oOptionList, false);
				oFormSelectionBox.show();
				
				if (oFormSelectionBox.isUserCancel())
					return false;
				else {
					HashMap<String, String> oTempInterfaceInfo = oInterfaceIdList
							.get(oFormSelectionBox.getResultList().get(0));
					iSelectedInterfaceId = Integer.valueOf(oTempInterfaceInfo.get("interfaceId"));
					
					for (PosInterfaceConfig oInterfaceConfig : oPosInterfaceConfigs) {
						if (oInterfaceConfig.getInterfaceId() == iSelectedInterfaceId) {
							oPosInterfaceConfig = oInterfaceConfig;
							break;
						}
					}
				}
			} else
				oPosInterfaceConfig = oPosInterfaceConfigs.get(0);
			
			//Type Default: No Account Information Needed
			if(oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_XMS) && FuncPMS.getPostingType(oPosInterfaceConfig).equals(FuncPMS.POSTING_TYPE_DEFAULT)) {
				// Interface id
				oCheckPaymentExtraInfos.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT,
						PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_INTERFACE_ID,
						String.valueOf(oPosInterfaceConfig.getInterfaceId())));
				
				DateTimeFormatter formatter = DateTimeFormat.forPattern("yyMMddHHmmss");
				DateTime oCurrentTime = AppGlobal.getCurrentTime(false);
				String sPostingKey = formatter.print(oCurrentTime) + AppGlobal.g_oFuncStation.get().getCode();
				oCheckPaymentExtraInfos.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT,
						PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_POSTING_KEY, sPostingKey));
				
				//Internal usage
				JSONObject oPMSInfoJSONObject = new JSONObject();
				try {
					if(oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_XMS))
						oPMSInfoJSONObject.put("posting_type", FuncPMS.getPostingType(oPosInterfaceConfig));
					oPMSInfoJSONObject.put("external_type", oPosInterfaceConfig.getConfigValue().optJSONObject("general").optJSONObject("params").optJSONObject("xms_pay_type").optString("value", ""));
					
					oPMSInfoJSONObject.put("table", m_oFuncCheck.getTableNoWithExtensionForDisplay());
					oPMSInfoJSONObject.put("pm_code", oPosPaymentMethod.getPaymentCode());
				} catch (JSONException jsone) {
					jsone.printStackTrace();
				}
				oCheckPaymentExtraInfos.add(
						this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PMS,
								PosCheckExtraInfo.VARIABLE_INTERNAL_USE, oPMSInfoJSONObject.toString()));
				
			} else if (oPosInterfaceConfig != null) {
				if (FuncPMS.checkNeedAskInfo(oPosInterfaceConfig) == true) {
					FormPMS oFormPMS = new FormPMS(this);
					String sRoomNo = "";
					if(m_oFuncCheck.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_ROOM, 0))
						sRoomNo = m_oFuncCheck.getCheckExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_ROOM, 0);
					oFormPMS.pmsAskInfoForPosting(oPosInterfaceConfig, m_oFuncCheck.getCheckPrefixNo(),
							oPosPaymentMethod.getPaymentCode(), FuncPMS.getPostingType(oPosInterfaceConfig), sRoomNo);
					
					oFormPMS.show();
					if (oFormPMS.isUserCancel())
						return false;
					else {
						// check no post
						if (!oFormPMS.checkNoPost()) {
							showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_do_pms_posting_for_this_guest"));
							return false;
						}
						
						// check credit limit
						if (oFormPMS.haveMaximumCreditLimit()) {
							// get maximum credit limit
							BigDecimal dCreditLimit = new BigDecimal(oFormPMS.getChosenGuestInfo().get("creditLimit"));
							if (dCreditLimit.compareTo(BigDecimal.ZERO) <= 0) {
								showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_do_pms_posting_as_no_more_credit_amount"));
								return false;
							}
							
							if (dCreditLimit.compareTo(m_oFuncPayment.getCurrentBalance()) <= 0) {
								bExceedCreditLimitForPMS = true;
								dPaymentTotal = new BigDecimal(oFormPMS.getChosenGuestInfo().get("creditLimit"));
							}
						}
						
						// package code
						if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_PEGASUS)) {
							JSONObject oConfigValueJSONObject = oPosInterfaceConfig.getConfigValue()
									.optJSONObject("general").optJSONObject("params");
							String sPaymentCode = oConfigValueJSONObject.optJSONObject("item_code").optString("value");
							String sPaymentType = oPosInterfaceConfig.getConfigValue().optJSONObject("general")
									.optJSONObject("params").optJSONObject("posting_type").optString("value");
							if (sPaymentType.equals("package")) {
								BigDecimal oPackageAmount = new BigDecimal(
										oFormPMS.getChosenGuestInfo().get("packageAmount"));
								if (oPackageAmount.compareTo(m_oFuncPayment.getCurrentBalance()) <= 0) {
									showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_do_pms_posting_as_no_more_credit_amount"));
									return false;
								}
							}
							
							// Interface id
							oCheckPaymentExtraInfos.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT,
									PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_INTERFACE_ID,
									String.valueOf(oPosInterfaceConfig.getInterfaceId())));
							
							// Guest no.
							oCheckPaymentExtraInfos.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT,
									PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_GUEST_NO,
									oFormPMS.getChosenGuestInfo().get("guestNumber")));
							
							// Room
							String sRoomNum = "";
							HashMap<String, String> oEnquiryInfo = oFormPMS.getInputtedEnquiryInfo();
							if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_4700_TCPIP)
									|| oPosInterfaceConfig.getInterfaceVendorKey()
									.equals(InfVendor.KEY_4700_SERIAL_PORT))
								sRoomNum = oEnquiryInfo.get("enquiryNumber");
							else {
								sRoomNum = oFormPMS.getChosenGuestInfo().get("roomNumber");
								if (sRoomNum.length() > 0)
									sRoomNum = oFormPMS.getChosenGuestInfo().get("roomNumber");
								else
									sRoomNum = oEnquiryInfo.get("enquiryNumber");
							}
							oCheckPaymentExtraInfos.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT,
									PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_ROOM, sRoomNum));
							// posting key
							String sPostingKey = "";
							if (oFormPMS.getChosenGuestInfo().containsKey("packageCode"))
								sPostingKey = oFormPMS.getChosenGuestInfo().get("packageCode");
							else
								sPostingKey = sPaymentCode;
							oCheckPaymentExtraInfos.add(
									this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PMS,
											PosCheckExtraInfo.VARIABLE_POSTING_KEY, sPostingKey));
							/// payment type
							if (sPaymentType.equals("package"))
								sPaymentType += "_amount";
							oCheckPaymentExtraInfos.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT,
									PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_PAYTYPE, sPaymentType));
						} else {
							// Interface id
							oCheckPaymentExtraInfos.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT,
									PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_INTERFACE_ID,
									String.valueOf(oPosInterfaceConfig.getInterfaceId())));
							
							// trace id
							if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_HTNG)) {
								DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyyMMddHHmmss");
								DateTimeFormatter formatter2 = DateTimeFormat.forPattern("yyMMddHHmmss");
								DateTime oCurrentTime = AppGlobal.getCurrentTime(false);
								String sPostingKey = formatter.print(oCurrentTime);
								
								JSONObject oHTNGConfig = oPosInterfaceConfig.getInterfaceConfig();
								if (oHTNGConfig.has("connection_setup")
										&& oHTNGConfig.optJSONObject("connection_setup").has("params")
										&& oHTNGConfig.optJSONObject("connection_setup").optJSONObject("params")
										.has("pms_type")
										&& oHTNGConfig.optJSONObject("connection_setup").optJSONObject("params")
										.optJSONObject("pms_type").optString("value", "").equals("standard")) {
									// For Standard Type
									HashMap<String, String> oLookupInfo = oFormPMS.getEnquiryResponseInfo();
									
									// lookup type
									oCheckPaymentExtraInfos.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT,
											PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_LOOKUP_TYPE,
											oLookupInfo.get("type")));
									// lookup id context
									oCheckPaymentExtraInfos.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT,
											PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_LOOKUP_ID_CONTEXT,
											oLookupInfo.get("idContext")));
									// lookup id
									oCheckPaymentExtraInfos.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT,
											PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_LOOKUP_ID,
											oLookupInfo.get("id")));
									// trace id
									sPostingKey = formatter2.print(oCurrentTime)
											+ (m_oFuncPayment.getCheckPaymentList().size() + 1)
											+ AppGlobal.g_oFuncStation.get().getStationId();
								}
								oCheckPaymentExtraInfos.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT,
										PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_TRACE_ID,
										sPostingKey));
							}
							
							// Guest name
							oCheckPaymentExtraInfos.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT,
									PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_GUEST_NAME,
									oFormPMS.getChosenGuestInfo().get("guestName")));
							
							// Guest no.
							oCheckPaymentExtraInfos.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT,
									PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_GUEST_NO,
									oFormPMS.getChosenGuestInfo().get("guestNumber")));
							
							// Room
							String sRoomNum = "";
							HashMap<String, String> oEnquiryInfo = oFormPMS.getInputtedEnquiryInfo();
							if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_4700_TCPIP)
									|| oPosInterfaceConfig.getInterfaceVendorKey()
									.equals(InfVendor.KEY_4700_SERIAL_PORT))
								sRoomNum = oEnquiryInfo.get("enquiryNumber");
							else {
								sRoomNum = oFormPMS.getChosenGuestInfo().get("roomNumber");
								if (sRoomNum.length() > 0)
									sRoomNum = oFormPMS.getChosenGuestInfo().get("roomNumber");
								else
									sRoomNum = oEnquiryInfo.get("enquiryNumber");
							}
							oCheckPaymentExtraInfos.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT,
									PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_ROOM, sRoomNum));
							
							// Sub account number
							if(oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_XMS) &&
									FuncPMS.getPostingType(oPosInterfaceConfig).equals(FuncPMS.POSTING_TYPE_AR)) {
								oCheckPaymentExtraInfos.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT,
										PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_SUB_ACCOUNT_NUMBER,
										oEnquiryInfo.get("enquirySubAccountNum")));
							}
							
							// Register no.
							oCheckPaymentExtraInfos.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT,
									PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_REGISTER_NO,
									oFormPMS.getChosenGuestInfo().get("registerNumber")));
							
							// Guest file no.
							oCheckPaymentExtraInfos.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT,
									PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_GUEST_FILE_NO,
									oFormPMS.getChosenGuestInfo().get("guestFileNumber")));
							
							// Expiry date
							oCheckPaymentExtraInfos.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT,
									PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_EXPIRY_DATE, "0"));
							
							// Profolio Number
							String sLine = "";
							if (oFormPMS.getChosenGuestInfo().containsKey("line"))
								sLine = oFormPMS.getChosenGuestInfo().get("line");
							oCheckPaymentExtraInfos.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT,
									PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_FIELD_NO, sLine));
							
							// Posting Key
							if(oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_XMS)) {
								DateTimeFormatter formatter2 = DateTimeFormat.forPattern("yyMMddHHmmss");
								DateTime oCurrentTime = AppGlobal.getCurrentTime(false);
								String sPostingKey = formatter2.print(oCurrentTime) + AppGlobal.g_oFuncStation.get().getCode();
								oCheckPaymentExtraInfos.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT,
										PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_POSTING_KEY, sPostingKey));
							}
							
							if(oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_STANDARD_TCPIP)) {
								if(FuncPMS.isAllowPostAfterPayment(oPosInterfaceConfig)) {
									DateTimeFormatter formatter2 = DateTimeFormat.forPattern("yyyyMMdd_HHmmss");
									DateTime oCurrentTime = AppGlobal.getCurrentTime(false);
									
									String sPaymentSeq = String.valueOf(m_oFuncPayment.getCheckPaymentList().size() + 1);
									String sPostingKey = formatter2.print(oCurrentTime) + "_" + AppGlobal.g_oFuncStation.get().getCode() + "_" + sPaymentSeq;
									
									// Post Status
									oCheckPaymentExtraInfos.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT,
											PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_POST_STATUS, "false"));
									
									// Posting Key
									oCheckPaymentExtraInfos.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT,
											PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_POSTING_KEY, sPostingKey));
									
									// Mode
									oCheckPaymentExtraInfos.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT,
											PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_MODE, "periodic"));
								}
							}
							
							// Internal usage
							JSONObject oPMSInfoJSONObject = new JSONObject();
							try {
								if(oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_XMS))
									oPMSInfoJSONObject.put("external_type", oPosInterfaceConfig.getConfigValue().optJSONObject("general").optJSONObject("params").optJSONObject("xms_pay_type").optString("value", ""));
								oPMSInfoJSONObject.put("table", m_oFuncCheck.getTableNoWithExtensionForDisplay());
								oPMSInfoJSONObject.put("pm_code", oPosPaymentMethod.getPaymentCode());
							} catch (JSONException jsone) {
								jsone.printStackTrace();
							}
							oCheckPaymentExtraInfos.add(
									this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PMS,
											PosCheckExtraInfo.VARIABLE_INTERNAL_USE, oPMSInfoJSONObject.toString()));
						}
					}
				} else {
					// check whether have default account setting
					if (!FuncPMS.haveDefaultAccount(oPosInterfaceConfig)) {
						showErrorDialogBox(AppGlobal.g_oLang.get()._("no_default_account_setup_for_direct_pms_posting"));
						return false;
					}
					
					// PMS posting with default account
					FuncPMS.createPaymentPMSExtraInfoForPostingWithDefaultAccount(oCheckPaymentExtraInfos,
							oPosInterfaceConfig, m_oFuncCheck.getTableNoWithExtensionForDisplay(),
							oPosPaymentMethod.getPaymentCode(), (m_oFuncPayment.getCheckPaymentList().size() + 1));
				}
			}
		}
		
		// Octopus payment
		if (oPosPaymentMethod.isOctopusPaymentType()) {
			JSONObject oRefDataJSONObject = new JSONObject();
			
			dPaymentTotal = m_oFuncPayment.getCurrentBalance().setScale(1, RoundingMode.CEILING);
			
			// Check if the payment amount >= 1000 or not
			if (dPaymentTotal.compareTo(new BigDecimal("1000")) >= 0) {
				// Cannot pay >= 1000 by Octopus
				showErrorDialogBox(AppGlobal.g_oLang.get()._("amount_exceeds_octopus_payment_limit"));
				return false;
			}
			
			// Save result to reference field of payment
			sCheckPaymentRefData[0] = oRefDataJSONObject.toString();
			
			// Show the information in screen
			sPaymentInfo1 = AppGlobal.g_oLang.get()._("remaining_value") + " :"
					+ oRefDataJSONObject.optString("current_remain_amount");
			// Start auto clear Octopus Display timer
			m_oFrameOrderingPanel.setAutoClearOctopusDisplayTimer(true);
		}
		
		// Reservation payment
		if (oPosPaymentMethod.isReservationPayment()) {
			if (!m_oFuncPayment.getCheckPaymentList().isEmpty()) {
				// If check already had reservation payment, cannot add one more
				// reservation payment
				// If check has several payment methods and add reservation
				// payment now, show warning message that reservation payment
				// need to be the first payment method
				boolean bHaveResvPayment = false;
				for (PosCheckPayment oCheckPayment : m_oFuncPayment.getCheckPaymentList()) {
					PosPaymentMethod oTmpPaymentMethod = oPosPaymentMethodList.getPaymentMethodList()
							.get(oCheckPayment.getPaymentMethodId());
					if (oTmpPaymentMethod.isReservationPayment()) {
						bHaveResvPayment = true;
						break;
					}
				}
				
				String sMsg;
				if (bHaveResvPayment)
					sMsg = AppGlobal.g_oLang.get()._("this_check_already_had_reservation_payment");
				else
					sMsg = AppGlobal.g_oLang.get()._("reservation_payment_should_be_the_first_payment");
				
				showErrorDialogBox(sMsg);
				return false;
			}
			
			if (m_oFuncCheck.getResvBookDate() == null || m_oFuncCheck.getRefnoWithPrefix().isEmpty()) {
				// This check has no reservation, cannot use reservation payment
				showErrorDialogBox(AppGlobal.g_oLang.get()._("this_check_does_not_have_reservation_record")
						+ ", " + AppGlobal.g_oLang.get()._("cannot_use_this_payment_method"));
				return false;
			}
			
			// duplicate check with the same reservation no. with prefix and
			// book date
			DateTimeFormatter dateFormat = DateTimeFormat.forPattern("yyyy-MM-dd");
			PosCheck oCheck = new PosCheck();
			oCheck.getCheckByResvDateRefNo(dateFormat.print(m_oFuncCheck.getResvBookDate()),
					m_oFuncCheck.getRefnoWithPrefix());
			if (!oCheck.getCheckId().equals("") && !oCheck.getCheckId().equals(m_oFuncCheck.getCheckId())) {
				showAttentionDialogBox(AppGlobal.g_oLang.get()._("another_check_already_used_this_reservation_record"));
				return false;
			}
			
			// Get reservation info and use payment amount for payment
			FuncCheck oFuncCheck = new FuncCheck();
			JSONObject oResultJSONObject = oFuncCheck.retrieveReservationByDateRefno(
					dateFormat.print(m_oFuncCheck.getResvBookDate()), m_oFuncCheck.getRefnoWithPrefix(),
					ResvResv.REQUEST_INFO_RESERVATION);
			if (oResultJSONObject == null) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_find_reservation_record"));
				return false;
			}
			
			JSONObject oResvJSONObject = oResultJSONObject.optJSONObject("resv");
			ResvResv oResv = new ResvResv(oResvJSONObject);
			dPaymentTotal = oResv.getPaymentTotal();
			
			// Payment Total > Check Total, excess amount will serve as tips,
			// ask user whether continue the payment
			if (dPaymentTotal.compareTo(m_oFuncPayment.getCurrentBalance()) > 0) {
				// Ask confirmation for action
				String sMsg = AppGlobal.g_oLang.get()._("payment_amount_is_greater_than_check_total") + "," + System.lineSeparator()
						+ AppGlobal.g_oLang.get()._("the_excess_amount_will_pay_as_tips") + System.lineSeparator()
						+ AppGlobal.g_oLang.get()._("continue_to_pay") + "?";
				FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("confirm"),
						AppGlobal.g_oLang.get()._("cancel"), this);
				oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
				oFormConfirmBox.setMessage(sMsg);
				oFormConfirmBox.show();
				if (oFormConfirmBox.isOKClicked() == false)
					return false;
			}
		}
		
		// Employee Member payment or Company Account payment
		if (oPosPaymentMethod.isEmployeeMemberPaymentType() || oPosPaymentMethod.isCompanyAccountPaymentType()) {
			if (AppGlobal.isModuleSupport(AppGlobal.OPTIONAL_MODULE.member.name()) == false) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("member_module_is_not_supported"));
				return false;
			}
			
			List<PosCheckExtraInfo> oInterfaceMemberExtraInfos = new ArrayList<PosCheckExtraInfo>();
			HashMap<String, String> oCheckInfo = new HashMap<String, String>();
			oCheckInfo.put("checkId", String.valueOf(m_oFuncCheck.getMemberId()));
			oCheckInfo.put("checkNumber", m_oFuncCheck.getCheckPrefixNo());
			oCheckInfo.put("checkAmount", m_oFuncCheck.getCheckTotal().toPlainString());
			FormSearchMemberFunction oFormSearchMemberFunction = new FormSearchMemberFunction(this);
			
			if (oPosPaymentMethod.isEmployeeMemberPaymentType()) {
				if (oFormSearchMemberFunction.init(m_oFuncCheck, oInterfaceMemberExtraInfos, oCheckInfo, 0, false, false,
						false, AppGlobal.g_oLang.get()._("set_member"), null,
						FormSearchMemberFunction.SEARCH_MODE.employeeMember.name()) == false)
					return false;
			}else if (oPosPaymentMethod.isCompanyAccountPaymentType()) {
				if (oFormSearchMemberFunction.init(m_oFuncCheck, oInterfaceMemberExtraInfos, oCheckInfo, 0, false, false,
						false, AppGlobal.g_oLang.get()._("set_member"), null,
						FormSearchMemberFunction.SEARCH_MODE.companyAccount.name()) == false)
					return false;
			}
			oFormSearchMemberFunction.show();
			
			MemMember oMember = oFormSearchMemberFunction.getAssignedMember();
			if (oMember != null) {
				if (oFormSearchMemberFunction.getUserInputType() == FormSearchMemberFunction.SELECT_SET_MEMBER)
					iMemberId = oMember.getMemberId();
			} else
				return false;
		}
		
		
		// read card payment type
		if (oPosPaymentMethod.isRewriteCardPaymentType()) {
			boolean bSuccess;
			if (!m_oFuncRewriteCard.isSupport()) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("not_support_rewrite_card_payment_type"));
				return false;
			}
			
			String sMediaFileName = "", sMediaUrl = "";
			if (oPosPaymentMethod.getInterfaceConfig(InfInterface.TYPE_PERIPHERAL_DEVICE) != null) {
				List<PosInterfaceConfig> oPosInterfaceConfigs = oPosPaymentMethod
						.getInterfaceConfig(InfInterface.TYPE_PERIPHERAL_DEVICE);
				for(PosInterfaceConfig oPosInterfaceConfig : oPosInterfaceConfigs){
					if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_DEVICE_MANAGER)) {
						if(oPosInterfaceConfig.getInterfaceConfig() != null){
							if(oPosInterfaceConfig.getInterfaceConfig().optJSONObject("rewrite_card_setup").optJSONObject("params").has("payment_image_for_language_"+Integer.toString(AppGlobal.g_oCurrentLangIndex.get())))
								sMediaFileName = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("rewrite_card_setup").optJSONObject("params")
										.optJSONObject("payment_image_for_language_" + Integer.toString(AppGlobal.g_oCurrentLangIndex.get())).optString("value");
						}
					}
				}
			}
			
			FormRewriteCardOperation oFormRewriteCardOperation = new FormRewriteCardOperation(m_oFuncRewriteCard, this);
			MedMedia oMedMedia = new MedMedia();
			if(m_oMediaList.containsKey(sMediaFileName))
				oMedMedia = m_oMediaList.get(sMediaFileName);
			else{
				oMedMedia.readInfoAndUrlByFileName(sMediaFileName);
				m_oMediaList.put(sMediaFileName, oMedMedia);
			}
			
			if(!oMedMedia.getUrl().isEmpty())
				sMediaUrl = oMedMedia.getUrl();
			
			
			if(AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) && !sMediaUrl.isEmpty())
				oFormRewriteCardOperation.initForReadCard(true, AppGlobal.g_oLang.get()._("please_follow_the_instructions") + System.lineSeparator() + AppGlobal.g_oLang.get()._("please_bring_the_ticket_along_to_the_window_to_get_the_meal_after_finish_the_payment"), sMediaUrl, AppGlobal.g_oFuncOutlet.get().roundPaymentAmountToString(m_oFuncPayment.getCurrentBalance()));
			else
				oFormRewriteCardOperation.initForReadCard(true, AppGlobal.g_oLang.get()._("please_swipe_card"), sMediaFileName, "");
			
			// read card request
			if (m_oFuncRewriteCard.getModelType().equals(FuncRewriteCard.TYPE_MODEL_ONE_CARD_SLN))
				oFormRewriteCardOperation.rewriteOneCardSlnRequest(FormRewriteCardOperation.TYPE_OPERATION_READ_CARD);
			
			oFormRewriteCardOperation.show();
			bSuccess = oFormRewriteCardOperation.isProcessSuccess();
			if (!bSuccess) {
				
				oFormRewriteCardOperation.finishOperation();
				return false;
			}
			
			BigDecimal dCardAmount = new BigDecimal(m_oFuncRewriteCard.getCardAmount());
			if (m_oFuncPayment.getCurrentBalance().compareTo(dCardAmount) > 0 && dCardAmount.compareTo(BigDecimal.ZERO) > 0)  {
				// Fail to add payment since input payment amount greater than card amount
				FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("continue_process"),
						AppGlobal.g_oLang.get()._("cancel"), this);
				oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("kindly_reminder"));
				oFormConfirmBox.setMessage( AppGlobal.g_oLang.get()._("insufficient_value")
						+ System.lineSeparator() + AppGlobal.g_oLang.get()._("current_balance") + " : "
						+ StringLib.BigDecimalToString(dCardAmount, AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal())
						+ System.lineSeparator() + AppGlobal.g_oLang.get()._("is_it_continue_to_proceed_the_payment")
						+ System.lineSeparator() + AppGlobal.g_oLang.get()._("please_confirm") + "!");
				oFormConfirmBox.show();
				if (oFormConfirmBox.isOKClicked() == false) {
					return false;
				}
				
				dPaymentTotal = dCardAmount;
			} else if (dCardAmount.compareTo(BigDecimal.ZERO) <= 0) {
				// Fail to add payment since card amount is ZERO
				showErrorDialogBox(AppGlobal.g_oLang.get()._(AppGlobal.g_oLang.get()._("insufficient_value"))
						+ System.lineSeparator() + AppGlobal.g_oLang.get()._("current_balance") + " : "
						+ StringLib.BigDecimalToString(dCardAmount, AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal())
						+ System.lineSeparator() + AppGlobal.g_oLang.get()._("please_use_another_card_or_payment_method"));
				return false;
			} else
				dPaymentTotal = m_oFuncPayment.getCurrentBalance();
			
			JSONObject oRefDataJSONObject = new JSONObject();
			try {
				BigDecimal dAfterPayment = new BigDecimal(m_oFuncRewriteCard.getCardAmount()).subtract(dPaymentTotal);
				oRefDataJSONObject.put("card_number", m_oFuncRewriteCard.getCardNumber());
				oRefDataJSONObject.put("original_remain_amount", m_oFuncRewriteCard.getCardAmount());
				oRefDataJSONObject.put("current_remain_amount", dAfterPayment.toPlainString());
			} catch (JSONException e) {
				AppGlobal.stack2Log(e);
			}
			sCheckPaymentRefData[0] = oRefDataJSONObject.toString();
			
			bHaveDefaultPaymentAmount = true;
		}
		
		// Payment method support reference input
		int iRefCount = 0;
		List<String> oReferenceNameList = new ArrayList<String>();
		try {
			if (oPosPaymentMethod.getRules() != null) {
				JSONObject oPaymentRulesJSONObject = new JSONObject(oPosPaymentMethod.getRules());
				if (oPaymentRulesJSONObject.has("allow_reference")) {
					iRefCount = oPaymentRulesJSONObject.optInt("allow_reference", 0);
					if (iRefCount > 0) {
						for (int i = 1; i <= iRefCount; i++) {
							if (oPaymentRulesJSONObject.has("reference_name" + i)) {
								JSONObject oReferenceNameJSONObject = oPaymentRulesJSONObject
										.optJSONObject("reference_name" + i);
								if (oReferenceNameJSONObject.has("name_l" + AppGlobal.g_oCurrentLangIndex.get()))
									oReferenceNameList.add(oReferenceNameJSONObject
											.optString("name_l" + AppGlobal.g_oCurrentLangIndex.get()));
							}
						}
					}
				}
			}
		} catch (JSONException e) {
			e.printStackTrace();
			AppGlobal.stack2Log(e);
		}
		List<String> sPaymentInfos = new ArrayList<String>();
		String sReferenceInputArray[] = new String[iRefCount];
		if (iRefCount > 0) {
			FormInputBox oFormInputBox = new FormInputBox(this);
			if (iRefCount > 1)
				oFormInputBox.initWithInputNum(iRefCount);
			else
				oFormInputBox.init();
			oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DEFAULT);
			oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("remark"));
			if (iRefCount > 1)
				oFormInputBox.setMessages(oReferenceNameList);
			else
				oFormInputBox.setMessage(oReferenceNameList.get(0));
			oFormInputBox.show();
			
			if (oFormInputBox.isUserCancel())
				return false;
			
			if (iRefCount > 1) {
				for (int j = 0; j < iRefCount; j++)
					sReferenceInputArray[j] = oFormInputBox.getInputValue(j);
			} else if (iRefCount == 1)
				sReferenceInputArray[0] = oFormInputBox.getInputValue();
		}
		
		// Add to check payment list first
		iRet = m_oFuncPayment.addPayment(iPaymId, AppGlobal.g_oFuncOutlet.get().getShopId(),
				AppGlobal.g_oFuncOutlet.get().getOutletId(), m_oFuncCheck.getCheckId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessDay(),
				AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), dPayTotal, dTipsTotal, iEmployeeId,
				iMemberId, sCheckPaymentRefData, oCheckPaymentExtraInfos, 0);
		if (iRet < 0) {
			// Fail to add payment
			showErrorDialogBox(AppGlobal.g_oLang.get()._("fail_to_add_payment"));
			return false;
		}
		m_bNeedRollbackForCancelPayment = false;
		if (AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name()))
			m_oFrameCashierPanel.setVisible(false);
		
		// Add payment to basket
		boolean bNeedTips = false;
		if (oPosPaymentMethod.HaveTips()
				&& !AppGlobal.g_oFuncStation.get().isPaymentSkipTips(oPosPaymentMethod.getPaymentCode()))
			bNeedTips = true;
		// Get short name if exist
		String sPaymentMethod;
		if (oPosPaymentMethod.getShortName(AppGlobal.g_oCurrentLangIndex.get()).isEmpty())
			sPaymentMethod = oPosPaymentMethod.getName(AppGlobal.g_oCurrentLangIndex.get());
		else
			sPaymentMethod = oPosPaymentMethod.getShortName(AppGlobal.g_oCurrentLangIndex.get());
		
		// Initial the feature of FrameCashier
		m_oFrameCashier.setIsNeedCheckPaymentAmountByAuthAmount(false);
		m_oFrameCashier.setIsTipsInputDefaultZero(false);
		m_oFrameCashier.setIsNeedPaymentCardTopAuth(false);
		
		if (oPosPaymentMethod.isLoyaltySVCPayment()) {
			if (dPaymentTotal.compareTo(m_oFuncPayment.getCurrentBalance()) > 0) {
				dPaymentTotal = m_oFuncPayment.getCurrentBalance();
			}
			
			if (bFromDefaultPayment)
				dPaymentTotal = dDefaultValue;
			
			if (m_iCashierMode == 2)
				m_oFrameDirectPaymentResult.addPayment(0, m_oFuncPayment.getCheckPaymentList().size() - 1,
						sPaymentMethod, sPaymentInfo1, sPaymentInfo2, m_oFuncPayment.getCurrentBalance(),
						BigDecimal.ZERO, dPaymentTotal, true);
			if (m_oFrameCashier.getVisible()) {
				if (!bFromDefaultPayment)
					m_oFrameCashier.addPayment(0, m_oFuncPayment.getCheckPaymentList().size() - 1, sPaymentMethod,
							sPaymentInfo1, sPaymentInfo2, m_oFuncPayment.getCurrentBalance(), BigDecimal.ZERO,
							dPaymentTotal, true, bNeedTips, true, false);
				else
					m_oFrameCashier.addPayment(0, m_oFuncPayment.getCheckPaymentList().size() - 1, sPaymentMethod,
							sPaymentInfo1, sPaymentInfo2, m_oFuncPayment.getCurrentBalance(), BigDecimal.ZERO,
							dPaymentTotal, false, false, true, false);
			}
		} else if(oPosPaymentMethod.isCouponPaymentType() || bExceedCreditLimitForPMS
				|| oPosPaymentMethod.isOctopusPaymentType() || oPosPaymentMethod.isReservationPayment()
				|| oPosPaymentMethod.isMembershipInterfacePayment(InfVendor.KEY_LPS_SVC)
				|| oPosPaymentMethod.isMembershipInterfacePayment(InfVendor.KEY_LPS_SVC_COUPON)
				|| oPosPaymentMethod.isMembershipInterfacePayment(InfVendor.KEY_ASCENTIS_CRM)
				|| oPosPaymentMethod.isMembershipInterfacePayment(InfVendor.KEY_YAZUO_CRM)
				|| oPosPaymentMethod.isMembershipInterfacePayment(InfVendor.KEY_VIENNA_CRM)){
			BigDecimal dTips = BigDecimal.ZERO;
			boolean bNeedAskPayment = false;
			if (oPosPaymentMethod.isReservationPayment()
					&& dPaymentTotal.compareTo(m_oFuncPayment.getCurrentBalance()) > 0) {
				// Payment amount > check total, put the excess amount to tips
				dTips = dPaymentTotal.subtract(m_oFuncPayment.getCurrentBalance());
				bNeedTips = false;
			}
			
			if (m_iCashierMode == 2)
				m_oFrameDirectPaymentResult.addPayment(0, m_oFuncPayment.getCheckPaymentList().size() - 1,
						sPaymentMethod, sPaymentInfo1, sPaymentInfo2, m_oFuncPayment.getCurrentBalance(), dTips,
						dPaymentTotal, true);
			if (m_oFrameCashier.getVisible())
				m_oFrameCashier.addPayment(0, m_oFuncPayment.getCheckPaymentList().size() - 1, sPaymentMethod,
						sPaymentInfo1, sPaymentInfo2, m_oFuncPayment.getCurrentBalance(), dTips, dPaymentTotal, bNeedAskPayment,
						bNeedTips, true, false);
		} else if (oPosPaymentMethod.isDutyMealPaymentType() || oPosPaymentMethod.isOnCreditPaymentType()) {
			if (m_iCashierMode == 2)
				m_oFrameDirectPaymentResult.addPayment(0, m_oFuncPayment.getCheckPaymentList().size() - 1,
						sPaymentMethod, sPaymentInfo1, sPaymentInfo2, m_oFuncPayment.getCurrentBalance(),
						BigDecimal.ZERO, dPaymentTotal, true);
			if (m_oFrameCashier.getVisible())
				m_oFrameCashier.addPayment(0, m_oFuncPayment.getCheckPaymentList().size() - 1, sPaymentMethod,
						sPaymentInfo1, sPaymentInfo2, m_oFuncPayment.getCurrentBalance(), BigDecimal.ZERO,
						dPaymentTotal, false, bNeedTips, true, false);
		} else if (oPosPaymentMethod.isRewriteCardPaymentType()) {
			if (m_iCashierMode == 2)
				m_oFrameDirectPaymentResult.addPayment(0, m_oFuncPayment.getCheckPaymentList().size() - 1,
						sPaymentMethod, sPaymentInfo1, sPaymentInfo2, m_oFuncPayment.getCurrentBalance(),
						BigDecimal.ZERO, dPaymentTotal, bHaveDefaultPaymentAmount);
			if (m_oFrameCashier.getVisible())
				m_oFrameCashier.addPayment(0, m_oFuncPayment.getCheckPaymentList().size() - 1, sPaymentMethod,
						sPaymentInfo1, sPaymentInfo2, m_oFuncPayment.getCurrentBalance(), BigDecimal.ZERO,
						dPaymentTotal, !bHaveDefaultPaymentAmount, bNeedTips, bHaveDefaultPaymentAmount, false);
		} else {
			if (bFromDefaultPayment)
				dPaymentTotal = dDefaultValue;
			
			// show reference no. for adding deposit payment for advance order
			for (PosCheckExtraInfo oPosCheckExtraInfo:oCheckPaymentExtraInfos) {
				if (oPosCheckExtraInfo.getSection().equals(PosCheckExtraInfo.SECTION_ADVANCE_ORDER) &&
						oPosCheckExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_REFERENCE)) {
					sPaymentInfo1 = oPosCheckExtraInfo.getValue();
					break;
				}
			}
			
			if (m_iCashierMode == 2)
				m_oFrameDirectPaymentResult.addPayment(0, m_oFuncPayment.getCheckPaymentList().size() - 1,
						sPaymentMethod, sPaymentInfo1, sPaymentInfo2, m_oFuncPayment.getCurrentBalance(),
						BigDecimal.ZERO, dPaymentTotal, false);
			if (m_oFrameCashier.getVisible()) {
				if (!bFromDefaultPayment) {
					if (oPosPaymentMethod.isPayByForeignCurrency(AppGlobal.g_oFuncOutlet.get().getCurrencyCode()))
						m_oFrameCashier.addPayment(0, m_oFuncPayment.getCheckPaymentList().size() - 1, sPaymentMethod,
								sPaymentInfo1, sPaymentInfo2,
								m_oFuncPayment.getCurrenctBalanceInForeignCurrency(oPosPaymentMethod), BigDecimal.ZERO,
								dPaymentTotal, true, bNeedTips, false, false);
					else
						m_oFrameCashier.addPayment(0, m_oFuncPayment.getCheckPaymentList().size() - 1, sPaymentMethod,
								sPaymentInfo1, sPaymentInfo2, m_oFuncPayment.getCurrentBalance(), BigDecimal.ZERO,
								dPaymentTotal, true, bNeedTips, false, false);
				} else {
					if (oPosPaymentMethod.isPayByForeignCurrency(AppGlobal.g_oFuncOutlet.get().getCurrencyCode()))
						m_oFrameCashier.addPayment(0, m_oFuncPayment.getCheckPaymentList().size() - 1, sPaymentMethod,
								sPaymentInfo1, sPaymentInfo2,
								m_oFuncPayment.getCurrenctBalanceInForeignCurrency(oPosPaymentMethod), BigDecimal.ZERO,
								dPaymentTotal, false, false, false, false);
					else
						m_oFrameCashier.addPayment(0, m_oFuncPayment.getCheckPaymentList().size() - 1, sPaymentMethod,
								sPaymentInfo1, sPaymentInfo2, m_oFuncPayment.getCurrentBalance(), BigDecimal.ZERO,
								dPaymentTotal, false, false, true, false);
				}
			}
		}
		String sPaymentRef[] = new String[iRefCount + sPaymentInfos.size()];
		for(int i = 0 ; i < iRefCount ; i ++)
			sPaymentRef[i] = sReferenceInputArray[i];
		for(int i = 0 ; i < sPaymentInfos.size() ; i++)
			sPaymentRef[i + iRefCount] = sPaymentInfos.get(i);
		
		if (m_oFuncPayment.getCheckPaymentList().size() > 0)
			m_oFuncPayment.editPaymentRef(m_oFuncPayment.getCheckPaymentList().size() - 1, sPaymentRef);
		int iPaymentTotal=dPaymentTotal.intValue();
		System.out.println("````````````````````"+iPaymentTotal);
		return true;
	}
	
	public void editPayment(int iSectionId, int iItemIndex, BigDecimal dPaymentAmount, BigDecimal dTipsAmount, boolean bNotAllowFinishPayment) {
		ArrayList<PosCheckExtraInfo> oCheckPaymentExtraInfos = new ArrayList<PosCheckExtraInfo>();
		BigDecimal dOriginalPaymentAmount = dPaymentAmount;
		BigDecimal dPaymentRoundingAmount = BigDecimal.ZERO;
		PosCheckPayment oCurrentCheckPayment = m_oFuncPayment.getCheckPaymentByPaymentIndex(iItemIndex);
		if (m_oFuncPayment.isNextDummyPayment()) {
			oCurrentCheckPayment.setDummyPaymentRelationship(PosCheckPayment.DUMMY_PAYMENT_RELATIONSHIP_CHILD);
			m_oFuncPayment.setIsNextDummyPayment(false);
		}
		
		//set the check rounding boolean to false
		m_oFuncCheck.setIsCheckRounding(false);
		String sRoundingMethodKey = m_oFuncPayment.getPaymentRoundingMethod(iItemIndex);
		int iDummyPaymentMethodId = m_oFuncPayment.getDummyPaymentMappingId(iItemIndex);
		int iRoundDecimal = m_oFuncPayment.getPaymentRoundDecimal(iItemIndex);
		boolean bAllowGenerateDummy = false;
		
		PosPaymentMethod oDummyPaymentMethod = m_oFuncPayment.getPaymentMethodList().getPaymentMethod(iDummyPaymentMethodId);
		// the payment may generate dummy payment only when all setup including payment rounding method and with a rounding decimal smaller than the outlet setting
		if (!sRoundingMethodKey.isEmpty() && iRoundDecimal >= 0 && iRoundDecimal < AppGlobal.g_oFuncOutlet.get().getBusinessDay().getPayDecimal() && !oCurrentCheckPayment.isOldPayment()) {
			//round the payment and tips amount by payment rounding and calculate the rounding amount
			dPaymentAmount = FuncPayment.roundPaymentAmountToBigDecimal(dPaymentAmount, sRoundingMethodKey, iRoundDecimal);
			dTipsAmount = FuncPayment.roundPaymentAmountToBigDecimal(dTipsAmount, sRoundingMethodKey, iRoundDecimal);
			dPaymentRoundingAmount = dOriginalPaymentAmount.subtract(dPaymentAmount);
			if (oDummyPaymentMethod != null) {
				boolean bPaymentMethodContainsRules = false;
				if (!oDummyPaymentMethod.getAutoDiscountTypeId().equals("0") || oDummyPaymentMethod.isAutoWaiveTax() || oDummyPaymentMethod.isAutoWaiveSc() || oDummyPaymentMethod.getSurchargeRate().compareTo(BigDecimal.ZERO) > 0)
					bPaymentMethodContainsRules = true;
				//the original payment must can full paid the check, at this moment, dummy payment cannot have dummy payment and not allow to add dummy payment with payment rules
				if (dOriginalPaymentAmount.abs().compareTo(m_oFuncPayment.getCurrentBalance().abs()) >= 0 && !oCurrentCheckPayment.getDummyPaymentRelationship().equals(PosCheckPayment.DUMMY_PAYMENT_RELATIONSHIP_CHILD)) {
					if (!bPaymentMethodContainsRules) {
						//check if the remaining amount is able to display in the dummy payment
						if (!oDummyPaymentMethod.getRoundingMethod().isEmpty() && oDummyPaymentMethod.getRoundingDecimal() >= 0 && oDummyPaymentMethod.getRoundingDecimal() < AppGlobal.g_oFuncOutlet.get().getBusinessDay().getPayDecimal()) {
							if (FuncPayment.roundPaymentAmountToBigDecimal(dPaymentRoundingAmount, oDummyPaymentMethod.getRoundingMethod(), oDummyPaymentMethod.getRoundingDecimal()).abs().compareTo(BigDecimal.ZERO) > 0)
								bAllowGenerateDummy = true;
						} else if (AppGlobal.g_oFuncOutlet.get().roundPaymentAmountToBigDecimal(dPaymentRoundingAmount).abs().compareTo(BigDecimal.ZERO) > 0)
							bAllowGenerateDummy = true;
						
						if (bAllowGenerateDummy) {
							oCurrentCheckPayment.setDummyPaymentRelationship(PosCheckPayment.DUMMY_PAYMENT_RELATIONSHIP_PARENT);
							m_oFuncPayment.setIsNextDummyPayment(true);
							//check if payment should be removed as both payment and tips are 0
							if (dPaymentAmount.abs().compareTo(BigDecimal.ZERO) == 0 && dTipsAmount.abs().compareTo(BigDecimal.ZERO) == 0)
								oCurrentCheckPayment.setIsChangeDummyPayment(true);
						}
					} else
						showAttentionDialogBox(AppGlobal.g_oLang.get()._("dummy_payment_cannot_have_rules"));
				}
			} else{
				BigDecimal dRemainingChkAmt = m_oFuncPayment.getCurrentBalance().subtract(dPaymentAmount);
				BigDecimal dRoundedRemainingChkAmt = FuncPayment.roundPaymentAmountToBigDecimal(m_oFuncPayment.getCurrentBalance().subtract(dPaymentAmount), sRoundingMethodKey, iRoundDecimal);
				
				//use check rounding if the payment can full paid the check or the remaining check amount cannot be paid by the payment method
				if(dOriginalPaymentAmount.abs().compareTo(m_oFuncPayment.getCurrentBalance().abs()) >= 0 || dRoundedRemainingChkAmt.compareTo(BigDecimal.ZERO) == 0){
					BigDecimal dTmpCheckTotal = m_oFuncCheck.getCheckTotal().subtract(dRemainingChkAmt);
					
					//put the rounding amount to extra info
					if(m_oFuncCheck.isCheckExtraInfoExistBySectionVariableAndIndex("", PosCheckExtraInfo.VARIABLE_PAYMENT_ROUNDING, 0))
						m_oFuncCheck.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, "",
								PosCheckExtraInfo.VARIABLE_PAYMENT_ROUNDING, 0, AppGlobal.g_oFuncOutlet.get().roundCheckAmountToString(dRemainingChkAmt.negate()));
					else
						m_oFuncCheck.addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, "",
								PosCheckExtraInfo.VARIABLE_PAYMENT_ROUNDING, 0, AppGlobal.g_oFuncOutlet.get().roundCheckAmountToString(dRemainingChkAmt.negate()));
					//add rounding amount to chks_round_amount
					m_oFuncCheck.setRoundAmount(m_oFuncCheck.getRoundAmount().add(dRemainingChkAmt.negate()));
					
					//update funcPayment current balance
					m_oFuncPayment.setCurrentBalance(m_oFuncPayment.getCurrentBalance().subtract(dRemainingChkAmt));
					
					//set the check total with check rounding
					m_oFuncCheck.setCheckTotal(AppGlobal.g_oFuncOutlet.get().roundPaymentAmountToBigDecimal(dTmpCheckTotal));
					
					//update the cashier check total
					m_oFrameCashier.setTotal(AppGlobal.g_oFuncOutlet.get().roundCheckAmountToString(AppGlobal.g_oFuncOutlet.get().roundPaymentAmountToBigDecimal(dTmpCheckTotal)));
					
					//set the check rounding boolean to true
					m_oFuncCheck.setIsCheckRounding(true);
				}
			}
		}
		
		// Round the value
		dPaymentAmount = AppGlobal.g_oFuncOutlet.get().roundPaymentAmountToBigDecimal(dPaymentAmount);
		dTipsAmount = AppGlobal.g_oFuncOutlet.get().roundPaymentAmountToBigDecimal(dTipsAmount);
		
		// Check if the payment amount > current balance for credit card payment
		// not allow have tips
		if (m_oFuncPayment.getPaymentType(iItemIndex).equals(PosCheckPayment.PAYMENT_TYPE_CREDIT_CARD)) {
			if (!m_oFuncPayment.getPaymentMethodHaveTips(iItemIndex)
					&& dPaymentAmount.compareTo(m_oFuncPayment.getCurrentBalance()) > 0) {
				// Credit card not allow have tips and the payment amount >
				// current balance
				// Adjust the payment amount to current balance
				showAttentionDialogBox(AppGlobal.g_oLang.get()._("credit_card_payment_not_allow_tips") + System.lineSeparator()
						+ AppGlobal.g_oLang.get()._("payment_total_is_adjusted_to_current_balance"));
				dPaymentAmount = m_oFuncPayment.getCurrentBalance();
				dTipsAmount = BigDecimal.ZERO;
			}
		}
		if (m_oFuncPayment.getPaymentType(iItemIndex).equals(PosCheckPayment.PAYMENT_TYPE_REWRITE_CARD) && !bNotAllowFinishPayment) {
			boolean bSuccess = false;
			HashMap<String, ArrayList<String>> oRewritePaymentCardMapping = null;
			m_oFuncRewriteCard.setPaymentAmount(dPaymentAmount);
			// show card information screen
			FormRewriteCardOperation oFormRewriteCardOperation = new FormRewriteCardOperation(m_oFuncRewriteCard, this);
			String sMediaFileName = "", sMediaUrl = "";
			PosCheckPayment oPosCheckPayment = m_oFuncPayment.getCheckPaymentList().get(iItemIndex);
			PosPaymentMethod oPosPaymentMethod = m_oFuncPayment.getPaymentMethodList().getPaymentMethodList().get(oPosCheckPayment.getPaymentMethodId());
			if (oPosPaymentMethod.getInterfaceConfig(InfInterface.TYPE_PERIPHERAL_DEVICE) != null) {
				List<PosInterfaceConfig> oPosInterfaceConfigs = oPosPaymentMethod.getInterfaceConfig(InfInterface.TYPE_PERIPHERAL_DEVICE);
				
				for (PosInterfaceConfig oPosInterfaceConfig : oPosInterfaceConfigs) {
					if (!oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_DEVICE_MANAGER)
							|| oPosInterfaceConfig.getInterfaceConfig() == null)
						continue;
					
					if (oPosInterfaceConfig.getInterfaceConfig().optJSONObject("rewrite_card_setup").optJSONObject("params").has("payment_image_for_language_" + Integer.toString(AppGlobal.g_oCurrentLangIndex.get())))
						sMediaFileName = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("rewrite_card_setup").optJSONObject("params")
								.optJSONObject("payment_image_for_language_" + Integer.toString(AppGlobal.g_oCurrentLangIndex.get())).optString("value");
					if (oPosInterfaceConfig.getInterfaceConfig().optJSONObject("rewrite_card_setup").optJSONObject("params").has("payment_and_card_mapping"))
						oRewritePaymentCardMapping = m_oFuncRewriteCard.constructRewritePaymentCardMapping(oPosInterfaceConfig.getInterfaceConfig().optJSONObject("rewrite_card_setup").optJSONObject("params").optJSONObject("payment_and_card_mapping").optString("value"));
					break;
				}
			}
			MedMedia oMedMedia = new MedMedia();
			if(m_oMediaList.containsKey(sMediaFileName))
				oMedMedia = m_oMediaList.get(sMediaFileName);
			else{
				oMedMedia.readInfoAndUrlByFileName(sMediaFileName);
				m_oMediaList.put(sMediaFileName, oMedMedia);
			}
			
			if(!oMedMedia.getUrl().isEmpty())
				sMediaUrl = oMedMedia.getUrl();
			
			oFormRewriteCardOperation.initForReadCard(false, AppGlobal.g_oLang.get()._("please_swipe_card"), sMediaUrl, "");
			if (m_oFuncRewriteCard.getModelType().equals(FuncRewriteCard.TYPE_MODEL_ONE_CARD_SLN))
				// read card request
				oFormRewriteCardOperation.rewriteOneCardSlnRequest(FormRewriteCardOperation.TYPE_OPERATION_DEDUCT_CARD_VALUE);
			
			oFormRewriteCardOperation.addListener(this);
			oFormRewriteCardOperation.show();
			bSuccess = oFormRewriteCardOperation.isProcessSuccess();
			if (!bSuccess) {
				oFormRewriteCardOperation.finishOperation();
				m_oFrameCashier.removePayment(0, iItemIndex);
				m_oFrameDirectPaymentResult.removePayment(0, iItemIndex);
				m_oFuncPayment.deletePayment(iItemIndex);
				return;
			}
			String sPaymentSuccess = AppGlobal.g_oLang.get()._("pay_successfully");
			BigDecimal oCheckBalanceAmount = m_oFuncPayment.getCurrentBalance().subtract(dPaymentAmount);
			if(oCheckBalanceAmount.compareTo(BigDecimal.ZERO) > 0)
				sPaymentSuccess = sPaymentSuccess.concat(System.lineSeparator() + AppGlobal.g_oLang.get()._("check_unpaid_amount") + " : "
						+ StringLib.BigDecimalToString(oCheckBalanceAmount, AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal())
						+ System.lineSeparator() + AppGlobal.g_oLang.get()._("please_select_another_payment_to_finish_payment"));
			oFormRewriteCardOperation.showCardInformation(sPaymentSuccess);
			oFormRewriteCardOperation.show();
			
			// Save the card no. to extra info
			oCheckPaymentExtraInfos.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT,
					PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_CARD_NO, m_oFuncRewriteCard.getCardNumber()));
			oCheckPaymentExtraInfos.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT,
					PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_CARD_TYPE_NAME, m_oFuncRewriteCard.getCardType()));
			
			if(m_oFuncRewriteCard.getModelType().equals(FuncRewriteCard.TYPE_MODEL_ONE_CARD_SLN) && oRewritePaymentCardMapping != null) {
				//check whether successfully assign payment by returned card type
				boolean bIsAssignPayment = false;
				String sCardType = Integer.toString(m_oFuncRewriteCard.getPaymentCardType());
				String[] sPaymentCodes = oRewritePaymentCardMapping.keySet().toArray(new String[oRewritePaymentCardMapping.size()]);
				if (!sCardType.isEmpty() && sPaymentCodes.length != 0) {
					if(!m_oFuncRewriteCard.rewriteCardPaymentChecking(sPaymentCodes, m_oFuncPayment.getPaymentMethodList()))
						AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "Fail to change payment method for One card solution. (Incorrect Payment and Card Mapping Setup)");
					else {
						for (String sPaymentCode : oRewritePaymentCardMapping.keySet()) {
							if (!oRewritePaymentCardMapping.get(sPaymentCode).contains(sCardType))
								continue;
							PosPaymentMethod oRewriteCardPaymentMethod = m_oFuncPayment.getPaymentMethodList().getPaymentMethodByCode(sPaymentCode);
							if (oRewriteCardPaymentMethod != null) {
								oCurrentCheckPayment.setPaymId(oRewriteCardPaymentMethod.getPaymId());
								for (int i = 1; i <= 5; i++) {
									oCurrentCheckPayment.setName(i, oRewriteCardPaymentMethod.getName(i));
									oCurrentCheckPayment.setShortName(i, oRewriteCardPaymentMethod.getShortName(i));
								}
								m_oFrameCashier.updateBasketPaymentName(0, iItemIndex, oPosCheckPayment.getName(AppGlobal.g_oCurrentLangIndex.get()));
								bIsAssignPayment = true;
							}
							break;
						}
					}
				}
				if(!bIsAssignPayment)
					AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "Fail to change payment method for One card solution.");
			}
		}
		// Check if the payment is the svc payment
		if(m_oFuncPayment.getPaymentMethodList().getPaymentMethod(m_oFuncPayment.getCheckPaymentList().get(iItemIndex).getPaymentMethodId()).isLoyaltyInterfacePayment(InfVendor.KEY_GM_LOYALTY_SVC)){
			PosPaymentMethod oLoyaltySVCPaymentMethod = m_oFuncPayment.getPaymentMethodList().getPaymentMethod(m_oFuncPayment.getCheckPaymentList().get(iItemIndex).getPaymentMethodId());
			List<PosInterfaceConfig> oListLoyaltySVCInterfaceConfig = oLoyaltySVCPaymentMethod.getInterfaceConfigByTypeAndVendorKey(InfVendor.TYPE_LOYALTY_INTERFACE, InfVendor.KEY_GM_LOYALTY_SVC);
			for(PosInterfaceConfig oLoyaltySVCInterfaceConfig : oListLoyaltySVCInterfaceConfig){
				// If support auto top up card value from ledger account
				if(oLoyaltySVCInterfaceConfig.getConfigValue() != null && oLoyaltySVCInterfaceConfig.getConfigValue().has("general_setup") &&
						oLoyaltySVCInterfaceConfig.getConfigValue().optJSONObject("general_setup").optJSONObject("params").has("support_auto_top_up") &&
						oLoyaltySVCInterfaceConfig.getConfigValue().optJSONObject("general_setup").optJSONObject("params").optJSONObject("support_auto_top_up").optString("value", "0").equals("1")){
					
					JSONObject oTopUpInformation = null;
					BigDecimal dSvcAccountTotalBalance = BigDecimal.ZERO;
					try {
						if((m_oFuncPayment.getCheckPaymentList().get(iItemIndex).getExtraInfoFromList(PosCheckExtraInfo.SECTION_LOYALTY_SVC, PosCheckExtraInfo.VARIABLE_AUTO_TOP_UP_INFORMATION, 0).getValue() != null)) {
							oTopUpInformation = new JSONObject(m_oFuncPayment.getCheckPaymentList().get(iItemIndex).getExtraInfoFromList(PosCheckExtraInfo.SECTION_LOYALTY_SVC, PosCheckExtraInfo.VARIABLE_AUTO_TOP_UP_INFORMATION, 0).getValue().toString());
							
							if(oTopUpInformation.has("ledgerBalance") && oTopUpInformation.has("cardBalance"))
								dSvcAccountTotalBalance = new BigDecimal(oTopUpInformation.getString("ledgerBalance")).add(new BigDecimal(oTopUpInformation.getString("cardBalance")));
						}
					} catch (JSONException e) {
						e.printStackTrace();
						AppGlobal.stack2Log(e);
					}
					
					if(dSvcAccountTotalBalance.compareTo(dPaymentAmount.add(dTipsAmount)) < 0){
						showErrorDialogBox(AppGlobal.g_oLang.get()._("stored_value_is_not_enough"));
						m_oFrameCashier.removePayment(0, iItemIndex);
						m_oFrameDirectPaymentResult.removePayment(0, iItemIndex);
						m_oFuncPayment.deletePayment(iItemIndex);
						return;
					}
				}
			}
		}
		boolean bNegativeCalculation = false;
		if(dPaymentAmount.compareTo(BigDecimal.ZERO) == 0){
			// Negative check and direct payment case
			if(dOriginalPaymentAmount.compareTo(BigDecimal.ZERO) == 0)
				bNegativeCalculation = (m_oFuncPayment.getCurrentBalance().signum() < 0);
			else
				bNegativeCalculation = (dOriginalPaymentAmount.signum() < 0);
		}
		
		int iRet = m_oFuncPayment.editPayment(iItemIndex, dPaymentAmount, dTipsAmount, null, oCheckPaymentExtraInfos, bNegativeCalculation);
		if (iRet < 0) {
			// Fail to add payment
			showErrorDialogBox(AppGlobal.g_oLang.get()._("fail_to_add_payment"));
			return;
		}

/** TenderApply [editPayment] */;
/** To get the language setting correctly, "iLangIndex" is created using if-clause, preset value = 1
 *  "amount" can be simply obtained by param "dPaymentAmount" rather than using a new complex argument
 *  "tenderTypeNum" is obtained by a new method from FuncPayment.getPaymentMethodName(), the original one is getting the payment ID only*/
		if(!m_oFuncPayment.getCheckPaymentList().get(iItemIndex).isOldPayment()) {
			List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);
			if (!oInterfaceConfigList.isEmpty()) {
				for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
					if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
						if(iItemIndex >= m_oFuncPayment.getCheckPaymentList().size())
							continue;
						int iLangIndex = 1;
						if(oPosInterfaceConfig.getInterfaceConfig().has("general_setup") && oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").has("language_index"))
							iLangIndex = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").optJSONObject("language_index").optInt("value");
						HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
						oSurveillanceEventInfo.put("checkNum", m_oFuncCheck.getCheckPrefixNo());
						oSurveillanceEventInfo.put("amount", m_oFuncPayment.getCheckPaymentList().get(iItemIndex).getPayTotal().toPlainString());	// ken's approach ==> m_oFuncPayment.getCheckPaymentList().get(iItemIndex).getPayTotal().toPlainString()
						oSurveillanceEventInfo.put("tenderTypeNum", m_oFuncPayment.getPaymentMethodCode(iItemIndex)); //ken's approach (can only get payment id not payment code)==> String.valueOf(m_oFuncPayment.getCheckPaymentList().get(iItemIndex).getPaymentMethodId())
						oSurveillanceEventInfo.put("tenderTypeName", m_oFuncPayment.getPaymentMethodName(iItemIndex, iLangIndex));
						this.doSurveillanceEvent(FuncSurveillance.SURVEILLANCE_TYPE_TENDER_APPLY, oSurveillanceEventInfo);
					}
				}
			}
			
			// surveillance eConnect check termination event: TipAdd
			HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
			if(iItemIndex < m_oFuncPayment.getCheckPaymentList().size() && m_oFuncPayment.getCheckPaymentList().get(iItemIndex).getPayTips().compareTo(BigDecimal.ZERO) > 0) {
				oSurveillanceEventInfo.put("checkNum", m_oFuncCheck.getCheckPrefixNo());
				oSurveillanceEventInfo.put("amount", m_oFuncPayment.getCheckPaymentList().get(iItemIndex).getPayTips().toPlainString());
				this.doSurveillanceEvent(FuncSurveillance.SURVEILLANCE_TYPE_TIP_ADD, oSurveillanceEventInfo);
			}
		}
		
		if(AppGlobal.g_iLogLevel == 1){
			AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "Payment add: " + m_oFuncPayment.getPaymentMethodName(iItemIndex, 1) + ", $" + dPaymentAmount.toPlainString() + " (tips $:" + dTipsAmount.toPlainString() + ")");
		}
		
		// Update screen
		if (m_oFrameCashier.getVisible()) {
			m_oFrameCashier.clearEditField();
			m_oFrameCashier.updateBasketPaymentAmount(iSectionId, iItemIndex,
					StringLib.BigDecimalToString(m_oFuncPayment.getPaymentUserInputValue(iItemIndex),
							AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal()));
			m_oFrameCashier.updateBasketPaymentTips(iSectionId, iItemIndex,
					StringLib.BigDecimalToString(m_oFuncPayment.getPaymentFinalPayTips(iItemIndex),
							AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal()));
			Integer dDecimal = AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal();
			if (AppGlobal.g_oFuncOutlet.get().getCheckRoundDecimal() > AppGlobal.g_oFuncOutlet.get()
					.getPayRoundDecimal())
				dDecimal = AppGlobal.g_oFuncOutlet.get().getCheckRoundDecimal();
			m_oFrameCashier.setBalance(StringLib.BigDecimalToString(m_oFuncPayment.getCurrentBalance(),
					dDecimal));
			m_oFrameCashier.setSurcharge(StringLib.BigDecimalToString(m_oFuncPayment.getSurchargeTotal(),
					dDecimal));
			m_oFrameCashier.setTotalDue(StringLib.BigDecimalToString(m_oFuncPayment.getTotalDue(),
					dDecimal));
		}
		m_oFrameDirectPaymentResult.updateBasketPaymentAmount(iSectionId, iItemIndex,
				StringLib.BigDecimalToString(m_oFuncPayment.getPaymentUserInputValue(iItemIndex),
						AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal()));
		m_oFrameDirectPaymentResult.updateBasketPaymentTips(iSectionId, iItemIndex, StringLib.BigDecimalToString(
				m_oFuncPayment.getPaymentFinalPayTips(iItemIndex), AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal()));
		
		//checking for partial payment
		if(AppGlobal.g_oFuncStation.get().isPartialPayment()) {
			int iLastPayment = m_oFuncPayment.getCheckPaymentListCount() - 1;
			// if the last payment is old and the total payment total >= check total
			// change the iRet = 1 which make the operation not close check automatically
			if(m_oFuncPayment.isOldPayment(iLastPayment) && m_oFuncPayment.getCurrentBalance().compareTo(BigDecimal.ZERO) <= 0)
				iRet = 1;
		}
		
		if (iRet == 2 && !bNotAllowFinishPayment) {
			// Finish all payments
			if (m_oFuncCheck.hasReceiptUrl()) {
				FormConfirmBox oComfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("continue_process"),
						AppGlobal.g_oLang.get()._("quit"), this);
				oComfirmBox.setTitle(AppGlobal.g_oLang.get()._("warning"));
				oComfirmBox.setMessage(AppGlobal.g_oLang.get()._("ogs_einvoice_barcode_already_printed"));
				oComfirmBox.show();
				
				if (oComfirmBox.isOKClicked()) {
					FormConfirmBox oDoubleComfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("confirm"),
							AppGlobal.g_oLang.get()._("quit"), this);
					oDoubleComfirmBox.setTitle(AppGlobal.g_oLang.get()._("warning"));
					oDoubleComfirmBox
							.setMessage(AppGlobal.g_oLang.get()._("barcode_will_not_display_if_record_has_not_voided"));
					oDoubleComfirmBox.show();
					
					if (!oDoubleComfirmBox.isOKClicked()) {
						FrameCashier_exit();
						return;
					}
				} else {
					FrameCashier_exit();
					return;
				}
			}
			
			// Read Config for loading box during payment
			boolean bDisplayLoadingBoxDuringPayment = false;
			JSONObject oPaymentProcessSetting = AppGlobal.g_oFuncStation.get().getPaymentProcessSetting();
			if (oPaymentProcessSetting != null && oPaymentProcessSetting.has("display_loading_box_during_payment"))
				bDisplayLoadingBoxDuringPayment = oPaymentProcessSetting.optBoolean("display_loading_box_during_payment", false);
			
			if (bDisplayLoadingBoxDuringPayment) {
				// Display loading box during payment
				m_oFormProcessBox = new FormProcessBox(this);
				m_oFormProcessBox.setTitle(AppGlobal.g_oLang.get()._("loading") + "...");
				m_oFormProcessBox.setMessage(AppGlobal.g_oLang.get()._("payment_processing") + System.lineSeparator()
						+ AppGlobal.g_oLang.get()._("please_wait"));
				m_oFormProcessBox.showWithoutRemoveUI();
			}
			
			finishPayment(true);
			
			if (bDisplayLoadingBoxDuringPayment){
				// Remove loading box during payment
				m_oFormProcessBox.closeShowWithoutRemoveUI();
			}
			
			// For bar mode / fine dining mode: stay in cashier when interface payment (non-direct) failed with config by location
			if(m_bIsInterfacePaymentFailedBySetup && !m_bIsInterfaceDirectPaymentFailedBySetup &&
					(AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) || AppGlobal.OPERATION_MODE.fine_dining.equals(m_eOperationMode))) {
				// Call update check - to update outlet table database
				m_oFuncCheck.updateCheck(false, false, PosCheckItem.SEND_MODE_NEW_ITEM, 0, true, 0, 0, 0, "", false, false, false, false, 0, 0, false, false);
				
				// Open Cashier Mode
				startCashierMode(false);
				
				// Reload the check to payment screen
				loadCheckForCashierMode(m_oFuncCheck.getCheckPrefixNo(), "", "");
				
				m_bIsInterfacePaymentFailedBySetup = false;
			}
			
		} else {
			if (AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name()))
				m_oFrameCashierPanel.setVisible(true);
		}
		
		// Generate dummy payment
		if (oCurrentCheckPayment.getDummyPaymentRelationship().equals(PosCheckPayment.DUMMY_PAYMENT_RELATIONSHIP_PARENT) && oDummyPaymentMethod != null){
			if(oCurrentCheckPayment.isChangeToDummyPayment())
				deletePaymentInCashierMode(iItemIndex, true);
			// Add to check payment list first
			ArrayList<PosCheckExtraInfo> oExtraInfos = new ArrayList<PosCheckExtraInfo>();
			oExtraInfos.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT,
					"", PosCheckExtraInfo.VARIABLE_DUMMY_PAYMENT,
					"true"));
			
			preProcessEachPayment(iDummyPaymentMethodId, "", oExtraInfos, true, dPaymentRoundingAmount);
		}
	}
	
	public boolean deletePaymentInCashierMode(int iPaymentIndex, boolean bForceDelete) {
		String sMaskPan = "", sMessage = "";
		int iPaymId = m_oFuncPayment.getCheckPaymentList().get(iPaymentIndex).getPaymentMethodId();
		if (m_oFuncPayment.getCheckPaymentList().size() > 0) {
			
			if (m_oFuncPayment.getPaymentType(iPaymentIndex).equals(PosCheckPayment.PAYMENT_TYPE_REWRITE_CARD)) {
				// There is Rewrite Card payment
				sMessage = AppGlobal.g_oLang.get()._("rewrite_card_payment_cannot_be_voided");
			}
			if(m_oFuncPayment.isOldPayment(iPaymentIndex))
				sMessage = AppGlobal.g_oLang.get()._("old_payment_cannot_be_voided");
			
			if(!sMessage.isEmpty()) {
				showErrorDialogBox(sMessage);
				return false;
			}
			
			if (!bForceDelete) {
				// get the masked pan if it is spa interface payment
				//int iPaymId = m_oFuncPayment.getCheckPaymentList().get(iPaymentIndex).getPaymentMethodId();
				if (m_oFuncPayment.getPaymentMethodList().getPaymentMethodList().get(iPaymId).isPaymentInterface(InfVendor.KEY_SPA_STANDARD))
					sMaskPan = m_oFuncPayment.getCheckPaymentList().get(iPaymentIndex).getPosPaymentGatewayTransactionsList().getPosPaymentGatewayTransactionsByIndex(0).getMaskedPan();
				if (!sMaskPan.isEmpty())
					sMessage = AppGlobal.g_oLang.get()._("masked_pan") + " : " + sMaskPan;
				// Ask if confirm
				FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
						AppGlobal.g_oLang.get()._("no"), this);
				oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
				oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("confirm_to_delete") + "?" + System.lineSeparator() + sMessage);
				oFormConfirmBox.show();
				if (oFormConfirmBox.isOKClicked() == false)
					return false;
			}
			// check the authority control to cancel the payment if the payment contains SPA cc auth
			if (!sMaskPan.isEmpty()) {
				boolean bFormTableFloorPlan = false;
				if (!checkFunctionUserPasswordAndAuthority(AppGlobal.FUNC_LIST.payment_interface_cancel_card_authorization.name(), bFormTableFloorPlan))
					return false;
			}
			
			PosCheckPayment oCheckPayment = m_oFuncPayment.getCheckPaymentList().get(iPaymentIndex);
			PosPaymentMethod oPaymentMethod = m_oFuncPayment.getPaymentMethodList()
					.getPaymentMethod(oCheckPayment.getPaymentMethodId());
			PosVoidReason oVoidReason = null;
			if (!oPaymentMethod.getAutoDiscountTypeId().equals("")
					&& Integer.valueOf(oPaymentMethod.getAutoDiscountTypeId()) > 0)
				oVoidReason = getPaymentVoidReasonForCancelPayment();
			rollbackTaxAndSC(oCheckPayment, oVoidReason);
			
			m_oFuncPayment.setCurrentBalance(m_oFuncCheck.getCheckTotal().subtract(m_oFuncPayment.getPaidBalance()));
			m_oFuncPayment.setSurcharge(m_oFuncPayment.getSurchargeTotal().subtract(oCheckPayment.getSurcharge()));
			m_oFuncPayment.setTotalDue(m_oFuncPayment.getTotalDue().subtract(oCheckPayment.getPayTotal()).subtract(oCheckPayment.getSurcharge()).subtract(oCheckPayment.getPayTips()));
			m_oFrameCashier
					.setTotal(AppGlobal.g_oFuncOutlet.get().roundCheckAmountToString(m_oFuncCheck.getCheckTotal()));
			Integer dDecimal = AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal();
			if (AppGlobal.g_oFuncOutlet.get().getCheckRoundDecimal() > AppGlobal.g_oFuncOutlet.get()
					.getPayRoundDecimal())
				dDecimal = AppGlobal.g_oFuncOutlet.get().getCheckRoundDecimal();
			m_oFrameCashier.setBalance(StringLib.BigDecimalToString(m_oFuncPayment.getCurrentBalance(),
					dDecimal));
			m_oFrameCashier.setSurcharge(StringLib.BigDecimalToString(m_oFuncPayment.getSurchargeTotal(),
					dDecimal));
			m_oFrameCashier.setTotalDue(StringLib.BigDecimalToString(m_oFuncPayment.getTotalDue(),
					dDecimal));
			
			m_oFrameCashier.removePayment(0, iPaymentIndex);
			m_oFrameDirectPaymentResult.removePayment(0, iPaymentIndex);
			if (m_oFuncPayment.getPaymentType(iPaymentIndex).equals(PosCheckPayment.PAYMENT_TYPE_COUPON)) {
				// update corresponding redeem item's redeem count
				String sCitmId = m_oFuncPayment.getPaymentRefDataByKey(iPaymentIndex, 1, "redeem_citm_id");
				if (sCitmId != null) {
					FuncCheckItem oRedeemedItem = m_oFuncCheck.getOrderedCheckItemByCitmId(sCitmId);
					if (oRedeemedItem != null
							&& oRedeemedItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_ONLINE_COUPON,
							PosCheckExtraInfo.VARIABLE_REDEEM_COUNT) != null) {
						int iRedeemCount = Integer.valueOf(oRedeemedItem.getExtraInfoBySectionAndVariable(
								PosCheckExtraInfo.SECTION_ONLINE_COUPON, PosCheckExtraInfo.VARIABLE_REDEEM_COUNT))
								.intValue();
						if (iRedeemCount > 1)
							oRedeemedItem.updateExtraInfoValue(PosCheckExtraInfo.BY_ITEM,
									PosCheckExtraInfo.SECTION_ONLINE_COUPON, PosCheckExtraInfo.VARIABLE_REDEEM_COUNT,
									String.valueOf((iRedeemCount - 1)));
						else
							oRedeemedItem.removeExtraInfoFromList(PosCheckExtraInfo.BY_ITEM,
									PosCheckExtraInfo.SECTION_ONLINE_COUPON, PosCheckExtraInfo.VARIABLE_REDEEM_COUNT);
					}
				}
			}
			m_oFuncPayment.deletePayment(iPaymentIndex);
			
			try {
				AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "", AppGlobal.g_oFuncUser.get().getUserId() + "",
						"Cancel payment: " + oPaymentMethod.getName(1) + " $" + oCheckPayment.getPayTotal().toPlainString());
			} catch (Exception e) {}
			
			// Update screen
			if (AppGlobal.g_oFuncOutlet.get().getCheckRoundDecimal() > AppGlobal.g_oFuncOutlet.get()
					.getPayRoundDecimal()) {
				m_oFrameCashier.setBalance(StringLib.BigDecimalToString(m_oFuncPayment.getCurrentBalance(),
						AppGlobal.g_oFuncOutlet.get().getCheckRoundDecimal()));
			} else {
				m_oFrameCashier.setBalance(StringLib.BigDecimalToString(m_oFuncPayment.getCurrentBalance(),
						AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal()));
			}
			
			m_oFrameCashier.setCurrentStep(0);
		}
		
		return true;
	}
	
	public void finishPayment(boolean bCloseCheck) {
		boolean bPass = true, bAdjustPayment = false;
		int iChosenReceiptPfmtId = 0;
		DateTime oPaymentDateTime = AppGlobal.getCurrentTime(false);
		
		if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk) || m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food)) {
			// For kiosk mode, check if the business date is correct or not before complete payment
			PosBusinessDay oBusinessDay = new PosBusinessDay();
			//if (!oBusinessDay.readById(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), PosBusinessDay.STATUS_RUNNING)) {
			DateTimeFormatter oDateFormat = DateTimeFormat.forPattern("yyyy-MM-dd");
			DateTime oCurrentDate = AppGlobal.getCurrentTime(false);
			if(!oDateFormat.print(oCurrentDate).equals(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getDateInString())
					&& (!oBusinessDay.readById(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), PosBusinessDay.STATUS_RUNNING))) {
				// Incorrect business date
				showErrorDialogBox(AppGlobal.g_oLang.get()._("invalid_business_day"));
				
				// Force exit
				quitCheck(true);
				
				logout(true);
				
				return;
			}
		}
		
		if(bCloseCheck && AppGlobal.g_oFuncStation.get().getBreakdownInclusiveScTaxAtFinalSettle() && m_iCashierMode != 3)
			m_oFuncCheck.breakdownInclusiveScTax();
		
		// Do loyalty calculate transaction
		if(bCloseCheck) {
			m_oFuncCheck.calcLoyaltyBaseTotal();
			if (!m_oFuncCheck.calculateLoyaltyTransaction()) {
				String sErrorMessage = m_oFuncCheck.getLastErrorMessage();
				if (!sErrorMessage.isEmpty()) {
					showErrorDialogBox(sErrorMessage);
				}
			}
		}
		
		// Check whether is adjust payments mode and do release payment for previous check
		if (m_iCashierMode == 3) {
			bAdjustPayment = true;
			if (m_oFuncCheck.releasePayment(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
					AppGlobal.g_oFuncOutlet.get().getOutletId(), m_oFuncCheck.getCheckPrefixNo(), 0, "",
					bAdjustPayment, m_oFuncPayment.getPaymentMethodList(), new PosVoidReason(0), true, -1) == false) {
				PosPaymentMethodList oPosPaymentMethodList = m_oFuncPayment.getPaymentMethodList();
				for (PosCheckPayment oCheckPayment : m_oFuncCheck.getPaymentSnapShotList()) {
					PosPaymentMethod oPosPaymentMethod = oPosPaymentMethodList
							.getPaymentMethod(oCheckPayment.getPaymentMethodId());
					/*** Check Auto Discount ***/
					boolean bWaiveSC = false, bWaiveTax = false;
					int iAutoDiscId = 0;
					String sAutoDiscType = "item";
					
					// Waive SC and Tax as necessary
					if (oPosPaymentMethod.isAutoWaiveSc())
						bWaiveSC = true;
					
					if (oPosPaymentMethod.isAutoWaiveTax())
						bWaiveTax = true;
					
					// Check whether have auto discount
					if (!oPosPaymentMethod.getAutoDiscountTypeId().equals("")) {
						iAutoDiscId = Integer.valueOf(oPosPaymentMethod.getAutoDiscountTypeId());
						if (oPosPaymentMethod.isAutoCheckDiscountType())
							sAutoDiscType = "check";
					}
					
					// Really waive SC/Tax
					if (bWaiveSC || bWaiveTax) {
						int j;
						boolean[] bChosenSc = new boolean[5];
						String[] sChosenTax = new String[25];
						List<HashMap<String, Integer>> oSelectedItem = new ArrayList<HashMap<String, Integer>>();
						
						oSelectedItem = m_oFuncCheck.getSectionItemIndexForCurrentOrderedItem();
						for (j = 0; j < 5; j++)
							bChosenSc[j] = bWaiveSC;
						for (j = 0; j < 25; j++){
							if(bWaiveTax)
								sChosenTax[j] = PosOverrideCondition.CHARGE_TAX_WAIVE;
							else
								sChosenTax[j] = PosOverrideCondition.CHARGE_TAX_NO_CHANGE;
						}
						m_oFuncCheck.addWaiveScTax(false, oSelectedItem, bChosenSc, sChosenTax);
					}
					
					// Check whether have auto discount
					if (iAutoDiscId > 0) {
						String sApplyDiscountResult = autoDiscountForPayment(sAutoDiscType, iAutoDiscId, null, null,
								null);
						if (sApplyDiscountResult.equals(FormMain.FUNC_RESULT_NO_SUCH_RECORD)) {
							AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
									AppGlobal.g_oFuncUser.get().getUserId() + "",
									"Payment with " + oPosPaymentMethod.getName(1)
											+ " and cannot find the predefine auto discount(id:" + iAutoDiscId + ")");
						}
					}
				}
				// Error occur
				showErrorDialogBox(m_oFuncCheck.getLastErrorMessage());
				
				m_oFuncCheck.unlockCheck();
				exitCashier();
				return;
			}
		}
		
		if(AppGlobal.g_iLogLevel == 1 || AppGlobal.g_iLogLevel >= 9){
			if(m_iCashierMode == 3)
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "Start finish adjust payments");
			else
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(),
						new Exception().getStackTrace()[0].getMethodName(), "Start finish payment");
		}
		
		this.assignPaymentCheckType();
		
		// Get receipt format
		// No receipt format for adjust payments (i.e. m_iCashierMode = 3)
		// Get receipt format
		if (m_iCashierMode != 3 || AppGlobal.g_oFuncStation.get().isAdjustPaymentReprintReceipt()) {
			// Get receipt format
			boolean bNotAllowPrintReceipt = isNotAllowPrintReceipt(true, bCloseCheck);
			
			// Set the Print Receipt Flag
			m_oFuncCheck.setNoNeedPrintReceipt(bNotAllowPrintReceipt);
			
			if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk) || !bNotAllowPrintReceipt) {
				if (AppGlobal.g_oFuncStation.get().getStation().getReceiptPrtqId() > 0) {
					iChosenReceiptPfmtId = selectReceiptFormat(true);
					if (iChosenReceiptPfmtId == 0) {
						exitCashier();
						return;
					}
				}
			}
		}
		
		boolean bSendAndPaid = false;
		if (m_iCashierMode != 3 && (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode)
				|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode))) {
			bSendAndPaid = true;
		}
		
		// Revenue and non-revenue handling
		// If check is revenue check and payments are revenue payment, no change
		// If check is revenue check and payments are non-revenue payment, check
		// will become non-revenue check
		// If check is non-revenue check (in different type: e.g. advance order)
		// and payments are revenue payment, no change on check and payments
		// will become non-revenue payment (in different type: e.g. advance
		// order)
		// If check is non-revenue check (in different type: e.g. advance order)
		// and payments are non-revenue payment, no change on check and payments
		// will become non-revenue payment (in different type: e.g. advance
		// order)
		if (m_oFuncCheck.isRevenue() && m_oFuncPayment.getNonRevenue().equals(PosCheck.NON_REVENUE_PAYMENT))
			m_oFuncCheck.setNonRevenue(PosCheck.NON_REVENUE_PAYMENT, false);
		else {
			for (PosCheckPayment oPosCheckPayment : m_oFuncPayment.getCheckPaymentList())
				oPosCheckPayment.setNonRevenue(m_oFuncCheck.getNonRevenue());
		}
		
		// ************ DO ALL ONLINE POSTING INTERFACE ***************
		boolean bPostSuccess = true;
		List<PosCheckPayment> oPostedPosCheckPayments = new ArrayList<PosCheckPayment>();
		int iPaymentSeq = 0;
		boolean bIsFirstPosting = true;
		
		if(AppGlobal.g_iLogLevel >= 1){
			AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "Start handle payments - cnt: " + m_oFuncPayment.getCheckPaymentList().size());
		}
		
		// Loop all payment
		BigDecimal dPreviousPaymentTotal = BigDecimal.ZERO;
		BigDecimal dPointPaymentTotal = BigDecimal.ZERO;
		BigDecimal dVoucherPaymentTotal = BigDecimal.ZERO;
		m_oFuncCheck.setSurcharge(BigDecimal.ZERO);
		
		for (PosCheckPayment oPosCheckPayment : m_oFuncPayment.getCheckPaymentList()) {
			iPaymentSeq++;
			
			// Create a list for some interface usage
			List<PosCheckPayment> oCheckPaymentsList = new ArrayList<PosCheckPayment>();
			oCheckPaymentsList.add(oPosCheckPayment);
			
			PosPaymentMethod oPaymentMethod = m_oFuncPayment.getPaymentMethodList().getPaymentMethodList()
					.get(oPosCheckPayment.getPaymentMethodId());
			
			if(AppGlobal.g_iLogLevel >= 1){
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "#" + iPaymentSeq + " " + oPaymentMethod.getName(1) + ", $" + oPosCheckPayment.getPayTotal().toPlainString());
			}
			
			// Pass all interfaces, add the check payment object to posted payment list, except direct sales which added in the begining
			oPostedPosCheckPayments.add(oPosCheckPayment);
			
			// Calculate the previous payment total for next payment's interface
			dPreviousPaymentTotal = dPreviousPaymentTotal.add(oPosCheckPayment.getPayTotal());

			
			if(AppGlobal.g_iLogLevel >= 1){
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "#" + iPaymentSeq + " " + oPaymentMethod.getName(1) + " finish handle");
			}
			
			if(oPosCheckPayment.getSurcharge().compareTo(BigDecimal.ZERO) != 0)
				m_oFuncCheck.setSurcharge(m_oFuncCheck.getSurcharge().add(oPosCheckPayment.getSurcharge()));
		}
		
		if(AppGlobal.g_iLogLevel >= 1){
			AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "Finish handle payments - cnt: " + oPostedPosCheckPayments.size() + ", result: " + bPostSuccess);
		}
		
		if (bCloseCheck && m_oFuncKitchenMonitor.isSupportKitchenMonitor()
				&& m_oFuncCheck.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_KITCHEN_MONITOR,
				PosCheckExtraInfo.VARIABLE_INTERFACE_ID) != null) {
			FormKitchenMonitorOperation oFormKitchenMonitorOperation = new FormKitchenMonitorOperation(
					m_oFuncKitchenMonitor, this);
			oFormKitchenMonitorOperation.initializeKitchenMonitorOperation();
			int iCheckNumber = m_oFuncCheck.getCheckNo();
			double dItemTotal = m_oFuncCheck.getItemTotal().doubleValue();
			double dTaxTotal = m_oFuncCheck.getTaxTotal().doubleValue();
			double dCheckTotal = m_oFuncCheck.getCheckTotal().doubleValue();
			BigDecimal dPaymentChange = BigDecimal.ZERO;
			for (PosCheckPayment oPosCheckPayment : m_oFuncCheck.getCheckPaymentList())
				dPaymentChange = dPaymentChange.add(oPosCheckPayment.getPayChange());
			oFormKitchenMonitorOperation.kitchenMonitorQsrPayCheck(iCheckNumber, dItemTotal, dTaxTotal, dCheckTotal,
					m_oFuncCheck.getCheckTotal().doubleValue(), dPaymentChange.doubleValue());
			oFormKitchenMonitorOperation.stepControl();
			oFormKitchenMonitorOperation.show();
		}
		
		if (!bPostSuccess) {
			// Void back all posted interface
			if(AppGlobal.g_iLogLevel >= 1){
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "FAIL TO POST - Start roll back posted interface, cnt: " + oPostedPosCheckPayments.size());
			}

			BigDecimal dVoidPreviousPaymentTotal = BigDecimal.ZERO;
			int iPaymentCount = 0;
			if (oPostedPosCheckPayments.size() > 0) {
				// For SCAN PAY void slip
				List<PosCheckPayment> oVoidedCheckPayments = new ArrayList<PosCheckPayment>();
				
				boolean bIsFirstVoidPosting = true;
				for (PosCheckPayment oPostedCheckPayment : oPostedPosCheckPayments) {
					iPaymentCount++;
					
					PosPaymentMethod oVoidPaymentMethod = m_oFuncPayment.getPaymentMethodList().getPaymentMethodList()
							.get(oPostedCheckPayment.getPaymentMethodId());
					
					if(AppGlobal.g_iLogLevel >= 1)
						AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "void #" + iPaymentCount + " " + oVoidPaymentMethod.getName(1) + ", $" + oPostedCheckPayment.getPayTotal().toPlainString());
					
					// Create a list for some interface usage
					List<PosCheckPayment> oCheckPaymentsList = new ArrayList<PosCheckPayment>();
					oCheckPaymentsList.add(oPostedCheckPayment);
					
					// Void previous successful PMS posting
					if (oPostedCheckPayment.havePmsPayment() && oPostedCheckPayment.getPostingSuccess()) {
						PosInterfaceConfig oPosInterfaceConfig = oVoidPaymentMethod.getInterfaceConfig(InfInterface.TYPE_PMS).get(0);
						if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_PEGASUS)) {
							String sPaytype = oPostedCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_PMS,
									PosCheckExtraInfo.VARIABLE_PAYTYPE, 0).getValue();
							if (sPaytype != null && sPaytype.equals("package_amount"))
								continue;
						}
						
						if(AppGlobal.g_iLogLevel >= 1){
							AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "void #" + iPaymentCount + " Begin void PMS");
						}
						
						FuncPMS oFuncPMS = new FuncPMS();
						oFuncPMS.pmsVoidPosting(m_oFuncCheck, oPostedCheckPayment, oVoidPaymentMethod, iPaymentCount,
								dVoidPreviousPaymentTotal, m_oFuncPayment.getCheckPaymentList(), null);
						
						oPostedCheckPayment.setPostingSuccess(false);
						
						if(AppGlobal.g_iLogLevel >= 1){
							AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "void #" + iPaymentCount + " After void PMS");
						}
					}
					dVoidPreviousPaymentTotal = dVoidPreviousPaymentTotal.add(oPostedCheckPayment.getPayTotal());
					
					// surveillance eConnect check termination event: TipVoid
					if(oPostedCheckPayment.getPayTips().compareTo(BigDecimal.ZERO) > 0) {
						HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
						oSurveillanceEventInfo.put("checkNum", m_oFuncCheck.getCheckPrefixNo());
						oSurveillanceEventInfo.put("amount", oPostedCheckPayment.getPayTips().negate().toPlainString());
						this.doSurveillanceEvent(FuncSurveillance.SURVEILLANCE_TYPE_TIP_VOID, oSurveillanceEventInfo);
					}
				}
				
				// For SCAN PAY, print void slip
				if (oVoidedCheckPayments.size() > 0) {
					FuncPaymentInterface oFuncPaymentInterface = new FuncPaymentInterface(null);
					oFuncPaymentInterface.printVoidPostingSlip(FuncPaymentInterface.PRINT_SLIP_TYPE_SCAN_PAY_VOID,
							oVoidedCheckPayments);
				}
			}

			if(AppGlobal.g_iLogLevel >= 1){
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "exit cashier :" + isAllowExitCashierPanel());
			}
			
			if(!isAllowExitCashierPanel().isEmpty()){
				for(int i = m_oFuncPayment.getCheckPaymentList().size() - 1 ; i >= 0; i--){
					PosCheckPayment oCheckPayment = m_oFuncPayment.getCheckPaymentList().get(i);
					PosPaymentMethod oPaymentMethod = m_oFuncPayment.getPaymentMethodList().getPaymentMethodList().get(oCheckPayment.getPaymentMethodId());
					if(oCheckPayment.havePmsPayment()){
						PosInterfaceConfig oPosInterfaceConfig = oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_PMS).get(0);
						if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_PEGASUS)) {
							String sPaytype = oCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_PMS,
									PosCheckExtraInfo.VARIABLE_PAYTYPE, 0).getValue();
							if (sPaytype != null && sPaytype.equals("package_amount"))
								continue;
						}
					}
					if(oCheckPayment.getPaymentType().equals(PosCheckPayment.PAYMENT_TYPE_REWRITE_CARD))
						continue;
					deletePaymentInCashierMode(i, true);
				}
			}
			
			if(bCloseCheck && AppGlobal.g_oFuncStation.get().getBreakdownInclusiveScTaxAtFinalSettle())
				m_oFuncCheck.rollbackToInclusiveScTax();
			
			
			// Config by location - Stay in cashier if interface payment posting failed
			if(AppGlobal.g_oFuncStation.get().isStayInCashierWhenInterfacePaymentFailed() && (AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode)
					|| AppGlobal.OPERATION_MODE.fine_dining.equals(m_eOperationMode)) && m_oFrameCashier.getVisible()) {
				m_bIsInterfacePaymentFailedBySetup = true;
				if (m_iCashierMode == 2)
					m_bIsInterfaceDirectPaymentFailedBySetup = true;
			}
			
			// Clear the check round amount if the check have check rounding
			if(m_oFuncCheck.isCheckExtraInfoExistBySectionVariableAndIndex("", PosCheckExtraInfo.VARIABLE_PAYMENT_ROUNDING, 0))
				m_oFuncCheck.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, "", PosCheckExtraInfo.VARIABLE_PAYMENT_ROUNDING, 0, "0");
			
			exitCashier();
			
			return;
			
		} else {
			
			if(AppGlobal.g_iLogLevel >= 1){
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "SUCCESS TO POST");
			}
		}
		// Save all payments
		m_oFuncPayment.setPaymentDateTime(oPaymentDateTime);
		
		// Check Config set or not, then call function to print questionnare
		if(AppGlobal.g_oFuncStation.get().getSettlementCount() != 0) {
			AppGlobal.g_oFuncOutlet.get().setSettlementCount(AppGlobal.g_oFuncOutlet.get().getSettlementCount() + 1);
			if(AppGlobal.g_oFuncOutlet.get().getSettlementCount() >= AppGlobal.g_oFuncStation.get().getSettlementCount()) {
				m_oFuncCheck.printQuestionnaireSlip();
				AppGlobal.g_oFuncOutlet.get().setSettlementCount(0);
			}
		}
		
		if (AppGlobal.g_iLogLevel == 1 || AppGlobal.g_iLogLevel >= 9) {
			AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(),
					"Before open drawer");
		}
		
		// Open drawer, payment will be updated in "updatePaymentInfo" function
		boolean bOpenDrawerOnly = true;
		if (bPass && m_oFuncPayment.saveMultipleCheckPayments(m_oFuncCheck.getCheckPrefixNo(),
				AppGlobal.g_oFuncStation.get().getStation().getReceiptPrtqId(), iChosenReceiptPfmtId,
				bOpenDrawerOnly) == false) {
			
			if (AppGlobal.g_iLogLevel == 1 || AppGlobal.g_iLogLevel >= 9) {
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(),
						"Fail to call open drawer");
			}
			
			// Fail to add payment
			showErrorDialogBox(AppGlobal.g_oLang.get()._("fail_to_save_payments"));
			bPass = false;
		}
		
		if (AppGlobal.g_iLogLevel == 1 || AppGlobal.g_iLogLevel >= 9) {
			AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(),
					"After open drawer");
		}
		
		dPreviousPaymentTotal = BigDecimal.ZERO;
		iPaymentSeq = 0;
		for (PosCheckPayment oPosCheckPayment : m_oFuncPayment.getCheckPaymentList()) {
			iPaymentSeq++;
			
			// Create a list for some interface usage
			List<PosCheckPayment> oCheckPaymentsList = new ArrayList<PosCheckPayment>();
			oCheckPaymentsList.add(oPosCheckPayment);
			
			PosPaymentMethod oPaymentMethod = m_oFuncPayment.getPaymentMethodList().getPaymentMethodList()
					.get(oPosCheckPayment.getPaymentMethodId());
			
			// Do PMS posting
			FuncPMS oFuncPMS = new FuncPMS(false);
			
			if (oPosCheckPayment.getPostingSuccess())
				continue;
			
			HashMap<String, Boolean> oPartialPaymentInfo = new HashMap<String, Boolean>();
			oPartialPaymentInfo.put("closeCheck", bCloseCheck);
			if (!oPosCheckPayment.isOldPayment() &&
					(bCloseCheck && oPosCheckPayment.havePmsPayment() && FuncPMS.isAllowPostAfterPayment(oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_PMS).get(0))) &&
					oFuncPMS.pmsPosting(m_oFuncCheck, oPosCheckPayment, oPaymentMethod, iPaymentSeq, dPreviousPaymentTotal,
							m_oFuncPayment.getCheckPaymentList(), oPartialPaymentInfo) == false) {
				
				if(AppGlobal.g_iLogLevel >= 1){
					AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "#" + iPaymentSeq + " Fail to add job to PMS queue");
				}
			}
			
			if(AppGlobal.g_iLogLevel >= 1){
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "#" + iPaymentSeq + " After add job to PMS queue");
			}
			
			// Calculate the previous payment total for next payment's interface
			dPreviousPaymentTotal = dPreviousPaymentTotal.add(oPosCheckPayment.getPayTotal());
		}
		
		// Separate payment
		ArrayList<PosCheckPayment> oNewSplitPosCheckPayment = separatePayment();
		
		// Build the list under FuncCheck to update payment
		for (PosCheckPayment oPosCheckPayment : m_oFuncPayment.getCheckPaymentList()) {
			if(oPosCheckPayment.isOldPayment())
				continue;
			m_oFuncCheck.addNewCheckPaymentToList(new PosCheckPayment(oPosCheckPayment));
		}
		
		// Add the new split payment to payment list
		for(PosCheckPayment oSplitPayment : oNewSplitPosCheckPayment)
			m_oFuncPayment.addOldCheckPayment(oSplitPayment);
		
		if (AppGlobal.g_iLogLevel == 1 || AppGlobal.g_iLogLevel >= 9) {
			AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(),
					"Before update database");
		}
		
		// Wait for previous check processing finish
		waitForProcessCheckFinish("", "");
		
		// Save check
		String sPeriodId = AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId();
		boolean bIsFastFoodMode = false;
		boolean bIsSelfOrderKioskMode = false;
		boolean bIsBarTabMode = false;
		
		// get the current check number
		// **** it is for reference only ****
		String sCurrentCheckPrefixNo = "";
		
		// Increment the check no. for new check in fast food mode (check no. generate by outlet / standalone mode)
		if ((m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food) || m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk))
				&& (!AppGlobal.g_oFuncOutlet.get().getBusinessDay().isCheckNumGeneratedByOutlet() || AppGlobal.g_oFuncSmartStation.isStandaloneRole())) {
			if (m_oFuncCheck.isOldCheck())
				sCurrentCheckPrefixNo = m_oFuncCheck.getCheckPrefixNo();
			else {
				sCurrentCheckPrefixNo = AppGlobal.g_oFuncStation.get().getNextCheckPrefixNumber(false);
				m_oFuncCheck.setReferenceCheckPrefix(sCurrentCheckPrefixNo);
				AppGlobal.g_oFuncStation.get().addOneToLastCheckNumber();
			}
		}
		
		if (m_iCashierMode != 3 && (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food)
				|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk)
				|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab))) {
			if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk))
				bIsSelfOrderKioskMode = true;
			else if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food))
				bIsFastFoodMode = true;
			else
				bIsBarTabMode = true;
			
			// Add the process to stored list
			String sStoredProcessingCheckKey = m_oFuncCheck.getTableNoWithExtensionForDisplay();
			this.addProcessCheck(sStoredProcessingCheckKey);
		}
		
		if (bPass && m_oFuncCheck.updatePaymentInfo(AppGlobal.g_oFuncOutlet.get().getOutletId(), sPeriodId,
				oPaymentDateTime, AppGlobal.g_oFuncStation.get().getStation().getReceiptPrtqId(), iChosenReceiptPfmtId,
				bSendAndPaid, bIsFastFoodMode, bIsSelfOrderKioskMode, bIsBarTabMode, bAdjustPayment, bCloseCheck, 0) == false) {
			
			if (AppGlobal.g_iLogLevel == 1 || AppGlobal.g_iLogLevel >= 9) {
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(),
						"Fail to save payments");
			}
			
			// Fail to add payment
			showErrorDialogBox(AppGlobal.g_oLang.get()._("fail_to_save_payments"));
			bPass = false;
		}
		
		// *** Payment fail
		if (!bPass) {
			exitCashier();
			return;
		}
		
		if (AppGlobal.g_iLogLevel == 1 || AppGlobal.g_iLogLevel >= 9) {
			AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(),
					"After update database");
		}
		
		if (bPass && m_oFuncCheck.hasMember()) {
			// Update member spending
			updateMemberSpending(m_oFuncCheck.getMemberId(), m_oFuncCheck.getCheckTotal());
		}
		
		// remove the check from printed check list if payment interface is used
		// for printing
		if (bPass && !m_oFuncCheck.getCheckExtraInfoValueListBySectionVariable(
				PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID).isEmpty()) {
			int iInterfaceId = 0;
			if (m_oFuncCheck.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE,
					PosCheckExtraInfo.VARIABLE_INTERFACE_ID) != null
					&& !m_oFuncCheck
					.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE,
							PosCheckExtraInfo.VARIABLE_INTERFACE_ID)
					.isEmpty())
				iInterfaceId = Integer.valueOf(m_oFuncCheck.getCheckExtraInfoValueListBySectionVariable(
						PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID));
			String sOutTradeNumber = AppGlobal.g_oFuncOutlet.get().getOutletCode()
					+ AppGlobal.g_oFuncOutlet.get().getBusinessDay().getDateInStringWithFormat("yyyyMMdd")
					+ m_oFuncCheck.getCheckPrefixNo() + (m_oFuncCheck.getPrintCount());
			if (iInterfaceId > 0)
				AppGlobal.removePrintedCheckToPaymentInterfaceCheckList(AppGlobal.g_oFuncOutlet.get().getOutletId(),
						m_oFuncCheck.getCheckId(), sOutTradeNumber);
		}
		
		if (AppGlobal.g_iLogLevel == 1 || AppGlobal.g_iLogLevel >= 9) {
			AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(),
					"Before update customer display");
		}
		
		// Generate customer display interface files for Payment
		m_oFuncCheck.updateCustomerDisplayDataUpdateTimestamp();
		// *****************************************************************
		// Create thread to update customer display
		AppThreadManager oAppThreadManager = new AppThreadManager();
		
		// Thread 1 : Update customer display
		// Create parameter array
		Object[] oParameters = new Object[1];
		oParameters[0] = 2;
		oAppThreadManager.addThread(1, m_oFuncCheck, "generateCustomerDisplayInterfaceFiles", oParameters);
		
		// Run all of the threads
		oAppThreadManager.runThread();
		
		if (AppGlobal.g_iLogLevel == 1 || AppGlobal.g_iLogLevel >= 9) {
			AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(),
					"After update customer display");
		}
		
		// Clear cache table no and extension for fast food mode
		m_sTableNoForFastFoodMode = "";
		m_sTableExtensionForFastFoodMode = "";
		
		// Show the payment result
		String sCheckTotal = StringLib.BigDecimalToString(BigDecimal.ZERO,
				AppGlobal.g_oFuncOutlet.get().getCheckRoundDecimal());
		String sChangeTotal = StringLib.BigDecimalToString(BigDecimal.ZERO,
				AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal());
		String sTipsTotal = StringLib.BigDecimalToString(BigDecimal.ZERO,
				AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal());
		String sSurchargeTotal = StringLib.BigDecimalToString(BigDecimal.ZERO,
				AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal());
		String sResidueTotal = StringLib.BigDecimalToString(BigDecimal.ZERO,
				AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal());
		
		String sPaidTotal = StringLib.BigDecimalToString(BigDecimal.ZERO,
				AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal());
		String sUnpaidTotal = StringLib.BigDecimalToString(BigDecimal.ZERO,
				AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal());
		
		BigDecimal dUnpaidTotal = m_oFuncCheck.getCheckTotal().subtract(m_oFuncPayment.getAllPaymentTotal());
		
		if (AppGlobal.g_oFuncOutlet.get().getCheckRoundDecimal() > AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal()) {
			sCheckTotal = StringLib.BigDecimalToString(m_oFuncCheck.getCheckTotal(),
					AppGlobal.g_oFuncOutlet.get().getCheckRoundDecimal());
			if (m_oFuncPayment.getChangeTotal().compareTo(BigDecimal.ZERO) != 0)
				sChangeTotal = StringLib.BigDecimalToString(m_oFuncPayment.getChangeTotal(),
						AppGlobal.g_oFuncOutlet.get().getCheckRoundDecimal());
			if (m_oFuncPayment.getTipsTotal().compareTo(BigDecimal.ZERO) != 0)
				sTipsTotal = StringLib.BigDecimalToString(m_oFuncPayment.getTipsTotal(),
						AppGlobal.g_oFuncOutlet.get().getCheckRoundDecimal());
			if (m_oFuncCheck.getSurcharge().compareTo(BigDecimal.ZERO) != 0)
				sSurchargeTotal = StringLib.BigDecimalToString(m_oFuncCheck.getSurcharge(),
						AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal());
			if (m_oFuncPayment.getResidueTotal().compareTo(BigDecimal.ZERO) != 0)
				sResidueTotal = StringLib.BigDecimalToString(m_oFuncPayment.getTipsTotal(),
						AppGlobal.g_oFuncOutlet.get().getCheckRoundDecimal());
			
			if (m_oFuncPayment.getAllPaymentTotal().compareTo(BigDecimal.ZERO) != 0)
				sPaidTotal = StringLib.BigDecimalToString(m_oFuncPayment.getAllPaymentTotal(),
						AppGlobal.g_oFuncOutlet.get().getCheckRoundDecimal());
			if (dUnpaidTotal.compareTo(BigDecimal.ZERO) != 0)
				sUnpaidTotal = StringLib.BigDecimalToString(dUnpaidTotal,
						AppGlobal.g_oFuncOutlet.get().getCheckRoundDecimal());
		} else {
			sCheckTotal = StringLib.BigDecimalToString(m_oFuncCheck.getCheckTotal(),
					AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal());
			if (m_oFuncPayment.getChangeTotal().compareTo(BigDecimal.ZERO) != 0)
				sChangeTotal = StringLib.BigDecimalToString(m_oFuncPayment.getChangeTotal(),
						AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal());
			if (m_oFuncPayment.getTipsTotal().compareTo(BigDecimal.ZERO) != 0)
				sTipsTotal = StringLib.BigDecimalToString(m_oFuncPayment.getTipsTotal(),
						AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal());
			if (m_oFuncCheck.getSurcharge().compareTo(BigDecimal.ZERO) != 0)
				sSurchargeTotal = StringLib.BigDecimalToString(m_oFuncCheck.getSurcharge(),
						AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal());
			if (m_oFuncPayment.getResidueTotal().compareTo(BigDecimal.ZERO) != 0)
				sResidueTotal = StringLib.BigDecimalToString(m_oFuncPayment.getResidueTotal(),
						AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal());
			
			if (m_oFuncPayment.getAllPaymentTotal().compareTo(BigDecimal.ZERO) != 0)
				sPaidTotal = StringLib.BigDecimalToString(m_oFuncPayment.getAllPaymentTotal(),
						AppGlobal.g_oFuncOutlet.get().getCheckRoundDecimal());
			if (dUnpaidTotal.compareTo(BigDecimal.ZERO) != 0)
				sUnpaidTotal = StringLib.BigDecimalToString(dUnpaidTotal,
						AppGlobal.g_oFuncOutlet.get().getCheckRoundDecimal());
		}
		
		// remove the table's earliest finish cooking time from global list
		m_oFuncCheck.handleCheckForOverCookingTimeTableList(null, null, true);
		
		// Change back taiwan gui type to normal in normal mode after each payment
		if (!AppGlobal.g_oFuncStation.get().getTaiwanGuiType().equals(PosTaiwanGuiConfig.TYPE_SPECIAL))
			AppGlobal.g_oFuncStation.get().setTaiwanGuiType(PosTaiwanGuiConfig.TYPE_NORMAL);
		
		//check tms interface existence
		FuncTMS oFuncTMS = AppGlobal.getTmsInfoFromTmsInterfaceInfoList(AppGlobal.g_oFuncOutlet.get().getOutletId(), m_oFuncCheck.getCheckId());
		if(oFuncTMS != null){
			oFuncTMS.tmsChangeStatus(FuncTMS.TABLE_STATUS_PAY_CHECK, null);
			//do put check every time
			oFuncTMS.tmsPutCheck(m_oFuncCheck);
			oFuncTMS.tmsDelayedVacate();
			AppGlobal.removeTmsInfoFromTmsInterfaceInfoList(AppGlobal.g_oFuncOutlet.get().getOutletId(), m_oFuncCheck.getCheckId());
		}
		
		if (m_iCashierMode == 2) {
			
			if (AppGlobal.g_iLogLevel == 1 || AppGlobal.g_iLogLevel >= 9) {
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(),
						new Exception().getStackTrace()[0].getMethodName(), "Before show payment result");
			}
			
			if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
					|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) == true
					|| (AppGlobal.OPERATION_MODE.fine_dining.equals(m_eOperationMode) == true
					|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) == true)
					&& m_oFuncPayment.getChangeTotal().compareTo(BigDecimal.ZERO) > 0) {
				// Show the result of the direct payment
				if ((AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) || AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode))
						&& !AppGlobal.g_oFuncOutlet.get().getBusinessDay().isCheckNumGeneratedByOutlet())
					m_oFrameDirectPaymentResult.showPaymentResult(true, sCurrentCheckPrefixNo, "", "", sCheckTotal,
							sTipsTotal, sSurchargeTotal, sResidueTotal, sChangeTotal, m_oFuncPayment.isChangesInForeignCurrency(),
							m_oFuncPayment.getChangesForeignCurrencyName(),
							m_oFuncPayment.getChangesForeignCurrencySign());
				else
					m_oFrameDirectPaymentResult.showPaymentResult(true, m_oFuncCheck.getCheckPrefixNo(), "",
							m_oFuncCheck.getTableExtension(), sCheckTotal, sTipsTotal, sSurchargeTotal, sResidueTotal, sChangeTotal,
							m_oFuncPayment.isChangesInForeignCurrency(), m_oFuncPayment.getChangesForeignCurrencyName(),
							m_oFuncPayment.getChangesForeignCurrencySign());
				m_oFrameDirectPaymentResult.setVisible(true);
				m_oFrameDirectPaymentResult.bringToTop();
				
				if ((AppGlobal.OPERATION_MODE.fine_dining.equals(m_eOperationMode)
						|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode))
						&& m_oFuncPayment.getChangeTotal().compareTo(BigDecimal.ZERO) > 0) {
					m_oFrameSelfOrderKiosk.showQuitPayResultButton(m_iCashierMode);
					m_oFrameSelfOrderKiosk.setVisible(true);
					setOrderingTimeoutChecking(false);
				}
			}
			
			if (AppGlobal.g_iLogLevel == 1 || AppGlobal.g_iLogLevel >= 9) {
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(),
						new Exception().getStackTrace()[0].getMethodName(), "After show payment result");
			}
			
			// Exit payment and show payment result
			exitCashier();
			
			// show table floor plan screen for direct payment in fine dining
			// with zero change
			if (AppGlobal.OPERATION_MODE.fine_dining.equals(m_eOperationMode)
					&& m_oFuncPayment.getChangeTotal().compareTo(BigDecimal.ZERO) == 0)
				showTableFloorPlanScreen(true);
		} else {
			
			if (AppGlobal.g_iLogLevel == 1 || AppGlobal.g_iLogLevel >= 9) {
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(),
						new Exception().getStackTrace()[0].getMethodName(), "Before show payment result");
			}
			
			// Show payment result
			if (m_oFrameCashier.getVisible()) {
				if ((AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) || AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode))
						&& !AppGlobal.g_oFuncOutlet.get().getBusinessDay().isCheckNumGeneratedByOutlet()){
					// Only self order kiosk mode will not show paid and unpaid check total
					boolean bShowPaidAndUnpaidCheckTotal = !AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode);
					m_oFrameCashier.showPaymentResult(true, sCurrentCheckPrefixNo, m_oFuncCheck.getTableNo(),
							m_oFuncCheck.getTableExtension(), sCheckTotal, sPaidTotal, sUnpaidTotal,
							sTipsTotal, sSurchargeTotal, sResidueTotal, sChangeTotal,
							m_oFuncPayment.isChangesInForeignCurrency(), m_oFuncPayment.getChangesForeignCurrencyName(),
							m_oFuncPayment.getChangesForeignCurrencySign(), bShowPaidAndUnpaidCheckTotal);
				}else
					m_oFrameCashier.showPaymentResult(true, m_oFuncCheck.getCheckPrefixNo(), m_oFuncCheck.getTableNo(),
							m_oFuncCheck.getTableExtension(), sCheckTotal, sPaidTotal, sUnpaidTotal,
							sTipsTotal, sSurchargeTotal, sResidueTotal, sChangeTotal,
							m_oFuncPayment.isChangesInForeignCurrency(), m_oFuncPayment.getChangesForeignCurrencyName(),
							m_oFuncPayment.getChangesForeignCurrencySign() ,true);
			}
			
			if (AppGlobal.g_iLogLevel == 1 || AppGlobal.g_iLogLevel >= 9) {
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(),
						new Exception().getStackTrace()[0].getMethodName(), "After show payment result");
			}
			
			// Set check to be loaded or not
			m_bIsCheckLoadedForCashierMode = false;
			
			// Start step
			m_oFrameCashier.setCurrentStep(0);
			
			if (m_iCashierMode == 3) {
				m_oFrameCashier.setIsFinishPaymentByAdjustPayment(true);
				m_oFrameCashier.setIsCheckLoaded(true, true);
			} else
				m_oFrameCashier.setIsCheckLoaded(false, true);
			
			// Auto close cashier panel
			int iAutoCloseCashierPanel = AppGlobal.g_oFuncStation.get().getOrderingModeForAutoCloseCashierPanel();
			// 0=none/ 1=fine_dining/ 2=fast_food/ 3=both
			if (iAutoCloseCashierPanel > -1) {
				switch (iAutoCloseCashierPanel) {
					case 1: {
						if (AppGlobal.OPERATION_MODE.fine_dining.equals(m_eOperationMode))
							if (!m_oFrameCashier.isClickByCahsierMode()) {
								m_oFrameCashier.setClickByCahsierMode(false);
								exitCashier();
							}
						break;
					}
					case 2: {
						if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode))
							exitCashier();
						break;
					}
					case 3: {
						if (AppGlobal.OPERATION_MODE.fine_dining.equals(m_eOperationMode))
							if (!m_oFrameCashier.isClickByCahsierMode()) {
								m_oFrameCashier.setClickByCahsierMode(false);
								exitCashier();
							}
						if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode))
							exitCashier();
						break;
					}
					default:
						break;
				}
			}
		}
		
		// Read Config for completion message
		String sPaymentCompletionMessage = "", sPaymentCompletionImageName = "", sPaymentComletionImageUrl = "";
		JSONObject oPaymentProcessSetting = AppGlobal.g_oFuncStation.get().getPaymentProcessSetting();
		if (oPaymentProcessSetting != null && oPaymentProcessSetting.has("payment_completion_message"))
			sPaymentCompletionMessage = oPaymentProcessSetting.optString("payment_completion_message", "");
		
		if (oPaymentProcessSetting != null && oPaymentProcessSetting.has("payment_completion_image_name"))
			sPaymentCompletionImageName = oPaymentProcessSetting.optString("payment_completion_image_name", "");
		
		if(!sPaymentCompletionImageName.isEmpty()){
			MedMedia oMedMedia = new MedMedia();
			if(m_oMediaList.containsKey(sPaymentCompletionImageName))
				oMedMedia = m_oMediaList.get(sPaymentCompletionImageName);
			else
				oMedMedia.readInfoAndUrlByFileName(sPaymentCompletionImageName);
			if(!oMedMedia.getUrl().isEmpty()){
				sPaymentComletionImageUrl = oMedMedia.getUrl();
				m_oMediaList.put(sPaymentCompletionImageName, oMedMedia);
			}
		}
		
		if(AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) && (!sPaymentComletionImageUrl.isEmpty() || !sPaymentCompletionMessage.isEmpty())){
			FormLargePopUpPanel oPaymentCompletionPanel = new FormLargePopUpPanel(AppGlobal.g_oLang.get()._("payment_complete", "")
					, StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, sPaymentCompletionMessage), this);
			oPaymentCompletionPanel.setPaymentImage(sPaymentComletionImageUrl);
			
			// Add auto close timer
			int iTimeForSwitchFrame = 3000;
			int iTmp  = AppGlobal.g_oFuncStation.get().getPayResultAutoSwitchTimeControl();
			if(iTmp > -1)
				iTimeForSwitchFrame = 1000 * iTmp;
			oPaymentCompletionPanel.addFinishShowTimer(iTimeForSwitchFrame);
			oPaymentCompletionPanel.show();
			
			if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)) {
				m_oFrameSelfOrderKiosk.skipShowQuitPayResultPage(m_iCashierMode);
				m_oFrameSelfOrderKiosk.bringToTop();
				m_oFrameCover.setVisible(true);
				m_oFrameCover.bringToTop();
				setOrderingTimeoutChecking(false);
			}
		} else {
			// Show quit payment result frame
			if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)) {
				m_oFrameSelfOrderKiosk.showQuitPayResultButton(m_iCashierMode);
				m_oFrameSelfOrderKiosk.setVisible(true);
				m_oFrameSelfOrderKiosk.bringToTop();
				setOrderingTimeoutChecking(false);
			}
		}
		
		if (AppGlobal.g_iLogLevel >= 9) {
			AppGlobal.g_bWriteClientConnectionLog = false;
		}

/** CloseCheck [editPayment] */
		// surveillance eConnect check termination event: CloseCheck
		HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
		oSurveillanceEventInfo.put("checkNum", m_oFuncCheck.getCheckPrefixNo());
		this.doSurveillanceEvent(FuncSurveillance.SURVEILLANCE_TYPE_CLOSE_CHECK, oSurveillanceEventInfo);
		
		// ***** DEBUG *****
		// Auto order item after previous payment
		if (AppGlobal.g_iDebugMode == 1)
			m_oFrameOrderingPanel.autoClickItem();
		// *****************
	}
	
	private ArrayList<PosCheckPayment> separatePayment() {
		ArrayList<PosCheckPayment> oNewSplitPosCheckPayment = new ArrayList<PosCheckPayment>();
		if(m_oFuncCheck.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_LOYALTY_SVC, PosCheckExtraInfo.VARIABLE_AUTO_TOP_UP_INFORMATION, 0)){
			HashMap<String, ArrayList<BigDecimal>> oSplitPaymentRecords = new HashMap<String, ArrayList<BigDecimal>>();
			try {
				String sTopUpInformationJSON = m_oFuncCheck.getCheckExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY_SVC, PosCheckExtraInfo.VARIABLE_AUTO_TOP_UP_INFORMATION, 0);
				JSONArray oAutoTopUpInformationJSONArray = new JSONArray();
				if(sTopUpInformationJSON != null && !sTopUpInformationJSON.isEmpty())
					oAutoTopUpInformationJSONArray = new JSONArray(sTopUpInformationJSON);
				
				for(int iJSONObjectIndex = 0 ; iJSONObjectIndex < oAutoTopUpInformationJSONArray.length() ; iJSONObjectIndex++){
					JSONObject oAutoTopUpInformationJSONObject = oAutoTopUpInformationJSONArray.getJSONObject(iJSONObjectIndex);
					
					if(oAutoTopUpInformationJSONObject.has("cardNumber") && !oAutoTopUpInformationJSONObject.getString("cardNumber").isEmpty() &&
							oAutoTopUpInformationJSONObject.has("deductAmount")){
						String sCardNo = oAutoTopUpInformationJSONObject.getString("cardNumber");
						BigDecimal dDeductAmount = new BigDecimal(oAutoTopUpInformationJSONObject.getDouble("deductAmount")).divide(new BigDecimal("-100"));
						ArrayList<BigDecimal> oSplitPaymentAmounts = new ArrayList<BigDecimal>();
						if(oSplitPaymentRecords.containsKey(sCardNo))
							oSplitPaymentAmounts = oSplitPaymentRecords.get(sCardNo);
						oSplitPaymentAmounts.add(dDeductAmount);
						oSplitPaymentRecords.put(sCardNo, oSplitPaymentAmounts);
					}
				}
			} catch (JSONException e) {
				AppGlobal.stack2Log(e);
			}
			
			// Find the split
			for (PosCheckPayment oPosCheckPayment : m_oFuncPayment.getCheckPaymentList()) {
				if(oPosCheckPayment.isOldPayment())
					continue;
				
				if(oPosCheckPayment.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_LOYALTY_SVC, PosCheckExtraInfo.VARIABLE_SVC_CARD_NUMBER, 0)){
					String sCardNumber = oPosCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_LOYALTY_SVC, PosCheckExtraInfo.VARIABLE_SVC_CARD_NUMBER, 0).getValue();
					if(oSplitPaymentRecords.containsKey(sCardNumber)){
						ArrayList<BigDecimal> oDeductAmountList = oSplitPaymentRecords.get(sCardNumber);
						for(int iDeductAmountIndex = 0; iDeductAmountIndex < oDeductAmountList.size() - 1; iDeductAmountIndex++){
							PosCheckPayment oNewSplitPayment = new PosCheckPayment(oPosCheckPayment);
							
							// Set the remaining balance to zero
							if(oNewSplitPayment.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_SVC_REMAINING_BALANCE, 0))
								oNewSplitPayment.updateExtraInfo(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_SVC_REMAINING_BALANCE, 0, "0");
							
							oNewSplitPayment.setPayTotal(oDeductAmountList.get(iDeductAmountIndex));
							oNewSplitPayment.setPayForeignTips(BigDecimal.ZERO);
							oNewSplitPayment.setPayTips(BigDecimal.ZERO);
							oNewSplitPayment.setSurcharge(BigDecimal.ZERO);
							oNewSplitPayment.setPayChange(BigDecimal.ZERO);
							
							m_oFuncCheck.addNewCheckPaymentToList(new PosCheckPayment(oNewSplitPayment));
							oNewSplitPosCheckPayment.add(new PosCheckPayment(oNewSplitPayment));
						}
						
						oPosCheckPayment.setPayTotal(oDeductAmountList.get(oDeductAmountList.size() - 1));
					}
				}
			}
		}
		return oNewSplitPosCheckPayment;
	}
	
	public void assignPaymentCheckType() {
		List<Integer> oCustomCheckTypeList = new ArrayList<Integer>();
		
		// For adjust_payment, need to clear previous assigned check type id
		if (!m_oFuncCheck.getCheckPaymentList().isEmpty()) {
			for (PosCheckPayment oPosCheckPayment : m_oFuncCheck.getCheckPaymentList()) {
				if (oPosCheckPayment.isDelete()) {
					m_oFuncCheck.setCustomType(0);
					break;
				}
			}
		}
		
		int iCheckTypeId = m_oFuncCheck.getCustomTypeId();
		if (iCheckTypeId > 0)
			oCustomCheckTypeList.add(iCheckTypeId);
		
		JSONArray oPaymentCheckTypeJSONArray = AppGlobal.g_oFuncStation.get().getPaymentCheckTypes();
		if (oPaymentCheckTypeJSONArray != null) {
			for (PosCheckPayment oPosCheckPayment : m_oFuncPayment.getCheckPaymentList()) {
				if (oPosCheckPayment.isDelete())
					continue;
				
				for (int i = 0; i < oPaymentCheckTypeJSONArray.length(); i++) {
					JSONObject oPaymentCheckTypeJSONObject = oPaymentCheckTypeJSONArray.optJSONObject(i);
					if (oPaymentCheckTypeJSONObject == null)
						continue;
					
					if (oPosCheckPayment.getPaymentMethodId() == oPaymentCheckTypeJSONObject.optInt("paym_id")) {
						int iPaymentCheckTypeId = oPaymentCheckTypeJSONObject.optInt("ctyp_id");
						if (!oCustomCheckTypeList.contains(iPaymentCheckTypeId))
							oCustomCheckTypeList.add(iPaymentCheckTypeId);
						break;
					}
				}
			}
		}
		
		if (oCustomCheckTypeList.size() > 1) {
			ArrayList<String> oOptionList = new ArrayList<String>();
			ArrayList<Integer> oOptionIdxList = new ArrayList<Integer>();
			
			for (int iCustomCheckTypeId : oCustomCheckTypeList) {
				PosCustomType oPosCustomType = m_oPosCustomTypeList.getTypeList().get(iCustomCheckTypeId);
				oOptionIdxList.add(oPosCustomType.getCtypId());
				oOptionList.add(oPosCustomType.getName(AppGlobal.g_oCurrentLangIndex.get()));
			}
			
			while (true) {
				FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
				oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select_the_check_type"),
						oOptionList, false);
				oFormSelectionBox.show();
				if (oFormSelectionBox.isUserCancel()) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("please_select_the_check_type"));
				} else {
					ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
					int iOption = oSelectionBoxResult.get(0).intValue();
					m_oFuncCheck.setCustomType(oOptionIdxList.get(iOption));
					break;
				}
			}
		} else if (!oCustomCheckTypeList.isEmpty())
			m_oFuncCheck.setCustomType(oCustomCheckTypeList.get(0));
	}
	
	public void reprintReceipt(HashMap<String, String> oFunctionParam) {
		boolean bPass = true, bTaiwanGuiReceipt = false;
		int iChosenReceiptPfmtId = 0, iReprintType = 1, iReceiptPrtqId = 0;
		String sCheckId = "";
		String sTableNo = "";
		String sErrMsg = "";
		
		if (oFunctionParam != null) {
			sCheckId = oFunctionParam.get("checkId");
			sTableNo = oFunctionParam.get("tableNo");
			
			if (oFunctionParam.containsKey("taiwanGuiReceipt")
					&& Integer.parseInt(oFunctionParam.get("taiwanGuiReceipt")) == 1) {
				bTaiwanGuiReceipt = true;
				PosTaiwanGuiTran oTaiwanGuiTran = new PosTaiwanGuiTran();
				boolean bFound = oTaiwanGuiTran.getLastTaiwanGuiTranByConfigAndBy(
						AppGlobal.g_oFuncStation.get().getTaiwanGuiConfigId(),
						AppGlobal.g_oFuncStation.get().getStationId(), 0, PosTaiwanGuiTran.BY_STATION);
				if (bFound) {
					if (oTaiwanGuiTran.getType().equals(PosTaiwanGuiTran.TYPE_CHARITY))
						sErrMsg = AppGlobal.g_oLang.get()._("not_allow_to_reprint_charity_receipt");
					else if (!oTaiwanGuiTran.getCarrier().isEmpty())
						sErrMsg = AppGlobal.g_oLang.get()._("not_allow_to_reprint_carrier_receipt");
					
					if (!sErrMsg.isEmpty()) {
						showErrorDialogBox(sErrMsg);
						return;
					}
				}
			}
		} else {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("missing_check_no"));
			return;
		}
		
		iReceiptPrtqId = AppGlobal.g_oFuncStation.get().getStation().getReceiptPrtqId();
		
		// Get receipt format
		if (!bTaiwanGuiReceipt && AppGlobal.g_oFuncStation.get().getStation().getReceiptPrtqId() > 0) {
			iChosenReceiptPfmtId = selectReceiptFormat(false);
			if (iChosenReceiptPfmtId == 0)
				return;
		} else if (bTaiwanGuiReceipt) {
			iReprintType = 2;
			iChosenReceiptPfmtId = AppGlobal.g_oFuncStation.get().getTaiWanGuiPrintFormatId();
			if (AppGlobal.g_oFuncStation.get().getTaiWanGuiPrintQueueId() > 0) {
				// If print queue for GUI is defined, override the original
				// receipt print queue
				iReceiptPrtqId = AppGlobal.g_oFuncStation.get().getTaiWanGuiPrintQueueId();
			}
		}
		
		// Start reprint receipt
		if (bPass) {
			FuncCheck oFuncCheck = new FuncCheck();
			HashMap<String, String> oPrintReceiptInfo = oFuncCheck.printReceipt(iReceiptPrtqId, iChosenReceiptPfmtId,
					sCheckId, "", iReprintType, false);
			String sURL = "";
			if (oPrintReceiptInfo != null && oPrintReceiptInfo.containsKey("url"))
				sURL = oPrintReceiptInfo.get("url");
			if (sURL.isEmpty()) {
				// Fail to reprint receipt
				showErrorDialogBox(AppGlobal.g_oLang.get()._("check_is_not_saved_completely") + ", "
						+ AppGlobal.g_oLang.get()._("please_try_again_later"));
				bPass = false;
			} else {
				// Add log to action log list
				String sLogRemarkString = "PrintQueueId:" + iReceiptPrtqId + ",PrintFmtId:" + iChosenReceiptPfmtId;
				AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.reprint_receipt.name(),
						PosActionLog.ACTION_RESULT_SUCCESS, sTableNo, AppGlobal.g_oFuncUser.get().getUserId(),
						AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
						AppGlobal.g_oFuncStation.get().getStationId(), sCheckId, "", "", "", "", sLogRemarkString);
				// handle action log
				AppGlobal.g_oActionLog.get().handleActionLog(false);
			}
		}
	}
	
	// Function for select receipt format
	private int selectReceiptFormat(boolean bMustSelect) {
		int i, iChosenReceiptPfmtId = 0;
		boolean bStatPrtFmtOverride = false;
		
		int iCheckPrtFmtCount = 0;
		for (i = 1; i <= 5; i++) {
			if (AppGlobal.g_oFuncStation.get().getStation().getReceiptPfmtId(i) > 0) {
				iCheckPrtFmtCount++;
				iChosenReceiptPfmtId = AppGlobal.g_oFuncStation.get().getStation().getReceiptPfmtId(i);
			}
		}
		
		// No check format is defined
		if (iCheckPrtFmtCount == 0) {
			for (i = 1; i <= 5; i++) {
				if (AppGlobal.g_oFuncOutlet.get().getReceiptPfmtId(i) > 0) {
					iCheckPrtFmtCount++;
					iChosenReceiptPfmtId = AppGlobal.g_oFuncOutlet.get().getReceiptPfmtId(i);
				}
			}
			
			if (iCheckPrtFmtCount == 0) {
				// Error occur
				showErrorDialogBox(AppGlobal.g_oLang.get()._("no_receipt_format_is_defined"));
				return 0;
			}
		} else
			bStatPrtFmtOverride = true;
		
		// Ask receipt format if more than one receipt format is set
		if (iCheckPrtFmtCount > 1) {
			iChosenReceiptPfmtId = 0;
			ArrayList<String> oOptionList = new ArrayList<String>();
			HashMap<Integer, Integer> oPrintFormatIdList = new HashMap<Integer, Integer>();
			int iPfmtId = 0;
			int iFormatCount = 0;
			
			for (i = 1; i <= 5; i++) {
				if (bStatPrtFmtOverride)
					iPfmtId = AppGlobal.g_oFuncStation.get().getStation().getReceiptPfmtId(i);
				else
					iPfmtId = AppGlobal.g_oFuncOutlet.get().getReceiptPfmtId(i);
				if (iPfmtId > 0) {
					if (bStatPrtFmtOverride)
						oOptionList.add(AppGlobal.g_oFuncStation.get().getPrintFormatNameByPfmtId(iPfmtId,
								AppGlobal.g_oCurrentLangIndex.get()));
					else
						oOptionList.add(AppGlobal.g_oFuncOutlet.get().getPrintFormatNameByPfmtId(iPfmtId,
								AppGlobal.g_oCurrentLangIndex.get()));
					oPrintFormatIdList.put(iFormatCount, iPfmtId);
					iFormatCount++;
				}
			}
			
			if (bMustSelect) {
				while (iChosenReceiptPfmtId == 0) {
					FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
					oFormSelectionBox.initWithSingleSelection(
							AppGlobal.g_oLang.get()._("please_select_the_print_format"), oOptionList, true);
					oFormSelectionBox.show();
					
					if (oFormSelectionBox.isUserCancel()) {
						this.showErrorDialogBox(AppGlobal.g_oLang.get()._("please_select_the_print_format"));
					} else {
						ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
						int iPrtFmtIndex = oSelectionBoxResult.get(0);
						iChosenReceiptPfmtId = oPrintFormatIdList.get(iPrtFmtIndex);
					}
				}
			} else {
				FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
				oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select_the_print_format"),
						oOptionList, false);
				oFormSelectionBox.show();
				
				if (oFormSelectionBox.isUserCancel()) {
					return 0;
				} else {
					ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
					int iPrtFmtIndex = oSelectionBoxResult.get(0);
					iChosenReceiptPfmtId = oPrintFormatIdList.get(iPrtFmtIndex);
				}
			}
		}
		
		return iChosenReceiptPfmtId;
	}
	
	public void reprintLastReceipt(boolean bTaiwanGuiReceipt) {
		// check whether support Taiwan GUI if reprint Taiwan GUI receipt
		if (bTaiwanGuiReceipt && !AppGlobal.g_oFuncStation.get().supportTaiwanGui()) {
			showAttentionDialogBox(AppGlobal.g_oLang.get()._("not_support_taiwan_gui"));
			return;
		}
		if (bTaiwanGuiReceipt && AppGlobal.g_oFuncStation.get().getTaiwanGuiGeneratedMode()
				.compareTo(PosTaiwanGuiConfig.GENERATED_MODE_RPU420) == 0) {
			showAttentionDialogBox(AppGlobal.g_oLang.get()._("not_support_for_gui_generated_by_rpu420"));
			return;
		}
		
		PosCheck oLastCheck = getLastPaidCheck();
		if (oLastCheck == null)
			return;
		
		HashMap<String, String> oFunctionParams = new HashMap<String, String>();
		oFunctionParams.put("checkId", oLastCheck.getCheckId() + "");
		if (bTaiwanGuiReceipt)
			oFunctionParams.put("taiwanGuiReceipt", "1");
		
		this.reprintReceipt(oFunctionParams);
	}
	
	private PosCheck getLastPaidCheck() {
		PosCheck oPosCheck = new PosCheck();
		JSONArray oCheckHistoryJSONArray = oPosCheck.getLastPaidCheckListByStatId(
				AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
				AppGlobal.g_oFuncStation.get().getStationId(), 1);
		if (oCheckHistoryJSONArray == null || oCheckHistoryJSONArray.isNull(0)) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("no_paid_check_is_found"));
			return null;
		}
		
		PosCheck oLastCheck = new PosCheck(oCheckHistoryJSONArray.optJSONObject(0));
		return oLastCheck;
	}
	
	public boolean exitCashier() {
		
		if(AppGlobal.g_iLogLevel == 1){
			AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "Exit cashier");
		}
		
		// Return to cashier screen if need
		String sErrorMsg = "";
		sErrorMsg = isAllowExitCashierPanel();
		if(sErrorMsg != ""){
			// Check whether is adjust payments mode, lock the check again
			if(m_iCashierMode == 3 && m_oFuncCheck.isOldCheck())
				m_oFuncCheck.lockCheck();
			showErrorDialogBox(sErrorMsg);
			return false;
		}
		
		// Set the load check flag to false
		m_bIsCheckLoadedForCashierMode = false;
		
		m_oFrameCashier.clearCheckAndPaidTotal();
		
		// Remove the cashier screen
		this.showCashierScreen(false, false);
		
		// Stop the direct payment mode for ordering panel
		m_oFrameOrderingPanel.setDirectPaymentMode(false);
		
		// Change back default check rounding
		boolean bOverrideCheckRound = AppGlobal.g_oFuncOutlet.get().isOverrideCheckRound();
		if (bOverrideCheckRound) {
			// Roll back rounding
			AppGlobal.g_oFuncOutlet.get().overrideCheckRoundMethod(false, "", 0);
			if (m_oFuncCheck.isPaid(false) == false) {
				// Recalculate the check
				m_oFuncCheck.calcCheck();
				if (m_oFuncCheck.isOldCheck()) {
					/*
					 * if (!m_oFuncCheck.calculateLoyaltyTransaction() &&
					 * !m_oFuncCheck.getLastErrorMessage().isEmpty()) {
					 * FormDialogBox oFormDialogBox = new
					 * FormDialogBox(AppGlobal.g_oLang.get()._("ok"), this);
					 * oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._("error"
					 * )); oFormDialogBox.setMessage(m_oFuncCheck.
					 * getLastErrorMessage()); oFormDialogBox.show(); }
					 */
					if (!m_oFuncCheck.calculateLoyaltyTransaction()) {
						String sErrorMessage = m_oFuncCheck.getLastErrorMessage();
						if (!sErrorMessage.isEmpty())
							showErrorDialogBox(sErrorMessage);
					}
					processSendCheck(m_oFuncCheck, false, false, AppGlobal.g_oFuncOutlet.get().getOutletId(),
							AppGlobal.g_oFuncOutlet.get().getOutletNameByIndex(AppGlobal.g_oCurrentLangIndex.get()),
							AppGlobal.g_oFuncStation.get().getCheckPrtqId(), 0, false, 0, "", true, false);
				}
			}
		}
		
		// *** NOT USE NOW ***
		/*
		 * // Roll back the waived tax during previous Taiwan GUI process if
		 * payment not success
		 * if(AppGlobal.g_oFuncStation.get().supportTaiwanGui()){
		 * if(m_oFuncCheck != null && m_oFuncCheck.isPaid(false) == false){
		 * processTaiwanGUIAddWaiveTax(true); } }
		 */
		
		// For fast food mode or direct payment, back to check if payment is
		// failed
		if ((m_iCashierMode == 2 || (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
				|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
				|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode)))
				&& (m_oFuncCheck != null && m_oFuncCheck.isOldCheck() == false
				&& m_oFuncCheck.isPaid(false) == false)) {
			// Turn off cashier mode
			m_iCashierMode = 0;
			
			// Mark that the station is under ordering panel
			AppGlobal.g_oFuncStation.get().setUnderOrdering(true);
			
			// Change back taiwan gui type to normal in normal mode
			if (!AppGlobal.g_oFuncStation.get().getTaiwanGuiType().equals(PosTaiwanGuiConfig.TYPE_SPECIAL))
				AppGlobal.g_oFuncStation.get().setTaiwanGuiType(PosTaiwanGuiConfig.TYPE_NORMAL);
			
			// Add back ordering basket and ordering function panel for exit cashier and back to the check
			m_oFrameOrderingPanel.setVisible(true);
			
			if(m_sCurrentOrderingBasketMode.equals(FrameOrderingBasket.ORDERING_BASKET_MODE_SHOW_NORMAL))
				m_oFrameOrderingBasket.setVisible(true);
			else
				m_oFrameConsolidateItemsOrderingBasket.setVisible(true);
			
			m_oFrameFuncPanel2.setVisible(true);
			if(AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true)
				m_oFrameSeatPanel.setVisible(true);
			else if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode))
				m_oFrameSeatPanel.setVisible(false);
			
			if(AppGlobal.g_oFuncStation.get().getStationDevice().isSelfOrderKiosk() && AppGlobal.g_oFuncStation.get().isHideCheckDetailBar())
				m_oFrameStationInfoBar.changeInfosPosition(667, 1280, true);
			else
				m_oFrameStationInfoBar.changeInfosPosition(230, 830, false);
			return false;
		}
		
		// For adjust payments, unlock the check when exist cashier mode
		if (m_iCashierMode == 3 && m_oFuncCheck != null) {
			// As the check pay total and tips total will be set to zero for
			// adjusting payment
			// in order to open cashier mode correctly. Need roll back to
			// original value if user cancel action
			m_oFuncCheck.restoreLastPayAndTipsTotal();
			m_oFuncCheck.unlockCheck();
		}
		
		// Reset FuncPayment value
		m_oFuncPayment.setTotalDue(BigDecimal.ZERO);
		
		// Release the check lock for cancel payment
		// Interface payment not allowed to unlock for loading back to the cashier
		if (m_oFuncCheck != null && m_oFuncCheck.isTableLocked() && !m_bIsInterfacePaymentFailedBySetup)
			m_oFuncCheck.unlockTable(true, false);
		
		// Mark that the station is NOT under ordering panel
		AppGlobal.g_oFuncStation.get().setUnderOrdering(false);
		
		// Clear the ordering basket
		m_oFrameOrderingBasket.clearAllSections();
		
		// Reset the seat panel
		m_oFrameSeatPanel.resetSelectedSeat();
		
		// Show back the floor plan
		showTableFloorPlanScreen(true);
		// Update table status for fine dining mode
		if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == false
				&& AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) == false
				&& AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) == false
				&& m_oFuncCheck != null) {
			if (m_oFuncCheck.isPaid(false) && m_iCashierMode != 3)
				this.instantUpdateTableFloorPlanTableStatus(m_oFuncCheck.getTableNo(), m_oFuncCheck.getTableExtension(),
						PosOutletTable.STATUS_NEW_TABLE);
		}
		
		if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
				|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) == true
				|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) == true
				|| (AppGlobal.OPERATION_MODE.fine_dining.equals(m_eOperationMode) == true && m_iCashierMode == 2)) {
			// Fast food mode
			if (!(AppGlobal.OPERATION_MODE.fine_dining.equals(m_eOperationMode) == true && m_iCashierMode == 2
					&& m_oFuncCheck.isPaid(false) == false) ||
					// For fine dining mode: Interface direct payment failed with config by location
					(m_bIsInterfaceDirectPaymentFailedBySetup && AppGlobal.OPERATION_MODE.fine_dining.equals(m_eOperationMode))){
				
				// Turn off cashier mode
				m_iCashierMode = 0;
				
				showTableFloorPlanScreen(false);
			}
		} else if (AppGlobal.OPERATION_MODE.stock_delivery.equals(m_eOperationMode) == true) {
			// Stock delivery mode
			startStockDeliveryMode();
		} else {
			// Check auto sign out
			checkAutoSignOut();
		}
		
		// Turn off cashier mode
		m_iCashierMode = 0;
		
		// Reset cashier current step to zero (not start)
		if(AppGlobal.g_oFuncStation.get().isPartialPayment())
			m_oFrameCashier.setCurrentStep(0);
		
		// Change back taiwan gui type to normal in normal mode
		if (!AppGlobal.g_oFuncStation.get().getTaiwanGuiType().equals(PosTaiwanGuiConfig.TYPE_SPECIAL))
			AppGlobal.g_oFuncStation.get().setTaiwanGuiType(PosTaiwanGuiConfig.TYPE_NORMAL);
		return true;
	}
	
	private void printAndPaid() {
		
		// Show Table Message Reminder if any
		this.showTableMessageReminder(TABLE_MESSAGE_PROMPT_PRINT_CHECK);
		
		// check whether have pending items
		if (m_oFuncCheck.havePendingItems()) {
			this.showAttentionDialogBox(AppGlobal.g_oLang.get()._("cannot_print_check_with_pending_items"));
			return;
		}
		
		// cannot send and print check with payment gateway transaction but no order item
		if(m_oFuncCheck.isNewCheckWithNoItem() && m_oFuncCheck.getPosPaymentGatewayTransactionsLists().getPosPaymentGatewayTransactionsList().size() > 0){
			// Not allow quit check without send check if check contains payment gateway transaction records
			for(PosPaymentGatewayTransactions oPosPaymentGatewayTransactions : m_oFuncCheck.getPosPaymentGatewayTransactionsLists().getPosPaymentGatewayTransactionsList()){
				if(!oPosPaymentGatewayTransactions.getStatus().equals(PosPaymentGatewayTransactions.STATUS_VOIDED)){
					// Error occur
					this.showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_send_new_check_with_no_order_item_but_payment_gateway_transactions"));
					return;
				}
			}
		}
		
		//first send and print check
		String sSendCheckResult = this.sendCheck(true, true, false, false, false, 0, true, 2);
		if (sSendCheckResult.equals(FUNC_RESULT_SUCCESS)) {
			// Calculate check again if the setup breakdown inclusive sc / tax at final settlement
			// in order to calculate back the each item breakdown sc / tax for inclusive sc / tax
			if(AppGlobal.g_oFuncStation.get().getBreakdownInclusiveScTaxAtFinalSettle())
				m_oFuncCheck.calcCheck();
			// After print check, go for payment
			if (this.payCheck(false, false) == false)
				// Quit check when fail to pay
				this.quitCheck(false);
		} else if (sSendCheckResult.equals(FUNC_RESULT_FAIL))
			// Quit check when send check fail
			this.quitCheck(false);
		
		// Set result flag = success for auto function
		AppGlobal.g_sResultForAutoFunction.set(AppGlobal.AUTO_FUNCTIONS_RESULT_LIST.success.name());
	}
	
	// Update member spending
	private void updateMemberSpending(int iMemberId, BigDecimal dPayAmount) {
		
		if (AppGlobal.isModuleSupport(AppGlobal.OPTIONAL_MODULE.member.name()) == false) {
			return;
		}
		
		// *****************************************************************
		// Create thread to update member spending
		AppThreadManager oAppThreadManager = new AppThreadManager();
		
		// Thread 1 : Update member spending
		// Create parameter array
		Object[] oParameters = new Object[2];
		oParameters[0] = iMemberId;
		oParameters[1] = dPayAmount;
		oAppThreadManager.addThread(1, this, "processUpdateMemberSpending", oParameters);
		
		// Run all of the threads
		oAppThreadManager.runThread();
	}
	
	// Change Cover
	private void changeCover() {
		// Ask new cover
		FormInputBox oFormInputBox = new FormInputBox(this);
		oFormInputBox.init();
		oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.NUMBER);
		oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("cover"));
		oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("please_input_the_new_cover") + ":");
		oFormInputBox.show();
		
		String sNewCover = oFormInputBox.getInputValue();
		
		if (sNewCover == null)
			return;
		
		if (!checkValidIntegerValue(sNewCover))
			return;
		
		if(Integer.valueOf(sNewCover) < 0) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("please_input_cover_with_positive_amount"));
			return;
		}
		
		// Checking the cover upper bound
		int iCoverLimitNumber = AppGlobal.g_oFuncStation.get().getCoverUpperBound();
		if (iCoverLimitNumber > 0) {
			if (Integer.valueOf(sNewCover) > iCoverLimitNumber) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_input_cover_more_than") + " " + iCoverLimitNumber);
				return;
			}
		}
		
		// Checking the cover warning
		int iCoverWarning = AppGlobal.g_oFuncStation.get().getCoverWarningLimit();
		if (iCoverWarning > 0) {
			if (Integer.valueOf(sNewCover) > iCoverWarning) {
				FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
						AppGlobal.g_oLang.get()._("no"), this);
				oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
				oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("exceed_the_cover_limit") + " : " + iCoverWarning +
						System.lineSeparator() + AppGlobal.g_oLang.get()._("continue") + "?");
				oFormConfirmBox.show();
				if (oFormConfirmBox.isOKClicked() == false)
					return;
			}
		}
		
		if (m_oFuncCheck.changeCover(Integer.valueOf(sNewCover)) == false) {
			// Error
			showErrorDialogBox(m_oFuncCheck.getLastErrorMessage());
			return;
		}
		
		// change display
		m_oFrameCheckDetail.setCover(Integer.valueOf(sNewCover));
		
	}
	
	// Change Table
	private boolean changeTable(boolean bFormTableFloorPlan, HashMap<String, String> oFunctionParam) {
		String sNewTable = null, sNewTableExtension = "";
		
		if (m_oFuncCheck == null)
			return false;
		
		while (true) {
			if (bFormTableFloorPlan) {
				if (oFunctionParam != null) {
					sNewTable = oFunctionParam.get("tableNo");
					sNewTableExtension = oFunctionParam.get("tableExtension");
				}
			} else {
				// Ask new table
				FormAskTable oFormAskTable = new FormAskTable(this);
				oFormAskTable.init(0, true, AppGlobal.g_oFuncOutlet.get().getOutletId());
				oFormAskTable.setTitle(AppGlobal.g_oLang.get()._("change_table"));
				oFormAskTable.show();
				
				if (oFormAskTable.isCanelClick())
					return false;
				
				sNewTable = oFormAskTable.getTableNo() + "";
				sNewTableExtension = oFormAskTable.getTableExtension();
				
			}
			
			if (sNewTable == null || sNewTable.isEmpty())
				return false;
			
			PosOutletTable oPosOutletTable = getTargetOutletTable(sNewTable, sNewTableExtension);
			if(oPosOutletTable != null && oPosOutletTable.isCleaningTable()){
				showErrorDialogBox(AppGlobal.g_oLang.get()._("target_table_is_cleaning"));
				return false;
			}
			
			if (m_oFuncCheck.changeTable(sNewTable, sNewTableExtension, false) == false) {
				// Error
				showErrorDialogBox(m_oFuncCheck.getLastErrorMessage());
				if (bFormTableFloorPlan)
					return false;
				else
					// Ask table again
					continue;
			}
			
			m_oFuncCheck.setSection(this.checkAndSetTableSectionBeforeNewTable(
					AppGlobal.g_oFuncOutlet.get().getOutletId(), 0, sNewTable, sNewTableExtension));
			
			// Success
			break;
		}
		
		// Set disallow for continuous print
		// Get the continuous printing flag
		m_oFuncCheck.setAllowContinuousPrint(FuncCheck.NOT_ALLOW_CONTINUOUS_PRINT);
		
		// tms change table - tms interface
		FuncTMS oFuncTMS = AppGlobal.getTmsInfoFromTmsInterfaceInfoList(AppGlobal.g_oFuncOutlet.get().getOutletId(),
				m_oFuncCheck.getCheckId());
		if (oFuncTMS != null)
			oFuncTMS.tmsChangeTable(m_oFuncCheck);
		
		// Kitchen Monitor change table
		if (m_oFuncKitchenMonitor.isSupportKitchenMonitor()
				&& m_oFuncCheck.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_KITCHEN_MONITOR,
				PosCheckExtraInfo.VARIABLE_INTERFACE_ID) != null) {
			FormKitchenMonitorOperation oFormKitchenMonitorOperation = new FormKitchenMonitorOperation(
					m_oFuncKitchenMonitor, this);
			oFormKitchenMonitorOperation.initializeKitchenMonitorOperation();
			oFormKitchenMonitorOperation.kitchenMonitorQsrChangeTable(m_oFuncCheck.getCheckNo(), 0,
					m_oFuncCheck.getTableNoWithExtensionForDisplay());
			oFormKitchenMonitorOperation.stepControl();
			oFormKitchenMonitorOperation.show();
		}
		
		if(m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab) && sNewTableExtension.length() > 0 && sNewTableExtension.substring(sNewTableExtension.length() - 1).compareTo(AppGlobal.BAR_TAB_TABLE_EXTENSION) == 0) {
			String[] sTable = StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, AppGlobal.g_oLang.get()._("auto"));
			m_oFrameCheckDetail.setTableNo(sTable);
		}else
			m_oFrameCheckDetail.setTableNo(AppGlobal.g_oFuncOutlet.get().getTableName(sNewTable, sNewTableExtension));
		return true;
	}
	
	// lock table
	private boolean lockAndLoadTargetTable(FuncCheck oTargetFuncCheck, String sTargetTable,
	                                       String sTargetTableExtension, boolean bAllowNewTable) {
		int iCover = 0;
		
		// Init business date setup
		oTargetFuncCheck.initBusinessDaySetup(AppGlobal.g_oFuncOutlet.get());
		
		String sOrderingMode;
		if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food))
			sOrderingMode = PosCheck.ORDERING_MODE_FAST_FOOD;
		else if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk))
			sOrderingMode = PosCheck.ORDERING_MODE_SELF_ORDER_KIOSK;
		else if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.stock_delivery))
			sOrderingMode = PosCheck.ORDERING_MODE_DELIVERY;
		else if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab))
			sOrderingMode = PosCheck.ORDERING_MODE_BAR_TAB;
		else
			sOrderingMode = PosCheck.ORDERING_MODE_FINE_DINING;
		
		if (oTargetFuncCheck.lockTable(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
				AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(), sTargetTable,
				sTargetTableExtension, true, false, sOrderingMode, "", false) == true) {
			if (oTargetFuncCheck.isOldCheck()) {
				// Old check
				
			} else {
				if (bAllowNewTable) {
					/*
					 * // *** According to product team request, set the cover
					 * of the new table to Zero *** (Version: 0.0.0.7) // Ask
					 * Cover oFormInputBox = new FormInputBox(this);
					 * oFormInputBox.init();
					 * oFormInputBox.setTitle(AppGlobal.g_oLang.get()._(
					 * "welcome"));
					 * oFormInputBox.setMessage(AppGlobal.g_oLang.get()._(
					 * "please_input_the_no_of_guests_for_table")+ " " +
					 * sTargetTable + sTargetTableExtension +":");
					 * oFormInputBox.setKeyboardType(HeroActionProtocol.View.
					 * Attribute.KeyboardType.NUMBER); oFormInputBox.show();
					 *
					 * String sCover = oFormInputBox.getInputValue();
					 * oFormInputBox = null; if(sCover == null){ // Unlock the
					 * table oTargetFuncCheck.unlockTable(true); return false; }
					 * iCover = Integer.valueOf(sCover);
					 *
					 * //Check zero cover if(iCover == 0){ // Unlock the table
					 * oTargetFuncCheck.unlockTable(true); return false; }
					 */
					iCover = 0;
					
					// Set cover
					oTargetFuncCheck.setCover(iCover, false);
					
				} else {
					promptErrorDialogBoxForNewCheck();
					return false;
				}
			}
			
		} else {
			// Fail to lock table
			// Prompt error
			showErrorDialogBox(oTargetFuncCheck.getLastErrorMessage());
			return false;
		}
		
		return true;
	}
	
	// unlock table for floor plan
	private boolean unlockTableForFloorPlan(String sTable, String sTableExtension) {
		String sErrMsg = "";
		
		// Wait for previous check processing finish
		waitForProcessCheckFinish("", "");
		
		// Read the lock information
		int iStationId = 0;
		FuncCheck oFuncCheck = new FuncCheck();
		int iStatId = oFuncCheck.getLockTableStationIdWithoutLoadCheck(AppGlobal.g_oFuncOutlet.get().getOutletId(),
				sTable, sTableExtension);
		if (iStatId > 0 && iStatId != AppGlobal.g_oFuncStation.get().getStationId()) {
			// Get station information
			FuncStation oStation = new FuncStation();
			if (oStation.loadStationById(iStatId)) {
				
				String sStationName = oStation.getName(AppGlobal.g_oCurrentLangIndex.get());
				iStationId = oStation.getStationId();
				
				// Ask if confirm
				FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
						AppGlobal.g_oLang.get()._("no"), this);
				oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
				String sMessage = AppGlobal.g_oLang.get()._("table_is_locked_by_station") + " " + sStationName + "," + System.lineSeparator()
						+ AppGlobal.g_oLang.get()._("confirm_to_unlock") + "?";
				oFormConfirmBox.setMessage(sMessage);
				oFormConfirmBox.show();
				if (oFormConfirmBox.isOKClicked() == false)
					return false;
			}
		}
		
		oFuncCheck = new FuncCheck();
		if (!oFuncCheck.getAndUnlockTableWithoutLoadCheck(AppGlobal.g_oFuncOutlet.get().getShopId(),
				AppGlobal.g_oFuncOutlet.get().getOutletId(), sTable, sTableExtension, "")) {
			sErrMsg = oFuncCheck.getLastErrorMessage();
			this.showErrorDialogBox(sErrMsg);
			return false;
		} else if (oFuncCheck.getOutletTableStationId() == 0) {
			sErrMsg = AppGlobal.g_oLang.get()._("this_table_is_not_locked");
			this.showErrorDialogBox(sErrMsg);
			return false;
		}
		
		// Kill the station who locked the table before
		if (iStationId > 0) {
			AppGlobal.startKillSingleStation(iStationId,
					AppGlobal.g_oLang.get()._("station_is_killed_by_unlock_table_function"));
		}
		
		// Add log to action log list
		AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.unlock_table.name(),
				PosActionLog.ACTION_RESULT_SUCCESS, sTable + sTableExtension, AppGlobal.g_oFuncUser.get().getUserId(),
				AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
				AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "", "");
		// handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
		return true;
	}
	
	// Change Language
	private boolean changeLanguage(int iSelectedLangIndex) {
		int iNewLangIndex = AppGlobal.g_oCurrentLangIndex.get();
		String sLangCode = "";
		
		if (iSelectedLangIndex == 0) {
			ArrayList<String> oOptionList = new ArrayList<String>();
			ArrayList<String> oLangCodeList = new ArrayList<String>();
			for (HashMap<String, String> oLangInfo : AppGlobal.g_oSupportedLangList) {
				if (oLangInfo.get("index").equals(String.valueOf(AppGlobal.g_oCurrentLangIndex.get())))
					continue;
				oOptionList.add(oLangInfo.get("name"));
				oLangCodeList.add(oLangInfo.get("code"));
			}
			
			FormCommonPageContainer oFormCommonPageContainer = new FormCommonPageContainer(this);
			oFormCommonPageContainer.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select_the_language"), oOptionList, false);
			if (oFormCommonPageContainer.isUserCancel()) {
				if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
						|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) == true
						|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) == true) {
					// Fast food mode
					showTableFloorPlanScreen(false);
				}
				return false;
			} else {
				ArrayList<Integer> oSelectionBoxResult = oFormCommonPageContainer.getResultList();
				sLangCode = oLangCodeList.get(oSelectionBoxResult.get(0));
				
				for (HashMap<String, String> oLangInfo : AppGlobal.g_oSupportedLangList) {
					if (oLangInfo.get("code").equals(sLangCode)) {
						iNewLangIndex = Integer.parseInt(oLangInfo.get("index"));
						break;
					}
				}
			}
		} else {
			iNewLangIndex = iSelectedLangIndex;
			
			for (HashMap<String, String> oLangInfo : AppGlobal.g_oSupportedLangList) {
				int langIndex = Integer.parseInt(oLangInfo.get("index"));
				if (langIndex == iNewLangIndex) {
					sLangCode = oLangInfo.get("code");
					break;
				}
			}
		}
		
		if (AppGlobal.g_oCurrentLangIndex.get() != iNewLangIndex) {
			AppGlobal.g_oTerm.get().changeLanguage(iNewLangIndex - 1);
			AppGlobal.g_oCurrentLangIndex.set(new Integer(iNewLangIndex));
			AppGlobal.g_oLang.get().switchLocale(sLangCode);
		}
		
		if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
				|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) == true
				|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) == true) {
			// Fast food mode
			showTableFloorPlanScreen(false);
		}
		
		// Set result flag = success for auto function
		AppGlobal.g_sResultForAutoFunction.set(AppGlobal.AUTO_FUNCTIONS_RESULT_LIST.success.name());
		
		// Update Toggle Print Receipt Button Name in each panel with translation
		this.setTogglePrintReceiptButtonStatus(m_sCurrentPrintMode);
		this.updateTogglePrintReceiptButtonName(m_sCurrentPrintModeButtonName);
		
		return true;
	}
	
	private void showCheckHistory(String sTable, String sTableExtension) {
		ArrayList<PosCheck> oCheckList = new ArrayList<PosCheck>();
		
		// Wait for previous check processing finish
		waitForProcessCheckFinish(sTable, sTableExtension);
		
		FuncCheck oFuncCheck = new FuncCheck();
		// Init business date setup
		oFuncCheck.initBusinessDaySetup(AppGlobal.g_oFuncOutlet.get());
		
		JSONArray oCheckHistoryJSONArray = oFuncCheck.getCheckHistory(
				AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
				Integer.parseInt(sTable), sTableExtension);
		
		if (oCheckHistoryJSONArray == null) {
			this.showErrorDialogBox(AppGlobal.g_oLang.get()._("no_check_history_is_found"));
			return;
		} else {
			// Add log to action log list
			AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.check_history.name(),
					PosActionLog.ACTION_RESULT_SUCCESS, sTable + sTableExtension,
					AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
					AppGlobal.g_oFuncOutlet.get().getOutletId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
					AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "", "");
			// handle action log
			AppGlobal.g_oActionLog.get().handleActionLog(false);
			
			for (int i = 0; i < oCheckHistoryJSONArray.length(); i++) {
				if (oCheckHistoryJSONArray.isNull(i))
					continue;
				
				PosCheck oCheck = new PosCheck(oCheckHistoryJSONArray.optJSONObject(i));
				oCheckList.add(oCheck);
			}
			
			FormCheckHistory oFormCheckHistory = new FormCheckHistory(false, this);
			oFormCheckHistory.init(oCheckList, AppGlobal.g_oFuncOutlet.get().getBusinessDay().getCheckDecimal());
			oFormCheckHistory
					.setTitle(AppGlobal.g_oLang.get()._("check_history_of_table") + " " + AppGlobal.g_oFuncOutlet.get()
							.getTableNameWithTableNo(sTable, sTableExtension)[AppGlobal.g_oCurrentLangIndex.get() - 1]);
			oFormCheckHistory.show();
		}
	}
	
	private void showLast20PaidCheck() {
		ArrayList<PosCheck> oCheckList = new ArrayList<PosCheck>();
		
		// Wait for previous check processing finish
		waitForProcessCheckFinish("", "");
		
		PosCheck oPosCheck = new PosCheck();
		
		JSONArray oCheckHistoryJSONArray = oPosCheck.getLastPaidCheckListByStatId(
				AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
				AppGlobal.g_oFuncStation.get().getStationId(), 20);
		
		if (oCheckHistoryJSONArray == null) {
			this.showErrorDialogBox(AppGlobal.g_oLang.get()._("no_paid_check_is_found"));
			return;
		} else {
			// Add log to action log list
			AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.last_20_paid_check.name(),
					PosActionLog.ACTION_RESULT_SUCCESS, "", AppGlobal.g_oFuncUser.get().getUserId(),
					AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
					AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "", "");
			// handle action log
			AppGlobal.g_oActionLog.get().handleActionLog(false);
			
			for (int i = 0; i < oCheckHistoryJSONArray.length(); i++) {
				if (oCheckHistoryJSONArray.isNull(i))
					continue;
				
				PosCheck oCheck = new PosCheck(oCheckHistoryJSONArray.optJSONObject(i));
				oCheckList.add(oCheck);
			}
			
			FormCheckHistory oFormCheckHistory = new FormCheckHistory(true, this);
			oFormCheckHistory.addListener(this);
			oFormCheckHistory.init(oCheckList, AppGlobal.g_oFuncOutlet.get().getBusinessDay().getCheckDecimal());
			oFormCheckHistory.setTitle(AppGlobal.g_oLang.get()._("last_twenty_paid_checks"));
			oFormCheckHistory.show();
		}
	}
	
	private void showAllOpenCheck(int iCheckListingbyType) {
		initCheckList(iCheckListingbyType);
		if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food)
				|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk)
				|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab)) {
			// For fast food mode
			if (!m_oFormCheckListing.isAdjustPaymentClick())
				showTableFloorPlanScreen(false);
		}
	}
	
	// Logout
	private boolean logout(boolean bForceLogout) {
		// Quit business day checking
		// OM may be disable by the kill process
		// Enable back the OM for logout process
		OmWsClientGlobal.g_oWsClient.get().setEnable(true);
		OmWsClientGlobal.g_oWsClientForHq.get().setEnable(true);
		
		// Finish all action log first
		AppGlobal.g_oActionLog.get().handleActionLog(true);
		
		if (!bForceLogout) {
			// Ask if confirm
			FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
					AppGlobal.g_oLang.get()._("no"), this);
			oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
			oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("confirm_to_exit") + "?");
			oFormConfirmBox.show();
			if (oFormConfirmBox.isOKClicked() == false) {
				if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
						|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) == true
						|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) == true) {
					// Fast food mode
					showTableFloorPlanScreen(false);
				}
				
				return false;
			}
		}
		
		// Wait for previous check processing finish
		waitForProcessCheckFinish("", "");
		
		// Write application log
		AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
				AppGlobal.g_oFuncUser.get().getUserId() + "", "Function: logout");
		AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.logout.name(), PosActionLog.ACTION_RESULT_SUCCESS,
				"", AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
				AppGlobal.g_oFuncOutlet.get().getOutletId(), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
				AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "", "");
		
		// Send action log
		AppGlobal.g_oActionLog.get().handleActionLog(true);
		
		// Stop the thread for checking update of menu item
		AppGlobal.removeBackgroundScheduleTask(AppBackgroundScheduleJob.TYPE_UPDATE_MENU_ITEM + "_" + AppGlobal.g_oFuncMenu.get().hashCode());
		
		// Disconnect from smart card
		closeSmartCard();
		
		// Finish showing this form
		this.finishShow();
		
		// Logout OM
		AppGlobal.g_oFuncUser.get().logout();
		
		// Remove current thread from the global list
		AppGlobal.g_lCurrentConnectClientList.remove(Thread.currentThread().getId());

/** SignOut [frameTableFloorPlan_LogoutClicked] */
		// surveillance eConnect employee event: SignOut
		HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
		this.doSurveillanceEvent(FuncSurveillance.SURVEILLANCE_TYPE_SIGN_OUT, oSurveillanceEventInfo);
		return true;
	}
	
	// Check Review
	private void guestCheckPreview(FuncCheck oFuncCheck) {
		int iChosenCheckPfmtId = 0;
		
		if (!oFuncCheck.isOldCheck()) {
			this.showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_preview_new_check"));
			return;
		}
		
		// if check items are modified, cannot review check
		if (oFuncCheck.isModified()) {
			this.showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_preview_modified_check"));
			return;
		}
		
		//show print format selection accordingly
		HashMap<String, Integer> oCheckPrintFormatInfo = null;
		oCheckPrintFormatInfo = selectCheckPrintFormat(false, false, false);
		if (oCheckPrintFormatInfo.get("result") == 0)
			return;
		iChosenCheckPfmtId = oCheckPrintFormatInfo.get("pfmtId");
		
		// Get check format
		/*int iCheckPrtFmtCount = 0;
		for (i = 1; i <= 5; i++) {
			if (AppGlobal.g_oFuncStation.get().getStation().getCheckPfmtId(i) > 0) {
				iChosenCheckPfmtId = AppGlobal.g_oFuncStation.get().getStation().getCheckPfmtId(i);
				iCheckPrtFmtCount++;
			}
		}

		for (i = 1; i <= 5; i++) {
			if (AppGlobal.g_oFuncStation.get().getStation().getDetailCheckPfmtId(i) > 0) {
				iChosenCheckPfmtId = AppGlobal.g_oFuncStation.get().getStation().getDetailCheckPfmtId(i);
				iCheckPrtFmtCount++;
			}
		}

		// No check format is defined
		if (iCheckPrtFmtCount == 0) {
			// Error occur
			String sErrMsg = AppGlobal.g_oLang.get()._("no_print_format_is_defined");
			FormDialogBox oFormDialogBox = new FormDialogBox(AppGlobal.g_oLang.get()._("ok"), this);
			oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._("error"));
			oFormDialogBox.setMessage(sErrMsg);
			oFormDialogBox.show();
			oFormDialogBox = null;
			return;
		}

		// Show check format selection if more than one check format is defined
		if (iCheckPrtFmtCount > 1) {
			ArrayList<String> oOptionList = new ArrayList<String>();
			HashMap<Integer, Integer> oPrintFormatIdList = new HashMap<Integer, Integer>();
			int iPfmtId = 0, iFormatCount = 0;

			for (i = 1; i <= 5; i++) {
				iPfmtId = AppGlobal.g_oFuncStation.get().getStation().getCheckPfmtId(i);
				if (iPfmtId > 0) {
					oOptionList.add(AppGlobal.g_oFuncStation.get().getPrintFormatNameByPfmtId(iPfmtId,
							AppGlobal.g_oCurrentLangIndex.get()));
					oPrintFormatIdList.put(iFormatCount, iPfmtId);
					iFormatCount++;
				}
			}

			for (i = 1; i <= 5; i++) {
				iPfmtId = AppGlobal.g_oFuncStation.get().getStation().getDetailCheckPfmtId(i);
				if (iPfmtId > 0) {
					oOptionList.add(AppGlobal.g_oFuncStation.get().getPrintFormatNameByPfmtId(iPfmtId,
							AppGlobal.g_oCurrentLangIndex.get()));
					oPrintFormatIdList.put(iFormatCount, iPfmtId);
					iFormatCount++;
				}
			}

			FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
			oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select_the_print_format"),
					oOptionList, false);
			oFormSelectionBox.show();

			if (oFormSelectionBox.isUserCancel()) {
				return;
			} else {
				ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
				int iPrtFmtIndex = oSelectionBoxResult.get(0);
				iChosenCheckPfmtId = oPrintFormatIdList.get(iPrtFmtIndex);
			}

		}
*/
		// Create guest check for preview
		String sURL = oFuncCheck.previewGuestCheck(iChosenCheckPfmtId, false).optString("url", "");
		if (sURL.length() == 0) {
			this.showErrorDialogBox(AppGlobal.g_oLang.get()._("fail_to_create_guest_check_image"));
			return;
		}
		
		// Add log to action log list
		AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.guest_check_preview.name(),
				PosActionLog.ACTION_RESULT_SUCCESS, oFuncCheck.getTableNoWithExtensionForDisplay(),
				AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
				AppGlobal.g_oFuncOutlet.get().getOutletId(), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
				AppGlobal.g_oFuncStation.get().getStationId(), oFuncCheck.getCheckId(), "", "", "", "", "");
		// handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
		// Set the URL source
		m_oFrameCheckReview.setCheckURL(sURL);
		m_oFrameCheckReview.setTitle(AppGlobal.g_oLang.get()._("check_review"));
		m_oFrameCheckReview.showPrintButton(false);
		m_oFrameCover.setVisible(true);
		m_oFrameCover.bringToTop();
		m_oFrameCheckReview.setVisible(true);
		m_oFrameCheckReview.bringToTop();
	}
	
	// Receipt Review
	private boolean receiptPreview(HashMap<String, String> oFunctionParam, boolean bPastDateCheck) {
		String sCheckId = "";
		String sTableNo = "";
		String sErrMsg = "";
		
		if (oFunctionParam != null) {
			sCheckId = oFunctionParam.get("checkId");
			sTableNo = oFunctionParam.get("tableNo");
		} else {
			sErrMsg = AppGlobal.g_oLang.get()._("missing_check_no");
			this.showErrorDialogBox(sErrMsg);
			return false;
		}
		
		String sURL = "";
		
		while (true) {
			// Create guest check for preview
			sURL = getPrintCheckUrl(sCheckId);
			if (sURL == null)
				break;
			
			// Add log to action log list
			AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.receipt_preview.name(),
					PosActionLog.ACTION_RESULT_SUCCESS, sTableNo, AppGlobal.g_oFuncUser.get().getUserId(),
					AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
					AppGlobal.g_oFuncStation.get().getStationId(), sCheckId, "", "", "", "", "");
			// handle action log
			AppGlobal.g_oActionLog.get().handleActionLog(false);
			
			break;
		}
		
		FormPreviewReceipt oFormPreviewReceipt = new FormPreviewReceipt(this, bPastDateCheck);
		oFormPreviewReceipt.setCheckURL(sURL);

//Recall Check (CheckListing Click)
		// surveillance event: ReopenCheck
		HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
		oSurveillanceEventInfo.put("checkNum", "" + oFunctionParam.get("checkNo"));
		this.doSurveillanceEvent(FuncSurveillance.SURVEILLANCE_TYPE_REOPEN_CHECK, oSurveillanceEventInfo);
		/*
		List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);
		if (!oInterfaceConfigList.isEmpty()) {
			for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
				if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
					FuncSurveillance oFuncSurveillance = new FuncSurveillance(oPosInterfaceConfig);
					HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
					oSurveillanceEventInfo.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_REOPEN_CHECK);
					oSurveillanceEventInfo.put("checkNum", "" + oFunctionParam.get("checkNo"));
					oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo);
				}
			}
		}
		*/
		// Set Member Function only available for General V2 interface
		List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal
				.getPosInterfaceConfigByInfType(InfInterface.TYPE_MEMBERSHIP_INTERFACE);
		for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
			if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_GENERAL_V2))
				oFormPreviewReceipt.setSetMemberButtonVisible(true);
		}
		
		oFormPreviewReceipt.show();
		
		PosFunction oFunction = null;
		if (oFormPreviewReceipt.isClickReprintReceipt()) {
			oFunction = m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.reprint_receipt.name());
		} else if (oFormPreviewReceipt.isClickReleasePayment()) {
			oFunction = m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.release_payment.name());
		} else if (oFormPreviewReceipt.isClickVoidPaidCheck()) {
			oFunction = m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.void_paid_check.name());
		} else if (oFormPreviewReceipt.isClickAdjustTips()) {
			oFunction = m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.adjust_tips.name());
		} else if (oFormPreviewReceipt.isClickAdjustPayments()) {
			oFunctionParam.put("adjustPaymentClick", "1");
			oFunction = m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.adjust_payments.name());
		} else if (oFormPreviewReceipt.isClickSetMemberForClosedCheck()) {
			oFunction = m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.set_closed_check_member.name());
		}
		
		if (oFunction != null) {
			// Perform function
			fcnSwitch(oFunction.getFuncId(), "", -1, -1, true, oFunctionParam);
			
			return true;
		} else {
			return false;
		}
	}
	
	// Web report
	private void webReport() {
		if (m_sWebReportBaseURL.length() == 0) {
			this.showErrorDialogBox(AppGlobal.g_oLang.get()._("missing_configuration_of_report_url"));
			return;
		}
		
		// Create report URL
		StringBuilder sURL = new StringBuilder();
		
		try {
			sURL.append(m_sWebReportBaseURL);
			
			for (HashMap<String, String> oLangInfo : AppGlobal.g_oSupportedLangList) {
				if (oLangInfo.get("index").equals(String.valueOf(AppGlobal.g_oCurrentLangIndex.get()))) {
					sURL.append(oLangInfo.get("url"));
					sURL.append("/report/reports/listing_for_client/pos/");
					sURL.append(OmWsClientGlobal.g_oWsClient.get().getSessionID());
					sURL.append("/");
					sURL.append(AppGlobal.g_oFuncUser.get().getUserId());
					sURL.append("/");
					sURL.append(AppGlobal.g_oFuncStation.get().getReportPrtqId());
					sURL.append("/");
					sURL.append(AppGlobal.g_oFuncStation.get().getReportSlipPrtqId());
					sURL.append("/");
					sURL.append(AppGlobal.g_oFuncOutlet.get().getOutletId());
					sURL.append("/");
					sURL.append(AppGlobal.g_oFuncStation.get().getStationId());
					sURL.append("/");
					if (m_bIsDailyStart)
						sURL.append(AppGlobal.g_oFuncOutlet.get().getFormat1BusinessDayInString());
					else {
						DateTime dtToday = AppGlobal.getCurrentTime(false);
						DateTimeFormatter oDateTime = DateTimeFormat.forPattern("yyyy-MM-dd");
						sURL.append(oDateTime.print(dtToday));
					}
					sURL.append("/format:slip");
					
					break;
				}
			}
		} catch (Exception e) {
			AppGlobal.stack2Log(e);
			return;
		}
		// sURL.toString());
		
		// Add log to action log list
		AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.web_report.name(),
				PosActionLog.ACTION_RESULT_SUCCESS, "", AppGlobal.g_oFuncUser.get().getUserId(),
				AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
				AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "", "");
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
		FormWebReport oFormWebReport = new FormWebReport(this);
		// Set the URL source
		oFormWebReport.setCheckURL(sURL.toString());
		oFormWebReport.show();
	}
	
	private void openWebReport() {
		webReport();
		
		if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
				|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
				|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode)) {
			// Fast food mode
			showTableFloorPlanScreen(false);
		}
	}
	
	// reading the table floor plan function to the ArrayList<FuncLookupButtonInfo>
	public ArrayList<FuncLookupButtonInfo> readTableFloorPlanFunction(){
		ArrayList<FuncLookupButtonInfo> resultDisplayPanelLookupArrayList = null;
		List<PosDisplayPanelPage> pages = m_oPosDisplayPanel.filterDisplayPanelPageByZone(PosDisplayPanelZone.KEY_FLOOR_PLAN_FUNCITON);
		List<PosDisplayPanelZone> zones = m_oPosDisplayPanel.filterDisplayPanelZoneByZone(PosDisplayPanelZone.KEY_FLOOR_PLAN_FUNCITON);
		if (!pages.isEmpty()) {
			ArrayList<FuncLookupButtonInfo> displayPanelLookupArrayList = preparePanelLookupArrayWithPanel(
					m_oPosDisplayPanel.filterDisplayPanelLookupByPageId(pages.get(0).getPageId()), zones.get(0));
			resultDisplayPanelLookupArrayList = new ArrayList<FuncLookupButtonInfo>();
			for (FuncLookupButtonInfo oButtonInfo : displayPanelLookupArrayList) {
				String sType = oButtonInfo.getType();
				if (!sType.equals(PosDisplayPanelLookup.TYPE_FUNCTION))
					continue;
				resultDisplayPanelLookupArrayList.add(oButtonInfo);
			}
		}
		
		return resultDisplayPanelLookupArrayList;
	}
	
	// print detail check with void itemInfo
	public void printDetailCheck() {
		if (!m_oFuncCheck.isOldCheck()) {
			this.showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_print_new_check"));
			return;
		}
		if (m_oFuncCheck.hasNewItem(false)) {
			this.showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_print_detail_check_with_new_items"));
			return;
		}
		
		int iChosenCheckPfmtId = 0;
		HashMap<String, Integer> oCheckPfmtInfo = null;
		oCheckPfmtInfo = selectCheckPrintFormat(false, true, false);
		if (oCheckPfmtInfo.get("result") == 0)
			return;
		
		iChosenCheckPfmtId = oCheckPfmtInfo.get("pfmtId");
		
		// Create guest check for preview
		String sURL = m_oFuncCheck.previewGuestCheck(iChosenCheckPfmtId, true).optString("url", "");
		if (sURL.length() == 0) {
			this.showErrorDialogBox(AppGlobal.g_oLang.get()._("fail_to_create_guest_check_image"));
			return;
		}
		
		// Add log to action log list
		AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.print_detail_check.name(),
				PosActionLog.ACTION_RESULT_SUCCESS, m_oFuncCheck.getTableNoWithExtensionForDisplay(),
				AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
				AppGlobal.g_oFuncOutlet.get().getOutletId(), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
				AppGlobal.g_oFuncStation.get().getStationId(), m_oFuncCheck.getCheckId(), "", "", "", "", "");
		// handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
		// Set the URL source
		m_oFrameCheckReview.setCheckURL(sURL);
		m_oFrameCheckReview.setTitle(AppGlobal.g_oLang.get()._("detail_check_preview"));
		m_oFrameCheckReview.showPrintButton(true);
		m_oFrameCheckReview.printCheck(FrameCheckReview.PRINT_TYPE_DETAIL_CHECK, iChosenCheckPfmtId);
		m_oFrameCover.setVisible(true);
		m_oFrameCover.bringToTop();
		m_oFrameCheckReview.setVisible(true);
		m_oFrameCheckReview.bringToTop();
	}
	
	// Split Item to Other Table
	private boolean splitItemToOtherTable(boolean bPreProcess, List<HashMap<String, Integer>> oSelectedItems, String sOrgItemIndex, HashMap<String, String> oFromItemInfo) {
		String sTargetTable = "", sTargetExtension = "";
		
		if (bPreProcess) {
			if (m_oFuncCheck.isNewCheckWithNoItem()) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_split_check_with_no_order_item"));
				return false;
			}
			
			// Check there is new item exist and ask to send check before chosen
			// items
			if (m_oFuncCheck.hasNewItem(false)) {
				promptErrorDialogBoxForNewCheck();
				return false;
				/*
				 * FormConfirmBox oFormConfirmBox = new
				 * FormConfirmBox(AppGlobal.g_oLang.get()._("confirm"),
				 * AppGlobal.g_oLang.get()._("cancel"), this);
				 * oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._(
				 * "attention"));
				 * oFormConfirmBox.setMessage(AppGlobal.g_oLang.get().
				 * _("Will send check before split item. Are you confirm to send check?"
				 * )); oFormConfirmBox.show(); if(oFormConfirmBox.isOKClicked()
				 * == false) return false; else { if(!m_oFuncCheck.isOldCheck()
				 * && m_oFuncStation.updateCheckNo() == false){ // Error occur
				 * sErrMsg = m_oFuncStation.getLastErrorMessage(); FormDialogBox
				 * oFormDialogBox = new
				 * FormDialogBox(AppGlobal.g_oLang.get()._("ok"), this);
				 * oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._("error"));
				 * oFormDialogBox.setMessage(sErrMsg); oFormDialogBox.show();
				 * oFormDialogBox = null; return false; }
				 *
				 * m_oFuncCheck.sendCheck(false, false, true,
				 * AppGlobal.g_oFuncOutlet.get().getOutletId(),
				 * AppGlobal.g_oFuncOutlet.get().getOutletNameByIndex(AppGlobal.
				 * g_oCurrentLangIndex.get()), m_oFuncStation.getStationId(),
				 * m_oFuncUser.getUserId(), 0, 0, false);
				 * m_oFuncCheck.loadCheck(m_oPosDisplayPanel.
				 * getDisplayPanelMenuItemList(), m_oFuncCheck.getCheckId(),
				 * m_oFuncUser.getUserId(), m_oFuncStation.getStationId(),
				 * true);
				 *
				 * // Clear the ordering basket
				 * m_oFrameOrderingBasket.clearAllSections();
				 * drawOrderingBasket(); }
				 */
			}
			
			// Check whether check discount exist
			if (m_oFuncCheck.hasCheckDiscount(true, false)) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_apply_on_check_contains_check_discount"));
				return false;
			}
			return true;
		}
		
		// Check whether have selected item
		if (oSelectedItems.isEmpty()) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("no_selected_items"));
			return false;
		}
		
		// Ask new table
		while (true) {
			FormAskTable oFormAskTable = new FormAskTable(this);
			oFormAskTable.init(0, true, AppGlobal.g_oFuncOutlet.get().getOutletId());
			oFormAskTable.setTitle(AppGlobal.g_oLang.get()._("split_item_to_table"));
			oFormAskTable.show();
			
			if (oFormAskTable.isCanelClick())
				return false;
			
			sTargetTable = oFormAskTable.getTableNo() + "";
			sTargetExtension = oFormAskTable.getTableExtension();
			
			if (sTargetTable.equals(m_oFuncCheck.getTableNo())
					&& sTargetExtension.equals(m_oFuncCheck.getTableExtension())) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_split_to_current_table"));
				continue;
			}
			PosOutletTable oPosOutletTable = getTargetOutletTable(String.valueOf(oFormAskTable.getTableNo()), oFormAskTable.getTableExtension());
			if(oPosOutletTable != null && oPosOutletTable.isCleaningTable()){
				showErrorDialogBox(AppGlobal.g_oLang.get()._("target_table_is_cleaning"));
				continue;
			}
			break;
		}
		
		// Lock and open the target table
		FuncCheck oTargetFuncCheck = new FuncCheck();
		if (this.lockAndLoadTargetTable(oTargetFuncCheck, sTargetTable, sTargetExtension, true) == false)
			return false;
		
		// ask table section
		oTargetFuncCheck
				.setSection(this.checkAndSetTableSectionBeforeNewTable(AppGlobal.g_oFuncOutlet.get().getOutletId(),
						oTargetFuncCheck.getSectId(), sTargetTable, sTargetExtension));
		// copy the custom check type
		oTargetFuncCheck.setCustomType(m_oFuncCheck.getCustomTypeId());
		// ask tms interface
		ArrayList<String> oVendors = new ArrayList<String>();
		oVendors.add(InfVendor.KEY_RESPAK);
		String sTitle = AppGlobal.g_oLang.get()._("please_select_the_tms_interface");
		PosInterfaceConfig oTmsConfig = this.getInterfaceConfig(InfInterface.TYPE_TMS, oVendors, sTitle, false);
		if (oTmsConfig != null) {
			if (oTargetFuncCheck.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_TMS,
					PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0))
				oTargetFuncCheck.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_TMS,
						PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0, Integer.toString(oTmsConfig.getInterfaceId()));
			else
				oTargetFuncCheck.addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_TMS,
						PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0, Integer.toString(oTmsConfig.getInterfaceId()));
		}
		
		//Determine to add extra info for auto function or not, referencing support_for_split_check and
		oTargetFuncCheck.addExtraInfoForSplitCheckAutoFunction();
		
		// update target check
		/*
		 * if(!oTargetFuncCheck.isOldCheck() &&
		 * AppGlobal.g_oFuncStation.get().updateCheckNo() == false){ // Error
		 * occur sErrMsg = AppGlobal.g_oFuncStation.get().getLastErrorMessage();
		 * FormDialogBox oFormDialogBox = new
		 * FormDialogBox(AppGlobal.g_oLang.get()._("ok"), this);
		 * oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._("error"));
		 * oFormDialogBox.setMessage(sErrMsg); oFormDialogBox.show();
		 * oFormDialogBox = null; return false; }
		 */
		
		// Check whether check discount exist in target check
		if (oTargetFuncCheck.hasCheckDiscount(true, false)) {
			oTargetFuncCheck.unlockTable(false, false);
			
			showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_split_to_check_that_contains_check_discount"));
			return false;
		}
		
		ArrayList<String> oListToSort = new ArrayList<String>();
		for (HashMap<String, Integer> oItemInfo : oSelectedItems) {
			int iSectionId = oItemInfo.get("sectionId");
			int iItemIndex = oItemInfo.get("itemIndex");
			
			String sSortString = StringLib.IntToStringWithLeadingZero(iSectionId, 3) + "_"
					+ StringLib.IntToStringWithLeadingZero(iItemIndex, 6);
			oListToSort.add(sSortString);
		}
		Collections.sort(oListToSort);
		
		oSelectedItems.clear();
		for (String sSortedString : oListToSort) {
			int iSlashIndex = sSortedString.indexOf("_");
			int iSectionId = Integer.parseInt(sSortedString.substring(0, iSlashIndex));
			int iItemIndex = Integer.parseInt(sSortedString.substring(iSlashIndex + 1));
			HashMap<String, Integer> oSelectedItem = new HashMap<String, Integer>();
			
			oSelectedItem.put("sectionId", iSectionId);
			oSelectedItem.put("itemIndex", iItemIndex);
			oSelectedItems.add(oSelectedItem);
		}
		
		splitItemToTargetCheck(oSelectedItems, oTargetFuncCheck, sOrgItemIndex, oFromItemInfo);
		
		// Change cover based on selected item group
		List<FuncCheck> oTargetCheckList = new ArrayList<FuncCheck>();
		oTargetCheckList.add(oTargetFuncCheck);
		changeCoverByItem(0, oTargetCheckList, false);
		
		return true;
	}
	
	// Void Check
	private boolean voidCheck(HashMap<String, String> oFunctionParam, FuncCheck oLoadedFuncCheck, int iDefaultVoidId) {
		String sTableNo = "";
		String sTableExtension = "";
		int iVoidCodeId = 0;
		PosVoidReason oVoidReason = null;
		boolean bReleaseBefore = false;
		FuncCheck oFuncCheck = new FuncCheck();
		
		boolean bVoidChecking = true;
		if (this.m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.transfer_check_to_target_outlet.name()))
			bVoidChecking = false;
		
		if (oFunctionParam != null && oFunctionParam.containsKey("tableNo")) {
			sTableNo = oFunctionParam.get("tableNo");
			sTableExtension = oFunctionParam.get("tableExtension");
			if (oLoadedFuncCheck != null) {
				bReleaseBefore = true;
				oFuncCheck = oLoadedFuncCheck;
			}
		} else {
			// Ask table no.
			FormAskTable oFormAskTable = new FormAskTable(this);
			oFormAskTable.init(0, true, AppGlobal.g_oFuncOutlet.get().getOutletId());
			oFormAskTable.setTitle(AppGlobal.g_oLang.get()._("void_check"));
			oFormAskTable.show();
			
			if (oFormAskTable.isCanelClick())
				return false;
			
			sTableNo = oFormAskTable.getTableNo() + "";
			sTableExtension = oFormAskTable.getTableExtension();
		}
		if (bReleaseBefore == false) {
			// No outlet table record of inputted table no.
			PosOutletTable oOutletTable = new PosOutletTable();
			oOutletTable.readByOutletIdTable(AppGlobal.g_oFuncOutlet.get().getOutletId(), Integer.parseInt(sTableNo),
					sTableExtension);
			// support "0" table number , check empty extension only
			if (oOutletTable.getOtblId().equals("")
					&& (oOutletTable.getTableExtension() == null || oOutletTable.getTableExtension().equals(""))) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("this_table_has_not_opened"));
				return false;
			}
			
			// Wait for previous check processing finish
			waitForProcessCheckFinish(sTableNo, sTableExtension);
			
			// Init business date setup
			oFuncCheck.initBusinessDaySetup(AppGlobal.g_oFuncOutlet.get());
		}
		
		// Try to lock table
		// For old check, load the old check
		String sOrderingMode;
		if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food))
			sOrderingMode = PosCheck.ORDERING_MODE_FAST_FOOD;
		else if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk))
			sOrderingMode = PosCheck.ORDERING_MODE_SELF_ORDER_KIOSK;
		else if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.stock_delivery))
			sOrderingMode = PosCheck.ORDERING_MODE_DELIVERY;
		else if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab))
			sOrderingMode = PosCheck.ORDERING_MODE_BAR_TAB;
		else
			sOrderingMode = PosCheck.ORDERING_MODE_FINE_DINING;
		if (bReleaseBefore == true || oFuncCheck.lockTable(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
				AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(), sTableNo,
				sTableExtension, true, false, sOrderingMode, "", false) == true) {
			String sErrorMsg = "";
			if (oFuncCheck.getItemTotal().compareTo(oFuncCheck.getItemRecordItemTotal()) != 0)
				sErrorMsg = AppGlobal.g_oLang.get()._("check_is_not_saved_completely") + ", "
						+ AppGlobal.g_oLang.get()._("please_try_again_later");
			
			// check whether have ascentis member attached
			if (!oFuncCheck.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE,
					PosCheckExtraInfo.VARIABLE_NRIC_NUMBER).isEmpty()) {
				for (FuncCheckParty oFuncCheckParty : oFuncCheck.getCheckPartyList()) {
					for (List<FuncCheckItem> oItemListForSingleSeat : oFuncCheckParty.getWholeItemList()) {
						for (FuncCheckItem oCheckItem : oItemListForSingleSeat) {
							List<PosCheckDiscount> oCurrentDiscountList = oCheckItem.getItemDiscountList();
							for (PosCheckDiscount oPosCheckDiscount : oCurrentDiscountList) {
								PosCheckExtraInfo oExtraInfo = oPosCheckDiscount.getExtraInfoFromList(
										PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE,
										PosCheckExtraInfo.VARIABLE_VOUCHER_NUMBER, 0);
								if (oExtraInfo != null && oExtraInfo.getValue() != null) {
									sErrorMsg = AppGlobal.g_oLang.get()._("member_is_attached");
									break;
								}
							}
						}
					}
				}
			}
			
			if(AppGlobal.g_oFuncStation.get().isPartialPayment() && oFuncCheck.getPaymentRecordPayTotal().compareTo(BigDecimal.ZERO) != 0)
				sErrorMsg = AppGlobal.g_oLang.get()._("check_has_saved_payment");
			
			//Show error and return if error message is not empty
			if(!sErrorMsg.isEmpty()) {
				showErrorDialogBox(sErrorMsg);
				oFuncCheck.unlockTable(true, false);
				return false;
			}
			
			if (oFuncCheck.isOldCheck()) {
				if (iDefaultVoidId == 0) {
					if (bVoidChecking) {
						FormVoidCheckDetail oFormVoidCheckDetail = new FormVoidCheckDetail(this);
						oFormVoidCheckDetail.initWithFuncCheck(oFuncCheck);
						oFormVoidCheckDetail.setTitle(AppGlobal.g_oLang.get()._("void_check"));
						oFormVoidCheckDetail.show();
						
						if (oFormVoidCheckDetail.confirmVoid() == false) {
							oFuncCheck.unlockTable(true, false);
							return false;
						}
					}
					
					// load the payment gateway transaction list on selected check, if there is any payment transaction(s)
					// alert user to cancel before void check
					if (oFuncCheck.haveActivePaymentGatewayTransactions()) {
						FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
								AppGlobal.g_oLang.get()._("no"), this);
						oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
						oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("this_check_have_active_card_authorization_or_complete_authorization") + System.lineSeparator() +
								(AppGlobal.g_oLang.get()._("continue_to_void_check") + "?"));
						oFormConfirmBox.show();
						
						if (oFormConfirmBox.isOKClicked() == false) {
							oFuncCheck.unlockTable(true, false);
							return false;
						}
					}
					
					// Ask for void code
					oVoidReason = this.callVoidReasonLookup(AppGlobal.g_oLang.get()._("void_reason"),
							AppGlobal.g_oLang.get()._("please_select_the_void_check_reason"),
							PosVoidReason.TYPE_VOID_CHECK);
					if (oVoidReason != null)
						iVoidCodeId = oVoidReason.getVdrsId();
					else {
						if (bVoidChecking) {
							oFuncCheck.unlockTable(true, false);
							return false;
						} else
							iVoidCodeId = iDefaultVoidId;
					}
				} else
					iVoidCodeId = iDefaultVoidId;
				
				oFuncCheck.getCurrentItemStockList(AppGlobal.g_oFuncOutlet.get().getOutletId(),
						PosOutletItem.CHECK_STOCK_YES, PosOutletItem.SOLDOUT_YES);
				
				// force to print check before void
				int iChosenCheckPfmtId = 0;
				if (AppGlobal.g_oFuncStation.get().getCheckPrtqId() != 0 && bVoidChecking) {
					HashMap<String, Integer> oCheckPrintFormatInfo = null;
					oCheckPrintFormatInfo = selectCheckPrintFormat(false, false, false);
					if (oCheckPrintFormatInfo.get("result") == 0) {
						oFuncCheck.unlockTable(true, false);
						return false;
					}
					iChosenCheckPfmtId = oCheckPrintFormatInfo.get("pfmtId");
				}
				
				// Perform void check
				if (oFuncCheck.voidCheck(iVoidCodeId, AppGlobal.g_oFuncUser.get().getUserId(),
						AppGlobal.g_oFuncStation.get().getStationId(), false, "", iChosenCheckPfmtId, bReleaseBefore) == false) {
					updateTableFloorPlanTableStatus(false);
					
					// Fail to void check
					showErrorDialogBox(AppGlobal.g_oLang.get()._("fail_to_void_check"));
				} else {
					updateTableFloorPlanTableStatus(false);
					oFuncCheck.handleCheckForOverCookingTimeTableList(null, null, true);
					
					if (bVoidChecking) {
						// Void check successfully
						showDialogBox(AppGlobal.g_oLang.get()._("message"), AppGlobal.g_oLang.get()._("check_is_voided"));
					}
				}
			} else {
				// No such check in inputted table no.
				showErrorDialogBox(AppGlobal.g_oLang.get()._("check_is_not_found"));
				oFuncCheck.unlockTable(true, false);
			}
			
			// update floor plan status
			this.updateTableFloorPlanTimer(true);
		} else {
			// Error
			showErrorDialogBox(oFuncCheck.getLastErrorMessage());
		}
		
		if (m_oFuncKitchenMonitor.isSupportKitchenMonitor()
				&& oFuncCheck.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_KITCHEN_MONITOR,
				PosCheckExtraInfo.VARIABLE_INTERFACE_ID) != null) {
			FormKitchenMonitorOperation oFormKitchenMonitorOperation = new FormKitchenMonitorOperation(
					m_oFuncKitchenMonitor, this);
			oFormKitchenMonitorOperation.initializeKitchenMonitorOperation();
			oFormKitchenMonitorOperation.kitchenMonitorQsrVoidCheck(oFuncCheck.getCheckNo());
			oFormKitchenMonitorOperation.stepControl();
			oFormKitchenMonitorOperation.show();
		}
		
		return true;
	}
	
	// Combine release payment and void check function
	private void voidPaidCheck(String sCheckNo) {
		if (sCheckNo == null || sCheckNo.length() == 0) {
			// Ask check no.
			FormInputBox oFormInputBox = new FormInputBox(this);
			oFormInputBox.init();
			oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DEFAULT);
			oFormInputBox.showKeyboard();
			oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("void_paid_check"));
			oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("please_input_check_no") + ":");
			oFormInputBox.show();
			
			sCheckNo = oFormInputBox.getInputValue();
			if (sCheckNo == null)
				return;
			
			if (sCheckNo.length() == 0)
				return;
		}
		
		HashMap<String, String> oFunctionParam = new HashMap<String, String>();
		oFunctionParam.put("checkNo", sCheckNo);
		// Perform release payment first
		FuncCheck oFuncCheck = releasePayment(oFunctionParam, AppGlobal.FUNC_LIST.void_paid_check.name());
		if (oFuncCheck != null) {
			oFunctionParam.put("tableNo", oFuncCheck.getTableNo());
			oFunctionParam.put("tableExtension", oFuncCheck.getTableExtension());
			
			// Release payment success, then void check
			voidCheck(oFunctionParam, oFuncCheck, oFuncCheck.getLastReleasePaymentVoidReasonId());
		}
	}
	
	// Release payment
	// Return value: void reason ID if release success
	// 0 - release fail
	private FuncCheck releasePayment(HashMap<String, String> oFunctionParam, String sFunctionKey) {
		String sErrMsg;
		
		FuncCheck oFuncCheck = askCheckNumberAndLoadCheck(oFunctionParam, sFunctionKey);
		if (oFuncCheck == null)
			return null;
		
		String sCheckId = oFuncCheck.getCheckId();
		String sCheckPrefixNum = oFuncCheck.getCheckPrefixNo();
		boolean bVoidCheckAfterward = sFunctionKey.equals(AppGlobal.FUNC_LIST.void_paid_check.name());
		
		if (!checkIsFullPaid(oFuncCheck))
			return null;
		
		// Check whether payment records exist
		if (oFuncCheck.getCheckTotal().compareTo(oFuncCheck.getPaymentRecordPayTotal()) != 0) {
			boolean bAfterFiveMins = false;
			DateTime oNow = AppGlobal.getCurrentTime(false);
			if((oNow.getMillis() - oFuncCheck.getCloseLocTime().getMillis()) > (5*60*1000))
				bAfterFiveMins = true;
			
			if(!bAfterFiveMins) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("check_is_not_saved_completely") + ", "
						+ AppGlobal.g_oLang.get()._("please_try_again_later"));
				return null;
			}else
				AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
						AppGlobal.g_oFuncUser.get().getUserId() + "", "Release payment - Payment total not same with check total (allowed after 5 mins of close check)");
		}
		
		// Not allow to release payment: pms interface - Aspen PMS
		if(AppGlobal.g_oFuncStation.get().isPartialPayment()){
			for(PosCheckPayment oCheckPayment :oFuncCheck.getCheckPaymentList()){
				if(oCheckPayment.havePmsPayment()) {
					PosPaymentMethod oPaymentMethod = m_oFuncPayment.getPaymentMethodList().getPaymentMethodList().get(oCheckPayment.getPaymentMethodId());
					PosInterfaceConfig oPosInterfaceConfig = oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_PMS).get(0);
					if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ASPEN_PMS)){
						showWarningDialogBox(AppGlobal.g_oLang.get()._("partial_payment_is_not_supported"));
						return null;
					}
				}
			}
		}
		
		// Check whether have CRM item voucher attached
		if (bVoidCheckAfterward && !oFuncCheck.getCheckExtraInfoValueListBySectionVariable(
				PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_NRIC_NUMBER).isEmpty()) {
			for (FuncCheckParty oFuncCheckParty : oFuncCheck.getCheckPartyList()) {
				for (List<FuncCheckItem> oItemListForSingleSeat : oFuncCheckParty.getWholeItemList()) {
					for (FuncCheckItem oCheckItem : oItemListForSingleSeat) {
						List<PosCheckDiscount> oCurrentDiscountList = oCheckItem.getItemDiscountList();
						for (PosCheckDiscount oPosCheckDiscount : oCurrentDiscountList) {
							PosCheckExtraInfo oExtraInfo = oPosCheckDiscount.getExtraInfoFromList(
									PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE,
									PosCheckExtraInfo.VARIABLE_VOUCHER_NUMBER, 0);
							if (oExtraInfo != null && oExtraInfo.getValue() != null) {
								showErrorDialogBox(AppGlobal.g_oLang.get()._("member_is_attached"));
								return null;
							}
						}
					}
				}
			}
		}
		
		// Check if there is Octopus payment
		// If yes, cannot release payment
		if (oFuncCheck.hasOctopusPayment()) {
			// There is Octopus payment
			showErrorDialogBox(AppGlobal.g_oLang.get()._("octopus_payment_cannot_be_voided"));
			return null;
		}
		
		// Check if there is Rewrite Card payment
		// If yes, cannot release payment but allow void paid check
		if (oFuncCheck.hasRewriteCardPayment() && !bVoidCheckAfterward) {
			// There is Rewrite Card payment
			showErrorDialogBox(AppGlobal.g_oLang.get()._("rewrite_card_payment_cannot_be_voided"));
			return null;
		}
		
		FormPaymentDetail oFormPaymentDetail = new FormPaymentDetail(this);
		oFormPaymentDetail.initWithFuncCheck(oFuncCheck, null, sFunctionKey);
		if (bVoidCheckAfterward)
			oFormPaymentDetail.setTitle(AppGlobal.g_oLang.get()._("void_paid_check"));
		else
			oFormPaymentDetail.setTitle(AppGlobal.g_oLang.get()._("release_payment"));
		oFormPaymentDetail.show();
		
		if (oFormPaymentDetail.confirmRelease() == false)
			return null;
		
		if (oFuncCheck.isInUsedByOthers()) {
			// Check is used by others
			showErrorDialogBox(oFuncCheck.getLastErrorMessage());
			return null;
		}
		
		if(bVoidCheckAfterward || !AppGlobal.g_oFuncStation.get().isPartialPayment()) {
			if(!oFuncCheck.checkNegativeGalaxyPayment(-1)) {
				showErrorDialogBox(oFuncCheck.getLastErrorMessage());
				return null;
			}
		}
		
		if (oFuncCheck.lockCheck() == false)
			return null;
		
		String sTableNo = oFuncCheck.getTableNo();
		String sTableExtension = oFuncCheck.getTableExtension();
		while (true) {
			FuncCheck oTmpFuncCheck = new FuncCheck();
			boolean bValidTable = true;
			PosOutletTable oPosOutletTable = getTargetOutletTable(sTableNo, sTableExtension);
			if(oPosOutletTable != null && oPosOutletTable.isCleaningTable())
				bValidTable = false;
			
			if (oTmpFuncCheck.isTableOccupied(AppGlobal.g_oFuncOutlet.get().getOutletId(), sTableNo,
					sTableExtension) == false && bValidTable)
				break;
			
			// Table is occupied, ask table to release payment
			FormAskTable oFormAskTable = new FormAskTable(this);
			oFormAskTable.init(0, true, AppGlobal.g_oFuncOutlet.get().getOutletId());
			oFormAskTable.setTitle(AppGlobal.g_oLang.get()._("table") + " "
					+ AppGlobal.g_oFuncOutlet.get().getTableName(sTableNo,
					sTableExtension)[AppGlobal.g_oCurrentLangIndex.get() - 1]
					+ " " + AppGlobal.g_oLang.get()._("is_occupied_please_select_other_table"));
			oFormAskTable.show();
			
			if (oFormAskTable.isCanelClick()) {
				oFuncCheck.unlockCheck();
				return null;
			}
			
			sTableNo = oFormAskTable.getTableNo() + "";
			sTableExtension = oFormAskTable.getTableExtension();
		}
		
		String sOrderingMode;
		if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food))
			sOrderingMode = PosCheck.ORDERING_MODE_FAST_FOOD;
		else if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk))
			sOrderingMode = PosCheck.ORDERING_MODE_SELF_ORDER_KIOSK;
		else if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.stock_delivery))
			sOrderingMode = PosCheck.ORDERING_MODE_DELIVERY;
		else if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab))
			sOrderingMode = PosCheck.ORDERING_MODE_BAR_TAB;
		else
			sOrderingMode = PosCheck.ORDERING_MODE_FINE_DINING;
		
		// lock table
		if (oFuncCheck.lockTable(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
				AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(), sTableNo,
				sTableExtension, true, false, sOrderingMode, "", false) == true) {
			// Ask for void code
			PosVoidReason oVoidReason;
			if (bVoidCheckAfterward)
				oVoidReason = this.callVoidReasonLookup(AppGlobal.g_oLang.get()._("void_reason"),
						AppGlobal.g_oLang.get()._("please_select_the_void_paid_check_reason"),
						PosVoidReason.TYPE_VOID_CHECK);
			else
				oVoidReason = this.callVoidReasonLookup(AppGlobal.g_oLang.get()._("void_reason"),
						AppGlobal.g_oLang.get()._("please_select_the_release_payment_reason"),
						PosVoidReason.TYPE_VOID_PAYMENT);
			if (oVoidReason == null) {
				oFuncCheck.unlockTable(true, false);
				if (oFuncCheck.getCheckId().equals(""))
					oFuncCheck.setCheckIdForOldCheckAfterLockTableAndCancelAction(sCheckId);
				oFuncCheck.unlockCheck();
				return null;
			}
			
			boolean bReleaseSuccess = false;
			boolean bVoidPayment = false;
			if (bVoidCheckAfterward || AppGlobal.g_oFuncStation.get().isPartialPaymentVoidAllPayment())
				bVoidPayment = true;
			else
				bVoidPayment = !AppGlobal.g_oFuncStation.get().isPartialPayment();
			
			// release payment
			if (oFuncCheck.releasePayment(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
					AppGlobal.g_oFuncOutlet.get().getOutletId(), sCheckPrefixNum,
					Integer.parseInt(sTableNo), sTableExtension, false,
					m_oFuncPayment.getPaymentMethodList(), oVoidReason, bVoidPayment, -1) == false) {
				// Fail to release payment
				sErrMsg = oFuncCheck.getLastErrorMessage();
				if (sErrMsg != null && !sErrMsg.isEmpty())
					showErrorDialogBox(sErrMsg);
				
				// Fail
				bReleaseSuccess = false;
			} else {
				// show warning
				String sWarningMsg = oFuncCheck.getLastWarningMessage();
				if (!sWarningMsg.isEmpty()) {
					showWarningDialogBox(sWarningMsg);
				}
				
				if (oFuncCheck.hasMember()) {
					// Update member spending
					updateMemberSpending(oFuncCheck.getMemberId(),
							oFuncCheck.getCheckTotal().multiply(new BigDecimal("-1.0")));
				}
				
				// Release payment successfully
				if (bVoidCheckAfterward == false) {
					showDialogBox(AppGlobal.g_oLang.get()._("message"), AppGlobal.g_oLang.get()._("payment_is_released"));
					
					// Open the check if fast food mode
					if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food)
							|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk)
							|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab)) {
						
						m_sTableNoForFastFoodMode = oFuncCheck.getTableNo();
						m_sTableExtensionForFastFoodMode = oFuncCheck.getTableExtension();
					}
				}
				
				// Success
				bReleaseSuccess = true;
			}
			
			if (bVoidCheckAfterward == false) {
				if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food) == false
						&& m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk) == false
						&& m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab) == false) {
					// update floor plan status
					
					this.updateTableFloorPlanTimer(true);
					updateTableFloorPlanTableStatus(false);
				}
			}
			
			// unlock table and check after release payment
			oFuncCheck.unlockTable(true, false);
			oFuncCheck.unlockCheck();
			
			// Void success and
			if (bReleaseSuccess)
				return oFuncCheck;
			else
				return null;
		} else {
			// Error
			showErrorDialogBox(oFuncCheck.getLastErrorMessage());
			oFuncCheck.unlockCheck();
			
			return null;
		}
	}
	
	private void voidPayment(HashMap<String, String> oFunctionParam) {
		if(!AppGlobal.g_oFuncStation.get().isPartialPayment() || m_oFrameOrderingPanel.getVisible()) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("partial_payment_is_not_supported")
					+ System.lineSeparator() + AppGlobal.g_oLang.get()._("cannot_perform_this_function_at_this_mode"));
			return;
		}
		
		String sFunctionName = m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.void_payment.name()).getName(AppGlobal.g_oCurrentLangIndex.get());
		String sTableNo = "";
		String sTableExtension = "";
		FuncCheck oFuncCheck = new FuncCheck();
		oFuncCheck.addListener(this);
		
		if (oFunctionParam != null && oFunctionParam.containsKey("tableNo")) {
			sTableNo = oFunctionParam.get("tableNo");
			sTableExtension = oFunctionParam.get("tableExtension");
		} else {
			// Ask table no.
			FormAskTable oFormAskTable = new FormAskTable(this);
			oFormAskTable.init(0, true, AppGlobal.g_oFuncOutlet.get().getOutletId());
			oFormAskTable.setTitle(sFunctionName);
			oFormAskTable.show();
			
			if (oFormAskTable.isCanelClick())
				return;
			
			sTableNo = oFormAskTable.getTableNo() + "";
			sTableExtension = oFormAskTable.getTableExtension();
		}
		
		// No outlet table record of inputted table no.
		PosOutletTable oOutletTable = new PosOutletTable();
		oOutletTable.readByOutletIdTable(AppGlobal.g_oFuncOutlet.get().getOutletId(), Integer.parseInt(sTableNo),
				sTableExtension);
		// support "0" table number , check empty extension only
		if (oOutletTable.getOtblId().equals("")
				&& (oOutletTable.getTableExtension() == null || oOutletTable.getTableExtension().equals(""))) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("this_table_has_not_opened"));
			return;
		}
		
		// Wait for previous check processing finish
		waitForProcessCheckFinish(sTableNo, sTableExtension);
		
		// Init business date setup
		oFuncCheck.initBusinessDaySetup(AppGlobal.g_oFuncOutlet.get());
		
		if (loadCheckByTableNum(oFuncCheck, sTableNo, sTableExtension) == false) {
			showErrorDialogBox(oFuncCheck.getLastErrorMessage());
			oFuncCheck.unlockCheck();
			return;
		}
		
		String sErrMsg = "";
		if (oFuncCheck.getCheckPaymentList().isEmpty())
			sErrMsg = AppGlobal.g_oLang.get()._("no_payments_exist");
		else if (oFuncCheck.isPaid(false))
			sErrMsg = AppGlobal.g_oLang.get()._("check_is_already_paid");
		
		if (!sErrMsg.isEmpty()) {
			showErrorDialogBox(sErrMsg);
			oFuncCheck.unlockTable(true, false);
			return;
		}
		
		FormPaymentDetail oFormPaymentDetail = new FormPaymentDetail(this);
		oFormPaymentDetail.initWithFuncCheck(oFuncCheck, m_oFuncPayment.getPaymentMethodList(), AppGlobal.FUNC_LIST.void_payment.name());
		oFormPaymentDetail.setTitle(sFunctionName);
		oFormPaymentDetail.show();
		
		if (oFormPaymentDetail.confirmRelease() == false) {
			oFuncCheck.unlockTable(true, false);
			return;
		}
		
		int iSelectedPaymentIndex = oFormPaymentDetail.getSelectedPaymentIndex();
		
		String sSelectedPaymentId = "";
		if (oFuncCheck.getCheckPaymentList().size() > iSelectedPaymentIndex)
			sSelectedPaymentId = oFuncCheck.getCheckPaymentList().get(iSelectedPaymentIndex).getCpayId();
		// Check if have dummy payment
		int iDummyPaymentIndex = oFuncCheck.getDummyPaymentIndex();
		
		if (iDummyPaymentIndex == -1 || iSelectedPaymentIndex == iDummyPaymentIndex)
			voidSelectedPayment(oFuncCheck, iSelectedPaymentIndex, false, false);
		else {
			voidSelectedPayment(oFuncCheck, iDummyPaymentIndex, false, false);
			// Update original selected payment
			if (iSelectedPaymentIndex > iDummyPaymentIndex)
				iSelectedPaymentIndex = oFuncCheck.getPaymentIndexByPaymentId(sSelectedPaymentId);
			if (iSelectedPaymentIndex > -1)
				voidSelectedPayment(oFuncCheck, iSelectedPaymentIndex, false, true);
		}
		return;
	}
	
	// Print serving list
	private void printServingList() {
		String sUrl = "";
		int iServingCheckPrtqId = 0;
		int iServingListPrtFmtId = 0;
		
		if (notAllowNewCheck())
			return;
		
		// if check items are modified, cannot print serving list
		if (m_oFuncCheck.hasNewItem(false)) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_print_serving_list_with_new_items"));
			return;
		}
		
		// get serving check format id
		iServingListPrtFmtId = AppGlobal.g_oFuncStation.get().getStation().getServingCheckPfmtId();
		if (iServingListPrtFmtId == 0 && AppGlobal.g_oFuncOutlet.get().getServingCheckPfmtId() == 0) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("no_print_format_is_defined"));
			return;
		} else if (iServingListPrtFmtId == 0)
			iServingListPrtFmtId = AppGlobal.g_oFuncOutlet.get().getServingCheckPfmtId();
		
		// get print queue id
		iServingCheckPrtqId = AppGlobal.g_oFuncStation.get().getStation().getCheckPrtqId();
		if (iServingCheckPrtqId == 0) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("no_print_queue_is_defined"));
			return;
		}
		
		sUrl = m_oFuncCheck.printServingList(iServingCheckPrtqId, iServingListPrtFmtId);
		if (sUrl.length() == 0) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("fail_to_create_serving_list"));
			return;
		}
		
		// Add log to action log list
		AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.print_serving_list.name(),
				PosActionLog.ACTION_RESULT_SUCCESS, m_oFuncCheck.getTableNoWithExtensionForDisplay(),
				AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
				AppGlobal.g_oFuncOutlet.get().getOutletId(), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
				AppGlobal.g_oFuncStation.get().getStationId(), m_oFuncCheck.getCheckId(), "", "", "", "",
				"PrtqId:" + iServingCheckPrtqId + ",PrtFmtId:" + iServingListPrtFmtId);
		// handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
	}
	
	private void updateTableFloorPlanTableStatus(boolean bForceUpdate) {
		try {
			DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
			
			if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode)
					|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode))
				return;
			
			boolean bNeedUpdateTableStatusToClient = bForceUpdate;
			PosOutletTableList oCurrentOutletTableList = null;
			synchronized (this) {
				String sOutletTableListKey = AppBackgroundScheduleJob.TYPE_UPDATE_TABLE_STATUS + "_"
						+ AppGlobal.g_oFuncOutlet.get().getOutletId();
				
				long lCurrTime = System.currentTimeMillis();
				if (AppGlobal.g_oScheduledJobList.containsKey(sOutletTableListKey)
						&& !AppGlobal.g_oScheduledJobList.get(sOutletTableListKey).isStop()
						&& AppGlobal.g_oScheduledJobList.get(sOutletTableListKey).getNeedUpdate()
						&& (lCurrTime - AppGlobal.g_oScheduledJobList.get(sOutletTableListKey).getLastHandleTimeInMillis()) > 2000) {
					
					AppGlobal.g_oScheduledJobList.get(sOutletTableListKey).setNeedUpdate(false);
					
					PosOutletTableList oPosOutletTableList = new PosOutletTableList();
					boolean bEnquiryResult = false;
					
					if (AppGlobal.g_oScheduledJobList.get(sOutletTableListKey).getLastUpdate().isEmpty())
						bEnquiryResult = oPosOutletTableList
								.getActiveOutletTableList(AppGlobal.g_oFuncOutlet.get().getOutletId());
					else
						bEnquiryResult = oPosOutletTableList.getActiveOutletTableListWithModified(
								AppGlobal.g_oFuncOutlet.get().getOutletId(),
								m_oFrameTableFloorPlan.getLastUpdateTime());
					if (bEnquiryResult)
						AppGlobal.setOutletTableList(AppGlobal.g_oFuncOutlet.get().getOutletId(), oPosOutletTableList);
					else
						AppGlobal.g_oScheduledJobList.get(sOutletTableListKey).setNeedUpdate(true); // set the update of outlet list to true as the result is fail
				}
				
				oCurrentOutletTableList = AppGlobal.getOutletTableList(AppGlobal.g_oFuncOutlet.get().getOutletId());
				
				// Check if need to update current station (current thread)
				// table floor plan UI
				if (oCurrentOutletTableList != null && (m_oOriginalPosOutletTableList == null
						|| m_oOriginalPosOutletTableList.hashCode() != oCurrentOutletTableList.hashCode())) {
					// Need update the table status to client
					bNeedUpdateTableStatusToClient = true;
					m_oOriginalPosOutletTableList = oCurrentOutletTableList;
				}
			}
			
			if(oCurrentOutletTableList != null) {
				//Check whether setup of cooking time is on or not
				JSONObject oTempJSONObject = AppGlobal.g_oFuncStation.get().getTableFloorPlanSetting();
				if(oTempJSONObject != null && oTempJSONObject.optString("support_cooking_overtime").equals("y")) {
					synchronized (AppGlobal.g_oOverCookingTimeTableList) {
						if(AppGlobal.g_oOverCookingTimeTableList.containsKey(AppGlobal.g_oFuncOutlet.get().getOutletId())) {
							for(Entry<String, DateTime> entry: AppGlobal.g_oOverCookingTimeTableList.get(AppGlobal.g_oFuncOutlet.get().getOutletId()).entrySet() ){
								String sCookingTimeTable = entry.getKey();
								DateTime oEarliestFinishTime = entry.getValue();
								DateTime oCurrentTime = AppGlobal.getCurrentTime(false);
								
								//Check whether the table is over cooking
								if(!oCurrentTime.isAfter(oEarliestFinishTime))
									continue;
								
								for (Map.Entry<PosOutletTable, PosCheck> posOutletTableEntry : oCurrentOutletTableList.getOutletTableList().entrySet()) {
									PosOutletTable oPosOutletTable = posOutletTableEntry.getKey();
									
									String sPosOutletTableKey = "";
									if(oPosOutletTable.getTableExtension().isEmpty())
										sPosOutletTableKey = Integer.toString(oPosOutletTable.getTable());
									else if(oPosOutletTable.getTable() == 0 && !oPosOutletTable.getTableExtension().isEmpty())
										sPosOutletTableKey = "0_" + oPosOutletTable.getTableExtension();
									else
										sPosOutletTableKey = Integer.toString(oPosOutletTable.getTable()) + "_" + oPosOutletTable.getTableExtension();
									
									//Set the status as over cooking
									if(sCookingTimeTable.equals(sPosOutletTableKey) && !oPosOutletTable.isNewTable() && !oPosOutletTable.isVacant()) {
										oPosOutletTable.setStatus(PosOutletTable.STATUS_COOKING_OVERTIME);
										bNeedUpdateTableStatusToClient = true;
										break;
									}
								}
							}
						}
					}
				}
				
				if(bNeedUpdateTableStatusToClient) {
					// If update table status in a batch, skip the re-sequence of
					// table mode tables first
					// Do re-sequence after finish update table status
					m_oFrameTableFloorPlan.updateTableModeStatusPreProcess();
					
					// Update stored table status list
					for (Map.Entry<PosOutletTable, PosCheck> entry : oCurrentOutletTableList.getOutletTableList().entrySet()) {
						PosOutletTable oPosOutletTable = entry.getKey();
						PosCheck oPosCheck = entry.getValue();
						String sKey = oPosOutletTable.getTable() + "_" + oPosOutletTable.getTableExtension();
						ClsTableStatus oTableStatus = new ClsTableStatus();
						
						oTableStatus.setPosOutletTable(oPosOutletTable);
						oTableStatus.setPosCheck(oPosCheck);
						oTableStatus.setTableExtensionCount(0);
						// Turn on update flag
						oTableStatus.setNeedUpdate(true);
						m_oTableStatusList.put(sKey, oTableStatus);
						
						// Check if the master table is existing or not
						String sMasterTableKey = oPosOutletTable.getTable() + "_";
						if (!m_oTableStatusList.containsKey(sMasterTableKey)) {
							// Table not found, add the master table to the table
							// status list
							ClsTableStatus oMasterTableStatus = new ClsTableStatus();
							PosOutletTable oMasterTableOutletTable = new PosOutletTable();
							oMasterTableOutletTable.setTable(oPosOutletTable.getTable());
							oMasterTableOutletTable.setStatus(PosOutletTable.STATUS_VACANT);
							oMasterTableStatus.setPosOutletTable(oMasterTableOutletTable);
							oMasterTableStatus.setPosCheck(null);
							oMasterTableStatus.setTableExtensionCount(0);
							// Turn on update flag
							oMasterTableStatus.setNeedUpdate(true);
							m_oTableStatusList.put(sMasterTableKey, oMasterTableStatus);
						}
					}
					
					// Update table extension count
					for (Map.Entry<String, ClsTableStatus> entry : m_oTableStatusList.entrySet()) {
						ClsTableStatus oChildTableStatus = entry.getValue();
						PosOutletTable oChildPosOutletTable = oChildTableStatus.getPosOutletTable();
						if (oChildPosOutletTable.getTableExtension().isEmpty() == false) {
							// Child table
							// Update master table extension count
							String sMasterTableKey = oChildPosOutletTable.getTable() + "_";
							if (m_oTableStatusList.containsKey(sMasterTableKey)) {
								ClsTableStatus oMasterTableStatus = m_oTableStatusList.get(sMasterTableKey);
								if (oChildPosOutletTable.isOccupied() || oChildPosOutletTable.isCheckPrinted() || oChildPosOutletTable.isCookingOvertimeTable()) {
									int iTableExtensionCount = oMasterTableStatus.getTableExtensionCount();
									iTableExtensionCount++;
									oMasterTableStatus.setTableExtensionCount(iTableExtensionCount);
								}
								// Turn on update flag if child is new updated
								if (oChildTableStatus.getNeedUpdate())
									oMasterTableStatus.setNeedUpdate(true);
							}
						} else {
							// Init the table extension
							oChildTableStatus.setTableExtensionCount(0);
						}
					}
					
					// Prepare screen
					// Update table status (color) first
					for (Map.Entry<String, ClsTableStatus> entry : m_oTableStatusList.entrySet()) {
						ClsTableStatus oTableStatus = entry.getValue();
						if(oTableStatus.getPosOutletTable().isCookingOvertimeTable())
							oTableStatus.setNeedUpdate(true);
						
						if (oTableStatus.getNeedUpdate() == false)
							continue;
						
						PosOutletTable oPosOutletTable = oTableStatus.getPosOutletTable();
						int iTableExtensionCount = oTableStatus.getTableExtensionCount();
						
						m_oFrameTableFloorPlan.updateTableStatus(oPosOutletTable.getTable(),
								oPosOutletTable.getTableExtension(), oPosOutletTable.getTag(), oPosOutletTable.getStatus(),
								oPosOutletTable.getStationId(), iTableExtensionCount);
					}
					
					// Do re-sequence after finish update table status
					m_oFrameTableFloorPlan.updateTableModeStatusPostProcess();
					
					// Update the table detail after finish all status update
					// *** CANNOT do in same for loop
					for (Map.Entry<String, ClsTableStatus> entry : m_oTableStatusList.entrySet()) {
						ClsTableStatus oTableStatus = entry.getValue();
						if (oTableStatus.getNeedUpdate() == false)
							continue;
						
						// Turn off update flag
						oTableStatus.setNeedUpdate(false);
						
						PosOutletTable oPosOutletTable = oTableStatus.getPosOutletTable();
						PosCheck oPosCheck = oTableStatus.getPosCheck();
						
						if (oPosCheck != null) {
							String split[] = formatter.print(oPosCheck.getOpenLocTime()).split(" ");
							String sMemNo = "";
							String sMemName = "";
							String sMemLastName = "";
							String sAccountName = "";
							
							String sMemberCode = "";
							String sInterfaceId = "";
							HashMap<Integer, String> oMemberInfo = new HashMap<>();
							
							String[] sCheckOwnerName = StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, "");
							String[] sFirstName = StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, "");
							String[] sLastName = StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, "");
							LinkedHashMap<String, String> oCheckInfoList = new LinkedHashMap<String, String>();
							oCheckInfoList.put(FrameTableButton.STATUS_CHECK_INFO_ONE, "");
							oCheckInfoList.put(FrameTableButton.STATUS_CHECK_INFO_TWO, "");
							oCheckInfoList.put(FrameTableButton.STATUS_CHECK_INFO_THREE, "");
							oCheckInfoList.put(FrameTableButton.STATUS_CHECK_INFO_FOUR, "");
							oCheckInfoList.put(FrameTableButton.STATUS_CHECK_INFO_FIVE, "");
							int iUserId = oPosCheck.getCheckOwnerUserId();
							if(oPosCheck.getCheckOwnerUserId() != 0){
								sFirstName = m_oAllUserList.get(iUserId).getFirstName();
								sLastName = m_oAllUserList.get(iUserId).getLastName();
								sCheckOwnerName = StringLib.appendStringArray(sFirstName, " ", sLastName);
							}
							
							// get member number and member name from online member interface
							if(oPosCheck.getMemberId() == 0) {
								for (PosCheckExtraInfo oCheckExtraInfo : oPosCheck.getCheckExtraInfoArrayList()) {
									if (oCheckExtraInfo.getSection().equals(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE)) {
										if (oCheckExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_ACCOUNT_NUMBER) || oCheckExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER))
											sMemNo = getTableDetailFromExtraInfo(oCheckExtraInfo);
										
										if (oCheckExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_ACCOUNT_NAME))
											sAccountName = getTableDetailFromExtraInfo(oCheckExtraInfo);
										
										if (oCheckExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_MEMBER_LAST_NAME))
											sMemLastName = getTableDetailFromExtraInfo(oCheckExtraInfo);
										
										if (oCheckExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_MEMBER_NAME))
											sMemName = getTableDetailFromExtraInfo(oCheckExtraInfo);
										
										// Display 2700 member info 2 in card view if extra info contain member_code
										if (oCheckExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_MEMBER_CODE))
											sMemberCode = getTableDetailFromExtraInfo(oCheckExtraInfo);
										
										if (oCheckExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_INTERFACE_ID))
											sInterfaceId = getTableDetailFromExtraInfo(oCheckExtraInfo);
										
										if(oCheckExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_MEMBER_INFO))
											oMemberInfo.put(oCheckExtraInfo.getIndex(), oCheckExtraInfo.getValue());
									}
								}
							}
							
							int iCheckInfoCount = 0;
							//oPosCheck.getCheck
							for (PosCheckExtraInfo oCheckExtraInfo : oPosCheck.getCheckExtraInfoArrayList()) {
								if(oCheckExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_CHECK_INFO)){
									iCheckInfoCount++;
									if(iCheckInfoCount > 5)
										break;
									if(oCheckExtraInfo.getIndex() == 1)
										oCheckInfoList.put(FrameTableButton.STATUS_CHECK_INFO_ONE, oCheckExtraInfo.getValue());
									if(oCheckExtraInfo.getIndex() == 2)
										oCheckInfoList.put(FrameTableButton.STATUS_CHECK_INFO_TWO, oCheckExtraInfo.getValue());
									if(oCheckExtraInfo.getIndex() == 3)
										oCheckInfoList.put(FrameTableButton.STATUS_CHECK_INFO_THREE, oCheckExtraInfo.getValue());
									if(oCheckExtraInfo.getIndex() == 4)
										oCheckInfoList.put(FrameTableButton.STATUS_CHECK_INFO_FOUR, oCheckExtraInfo.getValue());
									if(oCheckExtraInfo.getIndex() == 5)
										oCheckInfoList.put(FrameTableButton.STATUS_CHECK_INFO_FIVE, oCheckExtraInfo.getValue());
								}
							}
							
							if (!sMemberCode.isEmpty()) {
								PosInterfaceConfig oPosInterfaceConfig = AppGlobal.getPosInterfaceConfigById(Integer.valueOf(sInterfaceId));
								if(oPosInterfaceConfig != null
										&& oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_2700)
										&& oPosInterfaceConfig.getInterfaceConfig() != null
										&& oPosInterfaceConfig.getInterfaceConfig().has("general_setup")
										&& oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").has("display_in_table_button")
										&& oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").optJSONObject("display_in_table_button").optString("value").equals("member_no")) {
									int iMemberNumberIndex = 0;
									if(oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").has("member_info_index")) {
										iMemberNumberIndex = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").optJSONObject("member_info_index").optInt("value");
										if(iMemberNumberIndex != 0 && oMemberInfo.containsKey(iMemberNumberIndex) && !oMemberInfo.get(iMemberNumberIndex).isEmpty())
											sMemNo = oMemberInfo.get(iMemberNumberIndex);
									}else
										sMemNo = sMemberCode;
								}
							}
							if(!sMemLastName.isEmpty())
								sMemName = sMemLastName;
							
							if(sMemName.isEmpty())
								sMemName = sAccountName;
							
							String sCurrencySign = "$";
							if(!AppGlobal.g_oFuncOutlet.get().getCurrencySign().isEmpty())
								sCurrencySign = AppGlobal.g_oFuncOutlet.get().getCurrencySign();
							m_oFrameTableFloorPlan.updateTableDetails(oPosOutletTable.getTable(), oPosOutletTable.getTableExtension(), split[1].substring(0, 5), Integer.toString(oPosCheck.getGuests()), sCurrencySign+AppGlobal.g_oFuncOutlet.get().roundCheckAmountToString(oPosCheck.getCheckTotal()), sMemNo, sMemName, sCheckOwnerName, oCheckInfoList);
						} else
							m_oFrameTableFloorPlan.clearTableDetails(oPosOutletTable.getTable(),
									oPosOutletTable.getTableExtension());
					}
				}
			}
		} catch (Exception e) {
			AppGlobal.stack2Log(e);
		}
	}
	
	private String getTableDetailFromExtraInfo(PosCheckExtraInfo oCheckExtraInfo) {
		String sValue = oCheckExtraInfo.getValue();
		if (sValue == null)
			sValue = "";
		else if (sValue.length() > 20)
			sValue = sValue.substring(0, 20);
		return sValue;
	}
	
	private void instantUpdateTableFloorPlanTableStatus(String sTableNo, String sTableExtension, String sStatus) {
		int iTableExtensionCount = 0;
		
		try {
			// Master table
			String sMasterTableKey = sTableNo + "_";
			if (m_oTableStatusList.containsKey(sMasterTableKey)) {
				// Get table extension count
				ClsTableStatus oMasterTableStatus = m_oTableStatusList.get(sMasterTableKey);
				iTableExtensionCount = oMasterTableStatus.getTableExtensionCount();
			}
			
			// Add a temporary table status if not found
			String sKey = sTableNo + "_" + sTableExtension;
			if (m_oTableStatusList.containsKey(sKey) == false) {
				ClsTableStatus oTableStatus = new ClsTableStatus();
				PosOutletTable oPosOutletTable = new PosOutletTable();
				oPosOutletTable.setStatus(sStatus);
				oTableStatus.setPosOutletTable(oPosOutletTable);
				m_oTableStatusList.put(sKey, oTableStatus);
			} else {
				ClsTableStatus oTableStatus = m_oTableStatusList.get(sTableNo + "_" + sTableExtension);
				PosOutletTable oPosOutletTable = oTableStatus.getPosOutletTable();
				oPosOutletTable.setStatus(sStatus);
			}
			
			if (sTableExtension.isEmpty() == false) {
				// Child table
				String sChildTableKey = sTableNo + "_" + sTableExtension;
				if (m_oTableStatusList.containsKey(sChildTableKey) == false) {
					// No this child table before
					iTableExtensionCount++;
				}
			}
			
			m_oFrameTableFloorPlan.updateTableStatus(Integer.parseInt(sTableNo), sTableExtension, "", sStatus, 0,
					iTableExtensionCount);
			if (sStatus.equals(PosOutletTable.STATUS_NEW_TABLE)) // Clear
				// information
				m_oFrameTableFloorPlan.clearTableDetails(Integer.parseInt(sTableNo), sTableExtension);
		} catch (Exception e) {
			AppGlobal.stack2Log(e);
		}
	}
	
	private int duplicateModifier(FuncCheckItem oFuncCheckItem, int iModifierId, AtomicInteger iPos) {
		boolean bNoDuplicate = true;
		int iChoice = 0;
		for (int i = 0; i < oFuncCheckItem.getModifierList().size(); i++) {
			FuncCheckItem oModifierItem = oFuncCheckItem.getModifierList().get(i);
			if (oModifierItem.getCheckItem().getItemId() == iModifierId) { // Found
				// duplicate
				// modifier
				bNoDuplicate = false;
				iPos.set(i);
				
				ArrayList<String> oOptionList = new ArrayList<String>();
				oOptionList.add(AppGlobal.g_oLang.get()._("duplicate"));
				oOptionList.add(AppGlobal.g_oLang.get()._("delete"));
				
				FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
				oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select_the_action_type"),
						oOptionList, false);
				oFormSelectionBox.show();
				if (oFormSelectionBox.isUserCancel()) {
					iChoice = 2;
				} else {
					ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
					iChoice = oSelectionBoxResult.get(0);
				}
				
				break;
			}
		}
		
		if (bNoDuplicate)
			iChoice = 0;
		
		return iChoice;
	}
	
	// Item Modifier
	private void itemModifier(int iSeatNo, int iItemIndex) {
		List<MenuMenu> oModifierMenuList = null;
		List<FuncCheckItem> oSelectedSectionList = m_oFuncCheck.getItemList(iSeatNo);
		FuncCheckItem oFuncCheckItem = null;
		
		if (oSelectedSectionList.isEmpty()) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("no_item_ordered"));
			return;
		}
		
		oFuncCheckItem = m_oFuncCheck.getCheckItem(iSeatNo, iItemIndex);
		
		if (oFuncCheckItem.isOldItem()) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_apply_on_old_item"));
			return;
		}
		
		if (oFuncCheckItem.hasModifierSetup() == false) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("no_modifiers_list_is_defined"));
			return;
		}
		
		oModifierMenuList = oFuncCheckItem.getModifierMenuList();
		callModifierLookup(oFuncCheckItem, oModifierMenuList, iSeatNo, iItemIndex, true);
	}
	
	// Call Discount lookup
	private void callDiscountLookup(int iSectionId, int iItemIndex, String sDiscountType) {
		String sErrMsg = "";
		List<HashMap<String, Object>> oLookupArray = new ArrayList<HashMap<String, Object>>();
		List<FuncLookupButtonInfo> oContentLookupList = new ArrayList<FuncLookupButtonInfo>();
		List<HashMap<String, Integer>> oSelectedItemList = new ArrayList<HashMap<String, Integer>>();
		HashMap<String, Object> oLookupData = new HashMap<String, Object>();
		
		DateTimeFormatter dateFormat = DateTimeFormat.forPattern("yyyy-MM-dd");
		FuncCheckItem oParentFuncCheckItem = m_oFuncCheck.getCheckItem(iSectionId, iItemIndex);
		
		if (oParentFuncCheckItem == null) {
			// If no item is selected, select the last item
			iSectionId = m_oFrameOrderingBasket.getSelectedSectionId();
			iItemIndex = m_oFuncCheck.getItemListCount(iSectionId) - 1;
			oParentFuncCheckItem = m_oFuncCheck.getCheckItem(iSectionId, iItemIndex);
		}
		if (oParentFuncCheckItem == null) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("no_item_ordered"));
			return;
		}
		PosBusinessDay oBusinessDay = AppGlobal.g_oFuncOutlet.get().getBusinessDay();
		PosDiscountTypeList oDiscTypeList = new PosDiscountTypeList();
		
		HashMap<String, Integer> oSelectedItem = new HashMap<String, Integer>();
		oSelectedItem.put("partySeq", m_oFuncCheck.getCurrentCheckPartySeq());
		oSelectedItem.put("sectionId", iSectionId);
		oSelectedItem.put("itemIndex", iItemIndex);
		oSelectedItemList.add(oSelectedItem);
		
		if (sDiscountType.equals("item")
				&& oParentFuncCheckItem.getCheckItem().getTotal().compareTo(BigDecimal.ZERO) == 0) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_apply_discount_on_zero_total_item"));
			return;
		}
		
		if (oParentFuncCheckItem.hasItemDiscount(true)) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("item_already_had_discount"));
			return;
		}
		
		// Check if there is restriction on applying multiple discounts
		if (!m_oFuncCheck.checkDiscountApplyRestriction(sDiscountType.equals("check"))) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("discount_had_been_applied_before"));
			return;
		}
		
		// Pre-checking if the item is missing in menu
		if (oParentFuncCheckItem.getMenuItem() == null) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("item_is_missing_in_menu_setup") + " ("
					+ oParentFuncCheckItem.getItemDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get()) + ")");
			return;
		}
		
		oDiscTypeList.readDiscountListByItemDiscAndOutletId(oParentFuncCheckItem.getMenuItem().getDiscountItemGroupId(),
				AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
				AppGlobal.g_oFuncStation.get().getStationId(), dateFormat.print(oBusinessDay.getDate()),
				oBusinessDay.isHoliday(), oBusinessDay.isDayBeforeHoliday(), oBusinessDay.isSpecialDay(),
				oBusinessDay.isDayBeforeSpecialDay(), oBusinessDay.getDayOfWeek(),
				AppGlobal.g_oFuncUser.get().getUserGroupList());
		
		// form the lookup data list
		int iCount = 1;
		for (PosDiscountType oDiscountType : oDiscTypeList.getPosDiscountTypeList()) {
			
			boolean bAbleToClick = true;
			
			// time checking for discount permission control
			boolean bDiscAllowance = AppGlobal.g_oFuncDiscountAclList
					.get(AppGlobal.g_oFuncOutlet.get().getOutletId())
					.checkDiscountAclTime(oParentFuncCheckItem.getMenuItem(), oDiscountType);
			
			if (!oDiscountType.checkDiscountAvailability(sDiscountType) || !bDiscAllowance) {
				if (AppGlobal.g_oFuncStation.get().isResequenceDiscountList())
					continue;
				else
					bAbleToClick = false;
			}
			
			FuncLookupButtonInfo oLookupButtonInfo = new FuncLookupButtonInfo();
			String[] sNameArray = new String[AppGlobal.LANGUAGE_COUNT];
			for (int i = 0; i < AppGlobal.LANGUAGE_COUNT; i++) {
				int iBilingualLangIndex = AppGlobal.g_oFuncOutlet.get().getBilingualLangIndexByeLangIndex(i + 1);
				sNameArray[i] = oDiscountType.getBilingualName(i + 1, iBilingualLangIndex);
			}
			oLookupButtonInfo.setName(sNameArray);
			oLookupButtonInfo.setType(PosDisplayPanelLookup.TYPE_HOT_ITEM);
			oLookupButtonInfo.setId(oDiscountType.getDtypId());
			if(AppGlobal.g_oFuncStation.get().isResequenceDiscountList())
				oLookupButtonInfo.setSeq(iCount);
			else
				oLookupButtonInfo.setSeq(oDiscountType.getSeq());
			if (!bAbleToClick)
				oLookupButtonInfo.setAbleToClick(bAbleToClick);
			oContentLookupList.add(oLookupButtonInfo);
			iCount++;
		}
		
		oLookupData.put(FormCommonLookup.COMMON_LOOKUP_NAME, AppGlobal.g_oLang.get()._("discounts"));
		oLookupData.put(FormCommonLookup.COMMON_LOOKUP_DATA_LIST, oContentLookupList);
		oLookupArray.add(oLookupData);
		
		FormCommonLookup oFormCommonLookup = new FormCommonLookup(this);
		oFormCommonLookup.setLabelTitleBar(AppGlobal.g_oLang.get()._("apply_discount"));
		oFormCommonLookup.setLabelDescBar(AppGlobal.g_oLang.get()._("please_select_the_discount_for") + " "
				+ oParentFuncCheckItem.getItemShortDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get()));
		oFormCommonLookup.setSingleSelection(true);
		oFormCommonLookup.createTabsAndLookupButtons(oLookupArray);
		oFormCommonLookup.show();
		
		if (oFormCommonLookup.getSelectedItems().size() > 0) {
			List<JSONObject> oSelectedDiscTypeList = oFormCommonLookup.getSelectedItems();
			for (JSONObject oDiscountType : oSelectedDiscTypeList) {
				int iDiscTypeId = oDiscountType.optInt(FormCommonLookup.SELECTED_ITEM_ID);
				PosDiscountType oSelectedDiscType = null;
				for (PosDiscountType oDiscType : oDiscTypeList.getPosDiscountTypeList()) {
					if (oDiscType.getDtypId() == iDiscTypeId) {
						oSelectedDiscType = oDiscType;
						break;
					}
				}
				
				String sSelectedDiscTypeName;
				if (oSelectedDiscType.getShortName(AppGlobal.g_oCurrentLangIndex.get()).isEmpty())
					sSelectedDiscTypeName = oSelectedDiscType.getName(AppGlobal.g_oCurrentLangIndex.get());
				else
					sSelectedDiscTypeName = oSelectedDiscType.getShortName(AppGlobal.g_oCurrentLangIndex.get());
				boolean bAskValue = false;
				String sInputBoxTitle = "";
				String sInputBoxMessage = "";
				BigDecimal dDiscountRateAmt = BigDecimal.ZERO;
				
				// check whether need to ask open discount value
				if (sDiscountType.equals("item") && oSelectedDiscType.isFixAmountDiscountPerItemMethod()) {
					if (oSelectedDiscType.getFixAmount().compareTo(BigDecimal.ZERO) == 0) {
						bAskValue = true;
						sInputBoxTitle = AppGlobal.g_oLang.get()._("item_discount") + ": " + sSelectedDiscTypeName;
						sInputBoxMessage = AppGlobal.g_oLang.get()._("please_input_value_with_amount") + ":";
					} else
						dDiscountRateAmt = oSelectedDiscType.getFixAmount();
					
				} else if (sDiscountType.equals("check") && (oSelectedDiscType.isFixAmountDiscountPerCheckMethod()
						|| oSelectedDiscType.isFixAmountDiscountPerItemMethod())) {
					if (oSelectedDiscType.getFixAmount().compareTo(BigDecimal.ZERO) == 0) {
						bAskValue = true;
						sInputBoxTitle = AppGlobal.g_oLang.get()._("check_discount") + ": " + sSelectedDiscTypeName;
						sInputBoxMessage = AppGlobal.g_oLang.get()._("please_input_value_with_amount") + ":";
					} else
						dDiscountRateAmt = oSelectedDiscType.getFixAmount();
					
				} else if (oSelectedDiscType.isPercentageDiscountMethod()) {
					if (oSelectedDiscType.getRate().compareTo(BigDecimal.ZERO) == 0) {
						bAskValue = true;
						if (sDiscountType.equals("item"))
							sInputBoxTitle = AppGlobal.g_oLang.get()._("item_discount") + ": " + sSelectedDiscTypeName;
						else
							sInputBoxTitle = AppGlobal.g_oLang.get()._("check_discount") + ": " + sSelectedDiscTypeName;
						sInputBoxMessage = AppGlobal.g_oLang.get()._("please_input_value_with_percentage") + ":";
					} else
						dDiscountRateAmt = oSelectedDiscType.getRate();
				}
				
				// ask open discount value
				if (bAskValue) {
					// Ask discount value
					FormInputBox oFormInputBox = new FormInputBox(this);
					oFormInputBox.init();
					oFormInputBox.setTitle(sInputBoxTitle);
					oFormInputBox.setMessage(sInputBoxMessage);
					oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DECIMAL);
					oFormInputBox.show();
					
					if (oFormInputBox.isUserCancel())
						return;
					
					BigDecimal dValue = new BigDecimal(oFormInputBox.getInputValue());
					oFormInputBox = null;
					if(oSelectedDiscType.isPercentageDiscountMethod()) {
						while (dValue.compareTo(BigDecimal.ZERO) < 0 || dValue.compareTo(new BigDecimal("100.0")) > 0) {
							showErrorDialogBox(AppGlobal.g_oLang.get()._("invalid_input"));
							
							// Ask discount value again
							FormInputBox oFormDiscountInputBox = new FormInputBox(this);
							oFormDiscountInputBox.init();
							oFormDiscountInputBox.setTitle(sInputBoxTitle);
							oFormDiscountInputBox.setMessage(sInputBoxMessage);
							oFormDiscountInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DECIMAL);
							oFormDiscountInputBox.show();
							
							dValue = new BigDecimal(oFormDiscountInputBox.getInputValue());
							oFormDiscountInputBox = null;
						}
					}
					
					boolean bPassChecking = false;
					if (dValue.compareTo(BigDecimal.ZERO) == 0)
						sErrMsg = AppGlobal.g_oLang.get()._("zero_discount_amount");
					else if(dValue.compareTo(BigDecimal.ZERO) < 0)
						sErrMsg = AppGlobal.g_oLang.get()._("invalid_input");
					else if ((oSelectedDiscType.isFixAmountDiscountPerCheckMethod() || oSelectedDiscType.isFixAmountDiscountPerItemMethod())
							&&  oSelectedDiscType.getDiscountMaxLimit().compareTo(BigDecimal.ZERO) > 0 && oSelectedDiscType.getDiscountMaxLimit().compareTo(dValue) == -1)
						sErrMsg = AppGlobal.g_oLang.get()._("excess_maximum_amount") + " : " + oSelectedDiscType.getDiscountMaxLimit();
					else
						bPassChecking = true;
					if(!bPassChecking) {
						showErrorDialogBox(sErrMsg);
						return;
					}
					
					if (oSelectedDiscType.isUsedForExtraCharge()) {
						if (oSelectedDiscType.isPercentageDiscountMethod())
							dDiscountRateAmt = dValue.divide(new BigDecimal("100.0"));
						else
							dDiscountRateAmt = dValue;
					} else {
						if (oSelectedDiscType.isPercentageDiscountMethod())
							dDiscountRateAmt = (dValue.divide(new BigDecimal("100.0")))
									.multiply(new BigDecimal("-1.0"));
						else
							dDiscountRateAmt = dValue.multiply(new BigDecimal("-1.0"));
					}
				}
				
				// No Discount Item Group Id, cannot apply discount
				if (oParentFuncCheckItem.getMenuItem().getDiscountItemGroupId() == 0)
					return;
				
				// get the discount allowance
				List<Integer> oItemDiscountGrpList = new ArrayList<Integer>();
				HashMap<Integer, Boolean> oDiscountAllowance = new HashMap<Integer, Boolean>();
				
				// Pre-checking if the item is missing in menu
				if (oParentFuncCheckItem.getMenuItem() == null) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("item_is_missing_in_menu_setup") + " ("
							+ oParentFuncCheckItem.getItemDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get()) + ")");
					return;
				}
				
				if (!oItemDiscountGrpList.contains(oParentFuncCheckItem.getMenuItem().getDiscountItemGroupId())) {
					boolean bDiscountAllowance = AppGlobal.g_oFuncDiscountAclList
							.get(AppGlobal.g_oFuncOutlet.get().getOutletId())
							.checkDiscountAcl(oParentFuncCheckItem.getMenuItem(), oSelectedDiscType);
					oDiscountAllowance.put(oParentFuncCheckItem.getMenuItem().getDiscountItemGroupId(),
							bDiscountAllowance);
				}
				
				// check and prepare the item list for applying discount
				
				if (!oDiscountAllowance.containsKey(oParentFuncCheckItem.getMenuItem().getDiscountItemGroupId()))
					return;
				if (oDiscountAllowance.get(oParentFuncCheckItem.getMenuItem().getDiscountItemGroupId()) == false)
					return;
				
				// check whether the selected item is available for applying
				// discount
				if (sDiscountType.equals("item")
						&& oParentFuncCheckItem.getCheckItem().getTotal().compareTo(BigDecimal.ZERO) == 0)
					return;
				
				if (oParentFuncCheckItem.hasItemDiscount(false))
					return;
				
				ArrayList<PosCheckExtraInfo> oItemDiscountExtraInfoList = new ArrayList<PosCheckExtraInfo>();
				if (oSelectedDiscType.isEmployeeDiscount()) {
					int iUserId = this.checkEmployeeDiscount(oSelectedDiscType);
					if (iUserId != 0) {
						PosCheckExtraInfo oPosCheckExtraInfo = this.constructCheckExtraInfo(PosCheckExtraInfo.BY_DISCOUNT, PosCheckExtraInfo.SECTION_DISCOUNT, PosCheckExtraInfo.VARIABLE_USER_ID, Integer.toString(iUserId));
						oItemDiscountExtraInfoList.add(oPosCheckExtraInfo);
					} else
						return;
				}
				
				if (oSelectedDiscType.isMemberDiscount()) {
					if (!validateMemberDiscount(oSelectedDiscType, oItemDiscountExtraInfoList))
						return;
				}
				
				// Capture discount reference
				ArrayList<PosCheckExtraInfo> oTempCheckExtraInfoList = null;
				if (oSelectedDiscType.isAllowReference()) {
					if (oItemDiscountExtraInfoList != null)
						oTempCheckExtraInfoList = new ArrayList<PosCheckExtraInfo>(oItemDiscountExtraInfoList);
					oTempCheckExtraInfoList = askDiscountReference(1, oTempCheckExtraInfoList);
				} else
					oTempCheckExtraInfoList = oItemDiscountExtraInfoList;
				
				BigDecimal dOriginalQty = oParentFuncCheckItem.getCheckItem().getQty();
				boolean bNeedToSplitItem = false;
				FuncCheckItem oNewItem = null;
				BigDecimal dRemainingQty = BigDecimal.ZERO;
				
				
				
				if (!m_oFuncCheck.applyDiscount(sDiscountType, PosDiscountType.USED_FOR_DISCOUNT, oSelectedItemList,
						oSelectedDiscType, dDiscountRateAmt, oTempCheckExtraInfoList, 0))
					return;
				// Update basket
				this.updateBasketItemPrice(iSectionId, iItemIndex, oParentFuncCheckItem);
				this.updateBasketItemInfo(iSectionId, iItemIndex);
			}
		}
	}
	
	// Call Discount lookup
	private boolean callDiscountLookupForMultiItem(String sDiscountType, String sUsedFor,
	                                               List<HashMap<String, Integer>> oSelectedItems, String sDiscountCode,
	                                               ArrayList<PosCheckExtraInfo> oCheckDiscountExtraInfoList) {
		String sLookupDesc = "";
		List<HashMap<String, Object>> oLookupArray = new ArrayList<HashMap<String, Object>>();
		List<FuncLookupButtonInfo> oContentLookupList = new ArrayList<FuncLookupButtonInfo>();
		HashMap<String, Object> oLookupData = new HashMap<String, Object>();
		
		// Check if there is restriction on applying multiple discounts
		if (sUsedFor.equals(PosDiscountType.USED_FOR_DISCOUNT)
				&& !m_oFuncCheck.checkDiscountApplyRestriction(sDiscountType.equals("check"))) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("discount_had_been_applied_before"));
			return false;
		}
		
		DateTimeFormatter dateFormat = DateTimeFormat.forPattern("yyyy-MM-dd");
		PosBusinessDay oBusinessDay = AppGlobal.g_oFuncOutlet.get().getBusinessDay();
		PosDiscountTypeList oDiscTypeList = new PosDiscountTypeList();
		
		if (sDiscountType.equals("check") && oSelectedItems == null) {
			// form the selection items list for check discount
			oSelectedItems = new ArrayList<HashMap<String, Integer>>();
			int iSeatNo = 0, iItemIndex = 0;
			List<List<FuncCheckItem>> oPartyWholeItems = m_oFuncCheck.getWholeItemList();
			for (List<FuncCheckItem> oItemListForSingleSeat : oPartyWholeItems) {
				for (iItemIndex = 0; iItemIndex < oItemListForSingleSeat.size(); iItemIndex++) {
					HashMap<String, Integer> oTempSelectedItem = new HashMap<String, Integer>();
					oTempSelectedItem.put("partySeq", m_oFuncCheck.getCurrentCheckPartySeq());
					oTempSelectedItem.put("sectionId", iSeatNo);
					oTempSelectedItem.put("itemIndex", iItemIndex);
					oSelectedItems.add(oTempSelectedItem);
				}
				iSeatNo++;
			}
		}
		
		if (oSelectedItems.size() <= 0) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("no_selected_items") + System.lineSeparator()
					+ AppGlobal.g_oLang.get()._("action_aborted"));
			return false;
		}
		
		// form the lookup description
		if (sDiscountType.equals("check")) {
			if (sUsedFor.equals(PosDiscountType.USED_FOR_DISCOUNT))
				sLookupDesc = AppGlobal.g_oLang.get()._("please_select_the_discount_for_check");
			else
				sLookupDesc = AppGlobal.g_oLang.get()._("please_select_the_extra_charge_for_check");
		} else {
			String sItemListName = "";
			int iItemCount = 0;
			for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
				FuncCheckItem oSelectedFuncCheckItem = m_oFuncCheck.getCheckItem(oSelectedItem.get("partySeq"),
						oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
				
				if (iItemCount > 0)
					sItemListName += ", ";
				sItemListName += oSelectedFuncCheckItem
						.getItemShortDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get());
				iItemCount++;
			}
			sLookupDesc = AppGlobal.g_oLang.get()._("please_select_the_discount_for") + " " + sItemListName;
		}
		
		oDiscTypeList.readDiscountListByOutletId(sDiscountType, AppGlobal.g_oFuncOutlet.get().getShopId(),
				AppGlobal.g_oFuncOutlet.get().getOutletId(), AppGlobal.g_oFuncStation.get().getStationId(),
				dateFormat.print(oBusinessDay.getDate()), oBusinessDay.isHoliday(), oBusinessDay.isDayBeforeHoliday(),
				oBusinessDay.isSpecialDay(), oBusinessDay.isDayBeforeSpecialDay(), oBusinessDay.getDayOfWeek(),
				AppGlobal.g_oFuncUser.get().getUserGroupList(), true);
		
		// form the lookup data list
		if (!sDiscountCode.isEmpty()) {
			PosDiscountType oSelectedDiscType = null;
			for (PosDiscountType oDiscType : oDiscTypeList.getPosDiscountTypeList()) {
				if (oDiscType.getCode().equals(sDiscountCode)) {
					oSelectedDiscType = oDiscType;
					break;
				}
			}
			
			this.applyDiscount(sDiscountType, sUsedFor, oSelectedItems, oSelectedDiscType, oCheckDiscountExtraInfoList);
		} else {
			int iCount = 1;
			for (PosDiscountType oDiscountType : oDiscTypeList.getPosDiscountTypeList()) {
				boolean bAbleToClick = true;
				if ((sDiscountType.equals("item") && oDiscountType.isApplyToCheck())
						|| (sDiscountType.equals("check") && oDiscountType.isApplyToItem())
						|| !oDiscountType.isAllow()) {
					if(AppGlobal.g_oFuncStation.get().isResequenceDiscountList())
						continue;
					else
						bAbleToClick = false;
				}
				
				if ((sUsedFor.equals(PosDiscountType.USED_FOR_DISCOUNT) && !oDiscountType.isUsedForDiscount())
						|| (sUsedFor.equals(PosDiscountType.USED_FOR_EXTRA_CHARGE) && !oDiscountType.isUsedForExtraCharge())) {
					if(AppGlobal.g_oFuncStation.get().isResequenceDiscountList())
						continue;
					else
						bAbleToClick = false;
				}
				
				FuncLookupButtonInfo oLookupButtonInfo = new FuncLookupButtonInfo();
				String[] sNameArray = new String[AppGlobal.LANGUAGE_COUNT];
				for (int i = 0; i < AppGlobal.LANGUAGE_COUNT; i++) {
					int iBilingualLangIndex = AppGlobal.g_oFuncOutlet.get().getBilingualLangIndexByeLangIndex(i + 1);
					sNameArray[i] = oDiscountType.getBilingualName(i + 1, iBilingualLangIndex);
				}
				oLookupButtonInfo.setName(sNameArray);
				oLookupButtonInfo.setType(PosDisplayPanelLookup.TYPE_HOT_ITEM);
				oLookupButtonInfo.setId(oDiscountType.getDtypId());
				if(AppGlobal.g_oFuncStation.get().isResequenceDiscountList())
					oLookupButtonInfo.setSeq(iCount);
				else
					oLookupButtonInfo.setSeq(oDiscountType.getSeq());
				if (!bAbleToClick)
					oLookupButtonInfo.setAbleToClick(bAbleToClick);
				oContentLookupList.add(oLookupButtonInfo);
				iCount++;
			}
			
			if (sUsedFor.equals(PosDiscountType.USED_FOR_DISCOUNT))
				oLookupData.put(FormCommonLookup.COMMON_LOOKUP_NAME, AppGlobal.g_oLang.get()._("discounts"));
			else
				oLookupData.put(FormCommonLookup.COMMON_LOOKUP_NAME, AppGlobal.g_oLang.get()._("extra_charges"));
			oLookupData.put(FormCommonLookup.COMMON_LOOKUP_DATA_LIST, oContentLookupList);
			oLookupArray.add(oLookupData);
			
			String sTitle = "";
			if (sUsedFor.equals(PosDiscountType.USED_FOR_DISCOUNT))
				sTitle = AppGlobal.g_oLang.get()._("apply_discount");
			else
				sTitle = AppGlobal.g_oLang.get()._("apply_extra_charge");
			FormCommonLookup oFormCommonLookup = new FormCommonLookup(this);
			oFormCommonLookup.setLabelTitleBar(sTitle);
			oFormCommonLookup.setLabelDescBar(sLookupDesc);
			oFormCommonLookup.setSingleSelection(true);
			oFormCommonLookup.createTabsAndLookupButtons(oLookupArray);
			oFormCommonLookup.show();
			
			if (oFormCommonLookup.getSelectedItems().size() > 0) {
				List<JSONObject> oSelectedDiscTypeList = oFormCommonLookup.getSelectedItems();
				for (JSONObject oDiscountType : oSelectedDiscTypeList) {
					int iDiscTypeId = oDiscountType.optInt(FormCommonLookup.SELECTED_ITEM_ID);
					PosDiscountType oSelectedDiscType = null;
					for (PosDiscountType oDiscType : oDiscTypeList.getPosDiscountTypeList()) {
						if (oDiscType.getDtypId() == iDiscTypeId) {
							oSelectedDiscType = oDiscType;
							break;
						}
					}
					
					this.applyDiscount(sDiscountType, sUsedFor, oSelectedItems, oSelectedDiscType,
							oCheckDiscountExtraInfoList);
				}
			}
		}
		
		return true;
	}
	
	private boolean validateMemberDiscount(PosDiscountType oPosDiscountType, ArrayList<PosCheckExtraInfo> oCheckExtraInfoList) {
		String sSwipeCardContent = "";
		String sMemberNo = "";
		String sMemberExpiryDate = "";
		String sCardNo = "";
		String sSwipeCardControl = FuncMSR.SWIPE_CARD_NO_CONTROL;
		String sInputType = "";
		boolean bHvInterfaceConfig = false;
		boolean bAskMember = true;
		
		JSONObject oDiscountInterfaceConfig = new JSONObject();
		
		// Get interface configuration values
		for (PosInterfaceConfig oPosInterfaceConfig: oPosDiscountType.getInterfaceConfigList().getInterfaceConfigurationList()) {
			if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_MSR)) {
				oDiscountInterfaceConfig = oPosInterfaceConfig.getInterfaceConfig();
				bHvInterfaceConfig = true;
				
				JSONObject oConfigValueObject = new JSONObject();
				oConfigValueObject = oPosInterfaceConfig.getConfigValue();
				
				if (oConfigValueObject != null)
					sSwipeCardControl = oConfigValueObject.optJSONObject("general").optJSONObject("params").optJSONObject("swipe_card_control").optString("value");
				break;
			}
		}
		
		// Get previous applied member number & input type
		String sPreviousMemberNo = m_oFuncCheck.getPreviousAppliedDiscountMemberNo();
		if (!sPreviousMemberNo.isEmpty()) {
			boolean bPreviousSwipeCardControlValidation = true;
			String sPreviousInputType = m_oFuncCheck.getPreviousAppliedDiscountMemberInputType();
			if (!sSwipeCardControl.equals(FuncMSR.SWIPE_CARD_NO_CONTROL)) {
				if(sPreviousInputType.equals("key_in") && sSwipeCardControl.equals(FuncMSR.SWIPE_CARD_CONTROL_SWIPE_ONLY) ||
						sPreviousInputType.equals("swipe_card") && sSwipeCardControl.equals(FuncMSR.SWIPE_CARD_CONTROL_MANUAL_INPUT_ONLY))
					bPreviousSwipeCardControlValidation = false;
			}
			
			FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
					AppGlobal.g_oLang.get()._("no"), this);
			oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
			oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("current_member") + " : " + sPreviousMemberNo + System.lineSeparator()
					+ AppGlobal.g_oLang.get()._("confirm") + "?");
			oFormConfirmBox.show();
			if (oFormConfirmBox.isOKClicked() && bPreviousSwipeCardControlValidation) {
				bAskMember = false;
				sMemberNo = sPreviousMemberNo;
				sInputType = sPreviousInputType;
				
			} else if (oFormConfirmBox.isOKClicked() && !bPreviousSwipeCardControlValidation){
				showErrorDialogBox(AppGlobal.g_oLang.get()._("previous_member_input_type_is_invalid"));
			}
		}
		
		// Ask for member number
		while (bAskMember) {
			FormInputBox oFormInputBox = new FormInputBox(this);
			oFormInputBox.init();
			oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DEFAULT);
			oFormInputBox.showKeyboard();
			oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("member_discount"));
			oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("please_input_card_no") + ":");
			oFormInputBox.show();
			if (oFormInputBox.isUserCancel())
				return false;
			sSwipeCardContent = oFormInputBox.getSwipeCardValue();
			sMemberNo = oFormInputBox.getInputValue();
			
			if (!sSwipeCardContent.isEmpty()) {
				boolean bHaveError = false;
				sInputType = "swipe_card";
				
				// Swipe card control validation
				if (sSwipeCardControl.equals(FuncMSR.SWIPE_CARD_CONTROL_MANUAL_INPUT_ONLY)) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("only_manual_input_is_allowed"));
					continue;
				}
				
				// Process MSR
				if (bHvInterfaceConfig) {
					// Capture information from swipe card
					FuncMSR oFuncMSR = new FuncMSR();
					int iErrorCode = oFuncMSR.processCardContent(sSwipeCardContent, oDiscountInterfaceConfig);
					
					// Get the necessary value
					sCardNo = oFuncMSR.getCardNo();
					if(!sCardNo.isEmpty())
						sMemberNo = sCardNo;
					//Get the Expiry Date
					sMemberExpiryDate =	oFuncMSR.getExpiryDateString();
					if(sMemberExpiryDate == null)
						sMemberExpiryDate = "";
					
					if (iErrorCode == FuncMSR.ERROR_CODE_MISSING_SETUP || iErrorCode == FuncMSR.ERROR_CODE_CARD_EXPIRED
							|| (!sCardNo.isEmpty() && iErrorCode == FuncMSR.ERROR_CODE_INCORRECT_EXPIRY_DATE_SETUP)) {
						showErrorDialogBox(oFuncMSR.getLastErrorMessage());
						bHaveError = true;
					}
				} else {
					// If no MSR interface setting, use the swipe card value as
					// the card no.
					sCardNo = sSwipeCardContent;
				}
				
				if (bHaveError)
					continue;
				
				if (sCardNo.isEmpty()) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("invalid_member_card"));
					continue;
				}
			} else {
				sInputType = "key_in";
				
				// Swipe card control validation
				if (sSwipeCardControl.equals(FuncMSR.SWIPE_CARD_CONTROL_SWIPE_ONLY)) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("only_swipe_card_is_allowed"));
					continue;
				}
				
				if (sMemberNo.isEmpty()) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("invalid_member_card"));
					continue;
				}
			}
			
			// Validate member module
			if (!AppGlobal.g_oFuncStation.get().isValidateMemberDiscount()) {
				if (!sMemberNo.isEmpty()) {
					MemMember oMember = new MemMember();
					if (!oMember.readByMemberNo(sMemberNo)) {
						showErrorDialogBox(AppGlobal.g_oLang.get()._("member_not_found"));
						continue;
					}
				} else if (!sCardNo.isEmpty()) {
					// Further development to validate member by card no
					MemMember oMember = new MemMember();
					if (!oMember.readByMemberNo(sCardNo)) {
						showErrorDialogBox(AppGlobal.g_oLang.get()._("member_not_found"));
						continue;
					}
				}
			} else {
				// No validate member module, card no. is used as member no.
				if (!sCardNo.isEmpty())
					sMemberNo = sCardNo;
			}
			
			break;
		}
		
		processMemberDiscountExtraInfo(sMemberNo, sMemberExpiryDate, sInputType, oCheckExtraInfoList);
		
		return true;
	}
	
	private void processMemberDiscountExtraInfo(String sMemberNo, String sMemberExpiryDate,String sInputType, ArrayList<PosCheckExtraInfo> oCheckExtraInfoList) {
		oCheckExtraInfoList.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_DISCOUNT, PosCheckExtraInfo.SECTION_DISCOUNT, PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER, sMemberNo));
		oCheckExtraInfoList.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_DISCOUNT, PosCheckExtraInfo.SECTION_DISCOUNT, PosCheckExtraInfo.VARIABLE_EXPIRY_DATE, sMemberExpiryDate));
		oCheckExtraInfoList.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_DISCOUNT, PosCheckExtraInfo.SECTION_DISCOUNT, PosCheckExtraInfo.VARIABLE_INPUT_TYPE, sInputType));
	}
	
	private void applyDiscount(String sDiscountType, String sUsedFor, List<HashMap<String, Integer>> oSelectedItems,
	                           PosDiscountType oSelectedDiscType, ArrayList<PosCheckExtraInfo> oCheckExtraInfoList) {
		String sErrMsg = "";
		HashMap<String, String> oResultFromInterface = null;
		FuncMembershipInterface oFuncMembershipInterface = null;
		
		//check for discount attached interface
		PosInterfaceConfigList oTempInterfaceConfigList = oSelectedDiscType.getInterfaceConfigList();
		if (oTempInterfaceConfigList != null) {
			//for case if ascentis is being attached.
			List<PosInterfaceConfig> oInterfaceConfigList = oTempInterfaceConfigList.getInterfaceConfigListByInterfaceTypeAndVendorKey(InfInterface.TYPE_MEMBERSHIP_INTERFACE, InfVendor.KEY_ASCENTIS_CRM);
			if (oInterfaceConfigList.size() > 0 && oInterfaceConfigList.get(0) != null) {
				oFuncMembershipInterface = new FuncMembershipInterface(oInterfaceConfigList.get(0));
				oResultFromInterface = oFuncMembershipInterface.getSetupAndValidateForMembershipDiscount(m_oFuncCheck);
			}
		}
		
		String sSelectedDiscTypeName;
		if (oSelectedDiscType.getShortName(AppGlobal.g_oCurrentLangIndex.get()).isEmpty())
			sSelectedDiscTypeName = oSelectedDiscType.getName(AppGlobal.g_oCurrentLangIndex.get());
		else
			sSelectedDiscTypeName = oSelectedDiscType.getShortName(AppGlobal.g_oCurrentLangIndex.get());
		boolean bAskValue = false;
		String sInputBoxTitle = "";
		String sInputBoxMessage = "";
		BigDecimal dDiscountRateAmt = BigDecimal.ZERO;
		
		// check if extra charge is by item level
		if (oSelectedDiscType.isUsedForExtraCharge() && oSelectedDiscType.isFixAmountDiscountPerItemMethod()){
			showErrorDialogBox(AppGlobal.g_oLang.get()._("extra_charge_is_not_supported_by_item_level"));
			return;
		}
		
		//check if discount interface setting is correct
		if(oResultFromInterface != null && !oResultFromInterface.isEmpty()){
			if(oResultFromInterface.containsKey("errorMsg")){
				showErrorDialogBox(oResultFromInterface.get("errorMsg"));
				return;
			}
		}
		
		// check whether need to ask open discount value
		if (sDiscountType.equals("item") && oSelectedDiscType.isFixAmountDiscountPerItemMethod()) {
			if (oSelectedDiscType.getFixAmount().compareTo(BigDecimal.ZERO) == 0) {
				bAskValue = true;
				sInputBoxTitle = AppGlobal.g_oLang.get()._("item_discount") + ": " + sSelectedDiscTypeName;
				sInputBoxMessage = AppGlobal.g_oLang.get()._("please_input_value_with_amount") + ":";
			} else
				dDiscountRateAmt = oSelectedDiscType.getFixAmount();
		} else if (sDiscountType.equals("check") && (oSelectedDiscType.isFixAmountDiscountPerCheckMethod() || oSelectedDiscType.isFixAmountDiscountPerItemMethod())) {
			if (oSelectedDiscType.getFixAmount().compareTo(BigDecimal.ZERO) == 0) {
				bAskValue = true;
				sInputBoxTitle = AppGlobal.g_oLang.get()._("check_discount") + ": " + sSelectedDiscTypeName;
				sInputBoxMessage = AppGlobal.g_oLang.get()._("please_input_value_with_amount") + ":";
			} else
				dDiscountRateAmt = oSelectedDiscType.getFixAmount();
		} else if (oSelectedDiscType.isPercentageDiscountMethod()) {
			if (oSelectedDiscType.getRate().compareTo(BigDecimal.ZERO) == 0) {
				bAskValue = true;
				if (sDiscountType.equals("item"))
					sInputBoxTitle = AppGlobal.g_oLang.get()._("item_discount") + ": " + sSelectedDiscTypeName;
				else
					sInputBoxTitle = AppGlobal.g_oLang.get()._("check_discount") + ": " + sSelectedDiscTypeName;
				sInputBoxMessage = AppGlobal.g_oLang.get()._("please_input_value_with_percentage") + ":";
			} else
				dDiscountRateAmt = oSelectedDiscType.getRate();
		}
		
		// ask open discount value
		if (bAskValue) {
			// Check the price is in Extra Info Or not
			if (oCheckExtraInfoList != null) {
				int iIndex = 0;
				boolean bfound = false;
				for (int j = 0; j < oCheckExtraInfoList.size(); j++) {
					PosCheckExtraInfo oCheckExtraInfo = oCheckExtraInfoList.get(j);
					
					if (oCheckExtraInfo.getSection().equals(PosCheckExtraInfo.SECTION_LOYALTY)) {
						if (oCheckExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_DATA)) {
							// iIndex = oCheckExtraInfo.getIndex();
							oCheckExtraInfo.getValue();
							bfound = true;
							break;
						}
					}
					iIndex++;
				}
				if (bfound)
					oCheckExtraInfoList.remove(iIndex);
			}
			
			// Ask discount /Point value
			FormInputBox oFormInputBox = new FormInputBox(this);
			oFormInputBox.init();
			if (oResultFromInterface != null && !oResultFromInterface.isEmpty()) {
				if(oFuncMembershipInterface.getMembershipInterface().getInterfaceVendorKey().equals(InfVendor.KEY_ASCENTIS_CRM)){
					showPointRedemptionInfo(oFuncMembershipInterface, oResultFromInterface.get("pointBalance"), Integer.parseInt(oResultFromInterface.get("pointDecimal")), new BigDecimal(oResultFromInterface.get("checkBalance")), new BigDecimal(oResultFromInterface.get("maxAmount")), new BigDecimal(oResultFromInterface.get("maxPoint")), "discount");
					oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.NUMBER);
					oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("point_redemption"));
					oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("please_input_the_point_to_redeem"));
					BigDecimal dMaxPoint = new BigDecimal(oResultFromInterface.get("maxPoint"));
					oFormInputBox.setDefaultInputValue(String.valueOf(dMaxPoint.setScale(0, RoundingMode.HALF_UP).toString()));
				}
			}else {
				oFormInputBox.setTitle(sInputBoxTitle);
				oFormInputBox.setMessage(sInputBoxMessage);
				oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DECIMAL);
			}
			oFormInputBox.show();
			
			String sOpenDiscount = "";
			String sInputValue = oFormInputBox.getInputValue();
			if (sInputValue == null ) {
				return ;
			}
			
			// Error: No number input
			try {
				Double.valueOf(sInputValue);
			} catch (NumberFormatException e) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("invalid_input"));
				return;
			}
			
			if (oResultFromInterface != null && !oResultFromInterface.isEmpty()) {
				if(oFuncMembershipInterface.getMembershipInterface().getInterfaceVendorKey().equals(InfVendor.KEY_ASCENTIS_CRM)){
					BigDecimal dMaxPoint = new BigDecimal(oResultFromInterface.get("maxPoint"));
					int iPointDecimal = Integer.valueOf(oResultFromInterface.get("pointDecimal"));
					BigDecimal dMaxAmount = new BigDecimal(oResultFromInterface.get("maxPoint"));
					BigDecimal dDiscountToPointRatio = new BigDecimal(oResultFromInterface.get("discountToPointRatio"));
					
					try {
						Integer.parseInt(sInputValue);
					} catch (Exception e) {
						showErrorDialogBox(AppGlobal.g_oLang.get()._("please_input_an_integer"));
						return;
					}
					
					if (new BigDecimal(sInputValue).compareTo(BigDecimal.ZERO) == 0)
						return;
					
					if (new BigDecimal(sInputValue).compareTo(dMaxPoint) > 0) {
						showWarningDialogBox(AppGlobal.g_oLang.get()._("redeem_points_are_not_enough"));
						return;
					}
					BigDecimal dPointUsed = new BigDecimal(sInputValue);
					oResultFromInterface.put("PointUsed", dPointUsed.setScale(iPointDecimal, RoundingMode.DOWN).toPlainString());
					BigDecimal dDiscountTotal = dPointUsed.multiply(dDiscountToPointRatio).setScale(iPointDecimal, RoundingMode.UP);
					if (dDiscountTotal.compareTo(dMaxAmount) > 0)
						dDiscountTotal = dMaxAmount;
					
					sOpenDiscount = dDiscountTotal.toPlainString();
				}
				else
					sOpenDiscount = sInputValue;
			}else
				sOpenDiscount = sInputValue;
			
			BigDecimal dValue = new BigDecimal(sOpenDiscount);
			if (oSelectedDiscType.isPercentageDiscountMethod()) {
				while (dValue.compareTo(BigDecimal.ZERO) < 0 || dValue.compareTo(new BigDecimal("100.0")) > 0) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("invalid_input"));
					
					// Ask discount value again
					FormInputBox oFormDiscountInputBox = new FormInputBox(this);
					oFormDiscountInputBox.init();
					oFormDiscountInputBox.setTitle(sInputBoxTitle);
					oFormDiscountInputBox.setMessage(sInputBoxMessage);
					oFormDiscountInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DECIMAL);
					oFormDiscountInputBox.show();
					
					dValue = new BigDecimal(oFormDiscountInputBox.getInputValue());
				}
			}
			
			boolean bPassChecking = false;
			if (dValue.compareTo(BigDecimal.ZERO) == 0)
				sErrMsg = AppGlobal.g_oLang.get()._("zero_discount_amount");
			else if(dValue.compareTo(BigDecimal.ZERO) < 0)
				sErrMsg = AppGlobal.g_oLang.get()._("invalid_input");
			else if ((oSelectedDiscType.isFixAmountDiscountPerCheckMethod() || oSelectedDiscType.isFixAmountDiscountPerItemMethod())
					&&  oSelectedDiscType.getDiscountMaxLimit().compareTo(BigDecimal.ZERO) > 0 && oSelectedDiscType.getDiscountMaxLimit().compareTo(dValue) == -1)
				sErrMsg = AppGlobal.g_oLang.get()._("excess_maximum_amount") + " : " + oSelectedDiscType.getDiscountMaxLimit();
			else
				bPassChecking = true;
			if(!bPassChecking) {
				showErrorDialogBox(sErrMsg);
				return;
			}
			
			if (oSelectedDiscType.isUsedForExtraCharge()) {
				if (oSelectedDiscType.isPercentageDiscountMethod())
					dDiscountRateAmt = dValue.divide(new BigDecimal("100.0"));
				else
					dDiscountRateAmt = dValue;
			} else {
				if (oSelectedDiscType.isPercentageDiscountMethod())
					dDiscountRateAmt = (dValue.divide(new BigDecimal("100.0"))).multiply(new BigDecimal("-1.0"));
				else
					dDiscountRateAmt = dValue.multiply(new BigDecimal("-1.0"));
			}
		}
		
		// get the discount allowance
		List<Integer> oItemDiscountGrpList = new ArrayList<Integer>();
		HashMap<Integer, Boolean> oDiscountAllowance = new HashMap<Integer, Boolean>();
		for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
			FuncCheckItem oParentFuncCheckItem = m_oFuncCheck.getCheckItem(oSelectedItem.get("partySeq"),
					oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
			
			// Pre-checking if the item is missing in menu
			if (oParentFuncCheckItem.getMenuItem() == null) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("item_is_missing_in_menu_setup") + " ("
						+ oParentFuncCheckItem.getItemDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get()) + ")");
				return;
			}
			
			if (oParentFuncCheckItem.getMenuItem().getDiscountItemGroupId() != 0
					&& !oItemDiscountGrpList.contains(oParentFuncCheckItem.getMenuItem().getDiscountItemGroupId())) {
				boolean bDiscountAllowance = AppGlobal.g_oFuncDiscountAclList
						.get(AppGlobal.g_oFuncOutlet.get().getOutletId())
						.checkDiscountAcl(oParentFuncCheckItem.getMenuItem(), oSelectedDiscType);
				oDiscountAllowance.put(oParentFuncCheckItem.getMenuItem().getDiscountItemGroupId(), bDiscountAllowance);
			}
		}
		
		// check and prepare the item list for applying discount
		List<HashMap<String, Integer>> oItemIndexList = new ArrayList<HashMap<String, Integer>>();
		for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
			FuncCheckItem oParentFuncCheckItem = m_oFuncCheck.getCheckItem(oSelectedItem.get("partySeq"),
					oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
			
			// check the selected discount is available for the selected item
			/*
			 * if(oSelectedDiscType.getDiscountAllowance(oParentFuncCheckItem.
			 * getMenuItem().getDiscountItemGroupId(),
			 * AppGlobal.g_oFuncOutlet.get().getOutletId(),
			 * dateFormat.format(oBusinessDay.getDate()),
			 * oBusinessDay.isHoliday(), oBusinessDay.isDayBeforeHoliday(),
			 * oBusinessDay.isSpecialDay(),
			 * oBusinessDay.isDayBeforeSpecialDay(),
			 * oBusinessDay.getDayOfWeek()) == false) continue;
			 */
			if (oParentFuncCheckItem.getMenuItem().getDiscountItemGroupId() == 0)
				continue;
			if (!oDiscountAllowance.containsKey(oParentFuncCheckItem.getMenuItem().getDiscountItemGroupId()))
				continue;
			if (oDiscountAllowance.get(oParentFuncCheckItem.getMenuItem().getDiscountItemGroupId()) == false)
				continue;
			
			// check whether the selected item is available for applying
			// discount
			if (oParentFuncCheckItem.getCheckItem().getTotal().compareTo(BigDecimal.ZERO) == 0)
				continue;
			
			if (sDiscountType.equals("item") && oParentFuncCheckItem.hasItemDiscount(true))
				continue;
			
			/*
			 * if(oSelectedDiscType.getItemDiscGrpId() > 0 &&
			 * oSelectedDiscType.getItemDiscGrpId() !=
			 * oParentFuncCheckItem.getMenuItem().digpId) continue;
			 */
			
			oItemIndexList.add(oSelectedItem);
		}
		
		// Double apply check discount checking
		if (sDiscountType.equals("check")) {
			int iDoubleCheckDiscountAlert = m_oFuncCheck.checkDoubleDiscountAlert(oSelectedDiscType);
			// 0: no alert || 1: more than one discount || 2: same discount
			if (iDoubleCheckDiscountAlert > 0) {
				FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
						AppGlobal.g_oLang.get()._("no"), this);
				oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
				
				if (iDoubleCheckDiscountAlert == 1) {
					oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("check_discount_had_been_applied_before")
							+ "," + System.lineSeparator() + AppGlobal.g_oLang.get()._("continue") + "?");
				} else {
					oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("same_discount_had_been_applied_before")
							+ "," + System.lineSeparator() + AppGlobal.g_oLang.get()._("continue") + "?");
				}
				oFormConfirmBox.show();
				if (oFormConfirmBox.isOKClicked() == false)
					return;
			}
		}
		
		// for applying new check discount on old check, send calcTrans to do
		// loyalty member bonus redemption
		if (sDiscountType.equals("check") && m_oFuncCheck.isOldCheck()) {
			boolean bHaveOldItem = false;
			for (HashMap<String, Integer> oSelectedItemIndex : oItemIndexList) {
				FuncCheckItem oParentFuncCheckItem = m_oFuncCheck.getCheckItem(oSelectedItemIndex.get("partySeq"),
						oSelectedItemIndex.get("sectionId"), oSelectedItemIndex.get("itemIndex"));
				if (oParentFuncCheckItem.isOldItem()) {
					bHaveOldItem = true;
					break;
				}
			}
			
			if (bHaveOldItem) {
				/*
				 * if (!m_oFuncCheck.calculateLoyaltyTransaction() &&
				 * !m_oFuncCheck.getLastErrorMessage().isEmpty()) {
				 * FormDialogBox oFormDialogBox = new
				 * FormDialogBox(AppGlobal.g_oLang.get()._("ok"), this);
				 * oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._("error"));
				 * oFormDialogBox.setMessage(m_oFuncCheck.getLastErrorMessage())
				 * ; oFormDialogBox.show(); }
				 */
				if (!m_oFuncCheck.calculateLoyaltyTransaction()) {
					String sErrorMessage = m_oFuncCheck.getLastErrorMessage();
					if (!sErrorMessage.isEmpty())
						showErrorDialogBox(sErrorMessage);
				}
			}
		}
		
		if (oCheckExtraInfoList == null)
			oCheckExtraInfoList = new ArrayList<PosCheckExtraInfo>();
		
		if (oSelectedDiscType.isEmployeeDiscount()) {
			int iUserId = this.checkEmployeeDiscount(oSelectedDiscType);
			if (iUserId != 0) {
				PosCheckExtraInfo oPosCheckExtraInfo = this.constructCheckExtraInfo(PosCheckExtraInfo.BY_DISCOUNT, PosCheckExtraInfo.SECTION_DISCOUNT, PosCheckExtraInfo.VARIABLE_USER_ID, Integer.toString(iUserId));
				oCheckExtraInfoList.add(oPosCheckExtraInfo);
			} else
				return;
		}
		
		if (oSelectedDiscType.isMemberDiscount()) {
			if (!validateMemberDiscount(oSelectedDiscType, oCheckExtraInfoList))
				return;
		}
		
		if (oResultFromInterface != null && !oResultFromInterface.isEmpty() && oResultFromInterface.containsKey("PointUsed") && !oResultFromInterface.get("PointUsed").isEmpty()) {
			if(oFuncMembershipInterface.getMembershipInterface().getInterfaceVendorKey().equals(InfVendor.KEY_ASCENTIS_CRM)){
				oCheckExtraInfoList.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_DISCOUNT, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID, String.valueOf(oFuncMembershipInterface.getMembershipInterface().getInterfaceId())));
				oCheckExtraInfoList.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_DISCOUNT, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_USE, oResultFromInterface.get("PointUsed")));
			}
		}
		
		// Check if it is open discount
		boolean bOpenDiscount = false;
		if (oSelectedDiscType.isFixAmountDiscountPerCheckMethod()
				|| oSelectedDiscType.isFixAmountDiscountPerItemMethod()) {
			if (oSelectedDiscType.getFixAmount().compareTo(BigDecimal.ZERO) == 0)
				bOpenDiscount = true;
		} else if (oSelectedDiscType.isPercentageDiscountMethod()) {
			if (oSelectedDiscType.getRate().compareTo(BigDecimal.ZERO) == 0)
				bOpenDiscount = true;
		}
		
		// Ask quantity only if check discount and open discount
		if (sDiscountType.equals("check") && AppGlobal.g_oFuncStation.get().isAskQuantityDuringApplyDiscount()
				&& !bOpenDiscount) {
			// Ask quantity of discount
			FormInputBox oFormInputBox;
			oFormInputBox = new FormInputBox(this);
			oFormInputBox.init();
			oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("discount_multiplier"));
			oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("please_input_quantity_of_discount") + ":");
			oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.NUMBER);
			oFormInputBox.show();
			
			String sDiscountQuantity = oFormInputBox.getInputValue();
			if (oFormInputBox.isUserCancel())
				return;
			
			if (sDiscountQuantity == null) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("invalid_input"));
				return;
			}
			
			// Error: No number input
			if (!checkValidIntegerValue(sDiscountQuantity))
				return;
			int iDiscountQuantity = Integer.valueOf(sDiscountQuantity);
			
			if (iDiscountQuantity <= 0 || iDiscountQuantity > 99) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("quantity_is_not_in_range") + ": " + "1-99");
				return;
			}
			
			// apply "quantity" number of discount
			for (int iCount = 1; iCount <= iDiscountQuantity; iCount++) {
				if (iCount > 1) {
					// Check for each discount restriction
					if (sUsedFor.equals(PosDiscountType.USED_FOR_DISCOUNT)
							&& !m_oFuncCheck.checkDiscountApplyRestriction(sDiscountType.equals("check"))) {
						showErrorDialogBox(AppGlobal.g_oLang.get()._("discount_had_been_applied_before"));
						return;
					}
					
					// Double apply check discount checking
					if (sDiscountType.equals("check")) {
						int iDoubleCheckDiscountAlert = m_oFuncCheck.checkDoubleDiscountAlert(oSelectedDiscType);
						// 0: no alert || 1: more than one discount || 2: same
						// discount
						if (iDoubleCheckDiscountAlert > 0) {
							FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
									AppGlobal.g_oLang.get()._("no"), this);
							oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
							
							if (iDoubleCheckDiscountAlert == 1)
								oFormConfirmBox
										.setMessage(AppGlobal.g_oLang.get()._("check_discount_had_been_applied_before")
												+ "," + System.lineSeparator() + AppGlobal.g_oLang.get()._("continue") + "?");
							else
								oFormConfirmBox
										.setMessage(AppGlobal.g_oLang.get()._("same_discount_had_been_applied_before")
												+ "," + System.lineSeparator() + AppGlobal.g_oLang.get()._("continue") + "?");
							
							oFormConfirmBox.show();
							if (oFormConfirmBox.isOKClicked() == false)
								return;
						}
					}
				}
				
				// Capture discount reference
				ArrayList<PosCheckExtraInfo> oTempCheckExtraInfoList = null;
				if (oSelectedDiscType.isAllowReference()) {
					if (oCheckExtraInfoList != null)
						oTempCheckExtraInfoList = new ArrayList<PosCheckExtraInfo>(oCheckExtraInfoList);
					oTempCheckExtraInfoList = askDiscountReference(iCount, oTempCheckExtraInfoList);
				} else
					oTempCheckExtraInfoList = oCheckExtraInfoList;
				if (!m_oFuncCheck.applyDiscount(sDiscountType, sUsedFor, oItemIndexList, oSelectedDiscType,
						dDiscountRateAmt, oTempCheckExtraInfoList, 0))
					return;
			}
		} else {
			// Capture discount reference
			ArrayList<PosCheckExtraInfo> oTempCheckExtraInfoList = null;
			if (oSelectedDiscType.isAllowReference()) {
				if (oCheckExtraInfoList != null)
					oTempCheckExtraInfoList = new ArrayList<PosCheckExtraInfo>(oCheckExtraInfoList);
				oTempCheckExtraInfoList = askDiscountReference(1, oTempCheckExtraInfoList);
			} else
				oTempCheckExtraInfoList = oCheckExtraInfoList;
			if (!m_oFuncCheck.applyDiscount(sDiscountType, sUsedFor, oItemIndexList, oSelectedDiscType,
					dDiscountRateAmt, oTempCheckExtraInfoList, 0))
				return;
		}
		
		if (sDiscountType.equals("item")) {
			for (HashMap<String, Integer> oSelectedItem : oItemIndexList) {
				// Update current party basket
				if (oSelectedItem.get("partySeq") != m_oFuncCheck.getCurrentCheckPartySeq())
					continue;
				
				FuncCheckItem oParentFuncCheckItem = m_oFuncCheck.getCheckItem(oSelectedItem.get("sectionId"),
						oSelectedItem.get("itemIndex"));
				
				// Update basket
				this.updateBasketItemPrice(oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"),
						oParentFuncCheckItem);
				this.updateBasketItemInfo(oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
			}
		} else{
			for (int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
				// Create ordering basket section for seat
				ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck.getItemList(i);
				if (oFuncCheckItemList != null && oFuncCheckItemList.size() > 0) { // Has ordered items in seat i
					for (int j = 0; j < oFuncCheckItemList.size(); j++) {
						FuncCheckItem oFuncCheckItem = oFuncCheckItemList.get(j);
						updateBasketItemPrice(i, j, oFuncCheckItem);
					}
				}
			}
			// Update extend bar
			this.updateBasketExtendBarCheckTotal();
		}
	}
	
	private int checkEmployeeDiscount(PosDiscountType oSelectedDiscType) {
		int iUserId = 0;
		FuncUser oTempUser = this.askUserPassword(AppGlobal.g_oLang.get()._("login"), true);
		if (oTempUser == null)
			return iUserId;
		
		PosConfig oPosConfig = new PosConfig();
		if (oPosConfig.getEmployeeUserLimit(AppGlobal.g_oFuncStation.get().getStationId(),
				AppGlobal.g_oFuncOutlet.get().getOutletId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
				"employee_discount_limit", "" + oTempUser.getUserId()))
			iUserId = oTempUser.getUserId();
		else {
			showErrorDialogBox((AppGlobal.g_oLang.get()._("employee_not_allowed")));
			return iUserId;
		}
		
		return iUserId;
	}
	
	private void checkDiscountForNewlyAddedItem(FuncCheckItem oNewFuncCheckItem) {
		List<Integer> oItemDiscountGrpList = new ArrayList<Integer>();
		List<PosCheckDiscount> oAppliedCheckPartyDiscountList = null;
		HashMap<Integer, Boolean> oDiscountAllowance = new HashMap<Integer, Boolean>();
		
		// get the discount allowance
		// Pre-checking if the item is missing in menu
		if (oNewFuncCheckItem.getMenuItem() == null) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("item_is_missing_in_menu_setup") + " ("
					+ oNewFuncCheckItem.getItemDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get()) + ")");
			return;
		}
		
		oAppliedCheckPartyDiscountList = m_oFuncCheck.getCurrentPartyAppliedCheckDiscount();
		if (oAppliedCheckPartyDiscountList == null || oAppliedCheckPartyDiscountList.isEmpty())
			return;
		
		for (PosCheckDiscount oAppliedCheckDisc : oAppliedCheckPartyDiscountList) {
			int iCheckDiscountIndex = oAppliedCheckDisc.getSeq();
			PosDiscountType oDiscountType = new PosDiscountType();
			oDiscountType.readById(oAppliedCheckDisc.getDtypId());
			
			if (oNewFuncCheckItem.getMenuItem().getDiscountItemGroupId() != 0
					&& !oItemDiscountGrpList.contains(oNewFuncCheckItem.getMenuItem().getDiscountItemGroupId())) {
				boolean bDiscountAllowance = AppGlobal.g_oFuncDiscountAclList
						.get(AppGlobal.g_oFuncOutlet.get().getOutletId())
						.checkDiscountAcl(oNewFuncCheckItem.getMenuItem(), oDiscountType);
				oDiscountAllowance.put(oNewFuncCheckItem.getMenuItem().getDiscountItemGroupId(), bDiscountAllowance);
			}
			
			// check the selected discount is available for the selected item
			/*
			 * if(oSelectedDiscType.getDiscountAllowance(oParentFuncCheckItem.
			 * getMenuItem().getDiscountItemGroupId(),
			 * AppGlobal.g_oFuncOutlet.get().getOutletId(),
			 * dateFormat.format(oBusinessDay.getDate()),
			 * oBusinessDay.isHoliday(), oBusinessDay.isDayBeforeHoliday(),
			 * oBusinessDay.isSpecialDay(),
			 * oBusinessDay.isDayBeforeSpecialDay(),
			 * oBusinessDay.getDayOfWeek()) == false) continue;
			 */
			if (oNewFuncCheckItem.getMenuItem().getDiscountItemGroupId() == 0)
				continue;
			if (!oDiscountAllowance.containsKey(oNewFuncCheckItem.getMenuItem().getDiscountItemGroupId()))
				continue;
			if (oDiscountAllowance.get(oNewFuncCheckItem.getMenuItem().getDiscountItemGroupId()) == false)
				continue;
			
			// check whether the selected item is available for applying
			// discount
			if (oNewFuncCheckItem.getCheckItem().getPrice().compareTo(BigDecimal.ZERO) == 0)
				continue;
			
			oAppliedCheckDisc.setModified(true);
			PosCheckDiscountItem oCheckDiscountItem = new PosCheckDiscountItem();
			oCheckDiscountItem.setOutletId(AppGlobal.g_oFuncOutlet.get().getOutletId());
			oCheckDiscountItem.setCitmId(oNewFuncCheckItem.getCheckItem().getCitmId());
			if (oAppliedCheckDisc.getCdisId().compareTo("") > 0)
				oCheckDiscountItem.setCdisId(oAppliedCheckDisc.getCdisId());
			oNewFuncCheckItem.addCheckDiscountItemToList(iCheckDiscountIndex, oCheckDiscountItem);
			oAppliedCheckDisc.addCheckDiscountItemCount(1);
		}
	}
	
	private String autoDiscountForPayment(String sDiscountType, int iAutoDiscId, String sAutoDiscCode,
	                                      BigDecimal dDefaultDiscRateAmt, ArrayList<PosCheckExtraInfo> oPosCheckExtraInfoList) {
		PosDiscountType oDiscountType = new PosDiscountType();
		String sDiscountName;
		if (oDiscountType.getShortName(AppGlobal.g_oCurrentLangIndex.get()).isEmpty())
			sDiscountName = oDiscountType.getName(AppGlobal.g_oCurrentLangIndex.get());
		else
			sDiscountName = oDiscountType.getShortName(AppGlobal.g_oCurrentLangIndex.get());
		boolean bAskValue = false, bShowAskValue = true;
		String sInputBoxTitle = "";
		String sInputBoxMessage = "";
		BigDecimal dDiscountRateAmt = BigDecimal.ZERO;
		List<HashMap<String, Integer>> oSelectedItems = new ArrayList<HashMap<String, Integer>>();
		
		// Check having default discount amount rate
		if (dDefaultDiscRateAmt != null && dDefaultDiscRateAmt.compareTo(BigDecimal.ZERO) > 0) {
			bShowAskValue = false;
			dDiscountRateAmt = dDefaultDiscRateAmt.multiply(new BigDecimal("-1.0"));
		}
		
		// Check if there is restriction on applying multiple discounts
		if (!m_oFuncCheck.checkDiscountApplyRestriction(sDiscountType.equals("check"))) {
			// Cannot apply, skip apply
			return FUNC_RESULT_SUCCESS;
		}
		
		if (sAutoDiscCode != null && !sAutoDiscCode.isEmpty()) {
			if (!(oDiscountType.readByCode(sAutoDiscCode)))
				return FUNC_RESULT_NO_SUCH_RECORD;
		} else {
			if (!(oDiscountType.readById(iAutoDiscId)))
				return FUNC_RESULT_NO_SUCH_RECORD;
		}
		if (sDiscountType.equals("item") && oDiscountType.isFixAmountDiscountPerItemMethod()) {
			if (oDiscountType.getFixAmount().compareTo(BigDecimal.ZERO) == 0) {
				bAskValue = true;
				sInputBoxTitle = AppGlobal.g_oLang.get()._("auto_discount") + ": " + sDiscountName;
				sInputBoxMessage = AppGlobal.g_oLang.get()._("please_input_value_with_amount") + ":";
			} else
				dDiscountRateAmt = oDiscountType.getFixAmount();
		} else if (sDiscountType.equals("check") && (oDiscountType.isFixAmountDiscountPerCheckMethod()
				|| oDiscountType.isFixAmountDiscountPerItemMethod())) {
			if (oDiscountType.getFixAmount().compareTo(BigDecimal.ZERO) == 0) {
				bAskValue = true;
				sInputBoxTitle = AppGlobal.g_oLang.get()._("auto_discount") + ": " + sDiscountName;
				sInputBoxMessage = AppGlobal.g_oLang.get()._("please_input_value_with_amount") + ":";
			} else
				dDiscountRateAmt = oDiscountType.getFixAmount();
		} else if (oDiscountType.isPercentageDiscountMethod()) {
			if (oDiscountType.getRate().compareTo(BigDecimal.ZERO) == 0) {
				bAskValue = true;
				sInputBoxTitle = AppGlobal.g_oLang.get()._("auto_discount") + ": " + sDiscountName;
				sInputBoxMessage = AppGlobal.g_oLang.get()._("please_input_value_with_percentage") + ":";
			} else
				dDiscountRateAmt = oDiscountType.getRate();
		}
		
		// Ask open discount value
		if (bAskValue && bShowAskValue) {
			FormInputBox oFormInputBox = new FormInputBox(this);
			oFormInputBox.init();
			oFormInputBox.setTitle(sInputBoxTitle);
			oFormInputBox.setMessage(sInputBoxMessage);
			oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DECIMAL);
			oFormInputBox.show();
			
			String sOpenDiscountValue = oFormInputBox.getInputValue();
			if (sOpenDiscountValue == null)
				return FUNC_RESULT_FAIL;
			
			BigDecimal dValue = new BigDecimal(sOpenDiscountValue);
			if (oDiscountType.isPercentageDiscountMethod()) {
				while (dValue.compareTo(new BigDecimal("100.0")) > 0) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("invalid_input"));
					
					// Ask value again
					FormInputBox oFormDiscountInputBox = new FormInputBox(this);
					oFormDiscountInputBox.init();
					oFormDiscountInputBox.setTitle(sInputBoxTitle);
					oFormDiscountInputBox.setMessage(sInputBoxMessage);
					oFormDiscountInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DECIMAL);
					oFormDiscountInputBox.show();
					
					dValue = new BigDecimal(oFormDiscountInputBox.getInputValue());
					oFormDiscountInputBox = null;
				}
			}
			
			if (dValue.compareTo(BigDecimal.ZERO) == 0) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("zero_discount_amount"));
				return FUNC_RESULT_FAIL;
			}
			
			if (oDiscountType.isPercentageDiscountMethod())
				dDiscountRateAmt = (dValue.divide(new BigDecimal("100.0"))).multiply(new BigDecimal("-1.0"));
			else
				dDiscountRateAmt = dValue.multiply(new BigDecimal("-1.0"));
		}
		
		oSelectedItems = m_oFuncCheck.getSectionItemIndexForCurrentOrderedItem();
		
		// get the discount allowance
		List<Integer> oItemDiscountGrpList = new ArrayList<Integer>();
		HashMap<Integer, Boolean> oDiscountAllowance = new HashMap<Integer, Boolean>();
		for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
			FuncCheckItem oParentFuncCheckItem = m_oFuncCheck.getCheckItem(oSelectedItem.get("partySeq"),
					oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
			
			// Pre-checking if the item is missing in menu
			if (oParentFuncCheckItem.getMenuItem() == null) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("item_is_missing_in_menu_setup") + " ("
						+ oParentFuncCheckItem.getItemDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get()) + ")");
				return FUNC_RESULT_FAIL;
			}
			
			if (oParentFuncCheckItem.getMenuItem().getDiscountItemGroupId() != 0
					&& !oItemDiscountGrpList.contains(oParentFuncCheckItem.getMenuItem().getDiscountItemGroupId())) {
				boolean bDiscountAllowance = AppGlobal.g_oFuncDiscountAclList
						.get(AppGlobal.g_oFuncOutlet.get().getOutletId())
						.checkDiscountAcl(oParentFuncCheckItem.getMenuItem(), oDiscountType);
				oDiscountAllowance.put(oParentFuncCheckItem.getMenuItem().getDiscountItemGroupId(), bDiscountAllowance);
			}
		}
		
		List<HashMap<String, Integer>> oItemIndexList = new ArrayList<HashMap<String, Integer>>();
		for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
			FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(oSelectedItem.get("partySeq"),
					oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
			
			if (oFuncCheckItem.getMenuItem().getDiscountItemGroupId() == 0)
				continue;
			if (!oDiscountAllowance.containsKey(oFuncCheckItem.getMenuItem().getDiscountItemGroupId()))
				continue;
			if (oDiscountAllowance.get(oFuncCheckItem.getMenuItem().getDiscountItemGroupId()) == false)
				continue;
			
			// check whether the selected item is available for applying
			// discount
			if (sDiscountType.equals("item")
					&& oFuncCheckItem.getCheckItem().getTotal().compareTo(BigDecimal.ZERO) == 0)
				continue;
			
			if (sDiscountType.equals("item") && oFuncCheckItem.hasItemDiscount(false))
				continue;
			
			oItemIndexList.add(oSelectedItem);
		}
		
		// Capture discount reference
		ArrayList<PosCheckExtraInfo> oTempCheckExtraInfoList = null;
		if (oDiscountType.isAllowReference()) {
			if (oPosCheckExtraInfoList != null)
				oTempCheckExtraInfoList = new ArrayList<PosCheckExtraInfo>(oPosCheckExtraInfoList);
			oTempCheckExtraInfoList = askDiscountReference(1, oTempCheckExtraInfoList);
		} else
			oTempCheckExtraInfoList = oPosCheckExtraInfoList;
		if (!m_oFuncCheck.applyDiscount(sDiscountType, PosDiscountType.USED_FOR_DISCOUNT, oItemIndexList, oDiscountType,
				dDiscountRateAmt, oTempCheckExtraInfoList, 0))
			return FUNC_RESULT_FAIL;
		
		// if adjust payment, no need to update basket and extend bar
		if (m_iCashierMode != 3) {
			if (sDiscountType.equals("item")) {
				for (HashMap<String, Integer> oSelectedItem : oItemIndexList) {
					// Update current party basket
					if (oSelectedItem.get("partySeq") != m_oFuncCheck.getCurrentCheckPartySeq())
						continue;
					
					FuncCheckItem oParentFuncCheckItem = m_oFuncCheck.getCheckItem(oSelectedItem.get("sectionId"),
							oSelectedItem.get("itemIndex"));
					
					// Update basket
					this.updateBasketItemPrice(oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"),
							oParentFuncCheckItem);
					this.updateBasketItemInfo(oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
				}
			} else
				// Update extend bar
				this.updateBasketExtendBarCheckTotal();
		}
		
		return FUNC_RESULT_SUCCESS;
	}
	
	// Call Void Discount lookup for current check party
	private void callVoidDiscountLookupForMultiItem(String sDiscountType, String sUsedFor,
	                                                List<HashMap<String, Integer>> oSelectedItems) {
		String sVoidLookupDescription = "";
		int iDiscountIndex = 0;
		boolean bShowVoidReasonLookup = false;
		List<HashMap<String, Integer>> oUpdateItemIndexList = new ArrayList<HashMap<String, Integer>>();
		
		if (sDiscountType.equals("item")) {
			if (oSelectedItems.size() <= 0) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("no_selected_items") + System.lineSeparator()
						+ AppGlobal.g_oLang.get()._("action_aborted"));
				return;
			}
			
			// Check if the item discount is attached to CRM voucher
			for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
				FuncCheckItem oSelectedFuncCheckItem = m_oFuncCheck.getCheckItem(oSelectedItem.get("sectionId"),
						oSelectedItem.get("itemIndex"));
				
				List<PosCheckDiscount> oCurrentDiscountList = oSelectedFuncCheckItem.getItemDiscountList();
				for (PosCheckDiscount oPosCheckDiscount : oCurrentDiscountList) {
					for (PosCheckExtraInfo oPosCheckExtraInfo : oPosCheckDiscount.getCheckExtraInfoList()) {
						if (oPosCheckExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_VOUCHER_TYPE)) {
							if (oPosCheckExtraInfo.getValue().compareToIgnoreCase("iddiscount") == 0
									|| oPosCheckExtraInfo.getValue().compareToIgnoreCase("pdiscount") == 0
									|| oPosCheckExtraInfo.getValue().compareToIgnoreCase("ddiscount") == 0
									|| oPosCheckExtraInfo.getValue().compareToIgnoreCase("bddiscount") == 0) {
								showErrorDialogBox(AppGlobal.g_oLang.get()._("please_void_the_attached_voucher_first"));
								return;
							}
						}
					}
				}
			}
			
			String sItemListName = "";
			int iItemCount = 0;
			for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
				FuncCheckItem oSelectedFuncCheckItem = m_oFuncCheck.getCheckItem(oSelectedItem.get("sectionId"),
						oSelectedItem.get("itemIndex"));
				if (iItemCount > 0)
					sItemListName += ", ";
				sItemListName += oSelectedFuncCheckItem
						.getItemShortDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get());
				iItemCount++;
			}
			
			// Check if there is any old item
			for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
				FuncCheckItem oParentFuncCheckItem = m_oFuncCheck.getCheckItem(oSelectedItem.get("sectionId"),
						oSelectedItem.get("itemIndex"));
				
				if (oParentFuncCheckItem.isOldItem() && oParentFuncCheckItem.hasItemDiscount(true)) {
					bShowVoidReasonLookup = true;
					break;
				}
			}
			
			sVoidLookupDescription = AppGlobal.g_oLang.get()._("please_select_the_void_item_discount_reason_for") + " "
					+ sItemListName;
			iDiscountIndex = 0; // only one item discount can be applied
			
		} else {
			PosCheckDiscount oPosCheckDiscount = null;
			List<PosCheckDiscount> oAppliedCheckPartyDiscountList = m_oFuncCheck.getCurrentPartyAppliedCheckDiscount();
			HashMap<Integer, PosCheckDiscount> oAvailableAppliedCheckPartyDiscountList = new HashMap<Integer, PosCheckDiscount>();
			
			if (oAppliedCheckPartyDiscountList.isEmpty()) {
				String sDesc = "";
				if (sUsedFor.equals(PosDiscountType.USED_FOR_DISCOUNT))
					sDesc = AppGlobal.g_oLang.get()._("no_check_discount_applied");
				else
					sDesc = AppGlobal.g_oLang.get()._("no_check_extra_charge_applied");
				showErrorDialogBox(sDesc);
				return;
			} else {
				// Trim out irrelevant check discounts, show discount list or
				// extra charge list only
				for (PosCheckDiscount oCheckDiscount : oAppliedCheckPartyDiscountList) {
					PosCheckExtraInfo oPosCheckExtraInfo = null;
					oPosCheckExtraInfo = oCheckDiscount.getExtraInfoFromList(
							PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0);
					if (oPosCheckExtraInfo != null) {
						oPosCheckExtraInfo = oCheckDiscount.getExtraInfoFromList(
								PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_VOUCHER_TYPE,
								0);
						if (oPosCheckExtraInfo != null && (
								oPosCheckExtraInfo.getValue().compareToIgnoreCase("pdiscount") == 0
										|| oPosCheckExtraInfo.getValue().compareToIgnoreCase("ddiscount") == 0
										|| oPosCheckExtraInfo.getValue().compareToIgnoreCase("bddiscount") == 0)) {
							showErrorDialogBox(AppGlobal.g_oLang.get()._("please_void_the_attached_voucher_first"));
							return;
						}
					}
					
					if ((sUsedFor.equals(PosDiscountType.USED_FOR_DISCOUNT) && !oCheckDiscount.isUsedForDiscount())
							|| (sUsedFor.equals(PosDiscountType.USED_FOR_EXTRA_CHARGE)
							&& !oCheckDiscount.isUsedForExtraCharge()))
						continue;
					
					oAvailableAppliedCheckPartyDiscountList.put(oCheckDiscount.getSeq(), oCheckDiscount);
				}
				
				if (oAvailableAppliedCheckPartyDiscountList.isEmpty()) {
					String sDesc = "";
					if (sUsedFor.equals(PosDiscountType.USED_FOR_DISCOUNT))
						sDesc = AppGlobal.g_oLang.get()._("no_check_discount_applied");
					else
						sDesc = AppGlobal.g_oLang.get()._("no_check_extra_charge_applied");
					showErrorDialogBox(sDesc);
					return;
				}
			}
			
			String sTitle = "";
			if (sUsedFor.equals(PosDiscountType.USED_FOR_DISCOUNT)) {
				sTitle = AppGlobal.g_oLang.get()._("please_select_the_check_discount_to_be_voided");
				sVoidLookupDescription = AppGlobal.g_oLang.get()._("please_select_the_void_check_discount_reason");
			} else {
				sTitle = AppGlobal.g_oLang.get()._("please_select_the_check_extra_charge_to_be_voided");
				sVoidLookupDescription = AppGlobal.g_oLang.get()._("please_select_the_void_check_extra_charge_reason");
			}
			
			// show applied check discount for voided
			if (oAvailableAppliedCheckPartyDiscountList.size() == 1) {
				for (Map.Entry<Integer, PosCheckDiscount> entry : oAvailableAppliedCheckPartyDiscountList.entrySet())
					iDiscountIndex = entry.getKey();
			} else {
				int iPartyCheckDiscountCnt = 0;
				ArrayList<String> oOptionList = new ArrayList<String>();
				HashMap<Integer, Integer> oPartyCheckDiscIndexList = new HashMap<Integer, Integer>();
				
				for (Map.Entry<Integer, PosCheckDiscount> entry : oAvailableAppliedCheckPartyDiscountList.entrySet()) {
					oOptionList.add(entry.getValue().getName(AppGlobal.g_oCurrentLangIndex.get()));
					oPartyCheckDiscIndexList.put(Integer.valueOf(iPartyCheckDiscountCnt), entry.getKey());
					iPartyCheckDiscountCnt++;
				}
				
				FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
				oFormSelectionBox.initWithSingleSelection(sTitle, oOptionList, false);
				oFormSelectionBox.show();
				
				if (oFormSelectionBox.isUserCancel())
					return;
				else
					iDiscountIndex = oPartyCheckDiscIndexList.get(oFormSelectionBox.getResultList().get(0));
			}
			
			// check whether it is old check discount
			oPosCheckDiscount = oAvailableAppliedCheckPartyDiscountList.get(iDiscountIndex);
			if (oPosCheckDiscount.getCdisId().compareTo("") > 0)
				bShowVoidReasonLookup = true;
		}
		
		PosVoidReason oVoidReason = null;
		if (oVoidReason == null && bShowVoidReasonLookup) {
			// Ask void code for first old item found
			oVoidReason = this.callVoidReasonLookup(AppGlobal.g_oLang.get()._("void_reason"), sVoidLookupDescription,
					PosVoidReason.TYPE_VOID_DISCOUNT);
			if (oVoidReason == null)
				return;
		}
		
		// Prepare the the item list for void discount process
		if (sDiscountType.equals("item")) {
			for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
				FuncCheckItem oParentFuncCheckItem = m_oFuncCheck.getCheckItem(oSelectedItem.get("sectionId"),
						oSelectedItem.get("itemIndex"));
				
				if (oParentFuncCheckItem.hasItemDiscount(true) == false)
					continue;
				
				oUpdateItemIndexList.add(oSelectedItem);
			}
		} else
			oUpdateItemIndexList = m_oFuncCheck.getSectionItemIndexWithAppliedCheckDiscount(iDiscountIndex);
		
		if (bShowVoidReasonLookup) {
			if (!m_oFuncCheck.voidDiscount(sDiscountType, sUsedFor, oUpdateItemIndexList, iDiscountIndex,
					oVoidReason.getVdrsId(), oVoidReason.getName(AppGlobal.g_oCurrentLangIndex.get())))
				return;
		} else {
			if (!m_oFuncCheck.voidDiscount(sDiscountType, sUsedFor, oUpdateItemIndexList, iDiscountIndex, 0, null))
				return;
		}
		
		for (HashMap<String, Integer> oSelectedItem : oUpdateItemIndexList) {
			FuncCheckItem oParentFuncCheckItem = m_oFuncCheck.getCheckItem(oSelectedItem.get("sectionId"),
					oSelectedItem.get("itemIndex"));
			
			// Update basket
			this.updateBasketItemPrice(oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"),
					oParentFuncCheckItem);
			this.updateBasketItemInfo(oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
		}
	}
	
	// Call Pantry Message lookup for current check party
	private void callPantryMessageLookupForMultiItem(List<HashMap<String, Integer>> oSelectedItems) {
		List<HashMap<String, Object>> oLookupArray = new ArrayList<HashMap<String, Object>>();
		List<FuncLookupButtonInfo> oContentLookupList = new ArrayList<FuncLookupButtonInfo>();
		HashMap<String, Object> oLookupData = new HashMap<String, Object>();
		
		PosPantryMessageList oPantryMesgList = new PosPantryMessageList();
		
		if (oSelectedItems.size() <= 0) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("no_selected_items") + System.lineSeparator()
					+ AppGlobal.g_oLang.get()._("action_aborted"));
			return;
		}
		
		String sItemListName = "";
		int iItemCount = 0;
		for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
			FuncCheckItem oSelectedFuncCheckItem = m_oFuncCheck.getCheckItem(oSelectedItem.get("sectionId"),
					oSelectedItem.get("itemIndex"));
			if (iItemCount > 0)
				sItemListName += ", ";
			sItemListName += oSelectedFuncCheckItem.getItemShortDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get());
			iItemCount++;
		}
		
		oPantryMesgList.readAll();
		
		// form the lookup data list
		for (PosPantryMessage oPantryMesg : oPantryMesgList.getPosPantryMessageList().values()) {
			FuncLookupButtonInfo oLookupButtonInfo = new FuncLookupButtonInfo();
			String[] sNameArray = new String[AppGlobal.LANGUAGE_COUNT];
			for (int i = 0; i < AppGlobal.LANGUAGE_COUNT; i++) {
				int iBilingualLangIndex = AppGlobal.g_oFuncOutlet.get().getBilingualLangIndexByeLangIndex(i + 1);
				sNameArray[i] = oPantryMesg.getBilingualName(i + 1, iBilingualLangIndex);
			}
			oLookupButtonInfo.setName(sNameArray);
			oLookupButtonInfo.setType(PosDisplayPanelLookup.TYPE_HOT_ITEM);
			oLookupButtonInfo.setId(oPantryMesg.getPanmId());
			oLookupButtonInfo.setSeq(oPantryMesg.getSeq());
			oContentLookupList.add(oLookupButtonInfo);
		}
		
		oLookupData.put(FormCommonLookup.COMMON_LOOKUP_NAME, AppGlobal.g_oLang.get()._("pantry_message"));
		oLookupData.put(FormCommonLookup.COMMON_LOOKUP_DATA_LIST, oContentLookupList);
		oLookupArray.add(oLookupData);
		
		FormCommonLookup oFormCommonLookup = new FormCommonLookup(this);
		oFormCommonLookup.setLabelTitleBar(AppGlobal.g_oLang.get()._("pantry_message"));
		oFormCommonLookup.setLabelDescBar(
				AppGlobal.g_oLang.get()._("please_select_the_pantry_message_for") + " " + sItemListName);
		oFormCommonLookup.setSingleSelection(true);
		oFormCommonLookup.createTabsAndLookupButtons(oLookupArray);
		oFormCommonLookup.show();
		
		if (oFormCommonLookup.getSelectedItems().size() > 0) {
			List<JSONObject> oSelectedPantryMesgList = oFormCommonLookup.getSelectedItems();
			for (JSONObject oPantryMessage : oSelectedPantryMesgList) {
				int iPantryMesgeId = oPantryMessage.optInt(FormCommonLookup.SELECTED_ITEM_ID);
				PosPantryMessage oSelectedPantryMessage = oPantryMesgList.getPosPantryMessageByIndex(iPantryMesgeId);
				
				// check and prepare the item list for pantry message
				FormProcessBox oFormProcessBox = new FormProcessBox(this);
				List<HashMap<String, Integer>> oUpdateItemIndexList = new ArrayList<HashMap<String, Integer>>();
				for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
					FuncCheckItem oParentFuncCheckItem = m_oFuncCheck.getCheckItem(oSelectedItem.get("sectionId"),
							oSelectedItem.get("itemIndex"));
					
					// Check whether selected item is new item
					if (!oParentFuncCheckItem.isOldItem()) {
						oFormProcessBox.setMessage(AppGlobal.g_oLang.get()._("invalid_for_new_items"));
						oFormProcessBox.showWithoutRemoveUI();
						continue;
					}
					
					if (!oParentFuncCheckItem.isPendingItem() || oParentFuncCheckItem.isPartialPendingItem())
						oUpdateItemIndexList.add(oSelectedItem);
					
					// Add log to action log list
					AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.pantry_message.name(),
							PosActionLog.ACTION_RESULT_SUCCESS, m_oFuncCheck.getTableNoWithExtensionForDisplay(),
							AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
							AppGlobal.g_oFuncOutlet.get().getOutletId(),
							AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
							AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
							AppGlobal.g_oFuncStation.get().getStationId(), m_oFuncCheck.getCheckId(), "",
							oParentFuncCheckItem.getCheckItem().getCitmId(), "", "",
							"PanmId:" + oSelectedPantryMessage.getPanmId());
				}
				
				oFormProcessBox.setMessage(AppGlobal.g_oLang.get()._("select_pantry_message") + System.lineSeparator()
						+ oSelectedPantryMessage.getName(AppGlobal.g_oCurrentLangIndex.get()));
				oFormProcessBox.showWithoutRemoveUI();
				List<HashMap<String, Object>> oUpdatedItemInfoList = m_oFuncCheck.pantryMessage(
						oSelectedPantryMessage.getPanmId(),
						oSelectedPantryMessage.getName(AppGlobal.g_oCurrentLangIndex.get()), oUpdateItemIndexList,
						m_oFuncKitchenMonitor.isSupportKitchenMonitor());
				if (m_oFuncKitchenMonitor.isSupportKitchenMonitor() && oUpdatedItemInfoList != null
						&& !oUpdatedItemInfoList.isEmpty()) {
					this.processKitchenMonitorQsrAddItem(null, null, null, false, oUpdatedItemInfoList);
				}
				oFormProcessBox.closeShowWithoutRemoveUI();
				
				if (m_oFrameOrderingBasket.isShowPantryMessage()) {
					for (HashMap<String, Integer> oSelectedItem : oUpdateItemIndexList) {
						// Update current party basket
						if (oSelectedItem.get("partySeq") != m_oFuncCheck.getCurrentCheckPartySeq())
							continue;
						
						// Update basket
						this.updateBasketItemInfo(oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
					}
				}
			}
			
			// handle action log
			AppGlobal.g_oActionLog.get().handleActionLog(false);
		}
	}
	
	// Add or waive service charge and/or tax
	private void addWaiveScTax(boolean bAddScTax, List<HashMap<String, Integer>> oSelectedItems) {
		int i = 0, iOptionCount = 0;
		boolean[] bShowSc = new boolean[5], bChosenSc = new boolean[5];
		boolean[] bShowTax = new boolean[25];
		String[] sChosenTax = new String[25];
		int[] iOptionMapping = new int[30];
		PosCheckItem oSelectedCheckItem = null;
		ArrayList<String> oOptionList = new ArrayList<String>();
		
		// checking whether chosen any items
		if (oSelectedItems.isEmpty()) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("no_selected_items") + System.lineSeparator()
					+ AppGlobal.g_oLang.get()._("action_aborted"));
			return;
		}
		
		for (i = 0; i < 5; i++) {
			bShowSc[i] = false;
			bChosenSc[i] = false;
		}
		for (i = 0; i < 25; i++) {
			bShowTax[i] = false;
			sChosenTax[i] = PosOverrideCondition.CHARGE_TAX_NO_CHANGE;
		}
		for (i = 0; i < 30; i++)
			iOptionMapping[i] = 0;
		
		// check whether provide selection of sc / tax
		if (bAddScTax) {
			oOptionList.add(AppGlobal.g_oLang.get()._("resume_item_both_service_charges_and_taxes"));
			oOptionList.add(AppGlobal.g_oLang.get()._("resume_item_all_service_charges"));
			oOptionList.add(AppGlobal.g_oLang.get()._("resume_item_all_taxes"));
			
			PosBusinessDay oBusinessDay = AppGlobal.g_oFuncOutlet.get().getBusinessDay();
			
			for (i = 1; i <= 5; i++) {
				if (oBusinessDay.getSc(i).compareTo(BigDecimal.ZERO) > 0)
					bShowSc[(i - 1)] = true;
			}
			
			for (i = 1; i <= 25; i++) {
				if (oBusinessDay.getTax(i).compareTo(BigDecimal.ZERO) > 0)
					bShowTax[(i - 1)] = true;
			}
		} else {
			oOptionList.add(AppGlobal.g_oLang.get()._("waive_both_service_charges_and_taxes"));
			oOptionList.add(AppGlobal.g_oLang.get()._("waive_all_service_chrages"));
			oOptionList.add(AppGlobal.g_oLang.get()._("waive_all_taxes"));
			
			for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
				oSelectedCheckItem = m_oFuncCheck.getCheckItem(oSelectedItem.get("partySeq"),
						oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex")).getCheckItem();
				
				for (i = 1; i <= 5; i++) {
					if (!oSelectedCheckItem.getChargeSc(i).equals(PosCheckItem.CHARGE_SC_NO))
						bShowSc[(i - 1)] = true;
				}
				for (i = 1; i <= 25; i++) {
					if (!oSelectedCheckItem.getChargeTax(i).equals(PosCheckItem.CHARGE_TAX_NO))
						bShowTax[(i - 1)] = true;
				}
			}
		}
		
		// show a list of sc/tax allowable to waive/add
		iOptionCount = 0;
		PosTaxScTypeList oScList = new PosTaxScTypeList();
		oScList.getAllServiceCharges();
		HashMap<Integer, PosTaxScType> oScTypeList = oScList.getTaxScTypeList();
		for (i = 0; i < 5; i++) {
			if (bShowSc[i]) {
				if (oScTypeList.containsKey(i + 1)) {
					oOptionList.add(oScTypeList.get(i + 1).getName(AppGlobal.g_oCurrentLangIndex.get()));
					iOptionMapping[iOptionCount] = (i + 1);
					iOptionCount++;
				}
			}
		}
		PosTaxScTypeList oTaxList = new PosTaxScTypeList();
		oTaxList.getAllTaxes();
		HashMap<Integer, PosTaxScType> oTaxTypeList = oTaxList.getTaxScTypeList();
		for (i = 0; i < 25; i++) {
			if (bShowTax[i]) {
				if (oTaxTypeList.containsKey(i + 1)) {
					oOptionList.add(oTaxTypeList.get(i + 1).getName(AppGlobal.g_oCurrentLangIndex.get()));
					iOptionMapping[iOptionCount] = (i + 5 + 1);
					iOptionCount++;
				}
			}
		}
		
		FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
		if (bAddScTax)
			oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select_the_sc_tax_to_be_added"),
					oOptionList, false);
		else
			oFormSelectionBox.initWithSingleSelection(
					AppGlobal.g_oLang.get()._("please_select_the_sc_tax_to_be_waived"), oOptionList, false);
		oFormSelectionBox.show();
		if (oFormSelectionBox.isUserCancel()) {
			// System.out.println("oFormSelectionBox-Cancel");
		} else {
			ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
			
			if (bAddScTax) {
				if (oSelectionBoxResult.get(0) == 0) {
					// select all service charges and taxes
					for (i = 0; i < 5; i++)
						bChosenSc[i] = allowChargeScTax(i, true, oSelectedItems);
					
					for (i = 0; i < 25; i++){
						if(allowChargeScTax(i, false, oSelectedItems))
							sChosenTax[i] = PosOverrideCondition.CHARGE_TAX_CHARGE;
						else
							sChosenTax[i] = PosOverrideCondition.CHARGE_TAX_NO_CHANGE;
					}
				} else if (oSelectionBoxResult.get(0) == 1) {
					// select all service charges
					for (i = 0; i < 5; i++)
						bChosenSc[i] = allowChargeScTax(i, true, oSelectedItems);
				} else if (oSelectionBoxResult.get(0) == 2) {
					// selected all taxes
					for (i = 0; i < 25; i++){
						if(allowChargeScTax(i, false, oSelectedItems))
							sChosenTax[i] = PosOverrideCondition.CHARGE_TAX_CHARGE;
						else
							sChosenTax[i] = PosOverrideCondition.CHARGE_TAX_NO_CHANGE;
					}
				} else if (oSelectionBoxResult.get(0) >= 3) {
					// selected single service charge / tax
					int chosenIndex = iOptionMapping[(oSelectionBoxResult.get(0) - 3)];
					if (chosenIndex >= 1 && chosenIndex <= 5)
						bChosenSc[(chosenIndex - 1)] = true;
					else if (chosenIndex >= 6 && chosenIndex <= 30)
						sChosenTax[(chosenIndex - 5 - 1)] = PosOverrideCondition.CHARGE_TAX_CHARGE;
				}
			} else {
				if (oSelectionBoxResult.get(0) == 0) {
					// select all service charges and taxes
					for (i = 0; i < 5; i++)
						bChosenSc[i] = true;
					for (i = 0; i < 25; i++)
						sChosenTax[i] = PosOverrideCondition.CHARGE_TAX_WAIVE;
				} else if (oSelectionBoxResult.get(0) == 1) {
					// select all service charges
					for (i = 0; i < 5; i++)
						bChosenSc[i] = true;
				} else if (oSelectionBoxResult.get(0) == 2) {
					// selected all taxes
					for (i = 0; i < 25; i++)
						sChosenTax[i] = PosOverrideCondition.CHARGE_TAX_WAIVE;
				} else if (oSelectionBoxResult.get(0) >= 3) {
					// selected single service charge / tax
					int chosenIndex = iOptionMapping[(oSelectionBoxResult.get(0) - 3)];
					if (chosenIndex >= 1 && chosenIndex <= 5)
						bChosenSc[(chosenIndex - 1)] = true;
					else if (chosenIndex >= 6 && chosenIndex <= 30)
						sChosenTax[(chosenIndex - 5 -1)] = PosOverrideCondition.CHARGE_TAX_WAIVE;
				}
			}
			if (!m_oFuncCheck.addWaiveScTax(bAddScTax, oSelectedItems, bChosenSc, sChosenTax))
				return;
			
			for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
				int iSectionId = oSelectedItem.get("sectionId");
				int iItemIndex = oSelectedItem.get("itemIndex");
				this.updateBasketItemInfo(iSectionId, iItemIndex);
			}
			// Update basket
			for (i = 0; i <= AppGlobal.MAX_SEATS; i++) {
				// Create ordering basket section for seat
				ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck.getItemList(i);
				
				if (oFuncCheckItemList != null && oFuncCheckItemList.size() > 0) { // Has ordered items in seat i
					for (int j = 0; j < oFuncCheckItemList.size(); j++) {
						FuncCheckItem oFuncCheckItem = oFuncCheckItemList.get(j);
						updateBasketItemPrice(i, j, oFuncCheckItem);
					}
				}
			}
			this.updateBasketExtendBarCheckTotal();
			
			// handle action log
			AppGlobal.g_oActionLog.get().handleActionLog(false);
		}
	}
	
	// Check whether check item is allowed to charge sc/tax
	private boolean allowChargeScTax(int iIndex, boolean scTax, List<HashMap<String, Integer>> oSelectedItems) {
		if (scTax) {
			for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
				MenuItem oSelectedMenuItem = m_oFuncCheck.getCheckItem(oSelectedItem.get("partySeq"),
						oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex")).getMenuItem();
				
				if (oSelectedMenuItem.getChargeSc(iIndex).equals(MenuItem.CHARGE_SC_NO) == false)
					return true;
			}
		} else {
			for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
				MenuItem oSelectedMenuItem = m_oFuncCheck.getCheckItem(oSelectedItem.get("partySeq"),
						oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex")).getMenuItem();
				
				if (oSelectedMenuItem.getChargeTax(iIndex).equals(MenuItem.CHARGE_TAX_NO) == false)
					return true;
			}
		}
		
		return false;
	}
	
	// Toogle the basket selection mode
	// iSelectType 0: no restriction
	// 1: Select new item only
	// 2: Select old item only
	// iSelectMode: 0: normal ordering basket display
	// 1: single selection
	// 2: multiple selection with tick box
	private void toggleBacketMultiSelectMode(boolean bStart, String sFunctionKey, int iSelectType, int iSelectMode) {
		if (bStart) {
			/*
			 * Hidden unnecessary item when 1. waive tax/sc 2. void discount 3.
			 * add discount 4. pantry message 5. add tax/sc 6. select pending
			 * item 7. print pending item
			 */
			if (!checkItemVisibility(sFunctionKey)) { // No available items that can apply
				showErrorDialogBox(AppGlobal.g_oLang.get()._("no_available_items"));
				return;
			}
			m_oBasketSelectedItems.clear();
			m_iBasketSelectMode = iSelectMode;
			m_sCurrentFunctionKey = sFunctionKey;
			m_iBasketSelectType = iSelectType;
			m_oFrameCover.setVisible(true);
			m_oFrameCover.bringToTop();
			// resize the background cover frame
			m_oFrameCover.setTop(m_oFrameStationInfoBar.getHeight());
			m_oFrameCover.setLeft(0);
			m_oFrameCover.setWidth(m_oFrameStationInfoBar.getWidth());
			int iOriHeight = m_oFrameCover.getHeight();
			m_oFrameCover.setHeight(iOriHeight - m_oFrameStationInfoBar.getHeight());
			m_oFrameStationInfoBarCover.setVisible(true);
			m_oFrameStationInfoBarCover.bringToTop();
			m_oFrameBasketSelectPanel.setVisible(true);
			m_oFrameBasketSelectPanel.resetButtonsDesc();
			// To check whether the function is allowed at self-kiosk mode
			boolean bIsAllowedInSelfKiosk = (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) && sFunctionKey.equals(AppGlobal.FUNC_LIST.takeout.name())) ? true : false;
			boolean bHideSelectAll = ((AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) && !bIsAllowedInSelfKiosk) || sFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name()) || sFunctionKey.equals(AppGlobal.FUNC_LIST.split_item_with_quantity.name()))? true: false;
			boolean bHideConfirm = ((sFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name()) || sFunctionKey.equals(AppGlobal.FUNC_LIST.print_pending_item_with_quantity.name())))? true: false;
			
			m_oFrameBasketSelectPanel.hideButton(bHideSelectAll, bHideConfirm);
			m_oFrameBasketSelectPanel.bringToTop();
			// Store the original basket top
			m_iOriginalBasketTop = m_oFrameOrderingBasket.getTop();
			// Store the original basket height
			m_iOriginalBasketHeight = m_oFrameOrderingBasket.getHeight();
			// Set the basket top
			m_oFrameOrderingBasket.setTop(m_iOriginalBasketTop + 50);
			// Set the basket height
			int iExtendedHeight = m_oFrameOrderingPanel.getHeight() - m_iOriginalBasketHeight;
			m_oFrameOrderingBasket.setHeight(m_oFrameOrderingPanel.getHeight());
			m_oFrameOrderingBasket.extendBasket(iExtendedHeight);
			
			m_oFrameOrderingBasket.bringToTop();
			
			// Hide the ordering basket extra info
			m_oFrameOrderingBasket.showOrderingBasketExtraInfoFrame(false);
			
			// Set item selection
			setItemSelected(sFunctionKey);
		} else {
			m_oFrameCover.setVisible(false);
			if(!m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name()))
				m_oFrameStationInfoBarCover.setVisible(false);
			// restore the background cover frame
			restoreFrameCoverMaxSizeAndPosition();
			m_oFrameBasketSelectPanel.setVisible(false);
			m_iBasketSelectMode = FrameBasketSelectPanel.BASKET_SELECT_MODE_NO;
			if (m_iOriginalBasketHeight > 0) {
				int iExtendedHeight = m_oFrameOrderingPanel.getHeight() - m_iOriginalBasketHeight;
				m_oFrameOrderingBasket.setTop(m_iOriginalBasketTop);
				m_oFrameOrderingBasket.setHeight(m_iOriginalBasketHeight);
				m_oFrameOrderingBasket.minimizeBasket(iExtendedHeight);
				m_iOriginalBasketHeight = 0;
			}
			
			// show the ordering basket extra info
			m_oFrameOrderingBasket.showOrderingBasketExtraInfoFrame(true);
			redisplayBasket(m_sCurrentOrderingBasketMode);
			
			// Set all item to original
			m_oFrameOrderingBasket.setAllSelected(m_iBasketSelectType, FrameOrderingBasket.SHOW_TYPE_HIDDEN);
			
			if (m_oFrameTabBar != null && m_oFrameTabBar.getSelectedTabIdx() > 0)
				frameTabBar_tabClicked(m_oFrameTabBar.getSelectedTabIdx());
		}
	}
	
	private boolean checkItemVisibility(String sFunctionKey) {
		int iRemainItemCount = 0;
		for (int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
			ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck.getItemList(i);
			
			if (oFuncCheckItemList != null && oFuncCheckItemList.size() > 0) {
				iRemainItemCount += oFuncCheckItemList.size();
				
				int iHiddenItemCount = 0;
				for (int j = 0; j < oFuncCheckItemList.size(); j++) {
					FuncCheckItem oFuncCheckItem = oFuncCheckItemList.get(j);
					
					if ((sFunctionKey.equals(AppGlobal.FUNC_LIST.waive_sc_tax.name())
							&& (oFuncCheckItem.isSetMenuItem() && oFuncCheckItem.isSumUpChildItemToParent())) // Waive tax/sc, not show item that don't have both tax & sc
							|| (sFunctionKey.equals(AppGlobal.FUNC_LIST.item_void_discount_multiple_items.name())
							&& (!oFuncCheckItem.hasItemDiscount(false) || (oFuncCheckItem.isSetMenuItem()
							&& oFuncCheckItem.isSumUpChildItemToParent()))) // Void discount, not show item that don't have discount
							|| (sFunctionKey.equals(AppGlobal.FUNC_LIST.item_discount_multiple_items.name())
							&& (oFuncCheckItem.hasItemDiscount(false) || (oFuncCheckItem.isSetMenuItem()
							&& oFuncCheckItem.isSumUpChildItemToParent()))) // add discount, not show item that already had discount
							|| (sFunctionKey.equals(AppGlobal.FUNC_LIST.split_item_to_other_table.name())
							&& oFuncCheckItem.isSetMenuItem()) // Split item to other table, not show child item
							|| (sFunctionKey.equals(AppGlobal.FUNC_LIST.split_item_with_quantity.name())
							&& (oFuncCheckItem.hasItemDiscount(false)
							|| oFuncCheckItem.isMembershipVoucherItem()
							|| (oFuncCheckItem.getExtraInfoByVariable(PosCheckExtraInfo.VARIABLE_INTERFACE_ID) != null
							&& !oFuncCheckItem.getExtraInfoByVariable(PosCheckExtraInfo.VARIABLE_INTERFACE_ID).isEmpty())
							|| oFuncCheckItem.isSetMenuItem())) // not show item if item has discount, is membership item and contains interfaceId
							|| (sFunctionKey.equals(AppGlobal.FUNC_LIST.pantry_message.name())
							&& !oFuncCheckItem.isOldItem()) // pantry message, not show new item
							|| (sFunctionKey.equals(AppGlobal.FUNC_LIST.add_sc_tax.name())
							&& (oFuncCheckItem.isSetMenuItem() && oFuncCheckItem.isSumUpChildItemToParent())) // Add tax/sc, not show child item
							|| (sFunctionKey.equals(AppGlobal.FUNC_LIST.takeout.name()) && oFuncCheckItem.isOldItem()) // takeout, not show old item
							|| (sFunctionKey.equals(AppGlobal.FUNC_LIST.mark_delivery.name())
							&& !oFuncCheckItem.isOldItem()) // mark delivery, not show new item
							|| (sFunctionKey.equals(AppGlobal.FUNC_LIST.delete_multiple_item.name())
							&& (oFuncCheckItem.isSetMenuItem() && oFuncCheckItem.isSumUpChildItemToParent())) // delete multiple items, not show child item
							|| (sFunctionKey.equals(AppGlobal.FUNC_LIST.new_item_no_kitchen_slip.name())
							&& (oFuncCheckItem.isOldItem())) // no kitchen slip, not show old item
							|| (sFunctionKey.equals(AppGlobal.FUNC_LIST.repeat_multiple_items.name())
							&& oFuncCheckItem.isSetMenuItem()) // repeat item, not show child item
							|| (sFunctionKey.equals(AppGlobal.FUNC_LIST.print_pending_item.name())
							&& !oFuncCheckItem.isPendingItem()) // print pending item, not show non-pending item
							|| (sFunctionKey.equals(AppGlobal.FUNC_LIST.print_pending_item_with_quantity.name())
							&& !oFuncCheckItem.isPendingItem()) // print pending item with quantity, not show non-pending item
							|| (sFunctionKey.equals(AppGlobal.FUNC_LIST.change_ordered_item_price_level.name())
							&& (oFuncCheckItem.hasItemDiscount(false) || oFuncCheckItem.isSetMenuItem())) // add discount, not show item that already had discount
							|| (sFunctionKey.equals(AppGlobal.FUNC_LIST.refund_item.name())
							&& (oFuncCheckItem.isSetMenuItem())) // refund items, not show child item
							|| oFuncCheckItem.isMinimumChargeItem()
							|| (sFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name()) // split revenue, only show normal item
							&& (!oFuncCheckItem.getCheckItem().isBasicItem() || oFuncCheckItem.isSetMenuItem()))) {
						m_oFrameOrderingBasket.setSectionCellVisible(i, j, false);
						iHiddenItemCount++;
					}
				}
				
				iRemainItemCount -= iHiddenItemCount;
				if (iHiddenItemCount == oFuncCheckItemList.size()) // all items in section are unavailable
					m_oFrameOrderingBasket.setSectionVisible(i, false);
			}
		}
		
		if (iRemainItemCount == 0) { // No available items can perform action
			redisplayBasket(FrameOrderingBasket.ORDERING_BASKET_MODE_SHOW_NORMAL);
			return false;
		} else
			return true;
	}
	
	private void setItemSelected(String sFunctionKey) {
		if (sFunctionKey.equals(AppGlobal.FUNC_LIST.new_item_no_kitchen_slip.name())) {
			for (int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
				ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck.getItemList(i);
				
				if (oFuncCheckItemList != null && oFuncCheckItemList.size() > 0) {
					for (int j = 0; j < oFuncCheckItemList.size(); j++) {
						String sKey = i + "_" + j;
						FuncCheckItem oFuncCheckItem = oFuncCheckItemList.get(j);
						if (oFuncCheckItem.isNoKitchenSlip()) {
							m_oFrameOrderingBasket.setSelected(i, j, FrameOrderingBasket.SELECT_TYPE_NEW_ITEM, FrameOrderingBasket.SHOW_TYPE_SELECT);
							m_oBasketSelectedItems.put(sKey, 0);
						} else
							m_oFrameOrderingBasket.setSelected(i, j, FrameOrderingBasket.SELECT_TYPE_NEW_ITEM, FrameOrderingBasket.SHOW_TYPE_UNSELECT);
					}
				}
			}
		} else if (sFunctionKey.equals(AppGlobal.FUNC_LIST.select_pending_item.name())) {
			for (int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
				ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck.getItemList(i);
				
				if (oFuncCheckItemList != null && oFuncCheckItemList.size() > 0) {
					for (int j = 0; j < oFuncCheckItemList.size(); j++) {
						if (oFuncCheckItemList.get(j).isPendingItem()) {
							String sKey = i + "_" + j;
							m_oFrameOrderingBasket.setSelected(i, j, FrameOrderingBasket.SELECT_TYPE_NEW_ITEM, FrameOrderingBasket.SHOW_TYPE_SELECT);
							m_oBasketSelectedItems.put(sKey, 0);
						} else
							m_oFrameOrderingBasket.setSelected(i, j, FrameOrderingBasket.SELECT_TYPE_NEW_ITEM, FrameOrderingBasket.SHOW_TYPE_UNSELECT);
					}
				}
			}
		} else if (sFunctionKey.equals(AppGlobal.FUNC_LIST.split_item_with_quantity.name())) {
			// Set all item to deselected
			m_oFrameOrderingBasket.setAllSelected(m_iBasketSelectType, FrameOrderingBasket.SHOW_TYPE_UNSELECTWITHQUANTITY);
		} else {
			// Set all item to deselected
			m_oFrameOrderingBasket.setAllSelected(m_iBasketSelectType, FrameOrderingBasket.SHOW_TYPE_UNSELECT);
		}
	}
	
	private void redisplayBasket(String sCurrentOrderingBasketMode) {
		FrameOrderingBasket oFrameOrderingBasket = m_oFrameOrderingBasket;
		if(sCurrentOrderingBasketMode.equals(FrameOrderingBasket.ORDERING_BASKET_MODE_SHOW_CONSOLIDATE_ITEMS))
			oFrameOrderingBasket = m_oFrameConsolidateItemsOrderingBasket;
		
		// Set section and cell to visible
		for (int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
			ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck.getItemList(i);
			if(sCurrentOrderingBasketMode.equals(FrameOrderingBasket.ORDERING_BASKET_MODE_SHOW_CONSOLIDATE_ITEMS))
				oFuncCheckItemList = this.sortConsolidateItemsList(oFuncCheckItemList);
			if (oFuncCheckItemList != null && oFuncCheckItemList.size() > 0) {
				for (int j = 0; j < oFuncCheckItemList.size(); j++) {
					if (!oFrameOrderingBasket.isSectionCellVisible(i, j))
						oFrameOrderingBasket.setSectionCellVisible(i, j, true);
				}
				if (!oFrameOrderingBasket.isSectionVisible(i)) {
					if ((m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food)
							|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk)
							|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab)) && i == 0) {
						// Not show "share" section title for fast food mode
					} else {
						if(!oFrameOrderingBasket.isDisplaySeatNumberSection())
							oFrameOrderingBasket.setSectionVisible(i, false);
						else
							oFrameOrderingBasket.setSectionVisible(i, true);
					}
				}
				else{
					if(!oFrameOrderingBasket.isDisplaySeatNumberSection())
						oFrameOrderingBasket.setSectionVisible(i, false);
				}
				if(sCurrentOrderingBasketMode.equals(FrameOrderingBasket.ORDERING_BASKET_MODE_SHOW_CONSOLIDATE_ITEMS))
					oFrameOrderingBasket.bringToTop();
			}
		}
	}
	
	// Rush Order
	private void rushOrder(int iSectionId, int iItemIndex) {
		DateTimeFormatter formatter = DateTimeFormat.forPattern("HH:mm");
		
		int iRushCount = m_oFuncCheck.rushOrder(iSectionId, iItemIndex);
		if (iRushCount < 0 && m_oFuncCheck.getLastErrorMessage().length() > 0) {
			// Prompt error
			showErrorDialogBox(m_oFuncCheck.getLastErrorMessage());
			return;
		} else {
			FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iSectionId, iItemIndex);
			
			// kitchen monitor send rush order
			ArrayList<FuncCheckItem> oRushOrderFuncCheckItemList = new ArrayList<FuncCheckItem>();
			if (m_oFuncKitchenMonitor.isSupportKitchenMonitor()) {
				oRushOrderFuncCheckItemList.add(oFuncCheckItem);
				if (oFuncCheckItem.hasModifier())
					oRushOrderFuncCheckItemList.addAll(oFuncCheckItem.getModifierList());
				if (oFuncCheckItem.hasChildItem()) {
					for (FuncCheckItem oChildItem : oFuncCheckItem.getChildItemList()) {
						oRushOrderFuncCheckItemList.add(oChildItem);
						if (oChildItem.hasModifier())
							oRushOrderFuncCheckItemList.addAll(oChildItem.getModifierList());
					}
				}
				
				if (oRushOrderFuncCheckItemList.size() > 0)
					this.processKitchenMonitorQsrAddItem(null, null, oRushOrderFuncCheckItemList, true, null);
			}
			
			// Add log to action log list
			AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.rush_order.name(),
					PosActionLog.ACTION_RESULT_SUCCESS, m_oFuncCheck.getTableNoWithExtensionForDisplay(),
					AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
					AppGlobal.g_oFuncOutlet.get().getOutletId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
					AppGlobal.g_oFuncStation.get().getStationId(), m_oFuncCheck.getCheckId(), "",
					oFuncCheckItem.getCheckItem().getCitmId(), "", "", "");
			// handle action log
			AppGlobal.g_oActionLog.get().handleActionLog(false);
			
			String sRushMesg = oFuncCheckItem.getItemShortDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get()) + System.lineSeparator()
					+ AppGlobal.g_oLang.get()._("order_time") + ":"
					+ formatter.print(oFuncCheckItem.getCheckItem().getOrderLocTime());
			if (iRushCount == 1)
				sRushMesg += System.lineSeparator() + AppGlobal.g_oLang.get()._("order_has_been_rushed") + " " + iRushCount + " "
						+ AppGlobal.g_oLang.get()._("time");
			else if (iRushCount > 1)
				sRushMesg += System.lineSeparator() + AppGlobal.g_oLang.get()._("order_has_been_rushed") + " " + iRushCount + " "
						+ AppGlobal.g_oLang.get()._("times");
			
			showDialogBox(AppGlobal.g_oLang.get()._("rush_order"), sRushMesg);
		}
	}
	
	private void updateLookupButtonStockQty(int iMenuItemId) {
		BigDecimal dStockQty = null;
		
		// Outlet Item not found
		if (m_oFuncCheck.getItemStockQty(iMenuItemId) == null)
			return;
		
		if (!m_oFuncCheck.isSoldout(iMenuItemId))
			dStockQty = m_oFuncCheck.getItemStockQty(iMenuItemId);
		m_oFrameOrderingPanel.setItemStockQty(iMenuItemId, dStockQty);
		m_oFrameOrderingMenuLookup.setItemStockQtyByItemId(iMenuItemId, dStockQty);
		
		if (m_oFrameSetMenu != null)
			m_oFrameSetMenu.setSetMenuItemStockQtyByItemId(iMenuItemId, dStockQty);
	}
	
	// Manual open drawer
	private void openDrawer(int iDrawer) {
		// iDrawer - 0:ask drawer, 1:first drawer, 2:second drawer
		FuncPayment oFuncPayment = new FuncPayment();
		int iDrawerIndex = 1;
		
		if (iDrawer == 0) {
			ArrayList<String> oOptionList = new ArrayList<String>();
			oOptionList.add(AppGlobal.g_oLang.get()._("drawer") + " 1");
			oOptionList.add(AppGlobal.g_oLang.get()._("drawer") + " 2");
			
			FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
			oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select_the_drawer"),
					oOptionList, false);
			oFormSelectionBox.show();
			if (oFormSelectionBox.isUserCancel()) {
				if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
						|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) == true
						|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) == true)
					showTableFloorPlanScreen(false);
				return;
			} else {
				ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
				if (oSelectionBoxResult.get(0) == 0)
					iDrawerIndex = 1;
				else
					iDrawerIndex = 2;
			}
		} else
			iDrawerIndex = iDrawer;
		
		oFuncPayment.setOpenDrawer(iDrawerIndex);
		oFuncPayment.openDrawer(AppGlobal.g_oFuncStation.get().getStation().getReceiptPrtqId(),
				AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), AppGlobal.g_oFuncUser.get().getUserId(),
				AppGlobal.g_oFuncStation.get().getStationId(), false);
		if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
				|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) == true
				|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) == true) {
			// Fast food mode
			showTableFloorPlanScreen(false);
		}
	}
	
	// User Time In/ Time Out
	private boolean userTimeInOut() {
		// Check if myself is killed or not
		String sReason = AppGlobal.getKilledReason();
		if (sReason.length() > 0) {
			showErrorDialogBox(sReason);
			
			// Force logout
			logout(true);
			
			AppGlobal.finishBeingKilled();
			return false;
		}
		
		DateTimeFormatter formatter = DateTimeFormat.forPattern("HH:mm:ss");
		String sTitle, sMsg;
		FuncUser oTempUser = new FuncUser();
		
		if(m_bUnderLoginPage)
			oTempUser.login(oTempUser.getServiceAccountLoginId(), oTempUser.getServiceAccountPassword(), true);
		
		oTempUser = this
				.askUserPassword(m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.user_time_in_out.name())
						.getName(AppGlobal.g_oCurrentLangIndex.get()), true);
		
		if (oTempUser == null)
			return false;
		
		FuncUserTimeInOutLog oUserTimeInOutLog = new FuncUserTimeInOutLog();
		boolean bResult = oUserTimeInOutLog.checkUserTimeIn(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
				oTempUser.getUserId());
		
		if (bResult) {
			sMsg = AppGlobal.g_oLang.get()._("you_ve_logged_in_the_system") + System.lineSeparator()
					+ AppGlobal.g_oLang.get()._("log_time") + ": " + formatter.print(oUserTimeInOutLog.getOpenLocTime())
					+ System.lineSeparator() + AppGlobal.g_oLang.get()._("confirm_to_time_out") + "?";
		} else {
			if (oUserTimeInOutLog.getUserTimeInOutCount() > 0)
				sMsg = AppGlobal.g_oLang.get()._("you_ve_logged_in_the_system") + " "
						+ oUserTimeInOutLog.getUserTimeInOutCount() + " " + AppGlobal.g_oLang.get()._("times_today")
						+ System.lineSeparator();
			else
				sMsg = AppGlobal.g_oLang.get()._("you_never_log_in_the_system_today") + System.lineSeparator();
			sMsg += AppGlobal.g_oLang.get()._("confirm_to_time_in") + "?";
		}
		
		FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
				AppGlobal.g_oLang.get()._("no"), this);
		oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
		oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._(sMsg));
		oFormConfirmBox.show();
		if (oFormConfirmBox.isOKClicked() == false) {
			if(m_bUnderLoginPage)
				oTempUser.logout();
			return false;
		}
		
		sMsg = AppGlobal.g_oLang.get()._("name") + ": " + oTempUser.getUserName(AppGlobal.g_oCurrentLangIndex.get())
				+ System.lineSeparator();
		if (!bResult) {
			oUserTimeInOutLog.addUserTimeInLog(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
					AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
					oTempUser.getUserId());
			sTitle = AppGlobal.g_oLang.get()._("log_in_successful");
			sMsg += AppGlobal.g_oLang.get()._("log_time") + ": " + formatter.print(oUserTimeInOutLog.getOpenLocTime())
					+ System.lineSeparator();
		} else {
			oUserTimeInOutLog.addUserTimeOutLog(AppGlobal.g_oFuncStation.get().getCheckPrtqId(),
					AppGlobal.g_oCurrentLangIndex.get());
			sTitle = AppGlobal.g_oLang.get()._("log_out_successful");
			sMsg += AppGlobal.g_oLang.get()._("log_time") + ": " + formatter.print(oUserTimeInOutLog.getCloseLocTime())
					+ System.lineSeparator();
		}
		sMsg += AppGlobal.g_oLang.get()._("thank_you") + "!";
		
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
		showAttentionDialogBox(sMsg);
		
		if(m_bUnderLoginPage)
			oTempUser.logout();
		return true;
	}
	
	private boolean askLogin() {
		List<String> oMsgList = new ArrayList<String>();
		String sTempLogin = "";
		String sTempPw = "";
		String sTempCardNo = "";
		
		// Set show screen saver timer
		if (AppGlobal.g_oFuncStation.get().getScreenSaverTimeout() > 0)
			m_oFrameTableFloorPlan.startScreenSaverTimer(false);
		
		oMsgList.add(AppGlobal.g_oLang.get()._("user_id"));
		oMsgList.add(AppGlobal.g_oLang.get()._("password"));
		
		// ask login
		FormInputBox oInputBox = new FormInputBox(this);
		oInputBox.initWithInputNum(oMsgList.size());
		oInputBox.setTitle(AppGlobal.g_oLang.get()._("login"));
		oInputBox.setMessages(oMsgList);
		oInputBox.setInputBoxSecurity(1, true);
		oInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.NUMBER);
		oInputBox.show();
		
		// Retrieve Manager ID and PW
		if (oInputBox.getSwipeCardValue().isEmpty()) {
			sTempLogin = oInputBox.getInputValue(0);
			sTempPw = oInputBox.getInputValue(1);
		} else {
			sTempCardNo = oInputBox.getSwipeCardValue();
			sTempCardNo = sTempCardNo.replace("\r", "").replace("\n", "");
		}
		
		// no user
		if ((sTempLogin.isEmpty() || sTempPw.isEmpty()) && sTempCardNo.isEmpty()) {
			if (AppGlobal.g_oFuncStation.get().getScreenSaverTimeout() > 0)
				m_oFrameTableFloorPlan.startScreenSaverTimer(true);
			return false;
		}
		
		FuncUser oTempUser = new FuncUser();
		oTempUser = processLogin(sTempLogin, sTempPw, sTempCardNo, "");
		
		if (oTempUser == null) {
			if (AppGlobal.g_oFuncStation.get().getScreenSaverTimeout() > 0)
				m_oFrameTableFloorPlan.startScreenSaverTimer(true);
			return false;
		}
		
		// Assign the user to global
		AppGlobal.g_oFuncUser.set(oTempUser);
		
		if (AppGlobal.g_oFuncUser.get().needToChangePassword()) {
			if (!changePasswordControl()) {
				if (AppGlobal.g_oFuncStation.get().getScreenSaverTimeout() > 0)
					m_oFrameTableFloorPlan.startScreenSaverTimer(true);
				return false;
			}
		}
		
		m_oFrameTableFloorPlan.setSwitchUserModeStatus(FrameTableFloorPlan.SWITCH_USER_MODE_WITH_LOGIN);
		
		m_oFrameStationInfoBar.setUserName(AppGlobal.g_oFuncUser.get().getUserName());
		m_oFrameStationInfoBar.setUserNameColor("#666666");
		m_oFrameTableFloorPlan.setFrameFloorPlanHeader("#CCB0B0B0");
		
		return true;
	}
	
	private boolean changePasswordControl() {
		// Prompt change password if force/warn to change
		if (AppGlobal.g_oFuncUser.get().needToChangePassword()) {
			boolean bChangePasswordResult = false;
			if (AppGlobal.g_oFuncUser.get().isForceChangePassword()) {
				String sMsg = AppGlobal.g_oLang.get()._("you_have_not_changed_your_password_for_a_long_time")
						+ System.lineSeparator() + AppGlobal.g_oLang.get()._("please_change_password");
				showDialogBox(AppGlobal.g_oLang.get()._("message"), sMsg);
				
				do {
					bChangePasswordResult = changePassword(true);
					if (isShowTableFloorAfterSwitchUserWithCheckingOperationMode() && m_oFrameTableFloorPlan
							.getSwitchUserModeStatus().equals(FrameTableFloorPlan.SWITCH_USER_MODE_ON)) {
						if (!bChangePasswordResult)
							return false;
					}
					
				} while (!bChangePasswordResult);
				return false;
			} else {
				FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("change_password"),
						AppGlobal.g_oLang.get()._("ignore"), this);
				oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("warning"));
				oFormConfirmBox
						.setMessage(AppGlobal.g_oLang.get()._("you_have_not_changed_your_password_for_a_long_time")
								+ System.lineSeparator() + AppGlobal.g_oLang.get()._("please_change_password"));
				oFormConfirmBox.show();
				if (oFormConfirmBox.isOKClicked()) {
					bChangePasswordResult = changePassword(true);
					if (bChangePasswordResult)
						return false;
				}
			}
		}
		return true;
	}
	
	private FuncUser askUserPassword(String sTitle, boolean bAllowCurrentUser) {
		List<String> oMsgList = new ArrayList<String>();
		oMsgList.add(AppGlobal.g_oLang.get()._("user_id"));
		oMsgList.add(AppGlobal.g_oLang.get()._("password"));
		
		FormInputBox oInputBox = new FormInputBox(this);
		oInputBox.initWithInputNum(oMsgList.size());
		oInputBox.setTitle(sTitle);
		oInputBox.setMessages(oMsgList);
		oInputBox.setInputBoxSecurity(1, true);
		oInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.NUMBER);
		oInputBox.show();
		
		// Retrieve Manager ID and PW
		String sTempLogin = oInputBox.getInputValue(0);
		String sTempPw = oInputBox.getInputValue(1);
		String sTempCardNo = oInputBox.getSwipeCardValue();
		
		if ((sTempLogin.isEmpty() || sTempPw.isEmpty()) && sTempCardNo.isEmpty())
			return null;
		
		FuncUser oTempUser = new FuncUser();
		if (sTempCardNo.length() > 0) {
			// Remove \r and \n in the return card no.
			sTempCardNo = sTempCardNo.replace("\r", "").replace("\n", "");
			
			// Check whether it is current user or not
			if(!bAllowCurrentUser) {
				if(sTempCardNo.equals(AppGlobal.g_oFuncUser.get().getUser().getCardNumber())) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("same_user_is_not_allowed"));
					return null;
				}
			}
			
			// Validate the card no.
			// Check User Login and Password
			if (oTempUser.isValidUserByCardNum(sTempCardNo) == false) {
				promptFailLoginErrorDialogBox();
				return null;
			}
		} else {
			// Check whether it is current user or not
			if(!bAllowCurrentUser) {
				if(sTempLogin.equals(AppGlobal.g_oFuncUser.get().getLoginId())) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("same_user_is_not_allowed"));
					return null;
				}
			}
			
			// Check User Login and Password
			if (oTempUser.isValidUser(sTempLogin, sTempPw) == false) {
				promptFailLoginErrorDialogBox();
				return null;
			}
		}
		
		return oTempUser;
	}
	
	// Switch user function
	// Switch user ONLY, not reload the station
	// Return value: true - switch success
	// false - exit program
	private boolean switchUser(boolean bUseForReconnect) {
		if(m_oFrameAdminPanel.getVisible())
			m_oFrameAdminPanel.setVisible(false);
		if (isShowTableFloorAfterSwitchUserWithCheckingOperationMode()
				&& (m_oFrameTableFloorPlan.getSwitchUserModeStatus().equals(FrameTableFloorPlan.SWITCH_USER_MODE_OFF)
				|| m_oFrameTableFloorPlan.getSwitchUserModeStatus()
				.equals(FrameTableFloorPlan.SWITCH_USER_MODE_WITH_LOGIN))) {
			m_oFrameStationInfoBar.setUserName(StringLib.createStringArray(
					AppGlobal.g_oLang.get()._("logged_out").length(), AppGlobal.g_oLang.get()._("logged_out")));
			m_oFrameStationInfoBar.setUserNameColor("#FF0000");
			m_oFrameTableFloorPlan.setFrameFloorPlanHeader("#FF0000");
			m_oFrameTableFloorPlan.setSwitchUserModeStatus(FrameTableFloorPlan.SWITCH_USER_MODE_ON);
			
			if (AppGlobal.g_oFuncStation.get().getScreenSaverTimeout() > 0) {
				// always close open table panel
				if (m_oFrameOpenTable != null && m_oFrameOpenTableWithQwertyKeyboard != null) {
					m_oFrameOpenTable.setVisible(false);
					m_oFrameOpenTableWithQwertyKeyboard.setVisible(false);
					m_oFrameCover.setVisible(false);
				}
				// start screen saver timer
				m_oFrameTableFloorPlan.startScreenSaverTimer(true);
			}
		} else if (isShowTableFloorAfterSwitchUserWithCheckingOperationMode()
				&& m_oFrameTableFloorPlan.getSwitchUserModeStatus().equals(FrameTableFloorPlan.SWITCH_USER_MODE_ON)) {
			if (logout(false))
				return false;
		} else {
			this.updateTableFloorPlanTimer(false);
			
			// Ask if confirm
			// According to product team request, remove the prompt box in
			// version 0.0.0.9
			/*
			 * FormConfirmBox oFormConfirmBox = new
			 * FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
			 * AppGlobal.g_oLang.get()._("no"), this);
			 * oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
			 * oFormConfirmBox.setMessage(AppGlobal.g_oLang.get().
			 * _("Confirm to logout?")); oFormConfirmBox.show();
			 * if(oFormConfirmBox.isOKClicked() == false){
			 * m_oFrameTableFloorPlan.setUpdateTableStatusTimer(true); return; }
			 */
			
			// Clear the information bar name
			m_oFrameStationInfoBar.setUserName(StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, ""));
			
			while (true) {
				// Create the login page (frmLogin)
				FormLogin oFormLogin = new FormLogin(this);
				if (oFormLogin.init(true, m_oFuncSmartCard) == false) {
					updateTableFloorPlanTimer(true);
					if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food)
							|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk)
							|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab)) {
						// For fast food mode
						showTableFloorPlanScreen(false);
					}
					return true;
				}
				
				oFormLogin.addListener(this);
				
				// Set Outlet logo
				oFormLogin.setOutletLogo(AppGlobal.g_oFuncOutlet.get().getMediaUrl(OutMediaObject.USED_FOR_LOGO));
				
				// Set Outlet Desc
				oFormLogin.setOutletDesc(
						AppGlobal.g_oFuncOutlet.get().getOutletNameByIndex(AppGlobal.g_oCurrentLangIndex.get()));
				
				oFormLogin.setHoldId(AppGlobal.g_oFuncStation.get().getAutoSignOut());
				
				//set card control for swipe card during login
				ClsActiveClient oActiveClient = AppGlobal.getActiveClient();
				oActiveClient.getSwipeCardReaderElement().setValueChangedServerRequestNote(FuncMSR.FRAME_SWIPE_CARD_DEFAULT);
				
				// Show the screen to re-login
				// Show the form and wait for user input
				m_bUnderLoginPage = true;
				oFormLogin.show();
				m_bUnderLoginPage = false;
				
				// Check if login is success or not
				if (oFormLogin.isExit()) {
					if (logout(false))
						return false;
					else
						continue;
				}
				
				// Check if force logout (For force/warn to change password)
				if (oFormLogin.isForceLogout()) {
					logout(true);
					return false;
				}
				
				if(oFormLogin.getFuncUser().getUser() == null)
					return false;
				
				// Update memory
				AppGlobal.g_oFuncUser.set((FuncUser) oFormLogin.getFuncUser().clone());
				m_bHoldId = oFormLogin.holdId();
				
				m_oFrameTableFloorPlan.updateIdleTimeLogoutTimer();
				// Login success
				// Update the interface session id list
				List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_MEMBERSHIP_INTERFACE);
				for(PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList){
					if(oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_GENERAL_V2))
						AppGlobal.generateUpdateInterfaceSession(oPosInterfaceConfig.getInterfaceId(), "");
				}
/**SignIn [switchUser] */
				// surveillance eConnect employee event: SignIn
				HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
				this.doSurveillanceEvent(FuncSurveillance.SURVEILLANCE_TYPE_SIGN_IN, oSurveillanceEventInfo);
				/*
				List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);
				if (!oInterfaceConfigList.isEmpty()) {
					for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
						if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
							FuncSurveillance oFuncSurveillance = new FuncSurveillance(oPosInterfaceConfig);
							HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
							oSurveillanceEventInfo.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_SIGN_IN);
							oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo);
						}
					}
				}
				*/
				break;
			}
			
			AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
					AppGlobal.g_oFuncUser.get().getUserId() + "", "Function: login");
			
			if (!bUseForReconnect) {
				// Get the original language index
				int iOriginalLangIndex = AppGlobal.g_oCurrentLangIndex.get();
				
				// Get user defined lang index
				int iNewLandIndex = 1;
				if (AppGlobal.g_oFuncUser.get() == null || AppGlobal.g_oFuncUser.get().getUser().getLang() == 0)
					iNewLandIndex = 1;
				else
					iNewLandIndex = AppGlobal.g_oFuncUser.get().getUser().getLang();
				
				// Change language if needed
				if (iOriginalLangIndex != iNewLandIndex) {
					changeLanguage(iNewLandIndex);
				}
			}
			
			// Update the station info bar
			m_oFrameStationInfoBar.setUserName(AppGlobal.g_oFuncUser.get().getUserName());
			
			updateTableFloorPlanTableStatus(false);
			this.updateTableFloorPlanTimer(true);
			
			if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food)
					|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk)
					|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab)) {
				// For fast food mode
				showTableFloorPlanScreen(false);
			}
		}
		
		//Check if swipe card control is required
		ClsActiveClient oActiveClient = AppGlobal.getActiveClient();
		if (oActiveClient != null) {
			oActiveClient.getSwipeCardReaderElement()
					.setValueChangedServerRequestNote(FuncMSR.FRAME_SWIPE_CARD_DEFAULT);
			if (m_oFrameOpenTable.getVisible())
				oActiveClient.getSwipeCardReaderElement()
						.setValueChangedServerRequestNote(FuncMSR.FRAME_SWIPE_CARD_OPENTABLE);
			else if (m_oFrameOpenTableWithQwertyKeyboard.getVisible())
				oActiveClient.getSwipeCardReaderElement()
						.setValueChangedServerRequestNote(FuncMSR.FRAME_SWIPE_CARD_OPENTABLE_QWERTY);
		}
		
		// Update Toggle Print Receipt Button Name in each panel with translation
		this.setTogglePrintReceiptButtonStatus(m_sCurrentPrintMode);
		this.updateTogglePrintReceiptButtonName(m_sCurrentPrintModeButtonName);
		
		return true;
	}
	
	// Client Reconnect
	private void clientReconnectRelogin(String sLoginId, String sLoginPassword, String sLoginCardNo) {
		
		// Relogin
		if (m_bUnderLoginPage == false) {
			if (m_bLoginInServer) {
				if (switchUser(true) == false)
					return;
			} else {
				m_bUnderLoginPage = true;
				FuncUser oFuncUser = processLogin(sLoginId, sLoginPassword, sLoginCardNo, "");
				m_bUnderLoginPage = false;
				if (oFuncUser == null) {
					// Fail to reconnect with the login
					if (switchUser(true) == false)
						return;
				} else
					AppGlobal.g_oFuncUser.set(oFuncUser);
			}
			
			// Update the station info bar
			if (isShowTableFloorAfterSwitchUserWithCheckingOperationMode()) {
				if(m_oFrameTableFloorPlan.getSwitchUserModeStatus().equals(FrameTableFloorPlan.SWITCH_USER_MODE_OFF)
						|| m_oFrameTableFloorPlan.getSwitchUserModeStatus()
						.equals(FrameTableFloorPlan.SWITCH_USER_MODE_WITH_LOGIN))
					m_oFrameStationInfoBar.setUserName(AppGlobal.g_oFuncUser.get().getUserName());
			}
			else
				m_oFrameStationInfoBar.setUserName(AppGlobal.g_oFuncUser.get().getUserName());
			
		}
		
		// Write application log
		AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
				AppGlobal.g_oFuncUser.get().getUserId() + "", "Function: reconnect");
		
	}
	
	// Daily start process
	private void dailyStart() {
		// Ask if confirm
		FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
				AppGlobal.g_oLang.get()._("no"), this);
		oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
		oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("confirm_to_perform_daily_start") + "?");
		oFormConfirmBox.show();
		if (oFormConfirmBox.isOKClicked() == false) {
			return;
		}
		
		// Daily start pre-checking
		boolean bRecallLastBusinessDay = false;
		String sLogRemark = "";
		int iRet = AppGlobal.g_oFuncOutlet.get().dailyStartBusinessDayPreChecking();
		if (iRet == 0) {
			// There is running business day
			showErrorDialogBox(AppGlobal.g_oLang.get()._("daily_start_has_been_carried_out"));
			return;
		} else if (iRet == 2) {
			// Last business day = today, MUST recall
			AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
					AppGlobal.g_oFuncUser.get().getUserId() + "", "Recall last business day");
			sLogRemark = "Forced recall business day";
			bRecallLastBusinessDay = true;
		} else if (iRet == 3) {
			// No running business day and within the yesterday last period,
			// allow user to select if recall or not
			ArrayList<String> oOptionList = new ArrayList<String>();
			oOptionList.add(AppGlobal.g_oLang.get()._("recall_last_business_day"));
			oOptionList.add(AppGlobal.g_oLang.get()._("begin_new_business_day"));
			
			FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
			oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select_the_action_type"),
					oOptionList, false);
			oFormSelectionBox.show();
			if (oFormSelectionBox.isUserCancel()) {
				// User cancel
				return;
			}
			
			ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
			if (oSelectionBoxResult.get(0) == 0) {
				// User select recall business day
				AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
						AppGlobal.g_oFuncUser.get().getUserId() + "", "User select to recall last business day");
				sLogRemark = "User select to recall last business day";
				bRecallLastBusinessDay = true;
			} else {
				// User select begin a new business day
				AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
						AppGlobal.g_oFuncUser.get().getUserId() + "", "User select to begin a new business day");
				bRecallLastBusinessDay = false;
			}
			
		}
		
		// Check if there is daily operation is running
		if (AppGlobal.g_oFuncStation.get().getOutletId() > 0) {
			if (AppGlobal.checkDailyOperationRunning(AppGlobal.g_oFuncStation.get().getOutletId())) {
				// Daily operation is running
				// Prompt error
				showErrorDialogBox(AppGlobal.g_oLang.get()._("daily_operation_is_running"));
				return;
			}
		}
		
		// Daily start
		if (AppGlobal.g_oFuncOutlet.get().dailyStart(AppGlobal.g_oFuncOutlet.get().getOutletId(),
				bRecallLastBusinessDay) == false) {
			// Fail to daily start
			showErrorDialogBox(AppGlobal.g_oFuncOutlet.get().getLastErrorMessage());
			AppGlobal.endOutletOperation(AppGlobal.g_oFuncStation.get().getOutletId());
		} else {
			// Update the interface session id list
			List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_MEMBERSHIP_INTERFACE);
			for(PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList){
				if(oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_GENERAL_V2))
					AppGlobal.generateUpdateInterfaceSession(oPosInterfaceConfig.getInterfaceId(), "");
			}
			// Add log to action log list
			AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.daily_start.name(),
					PosActionLog.ACTION_RESULT_SUCCESS, "", AppGlobal.g_oFuncUser.get().getUserId(),
					AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), "",
					AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "", sLogRemark);
			
			// Test all printers
			if (!AppGlobal.g_oFuncStation.get().isAllowTurnOffTestingPrint())
				this.testAllItemPrintQueues();
			
			// Start the auto station
			this.launchAutoStation(AppGlobal.g_oFuncOutlet.get().getOutletId(), true, false);
			
			// Start the portal station
			this.launchPortalStation(AppGlobal.g_oFuncOutlet.get().getOutletId(), true, false);
			
			String sMsg = AppGlobal.g_oLang.get()._("daily_start_is_completed");
			if (!AppGlobal.g_oFuncOutlet.get().getLastResultMessage().isEmpty())
				sMsg += System.lineSeparator() + AppGlobal.g_oFuncOutlet.get().getLastResultMessage();
			// Daily start success
			showAttentionDialogBox(sMsg);
			
			// handle action log
			AppGlobal.g_oActionLog.get().handleActionLog(false);
			
			m_bIsDailyStart = true;
		}
	}
	
	// Daily close process
	private void dailyClose() {
		JSONArray oCheckJSONArray = null;
		
		// Check whether system need to carry forward unpaid checks
		JSONObject oForceDailyCloseJSONObject = AppGlobal.g_oFuncStation.get().getForceDailyClose();
		String sCarryForward = "";	// empty - no need to carry forward; c - carry forward
		if (oForceDailyCloseJSONObject != null)
			sCarryForward = oForceDailyCloseJSONObject.optString("carryForward", "");
		
		if (sCarryForward.equals("y")) {
			if (AppGlobal.g_oFuncOutlet.get().isResetCheckNum()) {	// Outlet setting set to reset check number, incorrect setting for doing carry forward
				showWarningDialogBox(AppGlobal.g_oLang.get()._("check_number_will_be_reset_in_new_business_date") + System.lineSeparator()
						+AppGlobal.g_oLang.get()._("not_allow_to_carry_forward_unpaid_checks_to_next_business_date"));
				return;
			} else {
				PosCheck check = new PosCheck(AppGlobal.g_oFuncUser.get().getUserId());
				oCheckJSONArray = check.getCheckListByBusinessDayPaid(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), 0, PosCheck.PAID_NOT_PAID, false);
				if (oCheckJSONArray != null && oCheckJSONArray.length() > 0) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("some_checks_have_not_paid"));
					
					m_oFormCheckListing = new FormCheckListing(this, m_eOperationMode);
					m_oFormCheckListing.init(null, FrameCheckListing.TYPE_DAILY_CLOSE_OPEN_CHECK);
					m_oFormCheckListing.addListener(this);
					m_oFormCheckListing.show();
					
					if (!m_oFormCheckListing.isContinueButtonClick())
						return;
				}
			}
		}
		
		// Ask if confirm
		FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
				AppGlobal.g_oLang.get()._("no"), this);
		oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
		oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("confirm_to_perform_daily_close") + "?");
		oFormConfirmBox.show();
		if (oFormConfirmBox.isOKClicked() == false) {
			if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
					|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) == true
					|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) == true) {
				// Fast food mode
				showTableFloorPlanScreen(false);
			}
			
			return;
		}
		
		// Daily close
		if (AppGlobal.g_oFuncOutlet.get().dailyClose(AppGlobal.g_oFuncOutlet.get().getOutletId()) == false) {
			// Fail to daily close
			showErrorDialogBox(AppGlobal.g_oFuncOutlet.get().getLastErrorMessage());
			
			if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
					|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) == true
					|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) == true) {
				// Fast food mode
				showTableFloorPlanScreen(false);
			}
		} else {
			// Clear cleaning table status list
			if (AppGlobal.g_oFuncStation.get().getAutomaticallyChangeCleaningToVacantInterval() > 0) {
				synchronized (this) {
					if (AppGlobal.g_oTableStatusCleaningList.containsKey(AppGlobal.g_oFuncOutlet.get().getOutletId()))
						AppGlobal.g_oTableStatusCleaningList.remove(AppGlobal.g_oFuncOutlet.get().getOutletId());
				}
			}
			
			// Clear all table status in update table status list of the outlet
			if (AppGlobal.g_oFuncStation.get().getSupportTableStatusCleaning())
				AppGlobal.setOutletTableList(AppGlobal.g_oFuncOutlet.get().getOutletId(), new PosOutletTableList());
			
			// Add log to action log list
			AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.daily_close.name(),
					PosActionLog.ACTION_RESULT_SUCCESS, "", AppGlobal.g_oFuncUser.get().getUserId(),
					AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
					AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "", "");

/** EndOfDay [dailyClose] */
			// surveillance eConnect system event: EndOfDay
			HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
			this.doSurveillanceEvent(FuncSurveillance.SURVEILLANCE_TYPE_END_OF_DAY, oSurveillanceEventInfo);
			/*
			List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);
			if (!oInterfaceConfigList.isEmpty()) {
				for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
					if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
						FuncSurveillance oFuncSurveillance = new FuncSurveillance(oPosInterfaceConfig);
						HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
						oSurveillanceEventInfo.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_END_OF_DAY);
						oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo);
					}
				}
			}
			*/
			
			// handle action log
			AppGlobal.g_oActionLog.get().handleActionLog(false);
			
			// Stop auto station
			this.stopAutoStation(AppGlobal.g_oFuncOutlet.get().getOutletId());
			
			// Stop portal station
			this.stopPortalStation(AppGlobal.g_oFuncOutlet.get().getOutletId());
			
			String sMsg = AppGlobal.g_oLang.get()._("daily_close_is_completed");
			if (sCarryForward.equals("y") && !AppGlobal.g_oFuncOutlet.get().isResetCheckNum() && oCheckJSONArray != null && oCheckJSONArray.length() > 0) {
				sMsg += System.lineSeparator() + oCheckJSONArray.length() + " " + AppGlobal.g_oLang.get()._("checks_carry_forward_to_next_business_date");
				
				for (int i = 0; i < oCheckJSONArray.length(); i++) {
					JSONObject oCheckJSONObject = oCheckJSONArray.optJSONObject(i);
					if (oCheckJSONObject == null)
						continue;
					PosCheck oCheck = new PosCheck(oCheckJSONObject);
					AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
							AppGlobal.g_oFuncUser.get().getUserId() + "", "Check number: "+oCheck.getCheckPrefixNo()+" carry forward to next business date");
				}
			}
			
			// Daily close success
			showAttentionDialogBox(sMsg);
			
			// Logout
			logout(true);
		}
	}
	
	// Perform reload setting to business day and period table
	private void reloadBusinessSetting() {
		String sErrMsg = "";
		
		// Ask if confirm
		FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
				AppGlobal.g_oLang.get()._("no"), this);
		oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
		oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("confirm_to_reload_business_setting") + "?");
		oFormConfirmBox.show();
		if (oFormConfirmBox.isOKClicked() == false) {
			if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
					|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) == true
					|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) == true) {
				// Fast food mode
				showTableFloorPlanScreen(false);
			}
			return;
		}
		
		// Create processing box
		m_oFormProcessBox = new FormProcessBox(this);
		m_oFormProcessBox.setTitle(AppGlobal.g_oLang.get()._("loading") + "...");
		m_oFormProcessBox.setMessage(AppGlobal.g_oLang.get()._("loading_station"));
		m_oFormProcessBox.showWithoutRemoveUI();
		
		// Reload setting
		if (AppGlobal.g_oFuncOutlet.get().reloadBusinessSetting(AppGlobal.g_oFuncOutlet.get().getOutletId()) == false) {
			m_oFormProcessBox.closeShowWithoutRemoveUI();
			
			// Fail to reload setting
			showErrorDialogBox(AppGlobal.g_oFuncOutlet.get().getLastErrorMessage());
			AppGlobal.endOutletOperation(AppGlobal.g_oFuncOutlet.get().getOutletId());
		} else {
			m_oFormProcessBox.closeShowWithoutRemoveUI();
			
			sErrMsg = AppGlobal.g_oFuncOutlet.get().getLastErrorMessage();
			if(!sErrMsg.isEmpty()){
				showWarningDialogBox(AppGlobal.g_oLang.get()._(sErrMsg));
			}
			
			// Restart portal station
			launchPortalStation(AppGlobal.g_oFuncOutlet.get().getOutletId(), false, false);
			
			// Add log to action log list
			AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.reload_business_setting.name(),
					PosActionLog.ACTION_RESULT_SUCCESS, "", AppGlobal.g_oFuncUser.get().getUserId(),
					AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
					AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "", "");
			// handle action log
			AppGlobal.g_oActionLog.get().handleActionLog(false);
			
			// Reload setting success
			showAttentionDialogBox(AppGlobal.g_oLang.get()._("business_setting_is_reloaded"));
		}
		
		// Logout
		logout(true);
	}
	
	// Open share table
	private void openShareTable(String sTableNo) {
		String sTableExtension = "";
		
		// Check if there is any extension table
		PosOutletTableList oPosOutletTableList = new PosOutletTableList();
		if (oPosOutletTableList.getActiveOutletTableListByTable(AppGlobal.g_oFuncOutlet.get().getOutletId(),
				Integer.parseInt(sTableNo))) {
			
			// Have extension table
			FormAskTable oFormAskTable = new FormAskTable(this);
			oFormAskTable.init(Integer.parseInt(sTableNo), false, AppGlobal.g_oFuncOutlet.get().getOutletId());
			oFormAskTable.setTitle(AppGlobal.g_oLang.get()._("welcome"));
			
			// Create no extension
			boolean bHaveOriginalTable = false;
			for (Map.Entry<PosOutletTable, PosCheck> entry : oPosOutletTableList.getOutletTableList().entrySet()) {
				PosOutletTable oPosOutletTable = entry.getKey();
				if (oPosOutletTable.getTableExtension().isEmpty()) {
					boolean bCookingOvertime = false;
					JSONObject oTempJSONObject = AppGlobal.g_oFuncStation.get().getTableFloorPlanSetting();
					if(oTempJSONObject != null && oTempJSONObject.optString("support_cooking_overtime").equals("y"))
						bCookingOvertime = AppGlobal.isTableOverCookingTime(AppGlobal.g_oFuncOutlet.get().getOutletId(), oPosOutletTable.getTable(), oPosOutletTable.getTableExtension());
					
					if(bCookingOvertime)
						oFormAskTable.addTableExtension("-", PosOutletTable.STATUS_COOKING_OVERTIME, false, false, false);
					else
						oFormAskTable.addTableExtension("-", oPosOutletTable.getStatus(), false, true, false);
					bHaveOriginalTable = true;
					break;
				}
			}
			
			if (bHaveOriginalTable == false)
				oFormAskTable.addTableExtension("-", PosOutletTable.STATUS_NEW_TABLE, false, true, false);
			
			// Create extension list
			for (char alphabet = AppGlobal.TABLE_EXTENSION_START_LETTER; alphabet <= AppGlobal.TABLE_EXTENSION_END_LETTER; alphabet++) {
				
				boolean bisTableOccupied = false;
				for (Map.Entry<PosOutletTable, PosCheck> entry : oPosOutletTableList.getOutletTableList().entrySet()) {
					PosOutletTable oPosOutletTable = entry.getKey();
					if (!oPosOutletTable.getTableExtension().isEmpty()
							&& oPosOutletTable.getTableExtension().equals(String.valueOf(alphabet))) {
						boolean bLocked = false;
						if (oPosOutletTable.getStationId() > 0)
							bLocked = true;
						
						boolean bCookingOvertime = false;
						JSONObject oTempJSONObject = AppGlobal.g_oFuncStation.get().getTableFloorPlanSetting();
						if(oTempJSONObject != null && oTempJSONObject.optString("support_cooking_overtime").equals("y"))
							bCookingOvertime = AppGlobal.isTableOverCookingTime(AppGlobal.g_oFuncOutlet.get().getOutletId(), oPosOutletTable.getTable(), oPosOutletTable.getTableExtension());
						
						if(bCookingOvertime)
							oFormAskTable.addTableExtension(oPosOutletTable.getTableExtension(), PosOutletTable.STATUS_COOKING_OVERTIME, bLocked, false, false);
						else
							oFormAskTable.addTableExtension(oPosOutletTable.getTableExtension(), oPosOutletTable.getStatus(), bLocked, false, false);
						bisTableOccupied = true;
						break;
					}
				}
				
				if (bisTableOccupied == false)
					oFormAskTable.addTableExtension(String.valueOf(alphabet), PosOutletTable.STATUS_NEW_TABLE, false,
							false, false);
			}
			
			// Set detail for the extension
			DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
			for (Map.Entry<PosOutletTable, PosCheck> entry : oPosOutletTableList.getOutletTableList().entrySet()) {
				PosOutletTable oPosOutletTable = entry.getKey();
				PosCheck oPosCheck = entry.getValue();
				if (oPosCheck != null) {
					String split[] = formatter.print(oPosCheck.getOpenLocTime()).split(" ");
					sTableExtension = "-";
					if (!oPosOutletTable.getTableExtension().isEmpty())
						sTableExtension = oPosOutletTable.getTableExtension();
					
					String sMemNo = "";
					String sMemName = "";
					//ArrayList<String> oExtraInfoArrayList = new ArrayList<String>();
					LinkedHashMap<String, String> oCheckInfoList = new LinkedHashMap<String, String>();
					if (!oPosCheck.getCheckExtraInfoArrayList().isEmpty()) {
						if(oPosCheck.getMemberId() == 0) {
							for (PosCheckExtraInfo oCheckExtraInfo: oPosCheck.getCheckExtraInfoArrayList()) {
								// get member number and member name from online member interface
								if (oCheckExtraInfo.getSection().equals(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE)) {
									if (oCheckExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_ACCOUNT_NUMBER) || oCheckExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER)) {
										sMemNo = oCheckExtraInfo.getValue();
										if (sMemNo == null)
											sMemNo = "";
										else if (sMemNo.length() > 20)
											sMemNo = sMemNo.substring(0, 20);
									}
									if (oCheckExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_MEMBER_NAME)) {
										sMemName = oCheckExtraInfo.getValue();
										if (sMemName == null)
											sMemName = "";
										else if (sMemName.length() > 20)
											sMemName = sMemName.substring(0, 20);
									}
								}
							}
						}
						int iCheckInfoCount = 0;
						for (PosCheckExtraInfo oCheckExtraInfo : oPosCheck.getCheckExtraInfoArrayList()) {
							if(oCheckExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_CHECK_INFO)){
								iCheckInfoCount++;
								if(iCheckInfoCount > 5)
									break;
								if(oCheckExtraInfo.getIndex() == 1)
									oCheckInfoList.put(FrameTableButton.STATUS_CHECK_INFO_ONE, oCheckExtraInfo.getValue());
								if(oCheckExtraInfo.getIndex() == 2)
									oCheckInfoList.put(FrameTableButton.STATUS_CHECK_INFO_TWO, oCheckExtraInfo.getValue());
								if(oCheckExtraInfo.getIndex() == 3)
									oCheckInfoList.put(FrameTableButton.STATUS_CHECK_INFO_THREE, oCheckExtraInfo.getValue());
								if(oCheckExtraInfo.getIndex() == 4)
									oCheckInfoList.put(FrameTableButton.STATUS_CHECK_INFO_FOUR, oCheckExtraInfo.getValue());
								if(oCheckExtraInfo.getIndex() == 5)
									oCheckInfoList.put(FrameTableButton.STATUS_CHECK_INFO_FIVE, oCheckExtraInfo.getValue());
							}
						}
					}
					
					String[] sCheckOwnerName = StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, "");
					String[] sFirstName = StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, "");
					String[] sLastName = StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, "");
					int iUserId = oPosCheck.getCheckOwnerUserId();
					if(oPosCheck.getCheckOwnerUserId() != 0){
						sFirstName = m_oAllUserList.get(iUserId).getFirstName();
						sLastName = m_oAllUserList.get(iUserId).getLastName();
						sCheckOwnerName = StringLib.appendStringArray(sFirstName, " ", sLastName);
					}
					
					String sCurrencySign = "$";
					if(!AppGlobal.g_oFuncOutlet.get().getCurrencySign().isEmpty())
						sCurrencySign = AppGlobal.g_oFuncOutlet.get().getCurrencySign();
					String sTableSize = AppGlobal.g_oFuncOutlet.get().getTableSize(Integer.toString(oPosOutletTable.getTable()), sTableExtension);
					oFormAskTable.addTableDetailTypes();
					oFormAskTable.updateTableDetails(sTableExtension, split[1].substring(0, 5), Integer.toString(oPosCheck.getGuests()), sCurrencySign+AppGlobal.g_oFuncOutlet.get().roundCheckAmountToString(oPosCheck.getCheckTotal()), sMemNo, sMemName, sCheckOwnerName, sTableSize, oCheckInfoList);
					oFormAskTable.setTableDetailByIndex(m_oFrameTableFloorPlan.getCurrentTableDetailIndex());
				}
			}
			
			oFormAskTable.show();
			
			
			if (oFormAskTable.isCanelClick())
				return;
			
			sTableNo = oFormAskTable.getTableNo() + "";
			sTableExtension = oFormAskTable.getTableExtension();
		}
		
		PosOutletTable oPosOutletTable = getTargetOutletTable(sTableNo, sTableExtension);
		if(oPosOutletTable != null && oPosOutletTable.isCleaningTable()){
			showErrorDialogBox(AppGlobal.g_oLang.get()._("target_table_is_cleaning"));
			return;
		}
		
		// Open Check
		if (openCheck(sTableNo, sTableExtension, true, 0, false, false)) {
			// Add log to action log list
			AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.open_share_table.name(),
					PosActionLog.ACTION_RESULT_SUCCESS, "", AppGlobal.g_oFuncUser.get().getUserId(),
					AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
					AppGlobal.g_oFuncStation.get().getStationId(), m_oFuncCheck.getCheckId(), "", "", "", "",
					sTableNo + sTableExtension);
			// handle action log
			AppGlobal.g_oActionLog.get().handleActionLog(false);
		}
	}
	
	// Start delivery control mode
	private void startStockDeliveryMode() {
		String sTableNo = "";
		String sTableExtension = "";
		int iOption = 0;
		
		FuncCheck oFuncCheck = new FuncCheck();
		
		// Ask for operation
		while (true) {
			ArrayList<String> oOptionList = new ArrayList<String>();
			if (m_iStockDeliveryOperaionMode == 0) {
				oOptionList.add(AppGlobal.g_oLang.get()._("create_stock_delivery_order"));
				oOptionList.add(AppGlobal.g_oLang.get()._("edit_stock_delivery_order"));
				oOptionList.add(AppGlobal.g_oLang.get()._("delete_stock_delivery_order"));
				
				FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
				oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select_the_action_type"),
						oOptionList, false);
				oFormSelectionBox.show();
				if (oFormSelectionBox.isUserCancel()) {
					// Quit the mode
					m_eOperationMode = m_ePreviousOperationMode;
					if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
							|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) == true
							|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) == true) {
						// Fast food mode
						showTableFloorPlanScreen(false);
					}
					
					return;
				}
				
				ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
				iOption = oSelectionBoxResult.get(0);
			} else
				iOption = 3;
			
			if (iOption == 0) {
				// Get a random no for table no.
				int iRefNo = oFuncCheck.getNewStockDeliveryInvoiceRefId();
				
				sTableNo = iRefNo + "";
				sTableExtension = AppGlobal.STOCK_INVOICE_TABLE_EXTENSION;
				
				// Open New Invoice
				if (openCheck(sTableNo, sTableExtension, true, 1, false, false) == false)
					// Fail to load check
					continue;
			} else if (iOption == 1 || iOption == 2 || iOption == 3) {
				String sRefNo = "";
				boolean bCancelFlag = false;
				PosStockDeliveryInvoice oPosStockDeliveryInvoice = null;
				while (true) {
					/*
					 * FormInputBox oFormInputBox = new FormInputBox(this);
					 * oFormInputBox.init(); if(iOption == 1)
					 * oFormInputBox.setTitle(AppGlobal.g_oLang.get().
					 * _("Edit Stock Delivery Order")); else
					 * oFormInputBox.setTitle(AppGlobal.g_oLang.get().
					 * _("Receive Stock Delivery Order"));
					 * oFormInputBox.setMessage(AppGlobal.g_oLang.get().
					 * _("Please input the reference no."));
					 * oFormInputBox.setKeyboardType(HeroActionProtocol.View.
					 * Attribute.KeyboardType.NUMBER); oFormInputBox.show();
					 *
					 * sRefNo = oFormInputBox.getInputValue(); if(sRefNo == null
					 * || sRefNo.length() == 0){ if(iOption == 3){ // Quit the
					 * mode m_eOperationMode = m_ePreviousOperationMode;
					 *
					 * return; }
					 *
					 * bCancelFlag = true; break; }
					 *
					 * if(oFuncCheck.isStockDeliveryInvoiceExist(Integer.
					 * parseInt(sRefNo))){ // Invoice is found
					 *
					 * // Check if the invoice is received or not
					 * if(oFuncCheck.getStockDeliveryInvoiceReceiveUserId() >
					 * 0){ // Invoice is received FormDialogBox oFormDialogBox =
					 * new FormDialogBox(AppGlobal.g_oLang.get()._("ok"), this);
					 * oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._(
					 * "attention"));
					 * oFormDialogBox.setMessage(AppGlobal.g_oLang.get().
					 * _("Invoice is received")); oFormDialogBox.show();
					 *
					 * continue; }
					 *
					 * break; }else{ // Invoice is not found FormDialogBox
					 * oFormDialogBox = new
					 * FormDialogBox(AppGlobal.g_oLang.get()._("ok"), this);
					 * oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._(
					 * "attention"));
					 * oFormDialogBox.setMessage(AppGlobal.g_oLang.get().
					 * _("Invoice is not found")); oFormDialogBox.show(); }
					 */
					
					if (iOption == 1 || iOption == 2)
						oPosStockDeliveryInvoice = getStockDeliveryInvoice(false);
					else
						oPosStockDeliveryInvoice = getStockDeliveryInvoice(true);
					if (oPosStockDeliveryInvoice == null) {
						if (iOption == 3) {
							// Quit the mode
							m_eOperationMode = m_ePreviousOperationMode;
							if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
									|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) == true
									|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) == true) {
								// Fast food mode
								showTableFloorPlanScreen(false);
							}
							
							return;
						}
						
						bCancelFlag = true;
						break;
					}
					
					sRefNo = oPosStockDeliveryInvoice.getSinvId() + "";
					
					break;
				}
				if (bCancelFlag)
					continue;
				
				sTableNo = sRefNo;
				sTableExtension = AppGlobal.STOCK_INVOICE_TABLE_EXTENSION;
				
				if (iOption == 1 || iOption == 3) {
					// Open Old Invoice
					if (openCheck(sTableNo, sTableExtension, true, 1, false, false) == false) // Fail
						// to
						// load
						// check
						continue;
					else {
						if (iOption == 1)
							// Add log to action log list
							AppGlobal.g_oActionLog.get().addActionLog(
									AppGlobal.FUNC_LIST.stock_delivery_invoice_setup.name(),
									PosActionLog.ACTION_RESULT_SUCCESS, "", AppGlobal.g_oFuncUser.get().getUserId(),
									AppGlobal.g_oFuncOutlet.get().getShopId(),
									AppGlobal.g_oFuncOutlet.get().getOutletId(),
									AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
									AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
									AppGlobal.g_oFuncStation.get().getStationId(), m_oFuncCheck.getCheckId(), "", "",
									"", "", "Edit Stock Delivery Order:" + sTableNo + sTableExtension);
						else if (iOption == 3)
							// Add log to action log list
							AppGlobal.g_oActionLog.get().addActionLog(
									AppGlobal.FUNC_LIST.receive_stock_delivery_invoice.name(),
									PosActionLog.ACTION_RESULT_SUCCESS, "", AppGlobal.g_oFuncUser.get().getUserId(),
									AppGlobal.g_oFuncOutlet.get().getShopId(),
									AppGlobal.g_oFuncOutlet.get().getOutletId(),
									AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
									AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
									AppGlobal.g_oFuncStation.get().getStationId(), m_oFuncCheck.getCheckId(), "", "",
									"", "", "Receive Stock Delivery Order:" + sTableNo + sTableExtension);
					}
				} else {
					// Void invoice
					voidStockDeliveryInvoice(sTableNo, sTableExtension);
					
					continue;
				}
			}
			
			break;
		}
		
		// handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
	}
	
	// Start mark delivery by select item first
	private void startMarkDelivery() {
		toggleBacketMultiSelectMode(true, AppGlobal.FUNC_LIST.mark_delivery.name(), FrameOrderingBasket.SELECT_TYPE_OLD_ITEM, FrameBasketSelectPanel.BASKET_SELECT_MODE_MULTI);
		
		for (int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
			// Create ordering basket section for seat
			ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck.getItemList(i);
			
			if (oFuncCheckItemList != null && oFuncCheckItemList.size() > 0) { // Has ordered items in seat i
				for (int j = 0; j < oFuncCheckItemList.size(); j++) {
					FuncCheckItem oFuncCheckItem = oFuncCheckItemList.get(j);
					
					if (oFuncCheckItem.isOldItem() == false)
						continue;
					
					// Item is marked delivery before if	1. Item hasDelivered
					//									&&	2. Item extra info varible "Remaining pending info" -> "itemlist" does not exist
					if (oFuncCheckItem.hasDelivered() && oFuncCheckItem.getPartialPendingItemInfo(FuncCheckItem.partialPendingItem_PendingInfo) == null) {
						String sKey = i + "_" + j;
						
						// Select
						m_oBasketSelectedItems.put(sKey, 0);
						
						// Mark delivery before
						m_oFrameOrderingBasket.setSelected(i, j, FrameOrderingBasket.SELECT_TYPE_OLD_ITEM, FrameOrderingBasket.SHOW_TYPE_SELECT);
					}
				}
			}
		}
	}
	
	// Toggle the ordering basket to display pantry message or not
	public void toggleOrderingBasketInformation() {
		m_oFrameOrderingBasket.setShowPantryMessage(!m_oFrameOrderingBasket.isShowPantryMessage());
		
		for (int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
			// Create ordering basket section for seat
			ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck.getItemList(i);
			if (oFuncCheckItemList != null && oFuncCheckItemList.size() > 0) { // Has ordered items in seat i
				for (int j = 0; j < oFuncCheckItemList.size(); j++) {
					FuncCheckItem oFuncCheckItem = oFuncCheckItemList.get(j);
					if (!oFuncCheckItem.isOldItem())
						continue;
					
					this.updateBasketItemInfo(i, j);
				}
			}
		}
	}
	
	// Process mark delivery after selected items
	private void processMarkDelivery(List<HashMap<String, Integer>> oSelectedItems) {
		HashMap<String, Integer> oMarkDeliveryItemIds = new HashMap<String, Integer>();
		HashMap<String, Integer> oClearMarkDeliveryItemIds = new HashMap<String, Integer>();
		
		for (int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
			// Create ordering basket section for seat
			ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck.getItemList(i);
			
			if (oFuncCheckItemList != null && oFuncCheckItemList.size() > 0) { // Has ordered items in seat i
				for (int j = 0; j < oFuncCheckItemList.size(); j++) {
					if (oFuncCheckItemList.get(j).isOldItem() == false)
						continue;
					
					FuncCheckItem oFuncCheckItem = oFuncCheckItemList.get(j);
					PosCheckItem oPosCheckItem = oFuncCheckItem.getCheckItem();
					
					String sKey = i + "_" + j;
					
					// Check if the item is selected or not
					Boolean bSelected = false;
					for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
						String sSelectedKey = oSelectedItem.get("sectionId") + "_" + oSelectedItem.get("itemIndex");
						if (sKey.equals(sSelectedKey)) {
							bSelected = true;
							break;
						}
					}
					// Item is marked delivery before if	1. Item hasDelivered
					//									&&	2. Item extra info varible "Remaining pending info" -> "itemlist" does not exist
					if (oFuncCheckItem.hasDelivered() && oFuncCheckItem.getPartialPendingItemInfo(FuncCheckItem.partialPendingItem_PendingInfo) == null) {
						// Mark delivery before
						if (bSelected == false) {
							// Clear mark delivery
							oClearMarkDeliveryItemIds.put(oPosCheckItem.getCitmId(), 0);
						}
					} else {
						// Not mark delivery before
						if (bSelected == true) {
							// Mark delivery
							oMarkDeliveryItemIds.put(oPosCheckItem.getCitmId(), 0);
						}
					}
					
					oPosCheckItem.setModified(true);
				}
			}
		}
		
		if (oMarkDeliveryItemIds.size() > 0 || oClearMarkDeliveryItemIds.size() > 0) {
			m_oFuncCheck.markDelivery(oMarkDeliveryItemIds, oClearMarkDeliveryItemIds);
			
			for (int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
				// Create ordering basket section for seat
				ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck.getItemList(i);
				
				if (oFuncCheckItemList != null && oFuncCheckItemList.size() > 0) { // Has ordered items in seat i
					for (int j = 0; j < oFuncCheckItemList.size(); j++) {
						FuncCheckItem oFuncCheckItem = oFuncCheckItemList.get(j);
						
						if (!oFuncCheckItem.isOldItem())
							continue;
						
						this.updateBasketItemInfo(i, j);
					}
				}
			}
		}
	}
	private void updateBasketItemInfo(int iSeatNo, int iItemIndex) {
		FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iSeatNo, iItemIndex);
		String[] sStatusArray = StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, "");
		String[] sDiscountArray = StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, "");
		String[] sPantryMessageArray = StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, "");
		String[] sDisplayInformationArray = StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, "");
		PosPantryMessage oSelectedPantryMessage = new PosPantryMessage();
		if (m_oPantryMesgList == null) {
			m_oPantryMesgList = new PosPantryMessageList();
			m_oPantryMesgList.readAll();
		}
		
		ArrayList<PosTaxScType> sScTaxAddedInformationArray = new ArrayList<PosTaxScType>();
		ArrayList<PosTaxScType> sScTaxWaivedInformationArray = new ArrayList<PosTaxScType>();
		
		if (m_oServiceChargeTypeList == null) {
			m_oServiceChargeTypeList = new PosTaxScTypeList();
			m_oServiceChargeTypeList.getAllServiceCharges();
		}
		HashMap<Integer, PosTaxScType> oScTypeList = m_oServiceChargeTypeList.getTaxScTypeList();
		
		if (m_oTaxTypeList == null) {
			m_oTaxTypeList = new PosTaxScTypeList();
			m_oTaxTypeList.getAllTaxes();
		}
		HashMap<Integer, PosTaxScType> oTaxTypeList = m_oTaxTypeList.getTaxScTypeList();
		
		// Get the record of extra info
		if (oFuncCheckItem.isExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_ITEM, PosCheckExtraInfo.VARIABLE_ADD_WAIVE_TAX_SC, 0)) {
			JSONObject oAddWaiveObject = new JSONObject();
			JSONObject oScObject = new JSONObject();
			JSONObject oTaxObject = new JSONObject();
			
			try {
				PosCheckExtraInfo oAddWaiveScTaxJSONObject = oFuncCheckItem.getExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_ITEM, PosCheckExtraInfo.VARIABLE_ADD_WAIVE_TAX_SC, 0);
				oAddWaiveObject = new JSONObject(oAddWaiveScTaxJSONObject.getValue());
				
				// Get the records from extra info
				oScObject = oAddWaiveObject.optJSONObject("sc");
				if (oScObject != null) {
					for (int j = 1; j <= 5; j++) {
						String sValue = oScObject.optString(Integer.toString(j), "");
						if (sValue.isEmpty())
							continue;
						
						// Sc(s) Label
						if (sValue.equals("a") && oScTypeList.containsKey(j))
							sScTaxAddedInformationArray.add(oScTypeList.get(j));
						
						if (sValue.equals("w") && oScTypeList.containsKey(j))
							sScTaxWaivedInformationArray.add(oScTypeList.get(j));
					}
				}
				
				oTaxObject = oAddWaiveObject.optJSONObject("tax");
				if (oTaxObject != null) {
					for (int j = 1; j <= 25; j++) {
						String sValue = oTaxObject.optString(Integer.toString(j), "");
						if (sValue.isEmpty())
							continue;
						
						// Tax(s) Label
						if (sValue.equals("a") && oTaxTypeList.containsKey(j))
							sScTaxAddedInformationArray.add(oTaxTypeList.get(j));
						
						if (sValue.equals("w") && oTaxTypeList.containsKey(j))
							sScTaxWaivedInformationArray.add(oTaxTypeList.get(j));
					}
				}
			} catch (JSONException e) {
				e.printStackTrace();
				AppGlobal.stack2Log(e);
			}
		}
		
		for (int i = 0; i < AppGlobal.LANGUAGE_COUNT; i++) {
			String sStatus = "";
			// Check if item is delivered or not
			if (oFuncCheckItem.isPreorderItem())
				sStatus = AppGlobal.g_oLang.get()._("pre_order", "")[i];
			
			// Show delivered status only when	1. Item is delivered
			if (oFuncCheckItem.hasDelivered() ) {
				// Default remaining Pending quantity = item quantity
				BigDecimal oDefaultDeliveredQty = oFuncCheckItem.getCheckItem().getQty();
				
				// Pactrial Pending Item : Get the deliveried item list from extra info if exist
				JSONObject oDeliveriedPendingInfoItemList = oFuncCheckItem.getPartialPendingItemInfo(FuncCheckItem.partialPendingItem_Delivery_Info);
				
				if (oDeliveriedPendingInfoItemList != null) {
					oDefaultDeliveredQty = BigDecimal.ZERO;
					JSONArray oItemSuffixList = oDeliveriedPendingInfoItemList.names();
					for (int j = 0; j < oItemSuffixList.length(); ++j) {
						String sItemSuffix = oItemSuffixList.optString(j);
						oDefaultDeliveredQty = oDefaultDeliveredQty.add(new BigDecimal(oDeliveriedPendingInfoItemList.optString(sItemSuffix)));
					}
				}
				
				// If Delivered quantity equals or smaller than zero, not show
				if (oDefaultDeliveredQty.compareTo(BigDecimal.ZERO) == 1) {
					if (!sStatus.isEmpty())
						sStatus += ", ";
					
					sStatus += AppGlobal.g_oLang.get()._("delivered", "")[i] +  " X " + oDefaultDeliveredQty.stripTrailingZeros().toPlainString();
				}
			}
			
			if (oFuncCheckItem.isPendingItem()) {
				if (!sStatus.isEmpty())
					sStatus += ", ";
				
				// Default remaining Pending quantity = item quantity
				BigDecimal oDefaultPendingQty = oFuncCheckItem.getCheckItem().getQty();
				
				// Get the remaining quantity from extra info if exist
				if (oFuncCheckItem.getPartialPendingItemAmount().compareTo(BigDecimal.ZERO) > 0)
					oDefaultPendingQty = oFuncCheckItem.getPartialPendingItemAmount();
				
				sStatus += AppGlobal.g_oLang.get()._("pending", "")[i] +  " X " + oDefaultPendingQty.stripTrailingZeros().toPlainString();
			}
			if (oFuncCheckItem.isTakeoutItem()) {
				if (!sStatus.isEmpty())
					sStatus += ", ";
				sStatus += AppGlobal.g_oLang.get()._("takeout", "")[i];
			}
			
			if(oFuncCheckItem.isCookingTimeOverdue()){
				if (!sStatus.isEmpty())
					sStatus += ", ";
				sStatus += AppGlobal.g_oLang.get()._("cooking_overtime", "")[i];
			}
			
			if(oFuncCheckItem.isNoKitchenSlip()){
				if (!sStatus.isEmpty())
					sStatus += ", ";
				sStatus += AppGlobal.g_oLang.get()._("no_kitchen_slip", "")[i];
			}
			
			sStatusArray[i] = sStatus;
			
			// Add pantry message in each check item
			String sPantryMessage = "";
			if (oFuncCheckItem.hasPantryMessage() && m_oFrameOrderingBasket.isShowPantryMessage()) {
				for (int iPantryMessageId : oFuncCheckItem.getPantryMessageList()) {
					if (!sPantryMessage.isEmpty())
						sPantryMessage += ", ";
					oSelectedPantryMessage = m_oPantryMesgList.getPosPantryMessageByIndex(iPantryMessageId);
					sPantryMessage += oSelectedPantryMessage.getName(i + 1);
				}
			}
			sPantryMessageArray[i] = sPantryMessage;
			
			// Add display information to the basket
			String sDisplayInformation = "";
			
			if (oFuncCheckItem.hasDisplayInformation()) {
				for (String sDisplayInfo : oFuncCheckItem.getDisplayInformationList()) {
					if (!sDisplayInformation.isEmpty())
						sDisplayInformation += ", ";
					sDisplayInformation += sDisplayInfo;
				}
			}
			sDisplayInformationArray[i] = sDisplayInformation;
			
			// Add the discount to the basket
			StringBuilder sDiscountList = new StringBuilder();
			if (oFuncCheckItem.hasItemDiscount(false)) {
				for (int k = 0; k < oFuncCheckItem.getItemDiscountList().size(); k++) {
					PosCheckDiscount oCheckDiscount = oFuncCheckItem.getItemDiscountList().get(k);
					
					if (sDiscountList.length() > 0) {
						sDiscountList.append(", ");
					}
					
					if (oCheckDiscount.getShortName(i + 1).isEmpty())
						sDiscountList.append(oCheckDiscount.getName(i + 1));
					else
						sDiscountList.append(oCheckDiscount.getShortName(i + 1));
				}
			}
			
			sDiscountArray[i] = sDiscountList.toString();
		}
		
		m_oFrameOrderingBasket.updateInfo(iSeatNo, iItemIndex, sStatusArray, sDiscountArray,
				oFuncCheckItem.getModifierList(), sPantryMessageArray, sDisplayInformationArray, sScTaxAddedInformationArray, sScTaxWaivedInformationArray);
	}
	
	// Show available item print queue
	private void showItemPrintQueue(String sFunction) {
		MenuItemPrintQueue oMenuItmPrtQueue = null;
		MenuItemPrintQueueList oMenuItmPrtQueueList = new MenuItemPrintQueueList();
		PosItemPrintQueueList oPosItmPrtQueueList = new PosItemPrintQueueList();
		ArrayList<String> oOptionList = new ArrayList<String>();
		
		m_sCurrentFunctionKey = sFunction;
		m_oOptionBoxIdList.clear();
		oMenuItmPrtQueueList.readItemQueueList();
		oPosItmPrtQueueList.readItemQueueListByShopAndOutletId(AppGlobal.g_oFuncOutlet.get().getShopId(),
				AppGlobal.g_oFuncOutlet.get().getOutletId());
		for (PosItemPrintQueue oItemPrintQueue : oPosItmPrtQueueList.getItemPrintQueueList().values()) {
			oMenuItmPrtQueue = oMenuItmPrtQueueList.getItemPrintQueueById(oItemPrintQueue.getMenuItpqId());
			if (oMenuItmPrtQueue != null) {
				oOptionList.add(oMenuItmPrtQueue.getName(AppGlobal.g_oCurrentLangIndex.get()));
				m_oOptionBoxIdList.add(oItemPrintQueue.getItpqId());
			}
		}
		
		m_oFrameOptionBox.removeOptionList();
		m_oFrameOptionBox.setTitle(AppGlobal.g_oLang.get()._("please_select_menu_item_print_queue") + ":");
		for (String sOption : oOptionList)
			m_oFrameOptionBox.addOption(sOption);
		m_oFrameOptionBox.setVisible(true);
		m_oFrameOptionBox.bringToTop();
		
		if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
				|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) == true
				|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) == true) {
			// Fast food mode
			showTableFloorPlanScreen(false);
			
			if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode))
				m_oFrameOptionBox.bringToTop();
		}
	}
	
	private void testAllItemPrintQueues() {
		MenuItemPrintQueue oMenuItmPrtQueue = null;
		MenuItemPrintQueueList oMenuItmPrtQueueList = new MenuItemPrintQueueList();
		PosItemPrintQueueList oPosItmPrtQueueList = new PosItemPrintQueueList();
		
		// load all item print queues
		oMenuItmPrtQueueList.readItemQueueList();
		oPosItmPrtQueueList.readItemQueueListByShopAndOutletId(AppGlobal.g_oFuncOutlet.get().getShopId(),
				AppGlobal.g_oFuncOutlet.get().getOutletId());
		
		// test all printers in list
		for (PosItemPrintQueue oItemPrintQueue : oPosItmPrtQueueList.getItemPrintQueueList().values()) {
			oMenuItmPrtQueue = oMenuItmPrtQueueList.getItemPrintQueueById(oItemPrintQueue.getMenuItpqId());
			if (oMenuItmPrtQueue != null) {
				String sURL = oItemPrintQueue.printTestingPrinterSlip(AppGlobal.g_oFuncUser.get().getUserId(),
						AppGlobal.g_oFuncStation.get().getStationId());
				String sLogRemark = oMenuItmPrtQueue.getName(AppGlobal.g_oCurrentLangIndex.get()) + " [ItemPrtQueueId:"
						+ oItemPrintQueue.getItpqId() + "]";
				String sResult = (sURL.length() == 0)? PosActionLog.ACTION_RESULT_FAIL: PosActionLog.ACTION_RESULT_SUCCESS;
				// Add fail log to action log list
				AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.testing_printer.name(), sResult, "",
						AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
						AppGlobal.g_oFuncOutlet.get().getOutletId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
						AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "", sLogRemark);
			}
		}
	}
	
	private void checkAutoSignOut() {
		if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.switch_user.name()))
			return;
		
		if (!m_bHoldId) {
			// Close process box
			m_oFrameShowOnceProcessBox.finishShow();
			
			AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
					AppGlobal.g_oFuncUser.get().getUserId() + "", "Function: switch_user");
			switchUser(false);
		}
	}
	
	private void performCheckFunction() {
		if (m_oMenuItemCourseList == null) {
			m_oMenuItemCourseList = new MenuItemCourseList();
			m_oMenuItemCourseList.readItemCourseList();
		}
		
		m_oFrameCheckDetail.setVisible(false);
		
		m_oFrameCheckFunction.initButtonBackground();
		m_oFrameCheckFunction.setVisible(true);
		m_oFrameCheckFunction.bringToTop();
		m_oFrameStationInfoBar.changeInfosPosition(667, 1280, true);
		// Show whole check view first
		m_oFrameCheckFunction.initForWholeCheckView(m_oFuncCheck, m_oMenuItemCourseList, m_eOperationMode);
		m_oFrameStationInfoBarCover.setVisible(true);
		m_oFrameStationInfoBarCover.bringToTop();
	}
	
	private void adminMode() {
		
		// Force to turn off the flag for preventing multiple open check to prevent forever blocking
		m_sPreventMulitpleOpenCheckFlag = "";
		
		if (isShowTableFloorAfterSwitchUserWithCheckingOperationMode()
				&& m_oFrameTableFloorPlan.getSwitchUserModeStatus().equals(FrameTableFloorPlan.SWITCH_USER_MODE_ON)) {
			if (!askLogin())
				return;
		}
		// Add log to action log list
		AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.admin_mode.name(),
				PosActionLog.ACTION_RESULT_SUCCESS, "", AppGlobal.g_oFuncUser.get().getUserId(),
				AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
				AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "", "");
		// handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
		// Stop the table floor plan timer
		this.updateTableFloorPlanTimer(false);
		
		m_oFrameAdminPanel.showDisplayPanelAtPage(1);
		m_oFrameAdminPanel.showFirstTag();
		
		m_oFrameAdminPanel.setVisible(true);
		m_oFrameAdminPanel.bringToTop();
		
		m_oFrameCover.setVisible(false);
		m_oFrameTableFloorPlan.setVisible(false);
		m_oFrameStationInfoBar.displayMode(true, FrameStationInfoBar.MODE_ADMIN);
		m_oFrameStationInfoBar.showFunctionButton(true);
		
		// must be forced quit after quit check
		AppGlobal.g_sResultForAutoFunction.set(AppGlobal.AUTO_FUNCTIONS_RESULT_LIST.forced_quit.name());
	}
	
	private OutOutlet selectOutlet() {
		try {
			ArrayList<String> oOptionList = new ArrayList<String>();
			ArrayList<OutOutlet> oOptionOutletList = new ArrayList<OutOutlet>();
			
			// Read all outlets
			OutOutletList outOutletList = new OutOutletList();
			outOutletList.readPosOutletsByShopId(AppGlobal.g_oFuncOutlet.get().getShopId());
			ArrayList<OutOutlet> oOutletList = outOutletList.getOutletList();
			
			for (OutOutlet oOutOutlet : oOutletList) {
				// Show outlets under same shop
				if (oOutOutlet.getOutletShopId() != AppGlobal.g_oFuncOutlet.get().getShopId())
					continue;
				
				oOptionList.add(oOutOutlet.getName(AppGlobal.g_oCurrentLangIndex.get()));
				oOptionOutletList.add(oOutOutlet);
			}
			
			FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
			oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select_the_outlet"),
					oOptionList, false);
			oFormSelectionBox.show();
			if (oFormSelectionBox.isUserCancel()) {
				return null;
			} else {
				ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
				return oOptionOutletList.get(oSelectionBoxResult.get(0));
			}
		} catch (Exception e) {
			AppGlobal.stack2Log(e);
			return null;
		}
	}
	
	private PosStockDeliveryInvoice getStockDeliveryInvoice(boolean bCurrentOutlet) {
		try {
			ArrayList<String> oOptionList = new ArrayList<String>();
			
			// Read all invoices
			PosStockDeliveryInvoiceList invoiceList = new PosStockDeliveryInvoiceList();
			if (bCurrentOutlet)
				invoiceList.readAll(AppGlobal.g_oFuncOutlet.get().getOutletId());
			else
				invoiceList.readAll(0);
			ArrayList<PosStockDeliveryInvoice> oInvoiceList = invoiceList.getInvoiceList();
			if (oInvoiceList.isEmpty()) {
				// No invoice is found
				showAttentionDialogBox(AppGlobal.g_oLang.get()._("no_more_invoice_is_found"));
				return null;
			}
			
			// Read all outlets
			OutOutletList outOutletList = new OutOutletList();
			outOutletList.readAll();
			ArrayList<OutOutlet> oOutletList = outOutletList.getOutletList();
			
			for (PosStockDeliveryInvoice oInvoice : oInvoiceList) {
				String sOutletName = "";
				for (OutOutlet oOutOutlet : oOutletList) {
					if (oOutOutlet.getOletId() == oInvoice.getOletId()) {
						sOutletName = oOutOutlet.getName(AppGlobal.g_oCurrentLangIndex.get());
						break;
					}
				}
				
				if (sOutletName.length() > 0)
					oOptionList.add(sOutletName + " : " + oInvoice.getSinvId());
				else
					oOptionList.add(oInvoice.getSinvId() + "");
			}
			
			FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
			oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select_the_invoice"),
					oOptionList, false);
			oFormSelectionBox.show();
			if (oFormSelectionBox.isUserCancel()) {
				return null;
			} else {
				ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
				return oInvoiceList.get(oSelectionBoxResult.get(0));
			}
		} catch (Exception e) {
			AppGlobal.stack2Log(e);
			return null;
		}
	}
	
	// Void stock delivery invoice
	private void voidStockDeliveryInvoice(String sTableNo, String sTableExtension) {
		// Ask if confirm
		FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
				AppGlobal.g_oLang.get()._("no"), this);
		oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
		oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("confirm_to_delete") + "?");
		oFormConfirmBox.show();
		if (oFormConfirmBox.isOKClicked() == false)
			return;
		
		// Open Old Invoice without UI
		if (openCheck(sTableNo, sTableExtension, false, 1, false, false) == false)
			// Fail to load check
			return;
		
		// Void the invoice
		m_oFuncCheck.voidStockDeliveryInvoice();
	}
	
	// Check if the function can be perform or not
	private boolean checkFunctionAvailable(PosFunction oPosFunction) {
		boolean bAllow = true;
		String sFunctionKey = oPosFunction.getKey();
		
		// Function only allow in DeviceThreadMain
		if (sFunctionKey.equals(AppGlobal.FUNC_LIST.lock_table.name()))
			bAllow = false;
		
		// In mobile view
		if (AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name())) {
			if (sFunctionKey.equals(AppGlobal.FUNC_LIST.split_table.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.stock_balance_chg.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.split_check_by_options.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.cashier_mode.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.table_message_reminder.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.take_drawer_ownership.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.refresh_table_status_by_table_num.name())) {
				// Cannot perform in mobile station
				bAllow = false;
			}

			if(!(sFunctionKey.equals(AppGlobal.FUNC_LIST.send_check.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.cancel.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.print_check.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.print_and_paid.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.change_cover.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.change_table.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.logout.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.void_check.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.release_payment.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.void_payment.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.delete_item.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.delete_last.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.change_language.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.guest_check_preview.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.change_quantity_last.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.item_modifier.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.item_discount.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.item_discount_multiple_items.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.unlock_table.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.check_history.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.waive_sc_tax.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.add_sc_tax.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.open_drawer.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.web_report.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.item_void_discount_multiple_items.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.check_listing.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.switch_user.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.daily_start.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.daily_close.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.reload_business_setting.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.reprint_receipt.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.open_share_table.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.testing_printer.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.mark_delivery.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.print_serving_list.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.rush_order.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.pantry_message.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.admin_mode.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.toggle_fast_food_mode.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.stock_delivery_invoice_setup.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.receive_stock_delivery_invoice.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.switch_outlet.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.preorder.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.set_member.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.takeout.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.increment_course.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.reprint_last_receipt.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.last_20_paid_check.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.toggle_non_revenue.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.toggle_revenue.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.check_takeout.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.check_dine_in.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.toggle_ordering_mode.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.item_discount_all_items.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.delete_whole_last_item.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.void_paid_check.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.receipt_preview.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.add_item_by_code.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.sell_coupon.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.new_item_no_kitchen_slip.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.direct_report.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.adjust_tips.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.open_first_drawer.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.open_second_drawer.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.search_item.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.delete_multiple_item.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.park_order_by_station.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.retrieve_park_order_by_station.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.preorder_by_table.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.user_time_in_out.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.pms_enquiry.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.cashier_settlement.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.restart_pms_shell.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.set_menu_replace_item.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.repeat_item.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.repeat_multiple_items.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.check_discount.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.void_check_discount.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.adjust_payments.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.stop_pms_shell.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.paid_in.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.paid_out.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.drop.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.retrieve_ordered_items_by_resv_confirm_no.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.toggle_self_order_kiosk_mode.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.set_call_number.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.insert_item.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.add_edit_check_info.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.stop_payment_interface_shell.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.restart_auto_station.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.check_extra_charge.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.void_check_extra_charge.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.partial_send_check.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.print_paid_check.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.select_pending_item.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.print_pending_item.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.reprint_guest_check.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.change_ordered_item_price_level.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.multiple_rush_order.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.change_password.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.search_panel_hot_item.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.print_past_date_check.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.item_cover_discount.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.check_cover_discount.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.assign_employee_card_number.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.pms_redeem_package.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.park_order_by_outlet.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.retrieve_park_order_by_outlet.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.print_detail_check.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.search_item_by_sku.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.refund_item.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.toggle_ordering_basket_information.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.assign_check_to_target_outlet.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.assign_check_type.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.transfer_check_to_target_outlet.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.assign_default_payment.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.restart_portal_station.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.add_deposit.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.use_deposit.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.assign_table_attributes.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.edit_check_gratuity.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.paid.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.edit_set_menu.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.svc_enquiry.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.membership_registration.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.repeat_round_items.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.warning_message_list.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.toggle_print_receipt.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.toggle_ordering_basket_with_consolidate_items.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.stock_operation.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.stock_soldout.name()))) {
				bAllow = false;
			}
		}
		
		// In direct payment and cashier mode
		if (m_iCashierMode == 2 || m_bIsCheckLoadedForCashierMode
				|| (m_oFrameCashier != null && m_oFrameCashier.getVisible())) {
			if (sFunctionKey.equals(AppGlobal.FUNC_LIST.stock_operation.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.open_drawer.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.reprint_receipt.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.testing_printer.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.reprint_last_receipt.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.last_20_paid_check.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.open_first_drawer.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.open_second_drawer.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.pms_enquiry.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.octopus_read_card.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.octopus_add_value.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.octopus_reconnect.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.restart_pms_shell.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.stop_pms_shell.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.paid_in.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.paid_out.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.drop.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.set_call_number.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.add_edit_check_info.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.restart_payment_interface_shell.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.stop_payment_interface_shell.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.restart_auto_station.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.cashier_mode.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.set_other_taiwan_gui_type.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.reprint_last_taiwan_gui_receipt.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.reprint_taiwan_gui_receipt.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.set_taiwan_gui_next_trans_num.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.input_taiwan_gui_carrier.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.toggle_taiwan_gui_mode.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.refresh_table_status_by_table_num.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.toggle_print_receipt.name())) {
				// Allow to perform these functions only
			} else {
				// For other function, cannot perform
				bAllow = false;
			}
		} else {
			// Not in direct payment and cashier mode
			if (sFunctionKey.equals(AppGlobal.FUNC_LIST.set_other_taiwan_gui_type.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.set_taiwan_gui_next_trans_num.name())
					|| sFunctionKey.equals(AppGlobal.FUNC_LIST.input_taiwan_gui_carrier.name())) {
				// Cannot perform
				bAllow = false;
			}
		}
		
		// In "Split Revenue" function, only allow user to perform following functions
		if (m_sCurrentFunctionKey != null && m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name())) {
			String[] oAvailableFunctionList = { AppGlobal.FUNC_LIST.send_check.name(), AppGlobal.FUNC_LIST.cancel.name(),
					AppGlobal.FUNC_LIST.delete_item.name(), AppGlobal.FUNC_LIST.delete_last.name(),
					AppGlobal.FUNC_LIST.delete_multiple_item.name() };
			bAllow = false;
			for (String sTmpFuncKey: oAvailableFunctionList) {
				if (sTmpFuncKey.equals(sFunctionKey)) {
					bAllow = true;
					break;
				}
			}
		}
		
		return bAllow;
	}
	
	// Check if the function can be perform or not
	private boolean checkFunctionAvailableInDifferentMode(PosFunction oPosFunction) {
		boolean bAllow = true;
		
		if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode)
				|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)) {
			if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.send_check.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.print_check.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.print_and_paid.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.change_table.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.partial_send_check.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.select_pending_item.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.reprint_guest_check.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.payment_interface_card_authorization_and_send_check.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.repeat_round_items.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.split_revenue.name())) {
				// Cannot perform in fast mode
				bAllow = false;
			}
		} else if (AppGlobal.OPERATION_MODE.stock_delivery.equals(m_eOperationMode)) {
			if (!oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.send_check.name())
					&& !oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.cancel.name())
					&& !oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.delete_item.name())
					&& !oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.delete_last.name())
					&& !oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.change_quantity_last.name())
					&& !oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.stock_delivery_invoice_setup.name())
					&& !oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.receive_stock_delivery_invoice.name())) {
				// Cannot perform in fast mode
				bAllow = false;
			}
		} else if ((m_oFrameTableFloorPlan != null && m_oFrameTableFloorPlan.getVisible())
				|| (m_oFrameOpenTable != null && m_oFrameOpenTable.getVisible())) {
			if ((((m_oFrameTableFloorPlan.isFunctionBarButtonClicked() || m_oFrameFloorPlanFunctionPanel.getVisible())
					|| m_oFrameOpenTable.isFunctionBarButtonClicked()
					|| m_oFrameOpenTableWithQwertyKeyboard.isFunctionBarButtonClicked())
					&& (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.change_table.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.merge_table.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.open_share_table.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.print_check.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.unlock_table.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.check_history.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.mark_table_status_to_vacant.name())))
					|| (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.add_item_by_code.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.add_sc_tax.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.cancel.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.check_discount.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.change_quantity_last.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.change_cover.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.check_dine_in.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.check_takeout.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.check_extra_charge.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.delete_item.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.delete_multiple_item.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.delete_whole_last_item.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.delete_last.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.guest_check_preview.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.insert_item.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.item_discount.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.item_void_discount_multiple_items.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.item_discount_all_items.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.item_discount_multiple_items.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.item_modifier.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.mark_delivery.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.new_item_no_kitchen_slip.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.print_and_paid.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.paid.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.pantry_message.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.partial_send_check.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.park_order_by_station.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.preorder.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.preorder_by_table.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.print_pending_item.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.repeat_item.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.repeat_multiple_items.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.retrieve_park_order_by_station.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.retrieve_ordered_items_by_resv_confirm_no.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.receipt_preview.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.rush_order.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.send_check.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.select_pending_item.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.sell_coupon.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.split_table.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.split_check_by_options.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.split_item_to_other_table.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.split_item_with_quantity.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.set_menu_replace_item.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.set_call_number.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.set_member.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.toggle_non_revenue.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.toggle_revenue.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.takeout.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.void_check_discount.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.void_check_extra_charge.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.waive_sc_tax.name()))
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.change_ordered_item_price_level.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.toggle_ordering_basket_information.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.multiple_rush_order.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.payment_interface_card_authorization.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.payment_interface_cancel_card_authorization.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.payment_interface_transfer_card_authorization.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.payment_interface_cancel_complete_card_authorization.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.payment_interface_card_authorization_and_send_check.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.confirm_order_dialog.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.edit_set_menu.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.repeat_round_items.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.toggle_cover.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.set_member_discount.name())) {
				bAllow = false;
			}
		} else if (m_oFrameOrderingPanel != null && m_oFrameOrderingPanel.getVisible()){
			if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.split_revenue.name()))	// Not allow click "Split Revenue" function in ordering panel
				bAllow = false;
		}
		
		if (AppGlobal.g_oFuncStation.get().getDefaultTableNoForMenuMode() > 0) {
			// Menu mode
			if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.change_table.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.change_cover.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.check_takeout.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.toggle_non_revenue.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.toggle_revenue.name())) {
				// Cannot perform in menu mode
				bAllow = false;
			}
		}
		
		return bAllow;
	}
	
	// Check if the function can be perform or not
	private boolean checkFunctionAvailableOnOldCheck(PosFunction oPosFunction) {
		boolean bAllow = true;
		
		if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.park_order_by_station.name())
				|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.retrieve_park_order_by_station.name())) {
			bAllow = false;
			return bAllow;
		}
		
		if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode)
				|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)) {
			if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.check_listing.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.cancel.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.toggle_fast_food_mode.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.release_payment.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.void_payment.name())) {
				// Cannot perform on old check in fast mode
				bAllow = false;
			}
		}
		
		return bAllow;
	}
	
	// Switch outlet
	private void switchOutlet() {
		int iOriginalOutletId = AppGlobal.g_oFuncOutlet.get().getOutletId();
/**RevCenterChange [switchOutlet] */
		String sOriginalOutletCode = AppGlobal.g_oFuncOutlet.get().getOutletCode();
		PosOutletSettingList posOutletSettingList = new PosOutletSettingList();
		posOutletSettingList.readAll(AppGlobal.g_oFuncOutlet.get().getShopId());
		ArrayList<PosOutletSetting> oPosOutletSettingList = posOutletSettingList.getPosOutletSettingList();
		
		ArrayList<String> oOptionList = new ArrayList<String>();
		ArrayList<PosOutletSetting> oOptionPosOutletSettingList = new ArrayList<PosOutletSetting>();
		
		for (PosOutletSetting oPosOutletSetting : oPosOutletSettingList) {
			// Skip current outlet
			if (oPosOutletSetting.getOletId() == AppGlobal.g_oFuncOutlet.get().getOutletId())
				continue;
			
			String sOutletName = "";
			sOutletName = oPosOutletSetting.getOutlet().getName(AppGlobal.g_oCurrentLangIndex.get());
			
			if (sOutletName.length() > 0)
				oOptionList.add(sOutletName);
			else
				oOptionList.add(oPosOutletSetting.getOutlet().getOletId() + "");
			
			oOptionPosOutletSettingList.add(oPosOutletSetting);
		}
		
		if (oOptionPosOutletSettingList.isEmpty())
			return;
		
		FormCommonPageContainer oFormSelectionBox = new FormCommonPageContainer(this);
		oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select_the_outlet"), oOptionList, false);
		if (oFormSelectionBox.isUserCancel()) {
			if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode)
					|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
					|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode)) {
				// Fast food mode
				showTableFloorPlanScreen(false);
			} else {
				// Start the table floor plan timer
				this.updateTableFloorPlanTimer(true);
			}
			
			// must be forced quit after quit check
			AppGlobal.g_sResultForAutoFunction.set(AppGlobal.AUTO_FUNCTIONS_RESULT_LIST.forced_quit.name());
			return;
		} else {
			ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
			PosOutletSetting oPosOutletSetting = oOptionPosOutletSettingList.get(oSelectionBoxResult.get(0));
			
			// Selected outlet is in different failover station group, need to switch interface URL
			if (AppGlobal.isModuleSupport(AppGlobal.OPTIONAL_MODULE.failover.name())
					&& (AppGlobal.g_oFuncSmartStation.isWorkstationRole()
					|| AppGlobal.g_oFuncSmartStation.isServiceMasterRole())) {
				if (oPosOutletSetting.getFailoverStgpId() > 0 && AppGlobal.g_oFuncSmartStation.getFailoverStationGroupId() > 0
						&& oPosOutletSetting.getFailoverStgpId() != AppGlobal.g_oFuncSmartStation.getFailoverStationGroupId()) {	// logout and login to other web service if target outlet is not at same station group as current outlet
					String sErrMsg = "";
					if (oPosOutletSetting.getFailoverStaionGroup() == null)
						sErrMsg = AppGlobal.g_oLang.get()._("missing_failover_setting");
					
					if (oPosOutletSetting.getFailoverStaionGroup().getCommonSettingsByKey("master_launcher_interface_url").isEmpty())
						sErrMsg = AppGlobal.g_oLang.get()._("missing_master_launcher_interface_url");
					
					if (!sErrMsg.isEmpty()) {
						showAttentionDialogBox(sErrMsg);
						return;
					}
					
					UserUser oUser = new UserUser();
					String sAccessToken = oUser.getAccessTokenByLogin(AppGlobal.g_oFuncUser.get().getLoginId());
					AppGlobal.g_oTerm.get().switchOutlet(oPosOutletSetting.getFailoverStaionGroup().getCommonSettingsByKey("master_launcher_interface_url"),
							AppGlobal.g_oFuncUser.get().getLoginId(), sAccessToken, oPosOutletSetting.getOletId());
					
					logout(true);
					return;
				}
			}
			
			String sCurrOutletName = AppGlobal.g_oFuncOutlet.get().getOutlet()
					.getName(AppGlobal.g_oCurrentLangIndex.get());
			if (!loadOutletConfigSetup(oPosOutletSetting.getOletId(), true)) {
				// Load outlet failed
				// Roll back to original outlet
				if (!loadOutletConfigSetup(iOriginalOutletId, false)) {
					// Error occur, force close
					logout(true);
				}
			} else {
				
				// Add log to action log list
				AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.switch_outlet.name(),
						PosActionLog.ACTION_RESULT_SUCCESS, "", AppGlobal.g_oFuncUser.get().getUserId(),
						AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
						AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "", sCurrOutletName + "->"
								+ oPosOutletSetting.getOutlet().getName(AppGlobal.g_oCurrentLangIndex.get()));
				
				// For Taiwan GUI, loading the Taiwan GUI setup again
				boolean bReloadTaiwanGuiConfigure = true;
				if (AppGlobal.g_oFuncStation.get().supportTaiwanGui()) {
					bReloadTaiwanGuiConfigure = AppGlobal.g_oFuncStation.get().loadTaiwanGuiConfig(
							AppGlobal.g_oFuncOutlet.get().getBusinessDay().getDateInString(),
							oPosOutletSetting.getOletId());
					if (!bReloadTaiwanGuiConfigure) {
						// Load Taiwan GUI configure failed
						showAttentionDialogBox(AppGlobal.g_oLang.get()._("missing_taiwan_gui_configuration"));
						
						// Roll back to original outlet
						if (!loadOutletConfigSetup(iOriginalOutletId, false)) {
							// Error occur, force close
							logout(true);
						}
					}
				}
				
				// Switch outlet success
				// Reload floor plan
				if (bReloadTaiwanGuiConfigure) {
					Boolean bIsShowingTableMode = null;
					int iOpenTableScreenMode = AppGlobal.g_oFuncStation.get().getOpenTableScreenModeConfig();
					if (iOpenTableScreenMode == FuncStation.OPEN_TABLE_SCREEN_MODE_TABLE_MODE)
						bIsShowingTableMode = new Boolean(Boolean.TRUE);
					else
						bIsShowingTableMode = new Boolean(Boolean.FALSE);
					AppGlobal.addBackgroundScheduleTask(AppBackgroundScheduleJob.TYPE_UPDATE_TABLE_STATUS,
							AppGlobal.g_oFuncOutlet.get().getOutletId(), 100);
					panelOverride(0, "", true);
					loadFloorMap();
					if (!showFloorPlan(true, bIsShowingTableMode)) {
						// Load floor plan failed
						// Roll back to original outlet
						if (!loadOutletConfigSetup(iOriginalOutletId, false)) {
							// Error occur, force close
							logout(true);
						}else {
							panelOverride(0, "", true);
							loadFloorMap();
							showFloorPlan(true, bIsShowingTableMode);
						}
					}
				}
				
				m_oFrameOrderingPanel.removeAllPanelPage();
				m_oFrameFuncPanel2.removeAllPanelPage();
				loadOrderingPanel();
				loadFloorPlanFunctionPanel();
				loadFunctionPanel(2, PosDisplayPanelZone.KEY_ORDERING_FUNCTION);
				
				// Add a background job to check soldout status
				AppGlobal.addBackgroundScheduleTask(AppBackgroundScheduleJob.TYPE_UPDATE_SOLDOUT_STATUS,
						AppGlobal.g_oFuncOutlet.get().getOutletId(), 1000);
				
				// Add a background job to check soldout status
				AppGlobal.addBackgroundScheduleTask(AppBackgroundScheduleJob.TYPE_UPDATE_ITEM_STOCK_QTY_STATUS,
						AppGlobal.g_oFuncOutlet.get().getOutletId(), 1000);
				
				// reload the name of info bar
				m_oFrameStationInfoBar.setUserName(AppGlobal.g_oFuncUser.get().getUserName());
				m_oFrameStationInfoBar.setOutletName(AppGlobal.g_oFuncOutlet.get().getOutletName());
				m_oFrameStationInfoBar.setBusinessDay(AppGlobal.g_oFuncOutlet.get().getFormatBusinessDay());
				m_oFrameStationInfoBar.changeButtonLanguage();
				
				// handle action log
				AppGlobal.g_oActionLog.get().handleActionLog(false);

/**RevCenterChange [switchOutlet] */
				// surveillance event: RevCenterChange
				HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
				oSurveillanceEventInfo.put("prevRevCenter", sOriginalOutletCode);
				oSurveillanceEventInfo.put("newRevCenter", AppGlobal.g_oFuncOutlet.get().getOutletCode());
				this.doSurveillanceEvent(FuncSurveillance.SURVEILLANCE_TYPE_REV_CENTER_CHANGE, oSurveillanceEventInfo);
				
				if(AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) && AppGlobal.g_oFuncMenu.get().getIsSetOrderItemControl()){
					m_oPosDisplayPanel.clearDisplayPanelMenusAndMenuItems();
					AppGlobal.g_oFuncMenu.get().clearStoredMenuMenusAndMenuItemsList();
				}
				
			}
		}
		
		if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode)
				|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
				|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode)) {
			// Fast food mode
			showTableFloorPlanScreen(false);
		} else {
			// Start the table floor plan timer
			updateTableFloorPlanTimer(true);
			
			// Update table status cleaning list for every station init if outlet is not found in the list
			AppGlobal.updateCleaningTableList(null, null);
		}
		
		// must be forced quit after quit check
		AppGlobal.g_sResultForAutoFunction.set(AppGlobal.AUTO_FUNCTIONS_RESULT_LIST.forced_quit.name());
		
		// special handling for search table frame if visible
		if(!m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab) && (m_oFrameOpenTable.getVisible() || m_oFrameOpenTableWithQwertyKeyboard.getVisible())) {
			m_oFrameCover.bringToTop();
			if(m_oFrameOpenTable.getVisible())
				m_oFrameOpenTable.bringToTop();
			else
				m_oFrameOpenTableWithQwertyKeyboard.bringToTop();
		}
	}
	
	// retrieve preorder
	public void retrievePreorder(int iOrderId) {
		JSONObject oPreOrderJSONObject;
		
		if (iOrderId == 0) {
			String sRefNo;
			while (true) {
				// Ask for reference no.
				FormInputBox oFormInputBox = new FormInputBox(this);
				oFormInputBox.init();
				oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("pre_order"));
				oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("please_input_the_reference_no") + ":");
				oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.NUMBER);
				oFormInputBox.setEnterBlockUI(true);
				oFormInputBox.show();
				
				sRefNo = oFormInputBox.getSwipeCardValue();
				if (sRefNo == null || sRefNo.isEmpty())
					sRefNo = oFormInputBox.getInputValue();
				if (sRefNo == null)
					return;
				sRefNo = sRefNo.trim();
				
				// Add log to action log list
				AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.preorder.name(),
						PosActionLog.ACTION_RESULT_SUCCESS, m_oFuncCheck.getTableNoWithExtensionForDisplay(),
						AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
						AppGlobal.g_oFuncOutlet.get().getOutletId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
						AppGlobal.g_oFuncStation.get().getStationId(), m_oFuncCheck.getCheckId(), "", "", "", "",
						"RefNo:" + sRefNo);
				
				// Retrieve pre-order
				oPreOrderJSONObject = m_oFuncCheck.retrievePreorderByRefNo(sRefNo);
				if (oPreOrderJSONObject == null) {
					// No such pre-order
					showAttentionDialogBox(AppGlobal.g_oLang.get()._("invalid_reference_no"));
					continue;
				}
				
				break;
			}
			
		} else {
			// Add log to action log list
			AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.preorder.name(),
					PosActionLog.ACTION_RESULT_SUCCESS, m_oFuncCheck.getTableNoWithExtensionForDisplay(),
					AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
					AppGlobal.g_oFuncOutlet.get().getOutletId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
					AppGlobal.g_oFuncStation.get().getStationId(), m_oFuncCheck.getCheckId(), "", "", "", "",
					"Order ID:" + iOrderId);
			
			// Retrieve pre-order
			oPreOrderJSONObject = m_oFuncCheck.retrievePreorderByOrderId(iOrderId);
			if (oPreOrderJSONObject == null)
				return;
		}
		
		readPreOrderJSONObject(oPreOrderJSONObject);
	}
	
	public void readPreOrderJSONObject(JSONObject oPreOrderJSONObject) {
		// change check to takeout as necessary
		JSONArray oItemJSONArray = oPreOrderJSONObject.optJSONArray("items");
		if (oItemJSONArray == null)
			return;
		
		String sTakeout = "";
		if (oPreOrderJSONObject.has("ordering_type"))
			sTakeout = oPreOrderJSONObject.optString("ordering_type");
		
		// change check to takeout, only use for new check
		if (!m_oFuncCheck.isOldCheck()) {
			if (sTakeout.equals(PreorderCheck.ORDERING_TYPE_TAKEOUT) && m_oFuncCheck.isNormalOrderingType()) {
				HashMap<String, String> oFunctionParams = new HashMap<String, String>();
				oFunctionParams.put("askToConfirm", "false");
				PosFunction oFunction = m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.check_takeout.name());
				fcnSwitch(oFunction.getFuncId(), "", -1, -1, false, oFunctionParams);
			} else if (sTakeout.equals(PreorderCheck.ORDERING_TYPE_DINE_IN) && m_oFuncCheck.isTakeoutOrderingType()) {
				HashMap<String, String> oFunctionParams = new HashMap<String, String>();
				oFunctionParams.put("askToConfirm", "false");
				PosFunction oFunction = m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.check_dine_in.name());
				fcnSwitch(oFunction.getFuncId(), "", -1, -1, false, oFunctionParams);
			}
		}
		
		// Force call update of item
		this.frameOrderingPanel_UpdateMenuItem();
		
		for (int i = 0; i < oItemJSONArray.length(); i++) {
			JSONObject oItemJsonObject = oItemJSONArray.optJSONObject(i);
			if (oItemJsonObject == null)
				continue;
			
			int iItemId = oItemJsonObject.optInt("id");
			BigDecimal dItemQty = new BigDecimal(oItemJsonObject.optString("qty"));
			
			// Add hot item
			boolean bAddSuccess = addHotItem(iItemId, dItemQty, true);
			int iSelectedItemSeatNo = m_oFrameOrderingBasket.getSelectedSectionId();
			int iSelectedItemIndex = m_oFuncCheck.getItemListCount(iSelectedItemSeatNo) - 1;
			FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iSelectedItemSeatNo, iSelectedItemIndex);
			if (m_oFuncCheck.isOldCheck() && sTakeout.equals(PreorderCheck.ORDERING_TYPE_TAKEOUT)) // change ordering type of item to takeout if the preorder is order in takeaway type
				oFuncCheckItem.takeout(true);
			oFuncCheckItem.addExtraInfo(PosCheckExtraInfo.BY_ITEM, PosCheckExtraInfo.SECTION_PREORDER,
					PosCheckExtraInfo.VARIABLE_ITEM, oPreOrderJSONObject.optString("id", ""));
			updateBasketItemInfo(iSelectedItemSeatNo, iSelectedItemIndex);
			
			// If item is added, process modifier if any
			if (bAddSuccess && oItemJsonObject.has("modifiers")) {
				if (!oItemJsonObject.isNull("modifiers")) {
					// Add modifier
					JSONArray oModifierJsonArray = oItemJsonObject.optJSONArray("modifiers");
					for (int j = 0; j < oModifierJsonArray.length(); j++) {
						JSONObject oModifierJsonObject = oModifierJsonArray.optJSONObject(j);
						if (oModifierJsonObject == null)
							continue;
						
						int iModifierId = oModifierJsonObject.optInt("id");
						BigDecimal dModifierQty = new BigDecimal(oModifierJsonObject.optString("qty", "0"));
						
						// Base on the qty to add multiple modifiers
						for (int k = 0; k < dModifierQty.intValue(); k++) {
							// Get the last item
							int iSelectedSeatNo = m_oFrameOrderingBasket.getSelectedSectionId();
							int iCurrentItemIndex = m_oFuncCheck.getItemListCount(iSelectedSeatNo) - 1;
							FuncCheckItem oLastCheckItem = m_oFuncCheck.getCheckItem(iSelectedSeatNo,
									iCurrentItemIndex);
							
							addModifier(oLastCheckItem, iModifierId, -1, new BigDecimal("1.0"), null);
							// Add hot modifier success
							finishAddModifier(iSelectedSeatNo, iCurrentItemIndex);
						}
					}
				}
			}
		}
		
		// Apply auto check discount if any
		if (oPreOrderJSONObject.has("discount_type")) {
			int iAutoDiscId = oPreOrderJSONObject.optInt("discount_type");
			String sApplyDiscountResult = autoDiscountForPayment("check", iAutoDiscId, null, null, null);
			if (sApplyDiscountResult.equals(FormMain.FUNC_RESULT_NO_SUCH_RECORD))
				AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
						AppGlobal.g_oFuncUser.get().getUserId() + "",
						"Cannot find the predefine auto discount(id:" + iAutoDiscId + ")");
			// Update extend bar
			this.updateBasketExtendBarCheckTotal();
		}
		
		// Check member is porivded
		if (oPreOrderJSONObject.has("member") && oPreOrderJSONObject.optString("member", null) != null
				&& !oPreOrderJSONObject.optString("member", null).isEmpty()) {
			if (m_oFuncCheck.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_PREORDER,
					PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER, 0))
				m_oFuncCheck.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_PREORDER,
						PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER, 0, oPreOrderJSONObject.optString("member", ""));
			else
				m_oFuncCheck.addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_PREORDER,
						PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER, 0, oPreOrderJSONObject.optString("member", ""));
		}
	}
	
	// retrieve preorder
	public void getPreorderListByTable() {
		String sTableNo = "", sTableExtension = "";
		int iOrderId = 0;
		
		if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode)
				|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)) {
			// ask table
			FormAskTable oFormAskTable = new FormAskTable(this);
			oFormAskTable.init(0, true, AppGlobal.g_oFuncOutlet.get().getOutletId());
			oFormAskTable.setTitle(AppGlobal.g_oLang.get()._("pre_order"));
			oFormAskTable.show();
			
			if (oFormAskTable.isCanelClick())
				return;
			
			sTableNo = oFormAskTable.getTableNo() + "";
			sTableExtension = oFormAskTable.getTableExtension();
			
		} else {
			sTableNo = m_oFuncCheck.getTableNo();
			sTableExtension = m_oFuncCheck.getTableExtension();
		}
		
		FormPreOrderList oPreOrderList = new FormPreOrderList(this);
		if (oPreOrderList.init(sTableNo, sTableExtension) == false)
			return;
		oPreOrderList.show();
		
		if (oPreOrderList.isUserCancel())
			return;
		
		// handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
		// get the chosen pre order
		if (oPreOrderList.getChosenPreOrder() == null)
			return;
		
		iOrderId = oPreOrderList.getChosenPreOrder().optInt("id");
		
		// perform change table internally
		if ((AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode)
				|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
				|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode))
				&& m_oFuncCheck.changeTable(sTableNo, sTableExtension, true) == true) {
			if(m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab) && m_oFuncCheck.getTableExtension().length() > 0 && m_oFuncCheck.getTableExtension().substring(m_oFuncCheck.getTableExtension().length() - 1).compareTo(AppGlobal.BAR_TAB_TABLE_EXTENSION) == 0) {
				String[] sTable = StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, AppGlobal.g_oLang.get()._("auto"));
				m_oFrameCheckDetail.setTableNo(sTable);
			}else
				m_oFrameCheckDetail.setTableNo(AppGlobal.g_oFuncOutlet.get().getTableName(sTableNo, sTableExtension));
		}
		
		retrievePreorder(iOrderId);
	}
	
	public void startTakeout() {
		toggleBacketMultiSelectMode(true, AppGlobal.FUNC_LIST.takeout.name(), FrameOrderingBasket.SELECT_TYPE_ALL, FrameBasketSelectPanel.BASKET_SELECT_MODE_MULTI);
		
		for (int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
			// Create ordering basket section for seat
			ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck.getItemList(i);
			
			if (oFuncCheckItemList != null && oFuncCheckItemList.size() > 0) { // Has ordered items in seat i
				for (int j = 0; j < oFuncCheckItemList.size(); j++) {
					FuncCheckItem oFuncCheckItem = oFuncCheckItemList.get(j);
					if (oFuncCheckItem.isOldItem())
						continue;
					
					// Check if any item is set takeout before
					if (oFuncCheckItem.getCheckItem().isTakeoutOrderingType()) {
						String sKey = i + "_" + j;
						
						// Select
						m_oBasketSelectedItems.put(sKey, 0);
						
						// Set takeout before
						m_oFrameOrderingBasket.setSelected(i, j, FrameOrderingBasket.SELECT_TYPE_NEW_ITEM, FrameOrderingBasket.SHOW_TYPE_SELECT);
					}
				}
			}
		}
	}
	
	// Set item takeout in current check party
	private void processTakeout(List<HashMap<String, Integer>> oSelectedItems, boolean bMultipleSelection) {
		List<HashMap<String, Integer>> oTakeoutItemIds = new ArrayList<HashMap<String, Integer>>();
		List<HashMap<String, Integer>> oClearTakeoutItemIds = new ArrayList<HashMap<String, Integer>>();
		
		for (int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
			// Create ordering basket section for seat
			ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck.getItemList(i);
			
			if (oFuncCheckItemList != null && oFuncCheckItemList.size() > 0) { // Has ordered items in seat i
				for (int j = 0; j < oFuncCheckItemList.size(); j++) {
					if (oFuncCheckItemList.get(j).isOldItem())
						continue;
					
					FuncCheckItem oFuncCheckItem = oFuncCheckItemList.get(j);
					PosCheckItem oPosCheckItem = oFuncCheckItem.getCheckItem();
					
					String sKey = m_oFuncCheck.getCurrentCheckPartySeq() + "_" + i + "_" + j;
					
					// Check if the item is selected or not
					Boolean bSelected = false;
					for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
						String sSelectedKey = oSelectedItem.get("partySeq") + "_" + oSelectedItem.get("sectionId") + "_"
								+ oSelectedItem.get("itemIndex");
						if (sKey.equals(sSelectedKey)) {
							// Skip the Check Item and prompt message if the users select minimum charge item
							if(isMinimumChargeItem(oFuncCheckItem))
								continue;
							bSelected = true;
							break;
						}
					}
					
					// Skip the Check Item if the looping item is minimum charge item
					if(oFuncCheckItem.isMinimumChargeItem())
						continue;
					
					HashMap<String, Integer> oSelectedTakeoutItem = new HashMap<String, Integer>();
					oSelectedTakeoutItem.put("partySeq", m_oFuncCheck.getCurrentCheckPartySeq());
					oSelectedTakeoutItem.put("sectionId", i);
					oSelectedTakeoutItem.put("itemIndex", j);
					
					// Check if any item is takeout before
					if (oPosCheckItem.isTakeoutOrderingType()) {
						// Takeout before
						if (!bMultipleSelection) {
							// Form item function
							if (bSelected)
								oClearTakeoutItemIds.add(oSelectedTakeoutItem);
						} else {
							// Form multiple selection
							if (!bSelected)
								// Clear takeout
								oClearTakeoutItemIds.add(oSelectedTakeoutItem);
						}
					} else {
						// Not takeout before
						if (bSelected) {
							// Takeout
							oTakeoutItemIds.add(oSelectedTakeoutItem);
						}
					}
				}
			}
		}
		
		if (oTakeoutItemIds.size() > 0 || oClearTakeoutItemIds.size() > 0) {
			m_oFuncCheck.takeout(oTakeoutItemIds, oClearTakeoutItemIds);
			this.updateBasketExtendBarCheckTotal();
			// Update basket
			for (int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
				// Create ordering basket section for seat
				ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck.getItemList(i);
				
				if (oFuncCheckItemList != null && oFuncCheckItemList.size() > 0) { // Has ordered items in seat i
					for (int j = 0; j < oFuncCheckItemList.size(); j++) {
						FuncCheckItem oFuncCheckItem = oFuncCheckItemList.get(j);
						updateBasketItemPrice(i, j, oFuncCheckItem);
					}
				}
			}
			updateAllItemBasketInfo(PosCheckItem.UPDATE_MODE_NEW_ITEM);
		}
	}
	
	private void checkTakeout(boolean bAskToConfirm) {
		if (m_oFuncCheck.isOldCheck()) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("not_available_on_old_check"));
			return;
		}
		
		if (m_oFuncCheck.isTakeoutOrderingType())
			return;
		
		if (bAskToConfirm) {
			PosFunction oFunction = m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.check_takeout.name());
			
			// Ask confirmation for action
			FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("confirm"),
					AppGlobal.g_oLang.get()._("cancel"), this);
			oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
			oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("confirm_to_change_to") + " "
					+ oFunction.getName(AppGlobal.g_oCurrentLangIndex.get()) + "?");
			oFormConfirmBox.show();
			if (oFormConfirmBox.isOKClicked() == false)
				return;
		}
		
		List<HashMap<String, Integer>> oTakeoutItemIds = new ArrayList<HashMap<String, Integer>>();
		List<HashMap<String, Integer>> oClearTakeoutItemIds = new ArrayList<HashMap<String, Integer>>();
		for (int i = 0; i < m_oFuncCheck.getCheckPartyList().size(); i++) {
			for (int j = 0; j <= AppGlobal.MAX_SEATS; j++) {
				ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck.getItemList(j);
				if (oFuncCheckItemList != null && oFuncCheckItemList.size() > 0) {
					for (int k = 0; k < oFuncCheckItemList.size(); k++) {
						HashMap<String, Integer> oSelectedTakeoutItem = new HashMap<String, Integer>();
						oSelectedTakeoutItem.put("partySeq", i);
						oSelectedTakeoutItem.put("sectionId", j);
						oSelectedTakeoutItem.put("itemIndex", k);
						oTakeoutItemIds.add(oSelectedTakeoutItem);
					}
				}
			}
		}
		if (oTakeoutItemIds.size() > 0 || oClearTakeoutItemIds.size() > 0) {
			m_oFuncCheck.takeout(oTakeoutItemIds, oClearTakeoutItemIds);
			this.updateBasketExtendBarCheckTotal();
			updateAllItemBasketInfo(PosCheckItem.UPDATE_MODE_NEW_ITEM);
			
			// Update basket
			for (int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
				// Create ordering basket section for seat
				ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck.getItemList(i);
				if (oFuncCheckItemList != null && oFuncCheckItemList.size() > 0) { // Has ordered items in seat i
					for (int j = 0; j < oFuncCheckItemList.size(); j++) {
						FuncCheckItem oFuncCheckItem = oFuncCheckItemList.get(j);
						updateBasketItemPrice(i, j, oFuncCheckItem);
					}
				}
			}
		}
		
		// Add log to action log list
		AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.check_takeout.name(),
				PosActionLog.ACTION_RESULT_SUCCESS, m_oFuncCheck.getTableNoWithExtensionForDisplay(),
				AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
				AppGlobal.g_oFuncOutlet.get().getOutletId(), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
				AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "", "");
		// handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
		m_oFuncCheck.setOrderingType(PosCheck.ORDERING_TYPE_TAKEOUT);
		this.showOrderingModeImage();
	}
	
	private void checkDineIn(boolean bAskToConfirm) {
		if (m_oFuncCheck.isOldCheck()) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("not_available_on_old_check"));
			return;
		}
		
		if (m_oFuncCheck.isNormalOrderingType())
			return;
		
		if (bAskToConfirm) {
			PosFunction oFunction = m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.check_dine_in.name());
			
			// Ask confirmation for action
			FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("confirm"),
					AppGlobal.g_oLang.get()._("cancel"), this);
			oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
			oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("confirm_to_change_to") + " "
					+ oFunction.getName(AppGlobal.g_oCurrentLangIndex.get()) + "?");
			oFormConfirmBox.show();
			if (oFormConfirmBox.isOKClicked() == false)
				return;
		}
		
		List<HashMap<String, Integer>> oTakeoutItemIds = new ArrayList<HashMap<String, Integer>>();
		List<HashMap<String, Integer>> oClearTakeoutItemIds = new ArrayList<HashMap<String, Integer>>();
		for (int i = 0; i < m_oFuncCheck.getCheckPartyList().size(); i++) {
			for (int j = 0; j <= AppGlobal.MAX_SEATS; j++) {
				ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck.getItemList(j);
				if (oFuncCheckItemList != null && oFuncCheckItemList.size() > 0) {
					for (int k = 0; k < oFuncCheckItemList.size(); k++) {
						HashMap<String, Integer> oSelectedTakeoutItem = new HashMap<String, Integer>();
						oSelectedTakeoutItem.put("partySeq", i);
						oSelectedTakeoutItem.put("sectionId", j);
						oSelectedTakeoutItem.put("itemIndex", k);
						oClearTakeoutItemIds.add(oSelectedTakeoutItem);
					}
				}
			}
		}
		if (oTakeoutItemIds.size() > 0 || oClearTakeoutItemIds.size() > 0) {
			m_oFuncCheck.takeout(oTakeoutItemIds, oClearTakeoutItemIds);
			this.updateBasketExtendBarCheckTotal();
			updateAllItemBasketInfo(PosCheckItem.UPDATE_MODE_NEW_ITEM);
			
			// Update basket
			for (int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
				// Create ordering basket section for seat
				ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck.getItemList(i);
				if (oFuncCheckItemList != null && oFuncCheckItemList.size() > 0) { // Has ordered items in seat i
					for (int j = 0; j < oFuncCheckItemList.size(); j++) {
						FuncCheckItem oFuncCheckItem = oFuncCheckItemList.get(j);
						updateBasketItemPrice(i, j, oFuncCheckItem);
					}
				}
			}
		}
		
		// Add log to action log list
		AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.check_dine_in.name(),
				PosActionLog.ACTION_RESULT_SUCCESS, "", AppGlobal.g_oFuncUser.get().getUserId(),
				AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
				AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "", "");
		// handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
		m_oFuncCheck.setOrderingType(PosCheck.ORDERING_TYPE_NORMAL);
		this.showOrderingModeImage();
	}
	
	private void applyMemberInterfaceScTaxAndDiscount(PosInterfaceConfig oMemberInterface, boolean bApply) {
		boolean bWaiveSC = false, bWaiveTax = false;
		String sAutoDiscCode = "", sAutoDiscType = "";
		DateTimeFormatter dateFormat = DateTimeFormat.forPattern("yyyy-MM-dd");
		PosBusinessDay oBusinessDay = AppGlobal.g_oFuncOutlet.get().getBusinessDay();
		PosDiscountTypeList oDiscTypeList = new PosDiscountTypeList();
		List<HashMap<String, Integer>> oSelectedItems = new ArrayList<HashMap<String, Integer>>();
		JSONObject oPaymentSettingObject = null;
		oSelectedItems = m_oFuncCheck.getSectionItemIndexForCurrentOrderedItem();
		
		if (oMemberInterface == null)
			return;
		else {
			// check whether general member interface
			if (!oMemberInterface.getInterfaceVendorKey().equals(InfVendor.KEY_GENERAL))
				return;
			
			// get member interface setup
			oPaymentSettingObject = oMemberInterface.getInterfaceConfig().optJSONObject("set_member_setting")
					.optJSONObject("params");
			// oSwitchOfflineObject =
			// oMemberInterface.getInterfaceConfig().optJSONObject("switch_offline_setting").optJSONObject("params");
			
			if (oPaymentSettingObject.optJSONObject("waive_sc").optInt("value", 0) == 1)
				bWaiveSC = true;
			if (oPaymentSettingObject.optJSONObject("waive_tax").optInt("value", 0) == 1)
				bWaiveTax = true;
			
			sAutoDiscType = oPaymentSettingObject.optJSONObject("auto_discount_type").optString("value", "");
			sAutoDiscCode = oPaymentSettingObject.optJSONObject("auto_discount").optString("value", "");
		}
		
		// waive SC/Tax or void waive SC/Tax
		if (bWaiveSC || bWaiveTax) {
			int i;
			
			boolean[] bChosenSc = new boolean[5];
			String[] sChosenTax = new String[25];
			
			for (i = 0; i < 5; i++) {
				if (bWaiveSC)
					bChosenSc[i] = this.allowChargeScTax(i, true, oSelectedItems);
				else
					bChosenSc[i] = false;
			}
			
			for (i = 0; i < 25; i++) {
				if (bWaiveTax){
					if(this.allowChargeScTax(i, false, oSelectedItems))
						sChosenTax[i] = PosOverrideCondition.CHARGE_TAX_WAIVE;
					else
						sChosenTax[i] = PosOverrideCondition.CHARGE_TAX_NO_CHANGE;
				}else
					sChosenTax[i] = PosOverrideCondition.CHARGE_TAX_NO_CHANGE;
			}
			if (!m_oFuncCheck.addWaiveScTax(!bApply, oSelectedItems, bChosenSc, sChosenTax))
				return;
		}
		
		if (bApply) {
			// apply discount
			if (sAutoDiscCode != null && !sAutoDiscCode.equals("")) {
				oDiscTypeList.readDiscountListByOutletId(sAutoDiscType, AppGlobal.g_oFuncOutlet.get().getShopId(),
						AppGlobal.g_oFuncOutlet.get().getOutletId(), AppGlobal.g_oFuncStation.get().getStationId(),
						dateFormat.print(oBusinessDay.getDate()), oBusinessDay.isHoliday(),
						oBusinessDay.isDayBeforeHoliday(), oBusinessDay.isSpecialDay(),
						oBusinessDay.isDayBeforeSpecialDay(), oBusinessDay.getDayOfWeek(),
						AppGlobal.g_oFuncUser.get().getUserGroupList(), false);
				PosDiscountType oAutoDiscount = oDiscTypeList.getDiscountTypeByCode(sAutoDiscCode);
				
				if (oAutoDiscount != null && oAutoDiscount.getDtypId() > 0) {
					String sApplyDiscountResult = autoDiscountForPayment(sAutoDiscType, oAutoDiscount.getDtypId(), null,
							null, null);
					if (sApplyDiscountResult.equals(FormMain.FUNC_RESULT_NO_SUCH_RECORD)) {
						AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
								AppGlobal.g_oFuncUser.get().getUserId() + "",
								" cannot find the predefine auto discount(id:" + oAutoDiscount.getDtypId() + ")");
					} else if (sApplyDiscountResult.equals(FormMain.FUNC_RESULT_FAIL))
						return;
				}
			}
		} else {
			// roll back the attached discount
			if (sAutoDiscCode != null && !sAutoDiscCode.equals("")) {
				oDiscTypeList.readDiscountListByOutletId(sAutoDiscType, AppGlobal.g_oFuncOutlet.get().getShopId(),
						AppGlobal.g_oFuncOutlet.get().getOutletId(), AppGlobal.g_oFuncStation.get().getStationId(),
						dateFormat.print(oBusinessDay.getDate()), oBusinessDay.isHoliday(),
						oBusinessDay.isDayBeforeHoliday(), oBusinessDay.isSpecialDay(),
						oBusinessDay.isDayBeforeSpecialDay(), oBusinessDay.getDayOfWeek(),
						AppGlobal.g_oFuncUser.get().getUserGroupList(), false);
				PosDiscountType oAutoDiscount = oDiscTypeList.getDiscountTypeByCode(sAutoDiscCode);
				int iDiscountIndex = -1;
				
				if (oAutoDiscount != null && oAutoDiscount.getDtypId() > 0) {
					if (sAutoDiscType.equals("item")) {
						// iDisountIndex = 0 , only one item discount can be
						// applied
						m_oFuncCheck.voidDiscount(sAutoDiscType, PosDiscountType.USED_FOR_DISCOUNT, oSelectedItems, 0,
								0, "");
					} else {
						List<PosCheckDiscount> oHashMapAppliedDisc = m_oFuncCheck.getCurrentPartyAppliedCheckDiscount();
						for (PosCheckDiscount oPosCheckDiscount : oHashMapAppliedDisc) {
							if (oAutoDiscount.getDtypId() == oPosCheckDiscount.getDtypId()) {
								iDiscountIndex = oPosCheckDiscount.getSeq();
								break;
							}
						}
						if (iDiscountIndex != -1)
							m_oFuncCheck.voidDiscount(sAutoDiscType, PosDiscountType.USED_FOR_DISCOUNT, oSelectedItems,
									iDiscountIndex, 0, "");
					}
				}
				
				for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
					FuncCheckItem oParentFuncCheckItem = m_oFuncCheck.getCheckItem(oSelectedItem.get("sectionId"),
							oSelectedItem.get("itemIndex"));
					// Update basket
					this.updateBasketItemPrice(oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"),
							oParentFuncCheckItem);
					this.updateBasketItemInfo(oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
				}
			}
		}
		
		// Update basket
		for (int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
			// Create ordering basket section for seat
			ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck.getItemList(i);
			
			if (oFuncCheckItemList != null && oFuncCheckItemList.size() > 0) { // Has ordered items in seat i
				for (int j = 0; j < oFuncCheckItemList.size(); j++) {
					FuncCheckItem oFuncCheckItem = oFuncCheckItemList.get(j);
					updateBasketItemPrice(i, j, oFuncCheckItem);
				}
			}
		}
		this.updateBasketExtendBarCheckTotal();
	}
	
	// Set member function
	private boolean setMember(int iDefaultMemberId) {
		if (AppGlobal.isModuleSupport(AppGlobal.OPTIONAL_MODULE.member.name()) == false) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("member_module_is_not_supported"));
			return false;
		}
		
		if (iDefaultMemberId == 0) {
			boolean bShowClearMemberButton = false;
			HashMap<String, String> oCheckInfo = new HashMap<String, String>();
			oCheckInfo.put("checkId", String.valueOf(m_oFuncCheck.getMemberId()));
			oCheckInfo.put("checkNumber", m_oFuncCheck.getCheckPrefixNo());
			oCheckInfo.put("checkAmount", m_oFuncCheck.getCheckTotal().toPlainString());
			
			if(m_oFuncCheck.getMemberId() > 0)
				bShowClearMemberButton = true;
			
			List<PosCheckExtraInfo> oInterfaceMemberExtraInfos = new ArrayList<PosCheckExtraInfo>();
			for (int i = 0; i < m_oFuncCheck.getCheckExtraInfoList().size(); i++) {
				if (m_oFuncCheck.getCheckExtraInfoList().get(i).getSection()
						.equals(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE))
					oInterfaceMemberExtraInfos.add(m_oFuncCheck.getCheckExtraInfoList().get(i));
			}
			
			//Get member validation setting
			String sMemberSearchMode = FormSearchMemberFunction.SEARCH_MODE.normal.name();
			String sMemberValidateSetting = AppGlobal.g_oFuncStation.get().getMemberValidationSetting();
			if(!sMemberValidateSetting.isEmpty()) {
				try {
					JSONObject jsonObject = new JSONObject(sMemberValidateSetting);
					if(jsonObject.has("member_type") && jsonObject.optString("member_type", "").equals(FormSearchMemberFunction.SEARCH_MODE.employeeMember.name()))
						sMemberSearchMode = FormSearchMemberFunction.SEARCH_MODE.employeeMember.name();;
				} catch (JSONException e) {
					AppGlobal.stack2Log(e);
				}
			}
			FormSearchMemberFunction oFormSearchMemberFunction = new FormSearchMemberFunction(this);
			if (oFormSearchMemberFunction.init(m_oFuncCheck, oInterfaceMemberExtraInfos, oCheckInfo, 0, true, true,
					bShowClearMemberButton, AppGlobal.g_oLang.get()._("set_member"), null,
					sMemberSearchMode) == false) {
				return false; // user cancel
			}
			oFormSearchMemberFunction.show();
			
			MemMember oMember = oFormSearchMemberFunction.getAssignedMember();
			
			if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)) {
				DateTime oDateTimeForNextCheck = oFormSearchMemberFunction.getLastCheckClosedTimeByMemberId(oMember.getMemberId(), AppGlobal.g_oFuncStation.get().getTimeControlToOpenNextCheckbyMember());
				if(!oFormSearchMemberFunction.compareLastCheckClosedTimeByMemberId(oDateTimeForNextCheck)) {
					DateTimeFormatter oFormatter = DateTimeFormat.forPattern("HH:mm:ss");
					DateTime oDisplayTimeZone = oDateTimeForNextCheck.toDateTime(DateTimeZone.getDefault());
					String sDisplayMessage = AppGlobal.g_oLang.get()._("cannot_open_new_check") + " "
							+ AppGlobal.g_oLang.get()._("since_time_interval_set_for_open_new_check")
							+ System.lineSeparator() + System.lineSeparator()
							+ AppGlobal.g_oLang.get()._("available_time_to_open_new_check") + ":" + System.lineSeparator()
							+ oDisplayTimeZone.toString(oFormatter);
					this.showAttentionDialogBox(sDisplayMessage);
					// Make sure all screens are closed
					closeAllScreen();
					// Quit check
					quitCheck(false);
					oFormSearchMemberFunction.setUserInputType(FormSearchMemberFunction.SELECT_CLEAR_MEMBER);
				}
			}
			
			HashMap<String, String> oInterfaceMember = oFormSearchMemberFunction.getAssignedInterfaceMember();
			
			if (oFormSearchMemberFunction.getUserInputType() == FormSearchMemberFunction.SELECT_SET_MEMBER) {
				// Set member
				boolean bCleanPreviousMember = false;
				if (oInterfaceMember != null) {
					if (m_oFuncCheck.getMemberId() > 0) {
						FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("confirm"),
								AppGlobal.g_oLang.get()._("cancel"), this);
						oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
						oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("clear_previous_offline_member"));
						oFormConfirmBox.show();
						
						if (!oFormConfirmBox.isOKClicked()) {
							return false;
						} else
							bCleanPreviousMember = true;
					}
					
					// save online member infos
					PosInterfaceConfig oMemberInterface = oFormSearchMemberFunction.getMemberInterface();
					ArrayList<HashMap<String, String>> oCheckExtraInfos = new ArrayList<HashMap<String, String>>();
					
					HashMap<String, String> oInterfaceId = new HashMap<String, String>();
					oInterfaceId.put("variable", PosCheckExtraInfo.VARIABLE_INTERFACE_ID);
					oInterfaceId.put("index", "0");
					oInterfaceId.put("value", String.valueOf(oMemberInterface.getInterfaceId()));
					oCheckExtraInfos.add(oInterfaceId);
					
					String sVariableNumber = "", sVariableName = "";
					if (oMemberInterface.getInterfaceVendorKey().equals(InfVendor.KEY_GENERAL)) {
						sVariableNumber = PosCheckExtraInfo.VARIABLE_ACCOUNT_NUMBER;
						sVariableName = PosCheckExtraInfo.VARIABLE_ACCOUNT_NAME;
						
						HashMap<String, String> oMemberArAccount = new HashMap<String, String>();
						oMemberArAccount.put("variable", PosCheckExtraInfo.VARIABLE_AR_ACCOUNT_NUMBER);
						oMemberArAccount.put("index", "0");
						oMemberArAccount.put("value", oInterfaceMember.get("arAccountNumber"));
						oCheckExtraInfos.add(oMemberArAccount);
						
						HashMap<String, String> oMemberType = new HashMap<String, String>();
						oMemberType.put("variable", PosCheckExtraInfo.VARIABLE_MEMBER_TYPE);
						oMemberType.put("index", "0");
						oMemberType.put("value", oInterfaceMember.get("memberType"));
						oCheckExtraInfos.add(oMemberType);
						
						HashMap<String, String> oCardStatus = new HashMap<String, String>();
						oCardStatus.put("variable", PosCheckExtraInfo.VARIABLE_CARD_STATUS);
						oCardStatus.put("index", "0");
						oCardStatus.put("value", oInterfaceMember.get("cardStatus"));
						oCheckExtraInfos.add(oCardStatus);
					} else if (oMemberInterface.getInterfaceVendorKey().equals(InfVendor.KEY_ASPEN)) {
						// not allow to setup member if member status is 'U'
						String sMemberStatus = oInterfaceMember.get("memberStatus");
						if (!sMemberStatus.isEmpty() && sMemberStatus.substring(0, 1).equals("U")) {
							showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_set_unauthorized_member"));
							return false;
						}
						
						sVariableNumber = PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER;
						sVariableName = PosCheckExtraInfo.VARIABLE_MEMBER_NAME;
						
						HashMap<String, String> oInterfaceStatusInfo = new HashMap<String, String>();
						oInterfaceStatusInfo.put("variable", PosCheckExtraInfo.VARIABLE_INTERFACE_STATUS);
						oInterfaceStatusInfo.put("index", "0");
						oInterfaceStatusInfo.put("value", "online");
						oCheckExtraInfos.add(oInterfaceStatusInfo);
						
						HashMap<String, String> oLastNameInfo = new HashMap<String, String>();
						oLastNameInfo.put("variable", PosCheckExtraInfo.VARIABLE_MEMBER_LAST_NAME);
						oLastNameInfo.put("index", "0");
						oLastNameInfo.put("value", oInterfaceMember.get("memberLastName"));
						oCheckExtraInfos.add(oLastNameInfo);
					}
					
					HashMap<String, String> oSvanInfos = new HashMap<String, String>();
					oSvanInfos.put("variable", sVariableNumber);
					oSvanInfos.put("index", "0");
					oSvanInfos.put("value", oInterfaceMember.get("memberNumber"));
					oCheckExtraInfos.add(oSvanInfos);
					
					HashMap<String, String> oMemberNameInfos = new HashMap<String, String>();
					oMemberNameInfos.put("variable", sVariableName);
					oMemberNameInfos.put("index", "0");
					oMemberNameInfos.put("value", oInterfaceMember.get("memberName"));
					oCheckExtraInfos.add(oMemberNameInfos);
					
					HashMap<String, String> oMemberCardInfos = new HashMap<String, String>();
					oMemberCardInfos.put("variable", PosCheckExtraInfo.VARIABLE_CARD_NO);
					oMemberCardInfos.put("index", "0");
					oMemberCardInfos.put("value", oInterfaceMember.get("cardNumber"));
					oCheckExtraInfos.add(oMemberCardInfos);
					
					m_oFuncCheck.setMember(0, oCheckExtraInfos, true, bCleanPreviousMember);
					
					applyMemberInterfaceScTaxAndDiscount(oMemberInterface, true);
					AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.set_member.name(),
							PosActionLog.ACTION_RESULT_SUCCESS, m_oFuncCheck.getTableNoWithExtensionForDisplay(),
							AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
							AppGlobal.g_oFuncOutlet.get().getOutletId(),
							AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
							AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
							AppGlobal.g_oFuncStation.get().getStationId(), m_oFuncCheck.getCheckId(), "", "", "", "",
							"Set member:" + "online interface member");
					
					// Set result flag = success for auto function
					AppGlobal.g_sResultForAutoFunction.set(AppGlobal.AUTO_FUNCTIONS_RESULT_LIST.success.name());
				} else {
					// Have interface member attached
					if (m_oFuncCheck.haveInterfaceMember()) {
						FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("confirm"),
								AppGlobal.g_oLang.get()._("cancel"), this);
						oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
						oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("clear_previous_online_interface_member"));
						oFormConfirmBox.show();
						
						if (!oFormConfirmBox.isOKClicked()) {
							return false;
						} else
							bCleanPreviousMember = true;
						
						// roll back the applied waived sc/tax and discount
						applyMemberInterfaceScTaxAndDiscount(oFormSearchMemberFunction.getMemberInterface(), false);
					}
					
					if (oMember != null) {
						m_oFuncCheck.setMember(oMember.getMemberId(), null, false, bCleanPreviousMember);
						
						// save offline member info
						ArrayList<HashMap<String, String>> oCheckExtraInfos = new ArrayList<HashMap<String, String>>();
						PosInterfaceConfig oMemberInterface = oFormSearchMemberFunction.getMemberInterface();
						if (oMemberInterface != null
								&& oMemberInterface.getInterfaceVendorKey().equals(InfVendor.KEY_ASPEN)) {
							HashMap<String, String> oInterfaceId = new HashMap<String, String>();
							oInterfaceId.put("variable", PosCheckExtraInfo.VARIABLE_INTERFACE_ID);
							oInterfaceId.put("index", "0");
							oInterfaceId.put("value", String.valueOf(oMemberInterface.getInterfaceId()));
							oCheckExtraInfos.add(oInterfaceId);
							
							HashMap<String, String> oMemberNoInfos = new HashMap<String, String>();
							oMemberNoInfos.put("variable", PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER);
							oMemberNoInfos.put("index", "0");
							oMemberNoInfos.put("value", oMember.getMemberNo());
							oCheckExtraInfos.add(oMemberNoInfos);
							
							HashMap<String, String> oMemberNameInfos = new HashMap<String, String>();
							oMemberNameInfos.put("variable", PosCheckExtraInfo.VARIABLE_MEMBER_NAME);
							oMemberNameInfos.put("index", "0");
							oMemberNameInfos.put("value", oMember.getName());
							oCheckExtraInfos.add(oMemberNameInfos);
							
							HashMap<String, String> oMemberLastNameInfos = new HashMap<String, String>();
							oMemberNameInfos.put("variable", PosCheckExtraInfo.VARIABLE_MEMBER_LAST_NAME);
							oMemberNameInfos.put("index", "0");
							oMemberNameInfos.put("value", oMember.getLastName(AppGlobal.g_oCurrentLangIndex.get()));
							oCheckExtraInfos.add(oMemberLastNameInfos);
							
							HashMap<String, String> oCardNumberInfo = new HashMap<String, String>();
							oCardNumberInfo.put("variable", PosCheckExtraInfo.VARIABLE_CARD_NO);
							oCardNumberInfo.put("index", "0");
							oCardNumberInfo.put("value", oMember.getCardNumber());
							oCheckExtraInfos.add(oCardNumberInfo);
							
							HashMap<String, String> oInterfaceStatusInfo = new HashMap<String, String>();
							oInterfaceStatusInfo.put("variable", PosCheckExtraInfo.VARIABLE_INTERFACE_STATUS);
							oInterfaceStatusInfo.put("index", "0");
							oInterfaceStatusInfo.put("value", "offline");
							oCheckExtraInfos.add(oInterfaceStatusInfo);
							m_oFuncCheck.saveMembershipInterfaceExtraInfo(true, oCheckExtraInfos);
						} else if (!oFormSearchMemberFunction.isValidateMemberModule() && oMember.getMemberId() == 0
								&& !oMember.getMemberNo().isEmpty()) {
							HashMap<String, String> oMemberNoInfos = new HashMap<String, String>();
							oMemberNoInfos.put("variable", PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER);
							oMemberNoInfos.put("index", "0");
							oMemberNoInfos.put("value", oMember.getMemberNo());
							oCheckExtraInfos.add(oMemberNoInfos);
							
							HashMap<String, String> oExpiryDateInfos = new HashMap<String, String>();
							oExpiryDateInfos.put("variable", PosCheckExtraInfo.VARIABLE_EXPIRY_DATE);
							oExpiryDateInfos.put("index", "0");
							oExpiryDateInfos.put("value", oMember.getExpiryDate());
							oCheckExtraInfos.add(oExpiryDateInfos);
							m_oFuncCheck.saveMembershipInterfaceExtraInfo(true, oCheckExtraInfos);
						}
						
						// Add log to action log list
						AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.set_member.name(),
								PosActionLog.ACTION_RESULT_SUCCESS, m_oFuncCheck.getTableNoWithExtensionForDisplay(),
								AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
								AppGlobal.g_oFuncOutlet.get().getOutletId(),
								AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
								AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
								AppGlobal.g_oFuncStation.get().getStationId(), m_oFuncCheck.getCheckId(), "", "", "",
								"", "Set member:" + oMember.getMemberId());
						
						// Set result flag = success for auto function
						AppGlobal.g_sResultForAutoFunction.set(AppGlobal.AUTO_FUNCTIONS_RESULT_LIST.success.name());
					}
				}
			} else if (oFormSearchMemberFunction.getUserInputType() == FormSearchMemberFunction.SELECT_CLEAR_MEMBER) {
				// Clear member
				ArrayList<HashMap<String, String>> oCheckExtraInfos = null;
				
				if (m_oFuncCheck.haveInterfaceMember()) {
					oCheckExtraInfos = new ArrayList<HashMap<String, String>>();
					PosInterfaceConfig oMemberInterface = oFormSearchMemberFunction.getMemberInterface();
					
					HashMap<String, String> oInterfaceId = new HashMap<String, String>();
					oInterfaceId.put("variable", PosCheckExtraInfo.VARIABLE_INTERFACE_ID);
					oInterfaceId.put("index", "0");
					oInterfaceId.put("value", "");
					oCheckExtraInfos.add(oInterfaceId);
					
					String sVariableNumber = "", sVariableName = "";
					if (oMemberInterface.getInterfaceVendorKey().equals(InfVendor.KEY_GENERAL)) {
						sVariableNumber = PosCheckExtraInfo.VARIABLE_ACCOUNT_NUMBER;
						sVariableName = PosCheckExtraInfo.VARIABLE_ACCOUNT_NAME;
						
						HashMap<String, String> oMemberArAccount = new HashMap<String, String>();
						oMemberArAccount.put("variable", PosCheckExtraInfo.VARIABLE_AR_ACCOUNT_NUMBER);
						oMemberArAccount.put("index", "0");
						oMemberArAccount.put("value", "");
						oCheckExtraInfos.add(oMemberArAccount);
						
						HashMap<String, String> oMemberType = new HashMap<String, String>();
						oMemberType.put("variable", PosCheckExtraInfo.VARIABLE_MEMBER_TYPE);
						oMemberType.put("index", "0");
						oMemberType.put("value", "");
						oCheckExtraInfos.add(oMemberType);
						
						HashMap<String, String> oCardStatus = new HashMap<String, String>();
						oCardStatus.put("variable", PosCheckExtraInfo.VARIABLE_CARD_STATUS);
						oCardStatus.put("index", "0");
						oCardStatus.put("value", "");
						oCheckExtraInfos.add(oCardStatus);
					} else if (oMemberInterface.getInterfaceVendorKey().equals(InfVendor.KEY_ASPEN)) {
						sVariableNumber = PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER;
						sVariableName = PosCheckExtraInfo.VARIABLE_MEMBER_NAME;
						
						HashMap<String, String> oInterfaceStatusInfo = new HashMap<String, String>();
						oInterfaceStatusInfo.put("variable", PosCheckExtraInfo.VARIABLE_INTERFACE_STATUS);
						oInterfaceStatusInfo.put("index", "0");
						oInterfaceStatusInfo.put("value", "");
						oCheckExtraInfos.add(oInterfaceStatusInfo);
						
						HashMap<String, String> oLastName = new HashMap<String, String>();
						oInterfaceStatusInfo.put("variable", PosCheckExtraInfo.VARIABLE_MEMBER_LAST_NAME);
						oInterfaceStatusInfo.put("index", "0");
						oInterfaceStatusInfo.put("value", "");
						oCheckExtraInfos.add(oLastName);
					}
					
					HashMap<String, String> oSvanInfos = new HashMap<String, String>();
					oSvanInfos.put("variable", sVariableNumber);
					oSvanInfos.put("index", "0");
					oSvanInfos.put("value", "");
					oCheckExtraInfos.add(oSvanInfos);
					
					HashMap<String, String> oMemberNameInfos = new HashMap<String, String>();
					oMemberNameInfos.put("variable", sVariableName);
					oMemberNameInfos.put("index", "0");
					oMemberNameInfos.put("value", "");
					oCheckExtraInfos.add(oMemberNameInfos);
					
					HashMap<String, String> oMemberCardInfos = new HashMap<String, String>();
					oMemberCardInfos.put("variable", PosCheckExtraInfo.VARIABLE_CARD_NO);
					oMemberCardInfos.put("index", "0");
					oMemberCardInfos.put("value", "");
					oCheckExtraInfos.add(oMemberCardInfos);
					
					// roll back the applied waived sc/tax and discount
					applyMemberInterfaceScTaxAndDiscount(oFormSearchMemberFunction.getMemberInterface(), false);
				}
				
				m_oFuncCheck.setMember(0, oCheckExtraInfos, m_oFuncCheck.haveInterfaceMember(), false);
				
				// remove member information for not validate member moudle
				if (!oFormSearchMemberFunction.isValidateMemberModule()) {
					oCheckExtraInfos = new ArrayList<HashMap<String, String>>();
					HashMap<String, String> oMemberNumberInfos = new HashMap<String, String>();
					oMemberNumberInfos.put("variable", PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER);
					oMemberNumberInfos.put("index", "0");
					oMemberNumberInfos.put("value", "");
					oCheckExtraInfos.add(oMemberNumberInfos);
					
					HashMap<String, String> oExpiryDateInfos = new HashMap<String, String>();
					oExpiryDateInfos.put("variable", PosCheckExtraInfo.VARIABLE_EXPIRY_DATE);
					oExpiryDateInfos.put("index", "0");
					oExpiryDateInfos.put("value", "");
					oCheckExtraInfos.add(oExpiryDateInfos);
					m_oFuncCheck.saveMembershipInterfaceExtraInfo(true, oCheckExtraInfos);
				}
				
				
				// Add log to action log list
				AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.set_member.name(),
						PosActionLog.ACTION_RESULT_SUCCESS, m_oFuncCheck.getTableNoWithExtensionForDisplay(),
						AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
						AppGlobal.g_oFuncOutlet.get().getOutletId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
						AppGlobal.g_oFuncStation.get().getStationId(), m_oFuncCheck.getCheckId(), "", "", "", "",
						"Clear member");
				
			} else { // SELECT_CANCEL, user close FormSearchMemberFunction frame
				return false;
			}
		} else {
			m_oFuncCheck.setMember(iDefaultMemberId, null, false, false);
			
			// Add log to action log list
			AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.set_member.name(),
					PosActionLog.ACTION_RESULT_SUCCESS, m_oFuncCheck.getTableNoWithExtensionForDisplay(),
					AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
					AppGlobal.g_oFuncOutlet.get().getOutletId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
					AppGlobal.g_oFuncStation.get().getStationId(), m_oFuncCheck.getCheckId(), "", "", "", "",
					"Set member:" + iDefaultMemberId);
			
			// Set result flag = success for auto function
			AppGlobal.g_sResultForAutoFunction.set(AppGlobal.AUTO_FUNCTIONS_RESULT_LIST.success.name());
		}
		// handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
		//Update Membership Extra Info from Memory
		if(!AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name()) && m_iCashierMode == 0)
			prepareOrderingBasketExtraInfo();
		
		return true;
	}
	
	// Set payment member no.
	// Return value: 0 - no member is set
	// >0 - member id
	private int setPaymentMemberNo() {
		if (AppGlobal.isModuleSupport(AppGlobal.OPTIONAL_MODULE.member.name()) == false) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("member_module_is_not_supported"));
			return 0;
		}
		
		HashMap<String, String> oCheckInfo = new HashMap<String, String>();
		oCheckInfo.put("checkId", String.valueOf(m_oFuncCheck.getMemberId()));
		oCheckInfo.put("checkNumber", m_oFuncCheck.getCheckPrefixNo());
		oCheckInfo.put("checkAmount", m_oFuncCheck.getCheckTotal().toPlainString());
		
		List<PosCheckExtraInfo> oInterfaceMemberExtraInfos = new ArrayList<PosCheckExtraInfo>();
		for (int i = 0; i < m_oFuncCheck.getCheckExtraInfoList().size(); i++) {
			if (m_oFuncCheck.getCheckExtraInfoList().get(i).getSection()
					.equals(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE))
				oInterfaceMemberExtraInfos.add(m_oFuncCheck.getCheckExtraInfoList().get(i));
		}
		
		FormSearchMemberFunction oFormSearchMemberFunction = new FormSearchMemberFunction(this);
		oFormSearchMemberFunction.init(m_oFuncCheck, oInterfaceMemberExtraInfos, oCheckInfo, 0, false, true, false,
				AppGlobal.g_oLang.get()._("set_member"), null, FormSearchMemberFunction.SEARCH_MODE.normal.name());
		oFormSearchMemberFunction.show();
		
		MemMember oMember = oFormSearchMemberFunction.getAssignedMember();
		if (oFormSearchMemberFunction.getUserInputType() == FormSearchMemberFunction.SELECT_SET_MEMBER) {
			// Set member
			if (oMember != null)
				return oMember.getMemberId();
		} else if (oFormSearchMemberFunction.getUserInputType() == FormSearchMemberFunction.SELECT_CLEAR_MEMBER) {
			// No member is set
		}
		
		return 0;
	}
	
	// is allow to exit the cashier panel
	private String isAllowExitCashierPanel(){
		String sErrorMsg = "";
		
		for(PosCheckPayment oCheckPayment : m_oFuncPayment.getCheckPaymentList()){
			if(oCheckPayment.isRewriteCardPaymentType() && oCheckPayment.getPayTotal().compareTo(BigDecimal.ZERO) > 0
					&& !m_oFuncCheck.isPaid(false)){
				sErrorMsg = AppGlobal.g_oLang.get()._("contain_rewrite_card_payment").concat(System.lineSeparator())
						.concat(AppGlobal.g_oLang.get()._("not_allow_to_exit"));
				break;
			}
			
			PosPaymentMethod oPaymentMethod = m_oFuncPayment.getPaymentMethodList().getPaymentMethodList()
					.get(oCheckPayment.getPaymentMethodId());
			
			if (oCheckPayment.havePmsPayment()) {
				PosInterfaceConfig oPosInterfaceConfig = oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_PMS).get(0);
				if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_PEGASUS)) {
					String sPaytype = oCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_PMS,
							PosCheckExtraInfo.VARIABLE_PAYTYPE, 0).getValue();
					if (sPaytype != null && sPaytype.equals("package_amount")) {
						sErrorMsg = AppGlobal.g_oLang.get()._("cannot_quit_payment_due_to_some_payment_is_already_posted_successfully")
								+ System.lineSeparator() + AppGlobal.g_oLang.get()._("please_select_other_payment_to_settle_check");
						break;
					}
				}
			}
			// Not allow to exit if partial payment do not pay and full payment do not pay whole bill
			if(oPaymentMethod.isVoucherInterfacePayment(InfVendor.KEY_GALAXY)
					&& !oCheckPayment.isOldPayment() && m_oFrameCashier.getCurrentStep() != 4
					&& !m_oFuncCheck.getPaid().equals(PosCheck.PAID_FULL_PAID)) {
				sErrorMsg = AppGlobal.g_oLang.get()._("cannot_quit_payment_due_to_some_payment_is_already_posted_successfully")
						+ System.lineSeparator() + AppGlobal.g_oLang.get()._("please_select_other_payment_to_settle_check");
				break;
			}
		}
		return sErrorMsg;
	}
	
	// Manual increment current course no. for coming order item
	private void manualIncrementCourseNoFunction(boolean bReset) {
		if (m_oMenuItemCourseList == null) {
			m_oMenuItemCourseList = new MenuItemCourseList();
			m_oMenuItemCourseList.readItemCourseList();
		}
		
		if (m_oMenuItemCourseList.getItemCourseList().isEmpty())
			// No course is defined
			return;
		
		if (bReset) {
			// Reset to share
			m_oCurrentCourseForNormalItem = null;
		} else {
			if (m_oCurrentCourseForNormalItem == null)
				// Set to first course no.
				m_oCurrentCourseForNormalItem = m_oMenuItemCourseList.getItemCourseList().get(0);
			else {
				int iLastCourseIndex = m_oMenuItemCourseList.getItemCourseList().indexOf(m_oCurrentCourseForNormalItem);
				int iNextCourseIndex = iLastCourseIndex + 1;
				if (iNextCourseIndex < m_oMenuItemCourseList.getItemCourseList().size()) {
					m_oCurrentCourseForNormalItem = m_oMenuItemCourseList.getItemCourseList().get(iNextCourseIndex);
				}
			}
		}
		
		// Update screen
		if (m_oCurrentCourseForNormalItem == null)
			m_oFrameSeatPanel.setCourseDescription(AppGlobal.g_oLang.get()._("undefined_course", ""));
		else {
			String[] sMenuItemCourseName = Arrays.copyOf(m_oCurrentCourseForNormalItem.getName(),
					m_oCurrentCourseForNormalItem.getName().length);
			for (int i = 0; i < AppGlobal.LANGUAGE_COUNT; i++) {
				if (m_oCurrentCourseForNormalItem.getShortName(i + 1).length() > 0)
					sMenuItemCourseName[i] = m_oCurrentCourseForNormalItem.getShortName(i + 1);
			}
			m_oFrameSeatPanel.setCourseDescription(StringLib.appendStringArray("(",
					m_oCurrentCourseForNormalItem.getSeq(), ") ", sMenuItemCourseName));
			
			// Add log to action log list
			AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.increment_course.name(),
					PosActionLog.ACTION_RESULT_SUCCESS, m_oFuncCheck.getTableNoWithExtensionForDisplay(),
					AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
					AppGlobal.g_oFuncOutlet.get().getOutletId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
					AppGlobal.g_oFuncStation.get().getStationId(), m_oFuncCheck.getCheckId(), "", "", "", "",
					sMenuItemCourseName[AppGlobal.g_oCurrentLangIndex.get() - 1]);
			// handle action log
			AppGlobal.g_oActionLog.get().handleActionLog(false);
		}
	}
	
	// Assign course no to new order item
	private void autoAssignCourseToNewOrderItem() {
		if (m_oCurrentCourseForNormalItem == null) // No course is set
			return;
		
		// Get the last order item
		for (FuncCheckItem oFuncCheckItem : m_oStoredFuncCheckItemList) {
			// Check if course no. is pre-defined
			if (oFuncCheckItem.getCheckItem().getCourseId() > 0)
				continue;
			
			// Assign the course to item
			oFuncCheckItem.getCheckItem().setCourseId(m_oCurrentCourseForNormalItem.getIcouId());
		}
	}
	
	private void showOrderingModeImage() {
		boolean bShow = m_oFrameOrderingBasket.isDisplayCheckOrderingType();
		String sImageUrl = "";
		if (m_oFuncCheck.isNormalOrderingType()) {
			if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fine_dining)
					|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab)
			){
				sImageUrl = AppGlobal.g_oTerm.get().getClientImageURLPath() + "/buttons/dine_in_fine_dining.png";
				m_oFrameBasketExtendBar.switchDineInTakeout(AppGlobal.g_oLang.get()._("dine_in"));
				if(bShow)
					m_oFrameOrderingBasket.setOrderType(AppGlobal.g_oLang.get()._("dine_in"));
			} else if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food)
					|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk)){
				sImageUrl = AppGlobal.g_oTerm.get().getClientImageURLPath() + "/buttons/dine_in_fast_food_mode.png";
				m_oFrameBasketExtendBar.switchDineInTakeout(AppGlobal.g_oLang.get()._("fast_food"));
				if(bShow)
					m_oFrameOrderingBasket.setOrderType(AppGlobal.g_oLang.get()._("fast_food"));
			}
		} else {
			sImageUrl = AppGlobal.g_oTerm.get().getClientImageURLPath() + "/buttons/takeout.png";
			m_oFrameBasketExtendBar.switchDineInTakeout(AppGlobal.g_oLang.get()._("takeout"));
			if(bShow)
				m_oFrameOrderingBasket.setOrderType(AppGlobal.g_oLang.get()._("takeout"));
		}
	}
	
	private void showRevenueImage() {
		m_oFrameBasketExtendBar.setRevenue(m_oFuncCheck.isRevenue());
	}
	
	private void showAskTableScreen(){
		// not allow to show if logged out
		if (isShowTableFloorAfterSwitchUserWithCheckingOperationMode()
				&& m_oFrameTableFloorPlan.getSwitchUserModeStatus().equals(FrameTableFloorPlan.SWITCH_USER_MODE_ON)) {
			if (!askLogin())
				return;
		}
		
		if (m_oFrameFloorPlanFunctionPanel.getVisible()) {
			m_oFrameFloorPlanFunctionPanel.setVisible(false);
			this.m_oFrameTableFloorPlan.showOpenFunctionPanel(false);
		}
		
		AppGlobal.g_oFuncStation.get().setOpenTableScreenMode(FuncStation.OPEN_TABLE_SCREEN_MODE_ASK_TABLE);
		if (AppGlobal.g_oFuncStation.get()
				.getAskTableWithAdvanceMode() == FuncStation.OPEN_TABLE_SCREEN_KEYBOARD_NUMBER) {
			m_oFrameOpenTable.setVisible(true);
			m_oFrameCover.setVisible(true);
			m_oFrameCover.bringToTop();
			m_oFrameOpenTable.setFocusOnTxtBox();
			m_oFrameOpenTable.bringToTop();
			ClsActiveClient oActiveClient = AppGlobal.getActiveClient();
			oActiveClient.getSwipeCardReaderElement()
					.setValueChangedServerRequestNote(FuncMSR.FRAME_SWIPE_CARD_OPENTABLE);
			AppGlobal.g_oFuncStation.get().setOpenTableScreenKeyboard(FuncStation.OPEN_TABLE_SCREEN_KEYBOARD_NUMBER);
		} else {
			m_oFrameCover.setVisible(true);
			m_oFrameCover.bringToTop();
			
			m_oFrameOpenTableWithQwertyKeyboard.setVisible(true);
			m_oFrameOpenTableWithQwertyKeyboard.setFocusOnTxtBox();
			m_oFrameOpenTableWithQwertyKeyboard.bringToTop();
			ClsActiveClient oActiveClient = AppGlobal.getActiveClient();
			oActiveClient.getSwipeCardReaderElement()
					.setValueChangedServerRequestNote(FuncMSR.FRAME_SWIPE_CARD_OPENTABLE_QWERTY);
			AppGlobal.g_oFuncStation.get().setOpenTableScreenKeyboard(FuncStation.OPEN_TABLE_SCREEN_KEYBOARD_QWERTY);
		}
	}
	
	private void toggleNonRevenue() {
		if (m_oFuncCheck.isRevenue() == false)
			return;
		
		// Ask confirmation for action
		FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("confirm"),
				AppGlobal.g_oLang.get()._("cancel"), this);
		oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
		oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("confirm_to_change_to_non_revenue") + "?");
		oFormConfirmBox.show();
		if (oFormConfirmBox.isOKClicked() == false)
			return;
		
		// *** Further development for select non revenue type
		m_oFuncCheck.setNonRevenue(PosCheck.NON_REVENUE_ADVANCE_ORDER, true);
		this.showRevenueImage();
		
		// Add log to action log list
		AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.toggle_non_revenue.name(),
				PosActionLog.ACTION_RESULT_SUCCESS, "", AppGlobal.g_oFuncUser.get().getUserId(),
				AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
				AppGlobal.g_oFuncStation.get().getStationId(), m_oFuncCheck.getCheckId(), "", "", "", "", "");
		// handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
	}
	
	private void toggleRevenue() {
		if (m_oFuncCheck.isRevenue())
			return;
		
		// If the check is liability, cannot restore the revenue type
		if (m_oFuncCheck.isLiability())
			return;
		
		// Ask confirmation for action
		FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("confirm"),
				AppGlobal.g_oLang.get()._("cancel"), this);
		oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
		oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("confirm_to_change_to_revenue") + "?");
		oFormConfirmBox.show();
		if (oFormConfirmBox.isOKClicked() == false)
			return;
		
		m_oFuncCheck.setNonRevenue(PosCheck.NON_REVENUE_NO, true);
		this.showRevenueImage();
		
		// Add log to action log list
		AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.toggle_revenue.name(),
				PosActionLog.ACTION_RESULT_SUCCESS, "", AppGlobal.g_oFuncUser.get().getUserId(),
				AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
				AppGlobal.g_oFuncStation.get().getStationId(), m_oFuncCheck.getCheckId(), "", "", "", "", "");
		// handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
	}
	
	// Start stock operation function
	private void stockOperation(List<Integer> oMenuItemIds) {
		// If item is selected
		if (m_sToggleUsePanelModeOnStockOperation != null
				&& m_sToggleUsePanelModeOnStockOperation.equals(FormStockOperation.OPERATION_BY_ADD_ITEM)) {
			for (Integer iMenuItemId : oMenuItemIds) {
				// Check if need to add to outlet item
				PosOutletItem oPosOutletItem = new PosOutletItem();
				if (oPosOutletItem.readByMenuItemId(AppGlobal.g_oFuncOutlet.get().getOutletId(),
						iMenuItemId) == false) {
					// No outlet item before
					// Create one
					oPosOutletItem.setShopId(AppGlobal.g_oFuncOutlet.get().getShopId());
					oPosOutletItem.setOletId(AppGlobal.g_oFuncOutlet.get().getOutletId());
					oPosOutletItem.setItemId(iMenuItemId);
					oPosOutletItem.setStockControlLevel("1");
					oPosOutletItem.setCheckStock(PosOutletItem.CHECK_STOCK_YES);
					
					oPosOutletItem.addUpdate(false);
				} else {
					// Item which hasn't set stock quantity set soldout before
					// and then change to non-soldout
					if (!oPosOutletItem.isCheckStock()) {
						oPosOutletItem.setCheckStock(PosOutletItem.CHECK_STOCK_YES);
						oPosOutletItem.addUpdate(true);
					}
				}
			}
		}
		FormStockOperation oFormStockOperation = new FormStockOperation(this);
		oFormStockOperation.init();
		if (m_sToggleUsePanelModeOnStockOperation != null
				&& m_sToggleUsePanelModeOnStockOperation.equals(FormStockOperation.SEARCH_MODE_BY_PANEL))
			oFormStockOperation.searchItemByIds(oMenuItemIds);
		oFormStockOperation.show();
		
		if (oFormStockOperation.isAskItem() || oFormStockOperation.isAskItemSearchByPanel()) {
			if (oFormStockOperation.isAskItem())
				m_sToggleUsePanelModeOnStockOperation = FormStockOperation.OPERATION_BY_ADD_ITEM;
			else if (oFormStockOperation.isAskItemSearchByPanel())
				m_sToggleUsePanelModeOnStockOperation = FormStockOperation.SEARCH_MODE_BY_PANEL;
			
			PosFunction oFunction = m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.stock_operation.name());
			if (oFunction != null) {
				m_iUsePanelToSelectItemModeCurrentFuncId = oFunction.getFuncId();
			}
			
			// Show panel
			toggleUsePanelToSelectItemMode(true, true);
			m_oFramePanelItemSelectPanel.setStockSoldOut(true);
		} else { // Exit
			m_iUsePanelToSelectItemModeCurrentFuncId = 0;
			m_sToggleUsePanelModeOnStockOperation = "";
			if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
					|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) == true
					|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) == true) {
				// Fast food mode
				showTableFloorPlanScreen(false);
			}
		}
	}
	
	private void stockSoldout(boolean bShopLevel) {
		String sFunctionName = AppGlobal.FUNC_LIST.stock_soldout.name();
		if(bShopLevel)
			sFunctionName = AppGlobal.FUNC_LIST.stock_soldout_by_shop.name();
		
		// Check if need to add to outlet item
		PosOutletItemList oOutletItemList = new PosOutletItemList();
		oOutletItemList.readOutletItemListByItemIds(AppGlobal.g_oFuncOutlet.get().getOutletId(),
				m_oSelectedSoldoutItemList);
		List<PosOutletItem> oResultStockList = new ArrayList<PosOutletItem>(oOutletItemList.getOutletItemList());
		HashMap<Integer, PosOutletItem> oItemStockList = new HashMap<Integer, PosOutletItem>();
		for (PosOutletItem oTempOutletItem : oResultStockList) {
			oItemStockList.put(oTempOutletItem.getItemId(), oTempOutletItem);
		}
		
		ArrayList<PosOutletItem> oPosOutletItemList = new ArrayList<PosOutletItem>();
		for (Integer iId : m_oSelectedSoldoutItemList) {
			PosOutletItem oPosOutletItem = null;
			if (!oItemStockList.containsKey(iId)) {
				oPosOutletItem = new PosOutletItem();
				oPosOutletItem.setShopId(AppGlobal.g_oFuncOutlet.get().getShopId());
				oPosOutletItem.setOletId(AppGlobal.g_oFuncOutlet.get().getOutletId());
				oPosOutletItem.setItemId(iId.intValue());
				oPosOutletItem.setStockControlLevel("1");
				oPosOutletItem.setSoldout(PosOutletItem.SOLDOUT_YES);
				
				oPosOutletItemList.add(oPosOutletItem);
				
				// Add log to action log list
				String sLogRemark = "ItemId:" + oPosOutletItem.getItemId() + ":sell->soldout";
				AppGlobal.g_oActionLog.get().addActionLog(sFunctionName,
						PosActionLog.ACTION_RESULT_SUCCESS, "", AppGlobal.g_oFuncUser.get().getUserId(),
						AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
						AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "", sLogRemark);
			} else {
				oPosOutletItem = oItemStockList.get(iId);
				if (!oPosOutletItem.isSoldout() || bShopLevel) {
					oPosOutletItem.setSoldout(PosOutletItem.SOLDOUT_YES);
					oPosOutletItemList.add(oPosOutletItem);
					
					// Add log to action log list
					String sLogRemark = "ItemId:" + oPosOutletItem.getItemId() + ":sell->soldout";
					AppGlobal.g_oActionLog.get().addActionLog(sFunctionName,
							PosActionLog.ACTION_RESULT_SUCCESS, "", AppGlobal.g_oFuncUser.get().getUserId(),
							AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
							AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
							AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
							AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "", sLogRemark);
				}
			}
		}
		
		// handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
		if (!oPosOutletItemList.isEmpty()) {
			PosOutletItem oPosOutletItem = new PosOutletItem();
			if(bShopLevel)
				oPosOutletItem.addUpdateWithMultipleShopRecord(AppGlobal.g_oFuncOutlet.get().getShopId(), oPosOutletItemList);
			else
				oPosOutletItem.addUpdateWithMultipleRecord(oPosOutletItemList);
			m_oSelectedSoldoutItemList.clear();
		}
		
		FormStockSoldout oFormStockSoldout = new FormStockSoldout(this, bShopLevel);
		oFormStockSoldout.init();
		if (AppGlobal.g_oFuncOutlet.get().getSoldoutMenuId() != 0) {
			MenuMenu oMenuMenu = AppGlobal.g_oFuncMenu.get()
					.getMenuAndContentById(AppGlobal.g_oFuncOutlet.get().getSoldoutMenuId());
			oFormStockSoldout.setSoldoutMenuLookupList(oMenuMenu.getMenuLookupList());
		}
		oFormStockSoldout.show();
		
		// get delete item list, mark them in sell
		for (MenuItem oMenuItem : oFormStockSoldout.getDeleteMenuItemList())
			m_oFrameOrderingPanel.removeItemStockQty(oMenuItem.getItemId());
		
		if (oFormStockSoldout.isAskItem()) {
			PosFunction oFunction = new PosFunction();
			if(bShopLevel)
				oFunction =	m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.stock_soldout_by_shop.name());
			else
				oFunction =	m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.stock_soldout.name());
			
			if (oFunction != null)
				m_iUsePanelToSelectItemModeCurrentFuncId = oFunction.getFuncId();
			
			// Show panel
			toggleUsePanelToSelectItemMode(true, true);
			m_oFramePanelItemSelectPanel.setStockSoldOut(true);
		} else { // Exit
			m_iUsePanelToSelectItemModeCurrentFuncId = 0;
			
			if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
					|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) == true
					|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) == true)
				// Fast food mode
				showTableFloorPlanScreen(false);
		}
	}
	
	private void stockBalanceChange() {
		FormStockBalanceChange oFormStockBalanceChange = new FormStockBalanceChange(this);
		oFormStockBalanceChange.init();
		oFormStockBalanceChange.show();
	}
	
	private void toggleUsePanelToSelectItemMode(boolean bStart, boolean bShowCommonBasket) {
		if (bStart) {
			// Store if the panel is shown before
			m_bPanelIsShownBefore = m_oFrameOrderingPanel.getVisible();
			m_bFloorPlanIsShownBefore = m_oFrameTableFloorPlan.getVisible();
			
			// Turn on the mode
			m_bUsePanelToSelectItemMode = true;
			
			// Start using panel to select item
			m_oFrameOrderingPanel.setUsePanelToSelectItemMode(true);
			
			// Show panel
			m_oFrameOrderingPanel.setVisible(true);
			m_oFrameFuncPanel2.setVisible(false);
			
			m_oFrameTableFloorPlan.setVisible(false);
			
			m_oFramePanelItemSelectPanel.setStockSoldOut(false);
			m_oFramePanelItemSelectPanel.setVisible(true);
			m_oFramePanelItemSelectPanel.bringToTop();
			m_oFrameOrderingPanel.bringToTop();
			
			if(!(AppGlobal.g_oFuncStation.get().getStationDevice().isSelfOrderKiosk() && AppGlobal.g_oFuncStation.get().isHideStationInfoBar())) {
				// add a dummy frame cover on station info bar to avoid user to press any key on status info bar
				m_oFrameStationInfoBarCover.setVisible(true);
				m_oFrameStationInfoBarCover.bringToTop();
			}
			
			if (!AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode))
				m_oFrameSeatPanel.bringToTop();
			
			if (AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name())) {
				m_oFrameSeatPanel.setVisible(false);
				m_oFrameOrderingPanel.setTop(200);
			}
		} else {
			// Turn off the mode
			m_bUsePanelToSelectItemMode = false;
			
			// Stop using panel to select item
			m_oFrameOrderingPanel.setUsePanelToSelectItemMode(false);
			m_oFrameFuncPanel2.setVisible(true);
			
			if (m_bPanelIsShownBefore == false) {
				// Hide the panel if panel is hidden before
				m_oFrameOrderingPanel.setVisible(false);
				m_oFrameFuncPanel2.setVisible(false);
				m_oFrameSeatPanel.setVisible(false);
			}
			
			if (m_bFloorPlanIsShownBefore) // Show table floor plan if it is
				// shown before
				m_oFrameTableFloorPlan.setVisible(true);
			
			m_oFramePanelItemSelectPanel.setVisible(false);
			
			if (AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name()))
				m_oFrameOrderingPanel.setTop(110);
			
			if (m_oFrameOrderingMenuLookup != null)
				m_oFrameOrderingMenuLookup.setVisible(false);
			
			// restore to remove dummy frame cover in status info bar
			m_oFrameStationInfoBarCover.setVisible(false);
		}
		m_oFramePanelItemSelectPanel.setCommonBasketVisible(bShowCommonBasket);
	}
	
	private void toggleUseCashierPanelToSelectPaymentMethod(boolean bStart, boolean bShowCommonBasket) {
		if (bStart) {
			// Turn on the flag of using cashier panel to select payment method
			m_bUseCashierPanelToSelectPaymentMethod = true;
			
			// Start using panel to select payment method
			m_oFrameOrderingPanel.setUsePanelToSelectPaymentMethodMode(true);
			
			m_oFramePanelPaymentMethodSelectPanel.setVisible(true);
			m_oFramePanelPaymentMethodSelectPanel.bringToTop();
			m_oFramePanelPaymentMethodSelectPanel.setCommonBasketVisible(bShowCommonBasket);
			
			// Clear the selected item
			m_oFramePanelPaymentMethodSelectPanel.clearSelectedItemBasket();
			
			// Show cashier panel
			m_oFrameCashierPanel.setVisible(true);
			m_oFrameCashierPanel.bringToTop();
			
			// Hide the function panel
			m_oFrameFuncPanel2.setVisible(false);
			// add a dummy frame cover on station info bar to avoid user to press any key on status info bar
			m_oFrameStationInfoBarCover.setVisible(true);
			m_oFrameStationInfoBarCover.bringToTop();
			
			if (AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name()))
				m_oFrameCashierPanel.setTop(m_oFramePanelPaymentMethodSelectPanel.getCommonBasketBottom());
		} else {
			// Turn off the mode
			m_bUseCashierPanelToSelectPaymentMethod = false;
			
			// Stop using panel to select payment method
			m_oFrameOrderingPanel.setUsePanelToSelectPaymentMethodMode(false);
			
			m_oFrameCashierPanel.setVisible(false);
			m_oFramePanelPaymentMethodSelectPanel.setVisible(false);
			
			// Show the function panel
			m_oFrameFuncPanel2.setVisible(true);
			// hide the dummy frame cover on station info bar
			m_oFrameStationInfoBarCover.setVisible(false);
			
			if (AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name())) {
				VirtualUIFrame oFrame = new VirtualUIFrame();
				m_oTemplateBuilder.buildFrame(oFrame, "fraCashierPanel");
				m_oFrameCashierPanel.setTop(oFrame.getTop());
			}
		}
	}
	
	// Apply item discount to ALL items
	private void applyItemDiscountForAllItems() {
		// Change the selected item to HashMap
		List<HashMap<String, Integer>> oSelectedItems = new ArrayList<HashMap<String, Integer>>();
		
		// Get all item
		oSelectedItems = m_oFuncCheck.getSectionItemIndexForCurrentOrderedItem();
		
		if (oSelectedItems.isEmpty()) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("no_available_items"));
			return;
		}
		
		// Process function
		// Item discount for multiple items
		callDiscountLookupForMultiItem("item", PosDiscountType.USED_FOR_DISCOUNT, oSelectedItems, "", null);
	}
	
	// Check manager override
	private FuncUser managerOverride(PosFunction oPosFunction, String sType) {
		String sMsg = "", sTitle = "";
		if (sType.equals(FUNCTION_CHECK_ASK_AUTHORITY)) {
			sTitle = AppGlobal.g_oLang.get()._("manager_override");
			sMsg = AppGlobal.g_oLang.get()._("do_not_have_authority_to_perform_the_function");
		} else {
			sTitle = AppGlobal.g_oLang.get()._("ask_approval");
			sMsg = AppGlobal.g_oLang.get()._("require_second_approval_by_another_user");
		}
		showErrorDialogBox(sMsg);
		
		FuncUser oTempUser = this
				.askUserPassword(oPosFunction.getName(AppGlobal.g_oCurrentLangIndex.get()) + " (" + sTitle + ")", false);

/**OverrideRequest [managerOverride] */
		
		if (oTempUser == null)
			return null;
		
		// surveillance eConnect system event: OverrideRequest
		HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
		oSurveillanceEventInfo.put("authEmployeeNum", oTempUser.getUser().getNumber());
		this.doSurveillanceEvent(FuncSurveillance.SURVEILLANCE_TYPE_OVERRIDE_REQUEST, oSurveillanceEventInfo);
		/*
		List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);
		if (!oInterfaceConfigList.isEmpty() && oTempUser!=null) {
			for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
				if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
					FuncSurveillance oFuncSurveillance = new FuncSurveillance(oPosInterfaceConfig);
					HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
					oSurveillanceEventInfo.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_OVERRIDE_REQUEST);
					oSurveillanceEventInfo.put("authEmployeeNum", oTempUser.getUser().getNumber());
					oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo);
				}
			}
		}
		*/
		
		// Check input user authority
		boolean bHaveAuthority = false;
		PosFunctionAclCache oTempFuncAclCache = new PosFunctionAclCache();
		if (oTempFuncAclCache.readByFuncKeyIdAndUserAndOutletId(oPosFunction.getFuncId(), oPosFunction.getKey(),
				oTempUser.getUser().getUserId(), oTempUser.getUser().getRole(), oTempUser.getUser().getUserDeptId(),
				AppGlobal.g_oFuncOutlet.get().getOutletId())) {
			if (oTempFuncAclCache.isAllow())
				bHaveAuthority = true;
		}

/**OverrideResponse [managerOverride] (class) */
		class OverrideCheckForSurv {
			public void responseCheck(boolean bIsAccepted) {
				// surveillance eConnect system event: OverrideResponse
				HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
				String sResponse = (bIsAccepted) ? "accepted" : "declined";
				oSurveillanceEventInfo.put("response", sResponse);
				doSurveillanceEvent(FuncSurveillance.SURVEILLANCE_TYPE_OVERRIDE_RESPONSE, oSurveillanceEventInfo);
				/*
				List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);
				if (!oInterfaceConfigList.isEmpty()) {
					for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
						if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
							FuncSurveillance oFuncSurveillance = new FuncSurveillance(oPosInterfaceConfig);
							String sResponse = (bIsAccepted) ? "accepted" : "declined";
							HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
							oSurveillanceEventInfo.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_OVERRIDE_RESPONSE);
							oSurveillanceEventInfo.put("response", sResponse);
							oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo);
						}
					}
				}
				*/
			}
		}
		
		if (!bHaveAuthority) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("do_not_have_authority_to_perform_the_function"));
/** OverrideResponse [managerOverride] (declined) */
			// surveillance eConnect system event: OverrideResponse (declined)
			OverrideCheckForSurv oOverrideCheckForSurv = new OverrideCheckForSurv();
			oOverrideCheckForSurv.responseCheck(false);
			return null;
		}
		
		// Write a log of manager override
		AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "", oTempUser.getUserId() + "",
				sTitle + " Function: " + oPosFunction.getKey());

/**OverrideResponse [managerOverride] (accepted) */
		// surveillance eConnect system event: OverrideResponse (accepted)
		OverrideCheckForSurv oOverrideCheckForSurv = new OverrideCheckForSurv();
		oOverrideCheckForSurv.responseCheck(true);
		
		return oTempUser;
	}
	
	public boolean membershipRegistration(String sTitle, String sOpenCheckInfoListType) {
		if (sTitle.isEmpty())
			sTitle = AppGlobal.g_oLang.get()._("membership_registration");
		
		FormMembershipRegistration oFormMembershipRegistration = new FormMembershipRegistration(sTitle, this);
		
		sOpenCheckInfoListType = FrameOpenedCheckList.TYPE_OPEN_CHECK_LIST_CHECK_STATUS;
		if (!oFormMembershipRegistration.init(m_oFrameOrderingPanel.getVisible(), sOpenCheckInfoListType))
			return false;
		
		oFormMembershipRegistration.addListener(this);
		oFormMembershipRegistration.show();
		boolean bForwardMemberEnquiry = false;
		if(oFormMembershipRegistration.getInterfaceConfig() != null && oFormMembershipRegistration.getInterfaceConfig().getInterfaceVendorKey().equals(InfVendor.KEY_GENERAL_V2))
			bForwardMemberEnquiry = true;
		
		//if(!AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name())){
		if (oFormMembershipRegistration.isForwardToMemberEnquiry())
			membershipInterfaceEnquiry(oFormMembershipRegistration.getInterfaceConfig(), oFormMembershipRegistration.getMemberNumber(), oFormMembershipRegistration.getLastName(), sTitle, false, bForwardMemberEnquiry, null);
		//}
		return true;
	}
	
	private FuncUser askAuthorityApproval(PosFunction oPosFunction, String sType, boolean bFromTableFloorPlan) {
		FuncUser oAuthorityUser = this.managerOverride(oPosFunction, sType);
		//boolean bResult = this.managerOverride(oPosFunction, sType);
		if (oAuthorityUser == null) {
			if ((AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
					|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) == true
					|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) == true)
					&& bFromTableFloorPlan) {
				// Fast food mode
				showTableFloorPlanScreen(false);
			}
		}
		return oAuthorityUser;
	}
	
	private FuncUser checkAuthorityAndApproval(boolean bHaveAuthority, PosFunction oPosFunction,
	                                           boolean bFromTableFloorPlan) {
		FuncUser oAuthorityUser = new FuncUser();
		if (!bHaveAuthority) {
			if (oPosFunction.askAuthority()) {
				oAuthorityUser = this.askAuthorityApproval(oPosFunction, FUNCTION_CHECK_ASK_AUTHORITY, bFromTableFloorPlan);
				if (oAuthorityUser == null)
					// No manager override
					return null;
			} else {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("do_not_have_authority_to_perform_the_function"));
				if (bFromTableFloorPlan) {
					if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
							|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) == true
							|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) == true) {
						// Fast food mode
						showTableFloorPlanScreen(false);
					}
				}
				return null;
			}
		} else {
			if (oPosFunction.askApproval()) {
				oAuthorityUser = this.askAuthorityApproval(oPosFunction, FUNCTION_CHECK_ASK_APPROVAL, bFromTableFloorPlan);
				if (oAuthorityUser == null)
					// No manager override
					return null;
			}
		}
		return oAuthorityUser;
	}
	
	private boolean askPassword(PosFunction oPosFunction) {
		FormInputBox oInputBox = new FormInputBox(this);
		oInputBox.init();
		oInputBox.setTitle(oPosFunction.getName(AppGlobal.g_oCurrentLangIndex.get()) + " ("
				+ AppGlobal.g_oLang.get()._("ask_password") + ")");
		oInputBox.setMessage(AppGlobal.g_oLang.get()._("please_input_password") + ": ");
		oInputBox.setInputBoxSecurity(0, true);
		oInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.NUMBER);
		oInputBox.show();
		
		// Retrieve PW
		String sTempPw = oInputBox.getInputValue();
		
		if (sTempPw == null || sTempPw.isEmpty())
			return false;
		
		// Check User Login and Password
		FuncUser oTempUser = new FuncUser();
		if (!oTempUser.isValidUser(String.valueOf(AppGlobal.g_oFuncUser.get().getUser().getLogin()), sTempPw)) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("invalid_password"));
			return false;
		}
		
		AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "", oTempUser.getUserId() + "",
				"Ask Password Function: " + oPosFunction.getKey());
		return true;
	}
	
	private boolean askUserPassword(PosFunction oPosFunction, boolean bFromTableFloorPlan) {
		boolean bResult = askPassword(oPosFunction);
		if (!bResult) {
			if ((AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
					|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) == true
					|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) == true)
					&& bFromTableFloorPlan) {
				// Fast food mode
				showTableFloorPlanScreen(false);
			}
		}
		return bResult;
	}
	
	private void sellCoupon() {
		String sStartCoupon = "", sEndCoupon = "";
		List<String> oTextboxList = new ArrayList<String>();
		
		FuncCoupon oOnlineCoupon = new FuncCoupon();
		if (!oOnlineCoupon.isCouponServerSetupExist()) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("missing_coupon_server_setup"));
			return;
		}
		
		oTextboxList.add(AppGlobal.g_oLang.get()._("start_coupon_number") + ":");
		oTextboxList.add(AppGlobal.g_oLang.get()._("end_coupon_number") + ":");
		
		FormInputBox oInputBox = new FormInputBox(this);
		oInputBox.initWithInputNum(oTextboxList.size());
		oInputBox.setTitle(AppGlobal.g_oLang.get()._("sell_coupon"));
		oInputBox.setMessages(oTextboxList);
		oInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DEFAULT);
		oInputBox.showKeyboard();
		oInputBox.show();
		
		sStartCoupon = oInputBox.getInputValue(0);
		sEndCoupon = oInputBox.getInputValue(1);
		
		if (sStartCoupon.isEmpty() || sEndCoupon.isEmpty())
			return;
		
		if (sStartCoupon.length() > 20 || sEndCoupon.length() > 20) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("invalid_start_coupon_end_coupon_number"));
			return;
		}
		
		if (oOnlineCoupon.getSellCoupon(sStartCoupon, sEndCoupon) == false) {
			showErrorDialogBox(oOnlineCoupon.getLastErrorMessage());
			return;
		}
		
		// update coupon status
		oOnlineCoupon.setCouponCurrentStatus(FuncCoupon.COUPON_STATUS_NEW);
		oOnlineCoupon.setCouponNextStatus(FuncCoupon.COUPON_STATUS_LOCKED);
		oOnlineCoupon.setSellPrice(BigDecimal.ZERO);
		if (oOnlineCoupon.updateCoupon(FuncCoupon.UPDATE_COUPON_TYPE_ORDER_ITEM) == false) {
			showErrorDialogBox(oOnlineCoupon.getLastErrorMessage());
			return;
		}
		
		// add the coupon item to check
		if (addItem(null, oOnlineCoupon.getCouponItemId(), new BigDecimal("1.0"), new BigDecimal("1.0"), false, false,
				false, AppGlobal.g_oFuncOutlet.get().getPriceLevel(), null) == false)
			return;
		
		// Check if course is set.
		// If yes, auto-assign course to new order NORMAL item
		autoAssignCourseToNewOrderItem();
		// Add hot item success
		finishAddItem(false);
		
		// update coupon status
		int iSectionId = m_oFrameOrderingBasket.getSelectedSectionId();
		int iItemIndex = m_oFuncCheck.getItemListCount(iSectionId) - 1;
		FuncCheckItem oAddedCouponItem = m_oFuncCheck.getCheckItem(iSectionId, iItemIndex);
		if (oAddedCouponItem != null) {
			oAddedCouponItem.updateCouponItemInformation(oOnlineCoupon.getStartCoupon(), oOnlineCoupon.getEndCoupon(),
					oOnlineCoupon.getFacePrice(), oOnlineCoupon.getCouponQty());
			calculateCheck();
			
			// update basket
			updateBasketItemPrice(iSectionId, iItemIndex, oAddedCouponItem);
			updateBasketItemQty(iSectionId, iItemIndex, oOnlineCoupon.getCouponQty());
		} else {
			oOnlineCoupon.setCouponCurrentStatus(FuncCoupon.COUPON_STATUS_LOCKED);
			oOnlineCoupon.setCouponNextStatus(FuncCoupon.COUPON_STATUS_NEW);
			oOnlineCoupon.setSellPrice(BigDecimal.ZERO);
			if (oOnlineCoupon.updateCoupon(FuncCoupon.UPDATE_COUPON_TYPE_ORDER_ITEM) == false) {
				showErrorDialogBox(oOnlineCoupon.getLastErrorMessage());
				return;
			}
		}
		
		// Add log to action log list
		oAddedCouponItem.addActionLog(AppGlobal.FUNC_LIST.sell_coupon.name(), PosActionLog.ACTION_RESULT_SUCCESS,
				m_oFuncCheck.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(),
				AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
				AppGlobal.g_oFuncStation.get().getStationId(), m_oFuncCheck.getCheckId(), "", "", "", "", "");
	}
	
	// Split multiple quantity new item to single quantity
	private void splitMultipleQtyNewItemToSingleQty() {
		
		// Check if need split
		boolean bNeedSplit = false;
		for (int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
			ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck.getItemList(i);
			if (oFuncCheckItemList != null && oFuncCheckItemList.size() > 0) {
				for (int j = 0; j < oFuncCheckItemList.size(); j++) {
					FuncCheckItem oFuncCheckItem = oFuncCheckItemList.get(j);
					if (oFuncCheckItem.isSetMenuItem()) {
						// Not check child item
						continue;
					}
					
					if (oFuncCheckItem.getCheckItem().getQty().compareTo(BigDecimal.ONE) > 0) {
						bNeedSplit = true;
						break;
					}
				}
				if (bNeedSplit)
					break;
			}
		}
		if (bNeedSplit == false)
			return;
		
		m_oFuncCheck.splitMultipleQtyNewItemToSingleQty();
		
		// Redraw basket without reset the section
		redrawOrderingBasket(false, FrameOrderingBasket.ORDERING_BASKET_MODE_SHOW_NORMAL);
	}
	
	// Mix and match function
	private boolean mixAndMatchFunction() {
		// Check is disabled function applied
		if(m_oFuncCheck.isDisabledMixAndMatch())
			// Disabled mix and match function
			return false;
		
		if (AppGlobal.OPERATION_MODE.stock_delivery.equals(m_eOperationMode))
			// Stock invoice mode
			return false;
		
		if (AppGlobal.g_oFuncMixAndMatch.get().isSupportMixAndMatch() == false)
			// Not support mix and match
			return false;
		
		if (m_oFuncCheck != null && m_oFuncCheck.isPaid(false) == true)
			// No need mix and match
			return false;
		
		// Split multiple quantity new item to single quantity
		splitMultipleQtyNewItemToSingleQty();
		
		// Perform mix and match
		AppGlobal.g_oFuncMixAndMatch.get().processMixAndMatch(m_oFuncCheck);
		
		// Update screen
		this.calculateCheck();
		
		// Update basket
		for (int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
			// Create ordering basket section for seat
			ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck.getItemList(i);
			
			if (oFuncCheckItemList != null && oFuncCheckItemList.size() > 0) { // Has ordered items in seat i
				for (int j = 0; j < oFuncCheckItemList.size(); j++) {
					FuncCheckItem oFuncCheckItem = oFuncCheckItemList.get(j);
					updateBasketItemPrice(i, j, oFuncCheckItem);
				}
			}
		}
		
		// Update database for old check
		if (m_oFuncCheck.isOldCheck()) {
			// Update old item price
			if (!m_oFuncCheck.updateCheck(false, true, PosCheckItem.SEND_MODE_OLD_ITEM, 0, false, 0, 0, 0, "", false,
					false, false, false, 0, 0, false, false).equals(PosCheck.API_RESULT_SUCCESS))
				return false;
		}
		
		return true;
	}
	
	// Process no item kitchen slip after selected items
	private void processItemNoKitchenSlip(List<HashMap<String, Integer>> oSelectedItems) {
		for (int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
			// Create ordering basket section for seat
			ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck.getItemList(i);
			
			if (oFuncCheckItemList != null && oFuncCheckItemList.size() > 0) { // Has ordered items in seat i
				for (int j = 0; j < oFuncCheckItemList.size(); j++) {
					if (oFuncCheckItemList.get(j).isOldItem())
						continue;
					
					FuncCheckItem oFuncCheckItem = oFuncCheckItemList.get(j);
					
					String sKey = m_oFuncCheck.getCurrentCheckPartySeq() + "_" + i + "_" + j;
					if (!oFuncCheckItem.isNoKitchenSlip() || !oSelectedItems.contains(sKey)) {
						// default print kitchen slip for new item
						oFuncCheckItem.setNoKitchenSlip(false);
						
						// set its child item as print kitchen slip if it is set menu
						if(oFuncCheckItem.isSetMenu()) {
							for(FuncCheckItem oChildItem:oFuncCheckItem.getChildItemList())
								oChildItem.setNoKitchenSlip(false);
						}
						// update the basket item info
						this.updateBasketItemInfo(i, j);
					}
				}
			}
		}
		
		// Set no print kitchen slip for selected item
		for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
			int iSeatNo = oSelectedItem.get("sectionId").intValue();
			int iItemIdx = oSelectedItem.get("itemIndex").intValue();
			FuncCheckItem oFuncCheckItem = m_oFuncCheck.getItemList(iSeatNo).get(iItemIdx);
			
			// If item is selected and is not "no kitchen slip" item yet, set it as no kitchen slip item
			if (!oFuncCheckItem.isNoKitchenSlip()) {
				oFuncCheckItem.setNoKitchenSlip(true);
				
				// update the basket item info
				this.updateBasketItemInfo(iSeatNo,iItemIdx);
			}
			
			// set its child item as no kitchen slip if it is set menu
			//if(oFuncCheckItem.isSetMenu()) {
			//	for(FuncCheckItem oChildItem:oFuncCheckItem.getChildItemList())
			//		oChildItem.setNoKitchenSlip(true);
			//}
			
			// Add log to item action log list
			oFuncCheckItem.addActionLog(AppGlobal.FUNC_LIST.new_item_no_kitchen_slip.name(),
					PosActionLog.ACTION_RESULT_SUCCESS, m_oFuncCheck.getTableNoWithExtensionForDisplay(),
					AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
					AppGlobal.g_oFuncOutlet.get().getOutletId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
					AppGlobal.g_oFuncStation.get().getStationId(), m_oFuncCheck.getCheckId(), "",
					oFuncCheckItem.getCheckItem().getCitmId(), "", "", "");
			// AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.new_item_no_kitchen_slip.name(),
			// PosActionLog.ACTION_RESULT_SUCCESS,
			// AppGlobal.g_oFuncUser.get().getUserId(),
			// AppGlobal.g_oFuncOutlet.get().getShopId(),
			// AppGlobal.g_oFuncOutlet.get().getOutletId() ,
			// AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
			// AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
			// AppGlobal.g_oFuncStation.get().getStationId(),
			// m_oFuncCheck.getCheckId(), 0, 0, 0, 0, "");
		}
	}
	
	// Direct Report
	private void directReport() {
		FormDirectReport oFormDirectReport = new FormDirectReport(this);
		oFormDirectReport.generateReport("revenue_report");
		oFormDirectReport.show();
		
		if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
				|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) == true
				|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) == true) {
			// Fast food mode
			showTableFloorPlanScreen(false);
		}
	}
	
	// Adjust Tips
	private void adjustTips(HashMap<String, String> oFunctionParam) {
		String sCheckPrefixNum = "";
		List<HashMap<String, String>> oPaymentInfos = new ArrayList<HashMap<String, String>>();
		
		if (oFunctionParam != null && oFunctionParam.containsKey("checkNo")) {
			sCheckPrefixNum = oFunctionParam.get("checkNo");
		} else {
			if(m_oFrameOrderingPanel.getVisible())
				quitCheck(true);
			FormInputBox oFormInputBox = new FormInputBox(this);
			oFormInputBox.init();
			oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("adjust_tips"));
			oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("please_input_check_no"));
			oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DEFAULT);
			oFormInputBox.showKeyboard();
			oFormInputBox.show();
			
			if (oFormInputBox.getInputValue() == null)
				return;
			else
				sCheckPrefixNum = oFormInputBox.getInputValue();
		}
		
		m_oFuncCheck = new FuncCheck();
		m_oFuncCheck.addListener(this);
		if (!m_oFuncCheck.getCheckByCheckNum(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
				AppGlobal.g_oFuncOutlet.get().getOutletId(), sCheckPrefixNum, true)) {
			// Fail to get check information
			showErrorDialogBox(m_oFuncCheck.getLastErrorMessage());
			return;
		}
		
		m_oFuncCheck.initBusinessDaySetup(AppGlobal.g_oFuncOutlet.get());
		if (!checkIsFullPaid(m_oFuncCheck)) {
			return;
		}
		
		// Check whether payment records exist
		if (m_oFuncCheck.getCheckTotal().compareTo(m_oFuncCheck.getPaymentRecordPayTotal()) != 0) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("check_is_not_saved_completely") + ", "
					+ AppGlobal.g_oLang.get()._("please_try_again_later"));
			return;
		}
		
		if (m_oFuncCheck.isInUsedByOthers()) {
			// Check is used by others
			showErrorDialogBox(m_oFuncCheck.getLastErrorMessage());
			return;
		}
		
		if (m_oFuncCheck.lockCheck() == false)
			return;
		
		// Construct the payment information list for display form
		PosPaymentMethodList oPaymentMethodList = m_oFuncPayment.getPaymentMethodList();
		for (PosCheckPayment oCheckPayment : m_oFuncCheck.getCheckPaymentList()) {
			HashMap<String, String> oPaymentInfo = new HashMap<String, String>();
			PosCheckExtraInfo oCheckExtraInfoDccOptOut = oCheckPayment.getExtraInfoFromList(
					PosCheckExtraInfo.SECTION_CREDIT_CARD, PosCheckExtraInfo.VARIABLE_DCC_OPT_OUT, 0);
			
			oPaymentInfo.put("payId", String.valueOf(oCheckPayment.getCpayId()));
			oPaymentInfo.put("paymentName", oCheckPayment.getName(AppGlobal.g_oCurrentLangIndex.get()));
			if (oPaymentMethodList.getPaymentMethodList().containsKey(oCheckPayment.getPaymentMethodId())
					&& oPaymentMethodList.getPaymentMethod(oCheckPayment.getPaymentMethodId()).HaveTips())
				oPaymentInfo.put("payHaveTips", PosPaymentMethod.TIPS_HAVE_TIPS);
			else
				oPaymentInfo.put("payHaveTips", PosPaymentMethod.TIPS_NO_TIPS);
			oPaymentInfo.put("payOriTips", StringLib.BigDecimalToString(oCheckPayment.getPayTips(),
					AppGlobal.g_oFuncOutlet.get().getBusinessDay().getPayDecimal()));
			if (oCheckPayment.isPayByForeignCurrency() && oCheckExtraInfoDccOptOut == null)
				oPaymentInfo.put("payNewTips", StringLib.BigDecimalToString(oCheckPayment.getPayForeignTips(),
						AppGlobal.g_oFuncOutlet.get().getBusinessDay().getPayDecimal()));
			else
				oPaymentInfo.put("payNewTips", StringLib.BigDecimalToString(oCheckPayment.getPayTips(),
						AppGlobal.g_oFuncOutlet.get().getBusinessDay().getPayDecimal()));
			oPaymentInfo.put("payAmount", StringLib.BigDecimalToString(oCheckPayment.getPayTotal(),
					AppGlobal.g_oFuncOutlet.get().getBusinessDay().getPayDecimal()));
			oPaymentInfo.put("payForeignCurrency", oCheckPayment.getPayForeignCurreny());
			oPaymentInfo.put("PayAmountInForeignCurrency",
					StringLib.BigDecimalToString(oCheckPayment.getPayForeignTotal(),
							AppGlobal.g_oFuncOutlet.get().getBusinessDay().getPayDecimal()));
			oPaymentInfo.put("PayOriTipsInForeignCurrency", StringLib.BigDecimalToString(
					oCheckPayment.getPayForeignTips(), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getPayDecimal()));
			// paytypeDcc :credit card paytype with dcc payment
			PosCheckExtraInfo oCheckExtraInfoDcc = oCheckPayment
					.getExtraInfoFromList(PosCheckExtraInfo.SECTION_CREDIT_CARD, PosCheckExtraInfo.VARIABLE_PAYTYPE, 0);
			oPaymentInfo.put("paytypeDcc", (oCheckExtraInfoDcc == null) ? "" : oCheckExtraInfoDcc.getValue());
			// dccOptOut : credit card paytype already dcc opt out
			oPaymentInfo.put("dccOptOut",
					(oCheckExtraInfoDccOptOut == null) ? "" : oCheckExtraInfoDccOptOut.getValue());
			// selectDccOptOut : select credit card paytype as dcc opt out
			oPaymentInfo.put("selectDccOptOut", "false");
			oPaymentInfo.put("payCurrencyCode", oCheckPayment.getCurrencyCode());
			// Find currency sign by currency code
			String sCurrencySign = "$";
			OutCurrency oOutCurrency = new OutCurrency();
			if (oOutCurrency.readActiveByShopOutletIdAndCode(AppGlobal.g_oFuncOutlet.get().getShopId(),
					AppGlobal.g_oFuncOutlet.get().getOutletId(), oCheckPayment.getCurrencyCode())) {
				if (!oOutCurrency.getSign().isEmpty())
					sCurrencySign = oOutCurrency.getSign();
			}
			oPaymentInfo.put("payCurrencySign", sCurrencySign);
			oPaymentInfo.put("chksCheckPrefixNum", m_oFuncCheck.getCheckPrefixNo());
			PosCheckExtraInfo oCheckExtraInfoTraceNum = oCheckPayment.getExtraInfoFromList(
					PosCheckExtraInfo.SECTION_CREDIT_CARD, PosCheckExtraInfo.VARIABLE_TRACE_ID, 0);
			oPaymentInfo.put("traceNum", (oCheckExtraInfoTraceNum == null) ? "" : oCheckExtraInfoTraceNum.getValue());
			oPaymentInfos.add(oPaymentInfo);
		}
		
		String sTable = m_oFuncCheck.getTableNoWithTableName()[AppGlobal.g_oCurrentLangIndex.get() - 1];
		ArrayList<PosCheckPayment> oPosCheckPaymentList = m_oFuncCheck.getCheckPaymentList();
		FormAdjustTips oFormAdjustTips = new FormAdjustTips(oPaymentInfos, m_oFuncCheck.getCheckPrefixNo(),
				m_oFuncCheck.getCover(), m_oFuncCheck.getCheckTotal(), sTable, this, oPosCheckPaymentList);
		oFormAdjustTips.show();
		
		if (oFormAdjustTips.getPaymentInfos() != null) {
			FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
					AppGlobal.g_oLang.get()._("no"), this);
			oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("adjust_tips"));
			oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("confirm_tips_adjustment") + "?");
			oFormConfirmBox.show();
			if (oFormConfirmBox.isOKClicked() == false)
				return;
			
			if (m_oFuncCheck.adjustTips(oFormAdjustTips.getPaymentInfos(),
					m_oFuncPayment.getPaymentMethodList()) == false) {
				showAttentionDialogBox(m_oFuncCheck.getLastErrorMessage());
				return;
			}
			
			// Add log to action log list
			AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.adjust_tips.name(),
					PosActionLog.ACTION_RESULT_SUCCESS, m_oFuncCheck.getTableNoWithExtensionForDisplay(),
					AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
					AppGlobal.g_oFuncOutlet.get().getOutletId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
					AppGlobal.g_oFuncStation.get().getStationId(), m_oFuncCheck.getCheckId(), "", "", "", "", "");
			// handle action log
			AppGlobal.g_oActionLog.get().handleActionLog(false);
		} else
			m_oFuncCheck.unlockCheck();
	}
	
	private List<String> getMixAndMatchRuleAndItem(FuncCheckItem oFuncCheckItem) {
		List<String> oMixAndMatchRuleAndItemList = new ArrayList<String>();
		
		if (oFuncCheckItem.isOldItem()) {
			if (!oFuncCheckItem.getCheckItem().getMixAndMatchItemId().equals("")) {
				FuncCheckItem oMasterFuncCheckItem = m_oFuncCheck
						.getOrderedCheckItemByCitmId(oFuncCheckItem.getCheckItem().getMixAndMatchItemId());
				if (oMasterFuncCheckItem.getMixAndMatchRuleId() > 0) {
					oMixAndMatchRuleAndItemList
							.add(AppGlobal.g_oFuncMixAndMatch.get().getRule(oMasterFuncCheckItem.getMixAndMatchRuleId())
									.getName(AppGlobal.g_oCurrentLangIndex.get()));
					oMixAndMatchRuleAndItemList.add("- "
							+ oMasterFuncCheckItem.getItemShortDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get()));
					
					if (oMasterFuncCheckItem.getMixAndMatchItemList().size() > 1) {
						for (FuncCheckItem oSlaveFuncCheckItem : oMasterFuncCheckItem.getMixAndMatchItemList()) {
							if (oSlaveFuncCheckItem.getCheckItem().getCitmId()
									.equals(oFuncCheckItem.getCheckItem().getCitmId()))
								continue;
							
							oMixAndMatchRuleAndItemList.add("- " + oSlaveFuncCheckItem
									.getItemShortDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get()));
						}
					}
				}
			} else {
				if (oFuncCheckItem.getMixAndMatchRuleId() > 0) {
					oMixAndMatchRuleAndItemList
							.add(AppGlobal.g_oFuncMixAndMatch.get().getRule(oFuncCheckItem.getMixAndMatchRuleId())
									.getName(AppGlobal.g_oCurrentLangIndex.get()));
					
					if (oFuncCheckItem.getMixAndMatchItemList().size() > 0) {
						for (FuncCheckItem oSlaveFuncCheckItem : oFuncCheckItem.getMixAndMatchItemList())
							oMixAndMatchRuleAndItemList.add("- " + oSlaveFuncCheckItem
									.getItemShortDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get()));
					}
				}
			}
		}
		return oMixAndMatchRuleAndItemList;
	}
	
	// Save park order by station (ONLY support park current check party)
	private void parkOrderByStation() {
		if (m_oFuncCheck != null) {
			FuncParkOrder oFuncParkOrder = new FuncParkOrder();
			
			// Check if there is new item
			if (m_oFuncCheck.hasNewItem(true) == false) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("no_item_ordered"));
				return;
			}
			
			// Ask if confirm
			FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
					AppGlobal.g_oLang.get()._("no"), this);
			oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
			oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("parking_order_by_station")+"?");
			oFormConfirmBox.show();
			if (oFormConfirmBox.isOKClicked() == false)
				return;
			
			if (oFuncParkOrder.saveParkOrderByStation(m_oFuncCheck, AppGlobal.g_oFuncStation.get().getStationId())) {
				// Success park order
				showAttentionDialogBox(AppGlobal.g_oLang.get()._("park_order_successfully"));
				
				// Add log to action log list
				AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.park_order_by_station.name(),
						PosActionLog.ACTION_RESULT_SUCCESS, m_oFuncCheck.getTableNoWithExtensionForDisplay(),
						AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
						AppGlobal.g_oFuncOutlet.get().getOutletId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
						AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "", "");
				
				// quit check after successfully parking order
				quitCheck(false);
			} else {
				// Fail to park order
				showErrorDialogBox(AppGlobal.g_oLang.get()._("fail_to_park_order"));
			}
		} else {
			// Check is not loaded
			showErrorDialogBox(AppGlobal.g_oLang.get()._("check_is_not_loaded"));
		}
	}
	
	// Retrieve park order
	private void retrieveParkOrderByStation() {
		// Load park order
		if (m_oFuncCheck != null) {
			FuncParkOrder oFuncParkOrder = new FuncParkOrder();
			
			// Check if there is items or not
			if (m_oFuncCheck.hasNewItem(true)) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_retrieve_parking_order_with_items_ordered"));
				return;
			}
			
			// Retrieve the list of park order
			ArrayList<String> oParkOrderFileNameList = oFuncParkOrder
					.getParkOrderByStation(AppGlobal.g_oFuncStation.get().getStationId());
			if (oParkOrderFileNameList == null) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("missing_parking_order_folder"));
				return;
			}
			
			if (oParkOrderFileNameList.isEmpty()) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("no_parking_order_is_found"));
				return;
			}
			
			//Retrieve display panel zone - ordering basket setup
			PosDisplayPanelZone oOrderingBasketDisplayPanelZone =  this.getOrderingBasketDisplayPanelZone();
			
			FormParkOrder oFormParkOrder = new FormParkOrder(this, oOrderingBasketDisplayPanelZone);
			oFormParkOrder.setParkMethod(FuncParkOrder.PARK_ORDER_BY_STATION);
			oFormParkOrder.init(oParkOrderFileNameList);
			oFormParkOrder.show();
			if (oFormParkOrder.isUserCancel())
				return;
			else {
				String sFileName = oFormParkOrder.getSelectedFileName();
				if (oFuncParkOrder.loadParkOrderByStation(m_oFuncCheck, sFileName, true)) {
					// Success load park order
					// Redraw basket
					drawOrderingBasket(true);
					
					// Recalculate the check
					calculateCheck();
					
					// Add log to action log list
					AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.retrieve_park_order_by_station.name(),
							PosActionLog.ACTION_RESULT_SUCCESS, m_oFuncCheck.getTableNoWithExtensionForDisplay(),
							AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
							AppGlobal.g_oFuncOutlet.get().getOutletId(),
							AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
							AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
							AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "", "");
				} else {
					// Fail to load park order
					showErrorDialogBox(AppGlobal.g_oLang.get()._("fail_to_retrieve_parking_order"));
				}
			}
			
		} else {
			// Check is not loaded
			showErrorDialogBox(AppGlobal.g_oLang.get()._("check_is_not_loaded"));
		}
	}
	
	// Save park order by outlet
	private void parkOrderByOutlet() {
		if (m_oFuncCheck != null) {
			FuncParkOrder oFuncParkOrder = new FuncParkOrder();
			
			// Check if there is new item
			if (m_oFuncCheck.hasNewItem(true) == false) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("no_item_ordered"));
				return;
			}
			
			// Ask if confirm
			FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
					AppGlobal.g_oLang.get()._("no"), this);
			oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
			oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("parking_order_by_outlet"));
			oFormConfirmBox.show();
			if (oFormConfirmBox.isOKClicked() == false)
				return;
			
			if (oFuncParkOrder.saveParkOrderByOutlet(m_oFuncCheck, AppGlobal.g_oFuncOutlet.get().getOutletId(),
					AppGlobal.g_oFuncStation.get().getStationId())) {
				// Success park order
				showAttentionDialogBox(AppGlobal.g_oLang.get()._("park_order_successfully"));
				
				// Add log to action log list
				AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.park_order_by_outlet.name(),
						PosActionLog.ACTION_RESULT_SUCCESS, m_oFuncCheck.getTableNoWithExtensionForDisplay(),
						AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
						AppGlobal.g_oFuncOutlet.get().getOutletId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
						AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "", "");
				
				// quit check
				quitCheck(false);
			} else {
				// Fail to park order
				showErrorDialogBox(AppGlobal.g_oLang.get()._("fail_to_park_order"));
			}
		} else {
			// Check is not loaded
			showErrorDialogBox(AppGlobal.g_oLang.get()._("check_is_not_loaded"));
		}
	}
	
	// Retrieve park order
	private void retrieveParkOrderByOutlet() {
		// Load park order
		if (m_oFuncCheck != null) {
			FuncParkOrder oFuncParkOrder = new FuncParkOrder();
			
			// Check if there is items or not
			if (m_oFuncCheck.hasNewItem(true)) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_retrieve_parking_order_with_items_ordered"));
				return;
			}
			
			// Retrieve the list of park order
			ArrayList<String> oParkOrderFileNameList = oFuncParkOrder
					.getParkOrderByOutlet(AppGlobal.g_oFuncOutlet.get().getOutletId());
			if (oParkOrderFileNameList == null) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("missing_parking_order_folder"));
				return;
			}
			
			if (oParkOrderFileNameList.isEmpty()) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("no_parking_order_is_found"));
				return;
			}
			
			//Retreive display panel zone - ordering basket setup
			PosDisplayPanelZone oOrderingBasketDisplayPanelZone =  this.getOrderingBasketDisplayPanelZone();
			
			FormParkOrder oFormParkOrder = new FormParkOrder(this, oOrderingBasketDisplayPanelZone);
			oFormParkOrder.setParkMethod(FuncParkOrder.PARK_ORDER_BY_OUTLET);
			oFormParkOrder.init(oParkOrderFileNameList);
			oFormParkOrder.show();
			if (oFormParkOrder.isUserCancel())
				return;
			
			else {
				String sFileName = oFormParkOrder.getSelectedFileName();
				if (oFuncParkOrder.loadParkOrderByOutlet(m_oFuncCheck, AppGlobal.g_oFuncOutlet.get().getOutletId(),
						sFileName, true)) {
					// Success load park order
					// Redraw basket
					drawOrderingBasket(true);
					
					// Recalculate the check
					calculateCheck();
					
					// Add log to action log list
					AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.retrieve_park_order_by_outlet.name(),
							PosActionLog.ACTION_RESULT_SUCCESS, m_oFuncCheck.getTableNoWithExtensionForDisplay(),
							AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
							AppGlobal.g_oFuncOutlet.get().getOutletId(),
							AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
							AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
							AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "", "");
				} else {
					// Fail to load park order
					showErrorDialogBox(AppGlobal.g_oLang.get()._("parking_order_has_been_retrieved_by_other_station"));
				}
			}
			
		} else {
			// Check is not loaded
			showErrorDialogBox(AppGlobal.g_oLang.get()._("check_is_not_loaded"));
		}
	}
	
	// Cashier Settlement
	private void cashierSettlement() {
		String sMsg;
		FuncUser oUser;
		int iOutletId, iUserId;
		
		String sCashierSettlementMode = AppGlobal.g_oFuncStation.get().getCashierSettlementMode();
		if (sCashierSettlementMode.equals("")) {	// cashier settlement by user
			oUser = this.askUserPassword(m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.cashier_settlement.name())
					.getName(AppGlobal.g_oCurrentLangIndex.get()), true);
			if (oUser == null)
				return;
			
			iUserId = oUser.getUserId();
			iOutletId = 0;
		} else {
			oUser = new FuncUser();
			iUserId = 0;
			iOutletId = AppGlobal.g_oFuncOutlet.get().getOutletId();
		}
		
		// Find number of unsettled checks
		FuncCheck oFuncCheck = new FuncCheck();
		List<PosCheck> oUnsettledCheckList = oFuncCheck
				.getUnsettleCheckList(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), iUserId, iOutletId);
		if (oUnsettledCheckList.isEmpty()) {
			if (sCashierSettlementMode.equals(""))
				sMsg = AppGlobal.g_oLang.get()._("no_unsettled_checks_found_for_user")
						+ ": "+ oUser.getUserName(AppGlobal.g_oCurrentLangIndex.get());
			else
				sMsg = AppGlobal.g_oLang.get()._("no_unsettled_checks_found_for_outlet")
						+ ": " + AppGlobal.g_oFuncOutlet.get().getOutletNameByIndex(AppGlobal.g_oCurrentLangIndex.get());
			showAttentionDialogBox(sMsg);
			return;
		}
		
		// Get Last Shift No
		int iLastShiftNo = oFuncCheck.getSettleShiftNum(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), iUserId, iOutletId);
		
		// Confirmation of cashier settlement
		if (sCashierSettlementMode.equals(""))
			sMsg = AppGlobal.g_oLang.get()._("user") + ": " + oUser.getUserName(AppGlobal.g_oCurrentLangIndex.get()) + System.lineSeparator()
					+ AppGlobal.g_oLang.get()._("number_of_checks_to_be_settled") + ": " + oUnsettledCheckList.size() + System.lineSeparator()
					+ AppGlobal.g_oLang.get()._("current_shift") + ": " + (iLastShiftNo + 1);
		else
			sMsg = AppGlobal.g_oLang.get()._("outlet") + ": "
					+ AppGlobal.g_oFuncOutlet.get().getOutletNameByIndex(AppGlobal.g_oCurrentLangIndex.get()) + System.lineSeparator()
					+ AppGlobal.g_oLang.get()._("number_of_checks_to_be_settled") + ": " + oUnsettledCheckList.size()
					+ System.lineSeparator() + AppGlobal.g_oLang.get()._("current_shift") + ": " + (iLastShiftNo + 1);
		
		FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
				AppGlobal.g_oLang.get()._("no"), this);
		oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("confirmation"));
		oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._(sMsg));
		oFormConfirmBox.show();
		if (oFormConfirmBox.isOKClicked() == false) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("cashier_settlement_canceled"));
			return;
		}
		
		// Update settle shift no. of checks
		DateTimeFormatter dateFormat = DateTimeFormat.forPattern("yyyy-MM-dd");
		if (!oFuncCheck.settleChecks(oUnsettledCheckList, iLastShiftNo + 1,
				dateFormat.print(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getDate()), iUserId,
				iOutletId, AppGlobal.g_oFuncStation.get().getReportSlipPrtqId(), AppGlobal.g_oCurrentLangIndex.get()))
			return;
		
		if (sCashierSettlementMode.equals(""))
			sMsg = AppGlobal.g_oLang.get()._("cashier_settlement_completed") + System.lineSeparator() + AppGlobal.g_oLang.get()._("user")
					+ ": " + oUser.getUserName(AppGlobal.g_oCurrentLangIndex.get()) + System.lineSeparator()
					+ AppGlobal.g_oLang.get()._("number_of_checks_settled") + ": " + oUnsettledCheckList.size() + System.lineSeparator()
					+ AppGlobal.g_oLang.get()._("shift_now") + ": " + (iLastShiftNo + 2);
		else
			sMsg = AppGlobal.g_oLang.get()._("cashier_settlement_completed") + System.lineSeparator() + AppGlobal.g_oLang.get()._("outlet") + ": "
					+ AppGlobal.g_oFuncOutlet.get().getOutletNameByIndex(AppGlobal.g_oCurrentLangIndex.get()) + System.lineSeparator()
					+ AppGlobal.g_oLang.get()._("number_of_checks_settled") + ": " + oUnsettledCheckList.size() + System.lineSeparator()
					+ AppGlobal.g_oLang.get()._("shift_now") + ": " + (iLastShiftNo + 2);
		showAttentionDialogBox(sMsg);
		
		// Add log to action log list
		AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.cashier_settlement.name(),
				PosActionLog.ACTION_RESULT_SUCCESS, "", iUserId, AppGlobal.g_oFuncOutlet.get().getShopId(),
				AppGlobal.g_oFuncOutlet.get().getOutletId(), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
				AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "", "Shift No.: " + (iLastShiftNo + 1));
		// handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
	}
	
	// Switch Check Party (*** Need further development)
	private void switchCheckParty(int iSeq) {
		if (m_oFuncCheck.switchCheckParty(iSeq) == false)
			return;
		
		// Refresh UI
		// Redraw basket
		redrawOrderingBasket(true, FrameOrderingBasket.ORDERING_BASKET_MODE_SHOW_NORMAL);
	}
	
	// Redraw Ordering Basket
	public void redrawOrderingBasket(boolean bResetSeat, String sCurrentOrderingBasketMode){
		FrameOrderingBasket oFrameOrderingBasket = m_oFrameOrderingBasket;
		if(sCurrentOrderingBasketMode.equals(FrameOrderingBasket.ORDERING_BASKET_MODE_SHOW_CONSOLIDATE_ITEMS))
			oFrameOrderingBasket = m_oFrameConsolidateItemsOrderingBasket;
		
		oFrameOrderingBasket.removeAllSections();
		if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food)
				|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk)
				|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab)) {
			// Not show "share" section title for fast food mode
			oFrameOrderingBasket.addSection(0, AppGlobal.g_oLang.get()._("shared", ""), false);
		} else {
			if(!oFrameOrderingBasket.isDisplaySeatNumberSection())
				oFrameOrderingBasket.addSection(0, AppGlobal.g_oLang.get()._("shared", ""), false);
			else
				oFrameOrderingBasket.addSection(0, AppGlobal.g_oLang.get()._("shared", ""), true);
		}
		for (int i = 1; i <= AppGlobal.MAX_SEATS; i++) {
			// add new section and not visible
			oFrameOrderingBasket.addSection(i, AppGlobal.g_oLang.get()._("seat", " ", i), false);
		}
		
		// Redraw the ordering basket
		if(sCurrentOrderingBasketMode.equals(FrameOrderingBasket.ORDERING_BASKET_MODE_SHOW_NORMAL))
			drawOrderingBasket(bResetSeat);
		else if(sCurrentOrderingBasketMode.equals(FrameOrderingBasket.ORDERING_BASKET_MODE_SHOW_CONSOLIDATE_ITEMS))
			drawConsolidateItemsOrderingBasket(bResetSeat);
		
		// If not reset the seat, select the section after re-add all the section
		if(!bResetSeat)
			oFrameOrderingBasket.setSelectedSection(oFrameOrderingBasket.getSelectedSectionId());
	}
	
	// Set Menu Replace Item
	public void setMenuReplaceItem(int iReplaceSectionId, int iReplaceItemIndex, int iNewItemId) {
		BigDecimal dQty = new BigDecimal("1.0");
		FuncCheckItem oOriFuncCheckItem = m_oFuncCheck.getCheckItem(iReplaceSectionId, iReplaceItemIndex);
		if (oOriFuncCheckItem == null)
			return;
		
		PosCheckItem oOriCheckItem = oOriFuncCheckItem.getCheckItem();
		if (oOriFuncCheckItem.isOldItem()) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_replace_old_item"));
			return;
		}
		
		// Cannot replace pre-defined item for set menu
		if(oOriFuncCheckItem.getPanelLookupContent().predefinedItem) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_replace_pre_defined_item"));
			return;
		}
		
		// get parent check item
		FuncCheckItem oParentFuncCheckItem = null;
		int iParentSectionId = -1;
		int iParentItemIndex = -1;
		for (int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
			ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck.getItemList(i);
			for (int j = 0; j < oFuncCheckItemList.size(); j++) {
				FuncCheckItem oFuncCheckItem2 = oFuncCheckItemList.get(j);
				if (oFuncCheckItem2 == oOriFuncCheckItem.getParentFuncCheckItem()) {
					oParentFuncCheckItem = oFuncCheckItem2;
					iParentSectionId = i;
					iParentItemIndex = j;
					break;
				}
			}
			
			if (oParentFuncCheckItem != null)
				break;
		}
		
		if (oParentFuncCheckItem == null) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_find_set_menu_parent_item"));
			return;
		}
		
		if (iNewItemId > 0) { // New item is selected
			// Add New Item
			// Create func check item from menu item
			FuncCheckItem oNewFuncCheckItem = new FuncCheckItem();
			if (oNewFuncCheckItem.retieveItemFromMenu(iNewItemId, dQty, dQty, oParentFuncCheckItem, false, true,
					AppGlobal.g_oFuncOutlet.get().getPriceLevel()) == false) {
				// Retrieve item from menu error
				// Prompt error
				String sErrMsg = oNewFuncCheckItem.getLastErrorMessage();
				showErrorDialogBox(sErrMsg);
				return;
			}
			
			// Can't be replace if new item is set menu
			if (oNewFuncCheckItem.isSetMenu()) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("new_item_cannot_be_set_menu"));
				return;
			}
			
			// Can't be replace if new item is not act as child item
			if (!oNewFuncCheckItem.getMenuItem().isChild()) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("new_item_is_not_a_child_item"));
				return;
			}
			
			// Can't be replace if new item is soldout
			if (m_oFuncCheck.isSoldout(oNewFuncCheckItem.getMenuItemId())) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("item_soldout"));
				return;
			}
			
			if (this.addItem(oParentFuncCheckItem, iNewItemId, dQty, dQty, false, true, false,
					AppGlobal.g_oFuncOutlet.get().getPriceLevel(), null)) {
				autoAssignCourseToNewOrderItem();
				
				// Add hot item success
				finishAddItem(false);
			}
			// End add New Item
			
			// the last check item in the list is new replace item
			int iCurrentSeatNo = m_oFrameOrderingBasket.getSelectedSectionId();
			int iLastItemIndex = m_oFuncCheck.getItemListCount(iCurrentSeatNo) - 1;
			FuncCheckItem oLastFuncCheckItem = m_oFuncCheck.getCheckItem(iCurrentSeatNo, iLastItemIndex);
			PosCheckItem oLastCheckItem = oLastFuncCheckItem.getCheckItem();
			
			if (iCurrentSeatNo != iReplaceSectionId) {
				this.moveItemToOtherSeat(iCurrentSeatNo, oLastFuncCheckItem, iReplaceSectionId,
						oLastCheckItem.getQty());
				
				iCurrentSeatNo = m_oFrameOrderingBasket.getSelectedSectionId();
				iLastItemIndex = m_oFuncCheck.getItemListCount(iCurrentSeatNo) - 1;
				oLastFuncCheckItem = m_oFuncCheck.getCheckItem(iCurrentSeatNo, iLastItemIndex);
				oLastCheckItem = oLastFuncCheckItem.getCheckItem();
			}
			
			// Set parent tab index and panel menu id for replaced item
			oLastFuncCheckItem.getPanelLookupContent().parentTabIndex = oOriFuncCheckItem.getPanelLookupContent().parentTabIndex;
			oLastFuncCheckItem.getPanelLookupContent().panelMenuIdList = oOriFuncCheckItem.getPanelLookupContent().panelMenuIdList;
			
			// Course no. handling
			m_oFuncCheck.changeItemCourse(iCurrentSeatNo, iLastItemIndex, oOriCheckItem.getCourseId());
			
			// Find index no. of being replaced item
			int iOriChildItemIndex = -1;
			String sOriChildItemName = "";
			for (int i = 0; i < oParentFuncCheckItem.getChildItemList().size(); i++) {
				FuncCheckItem oFuncCheckItem2 = oParentFuncCheckItem.getChildItemList().get(i);
				if (oFuncCheckItem2.getMenuItemId() == oOriFuncCheckItem.getMenuItemId()) {
					iOriChildItemIndex = i;
					sOriChildItemName = oOriFuncCheckItem.getCheckItem().getName(AppGlobal.g_oCurrentLangIndex.get());
					break;
				}
			}
			
			if (iOriChildItemIndex == -1) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_find") + " "
						+ oOriCheckItem.getName(AppGlobal.g_oCurrentLangIndex.get()) + " "
						+ AppGlobal.g_oLang.get()._("in_set_menu"));
			}
			
			// Delete child item from FuncCheckItem
			m_oFuncCheck.deleNewChildItemFromItem(iParentSectionId, iParentItemIndex, iOriChildItemIndex);
			
			// Update Item name, quantity, price in Ordering Basket
			String[] sNameArray = new String[AppGlobal.LANGUAGE_COUNT];
			for (int i = 0; i < AppGlobal.LANGUAGE_COUNT; i++) {
				sNameArray[i] = oLastFuncCheckItem.getBilingualItemDescriptionByIndex(i + 1);
			}
			this.updateBasketItemDesc(iReplaceSectionId, iReplaceItemIndex, sNameArray);
			this.updateBasketItemPrice(iReplaceSectionId, iReplaceItemIndex, oLastFuncCheckItem);
			
			// remove the display of new inserted item
			m_oFrameOrderingBasket.removeItem(iReplaceSectionId, iLastItemIndex);
			
			// update item list of current check party
			m_oFuncCheck.replaceItemToList(iReplaceSectionId, iReplaceItemIndex);
			
			// Recalculate the check
			this.calculateCheck();
			
			// resequence the item list
			m_oFuncCheck.updateCheckItemSequence(true, true, 0);
			
			// update child item list of parent check item
			oParentFuncCheckItem.replaceChildItemToList(iOriChildItemIndex);
			
			this.updateBasketItemInfo(iReplaceSectionId, iReplaceItemIndex);
			
			// Add log to action log list
			String sLogRemark = sOriChildItemName + "-> " + oLastCheckItem.getName(AppGlobal.g_oCurrentLangIndex.get());
			AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.set_menu_replace_item.name(),
					PosActionLog.ACTION_RESULT_SUCCESS, m_oFuncCheck.getTableNoWithExtensionForDisplay(),
					AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
					AppGlobal.g_oFuncOutlet.get().getOutletId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
					AppGlobal.g_oFuncStation.get().getStationId(), m_oFuncCheck.getCheckId(), "",
					oLastCheckItem.getCitmId(), "", "", sLogRemark);
			// handle action log
			AppGlobal.g_oActionLog.get().handleActionLog(false);
		} else {
			PosFunction oFunction = m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.set_menu_replace_item.name());
			if (oFunction != null) {
				m_iUsePanelToSelectItemModeCurrentFuncId = oFunction.getFuncId();
			}
			
			this.toggleUsePanelToSelectItemMode(true, false);
			
			// Close previous lookup first
			if (m_oFrameOrderingMenuLookup != null)
				m_oFrameOrderingMenuLookup.setVisible(false);
			
			String sKey = iReplaceSectionId + "_" + iReplaceItemIndex;
			m_oBasketSelectedItems.put(sKey, 0);
		}
	}
	
	private boolean repeatItem(FuncCheckItem oFuncCheckItem, BigDecimal dPreviousRepeatCount) {
		if (oFuncCheckItem.isLoyaltyItem()) {
			// Cannot repeat loyalty item
			showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_repeat_loyalty_item"));
			return false;
		}
		if (oFuncCheckItem.isPartialPendingItem()) {
			// Cannot repeat Partial Pending item
			showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_repeat_partial_pending_item"));
			return false;
		}
		if(isMinimumChargeItem(oFuncCheckItem))
			return false;
		
		// clone the check item
		FuncCheckItem oNewSeatFuncCheckItem;
		if (oFuncCheckItem.isSetMenuItem())
			oNewSeatFuncCheckItem = oFuncCheckItem;
		else {
			oNewSeatFuncCheckItem = new FuncCheckItem(oFuncCheckItem, null);
			oNewSeatFuncCheckItem.resetAsNewItem();
		}
		
		if (oNewSeatFuncCheckItem.isSetMenu()) {
			int iSeatNo = oNewSeatFuncCheckItem.getCheckItem().getSeatNo();
			int iLineNo = oNewSeatFuncCheckItem.getCheckItem().getSeq();
			int iChildItemListCnt = m_oFuncCheck.getChildItemListCount(iSeatNo, iLineNo - 1);
			
			for (int i = 0; i < iChildItemListCnt; i++) {
				FuncCheckItem oFuncCheckChildItem = m_oFuncCheck.getCheckItem(iSeatNo, iLineNo + i);
				FuncCheckItem oNewSeatFuncCheckChildItem = new FuncCheckItem(oFuncCheckChildItem,
						oNewSeatFuncCheckItem);
				oNewSeatFuncCheckChildItem.resetAsNewItem();
			}
		}
		
		// check order item control
		if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)){
			boolean bAllowOrder = this.checkOrderItemControlLimit(oFuncCheckItem.getCheckItem().getItemId(), oFuncCheckItem.getCheckItem().getQty());
			if(!bAllowOrder){
				showErrorDialogBox(AppGlobal.g_oLang.get()._("item_quantity_limit_per_check_exceeded")+ ":" + System.lineSeparator() + oFuncCheckItem.getCheckItem().getName(AppGlobal.g_oCurrentLangIndex.get()));
				return false;
			}
		}
		
		oNewSeatFuncCheckItem.getCheckItem().setQty(oNewSeatFuncCheckItem.getCheckItem().getQty().subtract(dPreviousRepeatCount));
		// do item checking
		if (this.addItemPreChecking(null, oNewSeatFuncCheckItem.getMenuItem().getItemId(),
				oNewSeatFuncCheckItem.getCheckItem().getQty(), oNewSeatFuncCheckItem.getCheckItem().getBaseQty(), false,
				false, AppGlobal.g_oFuncOutlet.get().getPriceLevel()) == null)
			return false;
		m_oStoredFuncCheckItemList.add(oNewSeatFuncCheckItem);
		// loop the child item
		if (oNewSeatFuncCheckItem.isSetMenu()) {
			for (FuncCheckItem oFuncChildItem : oNewSeatFuncCheckItem.getChildItemList()) {
				if (repeatItem(oFuncChildItem, BigDecimal.ZERO) == false) {
					return false;
				}
			}
		}
		return true;
	}
	
	private boolean repeatMutipleItems(List<HashMap<String, Integer>> oSelectedItems) {
		BigDecimal dPreviousItemQtyCount= BigDecimal.ZERO;
		int iLastCheckItemIndex = -1;
		int iLastMenuItemId = -1;
		
		if(m_oFrameOrderingBasket.getSelectedSectionId() >= 0){
			iLastCheckItemIndex = m_oFuncCheck.getItemListCount(m_oFrameOrderingBasket.getSelectedSectionId()) - 1;
			if(iLastCheckItemIndex >= 0)
				iLastMenuItemId = m_oFuncCheck.getCheckItem(m_oFrameOrderingBasket.getSelectedSectionId(), iLastCheckItemIndex).getMenuItemId();
		}
		
		// repeat the selected items
		for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
			FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(oSelectedItem.get("sectionId"),
					oSelectedItem.get("itemIndex"));
			
			BigDecimal dTempPreviousItemQtyCount= BigDecimal.ZERO;
			
			if(oFuncCheckItem.getMenuItemId() == iLastMenuItemId && (iLastCheckItemIndex != oSelectedItem.get("itemIndex")
					|| m_oFrameOrderingBasket.getSelectedSectionId() != oSelectedItem.get("sectionId")))
				dPreviousItemQtyCount = dPreviousItemQtyCount.add(oFuncCheckItem.getCheckItem().getQty());
			else if(oFuncCheckItem.getMenuItemId() == iLastMenuItemId && iLastCheckItemIndex == oSelectedItem.get("itemIndex")
					&& m_oFrameOrderingBasket.getSelectedSectionId() == oSelectedItem.get("sectionId")
					&& orderingBasketItemGrouping(true, oFuncCheckItem, oFuncCheckItem))
				dTempPreviousItemQtyCount = dPreviousItemQtyCount;
			
			if (!actionForRepeatItem(oFuncCheckItem, AppGlobal.FUNC_LIST.repeat_multiple_items.name(), dTempPreviousItemQtyCount)) {
				// cleanup stored temporary item list
				m_oStoredFuncCheckItemList.clear();
			}
		}
		return true;
	}
	
	// Read smart card function
	private void smartCardReadCard() {
		if (m_oFuncSmartCard.isSupportSmartCard() == false) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("not_support_smart_card"));
			return;
		}
		
		if (m_oFuncSmartCard.isConnected() == false) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("fail_to_open_the_smart_card_device"));
			return;
		}
		
		// Read card and show card information
		FormSmartCardOperation oFormSmartCardOperation = new FormSmartCardOperation(m_oFuncSmartCard, this);
		oFormSmartCardOperation.initForReadCard();
		oFormSmartCardOperation.show();
	}
	
	// Smart card close process
	private void closeSmartCard() {
		if (m_oFuncSmartCard==null || m_oFuncSmartCard.isSupportSmartCard() == false || m_oFuncSmartCard.isConnected() == false)
			return;
		
		// Clear display before close port
		FormSmartCardOperation oFormSmartCardOperation = new FormSmartCardOperation(m_oFuncSmartCard, this);
		oFormSmartCardOperation.initForCloseSmartCard();
		oFormSmartCardOperation.show();
	}
	
	private void splitTable() {
		if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode)) {
			showAttentionDialogBox(AppGlobal.g_oLang.get()._("not_support_split_check_in_fast_food_mode"));
			return;
		}
		
		if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)) {
			showAttentionDialogBox(AppGlobal.g_oLang.get()._("not_support_split_check_in_self_order_kiosk_mode"));
			return;
		}
		
		if (!m_oFuncCheck.isOldCheck() && !m_oFuncCheck.hasNewItem(false)) {
			showAttentionDialogBox(AppGlobal.g_oLang.get()._("empty_check_not_support_split_check"));
			return;
		}
		
		if (m_oFuncCheck.hasCheckDiscount(true, false)) {
			showAttentionDialogBox(AppGlobal.g_oLang.get()._("cannot_split_check_that_have_applied_check_discount"));
			return;
		}
		
		FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
				AppGlobal.g_oLang.get()._("no"), this);
		String sMessage = AppGlobal.g_oLang.get()._("will_send_check_before_do_split_table") + System.lineSeparator()
				+ AppGlobal.g_oLang.get()._("confirm_to_send_check_and_split_table") + "?";
		oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
		oFormConfirmBox.setMessage(sMessage);
		oFormConfirmBox.show();
		if (oFormConfirmBox.isOKClicked() == false)
			return;
		
		String sBaseCheckPrefixNo = m_oFuncCheck.getCheckPrefixNo();
		String sBaseCheckTableNo = m_oFuncCheck.getTableNo();
		String sBaseCheckTableExt = m_oFuncCheck.getTableExtension();
		int iBaseCheckCustomType = m_oFuncCheck.getCustomTypeId();
		boolean bOldCheck = m_oFuncCheck.isOldCheck();
		String sSendCheckResult = sendCheck(false, false, false, true, false, 0, true, 0);
		
		if (sSendCheckResult.equals(FUNC_RESULT_SUCCESS)) {
			List<PosCheck> oCheckList = new ArrayList<PosCheck>();
			
			PosCheck oPosCheck = new PosCheck();
			JSONArray oCheckListJSONArray = oPosCheck.getCheckListByBusinessDayPaid(
					AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
					AppGlobal.g_oFuncStation.get().getStationId(), PosCheck.PAID_NOT_PAID, true);
			if (oCheckListJSONArray.length() == 0) {
				showAttentionDialogBox(AppGlobal.g_oLang.get()._("no_unpaid_tables_for_split_tables") + System.lineSeparator()
						+ AppGlobal.g_oLang.get()._("abort_split_tables"));
				return;
			}
			
			for (int i = 0; i < oCheckListJSONArray.length(); i++) {
				if (oCheckListJSONArray.isNull(i))
					continue;
				
				PosCheck oCheck = new PosCheck(oCheckListJSONArray.optJSONObject(i));
				oCheckList.add(oCheck);
			}
			
			// After sendCheck, data in m_oFuncCheck is cleared
			// For new check, need to retrieve the check info by table no.
			// before opening FormSelectSplitTable
			if (!bOldCheck) {
				String sResult = oPosCheck.getCheckIdByTable(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
						AppGlobal.g_oFuncOutlet.get().getOutletId(), Integer.parseInt(sBaseCheckTableNo),
						sBaseCheckTableExt, 0);
				if (!sResult.equals(PosCheck.API_RESULT_SUCCESS))
					AppGlobal.writeErrorLog(this.getClass().getSimpleName(),
							new Exception().getStackTrace()[0].getMethodName(),
							AppGlobal.g_oFuncStation.get().getStationId() + "",
							Integer.toString(AppGlobal.g_oFuncUser.get().getUserId()), "Fail to retrieve check data");
				sBaseCheckPrefixNo = oPosCheck.getCheckPrefixNo();
			}
			// List out all available tables to let user select to do split
			// table
			FormSelectSplitTable oFormSelectSplitTable = new FormSelectSplitTable(this);
			oFormSelectSplitTable.init(oCheckList, sBaseCheckPrefixNo);
			oFormSelectSplitTable.show();
			
			if (!oFormSelectSplitTable.isExit()) {
				List<HashMap<String, Object>> oSelectedTableList = oFormSelectSplitTable.getSplitTableList();
				if (!oSelectedTableList.isEmpty()) {
					PosOutletTableList oPosOutletTableList = new PosOutletTableList();
					oPosOutletTableList.getActiveOutletTableList(AppGlobal.g_oFuncOutlet.get().getOutletId());
					HashMap<PosOutletTable, PosCheck> oActiveOutletTableList = oPosOutletTableList.getOutletTableList();
					
					List<FuncCheck> oSelectedFuncCheckList = new ArrayList<FuncCheck>();
					
					// ask tms interface
					ArrayList<String> oVendors = new ArrayList<String>();
					oVendors.add(InfVendor.KEY_RESPAK);
					String sTitle = AppGlobal.g_oLang.get()._("please_select_the_tms_interface");
					PosInterfaceConfig oTmsConfig = this.getInterfaceConfig(InfInterface.TYPE_TMS, oVendors, sTitle,
							false);
					
					// Check whether table has already used by other user
					for (HashMap<String, Object> oTableInfo : oSelectedTableList) {
						int iTableNo = ((Integer) oTableInfo.get(FormSelectSplitTable.LIST_KEY_TABLE_NUMBER))
								.intValue();
						String sTableExtension = (String) oTableInfo.get(FormSelectSplitTable.LIST_KEY_TABLE_EXTENSION);
						int iGuest = ((Integer) oTableInfo.get(FormSelectSplitTable.LIST_KEY_GUEST)).intValue();
						
						boolean bValidTable = true;
						for (Entry<PosOutletTable, PosCheck> entry : oActiveOutletTableList.entrySet()) {
							PosOutletTable oPosOutletTable = entry.getKey();
							PosCheck oPosCheck2 = entry.getValue();
							
							if (oPosCheck2 == null)
								continue;
							
							if (iTableNo == oPosOutletTable.getTable()
									&& sTableExtension.equals(oPosOutletTable.getTableExtension())) {
								// Check whether is it logged by others
								if (oPosOutletTable.getStationId() > 0 && oPosOutletTable
										.getStationId() != AppGlobal.g_oFuncStation.get().getStationId()) {
									PosStation oLockedStation = new PosStation();
									oLockedStation.readById(oPosOutletTable.getStationId());
									
									String sTable = Integer.toString(iTableNo);
									showErrorDialogBox(AppGlobal.g_oLang.get()._("table")
											+ AppGlobal.g_oFuncOutlet.get().getTableNameWithTableNo(sTable,
											sTableExtension)[AppGlobal.g_oCurrentLangIndex.get() - 1]
											+ " " + AppGlobal.g_oLang.get()._("is_locked_by_station") + " "
											+ oLockedStation.getName(AppGlobal.g_oCurrentLangIndex.get()));
									bValidTable = false;
									break;
								}
							}
							else if(oPosOutletTable.isCleaningTable()){
								String sTable = Integer.toString(iTableNo);
								showErrorDialogBox(AppGlobal.g_oLang.get()._("table")
										+ AppGlobal.g_oFuncOutlet.get().getTableNameWithTableNo(sTable,
										sTableExtension)[AppGlobal.g_oCurrentLangIndex.get() - 1]
										+ " " + AppGlobal.g_oLang.get()._("is_cleaning"));
								bValidTable = false;
								break;
							}
						}
						
						if (!bValidTable)
							continue;
						
						FuncCheck oFuncCheck = new FuncCheck();
						if (this.lockAndLoadTargetTable(oFuncCheck, Integer.toString(iTableNo), sTableExtension,
								true) == true) {
							if (!oFuncCheck.isOldCheck())
								oFuncCheck.setCover(iGuest, true);
							// ask table section
							oFuncCheck.setSection(this.checkAndSetTableSectionBeforeNewTable(
									AppGlobal.g_oFuncOutlet.get().getOutletId(), oFuncCheck.getSectId(),
									Integer.toString(iTableNo), sTableExtension));
							// copy original custom check type
							oFuncCheck.setCustomType(iBaseCheckCustomType);
							// for tms interface testing
							if (oTmsConfig != null) {
								if (oFuncCheck.isCheckExtraInfoExistBySectionVariableAndIndex(
										PosCheckExtraInfo.SECTION_TMS, PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0))
									oFuncCheck.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK,
											PosCheckExtraInfo.SECTION_TMS, PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0,
											Integer.toString(oTmsConfig.getInterfaceId()));
								else
									oFuncCheck.addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK,
											PosCheckExtraInfo.SECTION_TMS, PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0,
											Integer.toString(oTmsConfig.getInterfaceId()));
							}
							oSelectedFuncCheckList.add(oFuncCheck);
						}
					}
					
					if (oSelectedFuncCheckList.size() < 2) {
						for (FuncCheck oFuncCheck : oSelectedFuncCheckList) {
							oFuncCheck.unlockTable(false, false);
						}
						showErrorDialogBox(AppGlobal.g_oLang.get()._("must_have_at_least_two_tables_for_split_table"));
						return;
					}
					
					String sOrderingMode = PosCheck.ORDERING_MODE_FINE_DINING;
					if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab))
						sOrderingMode = PosCheck.ORDERING_MODE_BAR_TAB;
					// Split Table
					FormSplitTable oFormSplitTable = new FormSplitTable(this, sOrderingMode, m_oPosCustomTypeList, sBaseCheckTableNo, sBaseCheckTableExt);
					oFormSplitTable.addListener(this);
					oFormSplitTable.init(oSelectedFuncCheckList);
					oFormSplitTable.show();
					
					// Change cover based on selected item group
					changeCoverByItem(0, oSelectedFuncCheckList, false);
					
					if (oFormSplitTable.isExit()) {
						for (FuncCheck oFuncCheck : oSelectedFuncCheckList) {
							oFuncCheck.unlockTable(false, false);
						}
					}
				}
			}
		}
	}
	
	private void splitCheckByOptions() {
		if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode)) {
			showAttentionDialogBox(AppGlobal.g_oLang.get()._("not_support_split_check_in_fast_food_mode"));
			return;
		}
		
		if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)) {
			showAttentionDialogBox(AppGlobal.g_oLang.get()._("not_support_split_check_in_self_order_kiosk_mode"));
			return;
		}
		
		// Check if it is a new check
		if (notAllowNewCheck())
			return;
		
		// Check there is new item exist
		if (m_oFuncCheck.hasNewItem(false)) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_split_check_that_have_unsend_item"));
			return;
		}
		
		// Check if the check has check discount
		if (m_oFuncCheck.hasCheckDiscount(true, false)) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_split_check_that_have_applied_check_discount") + System.lineSeparator()
					+ AppGlobal.g_oLang.get()._("please_void_the_check_discount_before_split_check"));
			return;
		}
		
		// Check if the check has coupon item
		if (m_oFuncCheck.hasCouponItem() || m_oFuncCheck.hasSVCCouponRedeemItem()) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("check_contains_coupon_item") + System.lineSeparator()
					+ AppGlobal.g_oLang.get()._("cannot_split_this_check"));
			return;
		}
		
		PosFunction oFunction = m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.split_check_by_options.name());
		String sTitle = oFunction.getName(AppGlobal.g_oCurrentLangIndex.get());
		
		ArrayList<String> oOptionList = new ArrayList<String>();
		oOptionList.add(AppGlobal.g_oLang.get()._("equal_quantity"));
		oOptionList.add(AppGlobal.g_oLang.get()._("specific_amount"));
		oOptionList.add(AppGlobal.g_oLang.get()._("specific_percentage"));
		
		FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
		oFormSelectionBox.initWithSingleSelection(sTitle, oOptionList, false);
		oFormSelectionBox.show();
		if (oFormSelectionBox.isUserCancel()) {
			return;
		} else {
			ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
			int iOption = oSelectionBoxResult.get(0);
			
			FormInputBox oFormInputBox = new FormInputBox(this);
			oFormInputBox.init();
			oFormInputBox.setTitle(sTitle);
			oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("split_to_how_many_parties") + "?");
			oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.NUMBER);
			oFormInputBox.show();
			
			String sParties = oFormInputBox.getInputValue();
			oFormInputBox = null;
			if (sParties == null)
				return;
			
			if (!checkValidIntegerValue(sParties))
				return;
			
			if (Integer.valueOf(sParties) < 2) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("must_be_more_than_one_party"));
				return;
			}
			
			int iNumberOfParties = Integer.valueOf(sParties);
			
			PosOutletTableList oPosOutletTableList = new PosOutletTableList();
			oPosOutletTableList.getActiveOutletTableListByTable(AppGlobal.g_oFuncOutlet.get().getOutletId(),
					Integer.parseInt(m_oFuncCheck.getTableNo()));
			
			boolean bAutoGenTable = false;
			List<String> oAvailableTableExtensionList = new ArrayList<String>();
			for (char alphabet = AppGlobal.TABLE_EXTENSION_START_LETTER; alphabet <= AppGlobal.TABLE_EXTENSION_END_LETTER; alphabet++) {
				boolean bTableOccupied = false;
				for (Entry<PosOutletTable, PosCheck> entry : oPosOutletTableList.getOutletTableList().entrySet()) {
					PosOutletTable oPosOutletTable = entry.getKey();
					if (oPosOutletTable.getTableExtension().equals(String.valueOf(alphabet))) {
						bTableOccupied = true;
						break;
					}
				}
				
				if (!bTableOccupied) {
					oAvailableTableExtensionList.add(String.valueOf(alphabet));
					
					if (oAvailableTableExtensionList.size() == iNumberOfParties) {
						bAutoGenTable = true;
						break;
					}
				}
			}
			
			String sSplitCheckOption = "";
			switch (iOption) {
				case 0:
					sSplitCheckOption = FormSplitCheckByOptions.SPLIT_CHECK_OPTION_EQUAL_SPLIT;
					break;
				case 1:
					sSplitCheckOption = FormSplitCheckByOptions.SPLIT_CHECK_OPTION_SPECIFIC_AMOUNT;
					break;
				case 2:
					sSplitCheckOption = FormSplitCheckByOptions.SPLIT_CHECK_OPTION_SPECIFIC_PERCENTAGE;
					break;
			}
			
			FormSplitCheckByOptions oFormSplitCheckByOptions = new FormSplitCheckByOptions(sSplitCheckOption, this);
			oFormSplitCheckByOptions.setTitle(sTitle + ": " + oOptionList.get(iOption));
			String sMessage = "";
			boolean bSetTimer = false;
			if (iOption == 1 && bAutoGenTable)
				sMessage = AppGlobal.g_oLang.get()._("enter_check_amount_will_be_split_to");
			else if (iOption == 2 && bAutoGenTable)
				sMessage = AppGlobal.g_oLang.get()._("enter_check_percentage_will_be_split_to");
			else{
				sMessage = AppGlobal.g_oLang.get()._("enter_table_no_will_be_split_to");
				bSetTimer = true;
			}
			
			oFormSplitCheckByOptions.setSplitTableInfo(m_oFuncCheck, iNumberOfParties, oAvailableTableExtensionList,
					bAutoGenTable, new ArrayList<Integer>(), bSetTimer);
			oFormSplitCheckByOptions.show();
			if (oFormSplitCheckByOptions.isConfirmSplit()) {
				// ask tms interface
				ArrayList<String> oVendors = new ArrayList<String>();
				oVendors.add(InfVendor.KEY_RESPAK);
				String sSelectionTitle = AppGlobal.g_oLang.get()._("please_select_the_tms_interface");
				PosInterfaceConfig oTmsConfig = this.getInterfaceConfig(InfInterface.TYPE_TMS, oVendors,
						sSelectionTitle, false);
				
				List<FuncCheck> oTargetCheckList = new ArrayList<FuncCheck>();
				List<BigDecimal> oSplitAmountList = new ArrayList<BigDecimal>();
				for (HashMap<String, Object> oTableInfo : oFormSplitCheckByOptions.getTableInfoList()) {
					String sTableNo = (String) oTableInfo.get(FormSplitCheckByOptions.TABLE_INFO_TABLE);
					String sTableExtension = (String) oTableInfo.get(FormSplitCheckByOptions.TABLE_INFO_TABLE_EXT);
					BigDecimal dSplitAmount = (BigDecimal) oTableInfo
							.get(FormSplitCheckByOptions.TABLE_INFO_SPLIT_AMOUNT);
					
					if (iOption == 0) {
						dSplitAmount = m_oFuncCheck.getCheckTotal().divide(new BigDecimal(iNumberOfParties), 4,
								RoundingMode.HALF_UP);
					} else if (iOption == 2) {
						dSplitAmount = dSplitAmount.divide(new BigDecimal("100"), 4, RoundingMode.HALF_UP);
						dSplitAmount = m_oFuncCheck.getCheckTotal().multiply(dSplitAmount).setScale(2,
								RoundingMode.HALF_UP);
					}
					
					FuncCheck oFuncCheck = new FuncCheck();
					if (this.lockAndLoadTargetTable(oFuncCheck, sTableNo, sTableExtension, true) == false)
						continue;
					
					// ask table section
					oFuncCheck.setSection(
							this.checkAndSetTableSectionBeforeNewTable(AppGlobal.g_oFuncOutlet.get().getOutletId(),
									oFuncCheck.getSectId(), sTableNo, sTableExtension));
					// copy custom check type
					oFuncCheck.setCustomType(m_oFuncCheck.getCustomTypeId());
					// for tms interface testing
					if (oTmsConfig != null) {
						if (oFuncCheck.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_TMS,
								PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0))
							oFuncCheck.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK,
									PosCheckExtraInfo.SECTION_TMS, PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0,
									Integer.toString(oTmsConfig.getInterfaceId()));
						else
							oFuncCheck.addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_TMS,
									PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0,
									Integer.toString(oTmsConfig.getInterfaceId()));
					}
					//Determine to add extra info for auto function or not, referencing support_for_split_check
					oFuncCheck.addExtraInfoForSplitCheckAutoFunction();
					oTargetCheckList.add(oFuncCheck);
					oSplitAmountList.add(dSplitAmount);
				}
				
				if (!m_oFuncCheck.splitCheckByOptions(oTargetCheckList, oSplitAmountList)) {
					showErrorDialogBox(m_oFuncCheck.getLastErrorMessage());
					return;
				}
				
				splitItemConfirmPrintSlip(oTargetCheckList);
				
				for (HashMap<String, Integer> oItemInfo : m_oFuncCheck.getSectionItemIndexForCurrentOrderedItem()) {
					int iPartySeq = oItemInfo.get("partySeq");
					int iSeatNo = oItemInfo.get("sectionId");
					int iItemIndex = oItemInfo.get("itemIndex");
					
					FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iPartySeq, iSeatNo, iItemIndex);
					this.updateBasketItemPrice(iSeatNo, iItemIndex, oFuncCheckItem);
					this.updateBasketItemQty(iSeatNo, iItemIndex, oFuncCheckItem.getCheckItem().getQty());
				}
				
				// Change cover based on selected item group
				changeCoverByItem(0, oTargetCheckList, false);
				
				for (FuncCheck oTargetCheck : oTargetCheckList) {
					oTargetCheck.unlockTable(false, false);
				}
			}
		}
	}
	
	private void splitItemToTargetCheck(List<HashMap<String, Integer>> oSelectedItems, FuncCheck oTargetFuncCheck, String sOrgItemIndex, HashMap<String, String> oFromItemInfo) {
		TreeMap<String, FuncCheckItem> oReverseSortSelectedItem = new TreeMap<String, FuncCheckItem>(
				Collections.reverseOrder());
		ArrayList<FuncCheckItem> oItemListForTargetTable = new ArrayList<FuncCheckItem>();
		ArrayList<HashMap<String, HashMap<String, String>>> oItemsInfo = new ArrayList<HashMap<String, HashMap<String, String>>>();
		
		// Set disallow for continuous print (original check + target check)
		// Get the continuous printing flag
		m_oFuncCheck.setAllowContinuousPrint(FuncCheck.NOT_ALLOW_CONTINUOUS_PRINT);
		oTargetFuncCheck.setAllowContinuousPrint(FuncCheck.NOT_ALLOW_CONTINUOUS_PRINT);
		
		for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
			int iSectionId = oSelectedItem.get("sectionId");
			int iItemIndex = oSelectedItem.get("itemIndex");
			
			FuncCheckItem oTargetItem = m_oFuncCheck.getCheckItem(iSectionId, iItemIndex);
			if(isMinimumChargeItem(oTargetItem))
				continue;
			
			String sSelectedKey = StringLib.IntToStringWithLeadingZero(iSectionId, 3) + "_"
					+ StringLib.IntToStringWithLeadingZero(iItemIndex, 6);
			// Put to the list for delete from original check
			oReverseSortSelectedItem.put(sSelectedKey, oTargetItem);
			
			// Put to the list for insert to target check
			oItemListForTargetTable.add(oTargetItem);
			
			// Child item
			for (FuncCheckItem oChildFuncCheckItem : oTargetItem.getChildItemList()) {
				int iChildSeatNo = oChildFuncCheckItem.getCheckItem().getSeatNo();
				int iChildItemIndex = 0;
				for (FuncCheckItem oChildFuncCheckItem2 : m_oFuncCheck.getItemList(iChildSeatNo)) {
					if (oChildFuncCheckItem == oChildFuncCheckItem2) {
						sSelectedKey = StringLib.IntToStringWithLeadingZero(iChildSeatNo, 3) + "_"
								+ StringLib.IntToStringWithLeadingZero(iChildItemIndex, 6);
						oReverseSortSelectedItem.put(sSelectedKey, oChildFuncCheckItem2);
						// Put to the list for insert to target check
						oItemListForTargetTable.add(oChildFuncCheckItem2);
						
						break;
					}
					iChildItemIndex++;
				}
			}
		}
		
		for (Entry<String, FuncCheckItem> entry : oReverseSortSelectedItem.entrySet()) {
			String split[] = entry.getKey().split("_");
			int iRemoveSectionId = Integer.parseInt(split[0]);
			int iRemoveItemIndex = Integer.parseInt(split[1]);
			
			// remove item from original table
			m_oFuncCheck.removeItemFromList(iRemoveSectionId, iRemoveItemIndex);
			m_oFrameOrderingBasket.removeAllChildItem(iRemoveSectionId, iRemoveItemIndex);
			m_oFrameOrderingBasket.removeAllModifier(iRemoveSectionId, iRemoveItemIndex);
			m_oFrameOrderingBasket.removeItem(iRemoveSectionId, iRemoveItemIndex);
			if (iRemoveSectionId > 0) {
				ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck
						.getItemList(iRemoveSectionId);
				
				if (oFuncCheckItemList == null || oFuncCheckItemList.isEmpty()) {
					m_oFrameOrderingBasket.setSectionVisible(iRemoveSectionId, false);
				}
			}
			this.calculateCheck();
		}
		
		// Add to target check
		List<String> oTargetCitmIds = new ArrayList<String>(); // List for
		// action slip
		for (FuncCheckItem oFuncCheckTargetItem : oItemListForTargetTable) {
			// add item to target table
			oTargetCitmIds.add(oFuncCheckTargetItem.getCheckItem().getCitmId());
			
			// Add item to original information
			HashMap<String, HashMap<String, String>> oItemInfo = new HashMap<String, HashMap<String, String>>();
			HashMap<String, String> oOriItemInfo = new HashMap<String, String>();
			
			if(m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_item_with_quantity.name()))
				oOriItemInfo.put("ItemQuantity", oFuncCheckTargetItem.getCheckItem().getQty().toString());
			else {
				oOriItemInfo.put("ItemOriginalQuantity", oFuncCheckTargetItem.getCheckItem().getQty().toString());
				oOriItemInfo.put("ItemQuantity", "0");
			}
			oOriItemInfo.put("ItemId", oFuncCheckTargetItem.getCheckItem().getCitmId());
			oOriItemInfo.put("CheckId", oFuncCheckTargetItem.getCheckItem().getCheckId());
			oOriItemInfo.put("ItemCode", oFuncCheckTargetItem.getCheckItem().getCode());
			oOriItemInfo.put("ItemName", oFuncCheckTargetItem.getCheckItem().getName(AppGlobal.g_oCurrentLangIndex.get()));
			for(int iIndex = 1 ; iIndex <= 5 ; iIndex++){
				oOriItemInfo.put("ItemNameL" + iIndex, oFuncCheckTargetItem.getCheckItem().getName(iIndex));
			}
			
			oItemInfo.put("SpliteOriItemInfo", oOriItemInfo);
			oItemsInfo.add(oItemInfo);
			
			if(oFromItemInfo != null) {
				oItemInfo.put("SpliteOriItemInfo", oFromItemInfo);
				oItemsInfo.add(oItemInfo);
			}
			
			int iSectionId = oFuncCheckTargetItem.getCheckItem().getSeatNo();
			int iCurrentItemCount = oTargetFuncCheck.getItemListCount(iSectionId);
			
			oTargetFuncCheck.addItemToItemList(iSectionId, iCurrentItemCount + 1, oFuncCheckTargetItem);
		}
		
		// Recalculate the check
		oTargetFuncCheck.calcCheck();
		
		// do split item to target check
		if (!m_oFuncCheck.splitItemToTargetCheck(oTargetFuncCheck, m_oFuncCheck.getTableNo(),
				m_oFuncCheck.getTableExtension(), oTargetCitmIds, oItemsInfo, sOrgItemIndex)) {
		}
	}
	
	private void splitItemConfirmPrintSlip(List<FuncCheck> oTargetCheckList) {
		if (oTargetCheckList.isEmpty())
			return;
		
		FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
				AppGlobal.g_oLang.get()._("no"), this);
		oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
		oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("want_to_print_all_split_checks_now") + "?");
		oFormConfirmBox.show();
		
		if (oFormConfirmBox.isOKClicked()) {
			for (FuncCheck oFuncCheck : oTargetCheckList) {
				String sMessage1 = AppGlobal.g_oLang.get()._("ready_to_print_new_created_check") + "?" + System.lineSeparator()
						+ AppGlobal.g_oLang.get()._("check_no") + ": " + oFuncCheck.getCheckPrefixNo() + System.lineSeparator()
						+ AppGlobal.g_oLang.get()._("table_no") + ": "
						+ oFuncCheck.getTableNoWithTableName()[AppGlobal.g_oCurrentLangIndex.get()];
				FormConfirmBox oFormConfirmBox1 = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
						AppGlobal.g_oLang.get()._("no"), this);
				oFormConfirmBox1.setTitle(AppGlobal.g_oLang.get()._("attention"));
				oFormConfirmBox1.setMessage(sMessage1);
				oFormConfirmBox1.show();
				
				if (oFormConfirmBox1.isOKClicked()) {
					HashMap<String, Integer> oCheckPrintFormatInfo = null;
					oCheckPrintFormatInfo = selectCheckPrintFormat(false, false, false);
					if (oCheckPrintFormatInfo.get("result") == 0)
						continue;
					
					int iChosenCheckPfmtId = oCheckPrintFormatInfo.get("pfmtId");
					
					HashMap<String, String> oSelectedPaytypeInfo = selectPaymentInterfacePaytype();
					if (oSelectedPaytypeInfo != null && !oSelectedPaytypeInfo.get("paytype").equals("0"))
						oFuncCheck.addExtraInfoForPaymentInterface(oSelectedPaytypeInfo);
					
					if (oFuncCheck.havePendingItems())
						showAttentionDialogBox(AppGlobal.g_oLang.get()._("cannot_print_check_with_pending_items"));
					else {
						if (!oFuncCheck.printCheck(false, false, AppGlobal.g_oFuncUser.get().getUserId(),
								AppGlobal.g_oFuncStation.get().getStationId(),
								AppGlobal.g_oFuncStation.get().getCheckPrtqId(), iChosenCheckPfmtId, false,
								AppGlobal.g_oFuncOutlet.get().getOutletNameByIndex(AppGlobal.g_oCurrentLangIndex.get()),
								false, 0, "", true, false, false))
							return;
// Save Check(Print Check for split by seat, split by options)
						else {
							// surveillance event: SaveCheck
							HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
							oSurveillanceEventInfo.put("checkNum", oFuncCheck.getCheckPrefixNo());
							this.doSurveillanceEvent(FuncSurveillance.SURVEILLANCE_TYPE_SAVE_CHECK, oSurveillanceEventInfo);
							/*
							List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal
									.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);
							if (!oInterfaceConfigList.isEmpty()) {
								for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
									if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
										FuncSurveillance oFuncSurveillance = AppGlobal.getSurveillanceInfoFromList(
												AppGlobal.g_oFuncStation.get().getStationId(), oPosInterfaceConfig);
										HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
										oSurveillanceEventInfo.put("eventType",
												FuncSurveillance.SURVEILLANCE_TYPE_SAVE_CHECK);
										oSurveillanceEventInfo.put("checkNum", oFuncCheck.getCheckPrefixNo());
										oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo);
									}
								}
							}
							*/
						}
					}
				}
			}
			
			String sMessage1 = AppGlobal.g_oLang.get()._("ready_to_print_current_split_check") + "?" + System.lineSeparator()
					+ AppGlobal.g_oLang.get()._("check_no") + ": " + m_oFuncCheck.getCheckPrefixNo() + System.lineSeparator()
					+ AppGlobal.g_oLang.get()._("table_no") + ": "
					+ m_oFuncCheck.getTableName()[AppGlobal.g_oCurrentLangIndex.get() - 1];
			FormConfirmBox oFormConfirmBox1 = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
					AppGlobal.g_oLang.get()._("no"), this);
			oFormConfirmBox1.setTitle(AppGlobal.g_oLang.get()._("attention"));
			oFormConfirmBox1.setMessage(sMessage1);
			oFormConfirmBox1.show();
			
			if (oFormConfirmBox1.isOKClicked()) {
				HashMap<String, Integer> oCheckPrintFormatInfo = null;
				oCheckPrintFormatInfo = selectCheckPrintFormat(false, false, false);
				if (oCheckPrintFormatInfo.get("result") > 0) {
					int iChosenCheckPfmtId = oCheckPrintFormatInfo.get("pfmtId");
					
					if (m_oFuncCheck.havePendingItems())
						showAttentionDialogBox(AppGlobal.g_oLang.get()._("cannot_print_check_with_pending_items"));
					else {
						if (!m_oFuncCheck.printCheck(false, true, AppGlobal.g_oFuncUser.get().getUserId(),
								AppGlobal.g_oFuncStation.get().getStationId(),
								AppGlobal.g_oFuncStation.get().getCheckPrtqId(), iChosenCheckPfmtId, false,
								AppGlobal.g_oFuncOutlet.get().getOutletNameByIndex(AppGlobal.g_oCurrentLangIndex.get()),
								false, 0, "", true, false, false))
							return;
//Save Check(Print Check for split by seat, split by options)
						else {
							HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
							oSurveillanceEventInfo.put("checkNo", m_oFuncCheck.getCheckPrefixNo());
							this.doSurveillanceEvent(FuncSurveillance.SURVEILLANCE_TYPE_SAVE_CHECK, oSurveillanceEventInfo);
						}
					}
				}
			}
		}
	}
	
	// Adjust payments
	// Parameter: iMode ~ 1: start mode that validate and show the cash
	// Return value: boolean
	private boolean adjustPayments(HashMap<String, String> oFunctionParam) {
		int iVoidCodeId = 0;
		
		if(AppGlobal.g_oFuncStation.get().getBreakdownInclusiveScTaxAtFinalSettle()) {
			// There is Octopus payment
			showErrorDialogBox(AppGlobal.g_oLang.get()._("not_allow_to_do_adjust_payment_as_check_figures_are_breakdowned"));
			return false;
		}
		
		FuncCheck oFuncCheck = askCheckNumberAndLoadCheck(oFunctionParam, AppGlobal.FUNC_LIST.adjust_payments.name());
		if (oFuncCheck == null)
			return false;
		
		if (!checkIsFullPaid(oFuncCheck))
			return false;
		
		// Check if there is Octopus payment
		// If yes, cannot adjust payments
		if (oFuncCheck.hasOctopusPayment()) {
			// There is Octopus payment
			showErrorDialogBox(AppGlobal.g_oLang.get()._("octopus_payment_cannot_be_changed"));
			return false;
		}
		
		// Check if there is Rewrite Card payment
		// If yes, cannot adjust payments
		if (oFuncCheck.hasRewriteCardPayment()) {
			// There is Rewrite Card payment
			showErrorDialogBox(AppGlobal.g_oLang.get()._("rewrite_card_payment_cannot_be_changed"));
			return false;
		}
		
		// Check whether payment records exist
		if (oFuncCheck.getCheckTotal().compareTo(oFuncCheck.getPaymentRecordPayTotal()) != 0) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("check_is_not_saved_completely") + ", "
					+ AppGlobal.g_oLang.get()._("please_try_again_later"));
			return false;
		}
		
		// Check whether check is used by others
		if (oFuncCheck.isInUsedByOthers()) {
			showErrorDialogBox(oFuncCheck.getLastErrorMessage());
			return false;
		}
		
		if(!oFuncCheck.checkNegativeGalaxyPayment(-1)) {
			showErrorDialogBox(oFuncCheck.getLastErrorMessage());
			return false;
		}
		
		// Lock the check
		if (oFuncCheck.lockCheck() == false)
			return false;
		
		// Show payment details and ask confirmation
		FormPaymentDetail oFormPaymentDetail = new FormPaymentDetail(this);
		oFormPaymentDetail.initWithFuncCheck(oFuncCheck, null, AppGlobal.FUNC_LIST.adjust_payments.name());
		oFormPaymentDetail.setTitle(AppGlobal.g_oLang.get()._("adjust_payments"));
		oFormPaymentDetail.show();
		
		if (oFormPaymentDetail.confirmRelease() == false) {
			oFuncCheck.unlockCheck();
			return false;
		}
		
		// Ask for void code
		PosVoidReason oVoidReason;
		oVoidReason = this.callVoidReasonLookup(AppGlobal.g_oLang.get()._("void_reason"),
				AppGlobal.g_oLang.get()._("please_select_the_adjust_payment_reason"), PosVoidReason.TYPE_VOID_PAYMENT);
		if (oVoidReason == null) {
			oFuncCheck.unlockCheck();
			return false;
		}
		iVoidCodeId = oVoidReason.getVdrsId();
		
		// set the previous pay total
		oFuncCheck.setLastPayAndTipsTotal();
		
		// Set all active payments to delete status first and update database
		// afterware
		oFuncCheck.deleAllOldPaymentFromCheck(iVoidCodeId);
		
		// generate the item snap shot before starting cashier mode
		oFuncCheck.generateItemSnapShotList(true);
		
		// generate the payment snap shot
		oFuncCheck.setPaymentSnapShotList(oFuncCheck.getCheckPaymentList());
		
		m_oFuncCheck = oFuncCheck;
		
		//get the rounding amount from extra info and roll back the check round amount
		String sPaymentRounding = "";
		if(m_oFuncCheck.isCheckExtraInfoExistBySectionVariableAndIndex("", PosCheckExtraInfo.VARIABLE_PAYMENT_ROUNDING, 0))
			sPaymentRounding = m_oFuncCheck.getCheckExtraInfoValueListBySectionVariable("", PosCheckExtraInfo.VARIABLE_PAYMENT_ROUNDING);
		if(!sPaymentRounding.isEmpty()){
			BigDecimal dPaymentRounding = new BigDecimal(sPaymentRounding);
			m_oFuncCheck.setRoundAmount(m_oFuncCheck.getRoundAmount().subtract(AppGlobal.g_oFuncOutlet.get().roundCheckAmountToBigDecimal(dPaymentRounding)));
			m_oFuncCheck.setCheckTotal(AppGlobal.g_oFuncOutlet.get().roundCheckAmountToBigDecimal(m_oFuncCheck.getCheckTotal().subtract(dPaymentRounding)));
		}
		
		// roll back check sc/tax and discount + revenue payment
		for (PosCheckPayment oCheckPayment : m_oFuncCheck.getCheckPaymentList()) {
			if(oCheckPayment.getNonRevenue().equals(PosCheck.NON_REVENUE_PAYMENT) && !m_oFuncCheck.getNonRevenue().equals(PosCheck.NON_REVENUE_ADVANCE_ORDER))
				m_oFuncCheck.setNonRevenue(PosCheck.NON_REVENUE_PAYMENT, false);
			rollbackTaxAndSCForAdjustPayment(oCheckPayment, oVoidReason);
		}
		
		// generate the item snap shot before starting cashier mode
		m_oFuncCheck.generateItemSnapShotList(false);
		
		// Open cashier screen
		if (!startCashierMode(true)) {
			m_oFuncCheck.unlockCheck();
			return false;
		}
		
		return true;
	}
	
	// Toggle item price level for membership interface
	private void toggleItemPriceLevelForMembership(FuncCheckItem oFuncCheckItem){
		int iTargetPriceLevel = -1;
		// Only toggle if member of 2700 is attached
		String sInterfaceId = m_oFuncCheck.getCheckExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0);
		if (sInterfaceId != null && !sInterfaceId.isEmpty()){
			List<PosInterfaceConfig> oPosInterfaceConfigs = AppGlobal.g_oPosInterfaceConfigList.get().getInterfaceConfigListByInterfaceType(InfInterface.TYPE_MEMBERSHIP_INTERFACE);
			for(PosInterfaceConfig oPosInterfaceConfig: oPosInterfaceConfigs) {
				if(oPosInterfaceConfig.getInterfaceId() == Integer.valueOf(sInterfaceId).intValue() && oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_2700)){
					String sAccountNumber = m_oFuncCheck.getCheckExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_ACCOUNT_NUMBER, 0);
					if (sAccountNumber != null && !sAccountNumber.isEmpty()){
						if(!oPosInterfaceConfig.getInterfaceConfig().isNull("set_member_setup")
								&&!oPosInterfaceConfig.getInterfaceConfig().optJSONObject("set_member_setup").optJSONObject("params").optJSONObject("price_level").optString("value").isEmpty())
							iTargetPriceLevel = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("set_member_setup").optJSONObject("params").optJSONObject("price_level").optInt("value", -1);
						if (iTargetPriceLevel == -1 || iTargetPriceLevel == 0)
							return;
						break;
					}
					return;
				}
				return;
			}
		}else
			return;
		
		//check need to do price level override
		if(oFuncCheckItem.getCheckItem().getPriceLevel() != iTargetPriceLevel) {
			//no need to change price level override if item is open price item
			if(oFuncCheckItem.isOpenPrice())
				return;
			
			oFuncCheckItem.changePriceLevel(iTargetPriceLevel, false);
			
			//for child item
			if(oFuncCheckItem.hasChildItem()) {
				for(FuncCheckItem oChildCheckItem:oFuncCheckItem.getChildItemList()) {
					oChildCheckItem.changePriceLevel(iTargetPriceLevel, false);
					
					//for child modifier item
					if(oChildCheckItem.hasModifier()) {
						for(FuncCheckItem oChildModifierCheckItem:oChildCheckItem.getModifierList()){
							oChildModifierCheckItem.changePriceLevel(iTargetPriceLevel, false);
						}
					}
				}
			}
			
			//for modifier
			if(oFuncCheckItem.hasModifier()) {
				for(FuncCheckItem oModifierCheckItem:oFuncCheckItem.getModifierList())
					oModifierCheckItem.changePriceLevel(iTargetPriceLevel, false);
			}
		}
	}
	
	// Call item void reason lookup
	private PosPaidIoReason callPosPaidIoReasonLookup(String sTitleName, String sDesc, String sPaidType) {
		if (m_oPosPaidIoReasonList == null) {
			m_oPosPaidIoReasonList = new PosPaidIoReasonList();
			m_oPosPaidIoReasonList.readAll();
		}
		
		List<HashMap<String, Object>> oLookupArray = new ArrayList<HashMap<String, Object>>();
		HashMap<String, Object> oLookupData = new HashMap<String, Object>();
		List<FuncLookupButtonInfo> oContentLookupList = new ArrayList<FuncLookupButtonInfo>();
		PosPaidIoReason oSelectedPosPaidIoReason = null;
		int iReasonId = 0;
		
		// form the lookup data list
		ArrayList<PosPaidIoReason> oPosPaidIoReasonList = m_oPosPaidIoReasonList.getPaidIoReasonListByType(sPaidType);
		if (oPosPaidIoReasonList.size() == 1) {
			// Only 1 reason, return directly
			PosPaidIoReason oPosPaidIoReason = oPosPaidIoReasonList.get(0);
			return oPosPaidIoReason;
		}
		
		for (PosPaidIoReason oPosPaidIoReason : oPosPaidIoReasonList) {
			FuncLookupButtonInfo oLookupButtonInfo = new FuncLookupButtonInfo();
			String[] sNameArray = new String[AppGlobal.LANGUAGE_COUNT];
			for (int i = 0; i < AppGlobal.LANGUAGE_COUNT; i++) {
				int iBilingualLangIndex = AppGlobal.g_oFuncOutlet.get().getBilingualLangIndexByeLangIndex(i + 1);
				sNameArray[i] = oPosPaidIoReason.getBilingualName(i + 1, iBilingualLangIndex);
			}
			oLookupButtonInfo.setName(sNameArray);
			oLookupButtonInfo.setType(PosDisplayPanelLookup.TYPE_HOT_ITEM);
			oLookupButtonInfo.setId(oPosPaidIoReason.getPiorId());
			oLookupButtonInfo.setSeq(oPosPaidIoReason.getSeq());
			oContentLookupList.add(oLookupButtonInfo);
		}
		
		oLookupData.put(FormCommonLookup.COMMON_LOOKUP_NAME, AppGlobal.g_oLang.get()._("reasons"));
		oLookupData.put(FormCommonLookup.COMMON_LOOKUP_DATA_LIST, oContentLookupList);
		oLookupArray.add(oLookupData);
		
		FormCommonLookup oFormCommonLookup = new FormCommonLookup(this);
		oFormCommonLookup.setLabelTitleBar(sTitleName);
		oFormCommonLookup.setLabelDescBar(sDesc);
		oFormCommonLookup.setSingleSelection(true);
		oFormCommonLookup.createTabsAndLookupButtons(oLookupArray);
		oFormCommonLookup.show();
		
		if (oFormCommonLookup.getSelectedItems().size() > 0) {
			List<JSONObject> oSelectedPosPaidIoReasonList = oFormCommonLookup.getSelectedItems();
			for (JSONObject oPosPaidIoReasonCode : oSelectedPosPaidIoReasonList) {
				iReasonId = oPosPaidIoReasonCode.optInt(FormCommonLookup.SELECTED_ITEM_ID);
			}
		}
		
		for (PosPaidIoReason oPosPaidIoReason : oPosPaidIoReasonList) {
			if (oPosPaidIoReason.getPiorId() == iReasonId) {
				oSelectedPosPaidIoReason = oPosPaidIoReason;
				break;
			}
		}
		return oSelectedPosPaidIoReason;
	}
	
	public void paidInOut(String sTitle, String sType) {
		String sDesc, sFuncKey, sResultTitle;
		if (sType.equals(PosPaidIoReason.TYPE_PAID_IN)) {
			sDesc = AppGlobal.g_oLang.get()._("please_select_the_paid_in_reason");
			sFuncKey = AppGlobal.FUNC_LIST.paid_in.name();
			sResultTitle = AppGlobal.g_oLang.get()._("paid_in_is_completed");
		} else if(sType.equals(PosPaidIoReason.TYPE_DROP)){
			sDesc = AppGlobal.g_oLang.get()._("please_select_the_drop_reason");
			sFuncKey = AppGlobal.FUNC_LIST.drop.name();
			sResultTitle = AppGlobal.g_oLang.get()._("drop_is_completed");
		} else {
			sDesc = AppGlobal.g_oLang.get()._("please_select_the_paid_out_reason");
			sFuncKey = AppGlobal.FUNC_LIST.paid_out.name();
			sResultTitle = AppGlobal.g_oLang.get()._("paid_out_is_completed");
		}
		
		// Ask Paid In/Out Reason
		PosPaidIoReason oPosPaidIoReason = this.callPosPaidIoReasonLookup(sTitle, sDesc, sType);
		if (oPosPaidIoReason == null)
			return;
		
		// Ask paid in amount
		BigDecimal dAmount = null;
		while (true) {
			// Ask discount value again
			FormInputBox oFormInputBox = new FormInputBox(this);
			oFormInputBox.init();
			oFormInputBox.setTitle(sTitle + " " + AppGlobal.g_oLang.get()._("amount"));
			oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("please_input_amount") + ":");
			oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DECIMAL);
			oFormInputBox.show();
			
			String sAmount = oFormInputBox.getInputValue();
			
			if (sAmount == null)
				break;
			
			// Error: No number input
			try {
				Double.valueOf(sAmount);
			} catch (NumberFormatException e) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("invalid_input"));
				continue;
			}
			
			// Error: Cannot input zero
			dAmount = new BigDecimal(oFormInputBox.getInputValue());
			if (dAmount.compareTo(BigDecimal.ZERO) == 0) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_input_zero_amount"));
				continue;
			}
			
			break;
		}
		
		// User click "Cancel" in ask amount window, function abort
		// Check 0 value again because user may input 0 value then input number
		// and press "Cancel" button
		if (dAmount == null || dAmount.compareTo(BigDecimal.ZERO) == 0)
			return;
		
		// Ask remark
		FormInputBox oFormInputBox = new FormInputBox(this);
		oFormInputBox.init();
		oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DEFAULT);
		oFormInputBox.showKeyboard();
		oFormInputBox.setTitle(sTitle + " " + AppGlobal.g_oLang.get()._("remark"));
		oFormInputBox.setMessage(
				AppGlobal.g_oLang.get()._("please_input_the_remark") + " (" + AppGlobal.g_oLang.get()._("if_any") + "):"
						+ System.lineSeparator() + "(" + AppGlobal.g_oLang.get()._("press_enter_to_skip") + ")");
		oFormInputBox.show();
		
		String sRemark = oFormInputBox.getInputValue();
		if (sRemark == null)
			return;
		
		String sMsg = AppGlobal.g_oLang.get()._("reason") + ": "
				+ oPosPaidIoReason.getName(AppGlobal.g_oCurrentLangIndex.get()) + System.lineSeparator()
				+ AppGlobal.g_oLang.get()._("amount") + ": " + dAmount.toPlainString();
		if (!sRemark.isEmpty())
			sMsg += System.lineSeparator() + AppGlobal.g_oLang.get()._("remark") + ": " + sRemark;
		
		FormConfirmBox oFormConfirmBox1 = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
				AppGlobal.g_oLang.get()._("no"), this);
		oFormConfirmBox1.setTitle(AppGlobal.g_oLang.get()._("confirmation"));
		oFormConfirmBox1.setMessage(sMsg + System.lineSeparator() + AppGlobal.g_oLang.get()._("confirm_to_continue")+ " ?");
		oFormConfirmBox1.show();
		
		if (!oFormConfirmBox1.isOKClicked())
			// Cancel by user
			return;
		
		// Save Paid In Log
		DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		DateTime oCurrentTime = AppGlobal.getCurrentTime(false);
		PosPaidIoTran oPaidInOutTran = new PosPaidIoTran();
		oPaidInOutTran.setBdayId(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId());
		oPaidInOutTran.setBperId(AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId());
		oPaidInOutTran.setShopId(AppGlobal.g_oFuncOutlet.get().getShopId());
		oPaidInOutTran.setOletId(AppGlobal.g_oFuncOutlet.get().getOutletId());
		oPaidInOutTran.setType(oPosPaidIoReason.getType());
		oPaidInOutTran.setPiorId(oPosPaidIoReason.getPiorId());
		for (int i = 1; i <= 5; i++) {
			oPaidInOutTran.setName(i, oPosPaidIoReason.getName(i));
			oPaidInOutTran.setShortName(i, oPosPaidIoReason.getShortName(i));
		}
		oPaidInOutTran.setPiogId(oPosPaidIoReason.getPiogId());
		oPaidInOutTran.setPaymId(AppGlobal.g_oFuncOutlet.get().getPaidInOutPaymId());
		oPaidInOutTran.setRemark(sRemark);
		oPaidInOutTran.setTotal(dAmount);
		oPaidInOutTran.setUserId(AppGlobal.g_oFuncUser.get().getUserId());
		oPaidInOutTran.setStatId(AppGlobal.g_oFuncStation.get().getStationId());
		oPaidInOutTran.setActionTime(formatter.print(AppGlobal.convertTimeToUTC(oCurrentTime)));
		oPaidInOutTran.setActionLocTime(oCurrentTime);
		oPaidInOutTran.addUpdate(false);
		
		// Add log to action log list
		AppGlobal.g_oActionLog.get().addActionLog(sFuncKey, PosActionLog.ACTION_RESULT_SUCCESS, "",
				AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
				AppGlobal.g_oFuncOutlet.get().getOutletId(), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
				AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "", "");
		// handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);

/**CashIn & CashOut [paidInOut] */
		if (!sType.equals(PosPaidIoReason.TYPE_DROP)) {
			// surveillance eConnect terminal event: CashIn & CashOut
			HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
			String sEventType = (sType.equals(PosPaidIoReason.TYPE_PAID_IN)) ? FuncSurveillance.SURVEILLANCE_TYPE_CASH_IN : FuncSurveillance.SURVEILLANCE_TYPE_CASH_OUT;
			oSurveillanceEventInfo.put("amount", dAmount.toPlainString());
			this.doSurveillanceEvent(sEventType, oSurveillanceEventInfo);
		}
		
		// Paid In/Out success
		showDialogBox(sResultTitle, sMsg);
	}
	
	private boolean performAutoFunctionForSvcEnquiry(int iResvInterfaceId, String sResvMemberNumber, String sResvLastName) {
		boolean bSvcEnquiry = false;
		if (iResvInterfaceId == 0)
			return bSvcEnquiry;
		
		List<PosInterfaceConfig> oMemberShipInterfaceConfigList = new ArrayList<PosInterfaceConfig>();
		oMemberShipInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_MEMBERSHIP_INTERFACE);
		
		for (PosInterfaceConfig oPosInterfaceConfig : oMemberShipInterfaceConfigList) {
			if (!oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_GOLDEN_CIRCLE))
				continue;
			if (oPosInterfaceConfig.getInterfaceId() != iResvInterfaceId)
				continue;
			
			m_oRemainAutoFunctions.clear();
			ArrayList<JSONObject> oTmpArrayList = new ArrayList<JSONObject>();
			JSONObject oJsonObject = new JSONObject();
			try {
				JSONObject oParamsJsonObject = new JSONObject();
				oParamsJsonObject.put("member_number", sResvMemberNumber);
				oParamsJsonObject.put("member_surname", sResvLastName);
				oParamsJsonObject.put("interface_id", String.valueOf(oPosInterfaceConfig.getInterfaceId()));
				oJsonObject.put("fail_handling", FormMain.NEW_CHECK_AUTO_FUNCTIONS_CONTINUE);
				oJsonObject.put("function_key", AppGlobal.FUNC_LIST.svc_enquiry.name());
				oJsonObject.put("seq", "1");
				oJsonObject.put("params", oParamsJsonObject);
			} catch (JSONException e) {
				AppGlobal.stack2Log(e);
			}
			oTmpArrayList.add(oJsonObject);
			m_oRemainAutoFunctions.offer(oTmpArrayList);
			performAutoFunction();
			bSvcEnquiry = true;
			break;
		}
		
		return bSvcEnquiry;
	}
	
	// panel override
	public void panelOverride(int iTableNo, String sTableExt, boolean bReloadFloorPlanFunctionPanel) {
		int iTargetOverrideId = AppGlobal.g_oFuncOverrideList.get(AppGlobal.g_oFuncOutlet.get().getOutletId())
				.panelOverride(iTableNo, sTableExt, 0);
		if (iTargetOverrideId != 0 && iTargetOverrideId != m_oPosDisplayPanel.getDpanId()) {
			loadDisplayPanelAndDisplayStyle(iTargetOverrideId, AppGlobal.g_oFuncOutlet.get().getOutletId());
			
			// Create processing box
			m_oFormProcessBox = new FormProcessBox(this);
			m_oFormProcessBox.setTitle(AppGlobal.g_oLang.get()._("loading") + "...");
			m_oFormProcessBox.setMessage(AppGlobal.g_oLang.get()._("changing_panel"));
			m_oFormProcessBox.showWithoutRemoveUI();
			
			// reload ordering panel
			m_oFrameOrderingPanel.removeAllPanelPage();
			loadOrderingPanel();
			
			// reload ordering function panel
			m_oFrameFuncPanel2.removeAllPanelPage();
			loadFunctionPanel(2, PosDisplayPanelZone.KEY_ORDERING_FUNCTION);
			
			// reload cashier panel
			m_oFrameCashierPanel.removeAllPanelPage();
			loadCashierPanel(PosDisplayPanelZone.KEY_CASHIER);
			
			if (bReloadFloorPlanFunctionPanel)
				m_oFrameCheckDetail.setVisible(false);
			
			// reload floor plan function panel
			m_oFrameFloorPlanFunctionPanel.removeAllPanelPage();
			loadFloorPlanFunctionPanel();
			
			// Start updat menu item timer
			m_oFrameOrderingPanel.setUpdateMenuItemTimer(true);
			
			m_oFormProcessBox.closeShowWithoutRemoveUI();
			
			// Update Toggle Print Receipt Button Name in each panel
			this.updateTogglePrintReceiptButtonList(m_iTogglePrintReceiptFcnId);
			this.updateTogglePrintReceiptButtonName(m_sCurrentPrintModeButtonName);
		}
	}
	
	// Turn on/off ordering timeout checking
	public void setOrderingTimeoutChecking(boolean bStart) {
		if (m_iOrderingTimer == 0 || AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode))
			return;
		
		if (bStart) {
			m_oFrameOrderingPanel.setCheckOrderingTimeoutTimer(true);
			m_dtStartOrderTime = AppGlobal.getCurrentTime(false);
		} else {
			m_oFrameOrderingPanel.setCheckOrderingTimeoutTimer(false);
			m_dtStartOrderTime = null;
		}
	}
	
	// Check ordering timeout
	public boolean isOrderingTimeout() {
		boolean bTimeout = false;
		
		if (m_iOrderingTimer == 0)
			return false;
		
		if (m_dtStartOrderTime != null) {
			if (((AppGlobal.getCurrentTime(false).getMillis() - m_dtStartOrderTime.getMillis())) > m_iOrderingTimer) {
				bTimeout = true;
			} else {
				setOrderingTimeoutChecking(true);
			}
		}
		
		return bTimeout;
	}
	
	// Turn on/off cashier timeout checking
	public void setCashierTimeoutChecking(boolean bStart) {
		if (m_iCashierTimer == 0 || AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode))
			return;
		
		if (bStart) {
			m_oFrameOrderingPanel.setCheckCashierTimeoutTimer(true);
			m_dtStartCashierTime = AppGlobal.getCurrentTime(false);
		} else {
			m_oFrameOrderingPanel.setCheckCashierTimeoutTimer(false);
			m_dtStartCashierTime = null;
		}
	}
	
	// Check cashier timeout
	public boolean isCashierTimeout() {
		boolean bTimeout = false;
		
		if (m_iCashierTimer == 0)
			return false;
		
		if (m_dtStartCashierTime != null) {
			if (((AppGlobal.getCurrentTime(false).getMillis() - m_dtStartCashierTime.getMillis())) > m_iCashierTimer) {
				bTimeout = true;
			} else {
				setCashierTimeoutChecking(true);
			}
		}
		
		return bTimeout;
	}
	
	// Show Table Message Reminder if any
	public void showTableMessageReminder(String sPromptOption) {
		if (!m_oFuncCheck.isOldCheck())
			return;
		
		if (m_oPosTableMessageList == null) {
			m_oPosTableMessageList = new PosTableMessageList();
			m_oPosTableMessageList.readAll();
		}
		
		for (PosCheckExtraInfo oPosCheckExtraInfo : m_oFuncCheck.getCheckExtraInfoList()) {
			// For table message only
			if (!oPosCheckExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_TABLE_MESSAGE))
				continue;
			
			int iMessageId = -1;
			String sPromptType = "";
			try {
				JSONObject oJSONValues = new JSONObject(oPosCheckExtraInfo.getValue());
				iMessageId = Integer.parseInt(oJSONValues.get("message_id").toString());
				sPromptType = oJSONValues.getString("prompt_type");
			} catch (JSONException jsone) {
				jsone.printStackTrace();
				continue;
			}
			
			if (iMessageId == -1 || sPromptType.isEmpty())
				continue;
			
			if (!sPromptType.equals(TABLE_MESSAGE_PROMPT_ALL) && !sPromptType.equals(sPromptOption))
				continue;
			
			if (!m_oPosTableMessageList.getPosTableMessageList().containsKey(iMessageId))
				continue;
			
			PosTableMessage oPosTableMessage = m_oPosTableMessageList.getPosTableMessageList().get(iMessageId);
			showDialogBox(AppGlobal.g_oLang.get()._("table_message"), oPosTableMessage.getName(AppGlobal.g_oCurrentLangIndex.get()));
		}
		
	}
	
	private void changeOrderedItemPriceLevel(Boolean bFirstStep, List<HashMap<String, Integer>> oSelectedItems) {
		try {
			// Ask delete new or old item (for the first step)
			if (bFirstStep) {
				// Check if price level is defined or not
				if (m_oMenuPriceLevelList.getMenuPriceLevelList().isEmpty()) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("missing_price_level_setting"));
					return;
				}
				
				// Check if check discount is applied or not
				if (m_oFuncCheck.hasCheckDiscount(true, false)) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_apply_on_check_contains_check_discount"));
					return;
				}
				
				HashMap<String, String> oFuncParam = new HashMap<String, String>();
				oFuncParam.put("dummy", "");
				fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.change_ordered_item_price_level.name()), "", -1, -1, false, oFuncParam);
				return;
			}
			
			if (oSelectedItems.isEmpty()) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("no_available_items"));
				return;
			}
			
			// Select the price level
			int iTargetPriceLevel = 0;
			
			ArrayList<String> oOptionList = new ArrayList<String>();
			for (Entry<Integer, MenuPriceLevel> entry : m_oMenuPriceLevelList.getMenuPriceLevelList().entrySet()) {
				oOptionList.add(entry.getValue().getName(AppGlobal.g_oCurrentLangIndex.get()));
			}
			
			FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
			oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select_the_price_level"),
					oOptionList, false);
			oFormSelectionBox.show();
			if (oFormSelectionBox.isUserCancel()) {
				return;
			} else {
				ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
				MenuPriceLevel oMenuPriceLevel = (MenuPriceLevel) m_oMenuPriceLevelList.getMenuPriceLevelList().values()
						.toArray()[oSelectionBoxResult.get(0)];
				iTargetPriceLevel = oMenuPriceLevel.getLevel();
			}
			for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
				FuncCheckItem oSelectedFuncCheckItem = m_oFuncCheck.getCheckItem(oSelectedItem.get("partySeq"),
						oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
				oSelectedItem.put("priceLevel", oSelectedFuncCheckItem.getCheckItem().getPriceLevel());
			}
			// Perform change item price
			if (m_oFuncCheck.changeOrderedItemPriceLevel(oSelectedItems, iTargetPriceLevel, true)) {
				// Update screen
				this.calculateCheck();
				if (isRollbackNeededForCheckLimit(m_oFuncCheck, BigDecimal.ZERO)) {
					m_oFuncCheck.rollBackChangeOrderedItemPriceLevel(oSelectedItems);
					this.calculateCheck();
					return;
				}
				// Update basket
				for (HashMap<String, Integer> oItemInfo : m_oFuncCheck.getSectionItemIndexForCurrentOrderedItem()) {
					int iPartySeq = oItemInfo.get("partySeq");
					int iSeatNo = oItemInfo.get("sectionId");
					int iItemIndex = oItemInfo.get("itemIndex");
					
					FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iPartySeq, iSeatNo, iItemIndex);
					this.updateBasketItemPrice(iSeatNo, iItemIndex, oFuncCheckItem);
					this.updateBasketItemQty(iSeatNo, iItemIndex, oFuncCheckItem.getCheckItem().getQty());
				}
				
				// Update database for old check
				if (m_oFuncCheck.isOldCheck()) {
					// Set disallow for continuous print on old check old item)
					// Get the continuous printing flag
					// Check if old item is modified
					for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
						FuncCheckItem oSelectedFuncCheckItem = m_oFuncCheck.getCheckItem(oSelectedItem.get("partySeq"),
								oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
						if (oSelectedFuncCheckItem.isOldItem()){
							m_oFuncCheck.setAllowContinuousPrint(FuncCheck.NOT_ALLOW_CONTINUOUS_PRINT);
							break;
						}
					}
					
					// Update old item price
					if (!m_oFuncCheck.updateCheck(false, true, PosCheckItem.SEND_MODE_OLD_ITEM, 0, false, 0, 0, 0, "",
							false, false, false, false, 0, 0, false, false).equals(PosCheck.API_RESULT_SUCCESS))
						return;
				}
			}
		} catch (Exception e) {
			AppGlobal.stack2Log(e);
		}
	}
	
	private boolean launchAutoStation(int iOutletId, boolean bStopBeforeStart, boolean bShowUI) {
		// Not allow to run if station role is standalone
		if (AppGlobal.g_oFuncSmartStation.isStandaloneRole()) {
			if (bShowUI) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("not_allow_to_run_in_standalone_mode"));
			}
			
			return false;
		}
		
		// Retrieve the auto station for this outlet
		FuncStation oFuncStation = new FuncStation();
		if (!oFuncStation.loadFirstAutoStation(iOutletId)) {
			// No station
			if (bShowUI) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("no_such_station"));
			}
			
			return false;
		}
		
		String sUDID = oFuncStation.getAddress();
		
		if (!AppGlobal.g_oFuncSmartStation.isSmartStationModel() || AppGlobal.g_oFuncSmartStation.isServiceMasterRole()) {
			if (AppGlobal.launchAutoStation(iOutletId, sUDID, bStopBeforeStart) == false)
				return false;
		} else {
			// send to mq
			AppGlobal.startRestartAutoStation(sUDID);
		}
		
		if (bShowUI)
			showAttentionDialogBox(AppGlobal.g_oLang.get()._("restart_successfully"));
		
		return true;
	}
	
	private boolean launchPortalStation(int iOutletId, boolean bStopBeforeStart, boolean bShowUI) {
		// Not allow to run if station role is standalone
		if (AppGlobal.g_oFuncSmartStation.isStandaloneRole()) {
			if (bShowUI)
				showErrorDialogBox(AppGlobal.g_oLang.get()._("not_allow_to_run_in_standalone_mode"));
			return false;
		}
		
		// Retrieve the portal station for this outlet
		FuncStation oFuncStation = new FuncStation();
		if (!oFuncStation.loadFirstPortalStation(iOutletId)) {
			// No station
			if (bShowUI)
				showErrorDialogBox(AppGlobal.g_oLang.get()._("no_such_station"));
			
			return false;
		}
		
		String sUDID = oFuncStation.getAddress();
		
		if (!AppGlobal.g_oFuncSmartStation.isSmartStationModel() || AppGlobal.g_oFuncSmartStation.isServiceMasterRole()) {
			if (AppGlobal.launchPortalStation(iOutletId, sUDID, bStopBeforeStart) == false)
				return false;
		} else {
			// send to mq
			AppGlobal.startRestartPortalStation(sUDID);
		}
		
		if (bShowUI)
			showAttentionDialogBox(AppGlobal.g_oLang.get()._("restart_successfully"));
		
		return true;
	}
	
	// Stop auto station by outlet ID
	private void stopAutoStation(int iOutletId) {
		AppGlobal.stopAutoStation(iOutletId);
	}
	
	// Stop auto station by outlet ID
	private void stopPortalStation(int iOutletId) {
		AppGlobal.stopPortalStation(iOutletId);
	}
	
	public boolean membershipInterfaceEnquiry(PosInterfaceConfig oInterfaceConfig, String sMemberNumber, String sLastName, String sTitle, boolean bAutoFunction, boolean isFromRegistration, String oFunctionName) {
		boolean bNeedUpdateBasket = false;
		
		if (sTitle.isEmpty())
			sTitle = AppGlobal.g_oLang.get()._("svc_enquiry");
		
		// Membership Interface Selection
		PosInterfaceConfig oPosInterfaceConfig = null;
		String sMembershipTitle = AppGlobal.g_oLang.get()._("please_select_the_membership_interface");
		
		ArrayList<String> oVendors = new ArrayList<String>();
		if (oFunctionName.equals(AppGlobal.FUNC_LIST.svc_enquiry.name()))
			oVendors.add(InfVendor.KEY_HUARUNTONG);
		
		if (oInterfaceConfig == null){
			oPosInterfaceConfig = this.getInterfaceConfig(InfInterface.TYPE_MEMBERSHIP_INTERFACE, oVendors, sMembershipTitle, true);
			if(oPosInterfaceConfig == null)
				return false;
		} else
			oPosInterfaceConfig = oInterfaceConfig;
		
		FormMembershipInterface oFormMembershipInterface = new FormMembershipInterface(m_oFuncCheck, null, sTitle, this);
		
		String sTableNo = "";
		if (m_oFrameOrderingPanel.getVisible())
			sTableNo = m_oFuncCheck.getTableNoWithExtensionForDisplay();
		
		oFormMembershipInterface.setForwardFromRegistration(isFromRegistration);
		oFormMembershipInterface.setPosInterfaceConfig(oPosInterfaceConfig);
		oFormMembershipInterface.addListener(this);
		oFormMembershipInterface.svcEnquiry(m_oMenuPriceLevelList, oInterfaceConfig, sMemberNumber, sLastName, m_oFrameTableFloorPlan.getVisible(), sTableNo, bAutoFunction, false);
		
		if(bAutoFunction) {
			AppGlobal.g_sResultForAutoFunction.set(AppGlobal.AUTO_FUNCTIONS_RESULT_LIST.success.name());
			return true;
		}
		
		if (!oFormMembershipInterface.isActionAbort())
			oFormMembershipInterface.show();
		
		if(oFormMembershipInterface.isActionAbort() && !oFormMembershipInterface.isClearMember())
			return false;
		
		if(m_oFrameTableFloorPlan.getVisible())
			return true;
		
		if (togglePriceLevelForMembership(oFormMembershipInterface.getPriceLevel(), oFormMembershipInterface.getIsAttachMember()))
			bNeedUpdateBasket = true;
		
		if (!oFormMembershipInterface.isActionAbort() || bNeedUpdateBasket){
			// Update basket
			for (int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
				// Create ordering basket section for seat
				ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck.getItemList(i);
				if (oFuncCheckItemList != null && oFuncCheckItemList.size() > 0) { // Has ordered items in seat i
					for (int j = 0; j < oFuncCheckItemList.size(); j++) {
						FuncCheckItem oFuncCheckItem = oFuncCheckItemList.get(j);
						updateBasketItemInfo(i, j);
						updateBasketItemPrice(i, j, oFuncCheckItem);
					}
				}
			}
		}
		calculateCheck();
		//Update Membership Extra Info from Memory
		if(!AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name()) && m_iCashierMode == 0)
			prepareOrderingBasketExtraInfo();
		return true;
	}
	
	// toggle price level for membership interface
	private boolean togglePriceLevelForMembership(int iSelectedPriceLevel, boolean bAttachMember){
		if (iSelectedPriceLevel <= 0 && bAttachMember)
			return false;
		
		if (!bAttachMember)
			iSelectedPriceLevel = AppGlobal.g_oFuncOutlet.get().getPriceLevel();
		
		if (bAttachMember && !m_oMenuPriceLevelList.isPriceLevelExist(iSelectedPriceLevel)){
			showErrorDialogBox(AppGlobal.g_oLang.get()._("invalid_price_level_setting"));
		}
		// Change the selected item to HashMap
		List<HashMap<String, Integer>> oSelectedItems = new ArrayList<HashMap<String, Integer>>();
		
		for (HashMap<String, Integer> oItemInfo : m_oFuncCheck.getSectionItemIndexForCurrentOrderedItem()) {
			int iPartySeq = oItemInfo.get("partySeq");
			int iSectionId = oItemInfo.get("sectionId");
			int iItemIndex = oItemInfo.get("itemIndex");
			
			HashMap<String, Integer> oSelectedItem = new HashMap<String, Integer>();
			oSelectedItem.put("partySeq", iPartySeq);
			oSelectedItem.put("sectionId", iSectionId);
			oSelectedItem.put("itemIndex", iItemIndex);
			oSelectedItems.add(oSelectedItem);
		}
		
		for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
			FuncCheckItem oSelectedFuncCheckItem = m_oFuncCheck.getCheckItem(oSelectedItem.get("partySeq"),
					oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
			oSelectedItem.put("priceLevel", oSelectedFuncCheckItem.getCheckItem().getPriceLevel());
		}
		// Perform change item price
		
		if (m_oFuncCheck.changeOrderedItemPriceLevel(oSelectedItems, iSelectedPriceLevel, false)) {
			// Check Override Conditions
			DateTimeFormatter oTimeFormatter = DateTimeFormat.forPattern("HH:mm:ss");
			// Get current time
			DateTime oCurrentTime = AppGlobal.getCurrentTime(false);
			m_oFuncCheck.checkOverrideConditions(oTimeFormatter.print(oCurrentTime), oTimeFormatter.print(oCurrentTime), Integer.parseInt(m_oFuncCheck.getTableNo()), m_oFuncCheck.getTableExtension(), true);
			
			// Update screen
			m_oFuncCheck.calcCheck();
			if (isRollbackNeededForCheckLimit(m_oFuncCheck, BigDecimal.ZERO)) {
				m_oFuncCheck.rollBackChangeOrderedItemPriceLevel(oSelectedItems);
				m_oFuncCheck.calcCheck();
				return false;
			}
			
			// Update database for old check
			if (m_oFuncCheck.isOldCheck()) {
				// Update old item price
				if (!m_oFuncCheck.updateCheck(false, true, PosCheckItem.SEND_MODE_OLD_ITEM, 0, false, 0, 0, 0, "",
						false, false, false, false, 0, 0, false, false).equals(PosCheck.API_RESULT_SUCCESS))
					return false;
			}
		}
		
		return true;
	}
	
	// roll back the check when cancel payment
	public boolean rollBackCheckForCancelPayment(int iPaymentId) {
		PosPaymentMethodList oPosPaymentMethodList = m_oFuncPayment.getPaymentMethodList();
		List<PosCheckPayment> oCheckPaymentList = m_oFuncPayment.getCheckPaymentList();
		if(iPaymentId > 0){
			if(!m_bNeedRollbackForCancelPayment)
				return true;
			
			if(m_oFuncPayment.getPaymentMethodList().getPaymentMethodList().containsKey(iPaymentId) == false){
				m_bNeedRollbackForCancelPayment = false;
				return false;
			}
			
			// Get the payment method object
			PosPaymentMethod oPosPaymentMethod = m_oFuncPayment.getPaymentMethodList().getPaymentMethodList().get(iPaymentId);
			PosCheckPayment oCheckPayment = new PosCheckPayment();
			oCheckPayment.setPaymId(oPosPaymentMethod.getPaymId());
			oCheckPaymentList = new ArrayList<PosCheckPayment>();
			oCheckPaymentList.add(oCheckPayment);
		}
		else{
			if (m_oFrameCashier.getCurrentStep() == 0) {
				if (m_iCashierMode != 3) {
					if ((m_oFuncCheck != null && !m_oFuncCheck.isPaid(false))) {
						for (PosCheckPayment oCheckPayment : oCheckPaymentList)
							rollbackTaxAndSC(oCheckPayment, new PosVoidReason(0));
					}
				} else {
					if (!m_oFrameCashier.isFinishPaymentByAdjustPayment()) {
						for (PosCheckPayment oCheckPayment : oCheckPaymentList)
							rollbackTaxAndSC(oCheckPayment, new PosVoidReason(0));
					}
				}
				m_bNeedRollbackForCancelPayment = false;
				return true;
			}
		}
		// ask discount void reason if needed
		boolean bNeedAskVoidReason = false;
		PosVoidReason oVoidReason = null;
		for (PosCheckPayment oCheckPayment : oCheckPaymentList) {
			if (oPosPaymentMethodList.getPaymentMethodList().containsKey(oCheckPayment.getPaymentMethodId()) == false)
				continue;
			PosPaymentMethod oPosPaymentMethod = oPosPaymentMethodList.getPaymentMethodList()
					.get(oCheckPayment.getPaymentMethodId());
			// Check whether have auto discount
			if (!oPosPaymentMethod.getAutoDiscountTypeId().equals("")) {
				int iDiscId = Integer.valueOf(oPosPaymentMethod.getAutoDiscountTypeId());
				if (iDiscId > 0) {
					bNeedAskVoidReason = true;
					break;
				}
			}
		}
		if (bNeedAskVoidReason)
			oVoidReason = getPaymentVoidReasonForCancelPayment();
		for (PosCheckPayment oCheckPayment : oCheckPaymentList) {
			rollbackTaxAndSC(oCheckPayment, oVoidReason);
		}
		m_oFuncPayment.setCurrentBalance(m_oFuncCheck.getCheckTotal().subtract(m_oFuncPayment.getPaidBalance()));
		
		if (m_oFrameCashier.getVisible()) {
			m_oFrameCashier
					.setTotal(AppGlobal.g_oFuncOutlet.get().roundCheckAmountToString(m_oFuncCheck.getCheckTotal()));
			if (AppGlobal.g_oFuncOutlet.get().getCheckRoundDecimal() > AppGlobal.g_oFuncOutlet.get()
					.getPayRoundDecimal()) {
				m_oFrameCashier.setBalance(StringLib.BigDecimalToString(m_oFuncPayment.getCurrentBalance(),
						AppGlobal.g_oFuncOutlet.get().getCheckRoundDecimal()));
			} else {
				m_oFrameCashier.setBalance(StringLib.BigDecimalToString(m_oFuncPayment.getCurrentBalance(),
						AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal()));
			}
		}
		m_bNeedRollbackForCancelPayment = false;
		return true;
	}
	
	private PosVoidReason getPaymentVoidReasonForCancelPayment() {
		PosVoidReason oVoidReason = null;
		String sVoidReasonForPaymentAutoDisc = AppGlobal.g_oFuncStation.get().getVoidReasonForPaymentAutoDiscount();
		if (sVoidReasonForPaymentAutoDisc == null || sVoidReasonForPaymentAutoDisc.isEmpty()) {
			String sVoidLookupDescription = AppGlobal.g_oLang.get()
					._("please_select_the_void_reason_for_cancel_payment_with_discount");
			// Ask void code for voiding discount
			do {
				oVoidReason = this.callVoidReasonLookup(AppGlobal.g_oLang.get()._("void_reason"),
						sVoidLookupDescription, PosVoidReason.TYPE_VOID_DISCOUNT);
			} while (oVoidReason == null);
		} else {
			if (m_oVoidReasonList == null) {
				m_oVoidReasonList = new PosVoidReasonList();
				m_oVoidReasonList.readAll();
			}
			
			List<PosVoidReason> oVoidReasonList = m_oVoidReasonList
					.getVoidReasonListByType(PosVoidReason.TYPE_VOID_DISCOUNT);
			for (PosVoidReason oTempVoidReason : oVoidReasonList) {
				if (oTempVoidReason.getCode().equals(sVoidReasonForPaymentAutoDisc)) {
					oVoidReason = oTempVoidReason;
					break;
				}
			}
			
			if (oVoidReason == null) {
				String sVoidLookupDescription = AppGlobal.g_oLang.get()
						._("please_select_the_void_reason_for_cancel_payment_with_discount");
				// Ask void code for voiding discount
				do {
					oVoidReason = this.callVoidReasonLookup(AppGlobal.g_oLang.get()._("void_reason"),
							sVoidLookupDescription, PosVoidReason.TYPE_VOID_DISCOUNT);
				} while (oVoidReason == null);
			}
		}
		
		return oVoidReason;
	}
	
	private void rollbackTaxAndSC(PosCheckPayment oCheckPayment, PosVoidReason oVoidReason) {
		int iAutoDiscId = 0;
		boolean bWaiveSC = false, bWaiveTax = false;
		String sAutoDiscType = "item";
		PosPaymentMethodList oPosPaymentMethodList = m_oFuncPayment.getPaymentMethodList();
		
		if (oPosPaymentMethodList.getPaymentMethodList().containsKey(oCheckPayment.getPaymentMethodId()) == false)
			return;
		PosPaymentMethod oPosPaymentMethod = oPosPaymentMethodList.getPaymentMethodList()
				.get(oCheckPayment.getPaymentMethodId());
		
		// Waive SC and Tax as necessary
		if (oPosPaymentMethod.isAutoWaiveSc())
			bWaiveSC = true;
		
		if (oPosPaymentMethod.isAutoWaiveTax())
			bWaiveTax = true;
		
		// Check whether have auto discount
		if (!oPosPaymentMethod.getAutoDiscountTypeId().equals("")) {
			iAutoDiscId = Integer.valueOf(oPosPaymentMethod.getAutoDiscountTypeId());
			if (oPosPaymentMethod.isAutoCheckDiscountType())
				sAutoDiscType = "check";
		}
		
		// roll back the item's service charge and tax
		if (bWaiveSC || bWaiveTax) {
			List<HashMap<String, String>> oItemSnapShotList = m_oFuncCheck.getItemSnapShotList();
			for (HashMap<String, String> oItemSnapShot : oItemSnapShotList) {
				if (oItemSnapShot.containsKey("checkDiscountInfo"))
					continue;
				
				int iPartySeq = Integer.valueOf(oItemSnapShot.get("partySeq")).intValue();
				int iSection = Integer.valueOf(oItemSnapShot.get("section")).intValue();
				int iItemIndex = Integer.valueOf(oItemSnapShot.get("itemIndex")).intValue();
				List<HashMap<String, Integer>> oReverseItemList = new ArrayList<HashMap<String, Integer>>();
				HashMap<String, Integer> oTempHashMap = new HashMap<String, Integer>();
				
				FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iPartySeq, iSection, iItemIndex);
				String sCurrentChargeSc = oFuncCheckItem.getChargeSc();
				String sCurrentChargeTax = oFuncCheckItem.getChargeTax();
				
				boolean[] bChosenSc = new boolean[5];
				String[] sChosenTax = new String[25];
				if (oItemSnapShot.get("oriChargeSc").equals(sCurrentChargeSc) == false
						|| oItemSnapShot.get("oriChargeTax").equals(sCurrentChargeTax) == false) {
					oTempHashMap.put("partySeq", iPartySeq);
					oTempHashMap.put("sectionId", iSection);
					oTempHashMap.put("itemIndex", iItemIndex);
					oReverseItemList.add(oTempHashMap);
					
					for (int i = 1; i <= 5; i++) {
						if (oItemSnapShot.get("oriChargeSc").substring((i - 1), i).equals(" ") == false)
							bChosenSc[i - 1] = true;
						else
							bChosenSc[i - 1] = false;
					}
					for (int i = 1; i <= 25; i++) {
						if (oItemSnapShot.get("oriChargeTax").substring((i - 1), i).equals(" ") == false)
							sChosenTax[i-1] = PosOverrideCondition.CHARGE_TAX_WAIVE;
						else
							sChosenTax[i-1] = PosOverrideCondition.CHARGE_TAX_NO_CHANGE;
					}
					
					m_oFuncCheck.addWaiveScTax(true, oReverseItemList, bChosenSc, sChosenTax);
				}
			}
		}
		
		// roll back the attached discount
		if (iAutoDiscId > 0) {
			if (sAutoDiscType.equals("item")) {
				List<HashMap<String, String>> oItemSnapShotList = m_oFuncCheck.getItemSnapShotList();
				List<HashMap<String, Integer>> oReverseItemList = new ArrayList<HashMap<String, Integer>>();
				HashMap<String, Integer> oTempHashMap = null;
				
				for (HashMap<String, String> oItemSnapShot : oItemSnapShotList) {
					if (oItemSnapShot.containsKey("checkDiscountInfo"))
						continue;
					
					boolean bDiscountFound = false;
					int iPartySeq = Integer.valueOf(oItemSnapShot.get("partySeq")).intValue();
					int iSection = Integer.valueOf(oItemSnapShot.get("section")).intValue();
					int iItemIndex = Integer.valueOf(oItemSnapShot.get("itemIndex")).intValue();
					
					FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iPartySeq, iSection, iItemIndex);
					if (oFuncCheckItem.hasItemDiscount(true)) {
						List<PosCheckDiscount> oCurrentDiscountList = oFuncCheckItem.getItemDiscountList();
						List<String> oOriDiscountIds = new ArrayList<String>();
						StringTokenizer sStrTok = new StringTokenizer(oItemSnapShot.get("oriDiscountIdList"));
						while (sStrTok.hasMoreElements())
							oOriDiscountIds.add(sStrTok.nextToken());
						
						for (PosCheckDiscount oItemDiscount : oCurrentDiscountList) {
							// continue if the discount type is not equal to
							// payment attached discount
							if (oItemDiscount.getDtypId() != iAutoDiscId)
								continue;
							
							// find the original discount list contains the
							// current item discount
							for (int i = 0; i < oOriDiscountIds.size(); i++) {
								if (oOriDiscountIds.get(i).equals(oItemDiscount.getCdisId())) {
									bDiscountFound = true;
									break;
								}
							}
							
							// current applied discount is not find, the
							// discount should be applied during payment
							if (!bDiscountFound) {
								oTempHashMap = new HashMap<String, Integer>();
								oTempHashMap.put("sectionId", iSection);
								oTempHashMap.put("itemIndex", iItemIndex);
								oReverseItemList.add(oTempHashMap);
							}
						}
					}
				}
				
				// really roll back and void the item discount
				m_oFuncCheck.voidDiscount(sAutoDiscType, PosDiscountType.USED_FOR_DISCOUNT, oReverseItemList, 0,
						oVoidReason.getVdrsId(), "");
			} else {
				List<HashMap<String, String>> oItemSnapShotList = m_oFuncCheck.getItemSnapShotList();
				String sCheckDiscSnapShot = "";
				for (HashMap<String, String> oItemSnapShot : oItemSnapShotList) {
					if (oItemSnapShot.containsKey("checkDiscountInfo")) {
						sCheckDiscSnapShot = oItemSnapShot.get("checkDiscountInfo");
						break;
					}
				}
				
				int iDiscountIndex = -1;
				HashMap<Integer, Integer> oCheckDiscSnapShotList = new HashMap<Integer, Integer>();
				StringTokenizer oStrTok = new StringTokenizer(sCheckDiscSnapShot, ",");
				while (oStrTok.hasMoreElements()) {
					String oTempString = oStrTok.nextToken();
					StringTokenizer oStrTok2 = new StringTokenizer(oTempString, ":");
					if (oStrTok2.hasMoreElements()) {
						String sDiscountIndex = oStrTok2.nextToken();
						String sDiscountTypeId = oStrTok2.nextToken();
						oCheckDiscSnapShotList.put(Integer.valueOf(sDiscountIndex).intValue(),
								Integer.valueOf(sDiscountTypeId).intValue());
					}
				}
				
				int iCurrentPartySeq = m_oFuncCheck.getCurrentCheckPartySeq();
				List<PosCheckDiscount> oCheckDiscList = m_oFuncCheck.getCheckPartyBySeq(iCurrentPartySeq)
						.getPartyCheckDiscount();
				for (PosCheckDiscount oCheckDiscount : oCheckDiscList) {
					if (oCheckDiscount.getDtypId() == iAutoDiscId) {
						if (!oCheckDiscSnapShotList.containsKey(oCheckDiscount.getSeq())) {
							iDiscountIndex = oCheckDiscount.getSeq();
							break;
						}
					}
				}
				
				// really roll back and void the check discount
				if (iDiscountIndex != -1)
					m_oFuncCheck.voidDiscount(sAutoDiscType, PosDiscountType.USED_FOR_DISCOUNT, null, iDiscountIndex,
							oVoidReason.getVdrsId(), "");
			}
		}
	}
	
	private void rollbackTaxAndSCForAdjustPayment(PosCheckPayment oCheckPayment, PosVoidReason oVoidReason) {
		int iAutoDiscId = 0;
		boolean bWaiveSC = false, bWaiveTax = false;
		String sAutoDiscType = "item";
		PosPaymentMethodList oPosPaymentMethodList = m_oFuncPayment.getPaymentMethodList();
		
		if (oPosPaymentMethodList.getPaymentMethodList().containsKey(oCheckPayment.getPaymentMethodId()) == false)
			return;
		PosPaymentMethod oPosPaymentMethod = oPosPaymentMethodList.getPaymentMethodList()
				.get(oCheckPayment.getPaymentMethodId());
		
		// Waive SC and Tax as necessary
		if (oPosPaymentMethod.isAutoWaiveSc())
			bWaiveSC = true;
		
		if (oPosPaymentMethod.isAutoWaiveTax())
			bWaiveTax = true;
		
		// Check whether have auto discount
		if (!oPosPaymentMethod.getAutoDiscountTypeId().equals("")) {
			iAutoDiscId = Integer.valueOf(oPosPaymentMethod.getAutoDiscountTypeId());
			if (oPosPaymentMethod.isAutoCheckDiscountType())
				sAutoDiscType = "check";
		}
		
		// roll back the item's service charge and tax
		if (bWaiveSC || bWaiveTax) {
			List<HashMap<String, String>> oItemSnapShotList = m_oFuncCheck.getItemSnapShotList();
			for (HashMap<String, String> oItemSnapShot : oItemSnapShotList) {
				if (oItemSnapShot.containsKey("checkDiscountInfo"))
					continue;
				
				int iPartySeq = Integer.valueOf(oItemSnapShot.get("partySeq")).intValue();
				int iSection = Integer.valueOf(oItemSnapShot.get("section")).intValue();
				int iItemIndex = Integer.valueOf(oItemSnapShot.get("itemIndex")).intValue();
				List<HashMap<String, Integer>> oReverseItemList = new ArrayList<HashMap<String, Integer>>();
				HashMap<String, Integer> oTempHashMap = new HashMap<String, Integer>();
				
				FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iPartySeq, iSection, iItemIndex);
				String sCurrentChargeSc = "";
				for (int i = 1; i <= 5; i++) {
					if (oFuncCheckItem.getMenuItem().getChargeSc(i - 1).equals(PosCheckItem.CHARGE_SC_NO) == false)
						sCurrentChargeSc = sCurrentChargeSc + oFuncCheckItem.getMenuItem().getChargeSc(i - 1);
					else
						sCurrentChargeSc = sCurrentChargeSc + " ";
				}
				
				String sCurrentChargeTax = "";
				for (int i = 1; i <= 25; i++) {
					if (oFuncCheckItem.getMenuItem().getChargeTax(i - 1).equals(PosCheckItem.CHARGE_TAX_NO) == false)
						sCurrentChargeTax = sCurrentChargeTax + oFuncCheckItem.getMenuItem().getChargeTax(i - 1);
					else
						sCurrentChargeTax = sCurrentChargeTax + " ";
				}
				
				boolean[] bChosenSc = new boolean[5];
				String[] sChosenTax = new String[25];
				if (oItemSnapShot.get("oriChargeSc").equals(sCurrentChargeSc) == false
						|| oItemSnapShot.get("oriChargeTax").equals(sCurrentChargeTax) == false) {
					oTempHashMap.put("partySeq", iPartySeq);
					oTempHashMap.put("sectionId", iSection);
					oTempHashMap.put("itemIndex", iItemIndex);
					oReverseItemList.add(oTempHashMap);
					
					for (int i = 1; i <= 5; i++) {
						if (sCurrentChargeSc.substring((i - 1), i).equals(" ") == false)
							bChosenSc[i - 1] = true;
						else
							bChosenSc[i - 1] = false;
					}
					for (int i = 1; i <= 25; i++) {
						if (sCurrentChargeTax.substring((i - 1), i).equals(" ") == false)
							sChosenTax[i-1] = PosOverrideCondition.CHARGE_TAX_WAIVE;
						else
							sChosenTax[i-1] = PosOverrideCondition.CHARGE_TAX_NO_CHANGE;
					}
					
					m_oFuncCheck.addWaiveScTax(true, oReverseItemList, bChosenSc, sChosenTax);
				}
			}
		}
		
		// roll back the attached discount
		if (iAutoDiscId > 0) {
			if (sAutoDiscType.equals("item")) {
				List<HashMap<String, String>> oItemSnapShotList = m_oFuncCheck.getItemSnapShotList();
				List<HashMap<String, Integer>> oReverseItemList = new ArrayList<HashMap<String, Integer>>();
				HashMap<String, Integer> oTempHashMap = null;
				
				for (HashMap<String, String> oItemSnapShot : oItemSnapShotList) {
					if (oItemSnapShot.containsKey("checkDiscountInfo"))
						continue;
					
					int iPartySeq = Integer.valueOf(oItemSnapShot.get("partySeq")).intValue();
					int iSection = Integer.valueOf(oItemSnapShot.get("section")).intValue();
					int iItemIndex = Integer.valueOf(oItemSnapShot.get("itemIndex")).intValue();
					
					FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iPartySeq, iSection, iItemIndex);
					if (oFuncCheckItem.hasItemDiscount(true)) {
						List<PosCheckDiscount> oCurrentDiscountList = oFuncCheckItem.getItemDiscountList();
						for (PosCheckDiscount oItemDiscount : oCurrentDiscountList) {
							// continue if the discount type is not equal to
							// payment attached discount
							if (oItemDiscount.getDtypId() == iAutoDiscId) {
								oTempHashMap = new HashMap<String, Integer>();
								oTempHashMap.put("sectionId", iSection);
								oTempHashMap.put("itemIndex", iItemIndex);
								oReverseItemList.add(oTempHashMap);
								break;
							}
						}
					}
				}
				
				// really roll back and void the item discount
				m_oFuncCheck.voidDiscount(sAutoDiscType, PosDiscountType.USED_FOR_DISCOUNT, oReverseItemList, 0,
						oVoidReason.getVdrsId(), "");
			} else {
				List<HashMap<String, String>> oItemSnapShotList = m_oFuncCheck.getItemSnapShotList();
				String sCheckDiscSnapShot = "";
				for (HashMap<String, String> oItemSnapShot : oItemSnapShotList) {
					if (oItemSnapShot.containsKey("checkDiscountInfo")) {
						sCheckDiscSnapShot = oItemSnapShot.get("checkDiscountInfo");
						break;
					}
				}
				
				int iDiscountIndex = -1;
				HashMap<Integer, Integer> oCheckDiscSnapShotList = new HashMap<Integer, Integer>();
				StringTokenizer oStrTok = new StringTokenizer(sCheckDiscSnapShot, ",");
				while (oStrTok.hasMoreElements()) {
					String oTempString = oStrTok.nextToken();
					StringTokenizer oStrTok2 = new StringTokenizer(oTempString, ":");
					if (oStrTok2.hasMoreElements()) {
						String sDiscountIndex = oStrTok2.nextToken();
						String sDiscountTypeId = oStrTok2.nextToken();
						oCheckDiscSnapShotList.put(Integer.valueOf(sDiscountIndex).intValue(),
								Integer.valueOf(sDiscountTypeId).intValue());
					}
				}
				
				int iCurrentPartySeq = m_oFuncCheck.getCurrentCheckPartySeq();
				List<PosCheckDiscount> oCheckDiscList = m_oFuncCheck.getCheckPartyBySeq(iCurrentPartySeq)
						.getPartyCheckDiscount();
				for (PosCheckDiscount oCheckDiscount : oCheckDiscList) {
					if (oCheckDiscount.getDtypId() == iAutoDiscId) {
						if (oCheckDiscSnapShotList.containsKey(oCheckDiscount.getSeq())) {
							iDiscountIndex = oCheckDiscount.getSeq();
							break;
						}
					}
				}
				// really roll back and void the check discount
				if (iDiscountIndex != -1)
					m_oFuncCheck.voidDiscount(sAutoDiscType, PosDiscountType.USED_FOR_DISCOUNT, null, iDiscountIndex,
							oVoidReason.getVdrsId(), "");
			}
		}
	}
	
	// Print paid check
	private void printPaidCheck(boolean bFromTableFloorMap) {
		String sCheckPrefixNum = "";
		int iChosenCheckPfmtId = 0;
		HashMap<String, Integer> oCheckPfmtInfo = null;
		
		if (!bFromTableFloorMap)
			quitCheck(true);
		
		// ask check number
		FormInputBox oFormInputBox = new FormInputBox(this);
		oFormInputBox.init();
		oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("print_paid_check"));
		oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("please_input_check_no"));
		oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DEFAULT);
		oFormInputBox.showKeyboard();
		oFormInputBox.show();
		
		if (oFormInputBox.isUserCancel())
			return;
		else
			sCheckPrefixNum = oFormInputBox.getInputValue();
		
		if (sCheckPrefixNum.isEmpty())
			return;
		
		FuncCheck oFuncCheck = new FuncCheck();
		if (!oFuncCheck.getCheckByCheckNum(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
				AppGlobal.g_oFuncOutlet.get().getOutletId(), sCheckPrefixNum, true)) {
			// fail to get check information
			showErrorDialogBox(oFuncCheck.getLastErrorMessage());
			return;
		}
		
		oFuncCheck.initBusinessDaySetup(AppGlobal.g_oFuncOutlet.get());
		if (!checkIsFullPaid(oFuncCheck))
			return;
		
		if (oFuncCheck.isInUsedByOthers()) {
			// Check is used by other
			showErrorDialogBox(oFuncCheck.getLastErrorMessage());
			return;
		}
		
		// lock the check
		if (oFuncCheck.lockCheck() == false)
			return;
		
		// ask print format
		iChosenCheckPfmtId = 0;
		oCheckPfmtInfo = selectCheckPrintFormat(false, false, false);
		if (oCheckPfmtInfo.get("result") == 0) {
			oFuncCheck.unlockCheck();
			return;
		}
		iChosenCheckPfmtId = oCheckPfmtInfo.get("pfmtId");
		if (oFuncCheck.printCheck(false, false, AppGlobal.g_oFuncUser.get().getUserId(),
				AppGlobal.g_oFuncStation.get().getStationId(), AppGlobal.g_oFuncStation.get().getCheckPrtqId(),
				iChosenCheckPfmtId, false,
				AppGlobal.g_oFuncOutlet.get().getOutletNameByIndex(AppGlobal.g_oCurrentLangIndex.get()), false, 0, "",
				false, false, false) == false) {
			// Fail to print check
			String sErrorMessage = oFuncCheck.getLastErrorMessage();
			String sRemark;
			if (sErrorMessage.isEmpty()) {
				sErrorMessage = AppGlobal.g_oLang.get()._("fail_to_print_check");
				sRemark = "Fail to print paid check";
			} else
				sRemark = oFuncCheck.getLastErrorMessage();
			
			AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.print_paid_check.name(),
					PosActionLog.ACTION_RESULT_FAIL, oFuncCheck.getTableNoWithExtensionForDisplay(),
					AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
					AppGlobal.g_oFuncOutlet.get().getOutletId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
					oFuncCheck.getCheckBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(),
					oFuncCheck.getCheckId(), "", "", "", "", sRemark);
			
			showErrorDialogBox(sErrorMessage);
		} else
			AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.print_paid_check.name(),
					PosActionLog.ACTION_RESULT_SUCCESS, oFuncCheck.getTableNoWithExtensionForDisplay(),
					AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
					AppGlobal.g_oFuncOutlet.get().getOutletId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), oFuncCheck.getCheckBusinessPeriodId(),
					AppGlobal.g_oFuncStation.get().getStationId(), oFuncCheck.getCheckId(), "", "", "", "", "");
		
		// Send action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
		// unlock check
		oFuncCheck.unlockCheck();
	}
	
	// Order by barcode
	private void orderByBarcode(String sBarcodeValue) {
		if (m_oFuncBarcode == null) {
			// No setup for barcode ordering
			return;
		}
		
		String sItemCode = "";
		String sItemSKU = "";
		BigDecimal dItemTotal = BigDecimal.ZERO;
		BigDecimal dItemQty = BigDecimal.ONE;
		int iFormatListIndex = -1;
		
		FuncMenuItem oFuncMenuItem = null;
		ArrayList<FuncMenuItem> oFuncMenuItemList = new ArrayList<>();
		boolean bSearchByItemCode = false;
		
		for (int i = 0; i < m_oFuncBarcode.getBarCodeFormatCount(); i++) {
			bSearchByItemCode = false;
			oFuncMenuItemList = new ArrayList<>();
			m_oFuncBarcode.processBarcodeOrdering(sBarcodeValue, i);
			sItemCode = m_oFuncBarcode.getItemCode(i);
			sItemSKU = m_oFuncBarcode.getItemSKU(i);
			if (sItemCode.length() == 0 && sItemSKU.length() == 0) {
				// No item code/item SKU
				continue;
			}
			if (sItemCode.length() > 0) {
				oFuncMenuItemList = AppGlobal.g_oFuncMenu.get().getFuncMenuItemByItemCodeCaseInsensitive(sItemCode);
				bSearchByItemCode = true;
			} else if (sItemSKU.length() > 0)
				oFuncMenuItemList = AppGlobal.g_oFuncMenu.get().getFuncMenuItemByItemSKUCaseInsensitive(sItemSKU);
			
			if (oFuncMenuItemList.size() > 0) {
				iFormatListIndex = i;
				break;
			}
		}
		
		if (oFuncMenuItemList.isEmpty()) {
			// Item not found
			showErrorDialogBox(AppGlobal.g_oLang.get()._("item_cannot_be_found"));
			return;
		}
		
		if (oFuncMenuItemList.size() > 1) {
			ArrayList<String> oOptionList = new ArrayList<String>();
			for (FuncMenuItem oFuncMenuItem2 : oFuncMenuItemList) {
				if (bSearchByItemCode) {
					oOptionList.add(sItemCode + ": "
							+ oFuncMenuItem2.getMenuItem().getName(AppGlobal.g_oCurrentLangIndex.get()));
				} else {
					oOptionList.add(sItemSKU + ": "
							+ oFuncMenuItem2.getMenuItem().getName(AppGlobal.g_oCurrentLangIndex.get()));
				}
			}
			
			FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
			oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select_the_item"), oOptionList,
					false);
			oFormSelectionBox.show();
			if (oFormSelectionBox.isUserCancel()) {
				// User cancel
				return;
			} else {
				ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
				
				// Add the menu item to cache
				oFuncMenuItem = oFuncMenuItemList.get(oSelectionBoxResult.get(0));
			}
		} else {
			oFuncMenuItem = oFuncMenuItemList.get(0);
		}
		
		// Get the qty
		if (m_oFuncBarcode.getItemQty(iFormatListIndex).compareTo(BigDecimal.ZERO) != 0) {
			dItemQty = m_oFuncBarcode.getItemQty(iFormatListIndex);
		} else {
			// Calculate the qty by total
			dItemTotal = m_oFuncBarcode.getItemTotal(iFormatListIndex);
			
			BigDecimal dItemPrice = oFuncMenuItem.getBasicItemPrice(AppGlobal.g_oFuncOutlet.get().getPriceLevel());
			if (dItemTotal.compareTo(BigDecimal.ZERO) != 0 && dItemPrice.compareTo(BigDecimal.ZERO) != 0) {
				dItemQty = dItemTotal.divide(dItemPrice, 4, RoundingMode.HALF_UP);
			}
		}
		
		this.addHotItem(oFuncMenuItem.getMenuItem().getItemId(), dItemQty, false);
	}
	
	// process the selection of pending item for current check party
	private void processSetPendingItem(List<HashMap<String, Integer>> oSelectedItems) {
		List<HashMap<String, Integer>> oPendingItemList = new ArrayList<HashMap<String, Integer>>();
		List<HashMap<String, Integer>> oRemovePendingItemList = new ArrayList<HashMap<String, Integer>>();
		
		for (int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
			ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck.getItemList(i);
			
			if (oFuncCheckItemList != null && oFuncCheckItemList.size() > 0) {
				for (int j = 0; j < oFuncCheckItemList.size(); j++) {
					FuncCheckItem oFuncCheckItem = oFuncCheckItemList.get(j);
					if (oFuncCheckItem.isOldItem())
						continue;
					
					String sKey = m_oFuncCheck.getCurrentCheckPartySeq() + "_" + i + "_" + j;
					boolean bSelected = false;
					for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
						String sSelectedKey = oSelectedItem.get("partySeq") + "_" + oSelectedItem.get("sectionId") + "_"
								+ oSelectedItem.get("itemIndex");
						if (sKey.equals(sSelectedKey)) {
							bSelected = true;
							break;
						}
					}
					
					HashMap<String, Integer> oSelectedPendingItem = new HashMap<String, Integer>();
					oSelectedPendingItem.put("partySeq", m_oFuncCheck.getCurrentCheckPartySeq());
					oSelectedPendingItem.put("sectionId", i);
					oSelectedPendingItem.put("itemIndex", j);
					if (bSelected) {
						// if item is selected and not is pending item yet, set
						// it as pending
						if (!oFuncCheckItem.isPendingItem())
							oPendingItemList.add(oSelectedPendingItem);
					} else {
						// if item is not selected and is pending item, set it
						// as normal
						if (oFuncCheckItem.isPendingItem())
							oRemovePendingItemList.add(oSelectedPendingItem);
					}
				}
			}
		}
		
		if (oPendingItemList.size() > 0 || oRemovePendingItemList.size() > 0) {
			m_oFuncCheck.setPendingItems(oPendingItemList, oRemovePendingItemList);
			
			// update the basket item info
			if (oPendingItemList.size() > 0) {
				for (int i = 0; i < oPendingItemList.size(); i++)
					updateBasketItemInfo(oPendingItemList.get(i).get("sectionId"),
							oPendingItemList.get(i).get("itemIndex"));
			}
			if (oRemovePendingItemList.size() > 0) {
				for (int i = 0; i < oRemovePendingItemList.size(); i++)
					updateBasketItemInfo(oRemovePendingItemList.get(i).get("sectionId"),
							oRemovePendingItemList.get(i).get("itemIndex"));
			}
		}
	}
	
	// process the printing of pending item for current check party
	private void processPrintPendingItem(List<HashMap<String, Integer>> oSelectedItems, BigDecimal oInputPendingQty) {
		List<HashMap<String, Integer>> oPendingItemList = new ArrayList<HashMap<String, Integer>>();
		ArrayList<FuncCheckItem> oPendingFuncCheckItemList = new ArrayList<FuncCheckItem>();
		for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
			FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(oSelectedItem.get("partySeq"),
					oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
			if (oFuncCheckItem != null && oFuncCheckItem.isOldItem() && oFuncCheckItem.isPendingItem()) {
				oPendingItemList.add(oSelectedItem);
				if (m_oFuncKitchenMonitor.isSupportKitchenMonitor()) {
					oPendingFuncCheckItemList.add(oFuncCheckItem);
					if (oFuncCheckItem.hasModifier()) {
						for (FuncCheckItem oModifier : oFuncCheckItem.getModifierList())
							oPendingFuncCheckItemList.add(oModifier);
					}
				}
			}
		}
		
		if (oPendingItemList.size() > 0) {
			m_oFuncCheck.printPendingItems(oPendingItemList, oInputPendingQty);
			if (m_oFuncKitchenMonitor.isSupportKitchenMonitor() && oPendingFuncCheckItemList.size() > 0)
				this.processKitchenMonitorQsrAddItem(null, null, oPendingFuncCheckItemList, false, null);
			// update the basket item info
			for (HashMap<String, Integer> oPendingItem : oPendingItemList)
				updateBasketItemInfo(oPendingItem.get("sectionId"), oPendingItem.get("itemIndex"));
		} else
			showAttentionDialogBox(AppGlobal.g_oLang.get()._("no_pending_item_selected"));
	}
	
	// Process rush order to multiple items
	private void processMultipleRushOrder(List<HashMap<String, Integer>> oSelectedItems) {
		DateTimeFormatter formatter = DateTimeFormat.forPattern("HH:mm");
		// Get rush order function retult
		HashMap<FuncCheckItem, String> oOrdersStatus = m_oFuncCheck.rushMultipleOrder(oSelectedItems);
		
		// if empty result is returned, prompt error
		if (oOrdersStatus != null) {
			// kitchen monitor send rush orders
			ArrayList<FuncCheckItem> oRushOrderFuncCheckItemList = new ArrayList<FuncCheckItem>();
			ArrayList<String> oRepeatChildItemId = new ArrayList<String>();
			boolean bRushOrder = false;
			if (m_oFuncKitchenMonitor.isSupportKitchenMonitor()) {
				for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
					bRushOrder = false;
					FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(oSelectedItem.get("partySeq"),
							oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
					if (oFuncCheckItem != null && oFuncCheckItem.isOldItem()) {
						if (oFuncCheckItem.isSetMenu()) {
							oRushOrderFuncCheckItemList.add(oFuncCheckItem);
							if (oFuncCheckItem.hasModifier())
								oRushOrderFuncCheckItemList.addAll(oFuncCheckItem.getModifierList());
							for (FuncCheckItem oChildFuncCheckItem : oFuncCheckItem.getChildItemList()) {
								oRushOrderFuncCheckItemList.add(oChildFuncCheckItem);
								if (oChildFuncCheckItem.hasModifier()) {
									oRushOrderFuncCheckItemList.addAll(oChildFuncCheckItem.getModifierList());
								}
								oRepeatChildItemId.add(oChildFuncCheckItem.getCheckItem().getCitmId());
							}
						} else {
							if (oRepeatChildItemId.size() > 0) {
								if (!oRepeatChildItemId.contains(oFuncCheckItem.getCheckItem().getCitmId())) {
									oRushOrderFuncCheckItemList.add(oFuncCheckItem);
									bRushOrder = true;
								}
							} else {
								oRushOrderFuncCheckItemList.add(oFuncCheckItem);
								bRushOrder = true;
							}
						}
						if (bRushOrder) {
							if (oFuncCheckItem.hasModifier())
								oRushOrderFuncCheckItemList.addAll(oFuncCheckItem.getModifierList());
						}
					}
				}
				if (oRushOrderFuncCheckItemList.size() > 0)
					this.processKitchenMonitorQsrAddItem(null, null, oRushOrderFuncCheckItemList, true, null);
			}
			
			FormListMessageBox oFormListMessageBox = new FormListMessageBox(true, AppGlobal.g_oLang.get()._("ok"), this);
			oFormListMessageBox.setTitle(AppGlobal.g_oLang.get()._("rush_order"));
			oFormListMessageBox.setMessageTextAlign(HeroActionProtocol.View.Attribute.TextAlign.LEFT+", "+HeroActionProtocol.View.Attribute.TextAlign.CENTER_VERTICAL);
			if (AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name())) {
				oFormListMessageBox.addColumnHeader(AppGlobal.g_oLang.get()._("item"), 180);
				oFormListMessageBox.addColumnHeader(AppGlobal.g_oLang.get()._("rush_count"), 100);
				oFormListMessageBox.addColumnHeader(AppGlobal.g_oLang.get()._("order_time"), 100);
				oFormListMessageBox.addColumnHeader(AppGlobal.g_oLang.get()._("result"), 80);
			} else {
				oFormListMessageBox.addColumnHeader(AppGlobal.g_oLang.get()._("item"), 418);
				oFormListMessageBox.addColumnHeader(AppGlobal.g_oLang.get()._("rush_count"), 195);
				oFormListMessageBox.addColumnHeader(AppGlobal.g_oLang.get()._("order_time"), 186);
				oFormListMessageBox.addColumnHeader(AppGlobal.g_oLang.get()._("result"), 117);
			}
			
			for (Entry<FuncCheckItem, String> entry : oOrdersStatus.entrySet()) {
				ArrayList<String> sMessage = new ArrayList<>();
				FuncCheckItem oFuncCheckItem = entry.getKey();
				String sStatus = entry.getValue();
				sMessage.add(oFuncCheckItem.getItemShortDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get()));
				sMessage.add(Integer.toString(oFuncCheckItem.getRushCount()));
				sMessage.add(formatter.print(oFuncCheckItem.getCheckItem().getOrderLocTime()));
				sMessage.add(sStatus);
				oFormListMessageBox.addMessage(sMessage);
			}
			oFormListMessageBox.show();
			return;
		} else {
			// Prompt error
			showErrorDialogBox(m_oFuncCheck.getLastErrorMessage());
			return;
		}
	}
	
	// Quit check for ordering timeout
	private void orderingTimeoutQuitCheck() {
		AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
				AppGlobal.g_oFuncUser.get().getUserId() + "", AppGlobal.g_oLang.get()._("ordering_timeout_to_quit_check"));
		
		if (m_oFrameSetMenu != null && m_oFrameSetMenu.isShow()){
			frameSetMenuLookup_ButtonClicked("Cancel");
		}
		
		// Make sure all screens are closed
		closeAllScreen();
		
		// Quit check
		quitCheck(false);
	}
	
	private void closeAllScreen() {
		if (m_bUsePanelToSelectItemMode) {
			toggleUsePanelToSelectItemMode(false, false);
		}
		toggleBacketMultiSelectMode(false, "", FrameOrderingBasket.SELECT_TYPE_ALL, FrameBasketSelectPanel.BASKET_SELECT_MODE_NO);
		m_oFrameCheckFunction.setVisible(false);
		
		m_oFrameStationInfoBarCover.setVisible(false);
		
		m_oFrameStationInfoBar.changeInfosPosition(230, 830, false);
		m_oFrameCover.setVisible(false);
		m_oFrameCheckReview.setVisible(false);
		m_oFrameSearchItem.setVisible(false);
	}
	
	// Checking item remind exist or not
	private boolean checkItemRemind(String sPosFunction, boolean bFormTableFloorPlan) {
		boolean bFrameItemRemindShow = false;
		
		// oItemRemindslist : stores all valid item
		ArrayList<PosItemRemindRule> oItemRemindRulesList = new ArrayList<PosItemRemindRule>();
		if (AppGlobal.getItemRemindRuleList().size() > 0) {
			// retrieve item remind list from db
			for (PosItemRemindRule oPosItemRemindRule : AppGlobal.getItemRemindRuleList()) {
				if ((oPosItemRemindRule.getRemindMode().equals(PosItemRemindRule.REMINDMODE_PRINT_CHRCK)
						&& (sPosFunction.equals(AppGlobal.FUNC_LIST.print_check.name())
						|| sPosFunction.equals(AppGlobal.FUNC_LIST.print_and_paid.name())))
						|| (oPosItemRemindRule.getRemindMode().equals(PosItemRemindRule.REMINDMODE_PRINT_SEND_CHECK)
						&& (sPosFunction.equals(AppGlobal.FUNC_LIST.print_check.name())
						|| sPosFunction.equals(AppGlobal.FUNC_LIST.send_check.name())
						|| sPosFunction.equals(AppGlobal.FUNC_LIST.print_and_paid.name())))) {
					// check Time mode, get valid item list
					Time oStartTime = oPosItemRemindRule.getStartTime();
					Time oEndTime = oPosItemRemindRule.getEndTime();
					DateTime oCheckOpenDateTime = null;
					Time oCheckOpenTime = null;
					DateTimeFormatter oTimeFormatter = DateTimeFormat.forPattern("HH:mm:ss");
					SimpleDateFormat oSimpleTimeFormat = new SimpleDateFormat("HH:mm:ss", Locale.ENGLISH);
					
					// timemode - no limitation
					if (oPosItemRemindRule.getTimeMode().equals(PosItemRemindRule.TIMEMODE_NO_LIMITATION))
						oItemRemindRulesList.add(oPosItemRemindRule);
						// timemode - check by open check time
					else if (oPosItemRemindRule.getTimeMode().equals(PosItemRemindRule.TIMEMODE_OPENCHECK_TIME)) {
						// if it is old check, get open check time, else get
						// current time
						if (m_oFuncCheck.isOldCheck())
							oCheckOpenDateTime = m_oFuncCheck.getOpenLocTime();
						else
							oCheckOpenDateTime = AppGlobal.getCurrentTime(false);
					} else if (oPosItemRemindRule.getTimeMode().equals(PosItemRemindRule.TIMEMODE_CURRENT_TIME))
						oCheckOpenDateTime = AppGlobal.getCurrentTime(false);
					
					// in time mode, check current/open time whether is between
					// start time and end time
					if (oCheckOpenDateTime != null) {
						try {
							oCheckOpenTime = new Time(
									oSimpleTimeFormat.parse(oTimeFormatter.print(oCheckOpenDateTime)).getTime());
						} catch (ParseException exception) {
							exception.printStackTrace();
							AppGlobal.stack2Log(exception);
							return false;
						}
						
						if (oCheckOpenTime.after(oStartTime) && oCheckOpenTime.before(oEndTime))
							oItemRemindRulesList.add(oPosItemRemindRule);
					}
				}
			}
			
			// get ordered item ids from check
			ArrayList<Integer> oItemIds = new ArrayList<Integer>();
			List<List<FuncCheckItem>> oWholePartyItemList = m_oFuncCheck.getWholeItemList();
			for (List<FuncCheckItem> oPartyItemList : oWholePartyItemList) {
				for (FuncCheckItem oFuncCheckItem : oPartyItemList)
					oItemIds.add(oFuncCheckItem.getMenuItemId());
			}
			
			ArrayList<PosItemRemindRule> oItemSuggest = new ArrayList<PosItemRemindRule>();
			ArrayList<PosItemRemindRule> oItemForce = new ArrayList<PosItemRemindRule>();
			ArrayList<PosItemRemindRule> oMenuSuggest = new ArrayList<PosItemRemindRule>();
			ArrayList<PosItemRemindRule> oMenuForce = new ArrayList<PosItemRemindRule>();
			// check order status
			boolean isOrdered = false;
			for (PosItemRemindRule oPosItemRemindRule : oItemRemindRulesList) {
				isOrdered = false;
				if (oPosItemRemindRule.getItemId() > 0) {
					// check item existence
					if (oItemIds.contains(oPosItemRemindRule.getItemId()))
						isOrdered = true;
					
					if (isOrdered == false) {
						if (oPosItemRemindRule.getSuggestion().equals(PosItemRemindRule.SUGGESTION_SUGGEST))
							oItemSuggest.add(oPosItemRemindRule);
						else if (oPosItemRemindRule.getSuggestion().equals(PosItemRemindRule.SUGGESTION_FORCE))
							oItemForce.add(oPosItemRemindRule);
					}
				} else if (oPosItemRemindRule.getMenuId() > 0) {
					int iMinOrder = 0, iOrderedNum = 0;
					// get menu by menuId
					MenuMenu oMenu = AppGlobal.g_oFuncMenu.get().getMenuAndContentById(oPosItemRemindRule.getMenuId());
					if (oPosItemRemindRule.getMinOrder() == 0)
						iMinOrder = oMenu.getMenuLookupList().size();
					else if (oPosItemRemindRule.getMinOrder() > 0)
						iMinOrder = oPosItemRemindRule.getMinOrder();
					
					// check how many items had been ordered
					for (MenuMenuLookup oLookup : oMenu.getMenuLookupList())
						iOrderedNum += Collections.frequency(oItemIds, oLookup.getItemId());
					if (iOrderedNum < iMinOrder) {
						if (oPosItemRemindRule.getSuggestion().equals(PosItemRemindRule.SUGGESTION_SUGGEST))
							oMenuSuggest.add(oPosItemRemindRule);
						else if (oPosItemRemindRule.getSuggestion().equals(PosItemRemindRule.SUGGESTION_FORCE))
							oMenuForce.add(oPosItemRemindRule);
					}
				}
			}
			
			if (oItemSuggest.size() > 0 || oItemForce.size() > 0 || oMenuSuggest.size() > 0 || oMenuForce.size() > 0) {
				if (!bFormTableFloorPlan) {
					m_oFrameItemRemind.resetFrame();
					m_oFrameItemRemind.setVisible(true);
					m_oFrameItemRemind.setFunctionKey(sPosFunction);
					m_oFrameItemRemind.resetButtonDesc();
					m_oFrameOrderingBasket.bringToTop();
					
					// add items
					m_oFrameItemRemind.addItemList(oItemSuggest, oItemForce, oMenuSuggest, oMenuForce);
				}
				bFrameItemRemindShow = true;
			}
		}
		
		return bFrameItemRemindShow;
	}
	
	// Capture discount reference
	private ArrayList<PosCheckExtraInfo> askDiscountReference(int iCount,
	                                                          ArrayList<PosCheckExtraInfo> oCheckExtraInfoList) {
		String sDiscountReference = null;
		
		FormInputBox oFormInputBox = new FormInputBox(this);
		oFormInputBox.init();
		oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("discount_reference") + " : " + iCount);
		oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("please_input_discount_reference") + ":");
		oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DEFAULT);
		oFormInputBox.show();
		sDiscountReference = oFormInputBox.getInputValue();
		if (oFormInputBox.isUserCancel() || sDiscountReference == null || sDiscountReference.isEmpty()) {
			oFormInputBox = null;
			return new ArrayList<PosCheckExtraInfo>();
		}
		
		if (oCheckExtraInfoList == null)
			oCheckExtraInfoList = new ArrayList<PosCheckExtraInfo>();
		
		// add discount reference to check extra info
		oCheckExtraInfoList.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_DISCOUNT,
				PosCheckExtraInfo.SECTION_DISCOUNT, PosCheckExtraInfo.VARIABLE_REFERENCE, sDiscountReference));
		
		return oCheckExtraInfoList;
	}
	
	// get past date check
	private void printPastDateCheck() {
		List<String> oMsgList = new ArrayList<String>();
		String sCheckNo = "";
		String sRoomNo = "";
		String sStartDate = "";
		String sEndDate = "";
		DateTime oToday = AppGlobal.getCurrentTime(false), oStartDate = null, oEndDate = null;
		DateTime oStartDateTime = null;
		
		DateTimeFormatter oformatter = DateTimeFormat.forPattern("yyyy-MM-dd");
		DateTimeFormatter oNewformatter = DateTimeFormat.forPattern("yyyyMMdd");
		DateTimeFormatter oDateTimeFormatter = DateTimeFormat.forPattern("yyyy-MM-dd");
		FormDatePicker oFormDatePicker = null;
		DateTime oLastDayDateTime = AppGlobal.getCurrentTime(false).minusDays(1);
		
		// ask start date
		boolean bBreak = false;
		do {
			oFormDatePicker = new FormDatePicker(oLastDayDateTime, this);
			oFormDatePicker.setTitle(AppGlobal.g_oLang.get()._("start_date"));
			oFormDatePicker.show();
			if (oFormDatePicker.isUserCancel())
				bBreak = true;
			else if (oFormDatePicker.getDate() != null) {
				try {
					oStartDateTime = oDateTimeFormatter.parseDateTime(oFormDatePicker.getDate());
					oStartDate = oformatter.parseDateTime(oFormDatePicker.getDate());
					sStartDate = oNewformatter.print(oStartDate);
					
					long diff = oToday.getMillis() - oStartDate.getMillis();
					long diffDay = TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);
					if (diffDay == 0)
						showErrorDialogBox(AppGlobal.g_oLang.get()._("not_support_current_date"));
					else
						bBreak = true;
				} catch (Exception e) {
					AppGlobal.stack2Log(e);
				}
			} else
				bBreak = true;
		} while (!bBreak);
		if (oStartDate == null)
			return;
		
		// ask end date
		bBreak = false;
		do {
			if (oStartDate != null)
				oFormDatePicker = new FormDatePicker(oStartDateTime, this);
			else
				oFormDatePicker = new FormDatePicker(AppGlobal.getCurrentTime(false), this);
			oFormDatePicker.setTitle(AppGlobal.g_oLang.get()._("end_date"));
			oFormDatePicker.show();
			if (oFormDatePicker.isUserCancel())
				bBreak = true;
			else if (oFormDatePicker.getDate() != null) {
				try {
					oEndDate = oformatter.parseDateTime(oFormDatePicker.getDate());
					sEndDate = oNewformatter.print(oEndDate);
					
					// check checking date within 90 days
					long diff = oEndDate.getMillis() - oStartDate.getMillis();
					long diffDay = TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);
					if (diffDay > 90) {
						showErrorDialogBox(AppGlobal.g_oLang.get()._("end_date_cannot_longer_than_90_days_compare_with_start_date"));
					} else {
						// checking whether current date
						diff = oToday.getMillis() - oEndDate.getMillis();
						diffDay = TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);
						if (diffDay == 0)
							showErrorDialogBox(AppGlobal.g_oLang.get()._("not_support_current_date"));
						else
							bBreak = true;
					}
				} catch (Exception e) {
					AppGlobal.stack2Log(e);
				}
			} else
				bBreak = true;
		} while (!bBreak);
		
		if (oEndDate == null)
			return;
		
		oMsgList.add(AppGlobal.g_oLang.get()._("start_date"));
		oMsgList.add(AppGlobal.g_oLang.get()._("end_date"));
		oMsgList.add(AppGlobal.g_oLang.get()._("check_no"));
		oMsgList.add(AppGlobal.g_oLang.get()._("room_no"));
		
		FormInputBox oFormInputBox = new FormInputBox(this);
		oFormInputBox.initWithInputNum(4);
		oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("past_date_check"));
		oFormInputBox.setMessages(oMsgList);
		
		oFormInputBox.setKeyboardType(0, HeroActionProtocol.View.Attribute.KeyboardType.DEFAULT);
		oFormInputBox.setDefaultInputValue(0, sStartDate);
		oFormInputBox.setKeyboardType(1, HeroActionProtocol.View.Attribute.KeyboardType.DEFAULT);
		oFormInputBox.setDefaultInputValue(1, sEndDate);
		oFormInputBox.setKeyboardType(2, HeroActionProtocol.View.Attribute.KeyboardType.DEFAULT);
		oFormInputBox.setDefaultInputValue(2, sCheckNo);
		oFormInputBox.setKeyboardType(3, HeroActionProtocol.View.Attribute.KeyboardType.DEFAULT);
		oFormInputBox.setDefaultInputValue(3, sRoomNo);
		oFormInputBox.showKeyboard();
		oFormInputBox.show();
		
		if (oFormInputBox.isUserCancel())
			return;
		// Get input value
		sStartDate = oFormInputBox.getInputValue(0);
		sEndDate = oFormInputBox.getInputValue(1);
		sCheckNo = oFormInputBox.getInputValue(2);
		sRoomNo = oFormInputBox.getInputValue(3);
		String sErrorMsg = "";
		
		if (sCheckNo.isEmpty() && sRoomNo.isEmpty())
			sErrorMsg = AppGlobal.g_oLang.get()._("check_and_room_number_are_empty");
		if (sStartDate.isEmpty() || sEndDate.isEmpty())
			sErrorMsg = AppGlobal.g_oLang.get()._("day_range_is_empty");
		else {
			if (sStartDate.length() != 8 || sEndDate.length() != 8) {
				sErrorMsg = AppGlobal.g_oLang.get()._("incorrect_date_format") + System.lineSeparator()
						+ AppGlobal.g_oLang.get()._("date_format") + " : " + "YYYYMMDD";
			} else {
				if (oStartDate != null && oEndDate != null) {
					if ((oStartDate.compareTo(oEndDate) > 0) || (oEndDate.compareTo(oStartDate) < 0) || !(oEndDate.compareTo(AppGlobal.getCurrentTime(false)) < 0))
						sErrorMsg = AppGlobal.g_oLang.get()._("incorrect_date_range");
				} else
					sErrorMsg = AppGlobal.g_oLang.get()._("incorrect_date_format") + System.lineSeparator()
							+ AppGlobal.g_oLang.get()._("date_format") + " : " + "YYYYMMDD";
			}
		}
		
		if (!sErrorMsg.isEmpty()) {
			showErrorDialogBox(sErrorMsg);
			return;
		}
		
		HashMap<String, String> oHashMap = new HashMap<String, String>();
		oHashMap.put("checkNumber", sCheckNo);
		oHashMap.put("roomNumber", sRoomNo);
		oHashMap.put("startDate", sStartDate);
		oHashMap.put("endDate", sEndDate);
		
		m_oFormCheckListing = new FormCheckListing(this, m_eOperationMode);
		m_oFormCheckListing.addListener(this);
		m_oFormCheckListing.init(oHashMap, FrameCheckListing.TYPE_PAST_DATE);
		m_oFormCheckListing.show();
	}
	
	// change pasword
	private boolean changePassword(boolean bChangePasswordAtLogin) {
		List<String> oMsgList = new ArrayList<String>();
		String sOldPwd = "";
		String sNewPwd = "";
		String sRetypePwd = "";
		String sEncryptedOldPwd = "";
		String sEncryptedNewPwd = "";
		String sEncryptedRetypePwd = "";
		byte[] encrypted = null;
		
		oMsgList.add(AppGlobal.g_oLang.get()._("old_password"));
		oMsgList.add(AppGlobal.g_oLang.get()._("new_password"));
		oMsgList.add(AppGlobal.g_oLang.get()._("retype_new_password"));
		
		FormInputBox oFormInputBox = new FormInputBox(this);
		oFormInputBox.initWithInputNum(3);
		oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("change_password"));
		oFormInputBox.setMessages(oMsgList);
		oFormInputBox.setKeyboardType(0, HeroActionProtocol.View.Attribute.KeyboardType.NUMBER);
		oFormInputBox.setInputBoxSecurity(0, true);
		oFormInputBox.setDefaultInputValue(0, sOldPwd);
		oFormInputBox.setKeyboardType(1, HeroActionProtocol.View.Attribute.KeyboardType.NUMBER);
		oFormInputBox.setInputBoxSecurity(1, true);
		oFormInputBox.setDefaultInputValue(1, sNewPwd);
		oFormInputBox.setKeyboardType(2, HeroActionProtocol.View.Attribute.KeyboardType.NUMBER);
		oFormInputBox.setInputBoxSecurity(2, true);
		oFormInputBox.setDefaultInputValue(2, sRetypePwd);
		oFormInputBox.show();
		
		if (oFormInputBox.isUserCancel())
			return false;
		
		// Get input value
		sOldPwd = oFormInputBox.getInputValue(0);
		sNewPwd = oFormInputBox.getInputValue(1);
		sRetypePwd = oFormInputBox.getInputValue(2);
		
		//password whitespace checking
		if(sNewPwd.indexOf(" ") != -1) {
			showDialogBox(AppGlobal.g_oLang.get()._("message"), AppGlobal.g_oLang.get()._("new_password_cannot_contain_any_spaces"));
			return false;
		}
		
		// Password encryption with timestamp
		String sKey = "a89bc02cef9257ed";
		String sIV = "bcd1345abcab6612";
		DateTime oCurrentTime = AppGlobal.getCurrentTime(false);
		DateTimeFormatter oFormatter = DateTimeFormat.forPattern("yyyyMMddHHmmss");
		String sCurrntTimeStamp = oFormatter.print(AppGlobal.convertTimeToUTC(oCurrentTime));
		
		try {
			IvParameterSpec oIV = new IvParameterSpec(sIV.getBytes("UTF-8"));
			SecretKeySpec oKeySpec = new SecretKeySpec(sKey.getBytes("UTF-8"), "AES");
			
			Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
			cipher.init(Cipher.ENCRYPT_MODE, oKeySpec, oIV);
			
			encrypted = cipher.doFinal((sOldPwd + sCurrntTimeStamp.toString()).getBytes());
			sEncryptedOldPwd = DatatypeConverter.printBase64Binary(encrypted);
			encrypted = cipher.doFinal((sNewPwd + sCurrntTimeStamp.toString()).getBytes());
			sEncryptedNewPwd = DatatypeConverter.printBase64Binary(encrypted);
			encrypted = cipher.doFinal((sRetypePwd + sCurrntTimeStamp.toString()).getBytes());
			sEncryptedRetypePwd = DatatypeConverter.printBase64Binary(encrypted);
		} catch (Exception e) {
			AppGlobal.stack2Log(e);
		}
		
		String sErrorMsg = "";
		if (AppGlobal.g_oFuncUser.get().changePassword(sEncryptedOldPwd, sEncryptedNewPwd, sEncryptedRetypePwd)) {
			sErrorMsg = AppGlobal.g_oLang.get()._("change_password_succeed") + System.lineSeparator()
					+ AppGlobal.g_oLang.get()._("please_login_again");
			showDialogBox(AppGlobal.g_oLang.get()._("message"), sErrorMsg);
			
			if (bChangePasswordAtLogin)
				AppGlobal.g_oFuncUser.get().logout();
			else
				logout(true);
		} else {
			if (AppGlobal.g_oFuncUser.get().getLastErrorMessage().equals(FuncUser.RESULT_INCORRECT_PASSWORD))
				sErrorMsg = AppGlobal.g_oLang.get()._("incorrect_current_password");
			else if (AppGlobal.g_oFuncUser.get().getLastErrorMessage()
					.contains(FuncUser.RESULT_FAIL_TO_LOGIN_MASTER_SERVER))
				sErrorMsg = AppGlobal.g_oLang.get()._("fail_to_login_master_server");
			else if (AppGlobal.g_oFuncUser.get().getLastErrorMessage()
					.contains(FuncUser.RESULT_FAIL_TO_CHANGE_PASSWORD_IN_MASTER_SERVER))
				sErrorMsg = AppGlobal.g_oLang.get()._("fail_to_change_password_in_master_server");
			else if (AppGlobal.g_oFuncUser.get().getLastErrorMessage().equals(FuncUser.RESULT_PASSWORD_NOT_MATCH))
				sErrorMsg = AppGlobal.g_oLang.get()._("new_and_retype_password_not_matched");
			else if (AppGlobal.g_oFuncUser.get().getLastErrorMessage()
					.equals(FuncUser.RESULT_PASSWORD_LESSTHAN_MIN_LENGTH))
				sErrorMsg = AppGlobal.g_oLang.get()._("password_less_than_minimum_length");
			else if (AppGlobal.g_oFuncUser.get().getLastErrorMessage()
					.equals(FuncUser.RESULT_PASSWORD_AT_LEAST_ONE_NON_ALPHABET))
				sErrorMsg = AppGlobal.g_oLang.get()._("password_at_least_contain_one_non_alphabet");
			else if (AppGlobal.g_oFuncUser.get().getLastErrorMessage()
					.equals(FuncUser.RESULT_PASSWORD_AT_LEAST_ONE_ALPHABET))
				sErrorMsg = AppGlobal.g_oLang.get()._("password_at_least_contain_one_alphabet");
			else if (AppGlobal.g_oFuncUser.get().getLastErrorMessage()
					.equals(FuncUser.RESULT_PASSWORD_AT_LEAST_ONE_UPPERCASE_ALPHABET))
				sErrorMsg = AppGlobal.g_oLang.get()._("password_at_least_contain_one_uppercase_alphabet");
			else if (AppGlobal.g_oFuncUser.get().getLastErrorMessage()
					.equals(FuncUser.RESULT_PASSWORD_AT_LEAST_ONE_LOWERCASE_ALPHABET))
				sErrorMsg = AppGlobal.g_oLang.get()._("password_at_least_contain_one_lowercase_alphabet");
			else if (AppGlobal.g_oFuncUser.get().getLastErrorMessage()
					.equals(FuncUser.RESULT_PASSWORD_AT_LEAST_ONE_SPECIAL_CHARACTER))
				sErrorMsg = AppGlobal.g_oLang.get()._("password_at_least_contain_one_special_character");
			else if (AppGlobal.g_oFuncUser.get().getLastErrorMessage()
					.equals(FuncUser.RESULT_PASSWORD_AT_LEAST_ONE_DIGIT))
				sErrorMsg = AppGlobal.g_oLang.get()._("password_at_least_contain_one_digit");
			else if (AppGlobal.g_oFuncUser.get().getLastErrorMessage().equals(FuncUser.RESULT_PASSWORD_SAME_AS_LOGIN))
				sErrorMsg = AppGlobal.g_oLang.get()._("password_cannot_same_as_login");
			else if (AppGlobal.g_oFuncUser.get().getLastErrorMessage()
					.equals(FuncUser.RESULT_PASSWORD_CANNOT_REPEAT_WITH_PREIVOUS))
				sErrorMsg = AppGlobal.g_oLang.get()._("password_cannot_same_with_previous_password");
			else
				sErrorMsg = AppGlobal.g_oLang.get()._("change_password_failed");
			showDialogBox(AppGlobal.g_oLang.get()._("message"), sErrorMsg);
			return false;
		}
		return true;
	}
	
	private void searchPanelHotItem() {
		ArrayList<FuncLookupButtonInfo> displayPanelLookupArrayList = new ArrayList<FuncLookupButtonInfo>();
		List<PosDisplayPanelPage> pages = m_oPosDisplayPanel
				.filterDisplayPanelPageByZone(PosDisplayPanelZone.KEY_ORDERING);
		List<PosDisplayPanelZone> zones = m_oPosDisplayPanel
				.filterDisplayPanelZoneByZone(PosDisplayPanelZone.KEY_ORDERING);
		if (pages.isEmpty()) // No setup
			return;
		
		HashMap<Integer, String[]> oDefaultItemPoolForSearchList = new HashMap<Integer, String[]>();
		int iIndex = 0;
		for (PosDisplayPanelPage page : pages) {
			displayPanelLookupArrayList = preparePanelLookupArrayWithPanel(
					m_oPosDisplayPanel.filterDisplayPanelLookupByPageId(page.getPageId()), zones.get(iIndex));
			for (FuncLookupButtonInfo oFuncLookupButtonInfo : displayPanelLookupArrayList) {
				if (oFuncLookupButtonInfo.getType().equals(PosDisplayPanelLookup.TYPE_HOT_ITEM)) {
					oDefaultItemPoolForSearchList.put(oFuncLookupButtonInfo.getId(), oFuncLookupButtonInfo.getName());
				}
			}
			iIndex++;
		}
		
		m_oFrameSearchItem.initSearch(oDefaultItemPoolForSearchList, FrameSearchItem.SEARCH_TYPE_NORMAL, null, false);
		m_oFrameSearchItem.setVisible(true);
		
		// Add log to action log list
		AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.search_panel_hot_item.name(),
				PosActionLog.ACTION_RESULT_SUCCESS, m_oFuncCheck.getTableNoWithExtensionForDisplay(),
				AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
				AppGlobal.g_oFuncOutlet.get().getOutletId(), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
				AppGlobal.g_oFuncStation.get().getStationId(), m_oFuncCheck.getCheckId(), "", "", "", "", "");
		// handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
		return;
	}
	
	// SVC coupon redeem item function
	private void svcCouponRedeemItem() {
		List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal
				.getPosInterfaceConfigByInfType(InfInterface.TYPE_MEMBERSHIP_INTERFACE);
		List<PosInterfaceConfig> oSvcPosInterfaceConfigList = new ArrayList<PosInterfaceConfig>();
		PosInterfaceConfig oPosInterfaceConfig = null;
		
		if (AppGlobal.isModuleSupport(AppGlobal.OPTIONAL_MODULE.pos_interface.name()) == false) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("interface_module_is_not_supported"));
			return;
		}
		
		if (oInterfaceConfigList.isEmpty()) {
			showDialogBox(AppGlobal.g_oLang.get()._("redeem_coupon"), AppGlobal.g_oLang.get()._("no_membership_interface_setup"));
			return;
		}
		
		if (oSvcPosInterfaceConfigList.isEmpty()) {
			showDialogBox(AppGlobal.g_oLang.get()._("redeem_coupon"), AppGlobal.g_oLang.get()._("no_lps_svc_interface_setup"));
			return;
		}
		
		oPosInterfaceConfig = oSvcPosInterfaceConfigList.get(0);
		if (oPosInterfaceConfig != null) {
			FuncMembershipInterface oFuncMembershipInterface = new FuncMembershipInterface(oPosInterfaceConfig);
			
			// Ask coupon number
			String sCouponNumber = "";
			FormInputBox oFormInputBox;
			
			oFormInputBox = new FormInputBox(this);
			oFormInputBox.init();
			oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DEFAULT);
			oFormInputBox.showKeyboard();
			oFormInputBox.setEnterBlockUI(true);
			oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("redeem_coupon"));
			oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("please_input_the_coupon_number") + ":");
			oFormInputBox.show();
			
			sCouponNumber = oFormInputBox.getInputValue();
			if (sCouponNumber == null)
				return;
			
			DateTime oCurrentTime = AppGlobal.getCurrentTime(false);
			DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyyMMddHHmmss");
			String sCurrntTimeStamp = formatter.print(AppGlobal.convertTimeToUTC(oCurrentTime));
			DateTimeFormatter oDateFormat = DateTimeFormat.forPattern("yyyyMMddHHmmss");
			
			HashMap<String, String> oEnquiryInfo = new HashMap<String, String>();
			oEnquiryInfo.put("businessDate",
					AppGlobal.g_oFuncOutlet.get().getBusinessDay().getDateInStringWithFormat("yyyy-MM-dd"));
			oEnquiryInfo.put("checkId", "0");
			oEnquiryInfo.put("checkNumber", m_oFuncCheck.getCheckPrefixNo());
			oEnquiryInfo.put("checkAmount", "");
			String sTaceId = oDateFormat.print(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getDate()).toString()
					+ sCurrntTimeStamp.toString();
			oEnquiryInfo.put("traceId", sTaceId);
			oEnquiryInfo.put("memberNumber", sCouponNumber);
			
			if (oFuncMembershipInterface.memberEnquiry(oEnquiryInfo) == false) {
				// show SVC error message
				showErrorDialogBox(oFuncMembershipInterface.getLastErrorMessage());
				return;
			}
			
			// Search the redeem item by return item code
			FuncMenuItem oFuncMenuItem = null;
			String sCouponItemCode = oFuncMembershipInterface.getLastMemberInfo().get("couponItemCode");
			ArrayList<FuncMenuItem> oFuncMenuItemList = AppGlobal.g_oFuncMenu.get()
					.getFuncMenuItemByItemCodeCaseInsensitive(sCouponItemCode);
			if (oFuncMenuItemList.isEmpty()) {
				// Item not found
				showErrorDialogBox(AppGlobal.g_oLang.get()._("no_such_item_code") + " : " + sCouponItemCode);
				return;
			}
			
			if (oFuncMenuItemList.size() > 1) {
				ArrayList<String> oOptionList = new ArrayList<String>();
				for (FuncMenuItem oFuncMenuItem2 : oFuncMenuItemList) {
					oOptionList.add(sCouponItemCode + ": "
							+ oFuncMenuItem2.getMenuItem().getName(AppGlobal.g_oCurrentLangIndex.get()));
				}
				
				FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
				oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select_the_redeem_item"),
						oOptionList, false);
				oFormSelectionBox.show();
				if (oFormSelectionBox.isUserCancel()) {
					// User cancel
					return;
				} else {
					ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
					
					// Add the menu item to cache
					oFuncMenuItem = oFuncMenuItemList.get(oSelectionBoxResult.get(0));
				}
			} else {
				oFuncMenuItem = oFuncMenuItemList.get(0);
			}
			
			// Show result
			FormConfirmBox oFormConfirmBox1 = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
					AppGlobal.g_oLang.get()._("no"), this);
			oFormConfirmBox1.setTitle(AppGlobal.g_oLang.get()._("redeem_coupon"));
			oFormConfirmBox1.setMessage(AppGlobal.g_oLang.get()._("coupon_number") + " : " + sCouponNumber + System.lineSeparator()
					+ AppGlobal.g_oLang.get()._("redeem_item") + " : "
					+ oFuncMenuItem.getMenuItem().getName(AppGlobal.g_oCurrentLangIndex.get()));
			oFormConfirmBox1.show();
			
			if (!oFormConfirmBox1.isOKClicked())
				// Cancel by user
				return;
			
			// Get the redeem item target price level
			int iRedeemItemTargetPriceLevel = AppGlobal.g_oFuncOutlet.get().getPriceLevel();
			int iOriginalPriceLevel = iRedeemItemTargetPriceLevel;
			if (oPosInterfaceConfig.getInterfaceConfig().optJSONObject("svc_setting").optJSONObject("params")
					.has("price_level_after_redemption"))
				iRedeemItemTargetPriceLevel = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("svc_setting")
						.optJSONObject("params").optJSONObject("price_level_after_redemption")
						.optInt("value", AppGlobal.g_oFuncOutlet.get().getPriceLevel());
			if (iRedeemItemTargetPriceLevel != iOriginalPriceLevel) {
				// Temporary change to setup price level for add item
				AppGlobal.g_oFuncOutlet.get().setManualPriceLevel(iRedeemItemTargetPriceLevel);
			}
			
			// Add the item
			if (this.addHotItem(oFuncMenuItem.getMenuItem().getItemId(), BigDecimal.ONE, false)) {
				// Roll back the price level if necessary
				if (iRedeemItemTargetPriceLevel != iOriginalPriceLevel) {
					AppGlobal.g_oFuncOutlet.get().setManualPriceLevel(-1);
				}
				
				int iSectionId = m_oFrameOrderingBasket.getSelectedSectionId();
				int iItemIndex = m_oFuncCheck.getLastGeneralCheckItemItemIndex(iSectionId);
				FuncCheckItem oOrderedRedeemItem = m_oFuncCheck.getCheckItem(iSectionId, iItemIndex);
				
				// Really redeem the coupon
				HashMap<String, String> oPostingInfo = new HashMap<String, String>();
				oPostingInfo.put("memberNo", sCouponNumber);
				oPostingInfo.put("traceId", "");
				
				if (oFuncMembershipInterface.membershipPosting(oPostingInfo, m_oFuncCheck,
						new ArrayList<PosCheckPayment>(), null, false, false) == false) {
					// show error message
					String sErrMsg = "";
					if (oFuncMembershipInterface.getLastErrorMessage() != null
							&& !oFuncMembershipInterface.getLastErrorMessage().equals(""))
						sErrMsg = oFuncMembershipInterface.getLastErrorMessage();
					else
						sErrMsg = AppGlobal.g_oLang.get()._("fail_to_post_svc_coupon");
					showErrorDialogBox(sErrMsg);
					
					// Void back the item
					deleteItem(iSectionId, iItemIndex,
							new BigDecimal(oOrderedRedeemItem.getCheckItem().getQty().toString()));
					
					return;
				}
				
				// Add extra information to the item
				oOrderedRedeemItem.addExtraInfo(PosCheckExtraInfo.BY_ITEM, PosCheckExtraInfo.SECTION_ONLINE_COUPON,
						PosCheckExtraInfo.VARIABLE_SVC_COUPON_NO, sCouponNumber);
				
			} else {
				// Roll back the price level if necessary
				if (iRedeemItemTargetPriceLevel != iOriginalPriceLevel) {
					AppGlobal.g_oFuncOutlet.get().setManualPriceLevel(-1);
				}
				
				// Fail to add item
				showErrorDialogBox(AppGlobal.g_oLang.get()._("fail_to_add_item"));
			}
		}
	}
	
	// check Interface Config
	private PosInterfaceConfig getInterfaceConfig(String sInterfaceType, List<String> oVendors, String sTitle,
	                                              Boolean bShowErrorMessage) {
		List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(sInterfaceType);
		List<PosInterfaceConfig> oPosInterfaceConfigList = new ArrayList<PosInterfaceConfig>();
		PosInterfaceConfig oTargetPosInterfaceConfig = null;
		if (!AppGlobal.isModuleSupport(AppGlobal.OPTIONAL_MODULE.pos_interface.name())) {
			if (bShowErrorMessage) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("interface_module_is_not_supported"));
			}
			return null;
		}
		
		if (oInterfaceConfigList.isEmpty()) {
			if (bShowErrorMessage)
				showErrorDialogBox(AppGlobal.g_oLang.get()._("no_interface_setup"));
			return null;
		}
		
		for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
			for (String sVendor : oVendors) {
				if (oPosInterfaceConfig.getInterfaceVendorKey().equals(sVendor))
					oPosInterfaceConfigList.add(oPosInterfaceConfig);
			}
		}
		
		if (oPosInterfaceConfigList.isEmpty()) {
			if (bShowErrorMessage)
				showAttentionDialogBox(AppGlobal.g_oLang.get()._("no_interface_setup"));
			return null;
		}
		
		if (oPosInterfaceConfigList.size() == 1)
			oTargetPosInterfaceConfig = oPosInterfaceConfigList.get(0);
		else {
			ArrayList<String> oOptionList = new ArrayList<String>();
			HashMap<Integer, HashMap<String, String>> oInterfaceIdList = new HashMap<Integer, HashMap<String, String>>();
			int iInterfaceCount = 0;
			
			for (PosInterfaceConfig oInterfaceConfig : oPosInterfaceConfigList) {
				oOptionList.add(oInterfaceConfig.getInterfaceName(AppGlobal.g_oCurrentLangIndex.get()));
				HashMap<String, String> oTempInterfaceInfo = new HashMap<String, String>();
				oTempInterfaceInfo.put("interfaceId", String.valueOf(oInterfaceConfig.getInterfaceId()));
				oInterfaceIdList.put(iInterfaceCount, oTempInterfaceInfo);
				iInterfaceCount++;
			}
			
			FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
			oFormSelectionBox.initWithSingleSelection(sTitle, oOptionList, false);
			oFormSelectionBox.show();
			
			if (oFormSelectionBox.isUserCancel())
				return null;
			else {
				HashMap<String, String> oTempInterfaceInfo = oInterfaceIdList
						.get(oFormSelectionBox.getResultList().get(0));
				int iInterfaceId = Integer.valueOf(oTempInterfaceInfo.get("interfaceId"));
				for (PosInterfaceConfig oInterfaceConfig : oPosInterfaceConfigList) {
					if (oInterfaceConfig.getInterfaceId() == iInterfaceId)
						oTargetPosInterfaceConfig = oInterfaceConfig;
				}
			}
		}
		return oTargetPosInterfaceConfig;
	}
	
	// get spa standard payment mapping config
	private HashMap<String, String> getSpaStandardPaymentMappingConfig(String sMappingName) {
		HashMap<String, String> oPaymentGatewayPayCodeList = new HashMap<String, String>();
		
		ArrayList<String> oVendors = new ArrayList<String>();
		oVendors.add(InfVendor.KEY_SPA_STANDARD);
		String sTitle = AppGlobal.g_oLang.get()._("please_select_payment_interface");
		PosInterfaceConfig oInterfaceConfig = this.getInterfaceConfig(InfInterface.TYPE_PAYMENT_INTERFACE, oVendors, sTitle, true);
		// read setup for pos payment code based on issuer code
		if(oInterfaceConfig != null) {
			if(oInterfaceConfig.getInterfaceConfig().has("payment_setup") && oInterfaceConfig.getInterfaceConfig().optJSONObject("payment_setup").optJSONObject("params").has(sMappingName)) {
				String sPaymentMapping = oInterfaceConfig.getInterfaceConfig().optJSONObject("payment_setup").optJSONObject("params").optJSONObject(sMappingName).optString("value");
				if (sPaymentMapping != null) {
					StringTokenizer oStrTok = new StringTokenizer(sPaymentMapping, ",");
					// get the paycode and payId mapping setup
					while(oStrTok.hasMoreElements()) {
						String oTempString = oStrTok.nextToken();
						StringTokenizer oStrTok2 = new StringTokenizer(oTempString, ":");
						if(oStrTok2.hasMoreElements()) {
							String sIssuerCode = oStrTok2.nextToken();
							String sPosPaymentCode = oStrTok2.nextToken();
							oPaymentGatewayPayCodeList.put(sIssuerCode, sPosPaymentCode);
						}
					}
				}
				else
					return null;
			}
			else
				return null;
		}
		else
			return null;
		
		return oPaymentGatewayPayCodeList;
	}
	
	private int assignCheckToTargetOutlet() {
		boolean bRecordFound = m_oFuncCheck
				.isCheckExtraInfoExistByVariableAndIndex(PosCheckExtraInfo.VARIABLE_TARGET_OUTLET_ID, 0);
		int iCurrentOutlet = AppGlobal.g_oFuncOutlet.get().getOutletId();
		OutOutletList outOutletList = new OutOutletList();
		outOutletList.readPosOutletsByShopId(AppGlobal.g_oFuncOutlet.get().getShopId());
		
		ArrayList<String> oOptionList = new ArrayList<String>();
		ArrayList<OutOutlet> oOutletList = outOutletList.getOutletList();
		ArrayList<OutOutlet> oOptionOutletList = new ArrayList<OutOutlet>();
		int iTargetOutletId = 0;
		
		if (oOutletList.isEmpty()) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("no_outlet_available"));
			return iTargetOutletId;
		}
		
		if (bRecordFound) {
			String sAssignedOutletId = m_oFuncCheck.getCheckExtraInfoByCheckIdAndVariable(m_oFuncCheck.getCheckId(),
					PosCheckExtraInfo.VARIABLE_TARGET_OUTLET_ID);
			if (sAssignedOutletId != null && !sAssignedOutletId.isEmpty())
				iTargetOutletId = Integer.parseInt(sAssignedOutletId);
		}
		
		if (iTargetOutletId > 0) {
			oOptionList.add(AppGlobal.g_oLang.get()._("clear"));
			oOptionList.add(AppGlobal.g_oLang.get()._("reassign"));
			
			FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
			oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select_the_action_type"),
					oOptionList, false);
			oFormSelectionBox.show();
			oOptionList.clear();
			
			if (!oFormSelectionBox.isUserCancel()) {
				ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
				int iOption = oSelectionBoxResult.get(0).intValue();
				if (iOption == 0) {
					m_oFuncCheck.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, "",
							PosCheckExtraInfo.VARIABLE_TARGET_OUTLET_ID, 0, "");
					return iTargetOutletId;
				}
			} else
				return iTargetOutletId;
			oOptionList.clear();
		}
		
		for (OutOutlet oOutOutlet : oOutletList) {
			String sOutletName = oOutOutlet.getName(AppGlobal.g_oCurrentLangIndex.get());
			if (iCurrentOutlet == oOutOutlet.getOletId())
				continue;
			
			// Show outlets under same shop
			if (oOutOutlet.getOutletShopId() != AppGlobal.g_oFuncOutlet.get().getShopId())
				continue;
			
			if (iTargetOutletId == oOutOutlet.getOletId())
				continue;
			
			if (sOutletName.length() > 0)
				oOptionList.add(sOutletName);
			else
				oOptionList.add(oOutOutlet.getOletId() + "");
			oOptionOutletList.add(oOutOutlet);
		}
		
		FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
		oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select_the_outlet"), oOptionList,
				false);
		oFormSelectionBox.show();
		
		if (oFormSelectionBox.isUserCancel())
			return iTargetOutletId;
		else {
			ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
			int iOption = oSelectionBoxResult.get(0).intValue();
			iTargetOutletId = oOptionOutletList.get(iOption).getOletId();
			
			if (bRecordFound)
				m_oFuncCheck.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, "",
						PosCheckExtraInfo.VARIABLE_TARGET_OUTLET_ID, 0, Integer.toString(iTargetOutletId));
			else
				m_oFuncCheck.addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, "",
						PosCheckExtraInfo.VARIABLE_TARGET_OUTLET_ID, 0, Integer.toString(iTargetOutletId));
		}
		
		return iTargetOutletId;
	}
	
	private void retrieveAdvanceOrder(String sReferenceNo) {
		boolean bRecordFound = m_oFuncCheck
				.isCheckExtraInfoExistByVariableAndIndex(PosCheckExtraInfo.VARIABLE_ADVANCE_ORDER_CHKS_ID, 0);
		
		String sInputReferenceNum = null;
		String sTargetPickupDate = null;
		String sTargetRetrieved = null;
		String sAssignedAdvancedChksId = null;
		String sAdvancedReferenceNum = null;
		String sAdvancedOrderName = null;
		String sAdvancedOrderPhone = null;
		FuncCheck oAdvancedFuncCheck = new FuncCheck();
		
		FuncCheck oOldAdvancedFuncCheck = new FuncCheck();
		boolean bClearOldAdvancedOrder = false;
		
		if (bRecordFound) {
			sAssignedAdvancedChksId = m_oFuncCheck.getCheckExtraInfoByCheckIdAndVariable(m_oFuncCheck.getCheckId(),
					PosCheckExtraInfo.VARIABLE_ADVANCE_ORDER_CHKS_ID);
			if (sAssignedAdvancedChksId != null && !sAssignedAdvancedChksId.isEmpty()) {
				ArrayList<String> oOptionList = new ArrayList<String>();
				oOptionList.add(AppGlobal.g_oLang.get()._("clear"));
				oOptionList.add(AppGlobal.g_oLang.get()._("reassign"));
				
				FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
				oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select_the_action_type"),
						oOptionList, false);
				oFormSelectionBox.show();
				
				if (!oFormSelectionBox.isUserCancel()) {
					ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
					int iOption = oSelectionBoxResult.get(0).intValue();
					bClearOldAdvancedOrder = true;
					// get the attached advance order reference number
					sAdvancedReferenceNum = m_oFuncCheck.getCheckExtraInfoByCheckIdAndVariable(
							m_oFuncCheck.getCheckId(), PosCheckExtraInfo.VARIABLE_REFERENCE);
					
					if (retrieveAdvancedCheck(sAdvancedReferenceNum) == null)
						return;
					else
						oOldAdvancedFuncCheck = retrieveAdvancedCheck(sAdvancedReferenceNum);
					
					if (iOption == 0) {
						// clear extra info list
						m_oFuncCheck.addExtraInfoForRetreiveAdvanceOrder("", "", "");
						
						oOldAdvancedFuncCheck.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK,
								PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_RETRIEVED, 0,
								"false");
						oOldAdvancedFuncCheck.updateCheck(false, false, PosCheckItem.SEND_MODE_OLD_ITEM, 0, false, 0, 0,
								0, "", false, false, false, false, 0, 0, false, false);
						return;
					}
				} else
					return;
			}
		}
		
		if(sReferenceNo == null) {
			while (true) {
				FormInputBox oFormInputBox = new FormInputBox(this);
				oFormInputBox.init();
				oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.NUMBER);
				oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("retrieve_advance_order"));
				oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("reference_no") + ":");
				oFormInputBox.show();
				
				if (oFormInputBox.isUserCancel())
					return;
				
				sInputReferenceNum = oFormInputBox.getInputValue();
				
				if (sInputReferenceNum.length() < 8) {
					showAttentionDialogBox(AppGlobal.g_oLang.get()._("incorrect_reference_number"));
					return;
				}
				
				if (retrieveAdvancedCheck(sInputReferenceNum) == null)
					return;
				else
					oAdvancedFuncCheck = retrieveAdvancedCheck(sInputReferenceNum);
				
				sTargetRetrieved = oAdvancedFuncCheck.getCheckExtraInfoValueListBySectionVariable(
						PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_RETRIEVED);
				
				if (sTargetRetrieved.equals("true")) {
					showAttentionDialogBox(AppGlobal.g_oLang.get()._("advance_order_has_been_retrieved"));
					return;
				}
				break;
			}
		} else {
			sInputReferenceNum = sReferenceNo;
			oAdvancedFuncCheck = retrieveAdvancedCheck(sInputReferenceNum);
		}
		
		sTargetPickupDate = oAdvancedFuncCheck.getCheckExtraInfoValueListBySectionVariable(
				PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_PICKUP_DATE);
		
		if (!sTargetPickupDate.equals(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getDateInString())) {
			FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("continue"),
					AppGlobal.g_oLang.get()._("cancel"), this);
			oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
			oFormConfirmBox
					.setMessage(AppGlobal.g_oLang.get()._("advance_order_pickup_date_does_not_match_business_day"));
			oFormConfirmBox.show();
			
			if (oFormConfirmBox.isOKClicked() == false)
				return;
		}
		
		String sUrl = getPrintCheckUrl(oAdvancedFuncCheck.getCheckId());
		if (sUrl == null || sUrl.equals(""))
			return;
		
		sAdvancedOrderName = oAdvancedFuncCheck.getCheckExtraInfoValueListBySectionVariable(
				PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_GUEST_NAME);
		sAdvancedOrderPhone = oAdvancedFuncCheck.getCheckExtraInfoValueListBySectionVariable(
				PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_PHONE);
		
		FormAdvanceOrderRetrieval oFormAdvanceOrderRetrieval = new FormAdvanceOrderRetrieval(this);
		ArrayList<String> oAdvanceOrderDetail = new ArrayList<String>();
		oAdvanceOrderDetail.add(sInputReferenceNum);
		oAdvanceOrderDetail.add(sAdvancedOrderName);
		oAdvanceOrderDetail.add(sAdvancedOrderPhone);
		oAdvanceOrderDetail
				.add(AppGlobal.g_oFuncOutlet.get().roundCheckAmountToString(oAdvancedFuncCheck.getCheckTotal()));
		oFormAdvanceOrderRetrieval.showAdvanceOrderDetail(oAdvanceOrderDetail);
		oFormAdvanceOrderRetrieval.setCheckDeposit(
				AppGlobal.g_oFuncOutlet.get().roundCheckAmountToString(oAdvancedFuncCheck.getCheckTotal()));
		oFormAdvanceOrderRetrieval.setCheckURL(sUrl);
		oFormAdvanceOrderRetrieval.show();
		
		if (oFormAdvanceOrderRetrieval.isClosedClicked())
			return;
		String sDepositAmount = oFormAdvanceOrderRetrieval.getDepositAmount();
		
		// clear old advanced order
		if (bClearOldAdvancedOrder) {
			oOldAdvancedFuncCheck.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK,
					PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_RETRIEVED, 0, "false");
			oOldAdvancedFuncCheck.updateCheck(false, false, PosCheckItem.SEND_MODE_OLD_ITEM, 0, false, 0, 0, 0, "",
					false, false, false, false, 0, 0, false, false);
			
			// clear extra info list
			m_oFuncCheck.addExtraInfoForRetreiveAdvanceOrder("", "", "");
		}
		
		// add new extra Info of check
		m_oFuncCheck.addExtraInfoForRetreiveAdvanceOrder(sInputReferenceNum, sDepositAmount,
				oAdvancedFuncCheck.getCheckId());
		
		// update the advanced check
		oAdvancedFuncCheck.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK,
				PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_RETRIEVED, 0, "true");
		oAdvancedFuncCheck.updateCheck(false, false, PosCheckItem.SEND_MODE_OLD_ITEM, 0, false, 0, 0, 0, "", false,
				false, false, false, 0, 0, false, false);
		
		//add action log
		AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.retrieve_advance_order.name(),
				PosActionLog.ACTION_RESULT_SUCCESS, m_oFuncCheck.getTableNoWithExtensionForDisplay(),
				AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
				AppGlobal.g_oFuncOutlet.get().getOutletId(), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
				AppGlobal.g_oFuncStation.get().getStationId(), m_oFuncCheck.getCheckId(), "", "", "", "", "Reference Number: "+sInputReferenceNum);
		
		// handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
	}
	
	private FuncCheck retrieveAdvancedCheck(String sInputReferenceNum) {
		FuncCheck oAdvancedFuncCheck = new FuncCheck();
		String sTargetBusinessDate = null;
		String sBdayId = null;
		
		String sBusinessDay = sInputReferenceNum.substring(0, 8);
		String sCheckPrefixNum = sInputReferenceNum.substring(8, sInputReferenceNum.length());
		
		DateFormat format = new SimpleDateFormat("yyyymmdd", Locale.ENGLISH);
		Date date;
		try {
			date = format.parse(sBusinessDay);
			sTargetBusinessDate = new SimpleDateFormat("yyyy-mm-dd").format(date);
		} catch (ParseException e) {
			e.printStackTrace();
			AppGlobal.stack2Log(e);
		}
		
		if (sTargetBusinessDate == null) {
			showAttentionDialogBox(AppGlobal.g_oLang.get()._("incorrect_date_format"));
			return null;
		}
		
		PosBusinessDay oBusinessDay = new PosBusinessDay();
		if (oBusinessDay.readByDateOutletId(sTargetBusinessDate, AppGlobal.g_oFuncOutlet.get().getOutletId()))
			sBdayId = oBusinessDay.getBdayId();
		
		if (!oAdvancedFuncCheck.getCheckByCheckNum(sBdayId, AppGlobal.g_oFuncOutlet.get().getOutletId(),
				sCheckPrefixNum, false)) {
			showAttentionDialogBox(AppGlobal.g_oLang.get()._("cannot_find_advance_order"));
			return null;
		}
		return oAdvancedFuncCheck;
	}
	
	private String getPrintCheckUrl(String sCheckId) {
		// Get check format
		String sUrl = "";
		int iChosenReceiptPfmtId = 0;
		
		//show print format selection accordingly
		iChosenReceiptPfmtId = selectReceiptFormat(false);
		if (iChosenReceiptPfmtId == 0)
			return "";
		
		// Create guest check for preview
		FuncCheck oFuncCheck = new FuncCheck();
		sUrl = oFuncCheck.previewReceipt(sCheckId, iChosenReceiptPfmtId);
		
		if (sUrl.length() == 0) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("fail_to_create_receipt_image"));
			return "";
		}
		return sUrl;
	}
	
	private PosCheckExtraInfo constructCheckExtraInfo(String sBy, String sSection, String sVariable, String sValue) {
		PosCheckExtraInfo oPosCheckExtraInfo = new PosCheckExtraInfo();
		oPosCheckExtraInfo.setOutletId(AppGlobal.g_oFuncOutlet.get().getOutletId());
		oPosCheckExtraInfo.setBy(sBy);
		oPosCheckExtraInfo.setSection(sSection);
		oPosCheckExtraInfo.setVariable(sVariable);
		oPosCheckExtraInfo.setValue(sValue);
		return oPosCheckExtraInfo;
	}
	
	private void assignCheckType() {
		ArrayList<String> oOptionList = new ArrayList<String>();
		ArrayList<Integer> oOptionIdxList = new ArrayList<Integer>();
		boolean bMatchCoditionBefore = false;
		
		if (m_oPosCustomTypeList.getTypeList().size() == 0) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("no_custom_type_available"));
			return;
		}
		
		//check current ordering type override condition is matched or not
		bMatchCoditionBefore = AppGlobal.g_oFuncOverrideList.get(AppGlobal.g_oFuncOutlet.get().getOutletId())
				.checkOrderingTypeOverride(Integer.parseInt(m_oFuncCheck.getTableNo()), m_oFuncCheck.getTableExtension(), 0, m_oFuncCheck.getCustomTypeId());
		
		if (m_oFuncCheck.getCustomTypeId() > 0) {
			oOptionList.add(AppGlobal.g_oLang.get()._("clear"));
			oOptionList.add(AppGlobal.g_oLang.get()._("re_assign"));
			
			FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
			PosCustomType oPosCustomType = m_oPosCustomTypeList.getTypeList().get(m_oFuncCheck.getCustomTypeId());
			
			if (oPosCustomType.getShortName(AppGlobal.g_oCurrentLangIndex.get()).isEmpty())
				oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("current_check_type") + " : "
						+ oPosCustomType.getName(AppGlobal.g_oCurrentLangIndex.get()), oOptionList, false);
			else
				oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("current_check_type") + " : "
						+ oPosCustomType.getShortName(AppGlobal.g_oCurrentLangIndex.get()), oOptionList, false);
			oFormSelectionBox.show();
			
			if (oFormSelectionBox.isUserCancel()) {
				return;
			}
			
			ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
			int iOption = oSelectionBoxResult.get(0).intValue();
			if (iOption == 0) {
				// clear
				m_oFuncCheck.setCustomType(0);
				
				// roll back to dine in if current check is new check and the override condition is matched
				if(!m_oFuncCheck.isOldCheck() && bMatchCoditionBefore
						&& AppGlobal.g_oFuncOverrideList.get(AppGlobal.g_oFuncOutlet.get().getOutletId())
						.checkOrderingTypeOverride(Integer.parseInt(m_oFuncCheck.getTableNo()), m_oFuncCheck.getTableExtension(), 0, m_oFuncCheck.getCustomTypeId()))
					this.checkDineIn(false);
				
				// Set result flag = success for auto function
				AppGlobal.g_sResultForAutoFunction.set(AppGlobal.AUTO_FUNCTIONS_RESULT_LIST.success.name());
				
				return;
			} else if (iOption == 1)
				oOptionList.clear();
		}
		
		Iterator<Entry<Integer, PosCustomType>> oEntries = m_oPosCustomTypeList.getTypeList().entrySet().iterator();
		while (oEntries.hasNext()) {
			Entry<Integer, PosCustomType> oEntry = oEntries.next();
			oOptionIdxList.add(oEntry.getKey());
			PosCustomType oPosCustomType = (PosCustomType) oEntry.getValue();
			oOptionList.add(oPosCustomType.getName(AppGlobal.g_oCurrentLangIndex.get()));
		}
		
		FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
		oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select_the_check_type"),
				oOptionList, false);
		oFormSelectionBox.show();
		if (!oFormSelectionBox.isUserCancel()) {
			ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
			int iOption = oSelectionBoxResult.get(0).intValue();
			m_oFuncCheck.setCustomType(oOptionIdxList.get(iOption));
			
			if(!m_oFuncCheck.isOldCheck()){
				boolean bMatchCondition = AppGlobal.g_oFuncOverrideList.get(AppGlobal.g_oFuncOutlet.get().getOutletId())
						.checkOrderingTypeOverride(Integer.parseInt(m_oFuncCheck.getTableNo()), m_oFuncCheck.getTableExtension(), 0, m_oFuncCheck.getCustomTypeId());
				
				if(!bMatchCoditionBefore && bMatchCondition)
					this.checkTakeout(false);
				else if(bMatchCoditionBefore && !bMatchCondition)
					this.checkDineIn(false);
			}
			
			// Set result flag = success for auto function
			AppGlobal.g_sResultForAutoFunction.set(AppGlobal.AUTO_FUNCTIONS_RESULT_LIST.success.name());
		}
		
	}
	
	public void transferCheckToTargetOutlet() {
		String sErrMsg = "";
		if (m_oFuncCheck.isNewCheckWithNoItem()) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("no_item_ordered"));
			return;
		}
		
		// Check there is new item exist and ask to send check before chosen
		// items
		if (m_oFuncCheck.hasNewItem(false)) {
			promptErrorDialogBoxForNewCheck();
			return;
		}
		
		// block transfer check to target outlet with partial payments
		if (AppGlobal.g_oFuncStation.get().isPartialPayment() && !m_oFuncCheck.getCheckPaymentList().isEmpty() && !m_oFuncCheck.isPaid(false)) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("partial_payment_is_not_allowed_in_transfer_check_to_target_outlet"));
			return;
		}
		
		// Check whether check discount exist
		if (m_oFuncCheck.hasCheckDiscount(true, false)) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_apply_on_check_contains_check_discount"));
			return;
		}
		
		// check Assigned Target outlet
		String sAssignedOutletId = m_oFuncCheck.getCheckExtraInfoByCheckIdAndVariable(m_oFuncCheck.getCheckId(),
				PosCheckExtraInfo.VARIABLE_TARGET_OUTLET_ID);
		int iAssignedOutletId = 0;
		if (sAssignedOutletId.isEmpty()) {
			// call assigned target outlet id
			iAssignedOutletId = assignCheckToTargetOutlet();
		} else
			iAssignedOutletId = Integer.parseInt(sAssignedOutletId);
		
		if (iAssignedOutletId == 0)
			return;
		
		// load target outlet
		FuncOutlet oTargetFuncOutlet = new FuncOutlet();
		int iRet = oTargetFuncOutlet.loadOutlet(iAssignedOutletId, false);
		if (iRet == 1 || iRet == 2) {
			showErrorDialogBox(oTargetFuncOutlet.getLastErrorMessage());
			return;
		}
		
		String sTableNo = "";
		String sTableExtension = "";
		// Ask new table
		while (true) {
			sErrMsg = "";
			FormAskTable oFormAskTable = new FormAskTable(this);
			oFormAskTable.init(0, true, iAssignedOutletId);
			oFormAskTable.setTitle(AppGlobal.g_oLang.get()._("enter_table"));
			oFormAskTable.show();
			
			if (oFormAskTable.isCanelClick())
				return;
			
			sTableNo = Integer.toString(oFormAskTable.getTableNo());
			sTableExtension = oFormAskTable.getTableExtension();
			
			int iSectionId = this.checkAndSetTableSectionBeforeNewTable(iAssignedOutletId, 0, sTableNo,
					sTableExtension);
			
			String sMessage = AppGlobal.g_oLang.get()._("confirm_to_transfer_check_to") + " "
					+ oTargetFuncOutlet.getOutletNameByIndex(AppGlobal.g_oCurrentLangIndex.get())
					+ System.lineSeparator() + AppGlobal.g_oLang.get()._("table") + " " + sTableNo + sTableExtension
					+ " ";
			FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("confirm"),
					AppGlobal.g_oLang.get()._("cancel"), this);
			oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
			oFormConfirmBox.setMessage(sMessage);
			oFormConfirmBox.show();
			if (oFormConfirmBox.isOKClicked() == false)
				return;
			
			String sResponse = null;
			sResponse = m_oFuncCheck.transferCheckToTargetOutlet(AppGlobal.g_oFuncStation.get().getStationId(),
					oTargetFuncOutlet.getShopId(), oTargetFuncOutlet.getOutletId(), sTableNo, sTableExtension,
					iSectionId, AppGlobal.g_oFuncUser.get().getUserId());
			if (sResponse != null) {
				String[] sResponseList = sResponse.split(",", -1);
				sErrMsg = AppGlobal.g_oLang.get()._(sResponseList[0]);
				if (sResponseList.length > 1) {
					PosStation oLockedStation = new PosStation();
					oLockedStation.readById(Integer.parseInt(sResponseList[1]));
					sErrMsg += (" " + oLockedStation.getName(AppGlobal.g_oCurrentLangIndex.get()));
				}
				showErrorDialogBox(sErrMsg);
				continue;
			}
			break;
		}
		
		// remove all items and void check
		m_oFuncCheck.getWholeItemList().clear();
		
		// remove all extra infos
		List<PosCheckExtraInfo> oPosCheckExtraInfoList = m_oFuncCheck.getCheckExtraInfoList();
		for (int i = oPosCheckExtraInfoList.size() - 1; i >= 0; i--) {
			if (oPosCheckExtraInfoList.get(i).getBy().compareTo(PosCheckExtraInfo.BY_CHECK) == 0
					&& oPosCheckExtraInfoList.get(i).getVariable()
					.compareTo(PosCheckExtraInfo.VARIABLE_TARGET_OUTLET_ID) != 0)
				m_oFuncCheck.getCheckExtraInfoList().remove(i);
		}
		
		// remove all tax sc ref
		m_oFuncCheck.clearCheckTaxScRefList();
		
		// Void check in original outlet
		m_sCurrentFunctionKey = AppGlobal.FUNC_LIST.transfer_check_to_target_outlet.name();
		fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.void_check.name()), "", -1, -1, false, null);
		m_sCurrentFunctionKey = "";
	}
	
	private void promptErrorDialogBoxForNewCheck() {
		this.showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_apply_on_new_check"));
	}
	
	private void promptErrorDialogBoxForCleaningCheck() {
		this.showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_apply_on_cleaning_table"));
	}
	
	private boolean notAllowNewCheck() {
		if (!m_oFuncCheck.isOldCheck()) {
			promptErrorDialogBoxForNewCheck();
			return true;
		}
		return false;
	}
	
	private int checkAndSetTableSectionBeforeNewTable(int iOutletId, int iSectionId, String sTableNo,
	                                                  String sTableExtension) {
		FuncOutlet oFuncOutlet;
		if (iSectionId != 0)
			return iSectionId;
		if (iOutletId == AppGlobal.g_oFuncOutlet.get().getOutletId())
			oFuncOutlet = AppGlobal.g_oFuncOutlet.get();
		else {
			oFuncOutlet = new FuncOutlet();
			if (oFuncOutlet.loadOutlet(iOutletId, false) != 0)
				return iSectionId;
		}
		if (oFuncOutlet.getFloorPlan(oFuncOutlet.getBusinessPeriod().getFloorPlanId()) != null) {
			// read section id from floor plan map
			int iMapCount = oFuncOutlet.getFloorPlan(oFuncOutlet.getBusinessPeriod().getFloorPlanId()).getMapCount();
			for (int i=0; i<iMapCount; i++) {
				int iTableCount = oFuncOutlet.getFloorPlan(oFuncOutlet.getBusinessPeriod().getFloorPlanId()).getMap(i).getTableCount();
				for (int j=0; j<iTableCount; j++) {
					OutFloorPlanTable oOutFloorPlanTable = oFuncOutlet.getFloorPlan(oFuncOutlet.getBusinessPeriod().getFloorPlanId()).getMap(i).getTable(j);
					if (Integer.parseInt(sTableNo) == oOutFloorPlanTable.getTable() && sTableExtension.equals(oOutFloorPlanTable.getTableExt())) {
						iSectionId = oOutFloorPlanTable.getSectionId();
						break;
					}
				}
			}
			
			if (iSectionId != 0)
				return iSectionId;
			else {
				if (AppGlobal.g_oFuncStation.get().isSupportTableSection()) {
					if (oFuncOutlet.getOutTableSectionList().getSectionsList().size() > 0) {
						OutTableSectionList oOutTableSectionsList = oFuncOutlet.getOutTableSectionList();
						ArrayList<String> oOptionList = new ArrayList<String>();
						ArrayList<Integer> oOptionIdxList = new ArrayList<Integer>();
						Iterator<Entry<Integer, OutTableSection>> oEntries = oOutTableSectionsList.getSectionsList().entrySet().iterator();
						while (oEntries.hasNext()) {
							Entry<Integer, OutTableSection> thisEntry = oEntries.next();
							oOptionIdxList.add(thisEntry.getKey());
							OutTableSection oTmpOutTableSections = (OutTableSection) thisEntry.getValue();
							oOptionList.add(oTmpOutTableSections.getSectName(AppGlobal.g_oCurrentLangIndex.get()));
						}
						String[] sTableNames = AppGlobal.g_oFuncOutlet.get().getTableName(sTableNo, sTableExtension);
						FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
						oFormSelectionBox.initWithSingleSelection(
								AppGlobal.g_oLang.get()._("table") + sTableNames[AppGlobal.g_oCurrentLangIndex.get() - 1]
										+ " " + AppGlobal.g_oLang.get()._("please_select_the_table_section"),
								oOptionList, false);
						oFormSelectionBox.show();
						if (!oFormSelectionBox.isUserCancel()) {
							ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
							int iOption = oSelectionBoxResult.get(0).intValue();
							return oOptionIdxList.get(iOption);
						}
						return iSectionId;
					}
					return iSectionId;
				}
			}
		}
		return iSectionId;
	}
	
	private void processKitchenMonitorQsrVoidItem(FuncCheckItem oFuncCheckItem, BigDecimal dQty) {
		// Not change in change item quantity or void item
		if (dQty.compareTo(BigDecimal.ZERO) == 0)
			return;
		
		// kitchen monitor void item
		if (m_oFuncKitchenMonitor.isSupportKitchenMonitor()
				&& oFuncCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_KITCHEN_MONITOR,
				PosCheckExtraInfo.VARIABLE_DISPLAY_SEQUENCE) != null) {
			MenuItemCourseList oMenuItemCourseList = new MenuItemCourseList();
			oMenuItemCourseList.readItemCourseList();
			
			int iCourseId = oFuncCheckItem.getCheckItem().getCourseId();
			String sCourseCode = "";
			if (iCourseId > 0) {
				for (MenuItemCourse iCourse : oMenuItemCourseList.getItemCourseList()) {
					if (iCourse.getIcouId() == iCourseId) {
						sCourseCode = iCourse.getCode();
						break;
					}
				}
			}
			
			FormKitchenMonitorOperation oFormKitchenMonitorOperation = new FormKitchenMonitorOperation(
					m_oFuncKitchenMonitor, this);
			oFormKitchenMonitorOperation.initializeKitchenMonitorOperation();
			oFormKitchenMonitorOperation.kitchenMonitorQsrVoidItem(m_oFuncCheck.getCheckNo(), sCourseCode,
					Integer.parseInt(oFuncCheckItem.getExtraInfoBySectionAndVariable(
							PosCheckExtraInfo.SECTION_KITCHEN_MONITOR, PosCheckExtraInfo.VARIABLE_DISPLAY_SEQUENCE)),
					dQty.intValue());
			if (oFuncCheckItem.hasModifier()) {
				for (FuncCheckItem oFuncCheckItemModifier : oFuncCheckItem.getModifierList()) {
					// normal item modifier
					//int iModifierCourseId = oFuncCheckItemModifier.getCheckItem().getCourseId();
					int iModifierCourseId = oFuncCheckItemModifier.getParentFuncCheckItem().getCheckItem().getCourseId();
					String sModifierCourseCode = "";
					if (iModifierCourseId > 0) {
						for (MenuItemCourse iCourse : oMenuItemCourseList.getItemCourseList()) {
							if (iCourse.getIcouId() == iModifierCourseId) {
								sModifierCourseCode = iCourse.getCode();
								break;
							}
						}
					}
					oFormKitchenMonitorOperation.kitchenMonitorQsrVoidItem(m_oFuncCheck.getCheckNo(),
							sModifierCourseCode,
							Integer.parseInt(oFuncCheckItemModifier.getExtraInfoBySectionAndVariable(
									PosCheckExtraInfo.SECTION_KITCHEN_MONITOR,
									PosCheckExtraInfo.VARIABLE_DISPLAY_SEQUENCE)),
							oFuncCheckItemModifier.getCheckItem().getBaseQty().multiply(dQty).intValue());
				}
			}
			
			if (oFuncCheckItem.hasChildItem()) {
				for (FuncCheckItem oFuncCheckChildItem : oFuncCheckItem.getChildItemList()) {
					int iChildCourseId = oFuncCheckChildItem.getCheckItem().getCourseId();
					String sChildCourseCode = "";
					if (iChildCourseId > 0) {
						for (MenuItemCourse iCourse : oMenuItemCourseList.getItemCourseList()) {
							if (iCourse.getIcouId() == iChildCourseId) {
								sChildCourseCode = iCourse.getCode();
								break;
							}
						}
					}
					// child item
					oFormKitchenMonitorOperation.kitchenMonitorQsrVoidItem(m_oFuncCheck.getCheckNo(), sChildCourseCode,
							Integer.parseInt(oFuncCheckChildItem.getExtraInfoBySectionAndVariable(
									PosCheckExtraInfo.SECTION_KITCHEN_MONITOR,
									PosCheckExtraInfo.VARIABLE_DISPLAY_SEQUENCE)),
							oFuncCheckChildItem.getCheckItem().getBaseQty().multiply(dQty).intValue());
					// child item modifier
					for (FuncCheckItem oFuncCheckChildItemModifier : oFuncCheckChildItem.getModifierList()) {
						//int iChildModifierCourseId = oFuncCheckChildItemModifier.getCheckItem().getCourseId();
						int iChildModifierCourseId = oFuncCheckChildItemModifier.getParentFuncCheckItem().getCheckItem().getCourseId();
						String sChildModifierCourseCode = "";
						if (iChildModifierCourseId > 0) {
							for (MenuItemCourse iCourse : oMenuItemCourseList.getItemCourseList()) {
								if (iCourse.getIcouId() == iChildModifierCourseId) {
									sChildModifierCourseCode = iCourse.getCode();
									break;
								}
							}
						}
						oFormKitchenMonitorOperation.kitchenMonitorQsrVoidItem(m_oFuncCheck.getCheckNo(),
								sChildModifierCourseCode,
								Integer.parseInt(oFuncCheckChildItemModifier.getExtraInfoBySectionAndVariable(
										PosCheckExtraInfo.SECTION_KITCHEN_MONITOR,
										PosCheckExtraInfo.VARIABLE_DISPLAY_SEQUENCE)),
								oFuncCheckChildItemModifier.getCheckItem().getBaseQty().multiply(dQty).intValue());
					}
				}
			}
			oFormKitchenMonitorOperation.stepControl();
			oFormKitchenMonitorOperation.show();
		}
	}
	
	// kitchen monitor add item for change item quantity
	// oFuncCheckItem for sigle item change qty
	// oFuncCheckItems for rush order/pending item/new order
	// oPantryMessageItems for pantry messages
	private void processKitchenMonitorQsrAddItem(FuncCheckItem oFuncCheckItem, BigDecimal dAddQty,
	                                             ArrayList<FuncCheckItem> oFuncCheckItems, Boolean bRushOrder,
	                                             List<HashMap<String, Object>> oPantryMessageItems) {
		if (dAddQty != null && dAddQty.compareTo(BigDecimal.ZERO) == 0)
			return;
		
		if (!m_oFuncKitchenMonitor.isSupportKitchenMonitor())
			return;
		
		if (oFuncCheckItem != null && !oFuncCheckItem.isOldItem())
			return;
		
		boolean bChangeQty = (dAddQty != null);
		boolean bPantryMessage = (oPantryMessageItems != null && !oPantryMessageItems.isEmpty());
		
		List<FuncCheckItem> oFuncCheckItemList = new ArrayList<FuncCheckItem>();
		if (oFuncCheckItem != null) {
			oFuncCheckItemList.add(oFuncCheckItem);
			if (oFuncCheckItem.hasModifier()) {
				for (FuncCheckItem oFuncCheckItemModifier : oFuncCheckItem.getModifierList()) {
					// normal item modifier
					oFuncCheckItemList.add(oFuncCheckItemModifier);
				}
			}
			
			if (oFuncCheckItem.hasChildItem()) {
				for (FuncCheckItem oFuncCheckChildItem : oFuncCheckItem.getChildItemList()) {
					// child item
					oFuncCheckItemList.add(oFuncCheckChildItem);
					// child item modifier
					for (FuncCheckItem oFuncCheckChildItemModifier : oFuncCheckChildItem.getModifierList()) {
						oFuncCheckItemList.add(oFuncCheckChildItemModifier);
					}
				}
			}
		} else {
			if (oFuncCheckItems != null && !bChangeQty)
				oFuncCheckItemList = oFuncCheckItems;
		}
		
		FormKitchenMonitorOperation oFormKitchenMonitorOperation = new FormKitchenMonitorOperation(
				m_oFuncKitchenMonitor, this);
		oFormKitchenMonitorOperation.initializeKitchenMonitorOperation();
		
		MenuItemCategoryList oMenuItemCategoryList = new MenuItemCategoryList();
		oMenuItemCategoryList.readItemCategoryList();
		
		MenuItemCourseList oMenuItemCourseList = new MenuItemCourseList();
		oMenuItemCourseList.readItemCourseList();
		
		PosItemPrintQueueList oPosItemPrintQueueList = new PosItemPrintQueueList();
		oPosItemPrintQueueList.readItemQueueListByShopAndOutletId(AppGlobal.g_oFuncOutlet.get().getShopId(),
				AppGlobal.g_oFuncOutlet.get().getOutletId());
		
		if (!bChangeQty && !bRushOrder && !bPantryMessage) {
			// kitchen monitor new check first
			// assign values to open check
			String sStationCode = AppGlobal.g_oFuncStation.get().getStation().getCode();
			
			String sDestinationId = m_oFuncKitchenMonitor.getDestinationIdFineDining();
			
			if (m_oFuncCheck.getOrderingType().equals(PosCheck.ORDERING_TYPE_TAKEOUT))
				sDestinationId = m_oFuncKitchenMonitor.getDestinationIdTakeOut();
			
			int iGuest = m_oFuncCheck.getCover();
			int iUserId;
			try {
				iUserId = Integer.parseInt(AppGlobal.g_oFuncUser.get().getUserNumber());
			} catch (Exception e) {
				iUserId = 0;
				AppGlobal.stack2Log(e);
			}
			
			String sUserName = AppGlobal.g_oFuncUser.get().getUserName(AppGlobal.g_oCurrentLangIndex.get());
			oFormKitchenMonitorOperation.kitchenMonitorQsrOpenCheck(m_oFuncCheck.getCheckNo(), sStationCode,
					sDestinationId, iGuest, m_oFuncCheck.getTableNoWithExtensionForDisplay(), iUserId, sUserName);
		}
		
		if (!oFuncCheckItemList.isEmpty()) {
			for (FuncCheckItem oTempFuncCheckItem : oFuncCheckItemList) {
				int iCategoryId = oTempFuncCheckItem.getCheckItem().getCategoryId();
				String sCategoryCode = "";
				if (iCategoryId > 0) {
					for (MenuItemCategory iCategory : oMenuItemCategoryList.getItemCategoryList()) {
						if (iCategory.getIcatId() == iCategoryId) {
							sCategoryCode = iCategory.getCode();
							break;
						}
					}
				}
				
				String sDepartmentCode = "";
				int iPrintQueueId = 0;
				for (int i = 1; i <= 10; i++) {
					// Print Queue(s) Label
					iPrintQueueId = oTempFuncCheckItem.getCheckItem().getPrintQueueWithIndex(i);
					if (iPrintQueueId > 0)
						break;
				}
				
				for (PosItemPrintQueue oItemPrintQueue : oPosItemPrintQueueList.getItemPrintQueueList().values()) {
					if (oItemPrintQueue.getMenuItpqId() == iPrintQueueId) {
						sDepartmentCode = Integer.toString(oItemPrintQueue.getSeq());
						break;
					}
				}
				
				int iCourseId = oTempFuncCheckItem.getCheckItem().getCourseId();
				
				String sCourseCode = "";
				if (iCourseId > 0) {
					for (MenuItemCourse iCourse : oMenuItemCourseList.getItemCourseList()) {
						if (iCourse.getIcouId() == iCourseId) {
							sCourseCode = iCourse.getCode();
							break;
						}
					}
				}
				
				int iSeatNo = oTempFuncCheckItem.getCheckItem().getSeatNo();
				int iItemType = FormKitchenMonitorOperation.ITEM_TYPE_NORMAL_ITEM;
				int iItemNumber = Integer.parseInt(oTempFuncCheckItem.getExtraInfoBySectionAndVariable(
						PosCheckExtraInfo.SECTION_KITCHEN_MONITOR, PosCheckExtraInfo.VARIABLE_DISPLAY_SEQUENCE));
				int iParentItemNumber = 0;
				String sDescription = oTempFuncCheckItem.getMenuItemName(AppGlobal.g_oCurrentLangIndex.get());
				if (oTempFuncCheckItem.isOpenDescription())
					sDescription = oTempFuncCheckItem.getItemDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get());
				
				BigDecimal dQty = oTempFuncCheckItem.getCheckItem().getQty();
				if (bChangeQty)
					dQty = dAddQty;
				
				if (oTempFuncCheckItem.isSetMenuItem()) {
					if (oTempFuncCheckItem.getParentFuncCheckItem() != null) {
						FuncCheckItem oParentItem = oTempFuncCheckItem.getParentFuncCheckItem();
						String sParentSequence = oParentItem.getExtraInfoBySectionAndVariable(
								PosCheckExtraInfo.SECTION_KITCHEN_MONITOR, PosCheckExtraInfo.VARIABLE_DISPLAY_SEQUENCE);
						iParentItemNumber = Integer.parseInt(sParentSequence);
					}
					
					iItemType = FormKitchenMonitorOperation.ITEM_TYPE_CHILD_ITEM;
					if (bChangeQty)
						dQty = dAddQty.multiply(oTempFuncCheckItem.getCheckItem().getBaseQty());
					else
						dQty = oTempFuncCheckItem.getCheckItem().getQty();
				} else if (oTempFuncCheckItem.isModifierItem()) {
					if (oTempFuncCheckItem.getParentFuncCheckItem() != null) {
						FuncCheckItem oParentItem = oTempFuncCheckItem.getParentFuncCheckItem();
						String sParentSequence = oParentItem.getExtraInfoBySectionAndVariable(
								PosCheckExtraInfo.SECTION_KITCHEN_MONITOR, PosCheckExtraInfo.VARIABLE_DISPLAY_SEQUENCE);
						iParentItemNumber = Integer.parseInt(sParentSequence);
					}
					
					iItemType = FormKitchenMonitorOperation.ITEM_TYPE_MODIFIER_ITEM;
					if (bChangeQty)
						dQty = dAddQty.multiply(oTempFuncCheckItem.getCheckItem().getBaseQty());
					else
						dQty = oTempFuncCheckItem.getCheckItem().getQty();
					
					//Get parent item course id
					iCourseId = oTempFuncCheckItem.getParentFuncCheckItem().getCheckItem().getCourseId();
					sCourseCode = "";
					if (iCourseId > 0) {
						for (MenuItemCourse iCourse : oMenuItemCourseList.getItemCourseList()) {
							if (iCourse.getIcouId() == iCourseId) {
								sCourseCode = iCourse.getCode();
								break;
							}
						}
					}
				}
				
				int iRushOrder = 0;
				if (bRushOrder)
					iRushOrder = 1;
				oFormKitchenMonitorOperation.kitchenMonitorQsrAddItem(m_oFuncCheck.getCheckNo(), sCourseCode,
						iItemType, iItemNumber, iParentItemNumber, oTempFuncCheckItem.getCheckItem().getCode(),
						sDepartmentCode, sCategoryCode, dQty.intValue(), 0, sDescription, iSeatNo, iRushOrder);
			}
		}
		
		if (bPantryMessage) {
			for (HashMap<String, Object> oPantryMessageItem : oPantryMessageItems) {
				FuncCheckItem oTempFuncCheckItem = (FuncCheckItem) oPantryMessageItem.get("parentItem");
				
				int iItemNumber = (int) oPantryMessageItem.get("pantryMessageSeq");
				String sCategoryCode = "";
				String sDepartmentCode = "";
				int iPrintQueueId = 0;
				for (int i = 1; i <= 10; i++) {
					// Print Queue(s) Label
					iPrintQueueId = oTempFuncCheckItem.getCheckItem().getPrintQueueWithIndex(i);
					if (iPrintQueueId > 0)
						break;
				}
				for (PosItemPrintQueue oItemPrintQueue : oPosItemPrintQueueList.getItemPrintQueueList().values()) {
					if (oItemPrintQueue.getMenuItpqId() == iPrintQueueId) {
						sDepartmentCode = Integer.toString(oItemPrintQueue.getSeq());
						break;
					}
				}
				String sCourseCode = "";
				int iSeatNo = oTempFuncCheckItem.getCheckItem().getSeatNo();
				int iItemType = FormKitchenMonitorOperation.ITEM_TYPE_PIECE_DETAIL;
				
				int iParentItemNumber = Integer.parseInt(oTempFuncCheckItem.getExtraInfoBySectionAndVariable(
						PosCheckExtraInfo.SECTION_KITCHEN_MONITOR, PosCheckExtraInfo.VARIABLE_DISPLAY_SEQUENCE));
				String sDescription = (String) oPantryMessageItem.get("pantryMessageDesc");
				BigDecimal dQty = BigDecimal.ZERO;
				int iRushOrder = 0;
				String sItemCode = "";
				oFormKitchenMonitorOperation.kitchenMonitorQsrAddItem(m_oFuncCheck.getCheckNo(), sCourseCode,
						iItemType, iItemNumber, iParentItemNumber, sItemCode, sDepartmentCode, sCategoryCode,
						dQty.intValue(), 0, sDescription, iSeatNo, iRushOrder);
			}
		}
		
		if (!bChangeQty && !bRushOrder && !bPantryMessage) {
			// kitchen monitor calculate check
			// assign values to calculate check
			double dItemTotal = m_oFuncCheck.getItemTotal().doubleValue();
			double dTaxTotal = m_oFuncCheck.getTaxTotal().doubleValue();
			double dCheckTotal = m_oFuncCheck.getCheckTotal().doubleValue();
			oFormKitchenMonitorOperation.kitchenMonitorQsrCalculateCheck(m_oFuncCheck.getCheckNo(), dItemTotal,
					dTaxTotal, dCheckTotal);
		}
		
		oFormKitchenMonitorOperation.stepControl();
		oFormKitchenMonitorOperation.show();
	}
	
	// Get check print format id
	private int getCheckPrintFormatid() {
		int i, iChosenCheckPfmtId = 0;
		int iCheckPrtFmtCount = 0;
		
		for (i = 1; i <= 5; i++) {
			if (AppGlobal.g_oFuncStation.get().getStation().getCheckPfmtId(i) > 0) {
				iChosenCheckPfmtId = AppGlobal.g_oFuncStation.get().getStation().getCheckPfmtId(i);
				iCheckPrtFmtCount++;
			}
		}
		
		for (i = 1; i <= 5; i++) {
			if (AppGlobal.g_oFuncStation.get().getStation().getDetailCheckPfmtId(i) > 0) {
				iChosenCheckPfmtId = AppGlobal.g_oFuncStation.get().getStation().getDetailCheckPfmtId(i);
				iCheckPrtFmtCount++;
			}
		}
		
		// No check format is defined
		if (iCheckPrtFmtCount == 0) {
			// Error occur
			showErrorDialogBox(AppGlobal.g_oLang.get()._("no_print_format_is_defined"));
			return 0;
		}
		
		// Show check format selection if more than one check format is defined
		if (iCheckPrtFmtCount > 1) {
			ArrayList<String> oOptionList = new ArrayList<String>();
			HashMap<Integer, Integer> oPrintFormatIdList = new HashMap<Integer, Integer>();
			int iPfmtId = 0, iFormatCount = 0;
			
			for (i = 1; i <= 5; i++) {
				iPfmtId = AppGlobal.g_oFuncStation.get().getStation().getCheckPfmtId(i);
				if (iPfmtId > 0) {
					oOptionList.add(AppGlobal.g_oFuncStation.get().getPrintFormatNameByPfmtId(iPfmtId,
							AppGlobal.g_oCurrentLangIndex.get()));
					oPrintFormatIdList.put(iFormatCount, iPfmtId);
					iFormatCount++;
				}
			}
			
			for (i = 1; i <= 5; i++) {
				iPfmtId = AppGlobal.g_oFuncStation.get().getStation().getDetailCheckPfmtId(i);
				if (iPfmtId > 0) {
					oOptionList.add(AppGlobal.g_oFuncStation.get().getPrintFormatNameByPfmtId(iPfmtId,
							AppGlobal.g_oCurrentLangIndex.get()));
					oPrintFormatIdList.put(iFormatCount, iPfmtId);
					iFormatCount++;
				}
			}
			
			FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
			oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select_the_print_format"),
					oOptionList, false);
			oFormSelectionBox.show();
			
			if (oFormSelectionBox.isUserCancel())
				return 0;
			else {
				ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
				int iPrtFmtIndex = oSelectionBoxResult.get(0);
				iChosenCheckPfmtId = oPrintFormatIdList.get(iPrtFmtIndex);
			}
		}
		
		return iChosenCheckPfmtId;
	}
	
	private boolean prePrintCheckHandling() {
		// Print Check Control
		JSONObject oPrintCheckControlJSONObject = AppGlobal.g_oFuncStation.get().getPrintCheckControl();
		if (oPrintCheckControlJSONObject != null && oPrintCheckControlJSONObject.optString("support").equals("y")) {
			// Member Attachment
			if (oPrintCheckControlJSONObject.optString("need_member_attached").equals("y")) {
				if (m_oFuncCheck.hasMember() || (m_oFuncCheck.getCheckExtraInfoBySectionAndVariable(
						PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID,
						0) != null
						&& !m_oFuncCheck
						.getCheckExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE,
								PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0)
						.isEmpty()))
					return true;
				
				this.showErrorDialogBox(AppGlobal.g_oLang.get()._("no_member_is_attached"));
				return false;
			}
		}
		return true;
	}
	
	//Get check ownership setting
	private HashMap<String, String> getCheckOwnershipSetting() {
		HashMap<String, String> oResultMap = new HashMap<String, String>();
		oResultMap.put("support", "n");
		oResultMap.put("type", "");
		
		// Order Ownership
		JSONObject oCheckOwnershipJSONObject = AppGlobal.g_oFuncStation.get().getCheckOwnership();
		if (oCheckOwnershipJSONObject != null && oCheckOwnershipJSONObject.optString("support").equals("y"))
			oResultMap.put("support", "y");
		if (oCheckOwnershipJSONObject != null && oCheckOwnershipJSONObject.has("type"))
			oResultMap.put("type", oCheckOwnershipJSONObject.optString("type"));
		return oResultMap;
	}
	
	// For standalone mode
	// Provide a function to print all checks for later manual handling
	private void printAllOldChecksForStandalone() {
		// Ask if current station takes all checks ownership
		FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
				AppGlobal.g_oLang.get()._("no"), this);
		oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("standalone_mode"));
		String sMessage = "***" + AppGlobal.g_oLang.get()._("standalone_mode") + "***" + System.lineSeparator() + System.lineSeparator() +
				AppGlobal.g_oLang.get()._("print_all_checks_created_before") + "?";
		oFormConfirmBox.setMessage(sMessage);
		oFormConfirmBox.show();
		if (oFormConfirmBox.isOKClicked()) {
			
			// Check if there is print queue defined
			int iPrtqId = AppGlobal.g_oFuncStation.get().getStation().getReceiptPrtqId();
			if (iPrtqId == 0) {
				iPrtqId = AppGlobal.g_oFuncStation.get().getStation().getCheckPrtqId();
				
				// No print queue defined
				showErrorDialogBox(AppGlobal.g_oLang.get()._("no_print_queue_is_defined"));
				return;
			}
			
			// Select the print format
			int iReceiptFormatId = 0;
			while (true) {
				iReceiptFormatId = selectReceiptFormat(false);
				if (iReceiptFormatId == 0) {
					// No format is selected
					oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
							AppGlobal.g_oLang.get()._("no"), this);
					oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("standalone_mode"));
					oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("confirm_not_to_reprint") + "?");
					oFormConfirmBox.show();
					
					if (!oFormConfirmBox.isOKClicked())
						continue;
				} else {
					oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
							AppGlobal.g_oLang.get()._("no"), this);
					oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("standalone_mode"));
					oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("confirm_to_reprint") + "?");
					// Set a longer timeout (300s)
					oFormConfirmBox.setConfirmTimeout(300 * 1000);
					oFormConfirmBox.show();
					
					if (oFormConfirmBox.isOKClicked())
						break;
				}
				
				return;
			}
			
			PosCheck oPosCheck = new PosCheck();
			
			// Print paid check
			JSONArray oCheckListJSONArray;
			oCheckListJSONArray = oPosCheck.getCheckListByBusinessDayPaid(
					AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), 0, PosCheck.PAID_FULL_PAID,
					false);
			
			if (oCheckListJSONArray != null && oCheckListJSONArray.length() > 0) {
				for (int i = 0; i < oCheckListJSONArray.length(); i++) {
					JSONObject oCheckJSONObject = oCheckListJSONArray.optJSONObject(i);
					if (oCheckJSONObject == null)
						continue;
					PosCheck oCheck = new PosCheck(oCheckJSONObject);
					
					oPosCheck.printReceipt(iPrtqId, iReceiptFormatId, oCheck.getCheckId(), AppGlobal.g_oCurrentLangIndex.get(), 1, "", "", false, null);
				}
			}
			
			// Print open check
			oCheckListJSONArray = oPosCheck.getCheckListByBusinessDayPaid(
					AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), 0, PosCheck.PAID_NOT_PAID,
					false);
			
			if (oCheckListJSONArray != null && oCheckListJSONArray.length() > 0) {
				for (int i = 0; i < oCheckListJSONArray.length(); i++) {
					JSONObject oCheckJSONObject = oCheckListJSONArray.optJSONObject(i);
					if (oCheckJSONObject == null)
						continue;
					PosCheck oCheck = new PosCheck(oCheckJSONObject);
					
					oPosCheck.printReceipt(iPrtqId, iReceiptFormatId, oCheck.getCheckId(), AppGlobal.g_oCurrentLangIndex.get(), 1, "", "", true, null);
				}
			}
		}
	}
	
	// Check if purge sales for standalone mode is performed before or not
	private boolean checkIfPerformPurgeSalesForStandaloneMode() {
		boolean bRet = false;
		
		try {
			String sFilename = "cfg/standalone.txt";
			File file = new File(sFilename);
			if (file.exists()) {
				// Standalone file exists -> purge data is performed before
				bRet = true;
			}
		} catch (Exception e) {
			AppGlobal.stack2Log(e);
		}
		
		return bRet;
	}
	
	// Mark that the purge sales for standalone mode is performed
	private void markPurgeSalesForStandaloneModeFinish() {
		try {
			DateTime today = AppGlobal.getCurrentTime(false);
			DateTimeFormatter dateFormat = DateTimeFormat.forPattern("yyyyMMdd HH:mm:ss.SSS");
			String sCurrentTime = dateFormat.print(today);
			
			String sFilename = "cfg/standalone.txt";
			File file = new File(sFilename);
			
			file.getParentFile().mkdirs();
			
			//	Write to file
			FileWriter fstream = new FileWriter(file, true);
			fstream.write(sCurrentTime);
			fstream.close();
		} catch (Exception e) {
			AppGlobal.stack2Log(e);
		}
	}
	
	//get the target table by  table no and extension
	public PosOutletTable getTargetOutletTable(String sTable, String sTableExtension){
		PosOutletTable oPosOutletTable = null;
		if(sTable == null || sTableExtension == null)
			return oPosOutletTable;
		
		if(sTable.isEmpty() && sTableExtension.isEmpty())
			return oPosOutletTable;
		
		if (m_oTableStatusList.containsKey(sTable + "_" + sTableExtension)) {
			ClsTableStatus oTableStatus = m_oTableStatusList.get(sTable + "_" + sTableExtension);
			oPosOutletTable = oTableStatus.getPosOutletTable();
			return oPosOutletTable;
		}
		return oPosOutletTable;
	}
	
	public void setOpenTableCloseButtonVisible(boolean bShow) {
		m_oFrameOpenTable.setCloseButtonVisible(bShow);
		m_oFrameOpenTableWithQwertyKeyboard.setCloseButtonVisible(bShow);
	}
	
	public void hideOpenTable() {
		m_oFrameOpenTable.setVisible(false);
		m_oFrameOpenTableWithQwertyKeyboard.setVisible(false);
		m_oFrameCover.setVisible(false);
		AppGlobal.g_oFuncStation.get().setOpenTableScreenMode(AppGlobal.g_oFuncStation.get().getOpenTableScreenModeConfig());
	}
	
	public int askBarTabCover(String sTableNo, String sTableExtension) {
		int iCover = 1;
		JSONObject oOpenCheckSetting = AppGlobal.g_oFuncStation.get().getOpenCheckSetting();
		
		if(oOpenCheckSetting != null && oOpenCheckSetting.has("support") && oOpenCheckSetting.optString("support", "").equals("y")) {
			String[] sPeriodList = null;
			if(oOpenCheckSetting.has("period_ids"))
				sPeriodList = (String[]) oOpenCheckSetting.opt("period_ids");
			String sBusinessPeriodId = Integer.toString(AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getPeriodId());
			boolean bMatch = true;
			if(sPeriodList != null) {
				bMatch = false;
				for(int i = 0 ; i < sPeriodList.length ; i++) {
					if(sPeriodList[i].equals(sBusinessPeriodId)) {
						bMatch = true;
						break;
					}
				}
			}
			if (bMatch) {
				if(oOpenCheckSetting.has("ask_guest_number") && oOpenCheckSetting.optString("ask_guest_number", "").equals("y")) {
					do {
						iCover = askCover(sTableNo, sTableExtension);
						if(iCover == -1 && oOpenCheckSetting.has("ask_table_number") && oOpenCheckSetting.optString("ask_table_number", "").equals("n"))
							showErrorDialogBox(AppGlobal.g_oLang.get()._("please_input_the_no_of_guests_for_table"));
					} while (iCover == -1 && oOpenCheckSetting.has("ask_table_number") && oOpenCheckSetting.optString("ask_table_number", "").equals("n"));
				}else if(oOpenCheckSetting.has("ask_guest_number") && oOpenCheckSetting.optString("ask_guest_number", "").equals("n"))
					iCover = 1;
			}
		}else
			iCover = askCover(sTableNo, sTableExtension);
		return iCover;
	}
	
	// Override item to open price item
	private boolean overrideItemPrice(int iSectionNo, int iItemIndex, BigDecimal oDefaultInputAmount, boolean bAskItemPrice) {
		String sNewPrice = "";
		FuncCheckItem oFuncCheckItem = null;
		
		// Perform function from ordering panel
		if (iSectionNo == -1) {
			iSectionNo = m_oFrameOrderingBasket.getSelectedSectionId();
			iItemIndex = m_oFuncCheck.getLastGeneralCheckItemItemIndex(iSectionNo);
			
			oFuncCheckItem = m_oFuncCheck.getCheckItem(iSectionNo, iItemIndex);
			if (oFuncCheckItem == null) {
				// No target item
				showErrorDialogBox(AppGlobal.g_oLang.get()._("no_available_items"));
				return false;
			}
			if (oFuncCheckItem.isSetMenu()) {
				// Change the last child item price
				iItemIndex += oFuncCheckItem.getCheckItem().getChildCount();
				oFuncCheckItem = m_oFuncCheck.getCheckItem(iSectionNo, iItemIndex);
			}
		} else {
			// Get the selected item in ordering basket
			oFuncCheckItem = m_oFuncCheck.getCheckItem(iSectionNo, iItemIndex);
		}
		
		// Not allow to override old item
		// Exceptional case: For adding new item in "Split Revenue", or update old parent item after "Delete Multiple Item" in "Split Revenue", allow to update item price
		if (oFuncCheckItem.isOldItem() && !m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name())
				&& !m_oFuncCheck.isSplitRevenueMode()) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_apply_on_old_item"));
			return false;
		} else {
			if (bAskItemPrice) {
				while (true) {
					// Ask new price
					FormInputBox oFormInputBox = new FormInputBox(this);
					oFormInputBox.init();
					oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DECIMAL);
					oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("override_item_price"));
					oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("please_input_the_new_price") + ":");
					if(oDefaultInputAmount != null)
						oFormInputBox.setDefaultInputValue(AppGlobal.g_oFuncOutlet.get().roundItemAmountToString(oDefaultInputAmount));
					oFormInputBox.show();
					
					if (oFormInputBox.isUserCancel())
						return false;
					
					sNewPrice = oFormInputBox.getInputValue();
					
					// Not allow empty, non-numeric, negative amount
					if (sNewPrice == null || !sNewPrice.matches("^\\d*\\.?\\d*$")) {
						showErrorDialogBox(AppGlobal.g_oLang.get()._("invalid_input"));
						continue;
					}
					if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name())) {
						if (new BigDecimal(sNewPrice).compareTo(oDefaultInputAmount) > 0) {
							showErrorDialogBox(AppGlobal.g_oLang.get()._("input_price_should_not_be_larger_than") + " " + AppGlobal.g_oFuncOutlet.get().roundItemAmountToString(oDefaultInputAmount));
							continue;
						}
					}
					
					break;
				}
				oFuncCheckItem.setOpenPriceToItem(new BigDecimal(sNewPrice));
				if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name())) {
					if(!m_oUsePanelToSelectItemParentItem.isSplitRevenueParent())
						m_oUsePanelToSelectItemParentItem.addExtraInfo(PosCheckExtraInfo.BY_ITEM, PosCheckExtraInfo.SECTION_ITEM_TYPE, PosCheckExtraInfo.VARIABLE_SPLIT_REVENUE_ITEM, "y");
				}
			} else
				oFuncCheckItem.setOpenPriceToItem(oDefaultInputAmount);
			
			oFuncCheckItem.setOverrideToOpenPriceItem(true);
			
			calculateCheck();
			updateBasketItemPrice(iSectionNo, iItemIndex, oFuncCheckItem);
			
			// Add log to action log list
			oFuncCheckItem.addActionLog(AppGlobal.FUNC_LIST.override_item_price.name(),
					PosActionLog.ACTION_RESULT_SUCCESS, m_oFuncCheck.getTableNoWithExtensionForDisplay(),
					AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
					AppGlobal.g_oFuncOutlet.get().getOutletId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
					AppGlobal.g_oFuncStation.get().getStationId(), m_oFuncCheck.getCheckId(), "", "", "", "", "");
		}
		return true;
	}
	
	private boolean addMinimumChargeDefaultItem(String sMinimumCharge, BigDecimal dDefaultItemPrice){
		// Add default item with minimum charge
		String sMinChargeItemCode = AppGlobal.g_oFuncStation.get().getTableValidationTableMinimumChargeItemCode();
		boolean bSuccess = true;
		
		if (addItemByItemCode(sMinChargeItemCode, BigDecimal.ONE, null, null, dDefaultItemPrice).equals("")) {
			FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(m_oFrameOrderingBasket.getSelectedSectionId(), m_oFuncCheck.getLastGeneralCheckItemItemIndex(m_oFrameOrderingBasket.getSelectedSectionId()));
			oFuncCheckItem.addExtraInfo(PosCheckExtraInfo.BY_ITEM, "", PosCheckExtraInfo.VARIABLE_MIN_CHARGE_ITEM, "y");
		} else
			bSuccess = false;
		
		if (!bSuccess) {
			this.showErrorDialogBox(AppGlobal.g_oLang.get()._("fail_to_add_minimum_charge_item"));
			return false;
		}
		
		if (sMinimumCharge.isEmpty())
			sMinimumCharge = StringLib.BigDecimalToStringWithoutZeroDecimal(dDefaultItemPrice);
		
		if (m_oFuncCheck.isCheckExtraInfoExistBySectionVariableAndIndex("", PosCheckExtraInfo.VARIABLE_MIN_CHARGE, 0))
			m_oFuncCheck.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, "", PosCheckExtraInfo.VARIABLE_MIN_CHARGE, 0, sMinimumCharge);
		else
			m_oFuncCheck.addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, "", PosCheckExtraInfo.VARIABLE_MIN_CHARGE, 0, sMinimumCharge);
		return true;
	}
	
	public boolean isMinimumChargeItem(FuncCheckItem oFuncCheckItem) {
		if (oFuncCheckItem == null || !oFuncCheckItem.isMinimumChargeItem())
			return false;
		
		this.showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_perform_this_function_on_minimum_charge_item"));
		return true;
	}
	
	private FuncCheck askCheckNumberAndLoadCheck(HashMap<String, String> oFunctionParam, String sFunctionKey) {
		String sCheckPrefixNum;
		if (oFunctionParam != null && oFunctionParam.containsKey("checkNo")) {
			sCheckPrefixNum = oFunctionParam.get("checkNo");
		} else {
			// Ask check no.
			FormInputBox oFormInputBox = new FormInputBox(this);
			oFormInputBox.init();
			oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DEFAULT);
			oFormInputBox.showKeyboard();
			oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("adjust_payments"));
			oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("please_input_check_no") + ":");
			oFormInputBox.show();
			
			sCheckPrefixNum = oFormInputBox.getInputValue();
			if (sCheckPrefixNum == null || sCheckPrefixNum.length() == 0)
				return null;
		}
		
		// Wait for previous check processing finish
		waitForProcessCheckFinish("", "");
		
		FuncCheck oFuncCheck = new FuncCheck();
		if (!sFunctionKey.equals(AppGlobal.FUNC_LIST.adjust_payments.name()))
			oFuncCheck.setCurrentFunctionKey(sFunctionKey);
		if (!oFuncCheck.getCheckByCheckNum(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
				AppGlobal.g_oFuncOutlet.get().getOutletId(), sCheckPrefixNum, true)) {
			// Fail to adjust payment because check not exist
			showErrorDialogBox(oFuncCheck.getLastErrorMessage());
			return null;
		}
		
		// Init business date setup
		oFuncCheck.initBusinessDaySetup(AppGlobal.g_oFuncOutlet.get());
		oFuncCheck.addListener(this);
		
		return oFuncCheck;
	}
	
	private boolean checkIsFullPaid(FuncCheck oFuncCheck) {
		if (oFuncCheck == null || !oFuncCheck.isOldCheck())
			return false;
		
		if (!oFuncCheck.isPaid(false)) {
			// Check is not paid
			showErrorDialogBox(AppGlobal.g_oLang.get()._("check_is_not_paid"));
			return false;
		}
		return true;
	}
	
	public void repeatRoundItems() {
		List<List<FuncCheckItem>> oFuncCheckItemList = m_oFuncCheck.getWholeItemList();
		ArrayList<String> sItemDepartmentList = new ArrayList<String>();
		DateTime oLastOrderLocTime = null;
		MenuItemDeptList oItemDeptList = new MenuItemDeptList();
		
		// check if has ordered items
		if (m_oFuncCheck.getOrderedItemCount(false).equals(BigDecimal.ZERO)) {
			// no item ordered
			this.showAttentionDialogBox(AppGlobal.g_oLang.get()._("no_item_ordered"));
			return;
		}
		
		// get the last round ordered item list
		ArrayList<FuncCheckItem> oLastRoundCheckItemList = new ArrayList<FuncCheckItem>();
		if (oFuncCheckItemList != null) {
			for (List<FuncCheckItem> oItemListForSingleSeat : oFuncCheckItemList) {
				if (!oItemListForSingleSeat.isEmpty()) {
					// loop from last items and last seats
					for (int i = oItemListForSingleSeat.size() - 1; i >= 0 ; i--) {
						if (oItemListForSingleSeat.get(i).isOldItem()) {
							if (oLastOrderLocTime == null || (oItemListForSingleSeat.get(i).getOrderLocTime()).isAfter(oLastOrderLocTime)) {
								oLastOrderLocTime = oItemListForSingleSeat.get(i).getOrderLocTime();
								oLastRoundCheckItemList.clear();
								oLastRoundCheckItemList.add(oItemListForSingleSeat.get(i));
							}
							else if(oLastOrderLocTime != null && oItemListForSingleSeat.get(i).getOrderLocTime().equals(oLastOrderLocTime))
								oLastRoundCheckItemList.add(oItemListForSingleSeat.get(i));
						}
					}
				}
			}
		}
		
		sItemDepartmentList = AppGlobal.g_oFuncStation.get().getRepeatRoundItemLimitation();
		
		// map the item department to their parent department
		if (m_oItemDeptIdListForRepeatRoundItem.isEmpty() && !sItemDepartmentList.isEmpty()) {
			// add setup department to list
			for (String sItemDepartment : sItemDepartmentList)
				m_oItemDeptIdListForRepeatRoundItem.add(Integer.parseInt(sItemDepartment));
			
			// get child department list
			oItemDeptList.readChildItemDeptListByDeptList(sItemDepartmentList);
			addChildItemDeptIdToList(oItemDeptList.getItemDeptList());
		}
		
		boolean bIsRepeat = false;
		// add item from first seat
		for(int i = oLastRoundCheckItemList.size()-1; i >= 0; i--) {
			if(!oLastRoundCheckItemList.get(i).isSetMenuItem()){
				// add item if no setup or item dept id matched with setup
				if(sItemDepartmentList.isEmpty() || (m_oItemDeptIdListForRepeatRoundItem.contains(oLastRoundCheckItemList.get(i).getCheckItem().getDepartmentId()))){
					actionForRepeatItem(oLastRoundCheckItemList.get(i), AppGlobal.FUNC_LIST.repeat_round_items.name(), BigDecimal.ZERO);
					bIsRepeat = true;
				}
			}
		}
		
		if(!bIsRepeat && !sItemDepartmentList.isEmpty()){
			// no item matched with the setup
			this.showAttentionDialogBox(AppGlobal.g_oLang.get()._(
					"no_items_matched_with_setup"));
		}
	}
	
	public BigDecimal getTotalQtyInCheckByMenuItemId(int iItemId){
		// get the new total qty for the item in the check
		List<List<FuncCheckItem>> oFuncCheckItemList = m_oFuncCheck.getWholeItemList();
		BigDecimal dSpecificItemTotal = BigDecimal.ZERO;
		if(oFuncCheckItemList != null){
			for (List<FuncCheckItem> oItemListForSingleSeat : oFuncCheckItemList) {
				if (!oItemListForSingleSeat.isEmpty()) {
					// loop from last items and last seats
					for (int i = 0; i < oItemListForSingleSeat.size(); i++) {
						if (oItemListForSingleSeat.get(i).getCheckItem().getItemId() == iItemId && !oItemListForSingleSeat.get(i).getCheckItem().isSetMenuChildItem()) {
							dSpecificItemTotal = dSpecificItemTotal.add(oItemListForSingleSeat.get(i).getCheckItem().getQty());
						}
					}
				}
			}
		}
		return dSpecificItemTotal;
	}
	
	public boolean checkOrderItemControlLimit(int iItemId, BigDecimal dIncreaseQty){
		// check whether the item will exceed the item control limit or not, return true: allow order, return false: not allow order
		if(AppGlobal.g_oFuncMenu.get().getFuncMenuItemByItemId(iItemId) != null
				&& AppGlobal.g_oFuncMenu.get().getFuncMenuItemByItemId(iItemId).getMenuItem().getItemQtyLimit().compareTo(BigDecimal.ZERO) != 0){
			
			BigDecimal dNewTotalQtyForSpecificItem = this.getTotalQtyInCheckByMenuItemId(iItemId).add(dIncreaseQty);
			BigDecimal dItemOrderControlLimit = AppGlobal.g_oFuncMenu.get().getFuncMenuItemByItemId(iItemId).getMenuItem().getItemQtyLimit();
			
			if(dNewTotalQtyForSpecificItem.compareTo(dItemOrderControlLimit) > 0)
				return false;
		}
		
		return true;
	}
	
	private void addChildItemDeptIdToList(ArrayList<MenuItemDept> oMenuItemDepts){
		// add item department id to list
		for(int i = 0; i < oMenuItemDepts.size(); i++){
			m_oItemDeptIdListForRepeatRoundItem.add(oMenuItemDepts.get(i).getIdepId());
			if(oMenuItemDepts.get(i).getChildDeptList().size() > 0){
				ArrayList<MenuItemDept> oTempMenuItemDepts = new ArrayList<MenuItemDept>(oMenuItemDepts.get(i).getChildDeptList());
				addChildItemDeptIdToList(oTempMenuItemDepts);
			}
		}
	}
	
	private boolean actionForRepeatItem(FuncCheckItem oFuncCheckItem, String sFunctionKey, BigDecimal dPreviousRepeatItemCount){
		if (repeatItem(oFuncCheckItem, dPreviousRepeatItemCount)) {
			// Check if course is set.
			// If yes, auto-assign course to new order NORMAL item
			autoAssignCourseToNewOrderItem();
			// Add hot item success
			finishAddItem(false);
			
			if (!sFunctionKey.isEmpty()) {
				AppGlobal.g_oActionLog.get().addActionLog(sFunctionKey,
						PosActionLog.ACTION_RESULT_SUCCESS, "", AppGlobal.g_oFuncUser.get().getUserId(),
						AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
						AppGlobal.g_oFuncStation.get().getStationId(), m_oFuncCheck.getCheckId(), "",
						oFuncCheckItem.getCheckItem().getCitmId(), "", "",
						oFuncCheckItem.getItemDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get()));
			}
			return true;
		}else
			return false;
	}
	
	public void updateBasketSelectedItemList(int iSectionIndex, boolean bSelect) {
		for (int j = 0; j < m_oFrameOrderingBasket.getItemCellCount(iSectionIndex); j++) {
			if (!m_oFrameOrderingBasket.isSectionCellVisible(iSectionIndex, j))
				continue;
			
			// Check select type
			switch (m_iBasketSelectType) {
				case FrameOrderingBasket.SELECT_TYPE_NEW_ITEM:
					// Select new item only
					if (m_oFrameOrderingBasket.isOldItem(iSectionIndex, j)) {
						continue;
					}
					break;
				case FrameOrderingBasket.SELECT_TYPE_OLD_ITEM:
					// Select old item only
					if (m_oFrameOrderingBasket.isOldItem(iSectionIndex, j) == false) {
						continue;
					}
					break;
				default:
					break;
			}
			
			String sKey = iSectionIndex + "_" + j;
			if (bSelect)
				m_oBasketSelectedItems.put(sKey, 0);
			else
				m_oBasketSelectedItems.remove(sKey);
		}
	}
	
	// Init consolidate item ordering basket
	public void initializeConsolidateItemsOrderingBasket(int iWidthPercent, int iHeightPercent, int iOrderingBasketHeight){
		// Init Consolidate Items Ordering Basket
		m_oFrameConsolidateItemsOrderingBasket = new FrameOrderingBasket();
		m_oTemplateBuilder.buildFrame(m_oFrameConsolidateItemsOrderingBasket, "fraConsolidateItemsOrderingBasket");
		
		if (iWidthPercent > 0) {
			int iOriginalScreenWidth = m_oFrameOrderingPanel.getWidth() + m_oFrameFuncPanel2.getWidth();
			int iOriginalPadding = m_oFrameFuncPanel2.getLeft() - m_oFrameOrderingPanel.getLeft() - m_oFrameOrderingPanel.getWidth();
			
			m_oFrameConsolidateItemsOrderingBasket.setWidth(iOriginalScreenWidth - m_oFrameOrderingPanel.getWidth());
			m_oFrameConsolidateItemsOrderingBasket.setLeft(m_oFrameOrderingPanel.getLeft() + m_oFrameOrderingPanel.getWidth() + iOriginalPadding);
		}
		
		int iOriginalScreenHeight = m_oFrameFuncPanel2.getHeight() + m_oFrameOrderingBasket.getHeight() + m_oFrameBasketExtendBar.getHeight();
		if (iHeightPercent > 0) {
			m_oFrameConsolidateItemsOrderingBasket.setHeight(iOriginalScreenHeight - m_oFrameFuncPanel2.getHeight() - m_oFrameBasketExtendBar.getHeight());
		}
		
		// check whether is enlarge ordering basket
		if (AppGlobal.g_oFuncStation.get().isEnlargeOrderingBasket())
			m_bEnlargeOrderingBasket = true;
		
		if (m_bEnlargeOrderingBasket)
			m_oFrameConsolidateItemsOrderingBasket.setHeight(iOrderingBasketHeight);
		
		//Retreive display panel zone - ordering basket setup
		PosDisplayPanelZone oOrderingBasketDisplayPanelZone =  this.getOrderingBasketDisplayPanelZone();
		
		m_oFrameConsolidateItemsOrderingBasket.init(oOrderingBasketDisplayPanelZone, FrameOrderingBasket.ORDERING_BASKET_MODE_SHOW_CONSOLIDATE_ITEMS);
		
		if (!m_oFrameOrderingBasket.isDisplayOrderingBasketExtension()) {
			m_oFrameConsolidateItemsOrderingBasket.setHeight(m_oFrameOrderingBasket.getHeight() + m_oFrameBasketExtendBar.getHeight() - m_oFrameBasketExtendBar.getRevenueHeight());
			m_oFrameConsolidateItemsOrderingBasket.extendBasket(m_oFrameBasketExtendBar.getHeight() - m_oFrameBasketExtendBar.getRevenueHeight());
		}
		
		m_oFrameConsolidateItemsOrderingBasket.setVisible(false);
		this.attachChild(m_oFrameConsolidateItemsOrderingBasket);
		
		if (AppGlobal.OPERATION_MODE.stock_delivery.equals(m_eOperationMode) == true) {
			// For consolidate items ordering basket
			if(!m_oFrameConsolidateItemsOrderingBasket.isDisplaySeatNumberSection())
				m_oFrameConsolidateItemsOrderingBasket.addSection(0, AppGlobal.g_oLang.get()._("stock_delivery_order", ""), false);
			else
				m_oFrameConsolidateItemsOrderingBasket.addSection(0, AppGlobal.g_oLang.get()._("stock_delivery_order", ""), true);
			m_oFrameConsolidateItemsOrderingBasket.setSelectedSection(0);
		} else {
			if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food)
					|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk)
					|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab)) {
				m_oFrameConsolidateItemsOrderingBasket.addSection(0, AppGlobal.g_oLang.get()._("shared", ""), false);
			} else {
				// For consolidate items ordering basket
				if(!m_oFrameConsolidateItemsOrderingBasket.isDisplaySeatNumberSection())
					m_oFrameConsolidateItemsOrderingBasket.addSection(0, AppGlobal.g_oLang.get()._("shared", ""), false);
				else
					m_oFrameConsolidateItemsOrderingBasket.addSection(0, AppGlobal.g_oLang.get()._("shared", ""), true);
			}
			for (int i = 1; i <= AppGlobal.MAX_SEATS; i++) {
				// add new section and not visible
				m_oFrameConsolidateItemsOrderingBasket.addSection(i, AppGlobal.g_oLang.get()._("seat", " ", i), false);
			}
			m_oFrameConsolidateItemsOrderingBasket.setSelectedSection(0);
		}
	}
	
	private boolean loadCheckByTableNum(FuncCheck oFuncCheck, String sTableNo, String sTableExtension) {
		String sOrderingMode;
		if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food))
			sOrderingMode = PosCheck.ORDERING_MODE_FAST_FOOD;
		else if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk))
			sOrderingMode = PosCheck.ORDERING_MODE_SELF_ORDER_KIOSK;
		else if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.stock_delivery))
			sOrderingMode = PosCheck.ORDERING_MODE_DELIVERY;
		else if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab))
			sOrderingMode = PosCheck.ORDERING_MODE_BAR_TAB;
		else
			sOrderingMode = PosCheck.ORDERING_MODE_FINE_DINING;
		
		return oFuncCheck.lockTable(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
				AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(), sTableNo,
				sTableExtension, true, false, sOrderingMode, "", false);
	}
	
	private void updateSearchTableCheckListTitle(String sCheckListType) {
		m_oFrameOpenTableWithQwertyKeyboard.updateCheckListUIbyOperationMode(sCheckListType);
		m_oFrameOpenTable.updateCheckListUIbyOperationMode(sCheckListType);
	}
	
	// when previous operation mode is bar tab mode, and now change back to fine dining mode, need to update serach table open check list title
	private void operationModeChangeChecking() {
		if (AppGlobal.OPERATION_MODE.bar_tab.equals(m_ePreviousOperationMode))
			updateSearchTableCheckListTitle(FrameOpenedCheckList.TYPE_OPEN_CHECK_LIST_CHECK_STATUS);
	}
	
	private boolean isUnderBasketSelectPanelMode() {
		return (m_iBasketSelectMode != FrameBasketSelectPanel.BASKET_SELECT_MODE_NO)? true: false;
	}
	
	private void finishSplitRevenueHandling() {
		if(m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name())) {
			m_sCurrentFunctionKey = "";
			
			if (m_oUsePanelToSelectItemParentItem != null)
				m_oUsePanelToSelectItemParentItem = null;
			
			if (m_oFrameStationInfoBarCover.getVisible())
				m_oFrameStationInfoBarCover.setVisible(false);
		}
	}
	
	// In "Split Revenue" function, user click "Delete Multiple Item" and select item to delete, after finish "Delete Multiple Item", need to reset m_sCurrentFunctionKey to split_revenue
	private void resetCurrentFunctionKeyToSplitRevenue() {
		if (m_oFuncCheck.isSplitRevenueMode() && m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.delete_multiple_item.name()))
			m_sCurrentFunctionKey = AppGlobal.FUNC_LIST.split_revenue.name();
	}
	
	private boolean splitRevenueAllowedChecking(boolean bNewCheck, String sTableStatus) {
		if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name())) {
			if(!bNewCheck && sTableStatus.equals(PosOutletTable.STATUS_CLEANING_TABLE))
				promptErrorDialogBoxForCleaningCheck();
			else if(bNewCheck)
				promptErrorDialogBoxForNewCheck();
			else
				return false;
			if(m_oFrameCheckDetail != null && m_oFrameCheckDetail.getVisible() && m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fine_dining))
				m_oFrameCheckDetail.setVisible(false);
			m_oFuncCheck.unlockTable(false, false);
			return true;
		}
		return false;
	}
	
	public void splitRevenueAddActionLogAndRemoveExtraInfo() {
		if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name())) {
			if (m_oUsePanelToSelectItemParentItem != null && !m_oFuncCheck.hasNewItem(false)) {
				// Remove extra info if no new item added
				m_oUsePanelToSelectItemParentItem.removeExtraInfoFromList(PosCheckExtraInfo.BY_ITEM, PosCheckExtraInfo.SECTION_ITEM, PosCheckExtraInfo.VARIABLE_REMARK);
				
				// Add "split revenue" log to global action log list
				m_oFuncCheck.addActionLogForSplitRevenue(m_oUsePanelToSelectItemParentItem);
			}
		}
		finishSplitRevenueHandling();
	}
	
	private boolean orderingPanelButtonClickChecking(String sButtonType) {
		String sErrMsg = "";
		if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name())) {
			if (sButtonType.equals(PosDisplayPanelLookup.TYPE_DIRECT_PAYMENT))
				sErrMsg = AppGlobal.g_oLang.get()._("cannot_pay_check_in_split_revenue_function");
			else if (sButtonType.equals(PosDisplayPanelLookup.TYPE_DIRECT_DISCOUNT))
				sErrMsg = AppGlobal.g_oLang.get()._("cannot_apply_discount_in_split_revenue_function");
			else if (sButtonType.equals(PosDisplayPanelLookup.TYPE_MODIFIER_LOOKUP)
					|| sButtonType.equals(PosDisplayPanelLookup.TYPE_HOT_MODIFIER)
					|| sButtonType.equals(PosDisplayPanelLookup.TYPE_MENU_LOOKUP))
				sErrMsg = AppGlobal.g_oLang.get()._("cannot_add_modifier_in_split_revenue_function");
		}
		
		if (!sErrMsg.isEmpty()) {
			showAttentionDialogBox(sErrMsg);
			return false;
		}
		
		return true;
	}
	
	
	private void loadDisplayPanelAndDisplayStyle(int iDisplayPanelId, int iOutletId) {
		m_oPosDisplayPanel.readById(iDisplayPanelId, iOutletId);
		updateDisplayPanelStyleList();
	}
	
	// Main function switch to perform function
	private boolean fcnSwitch(int iFunctionId, String sDisplayPanelLookupName, int iSectionId, int iItemIndex, boolean bFormTableFloorPlan, HashMap<String, String> oFuncParam) {
		PosFunction oPosFunction = null;
		PosFunctionAclCache oFuncAclCache = new PosFunctionAclCache();
		boolean bNeedCheckAuthority = true, bHaveAuthority = false, bProcessResult = true, bResult = true;
		FuncUser oAuthorityUser = null;
		FuncUser oOriginalUser = AppGlobal.g_oFuncUser.get();
		
		// If under direct payment mode, cannot perform function
		if (m_iCashierMode == 2)
			return false;
		
		try {
			oPosFunction = m_oFunctionList.getFunction(iFunctionId);
			if (oPosFunction == null)
				return false;
			
			// General check
			if (checkFunctionAvailable(oPosFunction) == false) {
				// Cannot perform
				showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_perform_this_function_at_this_mode"));
				return false;
			}
			
			// Checking for different mode
			if (checkFunctionAvailableInDifferentMode(oPosFunction) == false) {
				// Cannot perform
				String sErrMsg = "";
				if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode))
					sErrMsg = AppGlobal.g_oLang.get()._("cannot_perform_this_function_at_fast_food_mode");
				else if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode))
					sErrMsg =
							AppGlobal.g_oLang.get()._("cannot_perform_this_function_at_self_order_kiosk_mode");
				else if (AppGlobal.OPERATION_MODE.stock_delivery.equals(m_eOperationMode))
					sErrMsg =
							AppGlobal.g_oLang.get()._("cannot_perform_this_function_at_stock_delivery_control_mode");
				else
					sErrMsg = AppGlobal.g_oLang.get()._("cannot_perform_this_function_at_this_mode");
				showErrorDialogBox(sErrMsg);
				return false;
			}
			
			// Old check is loaded
			if (!bFormTableFloorPlan && m_oFuncCheck != null && m_oFuncCheck.isOldCheck()) {
				if (checkFunctionAvailableOnOldCheck(oPosFunction) == false) {
					// Cannot perform
					String sErrMsg = "";
					if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode))
						sErrMsg = AppGlobal.g_oLang.get()._("cannot_perform_this_function_on_old_check_at_fast_food_mode");
					else if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode))
						sErrMsg = AppGlobal.g_oLang.get()._("cannot_perform_this_function_at_self_order_kiosk_mode");
					else if (AppGlobal.OPERATION_MODE.stock_delivery.equals(m_eOperationMode))
						sErrMsg = AppGlobal.g_oLang.get()._("cannot_perform_this_function_on_old_check_at_stock_delivery_control_mode");
					else
						sErrMsg = AppGlobal.g_oLang.get()._("cannot_perform_this_function_on_old_check_at_this_mode");
					showErrorDialogBox(sErrMsg);
					return false;
				}
			}
			
			// Write application log
			if (!bFormTableFloorPlan)
				AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
						AppGlobal.g_oFuncUser.get().getUserId() + "", "Function: " + oPosFunction.getKey());
			
			if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.item_modifier.name())) {
				// Item modifier
				if (iSectionId == -1 && iItemIndex == -1) {
					iSectionId = m_oFrameOrderingBasket.getSelectedSectionId();
					iItemIndex = m_oFuncCheck.getItemListCount(iSectionId) - 1;
				}
			}
			
			bNeedCheckAuthority = true;
			if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.delete_item.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.delete_last.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.delete_whole_last_item.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.change_quantity_last.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.delete_multiple_item.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.change_last_item_qty_by_electronic_scale.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.edit_set_menu.name())) {
				
				if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.delete_item.name()) ||
						oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.edit_set_menu.name())	) {
					if (iSectionId == -1 && iItemIndex == -1) {
						iSectionId = m_oFrameOrderingBasket.getSelectedSectionId();
						iItemIndex = m_oFuncCheck.getItemListCount(iSectionId) - 1;
					}
				}
				
				if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.delete_last.name())
						|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.delete_whole_last_item.name())) {
					iSectionId = m_oFrameOrderingBasket.getSelectedSectionId();
					iItemIndex = m_oFuncCheck.getLastGeneralCheckItemItemIndex(iSectionId);
				}
				
				if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.change_quantity_last.name()) || oPosFunction
						.getKey().equals(AppGlobal.FUNC_LIST.change_last_item_qty_by_electronic_scale.name())) {
					if (iSectionId == -1) {
						iSectionId = m_oFrameOrderingBasket.getSelectedSectionId();
						iItemIndex = m_oFuncCheck.getLastGeneralCheckItemItemIndex(iSectionId);
					}
				}
				
				if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.delete_multiple_item.name())) {
					if (oFuncParam == null || oFuncParam.containsKey("deleteItemType") == false || (oFuncParam.containsKey("deleteItemType")
							&& oFuncParam.get("deleteItemType").contentEquals("n")))
						bNeedCheckAuthority = false;
				} else {
					FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iSectionId, iItemIndex);
					if (oFuncCheckItem == null) {
						// No target item
						return false;
					}
					if (oFuncCheckItem.isOldItem() == false) {
						// Some functions check user authority only for old item
						// Skip checking here if applying on new item
						bNeedCheckAuthority = false;
					}
				}
			}
			
			if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.cancel.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.user_time_in_out.name()))
				// Skip checking for quit check and logout
				bNeedCheckAuthority = false;
			
			// Select item / Click confirm/cancel button in
			// m_oFramePanelItemSelectPanel
			// no need to ask authority again, continue to do
			// stock_operation/stock_soldout/stock_soldout_by_shop function
			if ((oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.stock_operation.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.stock_soldout.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.stock_soldout_by_shop.name()))
					&& this.m_iUsePanelToSelectItemModeCurrentFuncId == oPosFunction.getFuncId())
				bNeedCheckAuthority = false;
			
			// fast_food_auto_takeout = true in pos_configs, bypass authority
			// check of check_takeout when now is using switch user function or
			// login
			if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.check_takeout.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.check_dine_in.name())) {
				boolean bAskToConfirm;
				try {
					bAskToConfirm = Boolean.valueOf(oFuncParam.get("askToConfirm"));
				} catch (Exception e) {
					bAskToConfirm = true;
				}
				if (!bAskToConfirm)
					bNeedCheckAuthority = false;
			}
			
			if (isShowTableFloorAfterSwitchUserWithCheckingOperationMode()
					&& (m_oFrameTableFloorPlan != null && m_oFrameTableFloorPlan.getSwitchUserModeStatus()
					.equals(FrameTableFloorPlan.SWITCH_USER_MODE_ON))) {
				if (!askLogin())
					return false;
			}
			
			PosFunction oPosFunctionForAuthority = oPosFunction;
			while (bNeedCheckAuthority) {
				// Special handling for using other function permission on
				// current function
				// e.g. use reprint guest check permission as the permission of
				// using print check to print the 2nd guset check
				if (oPosFunctionForAuthority.getKey().equals(AppGlobal.FUNC_LIST.print_check.name())
						|| oPosFunctionForAuthority.getKey().equals(AppGlobal.FUNC_LIST.reprint_guest_check.name())) {
					if (m_oFuncCheck != null) {
						if (m_oFuncCheck.getPrintCount() > 0 && m_oFunctionList
								.getFunctionByKey(AppGlobal.FUNC_LIST.reprint_guest_check.name()) != null) {
							oPosFunctionForAuthority = m_oFunctionList
									.getFunctionByKey(AppGlobal.FUNC_LIST.reprint_guest_check.name());
						} else {
							oPosFunctionForAuthority = m_oFunctionList
									.getFunctionByKey(AppGlobal.FUNC_LIST.print_check.name());
						}
					}
				}
				
				// check user password
				if (oPosFunctionForAuthority.askPassword()) {
					if (!this.askUserPassword(oPosFunctionForAuthority, bFormTableFloorPlan))
						return false;
				}
				
				// check user authority
				bHaveAuthority = false;
				int iFunctionIdForAuthority = oPosFunctionForAuthority.getFuncId();
				if (AppGlobal.g_oFuncUser.get().isSystemAdmin())
					bHaveAuthority = true;
				else if (oFuncAclCache.readByFuncKeyIdAndOutletId(iFunctionIdForAuthority,
						oPosFunctionForAuthority.getKey(), AppGlobal.g_oFuncOutlet.get().getOutletId())) {
					if (oFuncAclCache.isAllow()) {
						if (oFuncAclCache.getUserStatus().isEmpty())
							bHaveAuthority = true;
					}
					
					if (oPosFunctionForAuthority.getKey().equals(AppGlobal.FUNC_LIST.print_check.name())
							|| oPosFunctionForAuthority.getKey().equals(AppGlobal.FUNC_LIST.reprint_guest_check.name())
							|| oPosFunctionForAuthority.getKey().equals(AppGlobal.FUNC_LIST.print_and_paid.name())) {
						if (m_oFuncCheck != null) {
							if (m_oFuncCheck.getPrintCount() > 0
									&& AppGlobal.g_oFuncStation.get().getReprintGuestCheckTimes() > -1
									&& AppGlobal.g_oFuncStation.get().getReprintGuestCheckTimes() < m_oFuncCheck
									.getPrintCount()) {
								if (!oPosFunctionForAuthority.askAuthority()
										&& !oPosFunctionForAuthority.askApproval()) {
									showErrorDialogBox(AppGlobal.g_oLang.get()._("do_not_have_authority_to_perform_the_function"));
									return false;
								}
							}
						}
					}
					
					// For reprint Receipt and Reprint Last Receipt
					if (oPosFunctionForAuthority.getKey().equals(AppGlobal.FUNC_LIST.reprint_last_receipt.name())
							|| oPosFunctionForAuthority.getKey().equals(AppGlobal.FUNC_LIST.reprint_receipt.name())) {
						int iReceiptPrintCount;
						if (oPosFunctionForAuthority.getKey().equals(AppGlobal.FUNC_LIST.reprint_last_receipt.name())) {
							// sub function to get last paid check
							if (getLastPaidCheck() != null) {
								PosCheck oLastCheck = getLastPaidCheck();
								iReceiptPrintCount = oLastCheck.getReceiptPrintCount();
							} else
								return false;
						} else {
							if (oFuncParam != null && oFuncParam.containsKey("checkNo")) {
								FuncCheck oReprintFuncCheck = new FuncCheck();
								oReprintFuncCheck.getCheckByCheckNum(
										AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
										AppGlobal.g_oFuncOutlet.get().getOutletId(), oFuncParam.get("checkNo"), true);
								iReceiptPrintCount = oReprintFuncCheck.getReceiptPrintCount();
							} else {
								showErrorDialogBox(AppGlobal.g_oLang.get()._("missing_check_no"));
								return false;
							}
						}
						
						if (AppGlobal.g_oFuncStation.get().getReprintReceiptTimes() > -1
								&& AppGlobal.g_oFuncStation.get().getReprintReceiptTimes() < iReceiptPrintCount) {
							if (!oPosFunctionForAuthority.askAuthority() && !oPosFunctionForAuthority.askApproval()) {
								showErrorDialogBox(AppGlobal.g_oLang.get()._("do_not_have_authority_to_perform_the_function"));
								return false;
							}
						}
					}
					
					oAuthorityUser = checkAuthorityAndApproval(bHaveAuthority, oPosFunctionForAuthority, bFormTableFloorPlan);
					if(oAuthorityUser == null)
						return false;
					else if (!bHaveAuthority && oAuthorityUser.getUser() != null)
						AppGlobal.g_oFuncUser.set(oAuthorityUser);
				}
				
				// For print and paid function, also need to check reprint guest
				// check authority
				if (oPosFunctionForAuthority.getKey().equals(AppGlobal.FUNC_LIST.print_and_paid.name())) {
					oPosFunctionForAuthority = m_oFunctionList
							.getFunctionByKey(AppGlobal.FUNC_LIST.reprint_guest_check.name());
					if (oPosFunctionForAuthority == null) {
						// No such function in DB
						break;
					}
				} else {
					break;
				}
			}
			
			//Check if swipe card control is required
			if (bFormTableFloorPlan) {
				ClsActiveClient oActiveClient = AppGlobal.getActiveClient();
				oActiveClient.getSwipeCardReaderElement().setValueChangedServerRequestNote(FuncMSR.FRAME_SWIPE_CARD_DEFAULT);
			}
			
			//check whether check is owned by current user if having setup
			HashMap<String, String> oResultMap = getCheckOwnershipSetting();
			if (oResultMap.get("support").equals("y")) {
				if (oResultMap.get("type").equals("c")) {
					if ((oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.paid.name())
							|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.print_check.name())
							|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.print_and_paid.name()))
							&& m_oFuncCheck.getCheckOwnerUserId() != AppGlobal.g_oFuncUser.get().getUserId()) {
						String sName = "";
						UserUser oUser = this.m_oAllUserList.get(m_oFuncCheck.getCheckOwnerUserId());
						if (oUser.getUserId() != 0)
							sName = oUser.getFirstName(AppGlobal.g_oCurrentLangIndex.get()) + " "
									+ oUser.getLastName(AppGlobal.g_oCurrentLangIndex.get());
						String sMessage = AppGlobal.g_oLang.get()._("abort_operation_since_this_check_owned_by")
								+ ": "+ System.lineSeparator() + sName;
						showErrorDialogBox(sMessage);
						if (oAuthorityUser != null && oAuthorityUser.getUser() != null)
							AppGlobal.g_oFuncUser.set(oOriginalUser);
						return false;
					}
				}
			}
			
			// process the corresponding function
			if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.send_check.name())) {
				// Send Check
				boolean bShowFrameItemRemind = false;
				
				// Check whether need to show item remind. If no item remind,
				// send check directly
				if(!AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name()))
					bShowFrameItemRemind = checkItemRemind(AppGlobal.FUNC_LIST.send_check.name(), bFormTableFloorPlan);
				if (!bShowFrameItemRemind)
					sendCheck(false, false, false, true, bFormTableFloorPlan, 0, false, 0);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.cancel.name())) {
				if (m_oFuncCheck != null) {
					if (m_oFuncCheck.isOldCheck()
							&& m_oFuncCheck.getOrderedItemCount(false).compareTo(BigDecimal.ZERO) == 0) {
						ArrayList<String> oOptionList = new ArrayList<String>();
						oOptionList.add(AppGlobal.g_oLang.get()._("void_check"));
						oOptionList.add(AppGlobal.g_oLang.get()._("quit"));
						
						FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
						oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("no_item_ordered"),
								oOptionList, false);
						oFormSelectionBox.show();
						if (oFormSelectionBox.isUserCancel()) {
							// System.out.println("oFormSelectionBox-Cancel");
						} else {
							ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
							if (oSelectionBoxResult.get(0) == 0) {
								// Void check
								fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.void_check.name()), "", -1, -1, false, null);
							} else {
								// Quit check
								quitCheck(false);
							}
						}
					} else {
						// Quit check
						quitCheck(false);
					}
				} else {
					// Quit check
					quitCheck(false);
				}
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.paid.name())) {
				// Do payment
				payCheck(false, false);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.print_detail_check.name())) {
				// Print Detail Check
				printDetailCheck();
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.print_check.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.reprint_guest_check.name())) {
				// Show Table Message Reminder if any
				this.showTableMessageReminder(TABLE_MESSAGE_PROMPT_PRINT_CHECK);
				
				// PrePrint Check Handling
				if (!prePrintCheckHandling()) {
					if (oAuthorityUser != null && oAuthorityUser.getUser() != null)
						AppGlobal.g_oFuncUser.set(oOriginalUser);
					return false;
				}
				boolean bPrintGuestCheck = true;
				if (oFuncParam != null && oFuncParam.containsKey("printGuestCheck"))
					bPrintGuestCheck = Boolean.valueOf(oFuncParam.get("printGuestCheck"));
				boolean bPayCheck = false;
				if (oFuncParam != null && oFuncParam.containsKey("payCheck"))
					bPayCheck = Boolean.valueOf(oFuncParam.get("payCheck"));
				boolean bCheckAutoSignOut = true;
				if (oFuncParam != null && oFuncParam.containsKey("checkAutoSignOut"))
					bCheckAutoSignOut = Boolean.valueOf(oFuncParam.get("checkAutoSignOut"));

// ReprintCheck [fcnSwitch]
				if(oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.reprint_guest_check.name())) {
					// surveillance event: ReprintCheck
					HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
					String sCheckNum = (m_oFuncCheck.isOldCheck()) ? m_oFuncCheck.getCheckPrefixNo() : AppGlobal.g_oFuncStation.get().getNextCheckPrefixNumber(false);
					oSurveillanceEventInfo.put("checkNum", sCheckNum);
					this.doSurveillanceEvent(FuncSurveillance.SURVEILLANCE_TYPE_REPRINT_CHECK, oSurveillanceEventInfo);
				}
				
				// Check whether need to show item remind. If no item remind,
				// print check directly
				boolean bShowFrameItemRemind = false;
				if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.print_check.name()) && !AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name()))
					bShowFrameItemRemind = checkItemRemind(AppGlobal.FUNC_LIST.print_check.name(), bFormTableFloorPlan);
				if (!bShowFrameItemRemind)
					sendCheck(bPrintGuestCheck, bPayCheck, false, bCheckAutoSignOut, bFormTableFloorPlan, 0, false, 0);
				else if (bShowFrameItemRemind && bFormTableFloorPlan) {
					showAttentionDialogBox(AppGlobal.g_oLang.get()._("item_reminder_exist") + System.lineSeparator()
							+ AppGlobal.g_oLang.get()._("please_print_check_at_ordering_panel"));
					m_oFuncCheck.unlockTable(false, false);
				}
				
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.print_and_paid.name())) {
				// PrePrint Check Handling
				if (!prePrintCheckHandling()) {
					if (oAuthorityUser != null && oAuthorityUser.getUser() != null)
						AppGlobal.g_oFuncUser.set(oOriginalUser);
					return false;
				}
				// Check whether need to show item remind. If no item remind,
				// print check directly
				boolean bShowFrameItemRemind = false;
				if(!AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name()))
					bShowFrameItemRemind = checkItemRemind(AppGlobal.FUNC_LIST.print_and_paid.name(), bFormTableFloorPlan);
				
				// Print and pay check
				if (!bShowFrameItemRemind)
					printAndPaid();
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.change_cover.name())) {
				// Change Cover
				changeCover();
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.change_table.name())) {
				// Change Table
				bProcessResult = changeTable(bFormTableFloorPlan, oFuncParam);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.park_order_by_station.name())) {
				// Park order by station
				parkOrderByStation();
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.retrieve_park_order_by_station.name())) {
				// Retrieve park order by station
				retrieveParkOrderByStation();
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.park_order_by_outlet.name())) {
				// Park order by station
				parkOrderByOutlet();
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.retrieve_park_order_by_outlet.name())) {
				// Retrieve park order by station
				retrieveParkOrderByOutlet();
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.logout.name())) {
				// Quit check
				if (bFormTableFloorPlan == false) {
					quitCheck(true);
				}
				// Logout
/**SignOut [fcnSwitch] */
				//logout(false);
				if (logout(false)) {
					// surveillance eConnect employee event: SignOut
					HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
					this.doSurveillanceEvent(FuncSurveillance.SURVEILLANCE_TYPE_SIGN_OUT, oSurveillanceEventInfo);
				}
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.void_check.name())) {
				// Quit check
				if (bFormTableFloorPlan == false) {
					if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food)
							|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk)
							|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab)) {
						if (m_oFuncCheck.isOldCheck()) {
							m_sTableNoForFastFoodMode = m_oFuncCheck.getTableNo();
							m_sTableExtensionForFastFoodMode = m_oFuncCheck.getTableExtension();
						}
					}
					
					if (oFuncParam == null)
						oFuncParam = new HashMap<String, String>();
					oFuncParam.put("tableNo", m_oFuncCheck.getTableNo());
					oFuncParam.put("tableExtension", m_oFuncCheck.getTableExtension());
					
					quitCheck(true);
				}
				
				// Void check
				boolean bIsVoidSuccess = voidCheck(oFuncParam, null, 0);
				if (bIsVoidSuccess) {
					m_sTableNoForFastFoodMode = "";
					m_sTableExtensionForFastFoodMode = "";
				}
				
				// Restore fast food mode
				if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
						|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
						|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode)) {
					// Fast food mode
					showTableFloorPlanScreen(false);
				}
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.release_payment.name())) {
				if (bFormTableFloorPlan == false) {
					quitCheck(true);
				}
				
				// Release payment
				if (releasePayment(oFuncParam, AppGlobal.FUNC_LIST.release_payment.name()) == null)
					bResult = false;
				
				if (bFormTableFloorPlan == false) {
					// Restore fast food mode
					if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
							|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) == true
							|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) == true) {
						// Fast food mode
						showTableFloorPlanScreen(false);
						
						// For self-order kiosk mode, not show new check cover
						// if release payment successfully
						if (bResult && AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode))
							m_oFrameSelfOrderKiosk.setVisible(false);
					}
				} else {
					// enter from admin mode
					// for release payment from check listing, showAllOpenCheck
					// function will handle opening ordering panel for fast food mode
					if (oFuncParam == null) {
						// Restore fast food mode
						if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
								|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) == true
								|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) == true) {
							// Fast food mode
							showTableFloorPlanScreen(false);
							
							if (bResult && AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode))
								m_oFrameSelfOrderKiosk.setVisible(false);
						}
					}
				}
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.delete_item.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.delete_last.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.delete_whole_last_item.name())) {
				// Delete item
				BigDecimal dDeleteQty;
				if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.delete_last.name())
						|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.delete_whole_last_item.name())) {
					if (!checkLastItemExist()) {
						if (oAuthorityUser != null && oAuthorityUser.getUser() != null)
							AppGlobal.g_oFuncUser.set(oOriginalUser);
						return bProcessResult;
					} else {
						iSectionId = m_oFrameOrderingBasket.getSelectedSectionId();
						iItemIndex = m_oFuncCheck.getLastGeneralCheckItemItemIndex(iSectionId);
					}
					
					m_oFrameOrderingBasket.moveScrollToSectionBottom(iSectionId);
					
					if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.delete_whole_last_item.name()))
						dDeleteQty = new BigDecimal(
								m_oFuncCheck.getCheckItem(iSectionId, iItemIndex).getCheckItem().getQty().toString());
					else {
						FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iSectionId, iItemIndex);
						if (oFuncCheckItem.isCouponItem() || oFuncCheckItem.isSVCCouponRedeemItem())
							dDeleteQty = new BigDecimal(oFuncCheckItem.getCheckItem().getQty().toPlainString());
						else
							dDeleteQty = BigDecimal.ZERO;
					}
					
				} else {
					FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iSectionId, iItemIndex);
					if (oFuncCheckItem.isSetMenuItem() && ((oFuncCheckItem.getParentFuncCheckItem() != null && !oFuncCheckItem.getParentFuncCheckItem().isSplitRevenueParent()) || oFuncCheckItem.isOldItem())) {
						iSectionId = oFuncCheckItem.getParentFuncCheckItem().getCheckItem().getSeatNo();
						iItemIndex = oFuncCheckItem.getParentFuncCheckItem().getCheckItem().getSeq() - 1;
						
						dDeleteQty = BigDecimal.ZERO;
					} else {
						if (oFuncCheckItem.isCouponItem() || oFuncCheckItem.isSVCCouponRedeemItem())
							dDeleteQty = new BigDecimal(oFuncCheckItem.getCheckItem().getQty().toPlainString());
						else if (oFuncCheckItem.isOldItem())
							dDeleteQty = BigDecimal.ZERO;
						else
							dDeleteQty = new BigDecimal(oFuncCheckItem.getCheckItem().getQty().toString());
					}
				}
				
				deleteItem(iSectionId, iItemIndex, dDeleteQty);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.change_language.name())) {
				// Change language
				changeLanguage(0);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.guest_check_preview.name())) {
				// Guest check pre-view
				if (bFormTableFloorPlan == false) {
					guestCheckPreview(m_oFuncCheck);
				}
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.change_quantity_last.name())) {
				// Change quantity
				m_oFrameOrderingBasket.moveScrollToItem(iSectionId, iItemIndex);
				
				changeItemQuantity(iSectionId, iItemIndex, BigDecimal.ZERO, false);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.item_modifier.name())) {
				// Item modifier
				m_oFrameOrderingBasket.moveScrollToSectionBottom(iSectionId);
				
				itemModifier(iSectionId, iItemIndex);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.item_discount.name())) {
				// Item discount
				callDiscountLookup(iSectionId, iItemIndex, "item");
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.item_discount_multiple_items.name())) {
				// Item discount for multiple items - show the selection of
				// items
				toggleBacketMultiSelectMode(true, AppGlobal.FUNC_LIST.item_discount_multiple_items.name(), FrameOrderingBasket.SELECT_TYPE_ALL, FrameBasketSelectPanel.BASKET_SELECT_MODE_MULTI);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.item_void_discount_multiple_items.name())) {
				toggleBacketMultiSelectMode(true, AppGlobal.FUNC_LIST.item_void_discount_multiple_items.name(), FrameOrderingBasket.SELECT_TYPE_ALL, FrameBasketSelectPanel.BASKET_SELECT_MODE_MULTI);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.waive_sc_tax.name())) {
				// Waive service charge or tax
				toggleBacketMultiSelectMode(true, AppGlobal.FUNC_LIST.waive_sc_tax.name(), FrameOrderingBasket.SELECT_TYPE_ALL, FrameBasketSelectPanel.BASKET_SELECT_MODE_MULTI);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.add_sc_tax.name())) {
				// Add service charge or tax
				toggleBacketMultiSelectMode(true, AppGlobal.FUNC_LIST.add_sc_tax.name(), FrameOrderingBasket.SELECT_TYPE_ALL, FrameBasketSelectPanel.BASKET_SELECT_MODE_MULTI);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.open_drawer.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.open_first_drawer.name())
					|| oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.open_second_drawer.name())) {
				// Manual open drawer
				if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.open_first_drawer.name()))
					openDrawer(1);
				else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.open_second_drawer.name()))
					openDrawer(2);
				else
					openDrawer(0);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.cashier_mode.name())) {
				// Auto close cashier panel
				m_oFrameCashier.setClickByCahsierMode(true);
				
				// Cashier mode
				startCashierMode(false);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.web_report.name())) {
				// Web report
				openWebReport();
				
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.check_listing.name())
					||oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.check_listing_by_table_reference.name())) {
				if (bFormTableFloorPlan == false) {
					if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food)
							|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk)
							|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab)) {
						if (m_oFuncCheck.isOldCheck()) {
							m_sTableNoForFastFoodMode = m_oFuncCheck.getTableNo();
							m_sTableExtensionForFastFoodMode = m_oFuncCheck.getTableExtension();
						}
					}
					
					// Quit the current check
					quitCheck(true);
				}
				
				// Check listing
				
				// Set flag as Check listing by Table Reference function triggered
				//showAllOpenCheck(oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.check_listing_by_table_reference.name()));
				int iCheckListingbyType = FrameCheckListing.TYPE_CHECK_LISTING_BY_NORMAL;
				if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.check_listing_by_table_reference.name()))
					iCheckListingbyType = FrameCheckListing.TYPE_CHECK_LISTING_BY_TABLE_REFERENCE;
				showAllOpenCheck(iCheckListingbyType);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.split_item_to_other_table.name())) {
				// Split item to other table
				if (splitItemToOtherTable(true, null, "", null) == true)
					toggleBacketMultiSelectMode(true, AppGlobal.FUNC_LIST.split_item_to_other_table.name(), FrameOrderingBasket.SELECT_TYPE_ALL, FrameBasketSelectPanel.BASKET_SELECT_MODE_MULTI);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.split_item_with_quantity.name())) {
				m_sCurrentFunctionKey = AppGlobal.FUNC_LIST.split_item_with_quantity.name();
				m_oFuncCheck.setCurrentFunctionKey(AppGlobal.FUNC_LIST.split_item_with_quantity.name());
				// Split item with quantity
				if (splitItemToOtherTable(true, null, "", null) == true)
					toggleBacketMultiSelectMode(true, AppGlobal.FUNC_LIST.split_item_with_quantity.name(), FrameOrderingBasket.SELECT_TYPE_ALL, FrameBasketSelectPanel.BASKET_SELECT_MODE_MULTI);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.switch_user.name())) {
				m_sCurrentFunctionKey = AppGlobal.FUNC_LIST.switch_user.name();
				// Switch user
				if (bFormTableFloorPlan == false) {
					quitCheck(true);
				}
				
				if (switchUser(false)) {
					// Add log to action log list
					AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.switch_user.name(),
							PosActionLog.ACTION_RESULT_SUCCESS, "", AppGlobal.g_oFuncUser.get().getUserId(),
							AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
							AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
							AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
							AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "", "");
					// handle action log
					AppGlobal.g_oActionLog.get().handleActionLog(false);
				}
				m_sCurrentFunctionKey = "";
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.daily_start.name())) {
				// Daily Start
				dailyStart();
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.daily_close.name())) {
				// Daily Close
				dailyClose();
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.reload_business_setting.name())) {
				// Reload business setting
				reloadBusinessSetting();
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.reprint_receipt.name())) {
				// Re-print receipt
				reprintReceipt(oFuncParam);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.testing_printer.name())) {
				// Testing printer
				showItemPrintQueue(AppGlobal.FUNC_LIST.testing_printer.name());
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.open_share_table.name())) {
				String sTableNo;
				try {
					if (oFuncParam.containsKey("tableNo"))
						sTableNo = oFuncParam.get("tableNo");
					else
						sTableNo = "0";
				} catch (Exception e) {
					sTableNo = "0";
				}
				// Open share table
				openShareTable(sTableNo);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.unlock_table.name())) {
				String sTableNo, sTableExtension;
				try {
					sTableNo = oFuncParam.get("tableNo");
					sTableExtension = oFuncParam.get("tableExtension");
				} catch (Exception e) {
					// Ask table number
					FormAskTable oFormAskTable = new FormAskTable(this);
					oFormAskTable.init(0, true, AppGlobal.g_oFuncOutlet.get().getOutletId());
					oFormAskTable.setTitle(AppGlobal.g_oLang.get()._("unlock_table"));
					oFormAskTable.show();
					
					if (oFormAskTable.isCanelClick()) {
						if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
								|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
								|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode)) {
							// Fast food mode
							showTableFloorPlanScreen(false);
						}
						if (oAuthorityUser != null && oAuthorityUser.getUser() != null)
							AppGlobal.g_oFuncUser.set(oOriginalUser);
						return false;
					}
					
					sTableNo = oFormAskTable.getTableNo() + "";
					sTableExtension = oFormAskTable.getTableExtension();
				}
				// Unlock table
				unlockTableForFloorPlan(sTableNo, sTableExtension);
				
				// Restore fast food mode
				if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
						|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
						|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode)) {
					// Fast food mode
					showTableFloorPlanScreen(false);
				}
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.check_history.name())) {
				String sTableNo, sTableExtension;
				try {
					sTableNo = oFuncParam.get("tableNo");
					sTableExtension = oFuncParam.get("tableExtension");
				} catch (Exception e) {
					sTableNo = "";
					sTableExtension = "";
				}
				// Show check history
				showCheckHistory(sTableNo, sTableExtension);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.mark_delivery.name())) {
				// Mark delivery
				startMarkDelivery();
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.print_serving_list.name())) {
				// Print serving list
				printServingList();
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.pantry_message.name())) {
				toggleBacketMultiSelectMode(true, AppGlobal.FUNC_LIST.pantry_message.name(), FrameOrderingBasket.SELECT_TYPE_ALL, FrameBasketSelectPanel.BASKET_SELECT_MODE_MULTI);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.rush_order.name())) {
				this.rushOrder(iSectionId, iItemIndex);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.admin_mode.name())) {
				// Quit check
				if (bFormTableFloorPlan == false && !m_oFrameTableFloorPlan.getVisible()) {
					quitCheck(true);
				}
				
				// Enter admin mode
				adminMode();
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.toggle_fast_food_mode.name())) {
				if (bFormTableFloorPlan == false) {
					// Quit check
					// It need to set the second parameter 'bWaitForThread' to
					// true. It need to wait the opened check being unlock
					// before starting fast food mode
					// since starting fast food mode will cleanup the original
					// m_oFuncCheck which make the quit check fail(e.g. unable
					// to unlock the original table)
					quitCheck(true);
				}
				
				operationModeChangeChecking();
				
				if(AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode))
					hideOpenTable();
				
				String slogRemark = "";
				if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == false) {
					// Change to fast food mode
					m_ePreviousOperationMode = m_eOperationMode;
					m_eOperationMode = AppGlobal.OPERATION_MODE.fast_food;
					
					if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_ePreviousOperationMode) == true) {
						// Resize the height of ordering panel when pressing
						// toggle_fast_food_mode in self_kiosk_mode
						int iNewHeight = m_oFrameOrderingPanel.getHeight() - this.m_oFrameSeatPanel.getHeight();
						m_oFrameOrderingPanel.setHeight(iNewHeight);
						// reload ordering panel
						m_oFrameOrderingPanel.removeAllPanelPage();
						loadOrderingPanel();
						// Reset menu lookup top value
						int iNewTop = m_oFrameOrderingMenuLookup.getTop() - this.m_oFrameSeatPanel.getHeight();
						m_oFrameOrderingMenuLookup.setTop(iNewTop);
					}
					
					// Hide the "Share" title of ordering basket
					m_oFrameOrderingBasket.setSectionVisible(0, false);
					
					showTableFloorPlanScreen(false);
					setOpenTableCloseButtonVisible(false);
					
					slogRemark = "Change to fast food mode";
				} else {
					// Change to Fine dining mode
					m_eOperationMode = AppGlobal.OPERATION_MODE.fine_dining;
					
					// Show back the "Share" title of ordering basket
					if(!m_oFrameOrderingBasket.isDisplaySeatNumberSection())
						m_oFrameOrderingBasket.setSectionVisible(0, false);
					else
						m_oFrameOrderingBasket.setSectionVisible(0, true);
					
					// Hide the Table button check information bar in check
					// function frame
					m_oFrameCheckDetail.setTableFrameVisible(true);
					setOpenTableCloseButtonVisible(true);
					
					slogRemark = "Change to fine dining mode";
				}
				
				// Update Toggle Print Receipt Button Name in each panel
				this.updateTogglePrintReceiptButtonList(m_iTogglePrintReceiptFcnId);
				this.updateTogglePrintReceiptButtonName(m_sCurrentPrintModeButtonName);
				
				// Add log to action log list
				AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.toggle_fast_food_mode.name(),
						PosActionLog.ACTION_RESULT_SUCCESS, "", AppGlobal.g_oFuncUser.get().getUserId(),
						AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
						AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "", slogRemark);
				// handle action log
				AppGlobal.g_oActionLog.get().handleActionLog(false);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.toggle_self_order_kiosk_mode.name())) {
				if (bFormTableFloorPlan == false) {
					// Quit check
					// It need to set the second parameter 'bWaitForThread' to
					// true. It need to wait the opened check being unlock
					// before starting fast food mode
					// since starting self-order kiosk mode will cleanup the
					// original m_oFuncCheck which make the quit check fail(e.g.
					// unable to unlock the original table)
					quitCheck(true);
				}
				
				operationModeChangeChecking();
				
				if(AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode))
					hideOpenTable();
				
				String slogRemark = "";
				if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) == false) {
					// Change to self-order kiosk mode
					m_ePreviousOperationMode = m_eOperationMode;
					m_eOperationMode = AppGlobal.OPERATION_MODE.self_order_kiosk;
					
					// Re-height the ordering panel
					int iNewHeight = m_oFrameOrderingPanel.getHeight() + this.m_oFrameSeatPanel.getHeight();
					m_oFrameOrderingPanel.setHeight(iNewHeight);
					// reload ordering panel
					m_oFrameOrderingPanel.removeAllPanelPage();
					loadOrderingPanel();
					
					// Reset menu lookup top value
					int iNewTop = m_oFrameOrderingMenuLookup.getTop() + this.m_oFrameSeatPanel.getHeight();
					m_oFrameOrderingMenuLookup.setTop(iNewTop);
					
					// Hide the "Share" title of ordering basket
					m_oFrameOrderingBasket.setSectionVisible(0, false);
					
					showTableFloorPlanScreen(false);
					setOpenTableCloseButtonVisible(false);
					
					slogRemark = "Change to self-order kiosk mode";
				} else {
					// Change to Fine dining mode
					m_eOperationMode = AppGlobal.OPERATION_MODE.fine_dining;
					
					// Re-height the panel
					int iNewHeight = m_oFrameOrderingPanel.getHeight() - this.m_oFrameSeatPanel.getHeight();
					m_oFrameOrderingPanel.setHeight(iNewHeight);
					// reload ordering panel
					m_oFrameOrderingPanel.removeAllPanelPage();
					loadOrderingPanel();
					// Reset menu lookup top value
					int iNewTop = m_oFrameOrderingMenuLookup.getTop() - this.m_oFrameSeatPanel.getHeight();
					m_oFrameOrderingMenuLookup.setTop(iNewTop);
					if(!m_oFrameOrderingBasket.isDisplaySeatNumberSection())
						m_oFrameOrderingBasket.setSectionVisible(0, false);
					else
						// Show back the "Share" title of ordering basket
						m_oFrameOrderingBasket.setSectionVisible(0, true);
					
					// Hide the Table button check information bar in check
					// function frame
					m_oFrameCheckDetail.setTableFrameVisible(true);
					setOpenTableCloseButtonVisible(true);
					
					slogRemark = "Change to fine dining mode";
				}
				
				// Update Toggle Print Receipt Button Name in each panel
				this.updateTogglePrintReceiptButtonList(m_iTogglePrintReceiptFcnId);
				this.updateTogglePrintReceiptButtonName(m_sCurrentPrintModeButtonName);
				
				// Add log to action log list
				AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.toggle_self_order_kiosk_mode.name(),
						PosActionLog.ACTION_RESULT_SUCCESS, "", AppGlobal.g_oFuncUser.get().getUserId(),
						AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
						AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "", slogRemark);
				// handle action log
				AppGlobal.g_oActionLog.get().handleActionLog(false);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.toggle_bar_tab_mode.name())) {
				if (bFormTableFloorPlan == false) {
					// Quit check
					// It need to set the second parameter 'bWaitForThread' to true. It need to wait the opened check being unlock before starting fast food mode
					// since starting fast food mode will cleanup the original m_oFuncCheck which make the quit check fail(e.g. unable to unlock the original table)
					quitCheck(true);
				}
				
				if(AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode))
					hideOpenTable();
				
				String slogRemark = "";
				if (AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) == false) {
					// Change to bar tab mode
					m_ePreviousOperationMode = m_eOperationMode;
					m_eOperationMode = AppGlobal.OPERATION_MODE.bar_tab;
					
					updateSearchTableCheckListTitle(FrameOpenedCheckList.TYPE_OPEN_CHECK_LIST_TABLE_REFERENCE);
					
					if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_ePreviousOperationMode)) {
						// Resize the height of ordering panel when pressing
						// toggle_bar_tab_mode in self_kiosk_mode
						int iNewHeight = m_oFrameOrderingPanel.getHeight() - this.m_oFrameSeatPanel.getHeight();
						m_oFrameOrderingPanel.setHeight(iNewHeight);
						// reload ordering panel
						m_oFrameOrderingPanel.removeAllPanelPage();
						loadOrderingPanel();
						// Reset menu lookup top value
						int iNewTop = m_oFrameOrderingMenuLookup.getTop() - this.m_oFrameSeatPanel.getHeight();
						m_oFrameOrderingMenuLookup.setTop(iNewTop);
					}
					
					// Hide the "Share" title of ordering basket
					m_oFrameOrderingBasket.setSectionVisible(0, false);
					
					showTableFloorPlanScreen(false);
					setOpenTableCloseButtonVisible(false);
					
					slogRemark = "Change to bar tab mode";
					
					// Set table no. frame as visible
					m_oFrameCheckDetail.setTableFrameVisible(true);
				} else {
					// Change to Fine dining mode
					m_eOperationMode = AppGlobal.OPERATION_MODE.fine_dining;
					
					updateSearchTableCheckListTitle(FrameOpenedCheckList.TYPE_OPEN_CHECK_LIST_CHECK_STATUS);
					
					// Show back the "Share" title of ordering basket
					if(!m_oFrameOrderingBasket.isDisplaySeatNumberSection())
						m_oFrameOrderingBasket.setSectionVisible(0, false);
					else
						m_oFrameOrderingBasket.setSectionVisible(0, true);
					
					// Hide the Table button check information bar in check
					// function frame
					m_oFrameCheckDetail.setTableFrameVisible(true);
					setOpenTableCloseButtonVisible(true);
					
					slogRemark = "Change to fine dining mode";
				}
				
				// Update Toggle Print Receipt Button Name in each panel
				this.updateTogglePrintReceiptButtonList(m_iTogglePrintReceiptFcnId);
				this.updateTogglePrintReceiptButtonName(m_sCurrentPrintModeButtonName);
				
				// Add log to action log list
				AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.toggle_bar_tab_mode.name(),
						PosActionLog.ACTION_RESULT_SUCCESS, "", AppGlobal.g_oFuncUser.get().getUserId(),
						AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
						AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "", slogRemark);
				// handle action log
				AppGlobal.g_oActionLog.get().handleActionLog(false);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.stock_delivery_invoice_setup.name())) {
				if (bFormTableFloorPlan == true) {
					// Create Delivery Invoice
					m_ePreviousOperationMode = m_eOperationMode;
					m_eOperationMode = AppGlobal.OPERATION_MODE.stock_delivery;
					m_iStockDeliveryOperaionMode = 0;
					
					startStockDeliveryMode();
				}
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.receive_stock_delivery_invoice.name())) {
				if (bFormTableFloorPlan == true) {
					// Receive Delivery Invoice
					m_ePreviousOperationMode = m_eOperationMode;
					m_eOperationMode = AppGlobal.OPERATION_MODE.stock_delivery;
					m_iStockDeliveryOperaionMode = 1;
					
					startStockDeliveryMode();
				}
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.switch_outlet.name())) {
				// Quit check
				if (bFormTableFloorPlan == false) {
					quitCheck(true);
				}
				switchOutlet();
				
				if (oAuthorityUser != null && oAuthorityUser.getUser() != null)
					m_oFrameStationInfoBar.setUserName(oOriginalUser.getUserName());
				
				// Update Print Receipt Button List Toggle Print Receipt Button Name in each panel
				this.updateTogglePrintReceiptButtonList(m_iTogglePrintReceiptFcnId);
				this.updateTogglePrintReceiptButtonName(m_sCurrentPrintModeButtonName);
				
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.preorder.name())) {
				if (bFormTableFloorPlan == false) {
					// Retrieve pre-order (by reference no.)
					retrievePreorder(0);
				}
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.preorder_by_table.name())) {
				// Retrieve pre-order (by table no.)
				getPreorderListByTable();
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.takeout.name())) {
				if (iSectionId != -1 && iItemIndex != -1) {
					HashMap<String, Integer> oSelectedItem = new HashMap<String, Integer>();
					List<HashMap<String, Integer>> oSelectedItems = new ArrayList<HashMap<String, Integer>>();
					// Get party seq
					int iCheckPartySeq = m_oFuncCheck.getCurrentCheckPartySeq();
					oSelectedItem.put("partySeq", iCheckPartySeq);
					oSelectedItem.put("sectionId", iSectionId);
					oSelectedItem.put("itemIndex", iItemIndex);
					oSelectedItems.add(oSelectedItem);
					processTakeout(oSelectedItems, false);
				} else {
					m_sCurrentFunctionKey = AppGlobal.FUNC_LIST.takeout.name();
					startTakeout();
				}
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.set_member.name())) {
				if (bFormTableFloorPlan == false) {
					// Set member function
					int iMemberId = 0;
					if (oFuncParam != null && oFuncParam.containsKey("memberId"))
						iMemberId = Integer.parseInt(oFuncParam.get("memberId"));
					setMember(iMemberId);
				}
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.increment_course.name())) {
				if (bFormTableFloorPlan == false) {
					// Increment course function
					manualIncrementCourseNoFunction(false);
				}
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.reprint_last_receipt.name())) {
				this.reprintLastReceipt(false);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.last_20_paid_check.name())) {
				this.showLast20PaidCheck();
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.toggle_non_revenue.name())) {
				this.toggleNonRevenue();
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.toggle_revenue.name())) {
				this.toggleRevenue();
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.stock_operation.name())) {
				if (bFormTableFloorPlan == false) {
					if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food)
							|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk)) {
						if (m_oFuncCheck.isOldCheck()) {
							m_sTableNoForFastFoodMode = m_oFuncCheck.getTableNo();
							m_sTableExtensionForFastFoodMode = m_oFuncCheck.getTableExtension();
						}
					}
					
					// Quit the current check
					quitCheck(true);
				}
				
				// Stock operation
				m_oFrameCover.setVisible(false);
				this.stockOperation(m_oSelectedSoldoutItemList);
				m_oSelectedSoldoutItemList.clear();
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.check_takeout.name())) {
				// Check Takeout
				boolean bAskToConfirm;
				try {
					bAskToConfirm = Boolean.valueOf(oFuncParam.get("askToConfirm"));
				} catch (Exception e) {
					bAskToConfirm = true;
				}
				checkTakeout(bAskToConfirm);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.check_dine_in.name())) {
				// Check Din-In
				boolean bAskToConfirm;
				try {
					bAskToConfirm = Boolean.valueOf(oFuncParam.get("askToConfirm"));
				} catch (Exception e) {
					bAskToConfirm = true;
				}
				checkDineIn(bAskToConfirm);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.item_discount_all_items.name())) {
				// Item discount for all items
				applyItemDiscountForAllItems();
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.void_paid_check.name())) {
				// Void paid check
				if (bFormTableFloorPlan == true) {
					String sCheckNo;
					try {
						sCheckNo = oFuncParam.get("checkNo");
					} catch (Exception e) {
						sCheckNo = "";
					}
					voidPaidCheck(sCheckNo);
				}
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.receipt_preview.name())) {
				// Review receipt
				receiptPreview(oFuncParam, false);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.add_item_by_code.name())) {
				startAddItemByItemCodeScreen();
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.sell_coupon.name())) {
				// Sell coupon
				sellCoupon();
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.new_item_no_kitchen_slip.name())) {
				// No kitchen slip for multiple new items - show the selection
				// of items
				toggleBacketMultiSelectMode(true, AppGlobal.FUNC_LIST.new_item_no_kitchen_slip.name(), FrameOrderingBasket.SELECT_TYPE_NEW_ITEM, FrameBasketSelectPanel.BASKET_SELECT_MODE_MULTI);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.stock_soldout.name()) || oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.stock_soldout_by_shop.name())) {
				if (bFormTableFloorPlan == false) {
					if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food)
							|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk)
							|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab)) {
						if (m_oFuncCheck.isOldCheck()) {
							m_sTableNoForFastFoodMode = m_oFuncCheck.getTableNo();
							m_sTableExtensionForFastFoodMode = m_oFuncCheck.getTableExtension();
						}
					}
					
					// Quit the current check
					quitCheck(true);
				}
				
				if(oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.stock_soldout.name()))
					// Item soldout by outlet level
					stockSoldout(false);
				else
					// Item soldout by shop level
					stockSoldout(true);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.direct_report.name())) {
				// Direct report (generate the report through HERO platform API)
				directReport();
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.adjust_tips.name())) {
				// Adjust tips
				adjustTips(oFuncParam);
				
				// Restore fast food mode
				if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
						|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)) {
					// Fast food mode
					showTableFloorPlanScreen(false);
				}
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.search_item.name())) {
				boolean bFromFloorPlan = false;
				m_sCurrentFunctionKey = AppGlobal.FUNC_LIST.search_item.name();
				String sCheckId = "";
				String sTableNoWithExtension = "";
				
				FrameSearchItem oTempFrameSearchItem = new FrameSearchItem("frmMain.xml", m_oFrameCover, FrameSearchItem.SEARCH_ITEM_LIST_FOUR_COLUMN);
				m_oTemplateBuilder.buildFrame(oTempFrameSearchItem, "fraSearchItem");
				m_oFrameSearchItem.setLeft(oTempFrameSearchItem.getLeft());
				
				// Check whether the function is clicked from floor plan
				if (m_oFrameTableFloorPlan != null && (m_oFrameTableFloorPlan.getVisible()
						|| m_oFrameTableFloorPlan.isFunctionBarButtonClicked()
						|| m_oFrameFloorPlanFunctionPanel.getVisible())) {
					bFromFloorPlan = true;
					
					// use original position if performing the function on tablet
					if(!AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name())){
						FrameSearchItem oTempFrameSearchItemOnFloorPlan = new FrameSearchItem("frmMain.xml", m_oFrameCover, FrameSearchItem.SEARCH_ITEM_LIST_FOUR_COLUMN);
						m_oTemplateBuilder.buildFrame(oTempFrameSearchItemOnFloorPlan, "fraSearchItemOnFloorPlan");
						m_oFrameSearchItem.setLeft(oTempFrameSearchItemOnFloorPlan.getLeft());
					}
				}else{
					sCheckId = m_oFuncCheck.getCheckId();
					sTableNoWithExtension = m_oFuncCheck.getTableNoWithExtensionForDisplay();
				}
				m_oFrameSearchItem.initSearch(null, FrameSearchItem.SEARCH_TYPE_NORMAL, null, bFromFloorPlan);
				m_oFrameSearchItem.setVisible(true);
				
				// Add log to action log list
				AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.search_item.name(),
						PosActionLog.ACTION_RESULT_SUCCESS, sTableNoWithExtension,
						AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(),
						AppGlobal.g_oFuncOutlet.get().getOutletId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
						AppGlobal.g_oFuncStation.get().getStationId(), sCheckId, "", "", "", "", "");
				// handle action log
				AppGlobal.g_oActionLog.get().handleActionLog(false);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.delete_multiple_item.name())) {
				// Delete multiple item
				if (oFuncParam == null || oFuncParam.containsKey("deleteItemType") == false)
					deleteMultipleItem(true, null);
				else {
					if (oFuncParam.get("deleteItemType").contentEquals("o"))
						toggleBacketMultiSelectMode(true, AppGlobal.FUNC_LIST.delete_multiple_item.name(), FrameOrderingBasket.SELECT_TYPE_OLD_ITEM, FrameBasketSelectPanel.BASKET_SELECT_MODE_MULTI);
					else if (oFuncParam.get("deleteItemType").contentEquals("n"))
						toggleBacketMultiSelectMode(true, AppGlobal.FUNC_LIST.delete_multiple_item.name(), FrameOrderingBasket.SELECT_TYPE_NEW_ITEM, FrameBasketSelectPanel.BASKET_SELECT_MODE_MULTI);
				}
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.user_time_in_out.name())) {
				userTimeInOut();
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.restart_pms_shell.name())) {
				// Restart PMS Shell
				FormPMS oFormPMS = new FormPMS(this);
				oFormPMS.restartPMSShell();
				
				// Restore fast food mode
				if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
						|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
						|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode)) {
					// Fast food mode
					showTableFloorPlanScreen(false);
				}
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.pms_enquiry.name())) {
				if (AppGlobal.isModuleSupport(AppGlobal.OPTIONAL_MODULE.pos_interface.name()) == false)
					showErrorDialogBox(AppGlobal.g_oLang.get()._("interface_module_is_not_supported"));
				else {
					// PMS enquiry
					boolean bNotAbortAction = false;
					FormPMS oFormPMS = new FormPMS(this);
					if (bFormTableFloorPlan)
						bNotAbortAction = oFormPMS.pmsEnquiry(null, m_oFuncCheck);
					else
						bNotAbortAction = oFormPMS.pmsEnquiry(m_oFuncCheck.getCheckPrefixNo(),  m_oFuncCheck);
					//if (!oFormPMS.isUserCancel())
					if(bNotAbortAction)
						oFormPMS.show();
				}
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.cashier_settlement.name())) {
				// Cashier Settlement
				this.cashierSettlement();
				
				if (bFormTableFloorPlan == true) {
					if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food)
							|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk)) {
						// Fast food mode
						showTableFloorPlanScreen(false);
					}
				}
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.set_menu_replace_item.name())) {
				int iItemId = 0;
				if (oFuncParam != null && oFuncParam.containsKey("itemId"))
					iItemId = Integer.parseInt(oFuncParam.get("itemId"));
				this.setMenuReplaceItem(iSectionId, iItemIndex, iItemId);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.repeat_item.name())) {
				// repeat item
				m_sCurrentFunctionKey = oPosFunction.getKey();
				
				if (!checkLastItemExist()) {
					if (oAuthorityUser != null && oAuthorityUser.getUser() != null)
						AppGlobal.g_oFuncUser.set(oOriginalUser);
					return bProcessResult;
				} else if(iSectionId == -1 && iItemIndex == -1){
					iSectionId = m_oFrameOrderingBasket.getSelectedSectionId();
					iItemIndex = m_oFuncCheck.getLastGeneralCheckItemItemIndex(iSectionId);
				}
				
				FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iSectionId, iItemIndex);
				if (this.repeatItem(oFuncCheckItem, BigDecimal.ZERO)) {
					// Check if course is set.
					// If yes, auto-assign course to new order NORMAL item
					autoAssignCourseToNewOrderItem();
					// Add hot item success
					finishAddItem(false);
					// Add log to action log list
					AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.repeat_item.name(),
							PosActionLog.ACTION_RESULT_SUCCESS, "", AppGlobal.g_oFuncUser.get().getUserId(),
							AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
							AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
							AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
							AppGlobal.g_oFuncStation.get().getStationId(), m_oFuncCheck.getCheckId(), "",
							oFuncCheckItem.getCheckItem().getCitmId(), "", "",
							oFuncCheckItem.getItemDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get()));
				} else {
					// cleanup stored temporary item list
					m_oStoredFuncCheckItemList.clear();
				}
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.repeat_multiple_items.name())) {
				// repeat multiple items
				toggleBacketMultiSelectMode(true, AppGlobal.FUNC_LIST.repeat_multiple_items.name(), FrameOrderingBasket.SELECT_TYPE_ALL, FrameBasketSelectPanel.BASKET_SELECT_MODE_MULTI);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.repeat_round_items.name())) {
				// repeat round items
				repeatRoundItems();
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.check_smart_card.name())) {
				// Check smart card function
				this.smartCardReadCard();
				
				if (bFormTableFloorPlan == true) {
					if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food)
							|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk)
							|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab)) {
						// Fast food mode
						showTableFloorPlanScreen(false);
					}
				}
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.split_table.name())) {
				this.splitTable();
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.stock_balance_chg.name())) {
				stockBalanceChange();
				
				// Restore fast food mode
				if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
						|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
						|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode)) {
					// Fast food mode
					showTableFloorPlanScreen(false);
				}
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.split_check_by_options.name())) {
				this.splitCheckByOptions();
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.check_discount.name())) {
				// check discount
				callDiscountLookupForMultiItem("check", PosDiscountType.USED_FOR_DISCOUNT, null, "", null);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.void_check_discount.name())) {
				// void check party discount
				callVoidDiscountLookupForMultiItem("check", PosDiscountType.USED_FOR_DISCOUNT, null);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.adjust_payments.name())) {
				// adjust payments
				if (bFormTableFloorPlan == false)
					quitCheck(true);
				
				// adjust payment
				if (adjustPayments(oFuncParam) == false) {
					// quit the adjust payment process and show the ordering
					// screen if fastfood / self-order kiosk
					if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food)
							|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk)
							|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab)) {
						// Fast food mode
						showTableFloorPlanScreen(false);
					}
				}
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.stop_pms_shell.name())) {
				// stop PMS Shell
				FormPMS oFormPMS = new FormPMS(this);
				oFormPMS.stopPMSShell();
				
				// Restore fast food mode
				if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
						|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
						|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode)) {
					// Fast food mode
					showTableFloorPlanScreen(false);
				}
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.paid_in.name())) {
				// Paid In
				this.paidInOut(oPosFunction.getName(AppGlobal.g_oCurrentLangIndex.get()), PosPaidIoReason.TYPE_PAID_IN);
				
				// Restore fast food mode
				if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
						|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
						|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode)) {
					// Fast food mode
					showTableFloorPlanScreen(false);
				}
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.paid_out.name())) {
				// Paid Out
				this.paidInOut(oPosFunction.getName(AppGlobal.g_oCurrentLangIndex.get()),
						PosPaidIoReason.TYPE_PAID_OUT);
				
				// Restore fast food mode
				if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
						|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
						|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode)) {
					// Fast food mode
					showTableFloorPlanScreen(false);
				}
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.drop.name())) {
				// DROP
				this.paidInOut(oPosFunction.getName(AppGlobal.g_oCurrentLangIndex.get()), PosPaidIoReason.TYPE_DROP);
				
				// Restore fast food mode
				if(AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
						|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
						|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode)) {
					// Fast food mode
					showTableFloorPlanScreen(false);
				}
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.partial_send_check.name())) {
				// Partial send check
				sendCheck(false, false, false, true, bFormTableFloorPlan, 0, true, 2);
				
				// Calculate check again if need to breakdown inclusive sc / tax at final settlement
				if(AppGlobal.g_oFuncStation.get().getBreakdownInclusiveScTaxAtFinalSettle())
					m_oFuncCheck.calcCheck();
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.print_paid_check.name())) {
				// Print paid check
				printPaidCheck(bFormTableFloorPlan);
				
				// Restore fast food mode
				if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
						|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
						|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode)) {
					// Fast food mode
					showTableFloorPlanScreen(false);
				}
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.svc_enquiry.name()) ||
					oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.set_member_discount.name()) ||
					oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.search_membership_member.name())) {
				
				String sMemberNumber = "";
				String sLastName = "";
				boolean bAutoFunction = false;
				PosInterfaceConfig oMatchPosInterfaceConfig = null;
				
				if(oFuncParam != null) {
					if (oFuncParam.containsKey("memberNumber"))
						sMemberNumber = oFuncParam.get("memberNumber");
					if (oFuncParam.containsKey("memberSurname"))
						sLastName = oFuncParam.get("memberSurname");
					if (oFuncParam.containsKey("autoFunction")) {
						if(oFuncParam.get("autoFunction").equals("true"))
							bAutoFunction = true;
						else
							bAutoFunction = false;
					}
					if (oFuncParam.containsKey("interfaceId")) {
						String sInterfaceId = oFuncParam.get("interfaceId");
						List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_MEMBERSHIP_INTERFACE);
						for(PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
							if((oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_GOLDEN_CIRCLE))
									&& String.valueOf(oPosInterfaceConfig.getInterfaceId()).equals(sInterfaceId)) {
								oMatchPosInterfaceConfig = oPosInterfaceConfig;
								break;
							}
						}
					}
				}
				membershipInterfaceEnquiry(oMatchPosInterfaceConfig, sMemberNumber, sLastName, sDisplayPanelLookupName, bAutoFunction, false, oPosFunction.getKey());
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.change_password.name())) {
				// change password
				if (bFormTableFloorPlan == false)
					quitCheck(true);
				
				if (changePassword(false) == false) {
					// Change password failed, restore fast food mode
					if(AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
							|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
							|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode)) {
						// Fast food mode
						showTableFloorPlanScreen(false);
					}
				}
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.search_panel_hot_item.name())) {
				// Search panel hot item
				searchPanelHotItem();
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.svc_coupon_redeem_item.name())) {
				// SVC Coupon Redeem Item
				svcCouponRedeemItem();
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.print_past_date_check.name())) {
				this.printPastDateCheck();
				
				// Restore fast food mode
				if(AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
						|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
						|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode)) {
					// Fast food mode
					showTableFloorPlanScreen(false);
				}
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.membership_registration.name())) {
				String sTitle = oPosFunction.getName(AppGlobal.g_oCurrentLangIndex.get());
				if (sDisplayPanelLookupName != null && !sDisplayPanelLookupName.isEmpty())
					sTitle = sDisplayPanelLookupName;
				
				String sOpenCheckInfoListType = FrameOpenedCheckList.TYPE_OPEN_CHECK_LIST_CHECK_STATUS;
				membershipRegistration(sTitle, sOpenCheckInfoListType);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.toggle_ordering_basket_information.name())) {
				// Toggle the ordering basket information
				this.toggleOrderingBasketInformation();
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.refund_item.name())) {
				// Refund Item
				toggleBacketMultiSelectMode(true, AppGlobal.FUNC_LIST.refund_item.name(), FrameOrderingBasket.SELECT_TYPE_NEW_ITEM, FrameBasketSelectPanel.BASKET_SELECT_MODE_MULTI);
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.void_payment.name())) {
				// Void Partial Payment
				this.voidPayment(oFuncParam);
				
				// Restore fast food mode
				if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == true
						|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
						|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode)) {
					// Fast food mode
					showTableFloorPlanScreen(false);
				}
			} else if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.first_page.name())) {
				FormFirstPage oFormFistPage = new FormFirstPage(this);
				oFormFistPage.show();
				//Julie_20190416 start
			}else if(oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.display_information.name())) {
				displayInformation();
			}else if(oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.add_reference_to_last_item.name())) {
				addReferenceToLastItem();
			}
			//Julie_20190416 start
		}catch (Exception e) {
			AppGlobal.stack2Log(e);
		}
		
		if (oAuthorityUser != null && oAuthorityUser.getUser() != null)
			AppGlobal.g_oFuncUser.set(oOriginalUser);
		
		//reset the swipe card control for functions
		if (bFormTableFloorPlan) {
			ClsActiveClient oActiveClient = AppGlobal.getActiveClient();
			if (oActiveClient != null) {
				oActiveClient.getSwipeCardReaderElement()
						.setValueChangedServerRequestNote(FuncMSR.FRAME_SWIPE_CARD_DEFAULT);
				if (this.m_oFrameOpenTable.getVisible())
					oActiveClient.getSwipeCardReaderElement()
							.setValueChangedServerRequestNote(FuncMSR.FRAME_SWIPE_CARD_OPENTABLE);
				else if (this.m_oFrameOpenTableWithQwertyKeyboard.getVisible())
					oActiveClient.getSwipeCardReaderElement()
							.setValueChangedServerRequestNote(FuncMSR.FRAME_SWIPE_CARD_OPENTABLE_QWERTY);
			}
		}
		return bProcessResult;
	}
	
	private void setTogglePrintReceiptButtonStatus(String sPrintMode) {
		m_sCurrentPrintMode = sPrintMode;
		if (sPrintMode.equals(PRINT_MODE_PRINT_RECEIPT))
			m_sCurrentPrintModeButtonName = AppGlobal.g_oLang.get()._("toggle")+ System.lineSeparator() + AppGlobal.g_oLang.get()._("print_receipt");
		else if (sPrintMode.equals(PRINT_MODE_NOT_PRINT_RECEIPT))
			m_sCurrentPrintModeButtonName = AppGlobal.g_oLang.get()._("toggle")+ System.lineSeparator() + AppGlobal.g_oLang.get()._("not_print_receipt");
	}
	
	private void updateTogglePrintReceiptButtonList(int iId) {
		m_oPrintModeButtonList.clear();
		
		m_oPrintModeButtonList.addAll(m_oFrameCashierPanel.getButtonFromListByIdAndType(iId, PosDisplayPanelLookup.TYPE_FUNCTION));
		m_oPrintModeButtonList.addAll(m_oFrameFloorPlanFunctionPanel.getButtonFromListByIdAndType(iId, PosDisplayPanelLookup.TYPE_FUNCTION));
		m_oPrintModeButtonList.addAll(m_oFrameFuncPanel2.getButtonFromListByIdAndType(iId, PosDisplayPanelLookup.TYPE_FUNCTION));
		m_oPrintModeButtonList.addAll(m_oFrameOrderingPanel.getButtonFromListByIdAndType(iId, PosDisplayPanelLookup.TYPE_FUNCTION));
	}
	
	private void updateTogglePrintReceiptButtonName(String sShowName) {
		for (FrameGeneralLookupButton oFrameGeneralLookupButton : m_oPrintModeButtonList)
			oFrameGeneralLookupButton.getCurrentButton().setButtonDesc(sShowName);
	}
	
	
	private void setToggleOrderingBasketModeButtonStatus(String sOrderingBasketMode) {
		//update the button name
		m_sCurrentOrderingBasketMode = sOrderingBasketMode;
		if (sOrderingBasketMode.equals(FrameOrderingBasket.ORDERING_BASKET_MODE_SHOW_NORMAL))
			m_sCurrentOrderingBasketModeButtonName = AppGlobal.g_oLang.get()._("toggle") + AppGlobal.g_oLang.get()._("to") + System.lineSeparator() + AppGlobal.g_oLang.get()._("consolidate_items_ordering_basket");
		else
			m_sCurrentOrderingBasketModeButtonName = AppGlobal.g_oLang.get()._("toggle") + AppGlobal.g_oLang.get()._("to") + System.lineSeparator() + AppGlobal.g_oLang.get()._("normal_ordering_basket");
	}
	
	private void updateToggleOrderingBasketButtonList(int iId) {
		m_oOrderingBasketModeButtonList.clear();
		
		m_oOrderingBasketModeButtonList.addAll(m_oFrameCashierPanel.getButtonFromListByIdAndType(iId, PosDisplayPanelLookup.TYPE_FUNCTION));
		m_oOrderingBasketModeButtonList.addAll(m_oFrameFloorPlanFunctionPanel.getButtonFromListByIdAndType(iId, PosDisplayPanelLookup.TYPE_FUNCTION));
		m_oOrderingBasketModeButtonList.addAll(m_oFrameFuncPanel2.getButtonFromListByIdAndType(iId, PosDisplayPanelLookup.TYPE_FUNCTION));
		m_oOrderingBasketModeButtonList.addAll(m_oFrameOrderingPanel.getButtonFromListByIdAndType(iId, PosDisplayPanelLookup.TYPE_FUNCTION));
	}
	
	private void updateToggleOrderingBasketButtonName(String sShowName) {
		for (FrameGeneralLookupButton oFrameGeneralLookupButton : m_oOrderingBasketModeButtonList)
			oFrameGeneralLookupButton.getCurrentButton().setButtonDesc(sShowName);
	}
	
	//Get advance order setting for set default payment on deposit
	private HashMap<String, String> getAdvanceOrderDefaultPaymentMethodForDeposit() {
		HashMap<String, String> oResultMap = new HashMap<String, String>();
		oResultMap.put("support", "n");
		oResultMap.put("paymentId", "");
		
		// get advance order setting
		JSONObject oCheckOwnershipJSONObject = AppGlobal.g_oFuncStation.get().getAdvancedOrderSetting();
		if (oCheckOwnershipJSONObject != null && oCheckOwnershipJSONObject.optString("support").equals("y"))
			oResultMap.put("support", "y");
		if (oCheckOwnershipJSONObject != null && oCheckOwnershipJSONObject.has("paymentId"))
			oResultMap.put("paymentId", oCheckOwnershipJSONObject.optString("paymentId"));
		
		return oResultMap;
	}
	
	// add default payment for retrieve advance order and set deposit in cashier screen
	private void addDefaultDepositPaymentForAdvancedOrder(String sReferenceNo, BigDecimal dAmount, int iPaymentId) {
		if ((iPaymentId > 0) && (dAmount.compareTo(BigDecimal.ZERO) > 0)) {
			ArrayList<PosCheckExtraInfo> oPaymentExtraInfoList = new ArrayList<PosCheckExtraInfo>();
			oPaymentExtraInfoList.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_REFERENCE, sReferenceNo));
			// add default payment node in the cashier
			boolean bRetValue = preProcessEachPayment(iPaymentId, "", oPaymentExtraInfoList, true, dAmount);
			if (!bRetValue){
				rollBackCheckForCancelPayment(iPaymentId);
				exitCashier();
			}
		}
	}
	
	// check user password and authority on the specific function
	private boolean checkFunctionUserPasswordAndAuthority(String sFuncKey, boolean bFormTableFloorPlan) {
		PosFunction oPosFunctionForAuthority = m_oFunctionList.getFunctionByKey(sFuncKey);
		
		// check user password
		if (oPosFunctionForAuthority.askPassword()) {
			if (!this.askUserPassword(oPosFunctionForAuthority, bFormTableFloorPlan))
				return false;
		}
		
		// check user authority
		boolean bHaveAuthority = false;
		FuncUser oAuthorityUser = null;
		int iFunctionIdForAuthority = oPosFunctionForAuthority.getFuncId();
		PosFunctionAclCache oFuncAclCache = new PosFunctionAclCache();
		if (AppGlobal.g_oFuncUser.get().isSystemAdmin())
			bHaveAuthority = true;
		else if (oFuncAclCache.readByFuncKeyIdAndOutletId(iFunctionIdForAuthority,
				oPosFunctionForAuthority.getKey(), AppGlobal.g_oFuncOutlet.get().getOutletId())) {
			if (oFuncAclCache.isAllow()) {
				if (oFuncAclCache.getUserStatus().isEmpty())
					bHaveAuthority = true;
			}
			oAuthorityUser = checkAuthorityAndApproval(bHaveAuthority, oPosFunctionForAuthority, bFormTableFloorPlan);
			if(oAuthorityUser == null)
				return false;
		}
		
		return true;
	}
	
	// restore the background cover frame to max size (1280*800) and position (0, 0)
	private void restoreFrameCoverMaxSizeAndPosition() {
		m_oFrameCover.setTop(0);
		m_oFrameCover.setLeft(0);
		m_oFrameCover.setWidth(1280);
		m_oFrameCover.setHeight(800);
		
		return;
	}
	
	private PosDisplayPanelZone getOrderingBasketDisplayPanelZone() {
		PosDisplayPanelZone oOrderingDisplayPanelZone = new PosDisplayPanelZone();
		List<PosDisplayPanelZone> oOrderingBasketDisplayPanelZoneList = m_oPosDisplayPanel.filterDisplayPanelZoneByZone(PosDisplayPanelZone.KEY_ORDERING_BASKET);
		if(oOrderingBasketDisplayPanelZoneList.size() > 0){
			oOrderingDisplayPanelZone = oOrderingBasketDisplayPanelZoneList.get(0);
		}
		return oOrderingDisplayPanelZone;
	}
	
	// Function Bar Click Event
	private void functionBarButtonClicked(String sNote){
		if (m_oFrameFloorPlanFunctionPanel.getVisible()) {
			m_oFrameFloorPlanFunctionPanel.setVisible(false);
			this.m_oFrameTableFloorPlan.showOpenFunctionPanel(false);
		}
		
		if (!sNote.isEmpty()) {
			try {
				JSONObject oParamJSONObject = null;
				JSONObject oNoteJSONObject = null;
				HashMap<String, String> oFuncParam = null;
				
				oFuncParam = new HashMap<String, String>();
				oNoteJSONObject = new JSONObject(sNote);
				String sParameter = oNoteJSONObject.optString(FrameLookupButton.BUTTON_NOTE_PARAMETER);
				oParamJSONObject = new JSONObject(sParameter);
				
				int iFuncId = oNoteJSONObject.optInt(FrameLookupButton.BUTTON_NOTE_ID);
				JSONArray sNameJSONArray = new JSONArray(oNoteJSONObject.optString(FrameLookupButton.BUTTON_NOTE_NAME));
				String[] sName = null;
				if (sNameJSONArray.length() > 0) {
					sName = new String[sNameJSONArray.length()];
					for (int i = 0; i < sNameJSONArray.length(); i++) {
						sName[i] = sNameJSONArray.getString(i);
					}
				}
				oFuncParam.put(FrameLookupButton.BUTTON_NOTE_ID, Integer.toString(iFuncId));
				
				Iterator<?> keys = oParamJSONObject.keys();
				while (keys.hasNext()) {
					String key = (String) keys.next();
					String value = oParamJSONObject.getString(key);
					oFuncParam.put(key, value);
				}
				
				fcnSwitch(iFuncId, sName[AppGlobal.g_oCurrentLangIndex.get() - 1], -1, -1, true, oFuncParam);
			} catch (JSONException jsone) {
				jsone.printStackTrace();
			}
		}
		
		m_oFrameTableFloorPlan.setIdleTimeLogoutTimer(true);
	}
	
	// Function Bar Open Panel Click Event
	private void functionBarOpenPanelClicked(){
		m_oFrameTableFloorPlan.setEnabled(false);
		m_oFrameCover.setVisible(true);
		m_oFrameCover.bringToTop();
		
		m_oFrameFloorPlanFunctionPanel.setVisible(true);
		m_oFrameFloorPlanFunctionPanel.bringToTop();
		
		// Reset to show first page
		m_oFrameFloorPlanFunctionPanel.showDisplayPanelAtPage(1);
		m_oFrameFloorPlanFunctionPanel.showFirstTag();
		
		m_oFrameFloorPlanFunc.setVisible(true);
		m_oFrameFloorPlanFunc.bringToTop();
	}
	
	private boolean isRollbackNeededForCheckLimit(FuncCheck oFuncCheck, BigDecimal dAdditionalAmount){
		BigDecimal dCheckMaximum = AppGlobal.g_oFuncStation.get().getTableValidationTableLimit();
		boolean bNeedRollBack = false;
		if(oFuncCheck == null)
			return bNeedRollBack;
		
		if(oFuncCheck.isCheckExtraInfoExistBySectionVariableAndIndex("", PosCheckExtraInfo.VARIABLE_MAX_CHARGE, 0))
			dCheckMaximum = new BigDecimal(oFuncCheck.getCheckExtraInfoBySectionAndVariable("", PosCheckExtraInfo.VARIABLE_MAX_CHARGE, 0));
		if(dCheckMaximum.compareTo(BigDecimal.ZERO) > 0 && oFuncCheck.getCheckTotal().add(dAdditionalAmount).compareTo(dCheckMaximum) > 0){
			if(AppGlobal.g_oFuncStation.get().getTableValidationAskBypassMaximumCheckTotal()){
				String sMessage = AppGlobal.g_oLang.get()._("check_total") + " : "
						+ AppGlobal.g_oFuncOutlet.get().getCurrencySign() + AppGlobal.g_oFuncOutlet.get().roundCheckAmountToString(oFuncCheck.getCheckTotal().add(dAdditionalAmount))
						+ System.lineSeparator() + AppGlobal.g_oLang.get()._("check_limit") + " : "
						+ AppGlobal.g_oFuncOutlet.get().getCurrencySign()
						+ dCheckMaximum
						+ System.lineSeparator() + AppGlobal.g_oLang.get()._("check_limit_exceed")
						+ System.lineSeparator() + AppGlobal.g_oLang.get()._("confirm_to_continue") + "?";
				FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("confirm"),
						AppGlobal.g_oLang.get()._("cancel"), this);
				oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
				oFormConfirmBox.setMessage(sMessage);
				oFormConfirmBox.show();
				if (oFormConfirmBox.isOKClicked() == false)
					bNeedRollBack = true;
				else
					AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "", AppGlobal.g_oFuncUser.get().getUserId() + "", "Confirmed continue operation when when total exceed maximum");
			}
			else{
				showErrorDialogBox(AppGlobal.g_oLang.get()._("check_total") + " : "
						+ AppGlobal.g_oFuncOutlet.get().getCurrencySign() + AppGlobal.g_oFuncOutlet.get().roundCheckAmountToString(oFuncCheck.getCheckTotal().add(dAdditionalAmount))
						+ System.lineSeparator() + AppGlobal.g_oLang.get()._("check_limit") + " : "
						+ AppGlobal.g_oFuncOutlet.get().getCurrencySign()
						+ AppGlobal.g_oFuncOutlet.get().roundCheckAmountToString(dCheckMaximum)
						+ System.lineSeparator() + AppGlobal.g_oLang.get()._("check_limit_exceed"));;
				bNeedRollBack = true;
			}
		}
		return bNeedRollBack;
	}
	
	// count target item for change cover
	// (iTargetItemMenuId > 0) Return -1 when the item menu id not include in target item group
	private int getItemCountForTrackCover(int iItemMenuId, FuncCheck oTargetFuncCheck, boolean bNewItemOnly, boolean bOldItemOnly){
		HashMap<String, String> ChangeCoverByItemSoldSetting = AppGlobal.g_oFuncStation.get().getChangeCoverByItemSold();
		if(ChangeCoverByItemSoldSetting == null || !ChangeCoverByItemSoldSetting.get("support").equals("y"))
			return -1;
		
		String sPeriod = "";
		String[] sPeriodIds = null;
		boolean bFound = false;
		
		if(ChangeCoverByItemSoldSetting.containsKey("period_ids")){
			sPeriod = ChangeCoverByItemSoldSetting.get("period_ids");
			sPeriodIds = sPeriod.split(",");
			
			for(String sPeriodId : sPeriodIds){
				if(Integer.toString(AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getPeriodId()).equals(sPeriodId)){
					bFound = true;
					break;
				}
			}
		} else
			bFound = true;
		
		// Do nothing when not in target period
		if(!bFound)
			return -1;
		
		int iTargetItemCount = 0;
		String[] sItemGroupIdList = ChangeCoverByItemSoldSetting.get("item_group_ids").split(",");
		ArrayList<Integer> oTargetItemIds = new ArrayList<Integer>();
		
		for(MenuItemGroupLookup oMenuItemGroupLookup : m_oMenuItemGroupLookupList.getLookupList()){
			for(String sItemGroupId : sItemGroupIdList){
				if(oMenuItemGroupLookup.getItemGroupId() == Integer.parseInt(sItemGroupId)){
					oTargetItemIds.add(oMenuItemGroupLookup.getItemId());
					break;
				}
			}
		}
		
		if((iItemMenuId > 0 && !oTargetItemIds.contains(iItemMenuId)) ||
				oTargetItemIds.isEmpty())
			return -1;
		
		bFound = false;
		
		for (List<FuncCheckItem> oPartyItemList : oTargetFuncCheck.getWholeItemList()) {
			for (FuncCheckItem oFuncCheckItem : oPartyItemList) {
				if (oTargetItemIds.contains(oFuncCheckItem.getMenuItemId())){
					if((bNewItemOnly && oFuncCheckItem.isOldItem()) ||
							(bOldItemOnly && !oFuncCheckItem.isOldItem()))
						continue;
					else
						bFound = true;
					iTargetItemCount += oFuncCheckItem.getCheckItem().getQty().setScale(0, RoundingMode.UP).intValue();
				}
			}
		}
		
		//if new item only but cannot found new item, do not change the cover
		if(!bFound)
			return -1;
		
		return iTargetItemCount;
	}
	
	private void changeCoverByItem(int iItemMenuId, List<FuncCheck> oTargetCheckList, boolean bOldItemOnly){
		List<FuncCheck> oCheckList = new ArrayList<FuncCheck>();
		oCheckList.add(m_oFuncCheck);
		if(oTargetCheckList != null)
			oCheckList.addAll(oTargetCheckList);
		
		int iTargetItemCount = -1;
		
		for(FuncCheck oTargetCheck : oCheckList){
			iTargetItemCount = -1;
			iTargetItemCount = getItemCountForTrackCover(iItemMenuId, oTargetCheck, false, bOldItemOnly);
			if(iTargetItemCount < 0)
				continue;
			
			if(oTargetCheck.getCover() != iTargetItemCount){
				// Change the Cover
				if (oTargetCheck.changeCover(Integer.valueOf(iTargetItemCount)) == false) {
					// Error
					showErrorDialogBox(oTargetCheck.getLastErrorMessage());
					return;
				}
				
				// change display
				if(m_oFuncCheck.equals(oTargetCheck))
					m_oFrameCheckDetail.setCover(Integer.valueOf(iTargetItemCount));
			}
		}
	}
	
	public boolean handlePaymentMethodAuthority(PosPaymentMethod oPosPaymentMethod, ArrayList<PosCheckExtraInfo> oPaymentExtraInfoList) {
		String sMsg = "", sTitle = "";
		sTitle = AppGlobal.g_oLang.get()._("ask_approval");
		sMsg = AppGlobal.g_oLang.get()._("do_not_have_authority_to_apply_the_payment_method");
		if(!AppGlobal.g_oFuncUser.get().isSystemAdmin() && !m_oFuncPayment.checkPaymentMethodAuthority(oPosPaymentMethod, AppGlobal.g_oFuncUser.get())) {
			showErrorDialogBox(sMsg);
			FuncUser oTempUser = this.askUserPassword(
					oPosPaymentMethod.getName(AppGlobal.g_oCurrentLangIndex.get()) + " (" + sTitle + ")", true);
			
			if (oTempUser == null)
				return false;
			
			if(!oTempUser.isSystemAdmin() && !m_oFuncPayment.checkPaymentMethodAuthority(oPosPaymentMethod, oTempUser)) {
				showErrorDialogBox(sMsg);
				return false;
			}
			
			// add the extra info in payment
			oPaymentExtraInfoList.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, "", PosCheckExtraInfo.VARIABLE_APPROVAL_USER_NUM, oTempUser.getUserNumber()));
		}
		return true;
	}
	
	public void voidSelectedPayment(FuncCheck oFuncCheck, int iIndex, boolean bForce, boolean bUseLastReason){
		if(!bForce){
			// Is allow void payment
			String sErrorMessage = checkVoidPaymentAllowance(oFuncCheck.getCheckPaymentList().get(iIndex));
			if(!sErrorMessage.isEmpty()){
				showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_void_the_payment") + System.lineSeparator() + sErrorMessage);
				oFuncCheck.unlockTable(true, false);
				return;
			}
		}
		
		if(!oFuncCheck.checkNegativeGalaxyPayment(iIndex)) {
			showErrorDialogBox(oFuncCheck.getLastErrorMessage());
			oFuncCheck.unlockTable(true, false);
			return;
		}
		
		// Ask for void code
		PosVoidReason oVoidReason = null;
		if(bUseLastReason)
			oVoidReason = oFuncCheck.getLastReleasePaymentVoidReason();
		
		while(oVoidReason == null) {
			oVoidReason = this.callVoidReasonLookup(AppGlobal.g_oLang.get()._("void_reason"),
					AppGlobal.g_oLang.get()._("please_select_the_void_payment_reason"),
					PosVoidReason.TYPE_VOID_PAYMENT);
			if(oVoidReason == null){
				if(bForce)
					this.showErrorDialogBox(AppGlobal.g_oLang.get()._("please_select_the_void_payment_reason"));
				else {
					oFuncCheck.unlockTable(true, false);
					return;
				}
			}
		}
		
		if (oFuncCheck.releasePayment(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
				oFuncCheck.getCheckPrefixNo(), Integer.parseInt(oFuncCheck.getTableNo()), oFuncCheck.getTableExtension(),
				false, m_oFuncPayment.getPaymentMethodList(), oVoidReason, true, iIndex) == false) {
			String sErrorMsg = oFuncCheck.getLastErrorMessage();
			if (!sErrorMsg.isEmpty()) {
				this.showErrorDialogBox(sErrorMsg);
				return;
			}
		}
	}
	
	public String checkVoidPaymentAllowance(PosCheckPayment oPosCheckPayment){
		// SPA payment (standard SPA)
		for(PosPaymentGatewayTransactions oPosPaymentGatewayTransaction : oPosCheckPayment.getPosPaymentGatewayTransactionsList().getPosPaymentGatewayTransactionsList()){
			if(oPosPaymentGatewayTransaction.getType().equals(PosPaymentGatewayTransactions.TYPE_COMPLETE_AUTH))
				return AppGlobal.g_oLang.get()._("please_cancel_complete_authorization");
		}
		
		return "";
	}
	
	private void updateTableFloorPlanTimer(boolean bStart) {
		m_oFrameTableFloorPlan.setUpdateTableStatusTimer(bStart);
		m_oFrameTableFloorPlan.setIdleTimeLogoutTimer(bStart);
	}
	
	public void showTableFunction(String sTableNo, String sTableExtension, boolean bTableButtonLongClick) {
		if (bTableButtonLongClick && m_oFrameFloorPlanFunctionPanel.getVisible()) {
			m_oFrameFloorPlanFunctionPanel.setVisible(false);
			this.m_oFrameTableFloorPlan.showOpenFunctionPanel(false);
		}
		
		ArrayList<String> oOptionList = new ArrayList<String>();
		ArrayList<Integer> oCodeList = new ArrayList<Integer>();
		PosFunction oFunction = null;
		String[] sTableFuncKeyList;
		
		if (m_bFloorPlanWaitUserAction)
			return;
		
		
		PosOutletTable oOutletTable = new PosOutletTable();
		oOutletTable.readByOutletIdTable(AppGlobal.g_oFuncOutlet.get().getOutletId(), Integer.parseInt(sTableNo),
				sTableExtension);
		boolean bTableOpened = true;
		if (oOutletTable.isNewTable() || oOutletTable.isVacant())
			bTableOpened = false;
		
		if (oOutletTable.isCleaningTable())
			sTableFuncKeyList = new String[] { AppGlobal.FUNC_LIST.open_share_table.name(),
					AppGlobal.FUNC_LIST.mark_table_status_to_vacant.name(), AppGlobal.FUNC_LIST.unlock_table.name(),
					AppGlobal.FUNC_LIST.check_history.name()};
		else
			sTableFuncKeyList = new String[] { AppGlobal.FUNC_LIST.open_share_table.name(), AppGlobal.FUNC_LIST.change_table.name(),
					AppGlobal.FUNC_LIST.print_check.name(), AppGlobal.FUNC_LIST.merge_table.name(),
					AppGlobal.FUNC_LIST.unlock_table.name(), AppGlobal.FUNC_LIST.check_history.name(),
					AppGlobal.FUNC_LIST.void_check.name(), AppGlobal.FUNC_LIST.void_payment.name(),
					AppGlobal.FUNC_LIST.table_message_reminder.name()};
		
		String[] oNotAllowFunctionKeyList = { AppGlobal.FUNC_LIST.print_check.name(), AppGlobal.FUNC_LIST.merge_table.name(),
				AppGlobal.FUNC_LIST.void_check.name(), AppGlobal.FUNC_LIST.void_payment.name(),
				AppGlobal.FUNC_LIST.table_message_reminder.name() };
		
		for (PosFunction oPosFunction : this.generatePosFunctionList(sTableFuncKeyList)) {
			if (!bTableButtonLongClick || Integer.parseInt(sTableNo) == 0) {
				if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.open_share_table.name()))
					continue;
			} else if (!bTableOpened) {
				boolean bNotAllow = false;
				for (String sNotAllowFunctionKey: oNotAllowFunctionKeyList) {
					if (oPosFunction.getKey().equals(sNotAllowFunctionKey)) {
						bNotAllow = true;
						break;
					}
				}
				if (bNotAllow)
					continue;
			}
			oOptionList.add(oPosFunction.getName(AppGlobal.g_oCurrentLangIndex.get()));
			oCodeList.add(oPosFunction.getFuncId());
		}
		
		FormCommonPageContainer oFormSelectionBox = new FormCommonPageContainer(this);
		oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select_the_action_type_for_table")
						+ " : " + AppGlobal.g_oFuncOutlet.get().getTableNameWithTableNo(sTableNo,
				sTableExtension)[AppGlobal.g_oCurrentLangIndex.get() - 1],
				oOptionList, false);
		if (oFormSelectionBox.isUserCancel()) {
			m_oFrameTableFloorPlan.setIdleTimeLogoutTimer(true);
		} else {
			ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
			oFunction = m_oFunctionList.getFunction(oCodeList.get(oSelectionBoxResult.get(0)));
			
			AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
					AppGlobal.g_oFuncUser.get().getUserId() + "",
					"Table Floor Plan Function on table " + sTableNo + sTableExtension + ": " + oFunction.getKey());
			
			// call the function accordingly
			if (oFunction.getKey().equals(AppGlobal.FUNC_LIST.open_share_table.name())) {
				HashMap<String, String> oFunctionParams = new HashMap<String, String>();
				oFunctionParams.put("tableNo", sTableNo);
				
				// Open share table
				fcnSwitch(oFunction.getFuncId(), "", -1, -1, true, oFunctionParams);
				
			} else if (oFunction.getKey().equals(AppGlobal.FUNC_LIST.change_table.name())
					|| oFunction.getKey().equals(AppGlobal.FUNC_LIST.merge_table.name())) {
				if (openCheck(sTableNo, sTableExtension, false, 0, false, false) == false)
					return;
				
				m_bFloorPlanWaitUserAction = true;
				m_iFloorPlanCurrentFuncId = oFunction.getFuncId();
				
				// Change the table floor plan to select table mode
				if (oFunction.getKey().equals(AppGlobal.FUNC_LIST.change_table.name()))
					m_oFrameTableFloorPlan.showFloorActionUI(
							AppGlobal.g_oTerm.get().getClientImageURLPath() + "/buttons/error_button.png",
							AppGlobal.g_oLang.get()._("please_select_the_table_which_will_be_changed_from", " ",
									AppGlobal.g_oFuncOutlet.get().getTableNameWithTableNo(sTableNo, sTableExtension)));
				else if (oFunction.getKey().equals(AppGlobal.FUNC_LIST.merge_table.name()))
					m_oFrameTableFloorPlan.showFloorActionUI(
							AppGlobal.g_oTerm.get().getClientImageURLPath() + "/buttons/error_button.png",
							AppGlobal.g_oLang.get()._("please_select_the_table_which_will_be_merged_to_table", " ",
									AppGlobal.g_oFuncOutlet.get().getTableNameWithTableNo(sTableNo, sTableExtension)));
			} else if (oFunction.getKey().equals(AppGlobal.FUNC_LIST.print_check.name())) {
				if (openCheck(sTableNo, sTableExtension, false, 0, false, false) == false)
					return;
				
				// Block if Split Check Auto Function Not Finished
				if (AppGlobal.g_oFuncStation.get().getCheckAutoFunctionsOption()
						&& m_oFuncCheck.isCheckExtraInfoExistBySectionVariableAndIndex(
						PosCheckExtraInfo.SECTION_AUTO_FUNCTIONS, PosCheckExtraInfo.VARIABLE_FINISH, 0)) {
					// check if split auto func not finished and not processing previously
					if (m_oFuncCheck.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_AUTO_FUNCTIONS, PosCheckExtraInfo.VARIABLE_FINISH).equals(PosCheckExtraInfo.VALUE_FALSE)) {
						showErrorDialogBox(AppGlobal.g_oLang.get()._("auto_function_not_done"));
						return;
					}
				}
				
				updateTableFloorPlanTableStatus(false);
				
				HashMap<String, String> oFunctionParams = new HashMap<String, String>();
				oFunctionParams.put("printGuestCheck", "true");
				oFunctionParams.put("payCheck", "false");
				oFunctionParams.put("checkAutoSignOut", "false");
				
				// Print Check
				fcnSwitch(oFunction.getFuncId(), "", -1, -1, true, oFunctionParams);
			} else if (oFunction.getKey().equals(AppGlobal.FUNC_LIST.unlock_table.name())
					|| oFunction.getKey().equals(AppGlobal.FUNC_LIST.check_history.name())
					|| oFunction.getKey().equals(AppGlobal.FUNC_LIST.void_check.name())
					|| oFunction.getKey().equals(AppGlobal.FUNC_LIST.void_payment.name())
					|| oFunction.getKey().equals(AppGlobal.FUNC_LIST.mark_table_status_to_vacant.name())) {
				HashMap<String, String> oFunctionParams = new HashMap<String, String>();
				oFunctionParams.put("tableNo", sTableNo);
				oFunctionParams.put("tableExtension", sTableExtension);
				
				// Unlock table, Show check history, Perform void check
				fcnSwitch(oFunction.getFuncId(), "", -1, -1, true, oFunctionParams);
			} else if (oFunction.getKey().equals(AppGlobal.FUNC_LIST.table_message_reminder.name())) {
				// Table message reminder
				fcnSwitch(oFunction.getFuncId(), "", -1, -1, true, null);
			}
		}
	}
	
	private UserUser getUserByNameOrNumber() {
		FormInputBox oFormInputBox;
		boolean bBreak = false;
		String sEmployeeNumber = null;
		int iEmployeeId = 0;
		String sEmployeeCardNumber = null;
		UserUser oEmployee = new UserUser();
		
		do {
			bBreak = false;
			oFormInputBox = new FormInputBox(this);
			oFormInputBox.init();
			oFormInputBox.setEnterBlockUI(true);
			oFormInputBox.showKeyboard();
			oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("employee_number_or_name"));
			oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("please_input_the_employee_number_or_name") + ":");
			oFormInputBox.show();
			
			sEmployeeNumber = oFormInputBox.getInputValue();
			sEmployeeCardNumber = oFormInputBox.getSwipeCardValue();
			if(sEmployeeCardNumber != null && !sEmployeeCardNumber.isEmpty()) {
				FuncUser oTempUser = new FuncUser();
				sEmployeeCardNumber = sEmployeeCardNumber.replace("\r", "").replace("\n", "");
				if(oTempUser.isValidUserByCardNum(sEmployeeCardNumber) == false) {
					this.showErrorDialogBox(AppGlobal.g_oLang.get()._("fail_to_get_record"));
				}else {
					oEmployee = oTempUser.getUser();
					break;
				}
			} else if (sEmployeeNumber == null)
				break;
			else if (sEmployeeNumber.length() == 0) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("not_allow_blank_employee_number"));
			} else {
				FormSearchUser oFormSearchUser = new FormSearchUser(this);
				if (oFormSearchUser.init(sEmployeeNumber) == false)
					break;
				oFormSearchUser.show();
				if (oFormSearchUser.isUserCancel())
					break;
				else {
					sEmployeeNumber = oFormSearchUser.getEmployeeNum();
					iEmployeeId = oFormSearchUser.getEmployeeId();
					if(!sEmployeeNumber.isEmpty())
						oEmployee.readByUserNumber(sEmployeeNumber);
					else if(iEmployeeId != 0)
						oEmployee.readByUserId(iEmployeeId, 1);
					bBreak = true;
				}
			}
		} while (!bBreak);
		
		return oEmployee;
	}

	public boolean isInterfaceSetupEmpty(PosInterfaceConfig oPosInterfaceConfig, String sSectionKey, ArrayList<String> oSetupKeyList) {
		if(!oPosInterfaceConfig.getInterfaceConfig().has(sSectionKey))
			return true;
		JSONObject oParams = oPosInterfaceConfig.getInterfaceConfig().optJSONObject(sSectionKey).optJSONObject("params");
		boolean bResult = false;
		
		for(String sKey : oSetupKeyList) {
			if(!oParams.has(sKey) || oParams.optJSONObject(sKey).optString("value").isEmpty()) {
				bResult = true;
				break;
			}
		}
		return bResult;
	}
	
	public boolean isNotAllowPrintReceipt(boolean bFromCashier, boolean bCloseCheck) {
		String sReceiptLocationConfig = AppGlobal.g_oFuncStation.get().getNotPrintReceipt(m_eOperationMode);
		
		if (bFromCashier) {
			// If the check is not full pay && Support Partial Payment && Config Skip print if not full pay, not print receipt
			if (!bCloseCheck && AppGlobal.g_oFuncStation.get().isPartialPayment() && AppGlobal.g_oFuncStation.get().isPartialPaymentPrintReceiptWhenFinishAllPayment())
				return true;
		}
		
		// If have toggle print mode button, return based on print button mode
		if (m_oPrintModeButtonList.size() > 0)
			return m_sCurrentPrintMode.equals(FormMain.PRINT_MODE_PRINT_RECEIPT) ? false : true;
			// Otherwise, return value based on config by location
		else if (sReceiptLocationConfig.equals(FuncStation.DO_NOT_PRINT_RECEIPT_ASK_OPTIONS)) {
			// Ask Confirmation to print receipt
			FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"), AppGlobal.g_oLang.get()._("no"), this);
			oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
			oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("confirm_to_print_receipt")+"?");
			oFormConfirmBox.show();
			
			sReceiptLocationConfig = oFormConfirmBox.isOKClicked() == false ? "true" : "false";
		}
		
		return Boolean.parseBoolean(sReceiptLocationConfig);
	}
	
	public HashMap<String, Object> loadDetailForConfigListAndPayments() {
		PosConfigList oPosConfigList = new PosConfigList();
		PosInterfaceConfigList oInterfaceConfigList = new PosInterfaceConfigList();
		PosItemRemindRuleList oPosItemRemindRuleList = new PosItemRemindRuleList();
		m_oPosTableMessageList = new PosTableMessageList();
		m_oPosTableSettingList = new PosTableSettingList();
		m_oMenuPriceLevelList = new MenuPriceLevelList();
		m_oMenuItemGroupLookupList = new MenuItemGroupLookupList();
		HashMap<String, Object> oReturnResult = new HashMap<>();
		
		PosGeneral oPosGeneral = new PosGeneral();
		oPosGeneral.readConfigListTableMessageItemRemindRule(AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
				AppGlobal.g_oFuncStation.get().getStationId(), "system");
		
		if(oPosGeneral.getPosConfigList() != null)
			oPosConfigList = oPosGeneral.getPosConfigList();
		
		if(oPosGeneral.getPosInterfaceConfigList() != null)
			oInterfaceConfigList = oPosGeneral.getPosInterfaceConfigList();
		
		if(oPosGeneral.getPosTableMessageList() != null)
			m_oPosTableMessageList = oPosGeneral.getPosTableMessageList();
		
		if(oPosGeneral.getPosItemRemindRuleList() != null)
			oPosItemRemindRuleList = oPosGeneral.getPosItemRemindRuleList();
		
		if(oPosGeneral.getPosTableSettingList() != null)
			m_oPosTableSettingList = oPosGeneral.getPosTableSettingList();
		
		oReturnResult.put("posConfig", oPosConfigList);
		oReturnResult.put("interfaceConfig", oInterfaceConfigList);
		oReturnResult.put("itemRemindRule", oPosItemRemindRuleList);
		
		MenuGeneral oMenuGeneral = new MenuGeneral();
		oMenuGeneral.readMenuItemList();
		
		if(oMenuGeneral.getMenuPriceLevelList() != null)
			m_oMenuPriceLevelList = oMenuGeneral.getMenuPriceLevelList();
		if(oMenuGeneral.getMenuItemGroupLookupList() != null)
			m_oMenuItemGroupLookupList = oMenuGeneral.getMenuItemGroupLookupList();
		
		return oReturnResult;
	}
	
	public boolean isTurnOffAllSwitchCheckInfo(JSONObject oSwitchCheckInfo) {
		if (oSwitchCheckInfo == null)
			return true;
		Iterator<String> keys = oSwitchCheckInfo.keys();
		while(keys.hasNext()){
			String sKey = keys.next();
			try {
				if(oSwitchCheckInfo.get(sKey).equals("y"))
					return false;
			} catch (JSONException e) {
				e.printStackTrace();
			}
		}
		return true;
	}
	
	//Update all existing basket item info
	//iMode: 0 = update no matter item is new, 1 = update old item only, 2 = update old/new item only (By using PosCheckItem.UPDATE_MODE_XXX_XXXX
	private void updateAllItemBasketInfo(int iMode) {
		for (int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
			// Create ordering basket section for seat
			ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>) m_oFuncCheck.getItemList(i);
			if (oFuncCheckItemList != null && oFuncCheckItemList.size() > 0) {
				// Has ordered items in seat i
				for (int j = 0; j < oFuncCheckItemList.size(); j++) {
					FuncCheckItem oFuncCheckItem = oFuncCheckItemList.get(j);
					boolean bUpdate = false;
					if(iMode == PosCheckItem.UPDATE_MODE_ALL_ITEM || (iMode == PosCheckItem.UPDATE_MODE_NEW_ITEM && !oFuncCheckItem.isOldItem())
							|| (iMode == PosCheckItem.UPDATE_MODE_OLD_ITEM && oFuncCheckItem.isOldItem()))
						bUpdate = true;
					
					if (bUpdate)
						this.updateBasketItemInfo(i, j);
				}
			}
		}
	}
	
	// Check whether the flag "show floor plan after switch user" is enabled or not
	// return false if the operation mode is bar tab mode
	public boolean isShowTableFloorAfterSwitchUserWithCheckingOperationMode() {
		if(AppGlobal.g_oFuncStation.get().isShowTableFloorAfterSwitchUser()
				&& !m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab))
			return true;
		else
			return false;
	}
	
	///////////////////////////////////////////////////////////////
	// Frame Event Handle Area
	///////////////////////////////////////////////////////////////
	
	@Override
	public void processClientReconnectRelogin() {
		// Relogin
		String sReconnectId = AppGlobal.getReconnectId(Thread.currentThread().getId());
		String sReconnectPassword = AppGlobal.getReconnectPassword(Thread.currentThread().getId());
		String sReconnectCardNo = AppGlobal.getReconnectCardNo(Thread.currentThread().getId());
		
		this.clientReconnectRelogin(sReconnectId, sReconnectPassword, sReconnectCardNo);
	}
	
	@Override
	public void frameOrderingPanel_hotItemClicked(int iId) {
		// If under direct payment mode, cannot add item
		if (m_iCashierMode == 2 || m_bIsCheckLoadedForCashierMode)
			return;
		
		// If set menu is shown, cannot add item
		if (m_oFrameSetMenu != null)
			return;
		
		addHotItem(iId, m_dQty, false);
	}
	
	@Override
	public void frameOrderingPanel_hotItemLongClicked(int iId) {
		FuncCheckItem oFuncCheckItem = new FuncCheckItem();
		
		// Reset ordering item timeout
		setOrderingTimeoutChecking(true);
		
		if (oFuncCheckItem.retieveItemFromMenu(iId, BigDecimal.ZERO, new BigDecimal("1.0"), null, false, false,
				AppGlobal.g_oFuncOutlet.get().getPriceLevel()) == false)
			return;
		
		FormItemDetail oFormItemDetail = new FormItemDetail(this);
		oFormItemDetail.initWithFuncCheckItem(oFuncCheckItem, AppGlobal.g_oFuncOutlet.get().getPriceLevel(), true,
				AppGlobal.g_oFuncOutlet.get().getItemRoundDecimal(), null);
		oFormItemDetail.show();
		
		if (oFormItemDetail.isOrderItem())
			addHotItem(iId, m_dQty, false);
	}
	
	@Override
	public void frameOrderingPanel_hotModifierClicked(int iId, String sParameter) {
		// If under cashier, not allow to do it
		if (!orderingPanelButtonClickChecking(PosDisplayPanelLookup.TYPE_HOT_MODIFIER))
			return;
		
		if (m_iCashierMode == 2 || m_bIsCheckLoadedForCashierMode)
			return;
		
		// Reset ordering timeout
		setOrderingTimeoutChecking(true);
		
		// Check whether is it common lookup
		if (sParameter != null && !sParameter.equals("")) {
			try {
				JSONObject oParameter = new JSONObject(sParameter);
				if (oParameter.has(PosDisplayPanelLookup.PARAM_COMMON_MODIFIER) && oParameter.optString(PosDisplayPanelLookup.PARAM_COMMON_MODIFIER)
						.equals(PosDisplayPanelLookup.PARAM_COMMON_MODIFIER_TRUE)) {
					ClsMultiSelectModifierState oClsMultiSelectModifierState = new ClsMultiSelectModifierState();
					m_oClsMultiSelectModifierState.put(iId, oClsMultiSelectModifierState);
					m_bMultiSelectModifier = true;
					toggleBacketMultiSelectMode(true, PosDisplayPanelLookup.PARAM_COMMON_MODIFIER, FrameOrderingBasket.SELECT_TYPE_NEW_ITEM, FrameBasketSelectPanel.BASKET_SELECT_MODE_MULTI);
					return;
				} else {
					addHotModifier(iId, -1, -1);
				}
			} catch (JSONException jsone) {
				AppGlobal.stack2Log(jsone);
			}
		} else {
			// Add Hot Modifier
			addHotModifier(iId, -1, -1);
		}
	}
	
	@Override
	public void frameOrderingPanel_functionClicked(int iId, String[] sLookupName, String sParameter) {
		// Reset ordering timeout
		setOrderingTimeoutChecking(true);
		if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) && (m_iCashierMode == 2 || m_bIsCheckLoadedForCashierMode))
			setCashierTimeoutChecking(true);
		
		// If set menu is shown, cannot add item
		if (m_oFrameSetMenu != null)
			return;
		
		JSONObject oParamJSONObject = null;
		HashMap<String, String> oFuncParam = null;
		if (!sParameter.isEmpty()) {
			try {
				oFuncParam = new HashMap<String, String>();
				oParamJSONObject = new JSONObject(sParameter);
				Iterator<?> keys = oParamJSONObject.keys();
				while (keys.hasNext()) {
					String key = (String) keys.next();
					String value = oParamJSONObject.getString(key);
					oFuncParam.put(key, value);
				}
			} catch (JSONException jsone) {
				jsone.printStackTrace();
			}
		}
		
		if (m_oFrameFloorPlanFunctionPanel.getVisible()) {
			PosFunction oFunction = m_oFunctionList.getFunction(iId);
			AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
					AppGlobal.g_oFuncUser.get().getUserId() + "", "Floor Plan Function Panel Function" + ": " + oFunction.getKey());
			
			fcnSwitch(iId, sLookupName[AppGlobal.g_oCurrentLangIndex.get() - 1], -1, -1, true, oFuncParam);
			// close floor plan function panel
			
			m_oFrameFloorPlanFunc.setVisible(false);
			// do not close cover frame if current function is search item from floor plan and split revenue, because ordering basket is toggled for item selection
			if (!m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name())
					&& (!m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.search_item.name()) && m_oFrameFloorPlanFunctionPanel.getVisible()))
				m_oFrameCover.setVisible(false);
			m_oFrameFloorPlanFunctionPanel.setVisible(false);
			m_oFrameTableFloorPlan.setEnabled(true);
			
			m_oFrameFloorPlanFunctionPanel.setVisible(false);
			this.m_oFrameTableFloorPlan.showOpenFunctionPanel(false);
		} else{
			if(oFuncParam != null && !(oFuncParam.containsKey("tableNo") && oFuncParam.containsKey("tableExtension"))) {
				oFuncParam.put("tableNo", m_oFuncCheck.getTableNo());
				oFuncParam.put("tableExtension", m_oFuncCheck.getTableExtension());
			}
			fcnSwitch(iId, sLookupName[AppGlobal.g_oCurrentLangIndex.get() - 1], -1, -1, false, oFuncParam);
		}
	}
	
	@Override
	public void frameOrderingPanel_paymentClicked(int iId, String sParameter) {
		if (!orderingPanelButtonClickChecking(PosDisplayPanelLookup.TYPE_DIRECT_PAYMENT))
			return;
		
		// Store the previous cashier start time
		DateTime iPreviousCashierTimerStartTime = m_dtStartCashierTime;
		if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode))
			setCashierTimeoutChecking(false);
		
		handlePaymentKey(iId, sParameter, null);
		
		// If previous cashier start time is not null, update the time
		if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) && iPreviousCashierTimerStartTime != null)
			setCashierTimeoutChecking(true);
	}
	
	@Override
	public void frameOrderingPanel_subPanelPageClicked(int iId) {
		// Reset ordering timeout
		setOrderingTimeoutChecking(true);
		
		if (m_iCashierMode == 0 || m_bIsCheckLoadedForCashierMode == false) {
			m_oFrameOrderingPanel.showSubDisplayPanelByPageId(iId);
		} else {
			m_oFrameCashierPanel.showSubDisplayPanelByPageId(iId);
		}
	}
	
	@Override
	public void frameOrderingPanel_discountClicked(int iId, String sParameter) {
		PosDiscountType oSelectedDiscType = new PosDiscountType();
		
		if (!orderingPanelButtonClickChecking(PosDisplayPanelLookup.TYPE_DIRECT_DISCOUNT))
			return;
		
		// If under cashier, not allow to do it
		if (m_iCashierMode == 2 || m_bIsCheckLoadedForCashierMode)
			return;
		
		if (oSelectedDiscType.readByIdOutlet(iId, AppGlobal.g_oFuncOutlet.get().getOutletId(),AppGlobal.g_oFuncOutlet.get().getShopId(),AppGlobal.g_oFuncUser.get().getUserGroupList())) {
			//check whether the discount allowed for current user group
			boolean bHaveAuthority = false;
			if(oSelectedDiscType.getAllowUserGroupId() > 0) {
				for (int iUserGrpId : AppGlobal.g_oFuncUser.get().getUserGroupList()) {
					if(iUserGrpId == oSelectedDiscType.getAllowUserGroupId()) {
						bHaveAuthority = true;
						break;
					}
				}
			}else
				bHaveAuthority = true;
			if(!bHaveAuthority) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("user_do_not_have_permission_on_this_discount"));
				return;
			}
			
			boolean bIsCheckDiscount = false;
			if (oSelectedDiscType.getApplyTo().equals(PosDiscountType.APPLY_TO_CHECK_AND_ITEM)) {
				// If Used for Extra charge, that is for check only
				if (oSelectedDiscType.getUsedFor().equals(PosDiscountType.USED_FOR_EXTRA_CHARGE))
					bIsCheckDiscount = true;
				else {
					ArrayList<String> oOptionList = new ArrayList<String>();
					oOptionList.add(AppGlobal.g_oLang.get()._("check_discount"));
					oOptionList.add(AppGlobal.g_oLang.get()._("item_discount"));
					
					FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
					oFormSelectionBox.initWithSingleSelection(
							AppGlobal.g_oLang.get()._("please_select_the_action_type"), oOptionList, false);
					oFormSelectionBox.show();
					
					if (oFormSelectionBox.isUserCancel())
						return;
					else {
						if (oOptionList.get(oFormSelectionBox.getResultList().get(0))
								.equals(AppGlobal.g_oLang.get()._("check_discount")))
							bIsCheckDiscount = true;
						else
							bIsCheckDiscount = false;
					}
				}
			} else if (oSelectedDiscType.getApplyTo().equals(PosDiscountType.APPLY_TO_CHECK))
				bIsCheckDiscount = true;
			else if (oSelectedDiscType.getApplyTo().equals(PosDiscountType.APPLY_TO_ITEM)) {
				if (oSelectedDiscType.getUsedFor().equals(PosDiscountType.USED_FOR_EXTRA_CHARGE)) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("setup_format_error") + System.lineSeparator()
							+ AppGlobal.g_oLang.get()._("extra_charge_discount_only_for_check"));
					return;
				}
				bIsCheckDiscount = false;
			}
			
			// Check if there is restriction on applying multiple discounts
			if (oSelectedDiscType.getUsedFor().equals(PosDiscountType.USED_FOR_DISCOUNT)
					&& !m_oFuncCheck.checkDiscountApplyRestriction(bIsCheckDiscount)) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("discount_had_been_applied_before"));
				return;
			}
			
			List<HashMap<String, Integer>> oSelectedItems = new ArrayList<HashMap<String, Integer>>();
			ArrayList<PosCheckExtraInfo> oExtraInfoList = new ArrayList<PosCheckExtraInfo>();
			
			if (bIsCheckDiscount) {
				// Apply check discount
				// form the selection items list for check discount
				int iSeatNo = 0, iItemIndex = 0;
				List<List<FuncCheckItem>> oPartyWholeItems = m_oFuncCheck.getWholeItemList();
				for (List<FuncCheckItem> oItemListForSingleSeat : oPartyWholeItems) {
					for (iItemIndex = 0; iItemIndex < oItemListForSingleSeat.size(); iItemIndex++) {
						HashMap<String, Integer> oTempSelectedItem = new HashMap<String, Integer>();
						oTempSelectedItem.put("partySeq", m_oFuncCheck.getCurrentCheckPartySeq());
						oTempSelectedItem.put("sectionId", iSeatNo);
						oTempSelectedItem.put("itemIndex", iItemIndex);
						oSelectedItems.add(oTempSelectedItem);
					}
					iSeatNo++;
				}
				this.applyDiscount("check", PosDiscountType.USED_FOR_DISCOUNT, oSelectedItems, oSelectedDiscType,
						oExtraInfoList);
			} else {
				// Apply item discount to last item
				// No item ordered
				if (!checkLastItemExist())
					return;
				
				// the last check item in the list is new replace item
				int iCurrentSeatNo = m_oFrameOrderingBasket.getSelectedSectionId();
				int iLastItemIndex = m_oFuncCheck.getItemListCount(iCurrentSeatNo) - 1;
				FuncCheckItem oLastFuncCheckItem = m_oFuncCheck.getCheckItem(iCurrentSeatNo, iLastItemIndex);
				
				// Cannot apply item discount if it already has item discount
				if (oLastFuncCheckItem.hasItemDiscount(true)) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("item_already_had_discount"));
					return;
				}
				
				HashMap<String, Integer> oTempSelectedItem = new HashMap<String, Integer>();
				oTempSelectedItem.put("partySeq", m_oFuncCheck.getCurrentCheckPartySeq());
				oTempSelectedItem.put("sectionId", iCurrentSeatNo);
				oTempSelectedItem.put("itemIndex", iLastItemIndex);
				oSelectedItems.add(oTempSelectedItem);
				
				this.applyDiscount("item", PosDiscountType.USED_FOR_DISCOUNT, oSelectedItems, oSelectedDiscType,
						oExtraInfoList);
			}
		} else {
			// Cannot found the discount in DB or that discount is Suspended
			showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_find_discount_type"));
			return;
		}
		
	}
	
	@Override
	public void frameOrderingPanel_lookupClicked(int iId) {
		// If under cashier, not allow to do it
		if (m_iCashierMode == 2 || m_bIsCheckLoadedForCashierMode)
			return;
		
		// Reset ordering timeout
		setOrderingTimeoutChecking(true);
		
		// Close previous lookup first
		if (m_oFrameOrderingMenuLookup != null)
			m_oFrameOrderingMenuLookup.setVisible(false);
		
		// Item Lookup
		MenuMenu oMenuMenu = AppGlobal.g_oFuncMenu.get().getMenuAndContentById(iId);
		if (oMenuMenu == null)
			return;
		
		if (oMenuMenu.isModifierMenu() && !orderingPanelButtonClickChecking(PosDisplayPanelLookup.TYPE_MENU_LOOKUP))
			return;
		
		String sMenuName = oMenuMenu.getShortName(AppGlobal.g_oCurrentLangIndex.get());
		if (sMenuName.isEmpty())
			sMenuName = oMenuMenu.getName(AppGlobal.g_oCurrentLangIndex.get());
		// m_oListOfMenuName.add(sMenuName);
		
		List<MenuMenuLookup> oSelectedMenuMenuLUList = oMenuMenu.getMenuLookupList();
		String sMenuType = oMenuMenu.getRole();
		if (oSelectedMenuMenuLUList == null || oSelectedMenuMenuLUList.isEmpty())
			return;
		
		// Create lookup UI
		List<FuncLookupButtonInfo> oCurrentLookupList = prepareCurrentLUList(oSelectedMenuMenuLUList, false, sMenuType);
		m_oFrameOrderingMenuLookup.addSubLookupInfo(sMenuName, oCurrentLookupList, true);
		m_oFrameOrderingMenuLookup.setVisible(true);
		m_oFrameOrderingMenuLookup.bringToTop();
	}
	
	@Override
	public void frameOrderingPanel_modifierLookupClicked(int iId, String sParameter) {
		int iSectionId = m_oFrameOrderingBasket.getSelectedSectionId();
		int iItemIndex = m_oFuncCheck.getItemListCount(iSectionId) - 1;
		
		if (!orderingPanelButtonClickChecking(PosDisplayPanelLookup.TYPE_MODIFIER_LOOKUP))
			return;
		
		// If under cashier, not allow to do it
		if (m_iCashierMode == 2 || m_bIsCheckLoadedForCashierMode)
			return;
		
		// Reset ordering timeout
		setOrderingTimeoutChecking(true);
		
		// Get the selected item in ordering basket
		FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iSectionId, iItemIndex);
		
		if (oFuncCheckItem == null) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("no_item_ordered"));
			return;
		}
		
		if (oFuncCheckItem.isOldItem()) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("no_new_item_ordered"));
			return;
		}
		
		// Get modifier lookup
		int iSelectedLUMenuId = iId;
		MenuMenu oModifierMenu = AppGlobal.g_oFuncMenu.get().getMenuAndContentById(iSelectedLUMenuId);
		if (oModifierMenu == null) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("lookup_is_not_found"));
			return;
		}
		
		// Check whether is it common lookup
		if (sParameter != null && !sParameter.equals("")) {
			try {
				JSONObject oParameter = new JSONObject(sParameter);
				if (oParameter.has(PosDisplayPanelLookup.PARAM_COMMON_MODIFIER_LOOKUP) && oParameter.optString(PosDisplayPanelLookup.PARAM_COMMON_MODIFIER_LOOKUP)
						.equals(PosDisplayPanelLookup.PARAM_COMMON_MODIFIER_LOOKUP_TRUE)) {
					m_iCurrentCommonModifierLookupId = iSelectedLUMenuId;
					toggleBacketMultiSelectMode(true, PosDisplayPanelLookup.PARAM_COMMON_MODIFIER_LOOKUP, FrameOrderingBasket.SELECT_TYPE_NEW_ITEM, FrameBasketSelectPanel.BASKET_SELECT_MODE_MULTI);
					return;
				}
			} catch (JSONException jsone) {
				AppGlobal.stack2Log(jsone);
			}
		}
		
		List<MenuMenu> oMenuList = new ArrayList<MenuMenu>();
		oMenuList.add(oModifierMenu);
		
		callModifierLookup(oFuncCheckItem, oMenuList, -1, -1, true);
	}
	
	@Override
	public void frameOrderingPanel_barcodeReaded(int iCurrentFrameId, String sValue) {
		// Handle barcode in add item by PLU function
		if (m_oFrameEnterItemPLU.getVisible()) {
			m_oFrameEnterItemPLU.setItemCode(sValue);
			// Hide the keyboard
			AppGlobal.g_oTerm.get().hideKeyboard();
		} else {
			// Handle barcode in ordering panel
			if (iCurrentFrameId == m_oFrameOrderingPanel.getId()) {
				// Under ordering
				if (AppGlobal.g_oFuncStation.get().getUnderOrdering()) {
					this.orderByBarcode(sValue);
				}
			}
		}
	}
	
	public void frameOrderingPanel_clearOctopusDisplay() {
	}
	
	@Override
	public void frameOrderingMenuLookup_lookupClicked(String sNote) {
		// If under direct payment mode, cannot add item
		if (m_iCashierMode == 2 || m_bIsCheckLoadedForCashierMode)
			return;
		
		// Reset ordering timeout
		setOrderingTimeoutChecking(true);
		
		// A lookup is clicked, Sub menu or item
		if (sNote.isEmpty())
			return;
		JSONObject oJSONObject = new JSONObject();
		try {
			oJSONObject = new JSONObject(sNote);
		} catch (JSONException e) {
			e.printStackTrace();
			return;
		}
		
		int iItemId = oJSONObject.optInt(FrameLookupButton.BUTTON_NOTE_ID);
		String sType = oJSONObject.optString(FrameLookupButton.BUTTON_NOTE_TYPE);
		if (sType.equals(PosDisplayPanelLookup.TYPE_HOT_ITEM)) // Item clicked
			addHotItem(iItemId, m_dQty, false);
		else if (sType.equals(PosDisplayPanelLookup.TYPE_HOT_MODIFIER)) {// Modifier clicked
			if(m_bUsePanelToSelectItemMode)		// not allow to click modifier in "Stock Operation" and "Item Soldout" function
				return;
			addHotModifier(iItemId, -1, -1);
		}
		else if (sType.equals(PosDisplayPanelLookup.TYPE_MENU_LOOKUP)) { // Sub menu clicked
			// first try to get the sub menu from menu list
			MenuMenu oMenu = AppGlobal.g_oFuncMenu.get().getMenuAndContentById(iItemId);
			if (oMenu == null) // Menu is not found
				return;
			
			List<MenuMenuLookup> oSelectedMenuMenuLUList = oMenu.getMenuLookupList();
			if (oSelectedMenuMenuLUList == null || oSelectedMenuMenuLUList.isEmpty())
				return;
			
			String sMenuType = oMenu.getRole();
			String sMenuName = oMenu.getShortName(AppGlobal.g_oCurrentLangIndex.get());
			if (sMenuName.isEmpty())
				sMenuName = oMenu.getName(AppGlobal.g_oCurrentLangIndex.get());
			
			// prepare sub lookup buttons
			List<FuncLookupButtonInfo> oCurrentLookupList = prepareCurrentLUList(oSelectedMenuMenuLUList, false,
					sMenuType);
			m_oFrameOrderingMenuLookup.addSubLookupInfo(sMenuName, oCurrentLookupList, false);
			
			// Show back button
			m_oFrameOrderingMenuLookup.showBackButton(true);
		}
	}
	
	@Override
	public void frameOrderingMenuLookup_functionClicked(String sNote) {
		if (sNote.equals("butClose")) // Close button clicked
			m_oFrameOrderingMenuLookup.setVisible(false);
	}
	
	@Override
	public void frameOrderingBasket_UpdateBasket() {
		drawOrderingBasket(true);
		
		// Stop the update basket timer
		m_oFrameOrderingBasket.stopUpdateBasket();
	}
	
	@Override
	public void frameOrderingBasketSection_SectionClicked(int iSectionId, String sNote) {
		// block sectionClicked if using Split item with quantity function
		if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_item_with_quantity.name()))
			return;
		
		// block section clicked event when self kiosk mode
		if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode))
			return;
		
		// Under select mode
		if (m_iBasketSelectMode == FrameBasketSelectPanel.BASKET_SELECT_MODE_MULTI) {
			int iShowType;
			int iItemCnt = m_oFrameOrderingBasket.getItemCellCount(iSectionId);
			boolean bSelectedAll = true, bSelectedItemFound = true;
			// Check if selected all items
			for (int i = 0; i < iItemCnt; i++) {
				if (!m_oFrameOrderingBasket.isSectionCellVisible(iSectionId, i)) // Ignore hidden items
					continue;
				
				String sKey = iSectionId + "_" + i;
				if (m_iBasketSelectType == FrameOrderingBasket.SELECT_TYPE_ALL) {
					// All items
					bSelectedItemFound = m_oBasketSelectedItems.containsKey(sKey);
				} else if (m_iBasketSelectType == FrameOrderingBasket.SELECT_TYPE_NEW_ITEM) {
					// New items only
					if (!m_oFrameOrderingBasket.isOldItem(iSectionId, i))
						bSelectedItemFound = m_oBasketSelectedItems.containsKey(sKey);
				} else if (m_iBasketSelectType == FrameOrderingBasket.SELECT_TYPE_OLD_ITEM) {
					// Old items only
					if (m_oFrameOrderingBasket.isOldItem(iSectionId, i))
						bSelectedItemFound = m_oBasketSelectedItems.containsKey(sKey);
				}
				// Exit loop if find unselected item
				if (!bSelectedItemFound) {
					bSelectedAll = false;
					break;
				}
			}
			
			// Action to select/de-select all items
			iShowType = (bSelectedAll) ? FrameOrderingBasket.SHOW_TYPE_UNSELECT : FrameOrderingBasket.SHOW_TYPE_SELECT;
			
			// bSelectedAll = true, all items in section are selected, remove item from list
			// bSelectedAll = false, not all items are selected, add item to list
			updateBasketSelectedItemList(iSectionId, !bSelectedAll);
			
			// Mark tick / un-tick symbol for selected items
			for (int i = 0; i < iItemCnt; i++) {
				if (!m_oFrameOrderingBasket.isSectionCellVisible(iSectionId, i)) // Ignore hidden items
					continue;
				m_oFrameOrderingBasket.setSelected(iSectionId, i, m_iBasketSelectType, iShowType);
			}
			return;
		}
		m_oFrameSeatPanel.setSeatLabelColor(iSectionId);
	}
	
	@Override
	public void frameOrderingBasketCell_QtyClicked(int iSectionId, int iItemIndex, String sNote) {
		// Do nothing if setMenu frame showed
		if (m_oFrameSetMenu != null)
			return;
		
		// Under select mode
		if (isUnderBasketSelectPanelMode())
			return;
		
		// Under receive mode
		if (AppGlobal.OPERATION_MODE.stock_delivery.equals(m_eOperationMode) && m_iStockDeliveryOperaionMode == 1) {
			return;
		}
		
		// Check if it is child item
		FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iSectionId, iItemIndex);
		if (oFuncCheckItem.isSetMenuItem() && oFuncCheckItem.isSumUpChildItemToParent()) {
			// Cannot change child item quantity
			showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_change_set_menu_item_quantity"));
			return;
		}
		
		// Change item quantity
		fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.change_quantity_last.name()), "", iSectionId, iItemIndex, false, null);
	}
	
	@Override
	public String frameOrderingBasketCell_TempQtyClicked(int iSectionId, int iItemIndex, String sNote, String sOriQty) {
		String sNewQty;
		// Do nothing if setMenu frame showed
		if (m_oFrameSetMenu != null)
			return sOriQty;
		
		// Under select mode
		if (isUnderBasketSelectPanelMode()
				&& !m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_item_with_quantity.name()))
			return sOriQty;
		
		// Under receive mode
		if (AppGlobal.OPERATION_MODE.stock_delivery.equals(m_eOperationMode) && m_iStockDeliveryOperaionMode == 1) {
			return sOriQty;
		}
		
		// Check if it is child item
		FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iSectionId, iItemIndex);
		if (oFuncCheckItem.isSetMenuItem() && oFuncCheckItem.isSumUpChildItemToParent()) {
			// Cannot change child item quantity
			showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_change_set_menu_item_quantity"));
			return sOriQty;
		}
		
		// not allow user to change the quantity if they have not select that item
		String sKey = iSectionId + "_" + iItemIndex;
		if (!m_oBasketSelectedItems.containsKey(sKey)) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("you_have_not_select_this_item"));
			return sOriQty;
		}
		
		// Change item quantity
		// Ask quantity if default add quantity is zero
		while (true) {
			// Ask new quantity
			FormInputBox oFormInputBox = new FormInputBox(this);
			oFormInputBox.init();
			oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DECIMAL);
			oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("quantity"));
			oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("please_input_the_new_quantity") + ":");
			if (oFuncCheckItem.isOldItem())
				oFormInputBox.setEnterBlockUI(true);
			oFormInputBox.show();
			
			sNewQty = oFormInputBox.getInputValue();
			
			if(oFormInputBox.isUserCancel())
				return sOriQty;
			
			try {
				Double.valueOf(sNewQty);
			} catch (NumberFormatException e) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("invalid_input"));
				continue;
			}
			// Range checking
			if((new BigDecimal(sOriQty)).compareTo(BigDecimal.ZERO) >= 0) {
				if ((new BigDecimal(sNewQty)).compareTo(BigDecimal.ZERO) <= 0) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("quantity_must_be_larger_than_zero"));
					continue;
				}
				
				if (new BigDecimal(sNewQty).compareTo(oFuncCheckItem.getCheckItem().getQty()) > 0) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("exceed_maximum_quantity"));
					continue;
				}
			}else {
				// Range checking for refunding items
				if ((new BigDecimal(sNewQty)).compareTo(BigDecimal.ZERO) >= 0) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("quantity_must_be_smaller_than_zero"));
					continue;
				}
				
				if (new BigDecimal(sNewQty).compareTo(oFuncCheckItem.getCheckItem().getQty()) < 0) {
					showErrorDialogBox(AppGlobal.g_oLang.get()._("exceed_maximum_quantity"));
					continue;
				}
				
			}
			break;
		}
		return sNewQty;
	}
	
	@Override
	public void frameOrderingBasketCell_ReceiveQtyClicked(int iSectionId, int iItemIndex, String sNote) {
		// Do nothing if setMenu frame showed
		if (m_oFrameSetMenu != null)
			return;
		
		// Under select mode
		if (isUnderBasketSelectPanelMode())
			return;
		
		// Under create/edit/delete invoice mode
		if (AppGlobal.OPERATION_MODE.stock_delivery.equals(m_eOperationMode) && m_iStockDeliveryOperaionMode == 0) {
			return;
		}
		
		// Check if it is child item
		FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iSectionId, iItemIndex);
		if (oFuncCheckItem.isSetMenuItem()) {
			// Cannot change child item quantity
			showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_change_set_menu_item_quantity"));
			return;
		}
		
		// Change item receive quantity
		changeItemReceiverQuantity(iSectionId, iItemIndex, BigDecimal.ZERO);
	}
	
	@Override
	public void frameOrderingBasketCell_DescClicked(int iSectionId, int iItemIndex, String sNote) {
		// Do nothing if setMenu frame showed
		if (m_oFrameSetMenu != null)
			return;
		
		// Under receive mode
		if (AppGlobal.OPERATION_MODE.stock_delivery.equals(m_eOperationMode) && m_iStockDeliveryOperaionMode == 1)
			return;
		
		// Under kiosk mode, cannot perform this function except takeout
		if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
				&& !m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.takeout.name()))
			return;
		
		// Under select mode
		if (m_iBasketSelectMode == FrameBasketSelectPanel.BASKET_SELECT_MODE_MULTI) {
			String sKey = iSectionId + "_" + iItemIndex;
			if (m_oBasketSelectedItems.containsKey(sKey)) {
				// De-select
				m_oBasketSelectedItems.remove(sKey);
				
				// Update basket
				if(m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_item_with_quantity.name())) {
					m_oFrameOrderingBasket.setSelected(iSectionId, iItemIndex, m_iBasketSelectType, FrameOrderingBasket.SHOW_TYPE_UNSELECTWITHQUANTITY);
				}
				else
					m_oFrameOrderingBasket.setSelected(iSectionId, iItemIndex, m_iBasketSelectType, FrameOrderingBasket.SHOW_TYPE_UNSELECT);

//				if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode))
//					frameBasketSelectPanel_ConfirmClicked();
			} else {
				// Check select type
				String sErrMsg = "";
				switch (m_iBasketSelectType) {
					case FrameOrderingBasket.SELECT_TYPE_NEW_ITEM:
						// Select new item only
						if (m_oFrameOrderingBasket.isOldItem(iSectionId, iItemIndex))
							sErrMsg = AppGlobal.g_oLang.get()._("can_only_select_new_item");
						break;
					case FrameOrderingBasket.SELECT_TYPE_OLD_ITEM:
						// Select old item only
						if (m_oFrameOrderingBasket.isOldItem(iSectionId, iItemIndex) == false)
							sErrMsg = AppGlobal.g_oLang.get()._("can_only_select_old_item");
						break;
					default:
						break;
				}
				
				if (!sErrMsg.isEmpty()) {
					showErrorDialogBox(sErrMsg);
					return;
				}
				
				// Select
				m_oBasketSelectedItems.put(sKey, 0);
				
				// Update basket
				if(m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_item_with_quantity.name())) {
					// Only one item can be selected
					if(m_oBasketSelectedItems.size() > 1) {
						// deselect all and select the current one
						m_oBasketSelectedItems.clear();
						m_oFrameOrderingBasket.setAllSelected(m_iBasketSelectType, FrameOrderingBasket.SHOW_TYPE_UNSELECTWITHQUANTITY);
						m_oBasketSelectedItems.put(sKey, 0);
					}
					m_oFrameOrderingBasket.setSelected(iSectionId, iItemIndex, m_iBasketSelectType, FrameOrderingBasket.SHOW_TYPE_SELECTWITHADDMINUS);
					m_oFrameOrderingBasket.setSelectedNewQuantity(m_oFuncCheck.getCheckItem(iSectionId, iItemIndex).getCheckItem().getQty());
				}
				else
					m_oFrameOrderingBasket.setSelected(iSectionId, iItemIndex, m_iBasketSelectType, FrameOrderingBasket.SHOW_TYPE_SELECT);

//				if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode))
//					frameBasketSelectPanel_ConfirmClicked();
			}
			return;
		}
		
		FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iSectionId, iItemIndex);
		if (m_iBasketSelectMode == FrameBasketSelectPanel.BASKET_SELECT_MODE_SINGLE) {
			FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("confirm"),
					AppGlobal.g_oLang.get()._("cancel"), this);
			oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("confirmation"));
			oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("confirm_to_use_item") + ": "
					+ oFuncCheckItem.getCheckItem().getName(AppGlobal.g_oCurrentLangIndex.get()) + "?");
			oFormConfirmBox.show();
			if (oFormConfirmBox.isOKClicked() == false)
				return;
			
			if(m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name())) {
				m_oUsePanelToSelectItemParentItem = oFuncCheckItem;
				m_oUsePanelToSelectItemParentItem.setBasicCalculateMethod(PosCheckItem.BASIC_CALCULATE_METHOD_REMAIN_UNCHANGED);
				// Add original price to extra info
				if(!m_oUsePanelToSelectItemParentItem.isExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_ITEM, PosCheckExtraInfo.VARIABLE_REMARK, 0)){
					m_oUsePanelToSelectItemParentItem.addExtraInfo(PosCheckExtraInfo.BY_ITEM, PosCheckExtraInfo.SECTION_ITEM, PosCheckExtraInfo.VARIABLE_REMARK, AppGlobal.g_oFuncOutlet.get().roundItemAmountToString(m_oUsePanelToSelectItemParentItem.getCheckItem().getPrice()));
				}
			} else if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.print_pending_item_with_quantity.name())) {
				BigDecimal oDefaultPendingQty = oFuncCheckItem.getCheckItem().getQty();
				// Get the quantity from extra info if exist
				if(oFuncCheckItem.isExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_ITEM, PosCheckExtraInfo.VARIABLE_REMAINING_PENDING_INFO, 0) &&
						!oFuncCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_ITEM, PosCheckExtraInfo.VARIABLE_REMAINING_PENDING_INFO).isEmpty()) {
					try {
						JSONObject oRemainingPendingInfo = new JSONObject (oFuncCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_ITEM, PosCheckExtraInfo.VARIABLE_REMAINING_PENDING_INFO));
						oDefaultPendingQty = new BigDecimal(oRemainingPendingInfo.optString("count"));
					} catch (JSONException e) {
						AppGlobal.stackToString(e);
					}
				}
				
				FormInputBox oFormInputBox;
				BigDecimal oInputPendingQty = null;
				while (true) {
					boolean bBreak = true;
					oFormInputBox = new FormInputBox(this);
					oFormInputBox.init();
					oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DECIMAL);
					oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("number_of_pending_quantity"));
					oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("please_input_how_many_pending_item_to_be_printed") + ":");
					oFormInputBox.setDefaultInputValue(oDefaultPendingQty.toPlainString());
					oFormInputBox.show();
					
					if (oFormInputBox.getInputValue() == null) {
						return;
					}
					
					// Check if empty input
					if (oFormInputBox.getInputValue().isEmpty()) {
						this.showErrorDialogBox(AppGlobal.g_oLang.get()._("invalid_input"));
						continue;
					}
					
					// Check if the quantity larger than remaining pending item
					oInputPendingQty = new BigDecimal(oFormInputBox.getInputValue());
					if (oInputPendingQty.compareTo(oDefaultPendingQty) > 0) {
						this.showErrorDialogBox(AppGlobal.g_oLang.get()._("quantity_must_not_be_larger_than_remaining_pending_quantity"));
						continue;
					}
					
					if (oInputPendingQty.compareTo(BigDecimal.ZERO) != 1) {
						showErrorDialogBox(AppGlobal.g_oLang.get()._("quantity_must_be_larger_than_zero"));
						continue;
					}
					
					if (bBreak)
						break;
				}
				
				if (oInputPendingQty != null) {
					// User Input accepted, change the selected item to HashMap
					List<HashMap<String, Integer>> oSelectedItems = new ArrayList<HashMap<String, Integer>>();
					HashMap<String, Integer> oSelectedItem = new HashMap<String, Integer>();
					
					// Get party seq
					int iCheckPartySeq = m_oFuncCheck.getCurrentCheckPartySeq();
					
					oSelectedItem.put("partySeq", iCheckPartySeq);
					oSelectedItem.put("sectionId", iSectionId);
					oSelectedItem.put("itemIndex", iItemIndex);
					oSelectedItems.add(oSelectedItem);
					
					processPrintPendingItem(oSelectedItems, oInputPendingQty);
				}
			}
			
			// Exit basket select mode
			toggleBacketMultiSelectMode(false, "", FrameOrderingBasket.SELECT_TYPE_ALL, FrameBasketSelectPanel.BASKET_SELECT_MODE_NO);
			
			// Write application log
			AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
					AppGlobal.g_oFuncUser.get().getUserId() + "", "Function: " + m_sCurrentFunctionKey);
			
			return;
		}
		
		int iFuncListIdx = 0;
		ArrayList<String> oOptionList = new ArrayList<String>();
		HashMap<Integer, String> oOptionFunctionList = new HashMap<Integer, String>();
		if (AppGlobal.OPERATION_MODE.stock_delivery.equals(m_eOperationMode) == true) {
			oOptionList.add(AppGlobal.g_oLang.get()._("delete_item"));
			oOptionFunctionList.put(iFuncListIdx++, AppGlobal.FUNC_LIST.delete_item.name());
			oOptionList.add(AppGlobal.g_oLang.get()._("item_detail"));
			oOptionFunctionList.put(iFuncListIdx++, "item_detail");
		} else if (oFuncCheckItem.isSetMenuItem()) {
			if (!oFuncCheckItem.isSumUpChildItemToParent()) {
				oOptionList.add(AppGlobal.g_oLang.get()._("change_quantity"));
				oOptionFunctionList.put(iFuncListIdx++, AppGlobal.FUNC_LIST.change_quantity_last.name());
				oOptionList.add(AppGlobal.g_oLang.get()._("delete_item"));
				oOptionFunctionList.put(iFuncListIdx++, AppGlobal.FUNC_LIST.delete_item.name());
			}
			oOptionList.add(AppGlobal.g_oLang.get()._("item_modifier"));
			oOptionFunctionList.put(iFuncListIdx++, AppGlobal.FUNC_LIST.item_modifier.name());
			if (!oFuncCheckItem.isSumUpChildItemToParent()) {
				oOptionList.add(AppGlobal.g_oLang.get()._("item_discount"));
				oOptionFunctionList.put(iFuncListIdx++, AppGlobal.FUNC_LIST.item_discount.name());
			}
			oOptionList.add(AppGlobal.g_oLang.get()._("rush_order"));
			oOptionFunctionList.put(iFuncListIdx++, AppGlobal.FUNC_LIST.rush_order.name());
			oOptionList.add(AppGlobal.g_oLang.get()._("item_detail"));
			oOptionFunctionList.put(iFuncListIdx++, "item_detail");
			oOptionList.add(AppGlobal.g_oLang.get()._("replace_item"));
			oOptionFunctionList.put(iFuncListIdx++, AppGlobal.FUNC_LIST.set_menu_replace_item.name());
			if (!oFuncCheckItem.isOldItem()) {
				oOptionList.add(AppGlobal.g_oLang.get()._("takeout"));
				oOptionFunctionList.put(iFuncListIdx++, AppGlobal.FUNC_LIST.takeout.name());
				oOptionList.add(AppGlobal.g_oLang.get()._("edit_set_menu"));
				oOptionFunctionList.put(iFuncListIdx++, AppGlobal.FUNC_LIST.edit_set_menu.name());
				oOptionList.add(AppGlobal.g_oLang.get()._("override_item_price"));
				oOptionFunctionList.put(iFuncListIdx++, AppGlobal.FUNC_LIST.override_item_price.name());
			}
		} else {
			oOptionList.add(AppGlobal.g_oLang.get()._("change_quantity"));
			oOptionFunctionList.put(iFuncListIdx++, AppGlobal.FUNC_LIST.change_quantity_last.name());
			oOptionList.add(AppGlobal.g_oLang.get()._("delete_item"));
			oOptionFunctionList.put(iFuncListIdx++, AppGlobal.FUNC_LIST.delete_item.name());
			oOptionList.add(AppGlobal.g_oLang.get()._("repeat_item"));
			oOptionFunctionList.put(iFuncListIdx++, AppGlobal.FUNC_LIST.repeat_item.name());
			oOptionList.add(AppGlobal.g_oLang.get()._("item_modifier"));
			oOptionFunctionList.put(iFuncListIdx++, AppGlobal.FUNC_LIST.item_modifier.name());
			oOptionList.add(AppGlobal.g_oLang.get()._("item_discount"));
			oOptionFunctionList.put(iFuncListIdx++, AppGlobal.FUNC_LIST.item_discount.name());
			oOptionList.add(AppGlobal.g_oLang.get()._("rush_order"));
			oOptionFunctionList.put(iFuncListIdx++, AppGlobal.FUNC_LIST.rush_order.name());
			if (!oFuncCheckItem.isOldItem() && !oFuncCheckItem.isSetMenuItem()) {
				oOptionList.add(AppGlobal.g_oLang.get()._("insert_item"));
				oOptionFunctionList.put(iFuncListIdx++, AppGlobal.FUNC_LIST.insert_item.name());
			}
			oOptionList.add(AppGlobal.g_oLang.get()._("item_detail"));
			oOptionFunctionList.put(iFuncListIdx++, "item_detail");
			if (!oFuncCheckItem.isOldItem()) {
				oOptionList.add(AppGlobal.g_oLang.get()._("takeout"));
				oOptionFunctionList.put(iFuncListIdx++, AppGlobal.FUNC_LIST.takeout.name());
				if(oFuncCheckItem.isSetMenu()){
					oOptionList.add(AppGlobal.g_oLang.get()._("edit_set_menu"));
					oOptionFunctionList.put(iFuncListIdx++, AppGlobal.FUNC_LIST.edit_set_menu.name());
				}
				oOptionList.add(AppGlobal.g_oLang.get()._("override_item_price"));
				oOptionFunctionList.put(iFuncListIdx++, AppGlobal.FUNC_LIST.override_item_price.name());
			}
		}
		
		//do item list function
		JSONArray oItemFunctionListJSONArray = AppGlobal.g_oFuncStation.get().getItemFunctionList();
		if (oItemFunctionListJSONArray != null) {
			oOptionList.clear();
			oOptionFunctionList.clear();
			iFuncListIdx = 0;
			for (int i = 0; i < oItemFunctionListJSONArray.length(); i++) {
				JSONObject oItemFunctionListJSONObject = oItemFunctionListJSONArray.optJSONObject(i);
				if (oItemFunctionListJSONObject == null)
					continue;
				try {
					PosFunction oPosFunction = m_oFunctionList
							.getFunctionByKey(oItemFunctionListJSONObject.optString("function_key"));
					if (oPosFunction != null) {
						if (oFuncCheckItem.isOldItem()) {
							if (oItemFunctionListJSONObject.getString("function_key").equals("takeout"))
								continue;
							if (oItemFunctionListJSONObject.getString("function_key").equals("insert_item"))
								continue;
						}
						if (!oFuncCheckItem.isSetMenuItem()) {
							if (oItemFunctionListJSONObject.getString("function_key").equals("set_menu_replace_item"))
								continue;
						} else {
							if (oItemFunctionListJSONObject.getString("function_key").equals("insert_item"))
								continue;
							if (!oFuncCheckItem.isSumUpChildItemToParent())
								if (oItemFunctionListJSONObject.getString("function_key").equals("item_discount"))
									continue;
							if (oFuncCheckItem.isSumUpChildItemToParent())
								if (oItemFunctionListJSONObject.getString("function_key").equals("change_quantity")
										|| oItemFunctionListJSONObject.getString("function_key").equals("delete_item"))
									continue;
						}
						if (oItemFunctionListJSONObject.getString("function_key").equals("set_menu_replace_item"))
							oOptionList.add(AppGlobal.g_oLang.get()._("replace_item"));
						else
							oOptionList.add(oPosFunction.getName(AppGlobal.g_oCurrentLangIndex.get()));
						oOptionFunctionList.put(iFuncListIdx++, oItemFunctionListJSONObject.getString("function_key"));
					}
				} catch (JSONException e) {
					// TODO Auto-generated catch block
					AppGlobal.stack2Log(e);
				}
			}
			oOptionList.add(AppGlobal.g_oLang.get()._("item_detail"));
			oOptionFunctionList.put(iFuncListIdx++, "item_detail");
		}
		FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
		oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select_the_action_type"),
				oOptionList, false);
		oFormSelectionBox.show();
		if (oFormSelectionBox.isUserCancel()) {
			// System.out.println("oFormSelectionBox-Cancel");
		} else {
			ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
			String sFunction = oOptionFunctionList.get(oSelectionBoxResult.get(0));
			if (sFunction.equals(AppGlobal.FUNC_LIST.change_quantity_last.name())) {
				// Change item quantity
				fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.change_quantity_last.name()), "", iSectionId, iItemIndex, false, null);
			} else if (sFunction.equals(AppGlobal.FUNC_LIST.delete_item.name())) {
				fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.delete_item.name()), "", iSectionId,
						iItemIndex, false, null);
			} else if (sFunction.equals(AppGlobal.FUNC_LIST.repeat_item.name())) {
				fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.repeat_item.name()), "", iSectionId,
						iItemIndex, false, null);
			} else if (sFunction.equals(AppGlobal.FUNC_LIST.item_modifier.name())) {
				fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.item_modifier.name()), "", iSectionId,
						iItemIndex, false, null);
			} else if (sFunction.equals(AppGlobal.FUNC_LIST.item_discount.name())) {
				fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.item_discount.name()), "", iSectionId,
						iItemIndex, false, null);
			} else if (sFunction.equals(AppGlobal.FUNC_LIST.rush_order.name())) {
				fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.rush_order.name()), "", iSectionId,
						iItemIndex, false, null);
			} else if (sFunction.equals(AppGlobal.FUNC_LIST.set_menu_replace_item.name())) {
				fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.set_menu_replace_item.name()), "", iSectionId, iItemIndex, false, null);
			} else if (sFunction.equals(AppGlobal.FUNC_LIST.insert_item.name())) {
				fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.insert_item.name()), "", iSectionId, iItemIndex, false, null);
			} else if (sFunction.equals(AppGlobal.FUNC_LIST.takeout.name())) {
				fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.takeout.name()), "", iSectionId, iItemIndex, false, null);
			} else if (sFunction.equals(AppGlobal.FUNC_LIST.edit_set_menu.name())) {
				fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.edit_set_menu.name()), "", iSectionId, iItemIndex, false, null);
			} else if (sFunction.equals(AppGlobal.FUNC_LIST.override_item_price.name())) {
				fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.override_item_price.name()), "", iSectionId, iItemIndex, false, null);
			} else {
				// Show item detail
				List<String> oMixAndMatchRuleAndItemList = getMixAndMatchRuleAndItem(oFuncCheckItem);
				
				FormItemDetail oFormItemDetail = new FormItemDetail(this);
				oFormItemDetail.initWithFuncCheckItem(oFuncCheckItem, AppGlobal.g_oFuncOutlet.get().getPriceLevel(),
						false, AppGlobal.g_oFuncOutlet.get().getItemRoundDecimal(), oMixAndMatchRuleAndItemList);
				oFormItemDetail.show();
			}
		}
	}
	
	@Override
	public void frameOrderingBasketCell_DescLongClicked(int iSectionId, int iItemIndex, String sNote) {
		// Under select mode
		if (isUnderBasketSelectPanelMode())
			return;
		
		FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iSectionId, iItemIndex);
		
		FormItemDetail oFormItemDetail = new FormItemDetail(this);
		oFormItemDetail.initWithFuncCheckItem(oFuncCheckItem, AppGlobal.g_oFuncOutlet.get().getPriceLevel(), false,
				AppGlobal.g_oFuncOutlet.get().getItemRoundDecimal(), null);
		oFormItemDetail.show();
	}
	
	@Override
	public void frameOrderingBasketCell_PriceClicked(int iSectionId, int iItemIndex, String sNote) {
	}
	
	@Override
	public void frameOrderingBasketCell_DeleteClicked(int iSectionId, int iItemIndex, String sNote) {
		// Delete item
		this.fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.delete_item.name()), "", iSectionId, iItemIndex, false, null);
	}
	
	@Override
	public void frameOrderingBasketCell_AddQtyClicked(int iSectionId, int iItemIndex, String sNote) {
		// Add item by 1
		if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
				&& AppGlobal.g_oFuncMixAndMatch.get().isSupportMixAndMatch()) {
			PosFunction oFunction = m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.repeat_item.name());
			fcnSwitch(oFunction.getFuncId(), "", iSectionId, iItemIndex, false, null);
		} else {
			FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iSectionId, iItemIndex);
			if (oFuncCheckItem.isLoyaltyBenefitItem()
					&& oFuncCheckItem.getCheckItem().getQty().compareTo(BigDecimal.ZERO) > 0) {
				// cannot change quantity for benefit item
				showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_change_benefit_item_quantity"));
				return;
			}
			
			if (oFuncCheckItem.isLoyaltyItem()) {
				// cannot change quantity for benefit item
				showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_change_loyalty_item_quantity"));
				return;
			}
			
			changeItemQuantity(iSectionId, iItemIndex, new BigDecimal("1.0"), false);
		}
	}
	@Override
	public boolean frameOrderingBasketCell_AddQtyClickedForOldItem(int iSectionId, int iItemIndex, String sNote, BigDecimal dNewQty) {
		if(m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_item_with_quantity.name())) {
			// Get the item original quantity
			FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iSectionId, iItemIndex);
			BigDecimal dOriQty = oFuncCheckItem.getCheckItem().getQty();
			
			if((dOriQty.compareTo(BigDecimal.ZERO) >= 0 && dNewQty.compareTo(dOriQty) == 1) ||
					(dOriQty.compareTo(BigDecimal.ZERO) < 0 && dNewQty.compareTo(BigDecimal.ZERO) >= 0)){
				// Check whether the new quantity is in range
				showErrorDialogBox(AppGlobal.g_oLang.get()._("quantity_is_not_in_range"));
				return false;
			}
		}
		return true;
	}
	
	@Override
	public void frameOrderingBasketCell_MinusQtyClicked(int iSectionId, int iItemIndex, String sNote) {
		// Get the item original quantity
		FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iSectionId, iItemIndex);
		BigDecimal dOriQty = oFuncCheckItem.getCheckItem().getQty();
		
		if (oFuncCheckItem.isCouponItem() || oFuncCheckItem.isSVCCouponRedeemItem()) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_change_coupon_item_quantity"));
			return;
		}
		
		if (oFuncCheckItem.isSetMenu() && dOriQty.compareTo(BigDecimal.ONE) == 0) {
			FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
					AppGlobal.g_oLang.get()._("no"), this);
			oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
			oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("confirm_to_delete") + "?");
			oFormConfirmBox.show();
			if (oFormConfirmBox.isOKClicked() == false)
				return;
		}
		
		if (oFuncCheckItem.isLoyaltyBenefitItem() && dOriQty.compareTo(BigDecimal.ZERO) < 0) {
			// cannot change quantity for benefit item
			showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_change_benefit_item_quantity"));
			return;
		}
		
		// Delete item by 1 if item original quantity > 1
		deleteItem(iSectionId, iItemIndex, new BigDecimal("1.0"));
	}
	@Override
	public boolean frameOrderingBasketCell_MinusQtyClickedForOldItem(int iSectionId, int iItemIndex, String sNote, BigDecimal dNewQty) {
		if(m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_item_with_quantity.name())) {
			// Get the item original quantity
			FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iSectionId, iItemIndex);
			BigDecimal dOriQty = oFuncCheckItem.getCheckItem().getQty();
			
			if((dOriQty.compareTo(BigDecimal.ZERO) >= 0 && dNewQty.compareTo(BigDecimal.ZERO) <= 0) ||
					(dOriQty.compareTo(BigDecimal.ZERO) <0 && dOriQty.compareTo(dNewQty) > 0)){
				// Check whether the new quantity is in range
				showErrorDialogBox(AppGlobal.g_oLang.get()._("quantity_is_not_in_range"));
				return false;
			}
		}
		return true;
	}
	
	@Override
	public void frameOrderingBasketChildItemCell_QtyClicked(int iSectionId, int iItemIndex, int iChildItemIndex,
	                                                        String sNote) {
		
	}
	
	@Override
	public void frameOrderingBasketChildItemCell_DescClicked(int iSectionId, int iItemIndex, int iChildItemIndex,
	                                                         String sNote) {
	}
	
	@Override
	public void frameOrderingBasketChildItemCell_PriceClicked(int iSectionId, int iItemIndex, int iChildItemIndex,
	                                                          String sNote) {
	}
	
	@Override
	public void frameOrderingBasketModifierCell_QtyClicked(int iSectionId, int iItemIndex, int iModifierIndex,
	                                                       String sNote) {
	}
	
	@Override
	public void frameOrderingBasketModifierCell_DescClicked(int iSectionId, int iItemIndex, int iModifierIndex,
	                                                        String sNote) {
	}
	
	@Override
	public void frameOrderingBasketModifierCell_PriceClicked(int iSectionId, int iItemIndex, int iModifierIndex,
	                                                         String sNote) {
		
	}
	
	@Override
	public boolean frameTableFloorPlan_TableClicked(String sTableNo, String sTableExtension, boolean bShowTableMode) {
		if (!checkValidIntegerValue(sTableNo))
			return false;
		
		int iTableNo = Integer.parseInt(sTableNo);
		
		if (m_oFrameFloorPlanFunctionPanel.getVisible()) {
			m_oFrameFloorPlanFunctionPanel.setVisible(false);
			this.m_oFrameTableFloorPlan.showOpenFunctionPanel(false);
		}
		
		DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd hh:mm:ss");
		if (m_bFloorPlanWaitUserAction) {
			HashMap<String, String> oFunctionParams = new HashMap<String, String>();
			oFunctionParams.put("tableNo", "" + iTableNo);
			oFunctionParams.put("tableExtension", sTableExtension);
			if (fcnSwitch(m_iFloorPlanCurrentFuncId, "", -1, -1, true, oFunctionParams) == true) {
				m_oFuncCheck.unlockTable(false, false);
				
				m_bFloorPlanWaitUserAction = false;
				m_iFloorPlanCurrentFuncId = 0;
				m_oFrameTableFloorPlan.showFloorPlanFunctionButton();
				updateTableFloorPlanTableStatus(false);
			}
		} else {
			// Check if there is any extension table
			if (sTableExtension.isEmpty() && !bShowTableMode) {
				boolean bNeedPromptAskTable = false;
				HashMap<PosOutletTable, PosCheck> oPosOutletTableList = new HashMap<PosOutletTable, PosCheck>();
				for (Map.Entry<String, ClsTableStatus> entry : m_oTableStatusList.entrySet()) {
					ClsTableStatus oTableStatus = entry.getValue();
					PosOutletTable oPosOutletTable = oTableStatus.getPosOutletTable();
					PosCheck oPosCheck = oTableStatus.getPosCheck();
					
					if (oPosOutletTable.getTable() == iTableNo) {
						if (oPosOutletTable.getTableExtension().isEmpty() == false) {
							if (oPosOutletTable.isOccupied()
									|| oPosOutletTable.isCheckPrinted()
									|| oPosOutletTable.isCookingOvertimeTable()
									|| oPosOutletTable.isCleaningTable()) {
								// Have share table
								oPosOutletTableList.put(oPosOutletTable, oPosCheck);
								bNeedPromptAskTable = true;
							}
						} else {
							oPosOutletTableList.put(oPosOutletTable, oPosCheck);
						}
					}
				}
				
				if (bNeedPromptAskTable
						&& !AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name())) {
					// Have extension table
					FormAskTable oFormAskTable = new FormAskTable(this);
					oFormAskTable.init(iTableNo, false, AppGlobal.g_oFuncOutlet.get().getOutletId());
					oFormAskTable.setTitle(AppGlobal.g_oLang.get()._("welcome"));
					
					HashMap<String, HashMap<PosOutletTable, PosCheck>> oExtensionTableList = new HashMap<String, HashMap<PosOutletTable, PosCheck>>();
					
					boolean bHaveOriginalTable = false;
					for (Map.Entry<PosOutletTable, PosCheck> entry : oPosOutletTableList.entrySet()) {
						PosOutletTable oPosOutletTable = entry.getKey();
						PosCheck oPosCheck = entry.getValue();
						if (!oPosOutletTable.getTableExtension().isEmpty()) {
							HashMap<PosOutletTable, PosCheck> oHashMap = new HashMap<PosOutletTable, PosCheck>();
							oHashMap.put(oPosOutletTable, oPosCheck);
							oExtensionTableList.put(oPosOutletTable.getTableExtension(), oHashMap);
						} else {
							boolean bLocked = false;
							if (oPosOutletTable.getStationId() > 0)
								bLocked = true;
							
							oFormAskTable.addTableExtension("-", oPosOutletTable.getStatus(), bLocked, true, true);
							bHaveOriginalTable = true;
						}
					}
					
					if (bHaveOriginalTable == false)
						oFormAskTable.addTableExtension("-", PosOutletTable.STATUS_NEW_TABLE, false, true, true);
					
					// Sort the extension table list
					SortedSet<String> sortedset = new TreeSet<String>(oExtensionTableList.keySet());
					Iterator<String> it = sortedset.iterator();
					while (it.hasNext()) {
						String sKey = it.next();
						
						HashMap<PosOutletTable, PosCheck> oHashMap = oExtensionTableList.get(sKey);
						for (Map.Entry<PosOutletTable, PosCheck> entry2 : oHashMap.entrySet()) {
							PosOutletTable oPosOutletTable = entry2.getKey();
							
							boolean bLocked = false;
							if (oPosOutletTable.getStationId() > 0)
								bLocked = true;
							
							oFormAskTable.addTableExtension(oPosOutletTable.getTableExtension(),
									oPosOutletTable.getStatus(), bLocked, false, true);
						}
					}
					
					for (Map.Entry<PosOutletTable, PosCheck> entry : oPosOutletTableList.entrySet()) {
						PosOutletTable oPosOutletTable = entry.getKey();
						PosCheck oPosCheck = entry.getValue();
						if (oPosCheck != null) {
							String split[] = formatter.print(oPosCheck.getOpenLocTime()).split(" ");
							String sTableExt = "-";
							
							if(!oPosOutletTable.getTableExtension().isEmpty())
								sTableExt = oPosOutletTable.getTableExtension();
							String sMemNo = "";
							String sMemName = "";
							//ArrayList<String> oExtraInfoArrayList = new ArrayList<String>();
							LinkedHashMap<String, String> oCheckInfoList = new LinkedHashMap<String, String>();
							if(oPosCheck.getMemberId() == 0) {
								if (!oPosCheck.getCheckExtraInfoArrayList().isEmpty()) {
									for (PosCheckExtraInfo oCheckExtraInfo: oPosCheck.getCheckExtraInfoArrayList()) {
										// get member number and member name from online member interface
										if (oCheckExtraInfo.getSection().equals(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE)) {
											if (oCheckExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_ACCOUNT_NUMBER) || oCheckExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER)) {
												sMemNo = oCheckExtraInfo.getValue();
												if (sMemNo == null)
													sMemNo = "";
												else if (sMemNo.length() > 20)
													sMemNo = sMemNo.substring(0, 20);
											}
											if (oCheckExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_MEMBER_NAME)) {
												sMemName = oCheckExtraInfo.getValue();
												if (sMemName == null)
													sMemName = "";
												else if (sMemName.length() > 20)
													sMemName = sMemName.substring(0, 20);
											}
										}
									}
								}
							}
							
							int iCheckInfoCount = 0;
							for (PosCheckExtraInfo oCheckExtraInfo : oPosCheck.getCheckExtraInfoArrayList()) {
								if(oCheckExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_CHECK_INFO)){
									iCheckInfoCount++;
									if(iCheckInfoCount > 5)
										break;
									if(oCheckExtraInfo.getIndex() == 1)
										oCheckInfoList.put(FrameTableButton.STATUS_CHECK_INFO_ONE, oCheckExtraInfo.getValue());
									if(oCheckExtraInfo.getIndex() == 2)
										oCheckInfoList.put(FrameTableButton.STATUS_CHECK_INFO_TWO, oCheckExtraInfo.getValue());
									if(oCheckExtraInfo.getIndex() == 3)
										oCheckInfoList.put(FrameTableButton.STATUS_CHECK_INFO_THREE, oCheckExtraInfo.getValue());
									if(oCheckExtraInfo.getIndex() == 4)
										oCheckInfoList.put(FrameTableButton.STATUS_CHECK_INFO_FOUR, oCheckExtraInfo.getValue());
									if(oCheckExtraInfo.getIndex() == 5)
										oCheckInfoList.put(FrameTableButton.STATUS_CHECK_INFO_FIVE, oCheckExtraInfo.getValue());
								}
							}
							
							String[] sCheckOwnerName = StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, "");
							String[] sFirstName = StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, "");
							String[] sLastName = StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, "");
							int iUserId = oPosCheck.getCheckOwnerUserId();
							if(oPosCheck.getCheckOwnerUserId() != 0){
								sFirstName = m_oAllUserList.get(iUserId).getFirstName();
								sLastName = m_oAllUserList.get(iUserId).getLastName();
								sCheckOwnerName = StringLib.appendStringArray(sFirstName, " ", sLastName);
							}
							
							String sCurrencySign = "$";
							if(!AppGlobal.g_oFuncOutlet.get().getCurrencySign().isEmpty())
								sCurrencySign = AppGlobal.g_oFuncOutlet.get().getCurrencySign();
							String sTableSize = AppGlobal.g_oFuncOutlet.get().getTableSize(Integer.toString(oPosOutletTable.getTable()), sTableExt.equals("-")?"":sTableExt);
							oFormAskTable.addTableDetailTypes();
							oFormAskTable.setTableDetailByIndex(m_oFrameTableFloorPlan.getCurrentTableDetailIndex());
							oFormAskTable.updateTableDetails(sTableExt, split[1].substring(0, 5), Integer.toString(oPosCheck.getGuests()), sCurrencySign+AppGlobal.g_oFuncOutlet.get().roundCheckAmountToString(oPosCheck.getCheckTotal()), sMemNo, sMemName, sCheckOwnerName, sTableSize, oCheckInfoList);
						}
					}
					
					oFormAskTable.show();
					
					if(oFormAskTable.isCanelClick())
						return false;
					
					iTableNo = oFormAskTable.getTableNo();
					sTableExtension = oFormAskTable.getTableExtension();
					
					// Long click the extension
					if (oFormAskTable.isLongClickExtension()) {
						showTableFunction("" + iTableNo, sTableExtension, true);
						return false;
					}
				}
			}
			PosOutletTable oPosOutletTable = getTargetOutletTable(sTableNo, sTableExtension);
			if(oPosOutletTable != null && oPosOutletTable.isCleaningTable()){
				ArrayList<String> oOptionList = new ArrayList<String>();
				ArrayList<Integer> oCodeList = new ArrayList<Integer>();
				String[] oFunctionKeyList = { AppGlobal.FUNC_LIST.open_share_table.name(),
						AppGlobal.FUNC_LIST.mark_table_status_to_vacant.name(), AppGlobal.FUNC_LIST.unlock_table.name(),
						AppGlobal.FUNC_LIST.check_history.name() };
				List<PosFunction> oPosFunctionList = this.generatePosFunctionList(oFunctionKeyList);
				for (PosFunction oPosFunction: oPosFunctionList) {
					if (Integer.parseInt(sTableNo) == 0 && oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.open_share_table.name()))
						continue;
					
					oOptionList.add(oPosFunction.getName(AppGlobal.g_oCurrentLangIndex.get()));
					oCodeList.add(oPosFunction.getFuncId());
				}
				
				FormCommonPageContainer oFormCommonPageContainer = new FormCommonPageContainer(this);
				oFormCommonPageContainer.initWithSingleSelection(
						AppGlobal.g_oLang.get()._("please_select_the_action_type_for_table") + " : "
								+ AppGlobal.g_oFuncOutlet.get().getTableNameWithTableNo(sTableNo,
								sTableExtension)[AppGlobal.g_oCurrentLangIndex.get() - 1],
						oOptionList, false);
				if (oFormCommonPageContainer.isUserCancel()) {
					m_oFrameTableFloorPlan.setIdleTimeLogoutTimer(true);
				} else {
					ArrayList<Integer> oSelectionBoxResult = oFormCommonPageContainer.getResultList();
					PosFunction oFunction = m_oFunctionList.getFunction(oCodeList.get(oSelectionBoxResult.get(0)));
					
					AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
							AppGlobal.g_oFuncUser.get().getUserId() + "",
							"Table Floor Plan Function on table " + sTableNo + sTableExtension + ": " + oFunction.getKey());
					
					// call the function accordingly
					if (oFunction.getKey().equals(AppGlobal.FUNC_LIST.open_share_table.name())) {
						HashMap<String, String> oFunctionParams = new HashMap<String, String>();
						oFunctionParams.put("tableNo", sTableNo);
						
						// Open share table
						fcnSwitch(oFunction.getFuncId(), "", -1, -1, true, oFunctionParams);
						
					}else if (oFunction.getKey().equals(AppGlobal.FUNC_LIST.unlock_table.name())
							|| oFunction.getKey().equals(AppGlobal.FUNC_LIST.check_history.name())
							|| oFunction.getKey().equals(AppGlobal.FUNC_LIST.mark_table_status_to_vacant.name())) {
						
						HashMap<String, String> oFunctionParams = new HashMap<String, String>();
						oFunctionParams.put("tableNo", sTableNo);
						oFunctionParams.put("tableExtension", sTableExtension);
						
						// Unlock table, Show check history, Perform void check
						fcnSwitch(oFunction.getFuncId(), "", -1, -1, true, oFunctionParams);
					}
				}
			}
			else {
				// Open Check
				return openCheck("" + iTableNo, sTableExtension, true, 0, false, true);
				//return true;
			}
		}
		return false;
	}
	
	@Override
	public void frameTableFloorPlan_TableLongClicked(String sTableNo, String sTableExtension) {
		showTableFunction(sTableNo, sTableExtension, true);
	}
	
	@Override
	public void frameTableFloorPlan_ActionCancelClicked() {
		PosFunction oFunction = m_oFunctionList.getFunction(this.m_iFloorPlanCurrentFuncId);
		
		if (oFunction.getKey().equals(AppGlobal.FUNC_LIST.change_table.name())
				|| oFunction.getKey().equals(AppGlobal.FUNC_LIST.merge_table.name())) {
			m_oFuncCheck.unlockTable(false, false);
			this.m_bFloorPlanWaitUserAction = false;
			this.m_iFloorPlanCurrentFuncId = 0;
		}
		
		m_oFrameTableFloorPlan.showFloorPlanFunctionButton();
	}
	
	@Override
	public void frameTableFloorPlan_Refresh() {
		updateTableFloorPlanTableStatus(false);
	}
	
	@Override
	public void frameTableFloorPlan_CheckPeriodFloorPlan() {
		if (m_oFrameTableFloorPlan.getVisible() == false)
			return;
		
		// Change table floor plan according to check period
		showFloorPlan(false, null);
	}
	
	@Override
	public void frameTableFloorPlan_MenuModeNewOrder(int iDefaultTableNo) {
		openCheck(Integer.toString(iDefaultTableNo), "", true, 1, false, true);
	}
	
	@Override
	public void frameTableFloorPlan_MenuModeChangeLanguage() {
		PosFunction oFunction = new PosFunction();
		oFunction = m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.change_language.name());
		fcnSwitch(oFunction.getFuncId(), "", -1, -1, true, null);
	}
	
	@Override
	public void frameTableFloorPlan_MenuModeCheckReview(int iDefaultTableNo) {
		// Guest check preview
		String sTableNo = Integer.toString(iDefaultTableNo);
		
		// Wait for previous check processing finish (*** except fast food mode,
		// this will be done in payment)
		waitForProcessCheckFinish(sTableNo, "");
		
		FuncCheck oFuncCheck = new FuncCheck();
		
		String sOrderingMode;
		if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food))
			sOrderingMode = PosCheck.ORDERING_MODE_FAST_FOOD;
		else if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk))
			sOrderingMode = PosCheck.ORDERING_MODE_SELF_ORDER_KIOSK;
		else if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.stock_delivery))
			sOrderingMode = PosCheck.ORDERING_MODE_DELIVERY;
		else if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab))
			sOrderingMode = PosCheck.ORDERING_MODE_BAR_TAB;
		else
			sOrderingMode = PosCheck.ORDERING_MODE_FINE_DINING;
		
		if (oFuncCheck.lockTable(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
				AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
				AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(), sTableNo, "",
				true, true, sOrderingMode, "", false)) {
			guestCheckPreview(oFuncCheck);
		}
	}
	
	@Override
	public void frameSetMenuLookup_ButtonClicked(String sNote) {
		boolean bIsEditSetMenu = false;
		if (sNote.equals("Cancel")) {
			if(m_bStockOperationSetMenu){
				for(int iItemIdx : m_oFrameSetMenu.getTempSelectedItemList()){
					for(int i = m_oFramePanelItemSelectPanel.getSelectedItemList().size() -1 ; i >= 0; i--){
						if(iItemIdx == m_oFramePanelItemSelectPanel.getSelectedItemList().get(i)){
							m_oFramePanelItemSelectPanel.removeItem(0, i);
							break;
						}
					}
				}
			}
			// Remove the new set menu item if cancel editing
			if(m_oFrameSetMenu != null && m_oFrameSetMenu.isEditSetmenu()){
				//Remove new set menu items
				if(m_oFrameSetMenu.getOldChildCount() < m_oSetMenuParentFuncCheckItem.getChildItemList().size()){
					for(int i = m_oSetMenuParentFuncCheckItem.getChildItemList().size() - 1; i >= m_oFrameSetMenu.getOldChildCount(); i--){
						m_oSetMenuParentFuncCheckItem.deleteChildItemFromList(i);
					}
				}
			}
			handleCoverAndClearSetMenuFrameAndCalCheck();
			try {
				if(!m_bStockOperationSetMenu)
					deleteAllOrderedSetMenuItems();
			} catch (Exception e) {
				AppGlobal.writeErrorLog(this.getClass().getSimpleName(),
						new Exception().getStackTrace()[0].getMethodName(),
						AppGlobal.g_oFuncStation.get().getStationId() + "", "", "");
			}
			
			// cleanup stored temporary item list
			m_oStoredFuncCheckItemList.clear();
			
			// Continue perform "add item by code" function
			if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.add_item_by_code.name())) {
				m_sCurrentFunctionKey = "";
				startAddItemByItemCodeScreen();
			}
			
			// update basket check total
			updateBasketExtendBarCheckTotal();
		} else if (sNote.equals("OK")) {
			if(!m_bStockOperationSetMenu){
				////////////////////////////////////////////////////////////////////////////////////////////
				// Re-sequence the child items
				int iSelectedSeatNo = m_oFrameOrderingBasket.getSelectedSectionId();
				int iLastItemIndex = m_oFuncCheck.getItemListCount(iSelectedSeatNo) - 1;
				
				FuncCheckItem oLastFuncCheckItem = m_oFuncCheck.getCheckItem(iSelectedSeatNo, iLastItemIndex);
				//FuncCheckItem oLastFuncCheckItem = new FuncCheckItem(m_oSetMenuParentFuncCheckItem, m_oSetMenuParentFuncCheckItem);
				
				ArrayList<FuncCheckItem> oChildItemList = m_oSetMenuParentFuncCheckItem.getChildItemList();
				ArrayList<FuncCheckItem> oOriChildItemList = new ArrayList<FuncCheckItem>();
				
				for(FuncCheckItem oChildItem : oChildItemList)
					oOriChildItemList.add(oChildItem);
				ArrayList<FuncCheckItem> oResequenceItemList = new ArrayList<FuncCheckItem>();
				
				// Remove the set menu item
				List<FuncCheckItem> oRemovedOldItemList = m_oFrameSetMenu.getRemovedItemSetMenuLookupSeqList();
				
				for (FuncCheckItem oRemovedOldItem : oRemovedOldItemList) {
					for(int iChildItemIndex = m_oSetMenuParentFuncCheckItem.getChildItemList().size() - 1 ; iChildItemIndex >= 0 ; iChildItemIndex--){
						FuncCheckItem oChildItem = m_oSetMenuParentFuncCheckItem.getChildItemList().get(iChildItemIndex);
						if(oChildItem.getPanelLookupContent().parentTabIndex == oRemovedOldItem.getPanelLookupContent().parentTabIndex &&
								oChildItem.getPanelLookupContent().parentTabItemSeq == oRemovedOldItem.getPanelLookupContent().parentTabItemSeq){
							m_oFrameOrderingBasket.removeItem(oRemovedOldItem.getCheckItem().getSeatNo(), oRemovedOldItem.getCheckItem().getSeq() - 1);
							oChildItemList.remove(iChildItemIndex);
							break;
						}
					}
				}
				
				// add item to related set menu lookup seq sub-list
				List<Integer> oItemTabIndexList = m_oFrameSetMenu.getSelectedItemSetMenuLookupSeqList();
				TreeMap<Integer, List<FuncCheckItem>> oSortedCheckItemMap = new TreeMap<Integer, List<FuncCheckItem>>();
				for (int i = 0; i < oItemTabIndexList.size(); i++) {
					int iTabIndex = oItemTabIndexList.get(i);
					FuncCheckItem oChildCheckItem = oChildItemList.get(i);
					if (!oSortedCheckItemMap.containsKey(iTabIndex))
						oSortedCheckItemMap.put(iTabIndex, new ArrayList<FuncCheckItem>());
					
					if(m_oFrameSetMenu.isEditSetmenu()){
						// Copy child item to new parent item
						FuncCheckItem oCopyFuncChildItem = new FuncCheckItem();
						PosCheckItem oCopyCheckItem = oCopyFuncChildItem.getCheckItem();
						oCopyCheckItem.copyFromCheckItem(oChildCheckItem.getCheckItem());
						oCopyCheckItem.setParentItemId(oLastFuncCheckItem.getCheckItem().getCitmId());
						
						if(oChildCheckItem.hasModifier()) {
							for(FuncCheckItem oModiCheckItem:oChildCheckItem.getModifierList()) {
								FuncCheckItem oFuncCheckModi = new FuncCheckItem();
								PosCheckItem oCopyModifier = oFuncCheckModi.getCheckItem();
								
								oCopyModifier.copyFromCheckItem(oModiCheckItem.getCheckItem());
								oCopyCheckItem.addValueToTotal(oCopyModifier.getPrice().multiply(oCopyModifier.getQty()));
								
								oCopyFuncChildItem.addModifierToList(oFuncCheckModi, false);
							}
							oCopyFuncChildItem.setAllModifiersPrice(false);
						}
						oCopyFuncChildItem.setParentFuncCheckItem(oLastFuncCheckItem);
						oCopyFuncChildItem.setPanelLookupContent(oChildCheckItem.getPanelLookupContent().parentTabIndex, oChildCheckItem.getPanelLookupContent().parentTabItemSeq, oChildCheckItem.getPanelLookupContent().panelMenuIdList);
						
						oSortedCheckItemMap.get(iTabIndex).add(oCopyFuncChildItem);
					}
					else
						oSortedCheckItemMap.get(iTabIndex).add(oChildCheckItem);
				}
				
				// sort selected item by set menu lookup sequence
				for (List<FuncCheckItem> oChildCheckItemList : oSortedCheckItemMap.values())
					oResequenceItemList.addAll(oChildCheckItemList);
				
				// Set the new list to child item list
				oLastFuncCheckItem.setChildItemList(oResequenceItemList);
				
				// Delete original set menu item if set menu
				if(m_oFrameSetMenu.isEditSetmenu()){
					bIsEditSetMenu = true;
					m_oSetMenuParentFuncCheckItem.setChildItemList(oOriChildItemList);
					deleteItem(m_oSetMenuParentFuncCheckItem.getCheckItem().getSeatNo(), m_oSetMenuParentFuncCheckItem.getCheckItem().getSeq() - 1, m_oSetMenuParentFuncCheckItem.getCheckItem().getQty());
				}
				
				//Reload the stored FuncCheck item list
				ArrayList<FuncCheckItem> oNewStoredFuncCheckItemList = new ArrayList<FuncCheckItem>();
				for (FuncCheckItem oChildItem : oResequenceItemList) {
					oNewStoredFuncCheckItemList.add(oChildItem);
				}
				
				m_oStoredFuncCheckItemList = oNewStoredFuncCheckItemList;
				
				// Update course no.
				m_iCurrentCourseIndexForSetMenu = 0;
				for (FuncCheckItem oChildItem : oLastFuncCheckItem.getChildItemList()) {
					// Reassign new course no.
					if (oChildItem.getCheckItem().getCourseId() == 0)
						autoUpdateCourseNoForSetMenu(oChildItem);
				}
			}
			handleCoverAndClearSetMenuFrameAndCalCheck();
			// Process the child items selected
			finishAddItem(false);
			
			// Redraw the basket
			if(bIsEditSetMenu)
				redrawOrderingBasket(false, FrameOrderingBasket.ORDERING_BASKET_MODE_SHOW_NORMAL);
			
			// cleanup stored temporary item list
			m_oStoredFuncCheckItemList.clear();
			
			// Continue perform "add item by code" function
			if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.add_item_by_code.name())) {
				m_sCurrentFunctionKey = "";
				startAddItemByItemCodeScreen();
			}
		}
	}
	
	@Override
	public void frameSetMenuLookup_selectedItemClicked(int iSelectedItemIndex) {
		if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_oFrameSetMenu.getOperationMode())
				&& AppGlobal.g_oFuncStation.get().getSelfKioskSetMenuNoGuidance() == false)
			return;
		
		if(m_bStockOperationSetMenu == true){
			if(m_oFrameSetMenu.getTempSelectedItemList().size() > iSelectedItemIndex){
				int iItemIdx = m_oFrameSetMenu.getTempSelectedItemList().get(iSelectedItemIndex);
				for(int i = m_oFramePanelItemSelectPanel.getSelectedItemList().size() -1 ; i >= 0; i--){
					if(iItemIdx == m_oFramePanelItemSelectPanel.getSelectedItemList().get(i)){
						m_oFramePanelItemSelectPanel.removeItem(0, i);
						m_oFrameSetMenu.removeSelectedItem(iSelectedItemIndex);
						m_oFrameSetMenu.getTempSelectedItemList().remove(iSelectedItemIndex);
						break;
					}
				}
			}
		}
		else
			this.deleteSetMenuItem(iSelectedItemIndex);
	}
	
	@Override
	public void frameSetMenuLookup_itemClicked(String sNote, int iParentTabIndex) {
		try {
			JSONObject oJSONObject = new JSONObject(sNote);
			String sType = oJSONObject.optString(FrameLookupButton.BUTTON_NOTE_TYPE);
			int iItemId = oJSONObject.optInt(FrameLookupButton.BUTTON_NOTE_ID);
			
			if (sType.equals(PosDisplayPanelLookup.TYPE_MENU_LOOKUP))
				initMenuPage(iItemId);
			else {
				// Not allow to click modifier button when calling set menu in "Stock Operation" & "Item Soldout" function
				if (this.m_bStockOperationSetMenu && sType.equals(PosDisplayPanelLookup.TYPE_HOT_MODIFIER))
					return;
				
				FuncMenuItem oFuncMenuItem = AppGlobal.g_oFuncMenu.get().getFuncMenuItemByItemId(iItemId);
				if(m_bStockOperationSetMenu == false && m_oFuncCheck != null)
					addSelfSelectSetMenuItem(oFuncMenuItem.getMenuItem(),oJSONObject.optInt(FrameLookupButton.BUTTON_NOTE_SEQ), iParentTabIndex, false, true);
				else if (!m_oFramePanelItemSelectPanel.haveRecord(iItemId)) {
					m_oFramePanelItemSelectPanel.addItem(0, iItemId, oFuncMenuItem.getMenuItem().getName(AppGlobal.g_oCurrentLangIndex.get()));
					
					String[] sAddItemName = new String[AppGlobal.LANGUAGE_COUNT];
					for (int i = 0; i<AppGlobal.LANGUAGE_COUNT; i++)
						sAddItemName[i] = oFuncMenuItem.getMenuItem().getName(i + 1);
					m_oFrameSetMenu.finishAddSelectedItem(oJSONObject.optInt(FrameLookupButton.BUTTON_NOTE_SEQ), oFuncMenuItem.getMenuItem().getItemId(), sAddItemName, false, 0, 0, true);
				}
			}
		} catch (JSONException e) {
			e.printStackTrace();
		}
	}
	
	@Override
	public void frameSeatPanel_selectedSeat(int iSeatId) {
		// Do nothing in stock delivery mode
		if (AppGlobal.OPERATION_MODE.stock_delivery.equals(m_eOperationMode) == true)
			return;
		
		// If under direct payment mode, cannot perform function
		if (m_iCashierMode == 2 || m_bIsCheckLoadedForCashierMode)
			return;
		
		// If set menu is shown, cannot add item
		if (m_oFrameSetMenu != null)
			return;
		
		if (m_oFrameSeatPanel.getPanelType().equals(FrameSeatPanel.TYPE_NUMPAD)) {
			// No item ordered
			if (!checkLastItemExist())
				return;
			
			int iSectionId = m_oFrameOrderingBasket.getSelectedSectionId();
			int iItemIndex = m_oFuncCheck.getLastGeneralCheckItemItemIndex(iSectionId);
			
			FuncCheckItem oLastCheckItem = m_oFuncCheck.getCheckItem(iSectionId, iItemIndex);
			// No new item on the list
			if (oLastCheckItem.isOldItem()) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("no_new_item_ordered"));
				this.updateSeatPanelQty();
				
				return;
			}
			
			changeItemQuantity(iSectionId, iItemIndex, new BigDecimal(Integer.toString(m_oFrameSeatPanel.getSeatLabel(iSeatId))), true);
		} else {
			// Set seat label be selected color
			m_oFrameSeatPanel.setSeatLabelColor(iSeatId);
			
			// Set selected section color
			// Scroll the ordering basket to selected seat last items
			m_oFrameOrderingBasket.setSelectedSection(iSeatId);
			m_oFrameOrderingBasket.moveScrollToSectionBottom(iSeatId);
		}
	}
	
	@Override
	public void frameSeatPanel_clickCourse() {
		if (m_oMenuItemCourseList == null) {
			m_oMenuItemCourseList = new MenuItemCourseList();
			m_oMenuItemCourseList.readItemCourseList();
		}
		
		if (m_oMenuItemCourseList.getItemCourseList().isEmpty())
			// No course is defined
			return;
		
		// Select the course
		ArrayList<String> oOptionList = new ArrayList<String>();
		for (MenuItemCourse oMenuItemCourse : m_oMenuItemCourseList.getItemCourseList()) {
			String sMenuItemCourseName;
			if (oMenuItemCourse.getShortName(AppGlobal.g_oCurrentLangIndex.get()).isEmpty())
				sMenuItemCourseName = oMenuItemCourse.getName(AppGlobal.g_oCurrentLangIndex.get());
			else
				sMenuItemCourseName = oMenuItemCourse.getShortName(AppGlobal.g_oCurrentLangIndex.get());
			oOptionList.add("(" + oMenuItemCourse.getSeq() + ") " + sMenuItemCourseName);
		}
		
		FormCommonPageContainer oFormSelectionBox = new FormCommonPageContainer(this);
		oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select_the_course"), oOptionList,
				false);
		//oFormSelectionBox.show();
		if (oFormSelectionBox.isUserCancel()) {
			// No change
			return;
		} else {
			ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
			int iSelectIndex = oSelectionBoxResult.get(0);
			if (iSelectIndex < m_oMenuItemCourseList.getItemCourseList().size()) {
				// Select the course
				m_oCurrentCourseForNormalItem = m_oMenuItemCourseList.getItemCourseList().get(iSelectIndex);
				
				// Update screen
				if (m_oCurrentCourseForNormalItem == null)
					m_oFrameSeatPanel.setCourseDescription(AppGlobal.g_oLang.get()._("undefined_course", ""));
				else {
					String[] sMenuItemCourseName = Arrays.copyOf(m_oCurrentCourseForNormalItem.getName(),
							m_oCurrentCourseForNormalItem.getName().length);
					for (int i = 0; i < AppGlobal.LANGUAGE_COUNT; i++) {
						if (m_oCurrentCourseForNormalItem.getShortName(i + 1).length() > 0)
							sMenuItemCourseName[i] = m_oCurrentCourseForNormalItem.getShortName(i + 1);
					}
					m_oFrameSeatPanel.setCourseDescription(StringLib.appendStringArray("(",
							m_oCurrentCourseForNormalItem.getSeq(), ") ", sMenuItemCourseName));
				}
			}
		}
	}
	
	@Override
	public void frameStationInfoBar_ShowStationDetail() {
		
		String[] sSpecialHourName = StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, "");
		String[] sStationName = StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, "");
		String[] sHolidayName = StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, "");
		String[] sSpecialDayName = StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, "");
		
		// get current special period
		OutSpecialHour oSpecialHour = AppGlobal.g_oFuncOutlet.get().getCurrentSpecialPeriod();
		if (oSpecialHour != null)
			sSpecialHourName = oSpecialHour.getName();
		
		sStationName = AppGlobal.g_oFuncStation.get().getName();
		
		// get holiday and special name
		if (AppGlobal.g_oFuncOutlet.get().getBusinessDay().getHolidayCalendarName() != null)
			sHolidayName = AppGlobal.g_oFuncOutlet.get().getBusinessDay().getHolidayCalendarName();
		if (AppGlobal.g_oFuncOutlet.get().getBusinessDay().getSpecialDayCalendarName() != null)
			sSpecialDayName = AppGlobal.g_oFuncOutlet.get().getBusinessDay().getSpecialDayCalendarName();
		
		m_oFrameStationInfo.setStationInfo(sStationName, String.valueOf(AppGlobal.g_oFuncOutlet.get().getPriceLevel()),
				AppGlobal.g_oFuncOutlet.get().getCurrentBusinessPeriodName(), sSpecialHourName, sHolidayName,
				sSpecialDayName);
		
		m_oFrameStationInfo.bringToTop();
	}
	
	@Override
	public void frameStationInfoBar_SwitchOutlet() {
		if (m_bFloorPlanWaitUserAction)
			return;
		fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.switch_outlet.name()), "", 0, 0, true, null);
	}
	
	@Override
	public void frameStationInfoBar_ShowFunction() {
		if (m_bFloorPlanWaitUserAction)
			return;
		
		// If Admin Panel already exist, no need to recall it again
		if(m_oFrameAdminPanel != null && m_oFrameAdminPanel.getExist() && m_oFrameAdminPanel.getVisible())
			return;
		// Admin page
		if(m_oFuncCheck != null)
			fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.admin_mode.name()), "", 0, 0, false, null);
		else
			fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.admin_mode.name()), "", 0, 0, true, null);
	}
	
	@Override
	public void frameCheckDetail_Clicked(String sFuncValue) {
		if (sFuncValue.equals("Table")) {
			fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.change_table.name()), "", 0, 0, false, null);
		} else if (sFuncValue.equals("Cover")) {
			if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)) {
				return;
			}
			fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.change_cover.name()), "", 0, 0, false, null);
		} else if (sFuncValue.equals("Detail")) {
			
			// Under kiosk mode, cannot perform this function
			if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode))
				return;
			
			// Create the frame to show check detail including s.c., check total
			performCheckFunction();
		}else if(sFuncValue.equals("")) {
			
		}
	}
	
	@Override
	public void frameBasketExtendBar_ExtendBarClicked() {
		int iExtendedHeight = 120;
		
		// Handling for mobile view
		if (AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name())) {
			// Skip if not in basket view
			if (m_oFrameTabBar.getSelectedTabIdx() != 0)
				return;
			iExtendedHeight = 80;
			if (!m_oFrameFuncPanel2.getVisible())
				m_oFrameFuncPanel2.setVisible(true);
		}
		
		if (m_oFrameBasketExtendBar.checkBasketExtended()) {
			// Minimize the basket
			extendOrderingBasket(false, iExtendedHeight);
		} else {
			// Extend the basket
			extendOrderingBasket(true, iExtendedHeight);
		}
	}
	
	@Override
	public void frameCheckReview_clickOK() {
		m_oFrameCover.setVisible(false);
		m_oFrameCheckReview.setVisible(false);
	}
	
	@Override
	public void frameCheckReview_clickPrint(String sPrintType, int iChosenCheckPfmtId) {
		// currently only support print detail check
		if (sPrintType == FrameCheckReview.PRINT_TYPE_DETAIL_CHECK) {
			// update check first
			m_oFuncCheck.updateCheck(false, false, PosCheckItem.SEND_MODE_OLD_ITEM, 0, false, 0, 0, 0, "", false, false,
					false, false, 0, 0, false, false);
			// updateCheck(false, false, PosCheckItem.SEND_MODE_NEW_ITEM, 0,
			// true, 0, 0, 0, 0, false, false, false, false, 0, 0, false)
			
			if (!m_oFuncCheck.printCheck(false, false, AppGlobal.g_oFuncUser.get().getUserId(),
					AppGlobal.g_oFuncStation.get().getStationId(), AppGlobal.g_oFuncStation.get().getCheckPrtqId(),
					iChosenCheckPfmtId, true,
					AppGlobal.g_oFuncOutlet.get().getOutletNameByIndex(AppGlobal.g_oCurrentLangIndex.get()), false, 0,
					"", false, true, false)) {
				this.showErrorDialogBox(m_oFuncCheck.getLastErrorMessage());
				return;
			} else {
				m_oFrameCover.setVisible(false);
				m_oFrameCheckReview.setVisible(false);
			}
		}
	}
	
	@Override
	public void OmWsClient_Restart(String sErrorMessage) {
		if (AppGlobal.g_oFuncStation.get() != null) {
			AppGlobal.writeErrorLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(),
					AppGlobal.g_oFuncStation.get().getStationId() + "", "", "OM fatal error");
			
			// Start kill myself
			AppGlobal.startKillSingleStation(AppGlobal.g_oFuncStation.get().getStationId(),
					AppGlobal.g_oLang.get()._("internal_error"));
		}
	}
	
	@Override
	public void frameBasketSelectPanel_SelectAllClicked(boolean bSelectAll) {
		for (int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
			if (i == 0 || m_oFrameOrderingBasket.isSectionVisible(i)) {
				updateBasketSelectedItemList(i, bSelectAll);
			}
		}
		int iShowType = (bSelectAll) ? FrameOrderingBasket.SHOW_TYPE_SELECT : FrameOrderingBasket.SHOW_TYPE_UNSELECT;
		// Set all items are selected/unselected
		m_oFrameOrderingBasket.setAllSelected(m_iBasketSelectType, iShowType);
	}
	
	@Override
	public void frameBasketSelectPanel_CancelClicked() {
		// Exit basket multiple select mode
		this.toggleBacketMultiSelectMode(false, "", FrameOrderingBasket.SELECT_TYPE_ALL, FrameBasketSelectPanel.BASKET_SELECT_MODE_NO);
		// clear hash map and set multi select modifier false
		m_bMultiSelectModifier = false;
		m_oClsMultiSelectModifierState.clear();
		
		if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name()))
			this.fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.cancel.name()), "", -1, -1, false, null);
		resetCurrentFunctionKeyToSplitRevenue();
		if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_item_with_quantity.name())
				|| m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.takeout.name())) {
			if(m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_item_with_quantity.name()))
				m_oFuncCheck.setCurrentFunctionKey("");
			m_sCurrentFunctionKey = "";
		}
	}
	
	@Override
	public void frameBasketSelectPanel_ConfirmClicked() {
		int iNewItemSeatId = 0;
		int iNewItemIndex = 0;
		int iCurrentItemIndex = 0;
		BigDecimal dOriQty = BigDecimal.ZERO;
		BigDecimal dNewQty = BigDecimal.ZERO;
		HashMap<String, String> oOriItemInfo = new HashMap<String, String>();
		String sOrgKey = "";
		
		if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_item_with_quantity.name())) {
			if(m_oBasketSelectedItems.isEmpty()) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("no_selected_items"));
				return;
			}
			String sKey = m_oBasketSelectedItems.firstKey();
			int iSlashIndex = sKey.indexOf("_");
			int iSectionId = Integer.parseInt(sKey.substring(0, iSlashIndex));
			int iItemIndex = Integer.parseInt(sKey.substring(iSlashIndex + 1));
			sOrgKey = sKey;
			
			FuncCheckItem oTargetFuncCheckItem = m_oFuncCheck.getCheckItem(iSectionId, iItemIndex);
			int iSeatNo = oTargetFuncCheckItem.getCheckItem().getSeatNo();
			
			// store the modified quantity
			dOriQty = oTargetFuncCheckItem.getCheckItem().getQty();
			dNewQty = oTargetFuncCheckItem.getCheckItem().getQty().subtract(new BigDecimal(m_oFrameOrderingBasket.getSelectedNewQuantity()));
			
			BigDecimal dSplitRatio = dNewQty.divide(dOriQty, 4, RoundingMode.HALF_UP);
			BigDecimal dOriRatio = dOriQty.subtract(dNewQty).divide(dOriQty, 4, RoundingMode.HALF_UP);
			
			// If quantity does not change, skip workflow of SpiltItemWithQuantity and use SplitItemOtherTable workflow
			if (dNewQty.compareTo(BigDecimal.ZERO) != 0) {
				// Clone a new item
				FuncCheckItem oNewFuncCheckItem = new FuncCheckItem(oTargetFuncCheckItem, null);
				oNewFuncCheckItem.prepareParamOfModiOldQtyForSplit();
				oNewFuncCheckItem.resetAsNewItem();
				
				// Add to item list with given seat no.
				int iCurrentItemCount = m_oFuncCheck.getItemListCount(iSeatNo);
				m_oFuncCheck.addItemToItemList(iSeatNo, iCurrentItemCount + 1, oNewFuncCheckItem);
				
				// Store the current item index and the beginning of new item index
				iCurrentItemIndex = iItemIndex;
				iNewItemSeatId = iSeatNo;
				iNewItemIndex = iCurrentItemCount;
				
				// Process child item
				for (FuncCheckItem oOriginalChildFuncCheckItem: oTargetFuncCheckItem.getChildItemList()) {
					// Clone a new item
					FuncCheckItem oNewChildFuncCheckItem = new FuncCheckItem(oOriginalChildFuncCheckItem, oNewFuncCheckItem);
					oNewChildFuncCheckItem.resetAsNewItem();
					// Add to item list with given seat no.
					iCurrentItemCount = m_oFuncCheck.getItemListCount(iSeatNo);
					m_oFuncCheck.addItemToItemList(iSeatNo, iCurrentItemCount + 1, oNewChildFuncCheckItem);
					
					// Set the quantity
					oNewChildFuncCheckItem.internalChangeQty(new BigDecimal(m_oFrameOrderingBasket.getSelectedNewQuantity()));
					oNewChildFuncCheckItem.changeCheckAndCheckPartyId(m_oFuncCheck.getCheckId(), "");
					
					// New Check Child Item Split Remaining Pending Info
					oNewChildFuncCheckItem.remainingPendingInfoIsExistAndSplitByRatio(dOriRatio);
				}
				// Set the new item's quantity
				oNewFuncCheckItem.internalChangeQty(new BigDecimal(m_oFrameOrderingBasket.getSelectedNewQuantity()));
				
				// New Check Item Split Remaining Pending Info
				oNewFuncCheckItem.remainingPendingInfoIsExistAndSplitByRatio(dOriRatio);
				
				// set the original quantity
				if(m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_item_with_quantity.name())) {
					oOriItemInfo.put("ItemQuantity", dNewQty.toString());
					oOriItemInfo.put("ItemOriginalQuantity", oTargetFuncCheckItem.getCheckItem().getQty().toString());
					oOriItemInfo.put("ItemId", oTargetFuncCheckItem.getCheckItem().getCitmId());
					oOriItemInfo.put("CheckId", oTargetFuncCheckItem.getCheckItem().getCheckId());
					oOriItemInfo.put("ItemCode", oTargetFuncCheckItem.getCheckItem().getCode());
					oOriItemInfo.put("ItemName", oTargetFuncCheckItem.getCheckItem().getName(AppGlobal.g_oCurrentLangIndex.get()));
					for(int iIndex = 1 ; iIndex <= 5 ; iIndex++){
						oOriItemInfo.put("ItemNameL" + iIndex, oTargetFuncCheckItem.getCheckItem().getName(iIndex));
					}
				}
				oTargetFuncCheckItem.internalChangeQty(dNewQty.multiply(oTargetFuncCheckItem.getCheckItem().getBaseQty()));
				for(FuncCheckItem oChildFuncCheckItem: oTargetFuncCheckItem.getChildItemList()) {
					oChildFuncCheckItem.internalChangeQty(dNewQty.multiply(oChildFuncCheckItem.getCheckItem().getBaseQty()));
					oChildFuncCheckItem.getCheckItem().setModified(true);
					
					// Original Check Child Item Split Remaining Pending Info
					oChildFuncCheckItem.remainingPendingInfoIsExistAndSplitByRatio(dSplitRatio);
				}
				// update the item quantity and price
				oTargetFuncCheckItem.getCheckItem().setModified(true);
				
				// Original Check Item Split Remaining Pending Info
				oTargetFuncCheckItem.remainingPendingInfoIsExistAndSplitByRatio(dSplitRatio);
				
				// clear the m_oBasketSelectedItems and put the new items in m_oBasketSelectedItems
				m_oBasketSelectedItems.clear();
				sKey = iSectionId + "_" + iNewItemIndex;
				m_oBasketSelectedItems.put(sKey, 0);
			}
		}
		// Change the selected item to HashMap
		List<HashMap<String, Integer>> oSelectedItems = new ArrayList<HashMap<String, Integer>>();
		
		for (Map.Entry<String, Integer> entry : m_oBasketSelectedItems.entrySet()) {
			int iSlashIndex = entry.getKey().indexOf("_");
			int iSectionId = Integer.parseInt(entry.getKey().substring(0, iSlashIndex));
			int iItemIndex = Integer.parseInt(entry.getKey().substring(iSlashIndex + 1));
			HashMap<String, Integer> oSelectedItem = new HashMap<String, Integer>();
			
			// Get party seq
			int iCheckPartySeq = m_oFuncCheck.getCurrentCheckPartySeq();
			
			FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iSectionId, iItemIndex);
			if(oFuncCheckItem.isMinimumChargeItem())
				continue;
			
			oSelectedItem.put("partySeq", iCheckPartySeq);
			oSelectedItem.put("sectionId", iSectionId);
			oSelectedItem.put("itemIndex", iItemIndex);
			oSelectedItems.add(oSelectedItem);
		}
		
		// Write application log
		AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
				AppGlobal.g_oFuncUser.get().getUserId() + "", "Function: " + m_sCurrentFunctionKey);
		
		// Process function
		if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.item_discount_multiple_items.name())) {
			// Item discount for multiple items
			callDiscountLookupForMultiItem("item", PosDiscountType.USED_FOR_DISCOUNT, oSelectedItems, "", null);
		} else if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.item_void_discount_multiple_items.name())) {
			callVoidDiscountLookupForMultiItem("item", PosDiscountType.USED_FOR_DISCOUNT, oSelectedItems);
		} else if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.waive_sc_tax.name())) {
			// Waive service charge or/and tax
			addWaiveScTax(false, oSelectedItems);
		} else if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.add_sc_tax.name())) {
			// Add service charge or/and tax
			addWaiveScTax(true, oSelectedItems);
		} else if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_item_to_other_table.name())) {
			// Split item to other table
			splitItemToOtherTable(false, oSelectedItems, "", null);
		} else if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_item_with_quantity.name())) {
			if (dNewQty.compareTo(BigDecimal.ONE) <= 0 && dOriQty.subtract(dNewQty).compareTo(BigDecimal.ONE) <= 0)
				drawOrderingBasket(true);
			// partial send check
			sendCheck(false, false, false, true, false, 0, true, 2);
			if (dNewQty.compareTo(BigDecimal.ZERO) == 0) {
				splitItemToOtherTable(false, oSelectedItems, "", null);
			} else {
				// Split item with quantity
				boolean bResult = splitItemToOtherTable(false, oSelectedItems, sOrgKey, oOriItemInfo);
				FuncCheckItem oCurrentFuncCheckItem = m_oFuncCheck.getCheckItem(iNewItemSeatId, iCurrentItemIndex);
				if(!bResult) {
					// Remove all child item and modifier from the basket
					m_oFrameOrderingBasket.removeAllChildItem(iNewItemSeatId, iNewItemIndex);
					m_oFrameOrderingBasket.removeAllModifier(iNewItemSeatId, iNewItemIndex);
					m_oFrameOrderingBasket.removeItem(iNewItemSeatId, iNewItemIndex);
					
					m_oFuncCheck.deleItem(new BigDecimal(m_oFrameOrderingBasket.getSelectedNewQuantity()), iNewItemSeatId, iNewItemIndex, 0, null, false);
					
					// Rollback to original if cancelled
					oCurrentFuncCheckItem.internalChangeQty(dOriQty);
					for(FuncCheckItem oChildFuncCheckItem: oCurrentFuncCheckItem.getChildItemList()) {
						oChildFuncCheckItem.internalChangeQty(dOriQty);
						oChildFuncCheckItem.getCheckItem().setModified(true);
					}
					// update the item quantity and price
					oCurrentFuncCheckItem.getCheckItem().setModified(true);
					// partial send check
					sendCheck(false, false, false, true, false, 0, true, 2);
				} else {
					this.updateBasketItemQty(iNewItemSeatId, iCurrentItemIndex, dNewQty);
					this.updateBasketItemPrice(iNewItemSeatId, iCurrentItemIndex, oCurrentFuncCheckItem);
				}
			}
		} else if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.mark_delivery.name())) {
			// Mark delivery
			processMarkDelivery(oSelectedItems);
		} else if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.pantry_message.name())) {
			callPantryMessageLookupForMultiItem(oSelectedItems);
		} else if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.takeout.name())) {
			processTakeout(oSelectedItems, true);
		} else if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.new_item_no_kitchen_slip.name())) {
			processItemNoKitchenSlip(oSelectedItems);
		} else if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.delete_multiple_item.name())
				|| m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name()) ) {
			deleteMultipleItem(false, oSelectedItems);
			resetCurrentFunctionKeyToSplitRevenue();
		} else if (m_sCurrentFunctionKey.equals(PosDisplayPanelLookup.PARAM_COMMON_MODIFIER)) {
			Map.Entry<Integer, ClsMultiSelectModifierState> entry = m_oClsMultiSelectModifierState.entrySet().iterator()
					.next();
			int iId = entry.getKey();
			
			// if only one selected item, do not ask price for all.
			if (oSelectedItems.size() == 1)
				m_oClsMultiSelectModifierState.get(iId).setShowPriceBox(true);
			
			for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
				int iSectionId = oSelectedItem.get("sectionId");
				int iItemIndex = oSelectedItem.get("itemIndex");
				// once cancel click, break loop
				if (m_oClsMultiSelectModifierState.get(iId).isButtonCancel() == true) {
					break;
				}
				addHotModifier(iId, iSectionId, iItemIndex);
			}
			// clear hash map and set multi select modifier false
			m_bMultiSelectModifier = false;
			m_oClsMultiSelectModifierState.clear();
		} else if (m_sCurrentFunctionKey.equals(PosDisplayPanelLookup.PARAM_COMMON_MODIFIER_LOOKUP)) {
			// call from frameOrderingPanel_modifierLookupClicked
			// set common_modifier_lookup to true in dplu_param in
			// PosDisplayPanelLookup
			MenuMenu oModifierList = AppGlobal.g_oFuncMenu.get()
					.getMenuAndContentById(m_iCurrentCommonModifierLookupId);
			List<MenuMenu> oModifierMenuList = new ArrayList<MenuMenu>();
			oModifierMenuList.add(oModifierList);
			callModifierLookupForMultipleItems(oSelectedItems, oModifierMenuList);
		} else if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.repeat_multiple_items.name())) {
			repeatMutipleItems(oSelectedItems);
		} else if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.select_pending_item.name())) {
			processSetPendingItem(oSelectedItems);
		} else if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.print_pending_item.name())) {
			processPrintPendingItem(oSelectedItems, null);
		} else if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.change_ordered_item_price_level.name())) {
			changeOrderedItemPriceLevel(false, oSelectedItems);
		} else if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.multiple_rush_order.name())) {
			processMultipleRushOrder(oSelectedItems);
		} else if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.toggle_ordering_basket_information.name())) {
			this.toggleOrderingBasketInformation();
		} else if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.refund_item.name())) {
			refundItem(oSelectedItems);
		}
		
		if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_item_with_quantity.name())
				|| m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.takeout.name())) {
			if(m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_item_with_quantity.name()))
				m_oFuncCheck.setCurrentFunctionKey("");
			m_sCurrentFunctionKey = "";
		}
		
		// Exit basket multiple select mode
		this.toggleBacketMultiSelectMode(false, "", FrameOrderingBasket.SELECT_TYPE_ALL, FrameBasketSelectPanel.BASKET_SELECT_MODE_NO);
	}
	
	// Cashier mode event
	@Override
	public void FrameCashier_finishAskAmount(int iSectionId, int iItemIndex, BigDecimal dPaymentAmount,
	                                         BigDecimal dTipsAmount) {
		if (m_bIsCheckLoadedForCashierMode == false)
			return;
		
		// Finish asking amount, edit the payment amount stored in
		// PosCheckPayment list of FuncPayment
		try {
			AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "", AppGlobal.g_oFuncUser.get().getUserId() + "",
					"Select payment: " + m_oFuncPayment.getPaymentMethodName(iItemIndex, 1) + " $" + dPaymentAmount.toPlainString());
		} catch (Exception e) {}
		//julie_20190422 start
		String sOddOrEven="odd";
		int iPaymentAmount=dPaymentAmount.intValue();
		if(iPaymentAmount%2==0) {
			sOddOrEven="even";
		}
		 PosCheckPayment m_oCheckPayment=m_oFuncPayment.getCheckPaymentByPaymentIndex(iItemIndex);
		 m_oCheckPayment.addExtraInfoToList(AppGlobal.g_oFuncOutlet.get().getOutletId(), "", PosCheckExtraInfo.VARIABLE_PAYMENT_INFO, 0, sOddOrEven);
		//julie_20190422 end
		 this.editPayment(iSectionId, iItemIndex, dPaymentAmount, dTipsAmount, false);
		m_oFrameCashier.setCurrentStep(0);
	}
	
	// Cashier mode event
	@Override
	public void FrameCashier_doPartialPayment(String sTriggerBy) {
		if(!AppGlobal.g_oFuncStation.get().isPartialPayment())
			return;
		
		if(m_oFuncCheck == null
				|| (!m_oFrameCashier.isCheckLoaded() && m_iCashierMode == 1)){
			showErrorDialogBox(AppGlobal.g_oLang.get()._("check_is_not_loaded"));
			return;
		}
		
		boolean bDirectPayment = false;
		if(m_iCashierMode == 2)
			bDirectPayment = true;
		
		String sErrorMsg = "";
		boolean bCloseCheck = false;
		if(sTriggerBy.equals(FrameCashier.TRIGGER_BY_FINISH_PAYMENT_SELECTION)) {
			if(!m_oFuncPayment.isNewPaymentExist())
				sErrorMsg = AppGlobal.g_oLang.get()._("no_new_payment_selected");
			if(m_oFuncPayment.getAllPaymentTotal().abs().compareTo(m_oFuncCheck.getCheckTotal().abs()) >= 0)
				sErrorMsg = AppGlobal.g_oLang.get()._(AppGlobal.g_oLang.get()._("action_not_allowed")
						+ System.lineSeparator() +
						AppGlobal.g_oLang.get()._("please_exit_check"));
		}else {
			if (m_oFuncCheck.isPaid(false))
				sErrorMsg = AppGlobal.g_oLang.get()._(AppGlobal.g_oLang.get()._("action_not_allowed")
						+ System.lineSeparator() +
						AppGlobal.g_oLang.get()._("please_exit_check"));
			if(m_oFuncPayment.getAllPaymentTotal().compareTo(m_oFuncCheck.getCheckTotal()) < 0)
				sErrorMsg = AppGlobal.g_oLang.get()._("unable_to_settle_check_as_all_payments_total_less_than_check_total");
			if(m_oFuncPayment.getAllPaymentTotal().compareTo(m_oFuncCheck.getCheckTotal()) > 0)
				sErrorMsg = AppGlobal.g_oLang.get()._("unable_to_settle_check_as_all_payments_total_larger_than_check_total");
			bCloseCheck = true;
		}
		
		// prompt error and return if error message is not empty
		if(!sErrorMsg.isEmpty()) {
			this.showErrorDialogBox(sErrorMsg);
			return;
		}
		
		// Read Config for loading box during payment
		boolean bDisplayLoadingBoxDuringPayment = false;
		JSONObject oPaymentProcessSetting = AppGlobal.g_oFuncStation.get().getPaymentProcessSetting();
		if (oPaymentProcessSetting != null && oPaymentProcessSetting.has("display_loading_box_during_payment"))
			bDisplayLoadingBoxDuringPayment = oPaymentProcessSetting.optBoolean("display_loading_box_during_payment", false);
		
		if (bDisplayLoadingBoxDuringPayment) {
			// Display loading box during payment
			m_oFormProcessBox = new FormProcessBox(this);
			m_oFormProcessBox.setTitle(AppGlobal.g_oLang.get()._("loading") + "...");
			m_oFormProcessBox.setMessage(AppGlobal.g_oLang.get()._("payment_processing") + System.lineSeparator()
					+ AppGlobal.g_oLang.get()._("please_wait"));
			m_oFormProcessBox.showWithoutRemoveUI();
		}
		
		// Update Check payment status
		m_oFuncCheck.setPaid(PosCheck.PAID_PARTIAL_PAID);
		
		// Update Check party status
		for (int i = 0; i < m_oFuncCheck.getCheckPartyList().size(); i++)
			m_oFuncCheck.getCheckPartyBySeq(i).setPaid(PosCheckParty.PAID_PARTIAL_PAID);
		
		finishPayment(bCloseCheck);
		
		if (bDisplayLoadingBoxDuringPayment){
			// Remove loading box during payment
			m_oFormProcessBox.closeShowWithoutRemoveUI();
		}
		
		// Reset the current payment step to ask amount
		if(bDirectPayment)
			m_oFrameCashier.setCurrentStep(0);
		else {
			m_oFrameCashier.setCurrentStep(4);
			
			// Load check for Cashier when	1. is Continue To Pay After Settling Partial Payment
			// 								2. Interface payment posting failed for non direct payment with config by location
			if((sTriggerBy.equals(FrameCashier.TRIGGER_BY_FINISH_PAYMENT_SELECTION) && AppGlobal.g_oFuncStation.get().isContinueToPayAfterSettlingPartialPayment() && m_oFrameCashier.getVisible()) ||
					(m_bIsInterfacePaymentFailedBySetup && !m_bIsInterfaceDirectPaymentFailedBySetup && (AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) || AppGlobal.OPERATION_MODE.fine_dining.equals(m_eOperationMode)))) {
				if (m_bIsInterfacePaymentFailedBySetup) {
					//Call update check to update the outlet table
					m_oFuncCheck.updateCheck(false, false, PosCheckItem.SEND_MODE_NEW_ITEM, 0, true, 0, 0, 0, "", false, false, false, false, 0, 0, false, false);
					
					// Open Cashier Mode
					startCashierMode(false);
					
					// Set back the payment current step
					m_oFrameCashier.setCurrentStep(3);
				}
				
				// Reload the check to payment
				loadCheckForCashierMode(m_oFuncCheck.getCheckPrefixNo(), "", "");
				
				// Reset
				m_bIsInterfacePaymentFailedBySetup = false;
			}
			
			// If fail in finishPayment(), the cashier should be closed by exitCashier(), set back the payment step to zero
			if (!m_oFrameCashier.getVisible())
				m_oFrameCashier.setCurrentStep(0);
		}
	}
	
	// add default payment for active payment gateway transaction in cashier screen, program allows user to input pay amount and tips
	@Override
	public void FrameCashier_addDefaultPaymentForActivePosPaymentGatewayTransaction() {
		PosPaymentGatewayTransactionsList oTransList = m_oFuncCheck.getCurrentAuthPosPaymentGatewayTransactionList();
		JSONObject oParameter = null;
		boolean bFullPayment = false;
		boolean bHaveValue = false;
		String sReferenceNo = "";
		
		if (oTransList != null && oTransList.getRemainActivePaymentGatewayTransactionsCount() > 0) {
			HashMap<String, String> oPaymentGatewayPayCodeList = getSpaStandardPaymentMappingConfig(FramePaymentCardAuthorization.PAYMENT_MAPPING_TYPE.payment_mapping.name());
			ArrayList<PosCheckExtraInfo> oPaymentExtraInfoList = new ArrayList<PosCheckExtraInfo>();
			
			PosPaymentMethodList oPosPaymentMethodList = m_oFuncPayment.getPaymentMethodList();
			PosPaymentGatewayTransactions oActiveAuthPaymentGatewayTrans = m_oFuncCheck.getNextNonSettleActiveGatewayTransaction(oTransList);
			if ((oActiveAuthPaymentGatewayTrans != null) && (oPaymentGatewayPayCodeList != null)) {
				// add payment node for auth type (top-up auth and auth)
				String sIssuer = oActiveAuthPaymentGatewayTrans.getIssuer();
				String sPosPayCode = oPaymentGatewayPayCodeList.get(sIssuer);
				if (sPosPayCode != null) {
					int iPayId = oPosPaymentMethodList.getPayIdByPayCode(sPosPayCode);
					// prepare the payment information and put in hash map
					// start to add payment in cashier screen
					// Get the payment method object
					PosPaymentMethod oPosPaymentMethod = m_oFuncPayment.getPaymentMethodList().getPaymentMethodList().get(iPayId);
					if (oPosPaymentMethod == null) {
						showErrorDialogBox(AppGlobal.g_oLang.get()._("no_such_payment_method"));
						return;
					}
					// add the extra info in payment
					oPaymentExtraInfoList.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_SPA_STANDARD_MASKED_PAN, oActiveAuthPaymentGatewayTrans.getMaskedPan()));
					oPaymentExtraInfoList.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_SPA_STANDARD_ISSUER, oActiveAuthPaymentGatewayTrans.getIssuer()));
					oPaymentExtraInfoList.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_SPA_STANDARD_TIPS, oActiveAuthPaymentGatewayTrans.getTips().toPlainString()));
					oPaymentExtraInfoList.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_SPA_STANDARD_PARENT_AUTH_CODE, oActiveAuthPaymentGatewayTrans.getParentAuthCode()));
					oPaymentExtraInfoList.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_SPA_STANDARD_AUTH_CODE, oActiveAuthPaymentGatewayTrans.getAuthCode()));
					oPaymentExtraInfoList.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_SPA_STANDARD_TYPE_KEY, PosPaymentGatewayTransactions.TYPE_AUTH));
					oPaymentExtraInfoList.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_SPA_STANDARD_PAY_AMOUNT, oActiveAuthPaymentGatewayTrans.getAmount().toString()));
					String sTempPgtxId = Integer.toString(oActiveAuthPaymentGatewayTrans.getPgtxPayId());
					oPaymentExtraInfoList.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_SPA_STANDARD_PGTX_PAY_ID, sTempPgtxId));
					oPaymentExtraInfoList.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_SPA_STANDARD_REF_NUM, oActiveAuthPaymentGatewayTrans.getRefNo()));
					oPaymentExtraInfoList.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_SPA_STANDARD_TRACE_NUM, oActiveAuthPaymentGatewayTrans.getTraceNo()));
					oPaymentExtraInfoList.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_SPA_STANDARD_INVOICE_NUM, oActiveAuthPaymentGatewayTrans.getInvoiceNo()));
					oPaymentExtraInfoList.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_SPA_STANDARD_TOKEN, oActiveAuthPaymentGatewayTrans.getToken()));
					String sTempIntfId = Integer.toString(oActiveAuthPaymentGatewayTrans.getIntfId());
					oPaymentExtraInfoList.add(this.constructCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID, sTempIntfId));
					addPaymentToCashier(iPayId, sReferenceNo, oPaymentExtraInfoList, false, oParameter, bFullPayment, bHaveValue);
				}
				else {
					this.showErrorDialogBox(AppGlobal.g_oLang.get()._("no_payment_method_mapping_for_issuer") + " " + sIssuer);
				}
			}
		}
	}
	
	@Override
	public boolean FrameCashier_doPaymentCardTopUpAuthorization(int iPgtxPayId, BigDecimal dTopUpAuthAmount, BigDecimal dTotalAuthAmount) {
		ArrayList<String> oVendors = new ArrayList<String>();
		oVendors.add(InfVendor.KEY_SPA_STANDARD);
		BigDecimal dTotalAuthedAmount = BigDecimal.ZERO;
		PosInterfaceConfig oPosInterfaceConfig = getInterfaceConfig(InfInterface.TYPE_PAYMENT_INTERFACE, oVendors, AppGlobal.g_oLang.get()._("please_select_the_payment_interface"), true);
		boolean bReturn = false;
		
		if(oPosInterfaceConfig == null) {
			this.showErrorDialogBox(AppGlobal.g_oLang.get()._("not_support_online_spa_standard_payment_interface"));
			return false;
		}
		
		// get payment gateway transaction node information to prepare to do card top-up authorization
		PosPaymentGatewayTransactionsList oTransList = m_oFuncCheck.getCurrentAuthPosPaymentGatewayTransactionList();
		PosPaymentGatewayTransactions oTrans = oTransList.getPosPaymentGatewayTransactionByPgtxPayId(iPgtxPayId);
		String sAuthCode = oTrans.getAuthCode();
		if(!oTrans.getParentAuthCode().isEmpty())
			sAuthCode = oTrans.getParentAuthCode();
		if(oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_SPA_STANDARD)) {
			
			PosPaymentGatewayTransactionsList oPosPaymentGatewayTransactionsCardAuthListByCheck = m_oFuncCheck.getPosPaymentGatewayTransactionsLists();
			ArrayList<PosPaymentGatewayTransactions> oPosPaymentGatewayTransactionsAuthRecordsList = new ArrayList<PosPaymentGatewayTransactions>();
			//check if has credit card topup auth record
			for(PosPaymentGatewayTransactions oPaymentGatewayTransactions :oPosPaymentGatewayTransactionsCardAuthListByCheck.getPosPaymentGatewayTransactionsList()){
				if((oPaymentGatewayTransactions.getParentAuthCode().equals(sAuthCode) || oPaymentGatewayTransactions.getAuthCode().equals(sAuthCode))
						&& oPaymentGatewayTransactions.getIntfId() == oPosInterfaceConfig.getInterfaceId()
						&& oPaymentGatewayTransactions.getStatus().isEmpty()
						&& !oPaymentGatewayTransactions.getType().equals(PosPaymentGatewayTransactions.TYPE_COMPLETE_AUTH)
						&& oPaymentGatewayTransactions.getMaskedPan().equals(oTrans.getMaskedPan())){
					oPosPaymentGatewayTransactionsAuthRecordsList.add(oPaymentGatewayTransactions);
					dTotalAuthedAmount = dTotalAuthedAmount.add(oPaymentGatewayTransactions.getAmount());
				}
			}
			
			//sort the auth record list by action time
			Collections.sort(oPosPaymentGatewayTransactionsAuthRecordsList, new Comparator<PosPaymentGatewayTransactions>(){
				@Override
				public int compare(PosPaymentGatewayTransactions oPosPaymentGatewayTransactions1, PosPaymentGatewayTransactions oPosPaymentGatewayTransactions2) {
					//sort by time
					return oPosPaymentGatewayTransactions1.getActionTime().compareTo(oPosPaymentGatewayTransactions2.getActionTime());
				}
			});
			
			if(dTotalAuthedAmount.compareTo(dTotalAuthAmount) >= 0)
				return true;
			else if(dTotalAuthedAmount.compareTo(dTotalAuthAmount) < 0)
				dTopUpAuthAmount = dTotalAuthAmount.subtract(dTotalAuthedAmount);
			
			if(oPosPaymentGatewayTransactionsAuthRecordsList.size() > 0)
				oTrans = oPosPaymentGatewayTransactionsAuthRecordsList.get(oPosPaymentGatewayTransactionsAuthRecordsList.size() -1);
			bReturn = doCardTopUpAuthorizationAskTipsConfirmation(StringLib.BigDecimalToString(dTopUpAuthAmount, AppGlobal.g_oFuncOutlet.get().getBusinessDay().getPayDecimal()),
					StringLib.BigDecimalToString(dTotalAuthAmount, AppGlobal.g_oFuncOutlet.get().getBusinessDay().getPayDecimal()),
					oTrans, oPosInterfaceConfig);
			return bReturn;
		}
		else
			return true;
	}
	
	// do card top up authorization ask tips confirmation
	public boolean doCardTopUpAuthorizationAskTipsConfirmation(String sValue, String sTotalAmount, PosPaymentGatewayTransactions oTrans, PosInterfaceConfig oPosInterfaceConfig) {
		
		String sAuthorizationType = FramePaymentCardAuthorization.AUTHORIZATION_TYPE.top_up_authorization.name();
		
		FuncPaymentInterface oFuncPaymentInterface = new FuncPaymentInterface(oPosInterfaceConfig);
		if(!oFuncPaymentInterface.cardAuthorization(m_oFuncCheck, sAuthorizationType, "", oTrans.getRefNo(), sValue, sTotalAmount, "", "", "", oTrans.getIssuer(), oTrans.getAuthCode(), oTrans.getToken())) {
			this.showErrorDialogBox(AppGlobal.g_oLang.get()._("fail_to_perform_top_up_authorization_for_exceed_tips_amount") + System.lineSeparator() + System.lineSeparator()
					+ AppGlobal.g_oLang.get()._("return_message") + ":" + System.lineSeparator() + oFuncPaymentInterface.getLastErrorMessage());
			return false;
		}
		else{
			if(oFuncPaymentInterface.getPosPaymentGatewayTransactions() != null){
				BigDecimal dAuthAmount = new BigDecimal(sValue);
				PosPaymentGatewayTransactions oTopupPosPaymentGatewayTransactions = oFuncPaymentInterface.getPosPaymentGatewayTransactions();
				// return empty for no adjustment from 3rd party device
				// otherwise, trust the return amount as top-up amount
				if(!oFuncPaymentInterface.getPosPaymentGatewayTransactions().getTxnAmount().equals(dAuthAmount)){
					BigDecimal dResponseAmount = oFuncPaymentInterface.getPosPaymentGatewayTransactions().getTxnAmount();
					// response transition amount is less than input amount --> input amount = transition amount
					if(dResponseAmount.compareTo(dAuthAmount) < 0) {
						this.showDialogBox(AppGlobal.g_oLang.get()._("partial_approval"),
								AppGlobal.g_oLang.get()._("new_top_up_amount") + ": "
										+ AppGlobal.g_oFuncOutlet.get().getCurrencySign()
										+ dResponseAmount.toPlainString());
						dAuthAmount = dResponseAmount;
					}
				}
				if(oTrans.getRefNo().isEmpty()){
					oTopupPosPaymentGatewayTransactions.setType(PosPaymentGatewayTransactions.TYPE_AUTH);
					oTopupPosPaymentGatewayTransactions.setAmount(dAuthAmount);
					oTopupPosPaymentGatewayTransactions.setMaskedPan(oTrans.getMaskedPan());
					oTrans.setTips(dAuthAmount);
					m_oFuncCheck.addPaymentGatewayTransToList(oTopupPosPaymentGatewayTransactions, oPosInterfaceConfig.getInterfaceId());
				}
				else{
					oTopupPosPaymentGatewayTransactions.setType(PosPaymentGatewayTransactions.TYPE_TOPUP_AUTH);
					oTopupPosPaymentGatewayTransactions.setAmount(dAuthAmount);
					if(oTrans.getParentAuthCode().isEmpty())
						oTopupPosPaymentGatewayTransactions.setParentAuthCode(oTrans.getAuthCode());
					else
						oTopupPosPaymentGatewayTransactions.setParentAuthCode(oTrans.getParentAuthCode());
					oTopupPosPaymentGatewayTransactions.setIssuer(oTrans.getIssuer());
					oTopupPosPaymentGatewayTransactions.setMaskedPan(oTrans.getMaskedPan());
					oTrans.setTips(dAuthAmount);
					m_oFuncCheck.addPaymentGatewayTransToList(oTopupPosPaymentGatewayTransactions, oPosInterfaceConfig.getInterfaceId());
				}
				// update amount include tips in check payment gateway transaction
				for(PosCheckPayment oPosCheckPayment:m_oFuncPayment.getCheckPaymentList()) {
					for(PosPaymentGatewayTransactions oPosPaymentGatewayTransactions : oPosCheckPayment.getPosPaymentGatewayTransactionsList().getPosPaymentGatewayTransactionsList()){
						if(oPosPaymentGatewayTransactions.getPgtxPayId() == oTrans.getPgtxPayId())
							oPosPaymentGatewayTransactions.setTips(dAuthAmount);
					}
				}
				if(dAuthAmount.compareTo(new BigDecimal(sValue)) != 0) {
					m_oFrameCashier.setCurrentTipsAmount(dAuthAmount);
				}
			}
		}
		return true;
	}
	
	private void doSurveillanceEvent(String sEventType, HashMap<String, String> oSurveillanceEventInfo) {
		List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);
		if (!oInterfaceConfigList.isEmpty()) {
			for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
				if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
					FuncSurveillance oFuncSurveillance = new FuncSurveillance(oPosInterfaceConfig);
					oSurveillanceEventInfo.put("eventType", sEventType);
					oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo, null);
				}
			}
		}
	}
	
	@Override
	public boolean FrameCashier_askTipsConfirmation(BigDecimal dCurrentPaymentAmount, BigDecimal dCurrentTipsAmount) {
		
		BigDecimal dCheckAmount = dCurrentPaymentAmount.multiply(new BigDecimal("0.5"));
		
		// if negative payment, change to positive comparison
		if (dCheckAmount.signum() == -1) {
			dCheckAmount = dCheckAmount.negate();
			dCurrentTipsAmount = dCurrentTipsAmount.negate();
		}
		
		if (dCurrentTipsAmount.compareTo(dCheckAmount) > 0) {
			// Tips amount > 0.5 x payment amount
			// Ask if confirm
			FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
					AppGlobal.g_oLang.get()._("no"), this);
			oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
			oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("tips_is_greater_than_half_of_the_payment") + ", "
					+ AppGlobal.g_oLang.get()._("continue") + "?");
			oFormConfirmBox.show();
			if (oFormConfirmBox.isOKClicked() == false)
				return false;
		}
		
		return true;
	}
	
	@Override
	public void FrameCashier_clickBasketPayment(int iSectionId, int iItemIndex) {
		// Payment clicked
		if (m_iCashierMode == 0 || m_bIsCheckLoadedForCashierMode == false)
			return;
		
		if (m_oFuncPayment.getCheckPaymentList().size() > 0) {
			int iCurrentStep = m_oFrameCashier.getCurrentStep();
			if (iCurrentStep != 1 && iCurrentStep != 2) {
				// During asking value, delete last payment
				int iPaymentIndex = iItemIndex;
				
				deletePaymentInCashierMode(iPaymentIndex, false);
			}
		}
		
		if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode))
			setCashierTimeoutChecking(true);
	}
	
	@Override
	public void FrameCashier_cancel(boolean bForceDelete) {
		
		if(AppGlobal.g_iLogLevel >= 1){
			AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "Cancel payment clicked, payment list cnt: " + m_oFuncPayment.getCheckPaymentList().size());
		}
		
		if (m_oFuncPayment.getCheckPaymentList().size() > 0) {
			int iCurrentStep = m_oFrameCashier.getCurrentStep();
			if (iCurrentStep == 1 || iCurrentStep == 2) {
				// During asking value, delete last payment
				int iPaymentIndex = m_oFuncPayment.getCheckPaymentList().size() - 1;
				
				boolean bConfirmDelete = deletePaymentInCashierMode(iPaymentIndex, bForceDelete);
				
				if (bConfirmDelete
						&& AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name()))
					m_oFrameCashierPanel.setVisible(true);
			}
		} else {
			//check if the check is loaded
			if(!m_oFrameCashier.isCheckLoaded() && m_iCashierMode == 1)
				return;
			
			// Cancel payment for this check
			// Ask if confirm
			FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
					AppGlobal.g_oLang.get()._("no"), this);
			oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
			if (m_iCashierMode == 3)
				oFormConfirmBox
						.setMessage(AppGlobal.g_oLang.get()._("confirm_to_cancel_adjust_payment_for_this_check") + "?");
			else
				oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("confirm_to_cancel_payment_for_this_check") + "?");
			oFormConfirmBox.show();
			if (oFormConfirmBox.isOKClicked() == false)
				return;
			
			if(AppGlobal.g_iLogLevel >= 1){
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "Exit current check in cashier mode");
			}
			
			// Release the check lock
			if (m_oFuncCheck != null && m_oFuncCheck.isTableLocked())
				m_oFuncCheck.unlockTable(true, false);
			
			// Set check to be loaded or not
			m_bIsCheckLoadedForCashierMode = false;
			
			m_oFrameCashier.setIsCheckLoaded(false, false);
			
			// Start step
			m_oFrameCashier.setCurrentStep(0);
			
			// Exit the cashier if cashier mode for adjust payments
			if (m_iCashierMode == 3)
				FrameCashier_exit();
		}
	}
	
	@Override
	public boolean FrameCashier_exit() {
		
		if (m_bPegasusPmsPostingFail) {
			this.showErrorDialogBox(
					AppGlobal.g_oLang.get()._("cannot_quit_payment_due_to_some_payment_is_already_posted_successfully")
							+ System.lineSeparator() + AppGlobal.g_oLang.get()._("please_select_other_payment_to_settle_check"));
			return false;
		}
		
		// update coupon status if necessary
		if (m_oFuncPayment.getCheckPaymentList().size() > 0) {
			for (PosCheckPayment oCheckPayment : m_oFuncPayment.getCheckPaymentList()) {
				if (oCheckPayment.isCouponPaymentType()) {
					FuncCoupon oRedeemCoupon = new FuncCoupon();
					JSONObject oPaymentRefData = null;
					
					try {
						oPaymentRefData = new JSONObject(oCheckPayment.getRefData(1));
					} catch (JSONException e) {
						e.printStackTrace();
						AppGlobal.stack2Log(e);
					}
					if (oPaymentRefData.has("coupon_number") && !oPaymentRefData.isNull("coupon_number")) {
						oRedeemCoupon.setStartCoupon(oPaymentRefData.optString("coupon_number"));
						oRedeemCoupon.setEndCoupon(oPaymentRefData.optString("coupon_number"));
						if (oPaymentRefData.has("redeem_citm_id") && !oPaymentRefData.isNull("redeem_citm_id")) {
							oRedeemCoupon.setRedeemItem("");
							
							// remove corresponding check item extra info
							FuncCheckItem oFuncCheckItem = m_oFuncCheck
									.getOrderedCheckItemByCitmId(oPaymentRefData.optString("redeem_citm_id"));
							if (oFuncCheckItem != null)
								oFuncCheckItem.removeExtraInfoFromList(PosCheckExtraInfo.BY_ITEM,
										PosCheckExtraInfo.SECTION_ONLINE_COUPON,
										PosCheckExtraInfo.VARIABLE_REDEEM_COUNT);
						}
						
						oRedeemCoupon.setCouponCurrentStatus(FuncCoupon.COUPON_STATUS_LOCKED);
						oRedeemCoupon.setCouponNextStatus(FuncCoupon.COUPON_STATUS_SOLD);
						oRedeemCoupon.updateCoupon(FuncCoupon.UPDATE_COUPON_TYPE_USE_AS_PAYMENT);
					}
				}
			}
		}
		
		// exit cashier and waive sc/tax and apply discount during payment
		if (m_iCashierMode == 3) {
			// roll back the check when current step = 0
			if (m_oFrameCashier.isFinishPaymentByAdjustPayment() == false) {
				// update the check total and check round amount
				//add back the round amount and update the check total when cancel adjust payment
				String sPaymentRounding = "";
				if(m_oFuncCheck.isCheckExtraInfoExistBySectionVariableAndIndex("", PosCheckExtraInfo.VARIABLE_PAYMENT_ROUNDING, 0))
					sPaymentRounding = m_oFuncCheck.getCheckExtraInfoValueListBySectionVariable("", PosCheckExtraInfo.VARIABLE_PAYMENT_ROUNDING);
				if(!sPaymentRounding.isEmpty()){
					BigDecimal dPaymentRounding = new BigDecimal(sPaymentRounding);
					m_oFuncCheck.setRoundAmount(m_oFuncCheck.getRoundAmount().add(AppGlobal.g_oFuncOutlet.get().roundCheckAmountToBigDecimal(dPaymentRounding)));
					m_oFuncCheck.setCheckTotal(AppGlobal.g_oFuncOutlet.get().roundCheckAmountToBigDecimal(m_oFuncCheck.getCheckTotal().add(dPaymentRounding)));
				}
				// Roll back the check (i.e. cancel the waive sc/tax and void
				// applied discount during payment)
				rollBackCheckForCancelPayment(0);
				PosPaymentMethodList oPosPaymentMethodList = m_oFuncPayment.getPaymentMethodList();
				for (PosCheckPayment oCheckPayment : m_oFuncCheck.getPaymentSnapShotList()) {
					PosPaymentMethod oPosPaymentMethod = oPosPaymentMethodList
							.getPaymentMethod(oCheckPayment.getPaymentMethodId());
					/*** Check Auto Discount ***/
					boolean bWaiveSC = false, bWaiveTax = false;
					int iAutoDiscId = 0;
					String sAutoDiscType = "item";
					
					// Waive SC and Tax as necessary
					if (oPosPaymentMethod.isAutoWaiveSc())
						bWaiveSC = true;
					
					if (oPosPaymentMethod.isAutoWaiveTax())
						bWaiveTax = true;
					
					// Check whether have auto discount
					if (!oPosPaymentMethod.getAutoDiscountTypeId().equals("")) {
						iAutoDiscId = Integer.valueOf(oPosPaymentMethod.getAutoDiscountTypeId());
						if (oPosPaymentMethod.isAutoCheckDiscountType())
							sAutoDiscType = "check";
					}
					
					// Really waive SC/Tax
					if (bWaiveSC || bWaiveTax) {
						int i;
						boolean[] bChosenSc = new boolean[5];
						String[] sChosenTax = new String[25];
						List<HashMap<String, Integer>> oSelectedItem = new ArrayList<HashMap<String, Integer>>();
						
						oSelectedItem = m_oFuncCheck.getSectionItemIndexForCurrentOrderedItem();
						for (i = 0; i < 5; i++)
							bChosenSc[i] = bWaiveSC;
						for (i = 0; i < 25; i++){
							if(bWaiveTax)
								sChosenTax[i] = PosOverrideCondition.CHARGE_TAX_WAIVE;
							else
								sChosenTax[i] = PosOverrideCondition.CHARGE_TAX_NO_CHANGE;
						}
						m_oFuncCheck.addWaiveScTax(false, oSelectedItem, bChosenSc, sChosenTax);
					}
					
					// Check whether have auto discount
					if (iAutoDiscId > 0) {
						String sApplyDiscountResult = autoDiscountForPayment(sAutoDiscType, iAutoDiscId, null, null,
								null);
						if (sApplyDiscountResult.equals(FormMain.FUNC_RESULT_NO_SUCH_RECORD)) {
							AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
									AppGlobal.g_oFuncUser.get().getUserId() + "",
									"Payment with " + oPosPaymentMethod.getName(1)
											+ " and cannot find the predefine auto discount(id:" + iAutoDiscId + ")");
						}
					}
				}
			}else{
				// Clear the check round amount if the check have check rounding
				if(!m_oFuncCheck.isCheckRounding() && m_oFuncCheck.isCheckExtraInfoExistBySectionVariableAndIndex("", PosCheckExtraInfo.VARIABLE_PAYMENT_ROUNDING, 0))
					m_oFuncCheck.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, "", PosCheckExtraInfo.VARIABLE_PAYMENT_ROUNDING, 0, "0");
			}
		} else {
			if (!AppGlobal.g_oFuncStation.get().isPartialPayment() ||
					AppGlobal.g_oFuncStation.get().isPartialPayment() && m_oFrameCashier.getCurrentStep() != 4) {
				// Roll back the check (i.e. cancel the waive sc/tax and void
				// applied discount during payment)
				rollBackCheckForCancelPayment(0);
			}
		}
		
		try {
			AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "", AppGlobal.g_oFuncUser.get().getUserId() + "",
					"Exit Cashier");
		} catch (Exception e) {}
		
		// Cancel payment and exit cashier mode
		return exitCashier();
	}
	
	@Override
	public void FrameCashier_loadCheck(String sCheck) {
		loadCheckForCashierMode(sCheck, "", "");
	}
	
	@Override
	public void FrameCashier_loadTable() {
		String sTableNo;
		String sTableExtension;
		
		// Ask table no.
		FormAskTable oFormAskTable = new FormAskTable(this);
		oFormAskTable.init(0, true, AppGlobal.g_oFuncOutlet.get().getOutletId());
		oFormAskTable.setTitle(AppGlobal.g_oLang.get()._("please_input_the_table_no"));
		oFormAskTable.show();
		
		if (oFormAskTable.isCanelClick())
			return;
		
		sTableNo = oFormAskTable.getTableNo() + "";
		sTableExtension = oFormAskTable.getTableExtension();
		
		loadCheckForCashierMode("", sTableNo, sTableExtension);
	}
	
	@Override
	public void frameOptionBox_LabelSelected(int iOptIndex) {
		if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.testing_printer.name())) {
			int iPosItpqId = m_oOptionBoxIdList.get(iOptIndex);
			
			PosItemPrintQueue oPosItmPrtQueue = new PosItemPrintQueue();
			oPosItmPrtQueue.setItpqId(iPosItpqId);
			String sURL = oPosItmPrtQueue.printTestingPrinterSlip(AppGlobal.g_oFuncUser.get().getUserId(),
					AppGlobal.g_oFuncStation.get().getStationId());
			if (sURL.length() == 0) {
				this.showErrorDialogBox(AppGlobal.g_oLang.get()._("fail_to_create_testing_printer_slip"));
				return;
			} else {
				// Add log to action log list
				AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.testing_printer.name(),
						PosActionLog.ACTION_RESULT_SUCCESS, "", AppGlobal.g_oFuncUser.get().getUserId(),
						AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
						AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
						AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "",
						"ItemPrtQueueId:" + iPosItpqId);
			}
			
			// handle action log
			AppGlobal.g_oActionLog.get().handleActionLog(false);
		} else if (m_sCurrentFunctionKey.equals("ordering_timeout_options")) {
			if (iOptIndex == 0) {
				// Continue the operation
				// Restart the ordering timeout
				setOrderingTimeoutChecking(true);
			} else {
				// Begin new check
				if (m_oFuncCheck != null) {
					orderingTimeoutQuitCheck();
				}
			}
			m_oFrameOptionBox.setVisible(false);
			m_sCurrentFunctionKey = "";
		} else if (m_sCurrentFunctionKey.equals("auto_function")) {
			try {
				m_oFrameOptionBox.setVisible(false);
				m_sCurrentFunctionKey = "";
				
				JSONObject oSelectedKeyJsonObject = m_oFrameOptionBox.getOptKey(iOptIndex);
				
				PosFunction oPosFunction = m_oFunctionList
						.getFunctionByKey(oSelectedKeyJsonObject.getString("function_key"));
				HashMap<String, String> oFuncParam = null;
				if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.set_member.name())) {
					oFuncParam = new HashMap<String, String>();
					oFuncParam.put("memberId", Integer.toString(0));
					oFuncParam.put("autoFunction", "true");
				}
				this.fcnSwitch(oPosFunction.getFuncId(), "", -1, -1, false, oFuncParam);
				
				// Quit check if fail to perform function
				if (AppGlobal.g_sResultForAutoFunction.get().equals(AppGlobal.AUTO_FUNCTIONS_RESULT_LIST.fail.name())) {
					if (oSelectedKeyJsonObject.getString("fail_handling").equals(NEW_CHECK_AUTO_FUNCTIONS_QUIT)) {
						this.fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.cancel.name()), "", -1, -1,
								false, null);
						
						// Clear the remin auto function
						m_oRemainAutoFunctions.clear();
					}
				}
				// must quit the loop after quit check
				else if (AppGlobal.g_sResultForAutoFunction.get()
						.equals(AppGlobal.AUTO_FUNCTIONS_RESULT_LIST.forced_quit.name()))
					// Clear the remin auto function
					m_oRemainAutoFunctions.clear();
				
				// Perform next auto function
				performAutoFunction();
				
			} catch (Exception e) {
				AppGlobal.stack2Log(e);
			}
		}
	}
	
	@Override
	public void formOptionBox_LabelSelected(JSONObject oSelectedKeyJsonObject) {
		// TODO Auto-generated method stub
		if (m_sCurrentFunctionKey.equals("auto_function")) {
			try {
				m_sCurrentFunctionKey = "";
				
				PosFunction oPosFunction = m_oFunctionList
						.getFunctionByKey(oSelectedKeyJsonObject.getString("function_key"));
				HashMap<String, String> oFuncParam = null;
				if (oPosFunction.getKey().equals(AppGlobal.FUNC_LIST.set_member.name())) {
					oFuncParam = new HashMap<String, String>();
					oFuncParam.put("memberId", Integer.toString(0));
					oFuncParam.put("autoFunction", "true");
				}
				this.fcnSwitch(oPosFunction.getFuncId(), "", -1, -1, false, oFuncParam);
				
				// Quit check if fail to perform function
				if (AppGlobal.g_sResultForAutoFunction.get().equals(AppGlobal.AUTO_FUNCTIONS_RESULT_LIST.fail.name())) {
					if (oSelectedKeyJsonObject.getString("fail_handling").equals(NEW_CHECK_AUTO_FUNCTIONS_QUIT)) {
						this.fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.cancel.name()), "", -1, -1,
								false, null);
						
						// Clear the remin auto function
						m_oRemainAutoFunctions.clear();
					}
				}
				// must quit the loop after quit check
				else if (AppGlobal.g_sResultForAutoFunction.get()
						.equals(AppGlobal.AUTO_FUNCTIONS_RESULT_LIST.forced_quit.name()))
					// Clear the remain auto function
					m_oRemainAutoFunctions.clear();
				
				// Perform next auto function
				performAutoFunction();
				
			} catch (Exception e) {
				AppGlobal.stack2Log(e);
			}
		}
	}
	
	@Override
	public void formOptionBox_CancelSelected() {
		if (m_oRemainAutoFunctions.size() == 0){
			//If performAutoFunction success, set back VALUE of FINISH to TRUE in Auto Function Extra Info
			if (AppGlobal.g_oFuncStation.get().getCheckAutoFunctionsOption()
					&& m_oFuncCheck.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_AUTO_FUNCTIONS,
					PosCheckExtraInfo.VARIABLE_FINISH, 0)) {
				m_oFuncCheck.updateCheckExtraInfoValue (PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_AUTO_FUNCTIONS,
						PosCheckExtraInfo.VARIABLE_FINISH, 0, PosCheckExtraInfo.VALUE_TRUE);
			}
		}
	}
	
	@Override
	public void frameOptionBox_ButtonClicked(int iId, String sValue) {
		if (sValue.equals("KEY_CANCEL")) {
			if (m_sCurrentFunctionKey.equals("ordering_timeout_options")) {
				// Cannot cancel
				return;
			}
			m_oFrameOptionBox.setVisible(false);
		}
	}
	
	@Override
	public void frameCheckFunction_clickTable() {
		fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.change_table.name()), "", 0, 0, false, null);
	}
	
	@Override
	public void frameCheckFunction_clickCover() {
		if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)) {
			return;
		}
		fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.change_cover.name()), "", 0, 0, false, null);
	}
	
	@Override
	public void frameCheckFunction_exit() {
		// re-sequence all items
		m_oFuncCheck.updateCheckItemSequence(true, true, 0);
		
		// Update database
		m_oFuncCheck.updateCheckItemsAfterFunction();
		
		m_oFrameCheckFunction.setVisible(false);
		m_oFrameStationInfoBarCover.setVisible(false);
		m_oFrameStationInfoBar.changeInfosPosition(230, 830, false);
		
		if(!(AppGlobal.g_oFuncStation.get().getStationDevice().isSelfOrderKiosk() && AppGlobal.g_oFuncStation.get().isHideCheckDetailBar()))
			m_oFrameCheckDetail.setVisible(true);
	}
	
	@Override
	public FuncCheckItem frameCheckFunction_moveItemToOtherSeat(int iOriSeatNo, FuncCheckItem oOriFuncCheckItem,
	                                                            int iNewSeatNo, BigDecimal dChgQty) {
		// Move item to other seat
		return moveItemToOtherSeat(iOriSeatNo, oOriFuncCheckItem, iNewSeatNo, dChgQty);
	}
	
	@Override
	public boolean frameCheckFunction_changeItemCourse(int iTargetSeatNo, FuncCheckItem oTargetFuncCheckItem,
	                                                   int iNewCourseId) {
		return changeItemCourse(iTargetSeatNo, oTargetFuncCheckItem, iNewCourseId);
	}
	
	@Override
	// If return false, not handle the click event
	public boolean childItemClicked() {
		// Process business logic in this function for any click on the screen
		
		if (m_oFrameDirectPaymentResult.getVisible()) {
			// Hidden the direct payment result page
			m_oFrameDirectPaymentResult.setVisible(false);
			
			// Clear payment basket
			m_oFrameDirectPaymentResult.clearPaymentBasket();
		}
		
		// Update the check number for fast-food mode and self order kiosk mode
		if (m_oFuncCheck != null) {
			if ((m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food) || m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk))
					&& !AppGlobal.g_oFuncOutlet.get().getBusinessDay().isCheckNumGeneratedByOutlet()
					&& !m_oFuncCheck.isOldCheck() && !m_oFrameCheckDetail.getTableNo()
					.equals(AppGlobal.g_oFuncStation.get().getNextCheckPrefixNumber(true)))
				m_oFrameCheckDetail.setTableNo(StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT,
						AppGlobal.g_oFuncStation.get().getNextCheckPrefixNumber(true)));
		}
		
		// Check if myself is killed or not
		String sReason = AppGlobal.getKilledReason();
		if (sReason.length() > 0) {
			this.showErrorDialogBox(sReason);
			
			// Force logout
			logout(true);
			
			AppGlobal.finishBeingKilled();
			
			return false;
		}
		
		return true;
	}
	
	@Override
	// If return false, not handle the click event
	public boolean childItemTimer() {
		// Process business logic in this function for any timer event on the screen
		
		// Check if myself is killed or not
		String sReason = AppGlobal.getKilledReason();
		if (sReason.length() > 0) {
			this.showErrorDialogBox(sReason);
			
			// Force logout
			logout(true);
			
			AppGlobal.finishBeingKilled();
			
			return false;
		}
		
		return true;
	}
	
	// Process kill request from other station
	@Override
	public void processKillRequest() {
		// Stop the OM process
		OmWsClientGlobal.g_oWsClient.get().setEnable(false);
		OmWsClientGlobal.g_oWsClientForHq.get().setEnable(false);
	}
	
	@Override
	public void FuncCheck_updateItemStockQty(int iItemId) {
		updateLookupButtonStockQty(iItemId);
	}
	
	@Override
	public int FuncCheck_getReceiptFormat() {
		int iChosenReceiptPfmtId = 0;
		
		// Get receipt format
		boolean bNotAllowPrintReceipt = isNotAllowPrintReceipt(false, true);
		
		// Set the Print Receipt Flag
		m_oFuncCheck.setNoNeedPrintReceipt(bNotAllowPrintReceipt);
		
		if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk) || !bNotAllowPrintReceipt) {
			if (AppGlobal.g_oFuncStation.get().getStation().getReceiptPrtqId() > 0) {
				iChosenReceiptPfmtId = selectReceiptFormat(true);
				if (iChosenReceiptPfmtId == 0) {
					exitCashier();
					return 0;
				}
			}
		}
		return iChosenReceiptPfmtId;
	}
	
	@Override
	public void FuncCheck_finishSendCheck(String sStoredProcessingCheckKey) {
		// Finish send check, remove process to stored processing check list
		this.removeProcessCheck(sStoredProcessingCheckKey);
	}
	
	@Override
	public void formCheckHistory_selectedRecordClicked(String sNote) {
		HashMap<String, String> oFunctionParams = new HashMap<String, String>();
		oFunctionParams.put("checkId", sNote);
		
		this.reprintReceipt(oFunctionParams);
	}
	
	@Override
	public void frameBasketExtendBar_DineInTakeoutClicked() {
		
		if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)) {
			return;
		}
		
		PosFunction oFunction = null;
		HashMap<String, String> oFunctionParams = new HashMap<String, String>();
		if (m_oFuncCheck.isTakeoutOrderingType()) {
			oFunction = m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.check_dine_in.name());
			oFunctionParams.put("askToConfirm", "true");
		} else {
			oFunction = m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.check_takeout.name());
			oFunctionParams.put("askToConfirm", "true");
		}
		
		fcnSwitch(oFunction.getFuncId(), "", -1, -1, false, oFunctionParams);
	}
	
	@Override
	public void frameTableFloorPlan_ShowAskTableScreen() {
		showAskTableScreen();
	}
	
	@Override
	public void formCheckListing_CheckListRecordClicked(int iPanelId, PosCheck oCheck, int iListingType) {
		if ((iListingType == FrameCheckListing.TYPE_NORMAL && iPanelId == FrameCheckListing.PANEL_OPEN_CHECK)
				|| iListingType == FrameCheckListing.TYPE_DAILY_CLOSE_OPEN_CHECK) {
			if (oCheck == null) // Click the section name, no response
				return;
			
			if (m_eOperationMode.equals(AppGlobal.OPERATION_MODE.fast_food)
					|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk)
					|| m_eOperationMode.equals(AppGlobal.OPERATION_MODE.bar_tab)) {
				// For fast food mode
				m_sTableNoForFastFoodMode = oCheck.getTable() + "";
				m_sTableExtensionForFastFoodMode = oCheck.getTableExtension();
				m_oFormCheckListing.clearCheckListPanelFrame();
			} else {
				if (openCheck(Integer.toString(oCheck.getTable()), oCheck.getTableExtension(), true, 0, false, false))
					m_oFormCheckListing.clearCheckListPanelFrame();
			}
		} else if ((iListingType == FrameCheckListing.TYPE_NORMAL || iListingType == FrameCheckListing.TYPE_PAST_DATE) &&
				(iPanelId == FrameCheckListing.PANEL_PAID_CHECK || iPanelId == FrameCheckListing.PANEL_PAID_CHECK_CURRENT_STATION)) {
			
			// Start preview check
			HashMap<String, String> oFunctionParams = new HashMap<String, String>();
			oFunctionParams.put("checkId", oCheck.getCheckId() + "");
			oFunctionParams.put("checkNo", oCheck.getCheckPrefixNo());
			oFunctionParams.put("tableNo", oCheck.getTable() + oCheck.getTableExtension());
			
			if(receiptPreview(oFunctionParams, iListingType == FrameCheckListing.TYPE_PAST_DATE)) {
				// Perform function, quit check listing function
				m_oFormCheckListing.clearCheckListPanelFrame();
				if (oFunctionParams.containsKey("adjustPaymentClick")
						&& oFunctionParams.get("adjustPaymentClick").equals("1"))
					m_oFormCheckListing.setAdjustPaymentClick(true);
			}
		} else if (iListingType == FrameCheckListing.TYPE_ACTIVE_CHECK) {
			m_oFormCheckListing.clearCheckListPanelFrame();
		}
	}
	
	@Override
	public void frameOrderingPanel_tabClicked() {
		frameOrderingMenuLookup_functionClicked("butClose");
	}
	
	@Override
	public void frameOrderingPanel_UpdateMenuItem() {
		boolean bNeedUpdateMenuItemList = false;
		
		String sUpdateMenuItemKey = AppBackgroundScheduleJob.TYPE_UPDATE_MENU_ITEM + "_" + AppGlobal.g_oFuncMenu.get().hashCode();
		if (AppGlobal.g_oScheduledJobList.containsKey(sUpdateMenuItemKey)
				&& !AppGlobal.g_oScheduledJobList.get(sUpdateMenuItemKey).isStop()
				&& AppGlobal.g_oScheduledJobList.get(sUpdateMenuItemKey).getNeedUpdate()) {
			AppGlobal.g_oScheduledJobList.get(sUpdateMenuItemKey).setNeedUpdate(false);
			
			bNeedUpdateMenuItemList = true;
		}
		
		boolean bNeedUpdateSoldoutItemList = false;
		HashMap<Integer, Boolean> oPrevSoldoutItemList = new HashMap<Integer, Boolean>();
		if (AppGlobal.g_bNotCheckStock == false && m_oFuncCheck != null) {
			// Get current active client to check if soldout status is required
			// to update or not
			ClsActiveClient oActiveClient = AppGlobal.getActiveClient(AppGlobal.g_oFuncStation.get().getAddress());
			if (oActiveClient != null) {
				if (oActiveClient.getNeedUpdateSoldoutStatus()) {
					bNeedUpdateSoldoutItemList = true;
					oActiveClient.setNeedUpdateSoldoutStatus(false);
				}
			}
			
			if (bNeedUpdateSoldoutItemList) {
				// store soldout items before update menu stock list
				for (PosOutletItem oPosOutletItem : m_oFuncCheck.getItemStockList()) {
					if (oPosOutletItem.isSoldout())
						oPrevSoldoutItemList.put(oPosOutletItem.getItemId(), false);
				}
			}
		}
		
		if (!bNeedUpdateMenuItemList && !bNeedUpdateSoldoutItemList)
			return;
		
		// *****************************************************************
		// Create thread to load detail
		AppThreadManager oAppThreadManager = new AppThreadManager();
		
		if (bNeedUpdateMenuItemList) {
			// Thread 1 : Update menu item from database
			FuncMenu oFuncMenu = AppGlobal.g_oFuncMenu.get();
			oAppThreadManager.addThread(1, oFuncMenu, "updateAllStoredMenuItemList", null);
		}
		
		if (bNeedUpdateSoldoutItemList) {
			// Thread 2 : Update menu stock list
			Object[] oParameters = new Object[3];
			oParameters[0] = AppGlobal.g_oFuncOutlet.get().getOutletId();
			oParameters[1] = PosOutletItem.CHECK_STOCK_YES;
			oParameters[2] = PosOutletItem.SOLDOUT_YES;
			oAppThreadManager.addThread(2, m_oFuncCheck, "getCurrentItemStockList", oParameters);
		}
		
		// Run all of the threads
		oAppThreadManager.runThread();
		
		// Wait for the thread to finish
		oAppThreadManager.waitForThread();
		
		if (bNeedUpdateMenuItemList) {
			ArrayList<MenuItem> updateMenuItemList = (ArrayList<MenuItem>) oAppThreadManager.getResult(1);
			
			// Update panel button price
			boolean bOrderingPanelShowPrice = AppGlobal.g_oFuncStation.get().getOrderingPanelShowPrice();
			if (bOrderingPanelShowPrice) {
				for (MenuItem oMenuItem : updateMenuItemList) {
					String sItemPriceDisplay = "";
					if (oMenuItem.getBasicPriceByPriceLevel(AppGlobal.g_oFuncOutlet.get().getPriceLevel()) != null)
						sItemPriceDisplay = AppGlobal.g_oFuncOutlet.get().getCurrencySign() + StringLib.BigDecimalToString(
								oMenuItem.getBasicPriceByPriceLevel(AppGlobal.g_oFuncOutlet.get().getPriceLevel()),
								AppGlobal.g_oFuncOutlet.get().getItemRoundDecimal());
					
					m_oFrameOrderingPanel.setItemPrice(oMenuItem.getItemId(), sItemPriceDisplay);
				}
			}
		}
		
		if (bNeedUpdateSoldoutItemList) {
			// Update panel button stock qty / soldout
			for (PosOutletItem oPosOutletItem : m_oFuncCheck.getItemStockList()) {
				if (oPrevSoldoutItemList.containsKey(oPosOutletItem.getItemId())) {
					// The item is soldout before, no need to update
					
					// Set the flag to true
					oPrevSoldoutItemList.put(oPosOutletItem.getItemId(), true);
					if (!oPosOutletItem.isSoldout()) {// item is soldout before,
						// becomes in sell now,
						// need to update stock
						// quantity
						// use updateLookupButtonStockQty() instead of
						// initPanelLookupButtonsStockQtyList(), to make the
						// update in menu lookup and set menu lookup work
						this.updateLookupButtonStockQty(oPosOutletItem.getItemId());
					}
				} else {
					// New item to be soldout, need to update
					if (oPosOutletItem.isSoldout()) {// item in getItemStockList
						// can either soldout or
						// has check stock, need
						// to check its soldout
						// status
						// use updateLookupButtonStockQty() instead of
						// initPanelLookupButtonsStockQtyList(), to make the
						// update in menu lookup and set menu lookup work
						this.updateLookupButtonStockQty(oPosOutletItem.getItemId());
					} else
						m_oFrameOrderingPanel.initPanelLookupButtonsStockQtyList(oPosOutletItem.getItemId(),
								oPosOutletItem.getStockQty());
				}
			}
			for (Entry<Integer, Boolean> entry : oPrevSoldoutItemList.entrySet()) {
				// Item is not soldout now and the flag is not set, need to
				// update
				if (entry.getValue() == false)
					m_oFrameOrderingPanel.removeItemStockQty(entry.getKey());
			}
		}
	}
	
	@Override
	public boolean frameOrderingPanel_OrderingTimeout() {
		if (isOrderingTimeout()) {
			// Stop the timer
			setOrderingTimeoutChecking(false);
			
			if (AppGlobal.g_oFuncStation.get()
					.getOrderingTimeoutOption() == FuncStation.ORDERING_TIMEOUT_OPTION_QUIT_CHECK_DIRECTLY
					&& m_oFuncCheck != null) {
				orderingTimeoutQuitCheck();
				
				return true;
			}
			
			// Show the option
			FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("continue_process"),
					AppGlobal.g_oLang.get()._("new_order"), this);
			oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
			oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("order_time_out_is_reached"));
			oFormConfirmBox.setTimeout(30 * 1000);
			oFormConfirmBox.setTimeoutChecking(true);
			oFormConfirmBox.show();
			
			if (oFormConfirmBox.isOKClicked())
				// Continue order and restart the ordering timeout
				setOrderingTimeoutChecking(true);
			else {
				// Begin new check
				if (m_oFuncCheck != null)
					orderingTimeoutQuitCheck();
			}
			oFormConfirmBox.setTimeoutChecking(false);
			
			return true;
		}
		
		return false;
	}
	
	@Override
	public boolean frameOrderingPanel_CashierTimeout() {
		if (isCashierTimeout()) {
			setCashierTimeoutChecking(false);
			
			if (AppGlobal.g_oFuncStation.get()
					.getOrderingTimeoutOption() == FuncStation.ORDERING_TIMEOUT_OPTION_QUIT_CHECK_DIRECTLY
					&& m_oFuncCheck != null) {
				
				if (m_oFrameDirectPaymentPanel.getVisible())
					// Hidden the direct payment panel
					m_oFrameDirectPaymentPanel.setVisible(false);
				
				exitCashier();
				orderingTimeoutQuitCheck();
				
				return true;
			}
			
			// Show the option
			FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("continue_process"),
					AppGlobal.g_oLang.get()._("new_order"), this);
			oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
			oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("order_time_out_is_reached"));
			oFormConfirmBox.setTimeout(30 * 1000);
			oFormConfirmBox.setTimeoutChecking(true);
			oFormConfirmBox.show();
			
			if (oFormConfirmBox.isOKClicked())
				// Continue order and restart the ordering timeout
				setCashierTimeoutChecking(true);
			else {
				if (m_oFrameDirectPaymentPanel.getVisible())
					// Hidden the direct payment panel
					m_oFrameDirectPaymentPanel.setVisible(false);
				
				exitCashier();
				// Begin new check
				if (m_oFuncCheck != null){
					orderingTimeoutQuitCheck();
				}
			}
			oFormConfirmBox.setTimeoutChecking(false);
			
			return true;
		}
		
		return false;
	}
	
	@Override
	public void formConfirmOrderDialog_Timeout(){
		setCashierTimeoutChecking(false);
		
		// Clear the remain auto function
		m_oRemainAutoFunctions.clear();
		
		exitCashier();
		orderingTimeoutQuitCheck();
		m_oFrameStationInfoBar.changeInfosPosition(667, 1280, false);
	}
	
	@Override
	public void framePanelItemSelectPanel_CancelClicked() {
		// Under use panel to select item for function mode
		if (m_bUsePanelToSelectItemMode == true) {
			m_oOpenSelectItemName.clear();
			m_iOpenSelectItemId = 0;
			int iFuncId = m_iUsePanelToSelectItemModeCurrentFuncId;
			
			// Quit the mode
			toggleUsePanelToSelectItemMode(false, false);
			
			m_oFramePanelItemSelectPanel.clearSelectedItemBasket();
			
			m_oSelectedSoldoutItemList.clear();
			if(m_oFrameOrderingPanel.getVisible())
				m_oFrameFuncPanel2.setVisible(true);
			
			if (iFuncId != 0)
				fcnSwitch(iFuncId, "", -1, -1, true, null);
			else if (m_oUsePanelToSelectItemParentItem != null) {
				int iSelectedSeatNo = m_oFrameOrderingBasket.getSelectedSectionId();
				int iParentItemIndex = m_oUsePanelToSelectItemParentItem.getCheckItem().getSeq() - 1;
				BigDecimal qty = new BigDecimal(m_oFuncCheck.getCheckItem(iSelectedSeatNo, iParentItemIndex)
						.getCheckItem().getQty().toPlainString());
				deleteItem(iSelectedSeatNo, iParentItemIndex, qty);
				if(!m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name()))
					m_oUsePanelToSelectItemParentItem = null;
			}
			
			if(m_oFrameSearchItem.getVisible())
				m_oFrameSearchItem.bringToTop();
			return;
		} else if (m_bUseCashierPanelToSelectPaymentMethod) {
			int iFuncId = m_iUsePanelToSelectItemModeCurrentFuncId;
			toggleUseCashierPanelToSelectPaymentMethod(false, false);
			// Use param to pass the user selection (Confirm / Cancel) to the
			// function
			HashMap<String, String> oFuncParam = new HashMap<String, String>();
			oFuncParam.put("confirm", "0");
			fcnSwitch(iFuncId, "", -1, -1, true, oFuncParam);
		}
	}
	
	@Override
	public void framePanelitemSelectPanel_ConfirmClicked() {
		if (m_bUsePanelToSelectItemMode == true) {
			toggleUsePanelToSelectItemMode(false, false);
			for (int i = 1; i <= 5; i++)
				m_oOpenSelectItemName.put(i, "");
			
			// Store selected item
			for (Integer iId : m_oFramePanelItemSelectPanel.getSelectedItemList()) {
				if(m_oFramePanelItemSelectPanel.getStockSoldOut())
					m_oSelectedSoldoutItemList.add(iId);
				for (int i = 1; i <= 5; i++) {
					if (m_oOpenSelectItemName.get(i).length() < 255) {
						if (m_oOpenSelectItemName.get(i).isEmpty())
							m_oOpenSelectItemName.put(i,
									AppGlobal.g_oFuncMenu.get().getFuncMenuItemByItemId(iId).getMenuItem().getName(i));
						else {
							m_oOpenSelectItemName.put(i, m_oOpenSelectItemName.get(i).concat(", "));
							m_oOpenSelectItemName.put(i, m_oOpenSelectItemName.get(i).concat(
									AppGlobal.g_oFuncMenu.get().getFuncMenuItemByItemId(iId).getMenuItem().getName(i)));
						}
					}
					if (m_oOpenSelectItemName.get(i).length() >= 255) // Trim name if length exceed 255 characters
						m_oOpenSelectItemName.get(i).substring(0, 254);
				}
			}
			
			// for item_input_name="p" (Use lookup to assemble item's name)
			if (m_iOpenSelectItemId > 0) {
				if (addItem(null, m_iOpenSelectItemId, new BigDecimal("1.0"), new BigDecimal("1.0"), false, false, true,
						AppGlobal.g_oFuncOutlet.get().getPriceLevel(), null) == true) {
					// Check if course is set.
					// If yes, auto-assign course to new order NORMAL item
					autoAssignCourseToNewOrderItem();
					
					// Add hot item success
					finishAddItem(false);
				}
			}
			
			// Hidden Common Basket
			m_oFramePanelItemSelectPanel.clearSelectedItemBasket();
			
			int iFuncId = m_iUsePanelToSelectItemModeCurrentFuncId;
			fcnSwitch(iFuncId, "", -1, -1, true, null);
			
			m_oOpenSelectItemName.clear();
			m_iOpenSelectItemId = 0;
			if(!m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name()))
				m_oUsePanelToSelectItemParentItem = null;
		} else if (m_bUseCashierPanelToSelectPaymentMethod) {
			int iFuncId = m_iUsePanelToSelectItemModeCurrentFuncId;
			toggleUseCashierPanelToSelectPaymentMethod(false, false);
			// Use param to pass the user selection (Confirm / Cancel) to the
			// function
			HashMap<String, String> oFuncParam = new HashMap<String, String>();
			oFuncParam.put("confirm", "1");
			fcnSwitch(iFuncId, "", -1, -1, true, oFuncParam);
		}
	}
	
	@Override
	public void frameSearchItem_exitClicked() {
		m_oFrameSearchItem.setVisible(false);
		m_oFrameSearchItemOnWastageOperation.setVisible(false);
		m_sCurrentFunctionKey = "";
	}
	
	@Override
	public void frameSearchItem_addItem(int iItemId) {
		this.addHotItem(iItemId, m_dQty, false);
	}
	
	@Override
	public void FrameDirectPaymentPanel_finishAskAmount(BigDecimal dCurrentPaymentAmount,
	                                                    BigDecimal dCurrentTipsAmount) {
		// Hidden the direct payment panel
		m_oFrameDirectPaymentPanel.setVisible(false);
		
		if (m_oFrameCashier.getCurrentStep() > 0) {
			// Finish asking amount, edit the payment amount stored in
			// PosCheckPayment list of FuncPayment
			try {
				AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "", AppGlobal.g_oFuncUser.get().getUserId() + "",
						"Select payment: " + m_oFuncPayment.getPaymentMethodName(m_oFuncPayment.getCheckPaymentList().size() - 1, 1) + " $" + dCurrentPaymentAmount.toPlainString());
			} catch (Exception e) {}
			
			this.editPayment(0, m_oFuncPayment.getCheckPaymentList().size() - 1, dCurrentPaymentAmount,
					dCurrentTipsAmount, false);
		} else {
			// *** ERROR
			// May be caused by fast double click confirm
			AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(),
					"Double click ENTER in direct payment panel - " + m_oFrameCashier.getCurrentStep());
		}
		
		m_oFrameCashier.setCurrentStep(0);
		
		if (AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name())
				&& m_oFrameOpenTable != null)
			this.showCashierScreen(false, false);
	}
	
	@Override
	public boolean FrameDirectPaymentPanel_askTipsConfirmation(BigDecimal dCurrentPaymentAmount,
	                                                           BigDecimal dCurrentTipsAmount) {
		BigDecimal dCheckAmount = dCurrentPaymentAmount.multiply(new BigDecimal("0.5"));
		if (dCurrentTipsAmount.abs().compareTo(dCheckAmount.abs()) > 0) {
			// Tips amount > 0.5 x payment amount
			// Ask if confirm
			FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"),
					AppGlobal.g_oLang.get()._("no"), this);
			oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
			oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("tips_is_greater_than_half_of_the_payment") + ", "
					+ AppGlobal.g_oLang.get()._("continue") + "?");
			oFormConfirmBox.show();
			if (oFormConfirmBox.isOKClicked() == false)
				return false;
		}
		
		return true;
	}
	
	@Override
	public void FrameDirectPaymentPanel_updateCashierHeader(boolean bAdd, String sSurcharge, BigDecimal dPaymentAmt, BigDecimal dTipsAmt) {
		Integer iDecimal = AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal();
		if (AppGlobal.g_oFuncOutlet.get().getCheckRoundDecimal() > AppGlobal.g_oFuncOutlet.get()
				.getPayRoundDecimal())
			iDecimal = AppGlobal.g_oFuncOutlet.get().getCheckRoundDecimal();
		
		
		BigDecimal dSurcharge = new BigDecimal(sSurcharge);
		BigDecimal dCurrentSurcharge = m_oFuncPayment.getSurchargeTotal().add(dSurcharge);
		BigDecimal dCurrentTotalDue = m_oFuncPayment.getTotalDue().add(dPaymentAmt).add(dSurcharge).add(dTipsAmt);
		
		m_oFrameCashier.setSurcharge(StringLib.BigDecimalToString(dCurrentSurcharge,
				iDecimal));
		m_oFrameCashier.setTotalDue(StringLib.BigDecimalToString(dCurrentTotalDue,
				iDecimal));
	}
	
	@Override
	public void FrameDirectPaymentPanel_cancel() {
		// Hidden the direct payment panel
		m_oFrameDirectPaymentPanel.setVisible(false);
		
		// Check if there is the first payment
		// if yes, cancel the cashier mode
		if (m_oFuncPayment.getCheckPaymentList().size() == 1) {
			// Exit cashier mode
			exitCashier();
		} else {
			// Cancel payment
			deletePaymentInCashierMode(m_oFuncPayment.getCheckPaymentList().size() - 1, true);
		}
	}
	
	@Override
	public void frameTableFloorPlan_TimeInOut() {
		if (m_oFrameFloorPlanFunctionPanel.getVisible()) {
			m_oFrameFloorPlanFunctionPanel.setVisible(false);
			this.m_oFrameTableFloorPlan.showOpenFunctionPanel(false);
		}
		
		fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.user_time_in_out.name()), "", -1, -1, true, null);
	}
	
	@Override
	public void formSplitTable_printCheck(List<FuncCheck> oUpdateCheckList) {
		for (FuncCheck oFuncCheck : oUpdateCheckList) {
			HashMap<String, Integer> oCheckPrintFormatInfo = null;
			oCheckPrintFormatInfo = selectCheckPrintFormat(false, false, false);
			if (oCheckPrintFormatInfo.get("result") > 0) {
				int iChosenCheckPfmtId = oCheckPrintFormatInfo.get("pfmtId");
				
				HashMap<String, String> oSelectedPaytypeInfo = selectPaymentInterfacePaytype();
				if (oSelectedPaytypeInfo != null && !oSelectedPaytypeInfo.get("paytype").equals("0")) {
					oFuncCheck.addExtraInfoForPaymentInterface(oSelectedPaytypeInfo);
				}
				
				if (oFuncCheck.havePendingItems()) {
					this.showAttentionDialogBox(AppGlobal.g_oLang.get()._("cannot_print_check_with_pending_items"));
				}
//Save Check(Print Check for split table)
				else {
					if (oFuncCheck.printCheck(false, true, AppGlobal.g_oFuncUser.get().getUserId(),
							AppGlobal.g_oFuncStation.get().getStationId(),
							AppGlobal.g_oFuncStation.get().getCheckPrtqId(), iChosenCheckPfmtId, false,
							AppGlobal.g_oFuncOutlet.get().getOutletNameByIndex(AppGlobal.g_oCurrentLangIndex.get()),
							false, 0, "", true, false, false)) {
						// surveillance event: SaveCheck
						HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
						oSurveillanceEventInfo.put("checkNum", oFuncCheck.getCheckPrefixNo());
						this.doSurveillanceEvent(FuncSurveillance.SURVEILLANCE_TYPE_SAVE_CHECK, oSurveillanceEventInfo);
					}
				}
			}
		}
	}
	
	@Override
	public void frameTabBar_tabClicked(int iTabIndex) {
		m_oFrameOrderingPanel.closeMenuLookup();
		if (iTabIndex == 0) {
			// Ordering basket
			m_oFrameOrderingPanel.setVisible(false);
			m_oFrameFuncPanel2.setVisible(false);
			m_oFrameSeatPanel.setVisible(false);
			
			int iExtendedHeight = (m_oFrameBasketExtendBar.checkBasketExtended()) ? 80 : 0;
			m_oFrameOrderingBasket.setHeight(545 + iExtendedHeight);
			m_oFrameOrderingBasket.setBasketHeight(545 + iExtendedHeight);
			if(m_sCurrentOrderingBasketMode.equals(FrameOrderingBasket.ORDERING_BASKET_MODE_SHOW_NORMAL))
				m_oFrameOrderingBasket.setVisible(true);
			else
				m_oFrameConsolidateItemsOrderingBasket.setVisible(true);
			
			m_oFrameBasketExtendBar.setTop(m_oFrameOrderingBasket.getTop() + m_oFrameOrderingBasket.getHeight());
			
			m_oFrameFuncPanel2.setVisible(!m_oFrameBasketExtendBar.checkBasketExtended());
			m_oFrameFuncPanel2.setTop(m_oFrameBasketExtendBar.getTop() + m_oFrameBasketExtendBar.getHeight());
			m_oFrameFuncPanel2.setHeight(m_oFrameBasketExtendBar.checkBasketExtended() ? 0 : 80);
			
		} else if (iTabIndex == 1) {
			// Menu view
			m_oFrameFuncPanel2.setVisible(false);
			if(m_sCurrentOrderingBasketMode.equals(FrameOrderingBasket.ORDERING_BASKET_MODE_SHOW_NORMAL))
				m_oFrameOrderingBasket.setVisible(true);
			else
				m_oFrameConsolidateItemsOrderingBasket.setVisible(true);
			m_oFrameOrderingBasket.minimizeBasket(m_oFrameOrderingBasket.getHeight() - 60);
			m_oFrameOrderingBasket.setHeight(60);
			m_oFrameOrderingBasket.moveScrollToBottom();
			
			m_oFrameOrderingPanel.setVisible(true);
			m_oFrameOrderingPanel.bringToTop();
			m_oFrameFuncPanel2.setVisible(false);
			m_oFrameSeatPanel.setVisible(true);
			
			m_oFrameBasketExtendBar.setTop(m_oFrameSeatPanel.getTop() + m_oFrameSeatPanel.getHeight());
		} else if (iTabIndex == 2) {
			// Function view
			m_oFrameOrderingBasket.setVisible(false);
			m_oFrameConsolidateItemsOrderingBasket.setVisible(false);
			m_oFrameOrderingPanel.setVisible(false);
			m_oFrameFuncPanel2.setVisible(false);
			m_oFrameSeatPanel.setVisible(false);
			
			int iFuncPanel2Height = m_oFrameCover.getHeight() - m_oFrameCheckDetail.getHeight()
					- m_oFrameBasketExtendBar.getHeight() - m_oFrameTabBar.getHeight();
			m_oFrameFuncPanel2.setTop(m_oFrameCheckDetail.getHeight());
			m_oFrameFuncPanel2.setHeight(iFuncPanel2Height);
			m_oFrameFuncPanel2.setVisible(true);
			
			m_oFrameBasketExtendBar.setTop(m_oFrameFuncPanel2.getTop() + m_oFrameFuncPanel2.getHeight());
		}
	}
	
	@Override
	public boolean FrameOpenTable_openTable(String sTableNo, String sTableExtension) {
		m_oFrameOpenTable.selectTableExtensionButton("");
		if (!checkValidIntegerValue(sTableNo))
			return false;
		return frameTableFloorPlan_TableClicked(sTableNo, sTableExtension, false);
	}
	
	@Override
	public void FrameOpenTable_showTableFunction(String sTableNo, String sTableExtension) {
		showTableFunction(sTableNo, sTableExtension, false);
	}
	
	@Override
	public void FrameOpenTable_logout() {
		fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.switch_user.name()), "", 0, 0, true, null);
	}
	
	@Override
	public void FrameOpenTable_close() {
		
		m_oFrameCover.setVisible(false);
		
		ClsActiveClient oActiveClient = AppGlobal.getActiveClient();
		oActiveClient.getSwipeCardReaderElement().setValueChangedServerRequestNote(FuncMSR.FRAME_SWIPE_CARD_DEFAULT);
		AppGlobal.g_oFuncStation.get().setOpenTableScreenMode(FuncStation.OPEN_TABLE_SCREEN_MODE_FLOOR_PLAN);
	}
	
	@Override
	public void FrameOpenTable_switchKeyboard() {
		m_oFrameOpenTableWithQwertyKeyboard.setVisible(true);
		m_oFrameOpenTableWithQwertyKeyboard.setFocusOnTxtBox();
		m_oFrameOpenTableWithQwertyKeyboard.bringToTop();
		AppGlobal.g_oFuncStation.get().setOpenTableScreenKeyboard(FuncStation.OPEN_TABLE_SCREEN_KEYBOARD_QWERTY);
		ClsActiveClient oActiveClient = AppGlobal.getActiveClient();
		oActiveClient.getSwipeCardReaderElement()
				.setValueChangedServerRequestNote(FuncMSR.FRAME_SWIPE_CARD_OPENTABLE_QWERTY);
	}
	
	@Override
	public void frameSelfOrderKiosk_newOrder() {
		// Check business hour warning
		if (!crossDateOpenCheckChecking()) {
			// Force exit
			quitCheck(true);
			
			logout(true);
			
			return;
		}
		
		// Pre-process before open check
		openCheckPreProcess(0, "");
		// Set The Station Infomation Bar Width
		if(AppGlobal.g_oFuncStation.get().getStationDevice().isSelfOrderKiosk() && AppGlobal.g_oFuncStation.get().isHideCheckDetailBar())
			m_oFrameStationInfoBar.changeInfosPosition(667, 1280, true);
		else
			m_oFrameStationInfoBar.changeInfosPosition(230, 830, false);
		
		// Back to first page every new order in kiosk mode
		m_oFrameOrderingPanel.showDisplayPanelAtPage(1);
		m_oFuncCheck.setCheckOpenTimeValue(AppGlobal.g_oFuncOutlet.get().getOutletId(), false, 0);
		m_oFrameSelfOrderKiosk.setVisible(false);
		
		if(!(AppGlobal.g_oFuncStation.get().getStationDevice().isSelfOrderKiosk() && AppGlobal.g_oFuncStation.get().isHideCheckDetailBar()))
			m_oFrameCheckDetail.setVisible(true);
		
		// do auto function during open new check & call from ordering panel
		JSONArray oCheckAutoFunctionsJSONArray = AppGlobal.g_oFuncStation.get().getCheckAutoFunctions();
		prepareAutoFunctionList(oCheckAutoFunctionsJSONArray);
		performAutoFunction();
		
		// Start ordering timeout timer
		setOrderingTimeoutChecking(true);
		
		//show blocked frame
		if(AppGlobal.getActiveClient().isShowBlockedFrame()) {
			m_oFrameAlertMessageBox.setMessage(AppGlobal.g_oLang.get()._("do_not_use_this_station")
					+ System.lineSeparator() + AppGlobal.g_oLang.get()._("please_check_printer_queue_status_first"));
			m_oFrameAlertMessageBox.setVisible(true);
			m_oFrameAlertMessageBox.bringToTop();
		}
	}
	
	@Override
	public void frameSelfOrderKiosk_quitPayResult(int iQuitMode) {
		// Hidden the cover frame
		m_oFrameCover.setVisible(false);
		
		if (iQuitMode == 1 || iQuitMode == 3)
			exitCashier();
		else {
			m_oFrameDirectPaymentResult.setVisible(false);
			// Clear Octopus Display
			if (AppGlobal.OPERATION_MODE.fine_dining.equals(m_eOperationMode)
					|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode)) {
				m_oFrameSelfOrderKiosk.setVisible(false);
				if (AppGlobal.OPERATION_MODE.fine_dining.equals(m_eOperationMode))
					showTableFloorPlanScreen(true);
			} else
				quitCheck(false);
		}
	}
	
	@Override
	public void frameSelfOrderKiosk_changeLanguage() {
		PosFunction oFunction = new PosFunction();
		oFunction = m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.change_language.name());
		fcnSwitch(oFunction.getFuncId(), "", -1, -1, false, null);
	}
	
	@Override
	public void frameTableFloorPlan_FunctionBarOpenPanelClicked() {
		this.functionBarOpenPanelClicked();
	}
	
	@Override
	public void frameTableFloorPlan_FunctionBarButtonClicked(String sNote) {
		this.functionBarButtonClicked(sNote);
	}
	
	@Override
	public void FormLogin_clickTimeInOut() {
		fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.user_time_in_out.name()), "", -1, -1, false, null);
	}
	
	@Override
	public void frameSetMenuLookup_updateButtonsStockQty(HashMap<Integer, Integer> oItemIndexIdPairs) {
		FuncCheck oFuncCheck = new FuncCheck();
		if (m_bStockOperationSetMenu == true || m_oFuncCheck == null)
			oFuncCheck.setItemStockList(m_oFrameSetMenu.getItemStockList());
		else
			oFuncCheck = m_oFuncCheck;
		// Get item stock quantities and update item stock qty label in set menu
		for (Entry<Integer, Integer> entry : oItemIndexIdPairs.entrySet()) {
			int iItemId = entry.getValue();
			if (oFuncCheck.getItemStockQty(iItemId) == null)
				continue;
			BigDecimal dStockQty = null;
			if (!oFuncCheck.isSoldout(iItemId))
				dStockQty = oFuncCheck.getItemStockQty(iItemId);
			
			m_oFrameSetMenu.setSetMenuItemStockQty(entry.getKey(), dStockQty);
		}
	}
	
	@Override
	public void frameOrderingMenuLookup_updateButtonsStockQty(HashMap<Integer, Integer> oItemIdList) {
		if (m_oFuncCheck == null)
			return;
		
		// Get item stock quantities and update item stock qty label in ordering
		// menu lookup
		for (Entry<Integer, Integer> entry : oItemIdList.entrySet()) {
			int iItemId = entry.getValue();
			if (m_oFuncCheck.getItemStockQty(iItemId) == null)
				continue;
			
			BigDecimal dStockQty = null;
			if (!m_oFuncCheck.isSoldout(iItemId))
				dStockQty = m_oFuncCheck.getItemStockQty(iItemId);
			
			m_oFrameOrderingMenuLookup.setItemStockQty(entry.getKey(), dStockQty);
		}
	}
	
	@Override
	public void frameItemRemind_exitClicked() {
		m_oFrameItemRemind.setVisible(false);
	}
	
	@Override
	public void frameItemRemind_addItem(int iItemId) {
		this.addHotItem(iItemId, m_dQty, false);
	}
	
	@Override
	public void frameItemRemind_sendCheck(String sFunctionKey, String sStatus) {
		m_oFrameItemRemind.setVisible(false);
		
		if (sStatus.equals(FrameItemRemind.STATUS_SUGGEST)) {
			// suggest means users are allowed to send check directly
			if (sFunctionKey.equals(AppGlobal.FUNC_LIST.print_check.name()))
				sendCheck(true, false, false, true, false, 0, false, 0);
			else if (sFunctionKey.equals(AppGlobal.FUNC_LIST.send_check.name()))
				sendCheck(false, false, false, true, false, 0, false, 0);
			else if (sFunctionKey.equals(AppGlobal.FUNC_LIST.print_and_paid.name()))
				printAndPaid();
		} else if (sStatus.equals(FrameItemRemind.STATUS_FORCE))
			fcnSwitch(m_oFunctionList.getFunctionIdByKey(sFunctionKey), "", -1, -1, false, null);
	}
	
	@Override
	public void FrameOpenTableWithQwertyKeyboard_openTable(String sTableNo, String sTableExtension) {
		frameTableFloorPlan_TableClicked(sTableNo, sTableExtension, false);
		if (!AppGlobal.g_oFuncStation.get().getTableValidationMsrCode().isEmpty()) {
			ClsActiveClient oActiveClient = AppGlobal.getActiveClient();
			oActiveClient.getSwipeCardReaderElement()
					.setValueChangedServerRequestNote(FuncMSR.FRAME_SWIPE_CARD_DEFAULT);
		}
	}
	
	@Override
	public void FrameOpenTableWithQwertyKeyboard_showTableFunction(String sTableNo, String sTableExtension) {
		showTableFunction(sTableNo, sTableExtension, false);
	}
	
	@Override
	public void FrameOpenTableWithQwertyKeyboard_switchKeyboard() {
		m_oFrameOpenTable.setVisible(true);
		m_oFrameOpenTable.setFocusOnTxtBox();
		m_oFrameOpenTable.bringToTop();
		AppGlobal.g_oFuncStation.get().setOpenTableScreenKeyboard(FuncStation.OPEN_TABLE_SCREEN_KEYBOARD_NUMBER);
		ClsActiveClient oActiveClient = AppGlobal.getActiveClient();
		oActiveClient.getSwipeCardReaderElement().setValueChangedServerRequestNote(FuncMSR.FRAME_SWIPE_CARD_OPENTABLE);
	}
	
	@Override
	public void FrameOpenTableWithQwertyKeyboard_logout() {
		fcnSwitch(m_oFunctionList.getFunctionIdByKey(AppGlobal.FUNC_LIST.switch_user.name()), "", 0, 0, true, null);
	}
	
	@Override
	public void FrameOpenTableWithQwertyKeyboard_close() {
		m_oFrameCover.setVisible(false);
		ClsActiveClient oActiveClient = AppGlobal.getActiveClient();
		oActiveClient.getSwipeCardReaderElement().setValueChangedServerRequestNote(FuncMSR.FRAME_SWIPE_CARD_DEFAULT);
		AppGlobal.g_oFuncStation.get().setOpenTableScreenMode(FuncStation.OPEN_TABLE_SCREEN_MODE_FLOOR_PLAN);
	}
	
	@Override
	public boolean FuncCheck_creditCardSpectraVoidPayment(PosCheckPayment oCheckPayment, String sCreditCardMethodType,
	                                                      boolean bIsFirstPosting) {
		boolean bSuccess = false;
		if(m_oFuncCreditCardOperation.getModelType().equals(FuncCreditCardOperation.TYPE_MODEL_CTBC))
			// CTBC type not handle void request
			bSuccess = true;
		return bSuccess;
	}
	
	@Override
	public boolean FuncCheck_creditCardSpectraAdjustTips(String sTraceNo, BigDecimal oNewPayTotal, BigDecimal oNewTips,
	                                                     boolean bIsFirstPosting) {
		m_oFuncCreditCardOperation.readSetup();
		if (m_oFuncCreditCardOperation.isSupportSpectraCreditCard() == false) {
			this.showErrorDialogBox(AppGlobal.g_oLang.get()._("not_support_online_credit_card"));
			return false;
		}
		
		if (!bIsFirstPosting)
			this.showAttentionDialogBox(AppGlobal.g_oLang.get()._("press_ok_to_complete_the_last_online_credit_card_payment_posting"));
		
		FormCreditCardOperation oFormCreditCardOperation = new FormCreditCardOperation(m_oFuncCreditCardOperation,
				null);
		oFormCreditCardOperation.initForAdjustTips(sTraceNo,
				StringLib.BigDecimalToString(oNewTips, AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal()));
		String sPassword = m_oFuncCreditCardOperation.getAdjustTipsPassword();
		sPassword = String.format("%-6s", sPassword);
		oFormCreditCardOperation.onlineCreditCardSpectraAdjustTips(sTraceNo, sPassword, oNewPayTotal.add(oNewTips),
				oNewTips);
		oFormCreditCardOperation.show();
		
		// Get the result
		if (!oFormCreditCardOperation.isProcessSuccess()) {
			AppGlobal.writeErrorLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(),
					AppGlobal.g_oFuncStation.get().getStationId() + "", "",
					"Fail to adjust spectra credit card tips, process to next payment.");
			return false;
		}
		
		return true;
	}
	
	@Override
	public boolean FuncCheck_creditCardSpectraDccOptOut(String sChksCheckPrefixNum, String sTraceNum,
	                                                    JSONObject oRefDataJSONObject, boolean bIsFirstPosting) {
		m_oFuncCreditCardOperation.readSetup();
		if (m_oFuncCreditCardOperation.isSupportSpectraCreditCard() == false) {
			this.showErrorDialogBox(AppGlobal.g_oLang.get()._("not_support_online_credit_card"));
			return false;
		}
		
		if (!bIsFirstPosting)
			this.showAttentionDialogBox(AppGlobal.g_oLang.get()._("press_ok_to_complete_the_last_online_credit_card_payment_posting"));
		
		
		FormCreditCardOperation oFormCreditCardOperation = new FormCreditCardOperation(m_oFuncCreditCardOperation,
				null);
		oFormCreditCardOperation.initForDccOptOut();
		String sPassword = m_oFuncCreditCardOperation.getAdjustRequestPassword();
		sPassword = String.format("%-6s", sPassword);
		
		oFormCreditCardOperation.onlineCreditCardSpectraDccOptOut(sChksCheckPrefixNum, sTraceNum, sPassword);
		oFormCreditCardOperation.show();
		
		// Get the result
		if (!oFormCreditCardOperation.isProcessSuccess()) {
			AppGlobal.writeErrorLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(),
					AppGlobal.g_oFuncStation.get().getStationId() + "", "",
					"Fail to spectra credit card dcc opt out, process to next payment.");
			return false;
		} else {
			// Retrieve the result to save to payment
			try {
				oRefDataJSONObject.put("terminal_number", m_oFuncCreditCardOperation.getTerminalNumber());
				oRefDataJSONObject.put("merchant_number", m_oFuncCreditCardOperation.getMerchantNumber());
				oRefDataJSONObject.put("batch_number", m_oFuncCreditCardOperation.getBatchNumber());
				oRefDataJSONObject.put("refernece", m_oFuncCreditCardOperation.getReferenceNumber());
			} catch (JSONException jsone) {
				jsone.printStackTrace();
				AppGlobal.stack2Log(jsone);
			}
		}
		
		return true;
	}
	
	@Override
	public void FrameEnterItemPLU_clickOK(boolean clientValueCleared) {
		String sItemCode = null;
		BigDecimal dQuantity = BigDecimal.ZERO;
		String sErrMsg = "";
		
		sItemCode = m_oFrameEnterItemPLU.getItemCode();
		sItemCode = sItemCode.replace("\r", "").replace("\n", "");
		if (sItemCode == null || sItemCode.isEmpty())
			return;
		
		try {
			dQuantity = new BigDecimal(m_oFrameEnterItemPLU.getQuantity());
			dQuantity = dQuantity.setScale(0, RoundingMode.UNNECESSARY);
		} catch (Exception e) {
			dQuantity = BigDecimal.ZERO;
		}
		
		if (dQuantity.equals(BigDecimal.ZERO) || dQuantity.compareTo(BigDecimal.ZERO) < 0) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("quantity_must_be_larger_than_zero"));
			return;
		}
		
		sErrMsg = addItemByItemCode(sItemCode, dQuantity, null, null, null);
		if (!sErrMsg.equals("")) {
			showErrorDialogBox(sErrMsg);
			return;
		}
		
		// Check if the item is set menu
		if (m_oFrameSetMenu != null) {
			m_sCurrentFunctionKey = AppGlobal.FUNC_LIST.add_item_by_code.name();
			// Hide the keyboard
			AppGlobal.g_oTerm.get().hideKeyboard();
		}
		
		// Clear value
		if (!clientValueCleared)
			m_oFrameEnterItemPLU.resetScreen();
	}
	
	@Override
	public void FrameEnterItemPLU_clickCancel() {
		m_oTemplateBuilder.buildFrame(m_oFrameCover, "fraCoverFrame");
		m_oFrameCover.setVisible(false);
		m_oFrameEnterItemPLU.setVisible(false);
		
		// Hide the keyboard
		AppGlobal.g_oTerm.get().hideKeyboard();
	}
	
	@Override
	public void FrameEnterItemPLU_swipeCard(String sSwipeCardValue) {
	
	}
	
	@Override
	public void FuncCheck_updateProcessingCheckInfo(String sStoredProcessingCheckKey, JSONObject oSendJSONRequest) {
		// Update JSONOBject content which set in sendCheck in
		// m_oProcessingSendChecks, previous is null value
		// only update the content which is null
		if (m_oProcessingSendChecks.containsKey(sStoredProcessingCheckKey)
				&& m_oProcessingSendChecks.get(sStoredProcessingCheckKey).oCheckJSONObject == null) {
			ProcessingCheckInfo oTempProcessingCheckInfo = m_oProcessingSendChecks.get(sStoredProcessingCheckKey);
			oTempProcessingCheckInfo.oCheckJSONObject = oSendJSONRequest;
			m_oProcessingSendChecks.put(sStoredProcessingCheckKey, oTempProcessingCheckInfo);
		}
	}
	
	@Override
	public boolean formPaymentCardAuthorization_ClickTransferAuthorization(String sAuthorizationType, PosPaymentGatewayTransactions oSelectedTopupPaymentGatewayTranscation, PosInterfaceConfig m_oPosInterfaceConfig) {
		// Add log to action log list
		AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.check_listing.name(), PosActionLog.ACTION_RESULT_SUCCESS, "", AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId() , AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "", "");
		//handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
		m_oFormCheckListing = new FormCheckListing(this, m_eOperationMode);
		m_oFormCheckListing.init(null, FrameCheckListing.TYPE_ACTIVE_CHECK);
		m_oFormCheckListing.addListener(this);
		m_oFormCheckListing.show();
		
		//if the User has select check
		if(m_oFormCheckListing.getSelectedPosCheck() != null && !m_oFormCheckListing.getSelectedPosCheck().getCheckId().isEmpty()){
			
			FormListMessageBox oFormListMessageBox = new FormListMessageBox(true, AppGlobal.g_oLang.get()._("ok"), this);
			oFormListMessageBox.setTitle(AppGlobal.g_oLang.get()._("transfer_information"));
			oFormListMessageBox.addColumnHeader(AppGlobal.g_oLang.get()._("general_information"), 300);
			oFormListMessageBox.addColumnHeader(AppGlobal.g_oLang.get()._("value"), 300);
			
			ArrayList<String> sMessageArray = new ArrayList<>();
			
			//card number (PAN)
			sMessageArray = new ArrayList<>();
			sMessageArray.add(AppGlobal.g_oLang.get()._("card_number"));
			sMessageArray.add(oSelectedTopupPaymentGatewayTranscation.getMaskedPan());
			oFormListMessageBox.addMessage(sMessageArray);
			
			// Calculate the total authorization amount
			BigDecimal dTotalAuthorziationAmount= oSelectedTopupPaymentGatewayTranscation.getAmount();
			for(PosPaymentGatewayTransactions oPosPaymentGatewayTransactions : m_oFuncCheck.getPosPaymentGatewayTransactionsLists().getPosPaymentGatewayTransactionsList()){
				if(oPosPaymentGatewayTransactions.getType().equals(PosPaymentGatewayTransactions.TYPE_TOPUP_AUTH) && m_oPosInterfaceConfig.getInterfaceId() == oPosPaymentGatewayTransactions.getIntfId()
						&& oPosPaymentGatewayTransactions.getParentAuthCode().equals(oSelectedTopupPaymentGatewayTranscation.getAuthCode())){
					dTotalAuthorziationAmount = dTotalAuthorziationAmount.add(oPosPaymentGatewayTransactions.getAmount());
				}
			}
			
			//auth amount
			sMessageArray = new ArrayList<>();
			sMessageArray.add(AppGlobal.g_oLang.get()._("authorization_amount"));
			sMessageArray.add(AppGlobal.g_oFuncOutlet.get().getCurrencySign() + dTotalAuthorziationAmount);
			oFormListMessageBox.addMessage(sMessageArray);
			
			//Transfer to check
			sMessageArray = new ArrayList<>();
			sMessageArray.add(AppGlobal.g_oLang.get()._("transfer_to_check_no"));
			sMessageArray.add(m_oFormCheckListing.getSelectedPosCheck().getCheckPrefixNo());
			oFormListMessageBox.addMessage(sMessageArray);
			
			//table
			sMessageArray = new ArrayList<>();
			sMessageArray.add(AppGlobal.g_oLang.get()._("transfer_to_table"));
			sMessageArray.add(m_oFormCheckListing.getSelectedPosCheck().getTable() + m_oFormCheckListing.getSelectedPosCheck().getTableExtension());
			oFormListMessageBox.addMessage(sMessageArray);
			oFormListMessageBox.show();
			oFormListMessageBox = null;
			
			FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"), AppGlobal.g_oLang.get()._("no"), this);
			oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("confirmation"));
			oFormConfirmBox.setMessage( AppGlobal.g_oLang.get()._("confirm_to_transfer")+"?");
			oFormConfirmBox.show();
			
			if (oFormConfirmBox.isOKClicked() == false){
				m_oFormCheckListing.finishShow();
				return false;
			}
			oSelectedTopupPaymentGatewayTranscation.setChksId(m_oFormCheckListing.getSelectedPosCheck().getCheckId());
			// change the top up authorization's check id to target check id
			for(PosPaymentGatewayTransactions oPosPaymentGatewayTransactions : m_oFuncCheck.getPosPaymentGatewayTransactionsLists().getPosPaymentGatewayTransactionsList()){
				if(oPosPaymentGatewayTransactions.getType().equals(PosPaymentGatewayTransactions.TYPE_TOPUP_AUTH) && m_oPosInterfaceConfig.getInterfaceId() == oPosPaymentGatewayTransactions.getIntfId()
						&& oPosPaymentGatewayTransactions.getParentAuthCode().equals(oSelectedTopupPaymentGatewayTranscation.getAuthCode())){
					oPosPaymentGatewayTransactions.setChksId(m_oFormCheckListing.getSelectedPosCheck().getCheckId());
				}
			}
			return true;
		}
		return false;
	}
	
	@Override
	public boolean formPaymentCardAuthorization_PartialSendCheck() {
		String sResult = "";
		sResult = sendCheck(false, false, false, false, false, 0, true, 2);
		
		if (sResult.equals(FUNC_RESULT_FAIL))
			return false;
		
		return true;
	}
	
	@Override
	public void FuncCheck_rollbackTaxAndSCForReleasePayment(FuncCheck oFuncCheck, PosCheckPayment oPosCheckPayment,
	                                                        PosVoidReason oPosVoidReason) {
		// generate the item snap shot before starting cashier mode
		oFuncCheck.generateItemSnapShotList(false);
		// generate the payment snap shot
		oFuncCheck.setPaymentSnapShotList(oFuncCheck.getCheckPaymentList());
		
		m_oFuncCheck = oFuncCheck;
		rollbackTaxAndSCForAdjustPayment(oPosCheckPayment, oPosVoidReason);
		
		// generate the item snap shot before starting cashier mode
		m_oFuncCheck.generateItemSnapShotList(false);
	}
	
	@Override
	public boolean FuncCheck_selectContinuousPrint() {
		boolean bIsContPrint = false;
		ArrayList<String> oOptionList = new ArrayList<String>();
		oOptionList.add(AppGlobal.g_oLang.get()._("continuous_print"));
		oOptionList.add(AppGlobal.g_oLang.get()._("reprint_whole_check"));
		
		FormSelectionBox oFormSelectionBox = new FormSelectionBox(this);
		oFormSelectionBox.initWithSingleSelection(AppGlobal.g_oLang.get()._("please_select_print_type"), oOptionList, false);
		oFormSelectionBox.show();
		
		if (oFormSelectionBox.isUserCancel()) {
			// if user select cancel, default as "reprint whole check"
			bIsContPrint = false;
		} else {
			ArrayList<Integer> oSelectionBoxResult = oFormSelectionBox.getResultList();
			int iSelectionIndex = oSelectionBoxResult.get(0);
			if (iSelectionIndex == 0)
				bIsContPrint = true;
			else
				bIsContPrint = false;
		}
		
		return bIsContPrint;
	}
	
	@Override
	public boolean FuncCheck_confirmToVoidPayment(String sPaymentMethodName, String sPaymentAmount) {
		boolean bIsContinue = true;
		
		String sMessage1 = AppGlobal.g_oLang.get()._("payment_method") + ": " + sPaymentMethodName + "\r\n";
		String sMessage2 = AppGlobal.g_oLang.get()._("payment_amount") + ": $ " + sPaymentAmount + "\r\n";
		FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("yes"), AppGlobal.g_oLang.get()._("no"), this);
		oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
		oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("cannot_do_void_online_posting") + "\r\n" + sMessage1 + sMessage2 + AppGlobal.g_oLang.get()._("continue_to_void_payment") + "?");
		oFormConfirmBox.show();
		
		if(!oFormConfirmBox.isOKClicked())
			bIsContinue = false;
		
		return bIsContinue;
	}
	
	@Override
	public void FuncCheck_updateBasketExtendBarCheckTotal() {
		// TODO Auto-generated method stub
		this.updateBasketExtendBarCheckTotal();
	}
	
	@Override
	public boolean FuncCheck_isRollbackNeededForCheckMaximum(FuncCheck oFuncCheck, BigDecimal dAdditionalAmount) {
		return isRollbackNeededForCheckLimit(oFuncCheck, dAdditionalAmount);
	}
	
	@Override
	public void FormLogin_forceLogout() {
		// TODO Auto-generated method stub
		logout(true);
	}
	
	@Override
	public void frameTableFloorPlan_SwipeLeft() {
	}
	
	@Override
	public void frameTableFloorPlan_SwipeRight() {
	}
	
	@Override
	public void frameStationInfoBar_ShowAskTableScreen() {
		if (m_bFloorPlanWaitUserAction)
			return;
		
		showAskTableScreen();
	}
	
	@Override
	public void frameStationInfoBar_LogoutClicked() {
		if (m_bFloorPlanWaitUserAction)
			return;
		
		// Quit check
		if (m_iCashierMode > 0) {
			if (!AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)) {
				// Direct Payment Panel
				if(m_oFrameDirectPaymentPanel.getVisible())
					FrameDirectPaymentPanel_cancel();
				else {
					if(!FrameCashier_exit())
						return;
				}
			}else{
				this.showErrorDialogBox(AppGlobal.g_oLang.get()._("cannot_perform_this_function_at_this_mode"));
				return;
			}
		} else
		if (m_oFrameTableFloorPlan.getVisible() == false) {
			m_sCurrentFunctionKey = AppGlobal.FUNC_LIST.switch_user.name();
			if (AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)) {
				quitCheck(false);
				m_sCurrentFunctionKey = "";
				return;
			} else
				quitCheck(true);
		}
		
		if (m_oFrameFloorPlanFunctionPanel.getVisible()) {
			m_oFrameFloorPlanFunctionPanel.setVisible(false);
			this.m_oFrameTableFloorPlan.showOpenFunctionPanel(false);
		}
		
		AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
				AppGlobal.g_oFuncUser.get().getUserId() + "", "Function: switch_user");
		
		// Switch User
		if (switchUser(false)) {
			// Add log to action log list
			AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.switch_user.name(),
					PosActionLog.ACTION_RESULT_SUCCESS, "", AppGlobal.g_oFuncUser.get().getUserId(),
					AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(),
					AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(),
					AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "", "");
			// handle action log
			AppGlobal.g_oActionLog.get().handleActionLog(false);
		}
		m_sCurrentFunctionKey = "";
	}
	
	@Override
	public void frameStationInfoBar_BackClicked() {
		// Admin Mode
		if(m_oFrameAdminPanel != null && m_oFrameAdminPanel.getExist() && m_oFrameAdminPanel.getVisible()){
			m_oFrameAdminPanel.setVisible(false);
			m_oFrameTableFloorPlan.setVisible(true);
			if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode)
					|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
					|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode)) {
				// Fast food mode
				showTableFloorPlanScreen(false);
			} else {
				// Start the table floor plan timer
				this.updateTableFloorPlanTimer(true);
			}
			m_oFrameStationInfoBar.showFunctionButton(true);
			m_oFrameStationInfoBar.displayMode(false, "");
		}
		// Ordering Mode
		else if(m_oFrameOrderingPanel != null && m_oFrameOrderingPanel.getExist() && m_oFrameOrderingPanel.getVisible() && !m_oFrameCashier.getVisible()){
			//m_oFrameTableFloorPlan.setVisible(true);
			//m_oFrameStationInfoBar.displayMode(false, "");
			quitCheck(false);
		}
		// Cashier Mode
		else if(m_oFrameCashier.getVisible()) {
			// Direct Payment Panel
			if(m_oFrameDirectPaymentPanel.getVisible())
				FrameDirectPaymentPanel_cancel();
			else {
				if(!FrameCashier_exit())
					return;
				m_oFrameStationInfoBar.displayMode(false, "");
			}
		}
		// Check Function
		else if(m_oFrameCheckFunction.getVisible()){
			frameCheckFunction_exit();
		}
		
		if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode)
				|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
				|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode))
			m_oFrameStationInfoBar.displayMode( true, AppGlobal.g_oFuncOutlet.get().getOutletNameByIndex(AppGlobal.g_oCurrentLangIndex.get()));
		
		AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
				AppGlobal.g_oFuncUser.get().getUserId() + "", "Click back button in station info bar");
	}
	
	@Override
	public void frameAdminPanelLookup_functionClicked(int iId) {
		frameAdminPanelLookup_clickCancel();
		m_oFrameAdminPanel.setVisible(false);
		
		m_oFrameTableFloorPlan.setVisible(true);
		m_oFrameStationInfoBar.displayMode(false, "");
		PosFunction oFunction = m_oFunctionList.getFunction(iId);
		AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
				AppGlobal.g_oFuncUser.get().getUserId() + "", "Admin Mode Function" + ": " + oFunction.getKey());
		
		// surveillance eConnect system event: ManagerProcedure
		HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
		oSurveillanceEventInfo.put("procedureDesc", oFunction.getName(AppGlobal.g_oCurrentLangIndex.get()));
		this.doSurveillanceEvent(FuncSurveillance.SURVEILLANCE_TYPE_MANAGER_PROCEDURE, oSurveillanceEventInfo);
		
		fcnSwitch(iId, "", -1, -1, true, null);
		
		if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode) == false
				&& AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode) == false
				&& AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode) == false) {
			// Start the table floor plan timer
			this.updateTableFloorPlanTimer(true);
		}
		
		//do not hide the cover if the current function is "wastage operation" or "search item stock"
		if ((oFunction != null && (oFunction.getKey().equals(AppGlobal.FUNC_LIST.wastage_operation.name())
				|| oFunction.getKey().equals(AppGlobal.FUNC_LIST.search_item_stock.name())
				|| oFunction.getKey().equals(AppGlobal.FUNC_LIST.split_revenue.name())))
				|| (!AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name())
				&& (m_oFrameOpenTable.getVisible() || m_oFrameOpenTableWithQwertyKeyboard.getVisible())))
			m_oFrameCover.setVisible(true);
		else
			m_oFrameCover.setVisible(false);
	}
	
	@Override
	public void frameAdminPanelLookup_clickCancel(){
		if (AppGlobal.OPERATION_MODE.fast_food.equals(m_eOperationMode)
				|| AppGlobal.OPERATION_MODE.self_order_kiosk.equals(m_eOperationMode)
				|| AppGlobal.OPERATION_MODE.bar_tab.equals(m_eOperationMode)) {
			// Fast food mode
			showTableFloorPlanScreen(false);
		} else {
			// Finish showing this form
			m_oFrameAdminPanel.setVisible(false);
			
			// Hide the keyboard
			AppGlobal.g_oTerm.get().hideKeyboard();
			m_oFrameTableFloorPlan.setVisible(true);
			
			m_oFrameStationInfoBar.displayMode(false, "");
			// Start the table floor plan timer
			this.updateTableFloorPlanTimer(true);
		}
	}
	
	@Override
	public void frameTableFloorPlan_ToggleOrderingModeClicked() {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public void frameLargePopUpPanel_CloseImageClicked() {
		m_oFrameFloorPlanFunc.setVisible(false);
		m_oFrameCover.setVisible(false);
		m_oFrameFloorPlanFunctionPanel.setVisible(false);
		m_oFrameTableFloorPlan.setEnabled(true);
		
		m_oFrameTableFloorPlan.setIdleTimeLogoutTimer(true);
	}
	
	@Override
	public void FrameLargePopUpPanelListener_timeout() {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public void formSelectOrderingType_findDining() {
		// TODO Auto-generated method stub
		PosFunction oPosFunction = new PosFunction();
		oPosFunction = m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.check_dine_in.name());
		this.fcnSwitch(oPosFunction.getFuncId(), "", -1, -1, false, null);
		
		// Set result flag = fail as default for auto station
		AppGlobal.g_sResultForAutoFunction.set(AppGlobal.AUTO_FUNCTIONS_RESULT_LIST.success.name());
	}
	
	@Override
	public void formSelectOrderingType_takeAway() {
		// TODO Auto-generated method stub
		HashMap<String, String> oFuncParam = new HashMap<String, String>();
		oFuncParam.put("askToConfirm", "false");
		
		PosFunction oPosFunction = new PosFunction();
		oPosFunction = m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.check_takeout.name());
		this.fcnSwitch(oPosFunction.getFuncId(), "", -1, -1, false, oFuncParam);
		
		// Set result flag = fail as default for auto station
		AppGlobal.g_sResultForAutoFunction.set(AppGlobal.AUTO_FUNCTIONS_RESULT_LIST.success.name());
	}
	
	@Override
	public void formSelectOrderingType_changeLanguage() {
		// TODO Auto-generated method stub
		PosFunction oFunction = new PosFunction();
		oFunction = m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.change_language.name());
		this.fcnSwitch(oFunction.getFuncId(), "", -1, -1, true, null);
		
		// Set result flag = fail as default for auto station
		AppGlobal.g_sResultForAutoFunction.set(AppGlobal.AUTO_FUNCTIONS_RESULT_LIST.success.name());
	}
	
	
	@Override
	public void formSearchAdvanceOrder_RetrievedRecord(String sReferenceNum) {
		retrieveAdvanceOrder(sReferenceNum);
	}
	// Pop a ask password ui and return user group id list
	@Override
	public List<Integer> formAskGratuity_askAuth() {
		FuncUser oTempUser = this.askUserPassword(AppGlobal.g_oLang.get()._("ask_approval"), true);
		
		if (oTempUser == null)
			return null;
		
		return oTempUser.getUserGroupList();
	}
	
	@Override
	public boolean FormRewriteCardOperation_askLogin() {
		FuncUser oTempUser = this
				.askUserPassword(AppGlobal.g_oLang.get()._("error"), true);
		
		if (oTempUser == null)
			return false;
		else
			return true;
	}
	
	@Override
	public void frameOpenTable_FunctionBarButtonClicked(String sNote) {
		this.functionBarButtonClicked(sNote);
	}
	
	@Override
	public void frameOpenTable_FunctionBarOpenPanelClicked() {
		this.functionBarOpenPanelClicked();
	}
	
	
	@Override
	public void frameOpenTableWithQwertyKeyboard_FunctionBarButtonClicked(String sNote) {
		this.functionBarButtonClicked(sNote);
	}
	
	@Override
	public void frameOpenTableWithQwertyKeyboard_FunctionBarOpenPanelClicked() {
		this.functionBarOpenPanelClicked();
	}
	
	@Override
	public boolean FormMembershipRegistration_openTable(int iTableNo, String sTableExtension, String sMemberNumber, String sSurname, int iInterfaceId) {
		PosOutletTableList oPosOutletTableList = AppGlobal.getOutletTableList(AppGlobal.g_oFuncOutlet.get().getOutletId());
		for (Map.Entry<PosOutletTable, PosCheck> entry : oPosOutletTableList.getOutletTableList().entrySet()) {
			PosOutletTable oPosOutletTable = entry.getKey();
			PosCheck oPosCheck = entry.getValue();
			
			if (oPosOutletTable.getTable() == iTableNo && oPosOutletTable.getTableExtension().equals(sTableExtension)) {
				String sCheckInterfaceId = "";
				String sCheckMemberNumber = "";
				for(PosCheckExtraInfo oPosCheckExtraInfo : oPosCheck.getCheckExtraInfoArrayList()) {
					if(oPosCheckExtraInfo.getBy().equals(PosCheckExtraInfo.BY_CHECK) && oPosCheckExtraInfo.getSection().equals(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE)) {
						if(oPosCheckExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_INTERFACE_ID))
							sCheckInterfaceId = oPosCheckExtraInfo.getValue();
						if(oPosCheckExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER))
							sCheckMemberNumber = oPosCheckExtraInfo.getValue();
					}
				}
				
				if (sCheckInterfaceId != null && !sCheckInterfaceId.isEmpty()) {
					List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_MEMBERSHIP_INTERFACE);
					for(PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
						if (!oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_GOLDEN_CIRCLE))
							continue;
						
						if (!String.valueOf(oPosInterfaceConfig.getInterfaceId()).equals(sCheckInterfaceId))
							continue;
						
						String sErrMsg = AppGlobal.g_oLang.get()._("cannot_attach_the_new_member") + System.lineSeparator()
								+ AppGlobal.g_oLang.get()._("member_number") + ": " + sCheckMemberNumber + " "+ AppGlobal.g_oLang.get()._("has_been_attached_already");
						showWarningDialogBox(sErrMsg);
						return false;
					}
				}
			}
		}
		
		String sTableName = AppGlobal.g_oFuncOutlet.get().getTableNameWithTableNo(Integer.toString(iTableNo), sTableExtension)[AppGlobal.g_oCurrentLangIndex.get()-1];
		FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("continue"), AppGlobal.g_oLang.get()._("detach"), this);
		oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("attention"));
		oFormConfirmBox.setMessage(AppGlobal.g_oLang.get()._("attached_to_table") + " " + sTableName);
		oFormConfirmBox.show();
		
		if(!oFormConfirmBox.isOKClicked())
			return false;
		
		//m_oFrameOpenTable.selectTableExtensionButton("-");
		//boolean bResult = frameTableFloorPlan_TableClicked(Integer.toString(iTableNo), sTableExtension, false);
		boolean bResult = this.FrameOpenTable_openTable(Integer.toString(iTableNo), sTableExtension);
		
		if(bResult) {
			m_oRemainAutoFunctions.clear();
			ArrayList<JSONObject> oTmpArrayList = new ArrayList<JSONObject>();
			JSONObject oJsonObject = new JSONObject();
			JSONObject oParamsJsonObject = new JSONObject();
			try {
				oParamsJsonObject.put("member_number", sMemberNumber);
				oParamsJsonObject.put("member_surname", sSurname);
				oParamsJsonObject.put("interface_id", String.valueOf(iInterfaceId));
				oJsonObject.put("fail_handling", FormMain.NEW_CHECK_AUTO_FUNCTIONS_QUIT);
				oJsonObject.put("function_key", AppGlobal.FUNC_LIST.svc_enquiry.name());
				oJsonObject.put("seq", "1");
				oJsonObject.put("params", oParamsJsonObject);
			} catch (JSONException e) {
				e.printStackTrace();
			}
			oTmpArrayList.add(oJsonObject);
			m_oRemainAutoFunctions.offer(oTmpArrayList);
			performAutoFunction();
		}
		
		return bResult;
	}
	
	@Override
	public void frameSearchItem_askQty(int iItemId, String sItemName, String sCode) {
		String sQty = "1";
		while(true){
			FormInputBox oFormInputBox = new FormInputBox(this);
			if (AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.vertical_mobile.name())) {
				m_oFrameCover.setVisible(true);
				m_oFrameCover.bringToTop();
			}
			oFormInputBox.init();
			oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("wastage"));
			oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("please_input_quantity_to_wastage") + System.lineSeparator()
					+ sItemName + " :");
			oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.NUMBER);
			oFormInputBox.show();
			
			String sInput = oFormInputBox.getInputValue();
			
			if(oFormInputBox.isUserCancel()){
				oFormInputBox.finishShow();
				return;
			}
			
			if (!checkValidIntegerValue(sInput))
				continue;
			
			if(Integer.valueOf(sInput) <= 0) {
				this.showErrorDialogBox(AppGlobal.g_oLang.get()._("please_input_quantity_with_positive_amount"));
				continue;
			}
			
			sQty = sInput;
			break;
		}
		
		List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(
				InfInterface.TYPE_INVENTORY_INTERFACE);
		
		for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
			if(m_oFrameSearchItemOnWastageOperation.getInterfaceId() == oPosInterfaceConfig.getInterfaceId()){
				FuncInventoryInterface oCookingTheBookInterface = new FuncInventoryInterface(oPosInterfaceConfig);
				String sLogMsg = sItemName + "(Code: " + sCode + ") add " + sQty + " to wastage";
				String sAction = PosActionLog.ACTION_RESULT_SUCCESS;
				if(!oCookingTheBookInterface.doAddWastage(String.valueOf(iItemId), new BigDecimal(sQty))){
					this.showErrorDialogBox(AppGlobal.g_oLang.get()._("fail_to_post_to_inventory_interface") + System.lineSeparator() + oCookingTheBookInterface.getLastErrorMessage());
					sAction = PosActionLog.ACTION_RESULT_FAIL;
				}
				else {
					String sMsg = AppGlobal.g_oLang.get()._("success_to_do_wastage_operation")
							+ System.lineSeparator()
							+ System.lineSeparator() + AppGlobal.g_oLang.get()._("item_description") + ":"
							+ sItemName + System.lineSeparator() + AppGlobal.g_oLang.get()._("quantity") + ":" + sQty;
					showDialogBox(AppGlobal.g_oLang.get()._("wastage_operation"), sMsg);
				}
				AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.wastage_operation.name(), sAction, "", AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId() , AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "", sLogMsg);
				AppGlobal.g_oActionLog.get().handleActionLog(false);
				break;
			}
		}
	}
	
	@Override
	public String frameSearchItem_searchByPanel(int iSearchType) {
		PosFunction oFunction = null;
		if(iSearchType == FrameSearchItem.SEARCH_TYPE_ADD_WASTAGE)
			oFunction = m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.wastage_operation.name());
		else if(iSearchType == FrameSearchItem.SEARCH_TYPE_WASTAGE_STOCK)
			oFunction = m_oFunctionList.getFunctionByKey(AppGlobal.FUNC_LIST.search_item_stock.name());
		
		if (oFunction != null) {
			m_iUsePanelToSelectItemModeCurrentFuncId = oFunction.getFuncId();
		}
		
		this.toggleUsePanelToSelectItemMode(true, false);
		return "";
	}
	
	@Override
	public void frameSearchItem_searchItemStock(int iItemId, String sItemName, String sCode) {
		List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(
				InfInterface.TYPE_INVENTORY_INTERFACE);
		
		for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
			if(m_oFrameSearchItemOnWastageOperation.getInterfaceId() == oPosInterfaceConfig.getInterfaceId()){
				FuncInventoryInterface oCookingTheBookInterface = new FuncInventoryInterface(oPosInterfaceConfig);
				String sLogMsg = "item : " + sItemName + "(Code: " + sCode + ")";
				String sAction = PosActionLog.ACTION_RESULT_SUCCESS;
				
				if(!oCookingTheBookInterface.doSearchItemStock(String.valueOf(iItemId))){
					this.showErrorDialogBox(AppGlobal.g_oLang.get()._("fail_to_post_to_inventory_interface") + System.lineSeparator() + oCookingTheBookInterface.getLastErrorMessage());
					sAction = PosActionLog.ACTION_RESULT_FAIL;
				} else {
					FormListMessageBox oFormListMessageBox = new FormListMessageBox(true, AppGlobal.g_oLang.get()._("ok"),  this);
					oFormListMessageBox.setTitle(AppGlobal.g_oLang.get()._("search_item_stock"));
					oFormListMessageBox.addColumnHeader(AppGlobal.g_oLang.get()._("general_information"), 450);
					oFormListMessageBox.addColumnHeader(AppGlobal.g_oLang.get()._("value"), 450);
					
					ArrayList<String> sMessage = new ArrayList<>();
					
					// item description
					sMessage = new ArrayList<>();
					sMessage.add(AppGlobal.g_oLang.get()._("item_description"));
					sMessage.add(sItemName);
					oFormListMessageBox.addMessage(sMessage);
					
					// item code
					sMessage = new ArrayList<>();
					sMessage.add(AppGlobal.g_oLang.get()._("item_code"));
					sMessage.add(sCode);
					oFormListMessageBox.addMessage(sMessage);
					
					// quantity
					sMessage = new ArrayList<>();
					sMessage.add(AppGlobal.g_oLang.get()._("quantity"));
					if (!oCookingTheBookInterface.getPostingResponse().oRecipeDatalist.isEmpty())
						sMessage.add(StringLib.BigDecimalToString(oCookingTheBookInterface.getPostingResponse().oRecipeDatalist.get(0).dQty,
								AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal()));
					else
						sMessage.add("");
					oFormListMessageBox.addMessage(sMessage);
					
					oFormListMessageBox.show();
					oFormListMessageBox = null;
				}
				AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.search_item_stock.name(), sAction, "", AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId() , AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), AppGlobal.g_oFuncStation.get().getStationId(), "", "", "", "", "", sLogMsg);
				AppGlobal.g_oActionLog.get().handleActionLog(false);
				break;
			}
		}
	}
	
	//add item to the basket from voucher list
	@Override
	public String formMembershipInterface_addItem(String sItemCode, BigDecimal dItemPrice, ArrayList <PosCheckExtraInfo> oPosCheckExtraInfoList) {
		String sErrorMsg = addItemByItemCode(sItemCode, BigDecimal.ONE, null, oPosCheckExtraInfoList, dItemPrice);
		if(sErrorMsg.isEmpty()){
			FuncCheckItem oMembershipItem = m_oFuncCheck.getItemList(m_oFrameOrderingBasket.getSelectedSectionId()).get(m_oFuncCheck.getItemListCount(m_oFrameOrderingBasket.getSelectedSectionId()) - 1);
			// Set the item canot be grouping in ordering basket
			oMembershipItem.setAllowItemGrouping(false);
		}
		return sErrorMsg;
	}
	
	//add the payment method to the default payment
	@Override
	public String formMembershipInterface_addDefaultPayment(FuncMembershipInterface.MemberInterfaceVoucherListInfo oVoucherInfo, String sInterfaceId) {
		String sErrMsg = "";
		int iPaymentId = 0;
		
		// Get the payment method object
		iPaymentId = m_oFuncPayment.getPaymentMethodList().getPayIdByPayCode(oVoucherInfo.sCode);
		PosPaymentMethod oPosPaymentMethod = m_oFuncPayment.getPaymentMethodList().getPaymentMethod(iPaymentId);
		if (oPosPaymentMethod == null) {
			sErrMsg = AppGlobal.g_oLang.get()._("no_such_payment_method");
			return sErrMsg;
		}
		
		// Non revenue payment method is not allowed while the check is marked liability
		if(m_oFuncCheck.isLiability() == true && oPosPaymentMethod.getNonRevenue().equals(PosPaymentMethod.NON_REVENUE_YES)){
			sErrMsg = AppGlobal.g_oLang.get()._("non_revenue_payment_method_is_not_allowed");
			return sErrMsg;
		}
		
		// Add extra info for default payment
		String sAmount = AppGlobal.g_oFuncOutlet.get().roundPaymentAmountToString(oVoucherInfo.dValue);
		
		JSONObject oDefaultPaymentJSONObject;
		try {
			oDefaultPaymentJSONObject = new JSONObject();
			oDefaultPaymentJSONObject.put("paym_id", iPaymentId);
			oDefaultPaymentJSONObject.put("amount", sAmount);
			oDefaultPaymentJSONObject.put(PosCheckExtraInfo.VARIABLE_INTERFACE_ID, sInterfaceId);
			oDefaultPaymentJSONObject.put(PosCheckExtraInfo.VARIABLE_VOUCHER_NUMBER, oVoucherInfo.sCode);
			oDefaultPaymentJSONObject.put(PosCheckExtraInfo.VARIABLE_VOUCHER_NAME, oVoucherInfo.sName);
			oDefaultPaymentJSONObject.put(PosCheckExtraInfo.VARIABLE_VOUCHER_ID, oVoucherInfo.sId);
			if(oVoucherInfo.bCoupon)
				oDefaultPaymentJSONObject.put(PosCheckExtraInfo.VARIABLE_VOUCHER_TYPE, FuncMembershipInterface.MEMBERSHIP_VOUCHER_TYPE_COUPON);
			else
				oDefaultPaymentJSONObject.put(PosCheckExtraInfo.VARIABLE_VOUCHER_TYPE, FuncMembershipInterface.MEMBERSHIP_VOUCHER_TYPE_GIFT);
			oDefaultPaymentJSONObject.put(PosCheckExtraInfo.VARIABLE_POINTS_USE, oVoucherInfo.dBonus.toPlainString());
		} catch (JSONException e) {
			sErrMsg = e.getMessage();
			return sErrMsg;
		}
		
		// add the cash to the end of the extra info record
		JSONArray oCurrentDefaultPaymentJSONArray = new JSONArray();
		
		// get the selected default item from extra info
		HashMap<Integer, String> oAppliedDefaultPaymentList = m_oFuncCheck.getCheckExtraInfoValueListWithIndexBySectionVariable(
				PosCheckExtraInfo.SECTION_DEFAULT_PAYMENT, PosCheckExtraInfo.VARIABLE_DEFAULT_PAYMENT_DETAIL);
		
		for (Entry<Integer, String> entry : oAppliedDefaultPaymentList.entrySet()) {
			try {
				//get the current applied default payment record
				JSONObject oCurrentAppliedDefaultPayment = new JSONObject(entry.getValue());
				//add the record into the list
				oCurrentDefaultPaymentJSONArray.put(oCurrentAppliedDefaultPayment);
			}
			catch(JSONException e) {
				sErrMsg = e.getMessage();
				return sErrMsg;
			}
		}
		
		// add the cash record in the last of the list
		oCurrentDefaultPaymentJSONArray.put(oDefaultPaymentJSONObject);
		// update the list
		m_oFuncCheck.updateExtraInfoForDefaultPayment(oCurrentDefaultPaymentJSONArray);
		
		return sErrMsg;
	}
	
	@Override
	public void formMembershipInterface_updatedBasket() {
		this.updateBasketExtendBarCheckTotal();
	}
	
	@Override
	public void formMembershipInterface_updateOrderingBasket(List<HashMap<String, Integer>> oNeedDelectItems, List<FuncCheckItem> oDeletedFuncCheckItemList) {
		this.deleteMultipleItem(false, oNeedDelectItems);
	}
	
	@Override
	public void FuncCheck_updateBasketItemPrice(int iSeatNo, int iItemIndex, FuncCheckItem oFuncCheckItem) {
		if(m_oFrameOrderingBasket.getItemCellCount(iSeatNo) > 0)
			updateBasketItemPrice(iSeatNo, iItemIndex, oFuncCheckItem);
	}
	
	@Override
	public boolean frameCheckFunction_checkMinimumChargeItem(FuncCheckItem oFuncCheckItem) {
		return isMinimumChargeItem(oFuncCheckItem);
	}
	
	@Override
	public void formPaymentCardAuthorization_voidPayment(FuncCheck oFuncCheck, int iIndex) {
		voidSelectedPayment(oFuncCheck, iIndex, true, false);
	}
	
	@Override
	public void formPaymentCardAuthorization_quitCheck() {
		quitCheck(false);
	}
	
	@Override
	public void frameTableFloorPlan_HandleLogout() {
		this.switchUser(false);
	}
	
	@Override
	public UserUser formTipsTracking_inputEmployee() {
		return getUserByNameOrNumber();
	}
	
	@Override
	public OutOutlet formTipsTracking_selectOutlet() {
		return selectOutlet();
	}
	
	public boolean gamingCardEnquiry(String sEnquiryValue, boolean bIsSwipeCard,
	                                 FuncGamingInterface oFuncGamingInterface) {
		PosInterfaceConfig oPosInterfaceConfig =  oFuncGamingInterface.getInterfaceConfig();
		
		String sInterfaceId = Integer.toString(oPosInterfaceConfig.getInterfaceId());
		
		if(oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_BALLY) || oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_SJM)) {
			if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_BALLY)) {
				//key in checking
				if(!bIsSwipeCard && !gamingUserCodeChecking(oPosInterfaceConfig))
					return false;
			}
			//swipe card checking
			if (bIsSwipeCard)
				sEnquiryValue = getGamingSwipeCardNumber(oPosInterfaceConfig, sEnquiryValue);
			
			if(sEnquiryValue == null || sEnquiryValue.isEmpty())
				return false;
			
			boolean bIsSuccess = oFuncGamingInterface.cardEnquiry(sInterfaceId, sEnquiryValue, bIsSwipeCard);
			
			if (!bIsSuccess) {
				showErrorDialogBox(oFuncGamingInterface.getLastErrorMessage());
				return false;
			}
			else
				return true;
		}
		return false;
	}
	
	public String getGamingSwipeCardNumber(PosInterfaceConfig oPosInterfaceConfig, String sEnquiryValue){
		String sMsrMappingList = "";
		String sDigitPosition = "";
		String sCardNumber = "";
		String sMsrCode = "";
		
		if(oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_BALLY)) {
			//get interface configure value
			if(oPosInterfaceConfig.getInterfaceConfig() != null && oPosInterfaceConfig.getInterfaceConfig().has("enquiry_swipe_card_control")) {
				// digital postition
				if(oPosInterfaceConfig.getInterfaceConfig().optJSONObject("enquiry_swipe_card_control").optJSONObject("params")
						.has("digit_position_for_identify_digit_value"))
					sDigitPosition = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("enquiry_swipe_card_control").optJSONObject("params")
							.optJSONObject("digit_position_for_identify_digit_value").optString("value", "");
				// msr mappig list
				if(oPosInterfaceConfig.getInterfaceConfig().optJSONObject("enquiry_swipe_card_control").optJSONObject("params")
						.has("digit_and_enquiry_msr_mapping"))
					sMsrMappingList = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("enquiry_swipe_card_control").optJSONObject("params")
							.optJSONObject("digit_and_enquiry_msr_mapping").optString("value", "");
			}
			
			//return card raw value if no setup of Mapping List or DigitPosition
			if(sMsrMappingList.isEmpty() || sDigitPosition.isEmpty())
				return sEnquiryValue;
			
			//error handling for invalid digital position
			if(sDigitPosition.equals("0") || sEnquiryValue.length() < Integer.parseInt(sDigitPosition)) {
				showErrorDialogBox(AppGlobal.g_oLang.get()._("setup_format_error"));
				return null;
			}
			
			String oPositionValue = String.valueOf(sEnquiryValue.charAt(Integer.parseInt(sDigitPosition) - 1));
			String [] oMsrMapping = sMsrMappingList.split(System.lineSeparator());
			
			for(int i = 0; i <oMsrMapping.length; i++){
				String [] oMapping = oMsrMapping[i].split("=");
				if(oMapping[0].equals(oPositionValue)){
					sMsrCode = oMapping[1];
					break;
				}
			}
			if(sMsrCode.isEmpty()) {
				showDialogBox(AppGlobal.g_oLang.get()._("error"), AppGlobal.g_oLang.get()._("invalid_setup"));
				return null;
			}
		}else if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_SJM)) {
			if(oPosInterfaceConfig.getInterfaceConfig() != null && oPosInterfaceConfig.getInterfaceConfig().has("general_setup")) {
				JSONObject  oGeneralSetUpJSON = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup");
				if (oGeneralSetUpJSON.has("params")) {
					JSONObject oParamsJSON = oGeneralSetUpJSON.optJSONObject("params");
					if (oParamsJSON.has("msr_interface_code")) {
						JSONObject oMsrJSON = oParamsJSON.optJSONObject("msr_interface_code");
						if(oMsrJSON.has("value")) {
							sMsrCode = oMsrJSON.optString("value");
						}
					}
				}
			}
			if (sMsrCode.isEmpty())
				return sEnquiryValue;
		}
		
		List<PosInterfaceConfig> oInterfaceConfigList = new ArrayList<PosInterfaceConfig>();
		// Get the configure from interface module
		oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_PERIPHERAL_DEVICE);
		for (PosInterfaceConfig oMsrInterfaceConfig : oInterfaceConfigList) {
			if (oMsrInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_MSR) && oMsrInterfaceConfig.getInterfaceCode().equals(sMsrCode)) {
				// Capture information from swipe card
				FuncMSR oFuncMSR = new FuncMSR();
				int iErrorCode = oFuncMSR.processCardContent(sEnquiryValue, oMsrInterfaceConfig.getInterfaceConfig());
				
				// Get the necessary value
				if (iErrorCode == FuncMSR.ERROR_CODE_NO_ERROR) {
					sCardNumber = oFuncMSR.getCardNo();
					return sCardNumber;
				}
				else {
					showErrorDialogBox(oFuncMSR.getLastErrorMessage());
					return null;
				}
			}
		}
		showDialogBox(AppGlobal.g_oLang.get()._("error"),AppGlobal.g_oLang.get()._("missing_setup"));
		return null;
	}
	
	public boolean gamingUserCodeChecking(PosInterfaceConfig oPosInterfaceConfig) {
		String sUserGroupCodeList = "";
		String sUserGroupCode[] = null;
		
		if (m_oResponeUserGroupIdList == null) {
			if(oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_BALLY)) {
				//get the user code from HERO platform
				if(oPosInterfaceConfig.getInterfaceConfig() != null && oPosInterfaceConfig.getInterfaceConfig().has("user_permission_control")
						&& oPosInterfaceConfig.getInterfaceConfig().optJSONObject("user_permission_control").optJSONObject("params").has("user_group_for_enquiry_key_in"))
					sUserGroupCodeList = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("user_permission_control").optJSONObject("params")
							.optJSONObject("user_group_for_enquiry_key_in").optString("value", "");
			}
			if(sUserGroupCodeList.isEmpty())
				return true;
			
			sUserGroupCode = sUserGroupCodeList.split(",");
			for(int i = 0; i < sUserGroupCode.length; i++ )
				sUserGroupCode[i] = sUserGroupCode[i].trim();
			
			UserUserGroupList oUserUserGroupList = new UserUserGroupList();
			oUserUserGroupList.findUserGroupbyUserGroupCode(sUserGroupCode);
			m_oResponeUserGroupIdList = oUserUserGroupList.getUserGroupList();
		}
		
		// group list which current user belongs to
		List<Integer> oGroupList = AppGlobal.g_oFuncUser.get().getUserGroupList();
		for(Integer iGroupId : oGroupList) {
			if(m_oResponeUserGroupIdList.containsKey(iGroupId))
				return true;
		}
		showErrorDialogBox(AppGlobal.g_oLang.get()._("user_not_allow_to_key_in_input"));
		return false;
	}
	
	//	apply check discount with provided discount code, discount rate and discount extra info after passing discount checking
	public boolean applyInterfaceCheckDiscount(String sDiscountCode, String sDiscountPercentage, ArrayList <PosCheckExtraInfo> oDiscountCheckExtraInfoList) {
		
		if(sDiscountCode.isEmpty()){
			showErrorDialogBox(AppGlobal.g_oLang.get()._("missing_setup"));
			return false;
		}
		
		if(sDiscountPercentage.isEmpty() || sDiscountPercentage.equals("0")) {
			this.showErrorDialogBox(AppGlobal.g_oLang.get()._("zero_discount_value"));
			return false;
		}
		
		// discount restriction checking
		if(!m_oFuncCheck.checkDiscountApplyRestriction(true)) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("discount_had_been_applied_before"));
			return false;
		}
		
		List<HashMap<String, Integer>> oSelectedItems = m_oFuncCheck.getSectionItemIndexForCurrentOrderedItem();
		PosDiscountTypeList oDiscTypeList = new PosDiscountTypeList();
		DateTimeFormatter dateFormat = DateTimeFormat.forPattern("yyyy-MM-dd");
		PosBusinessDay oBusinessDay = AppGlobal.g_oFuncOutlet.get().getBusinessDay();
		PosDiscountType oSelectedDiscType;
		BigDecimal dDiscountPercentage = (new BigDecimal(sDiscountPercentage)).divide(new BigDecimal("100.0")).negate();
		
		if (oSelectedItems.size() <= 0) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("no_items_for_applying_discount"));
			return false;
		}
		
		// form the lookup description
		oDiscTypeList.readDiscountListByOutletId("check", AppGlobal.g_oFuncOutlet.get().getShopId(),
				AppGlobal.g_oFuncOutlet.get().getOutletId(), AppGlobal.g_oFuncStation.get().getStationId(),
				dateFormat.print(oBusinessDay.getDate()), oBusinessDay.isHoliday(),
				oBusinessDay.isDayBeforeHoliday(), oBusinessDay.isSpecialDay(),
				oBusinessDay.isDayBeforeSpecialDay(), oBusinessDay.getDayOfWeek(),
				AppGlobal.g_oFuncUser.get().getUserGroupList(), false);
		
		// check discount existence
		oSelectedDiscType = oDiscTypeList.getDiscountTypeByCode(sDiscountCode);
		
		if (oSelectedDiscType == null) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("discount_not_exist"));
			return false;
		}
		
		// check whether is used for discount
		if (oSelectedDiscType.isUsedForExtraCharge()) {
			showErrorDialogBox(AppGlobal.g_oLang.get()._("fail_to_apply_extra_charge_as_discount"));
			return false;
		}
		
		//check whether the discount is open check discount
		if (!oSelectedDiscType.isPercentageDiscountMethod()
				|| oSelectedDiscType.getRate().compareTo(BigDecimal.ZERO) != 0){
			showErrorDialogBox(AppGlobal.g_oLang.get()._("invalid_setup"));
			return false;
		}
		
		List<Integer> oItemDiscountGrpList = new ArrayList<Integer>();
		HashMap<Integer, Boolean> oDiscountAllowance = new HashMap<Integer, Boolean>();
		for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
			FuncCheckItem oParentFuncCheckItem = m_oFuncCheck.getCheckItem(oSelectedItem.get("partySeq"),
					oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
			
			// Pre-checking if the item is missing in menu
			if (oParentFuncCheckItem.getMenuItem() == null) {
				String sErrMsg = AppGlobal.g_oLang.get()._("item_is_missing_in_menu_setup") + " ("
						+ oParentFuncCheckItem.getItemDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get()) + ")";
				showDialogBox(AppGlobal.g_oLang.get()._("error"), sErrMsg);
				return false;
			}
			
			if (oParentFuncCheckItem.getMenuItem().getDiscountItemGroupId() != 0
					&& !oItemDiscountGrpList.contains(oParentFuncCheckItem.getMenuItem().getDiscountItemGroupId())) {
				boolean bDiscountAllowance = AppGlobal.g_oFuncDiscountAclList
						.get(AppGlobal.g_oFuncOutlet.get().getOutletId())
						.checkDiscountAcl(oParentFuncCheckItem.getMenuItem(), oSelectedDiscType);
				oDiscountAllowance.put(oParentFuncCheckItem.getMenuItem().getDiscountItemGroupId(), bDiscountAllowance);
			}
		}
		
		// check and prepare the item list for applying discount
		List<HashMap<String, Integer>> oItemIndexList = new ArrayList<HashMap<String, Integer>>();
		for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
			FuncCheckItem oParentFuncCheckItem = m_oFuncCheck.getCheckItem(oSelectedItem.get("partySeq"),
					oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
			
			if (oParentFuncCheckItem.getMenuItem().getDiscountItemGroupId() == 0)
				continue;
			if (!oDiscountAllowance.containsKey(oParentFuncCheckItem.getMenuItem().getDiscountItemGroupId()))
				continue;
			if (oDiscountAllowance.get(oParentFuncCheckItem.getMenuItem().getDiscountItemGroupId()) == false)
				continue;
			
			// check whether the selected item is available for applying discount
			if (oParentFuncCheckItem.getCheckItem().getTotal().compareTo(BigDecimal.ZERO) == 0)
				continue;
			
			oItemIndexList.add(oSelectedItem);
		}
		
		if (!m_oFuncCheck.applyDiscount("check", PosDiscountType.USED_FOR_DISCOUNT,
				oItemIndexList, oSelectedDiscType, dDiscountPercentage, oDiscountCheckExtraInfoList, 0)) {
			showDialogBox(AppGlobal.g_oLang.get()._("error"), AppGlobal.g_oLang.get()._("fail_to_apply_discount"));
			return false;
		}
		
		return true;
	}
	
	public void showPointRedemptionInfo (FuncMembershipInterface oFuncMembershipInterface ,String sTotalPointBalance , int iPointDecimal , BigDecimal dCurrentCheckBalance , BigDecimal dMaxAmount , BigDecimal dMaxPoint , String sType) {
		// show information
		FormListMessageBox oFormListMessageBox = new FormListMessageBox(true, AppGlobal.g_oLang.get()._("ok"), this);
		oFormListMessageBox.setTitle(AppGlobal.g_oLang.get()._("point_redemption"));
		oFormListMessageBox.addColumnHeader(AppGlobal.g_oLang.get()._("variable"), 280);
		oFormListMessageBox.addColumnHeader(AppGlobal.g_oLang.get()._("value"), 280);
		oFormListMessageBox.setMessageTextAlign(HeroActionProtocol.View.Attribute.TextAlign.LEFT+", "+HeroActionProtocol.View.Attribute.TextAlign.CENTER);
		oFormListMessageBox.setMessageColor(0, "#B2CBDA", "");
		
		oFormListMessageBox.addMessageWithColumnOfTwo(AppGlobal.g_oLang.get()._("member_number"), oFuncMembershipInterface.getLastMemberInfo().get("memberNumber"));
		oFormListMessageBox.addMessageWithColumnOfTwo(AppGlobal.g_oLang.get()._("member_name"), oFuncMembershipInterface.getLastMemberInfo().get("memberName"));
		oFormListMessageBox.addMessageWithColumnOfTwo(AppGlobal.g_oLang.get()._("card_number"), oFuncMembershipInterface.getLastMemberInfo().get("cardNumber"));
		oFormListMessageBox.addMessageWithColumnOfTwo(AppGlobal.g_oLang.get()._("birthday"), oFuncMembershipInterface.getLastMemberInfo().get("birthday"));
		oFormListMessageBox.addMessageWithColumnOfTwo(AppGlobal.g_oLang.get()._("mobile_number"), oFuncMembershipInterface.getLastMemberInfo().get("mobileNumber"));
		oFormListMessageBox.addMessageWithColumnOfTwo(AppGlobal.g_oLang.get()._("point_balance"), new BigDecimal(sTotalPointBalance).setScale(iPointDecimal, RoundingMode.HALF_UP).toPlainString());
		oFormListMessageBox.addMessageWithColumnOfTwo(AppGlobal.g_oLang.get()._("check_balance"), dCurrentCheckBalance.setScale(iPointDecimal, RoundingMode.HALF_UP).toPlainString());
		if (sType.equals("discount"))
			oFormListMessageBox.addMessageWithColumnOfTwo(AppGlobal.g_oLang.get()._("discount_to_point_balance"), dMaxAmount.setScale(iPointDecimal, RoundingMode.HALF_UP).toPlainString());
		else
			oFormListMessageBox.addMessageWithColumnOfTwo(AppGlobal.g_oLang.get()._("dollar_to_point_balance"), dMaxAmount.setScale(iPointDecimal, RoundingMode.HALF_UP).toPlainString());
		oFormListMessageBox.addMessageWithColumnOfTwo(AppGlobal.g_oLang.get()._("maximum_redemption_points"), dMaxPoint.setScale(iPointDecimal, RoundingMode.HALF_UP).toPlainString());
		oFormListMessageBox.show();
	}
	
	@Override
	public void frameAlertMessageBox_click() {
		// TODO Auto-generated method stub
		boolean bIsShowBlockFrame = false;
		boolean bIsSelfOrderKioskMode = m_eOperationMode.equals(AppGlobal.OPERATION_MODE.self_order_kiosk);
		
		// if not kiosk mode, "show block frame" always return false
		if (!bIsSelfOrderKioskMode) {
			AppGlobal.getActiveClient().setIsShowBlockFrame(false);
			return;
		}
		
		// check all monitoring print queues status are normal
		// If yes, remove the alert message frame
		// If no, keep the alert message frame to block the operation
		if(!isAllPrintQueueNormal())
			bIsShowBlockFrame = true;
		
		if(!bIsShowBlockFrame && bIsSelfOrderKioskMode && m_oFrameAlertMessageBox != null) {
			m_oFrameAlertMessageBox.setMessage("");
			m_oFrameAlertMessageBox.setVisible(false);
		}
		
		AppGlobal.getActiveClient().setIsShowBlockFrame(bIsShowBlockFrame);
	}
	
	//Julie_20190416 start
	public void displayInformation(){
		  StringBuffer sDisplayInfo=new StringBuffer();
		  sDisplayInfo.append(AppGlobal.g_oLang.get()._("display_information"));
		  sDisplayInfo.append(" : "); 
		  sDisplayInfo.append(AppGlobal.g_oFuncOutlet.get().getOutletId());
		  sDisplayInfo.append(System.lineSeparator()); 
		  sDisplayInfo.append(System.lineSeparator()); 
		  sDisplayInfo.append(AppGlobal.g_oLang.get()._("cover2"));
		  sDisplayInfo.append(" : "); 
		  sDisplayInfo.append(m_oFuncCheck.getCover());
		  sDisplayInfo.append(System.lineSeparator());
		  sDisplayInfo.append(System.lineSeparator()); 
		  sDisplayInfo.append(AppGlobal.g_oLang.get()._("user_info")); 
		  sDisplayInfo.append(" : "); 
		  sDisplayInfo.append(AppGlobal.g_oFuncUser.get().getUserName()[AppGlobal.g_oCurrentLangIndex.get()-1]);
		  sDisplayInfo.append(System.lineSeparator());
		  sDisplayInfo.append(System.lineSeparator()); 
		  sDisplayInfo.append(AppGlobal.g_oLang.get()._("business_date"));
		  sDisplayInfo.append(" : "); 
		  String sBusinessDay=AppGlobal.g_oFuncOutlet.get().getBusinessDay().getDateInString();
		  sDisplayInfo.append(sBusinessDay);
		  sDisplayInfo.append(System.lineSeparator()); 
		  sDisplayInfo.append(System.lineSeparator()); 
		  sDisplayInfo.append(AppGlobal.g_oLang.get()._("current_station_info")); 
		  sDisplayInfo.append(" : "); 
		  sDisplayInfo.append(AppGlobal.g_oFuncStation.get().getName()[AppGlobal.g_oCurrentLangIndex.get()-1]); 
		  showDialogBox("Display Information",sDisplayInfo.toString());
		  m_oFuncCheck.addOrUpdateCheckExtraInfoValue(3,PosCheckExtraInfo.BY_CHECK , PosCheckExtraInfo.SECTION_ITEM, PosCheckExtraInfo.VARIABLE_USER_NAME,0,AppGlobal.g_oFuncUser.get().getUserName()[AppGlobal.g_oCurrentLangIndex.get()-1]);
		 
	}
	//Julie_20190416 end
	//Julie_20190417 start
	public void addReferenceToLastItem() {
		//set reference to last item
		boolean bCheckExtraInfo=false;
		int iSectionId = m_oFrameOrderingBasket.getSelectedSectionId();
		int iItemIndex = m_oFuncCheck.getLastGeneralCheckItemItemIndex(iSectionId);
		FuncCheckItem oFuncCheckItem = m_oFuncCheck.getCheckItem(iSectionId, iItemIndex);
		String sReference = oFuncCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_ITEM, PosCheckExtraInfo.VARIABLE_ITEM_REFERENCE);
		FormInputBox oFormInputBox = new FormInputBox(this);
		oFormInputBox.init();
		oFormInputBox.setTitle("Last item reference");
		oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("please_input_the_reference") + ":");
		oFormInputBox.setDefaultInputValue(sReference);
		oFormInputBox.show();
		if(null!=sReference && !"".equals(sReference)) 
			bCheckExtraInfo=true;
		sReference =oFormInputBox.getInputValue();
		if(null == sReference || "".equals(sReference)) 
			sReference="reference";
		String[] sStatusArray = StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, "");
		for (int i = 0; i < AppGlobal.LANGUAGE_COUNT; i++) {
			String sStatus = "";
			if (!sStatus.isEmpty())
				sStatus += ", ";
			sStatus += sReference;
			sStatusArray[i]=sStatus;
		}
		m_oFrameOrderingBasket.updateInfo(iSectionId, iItemIndex, sStatusArray,  StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, ""),
				oFuncCheckItem.getModifierList(),  StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, ""),  StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, ""), new ArrayList<PosTaxScType>(), new ArrayList<PosTaxScType>());
	//	m_oFuncCheck.addOrUpdateCheckExtraInfoValue(3,PosCheckExtraInfo.BY_CHECK , PosCheckExtraInfo.SECTION_ITEM, PosCheckExtraInfo.VARIABLE_ITEM_REFERENCE,0,sReference);
		if(bCheckExtraInfo)
			oFuncCheckItem.updateExtraInfoValue(PosCheckExtraInfo.BY_ITEM, PosCheckExtraInfo.SECTION_ITEM, PosCheckExtraInfo.VARIABLE_ITEM_REFERENCE, sReference);
		else
			oFuncCheckItem.addExtraInfo(PosCheckExtraInfo.BY_ITEM, PosCheckExtraInfo.SECTION_ITEM, PosCheckExtraInfo.VARIABLE_ITEM_REFERENCE, sReference);
	}
	//Julie_20190417
	
}