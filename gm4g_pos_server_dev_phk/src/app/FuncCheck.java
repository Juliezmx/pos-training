package app;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.DatabaseMetaData;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.Map.Entry;
import java.util.concurrent.CopyOnWriteArrayList;

import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import commonui.FormConfirmBox;
import commonui.FormDialogBox;
import commonui.FormInputBox;
import externallib.StringLib;
import externallib.Util;
import om.*;
import virtualui.HeroActionProtocol;

public class FuncCheck {
	private static int MAX_SEATS=99;
	public static String RECEIPT_RENDER_FORMAT_TYPE_PDF = "p";
	public static String ALLOW_CONTINUOUS_PRINT = "allow_continuous_print";
	public static String NOT_ALLOW_CONTINUOUS_PRINT = "not_allow_continuous_print";
	
	// Check
	private PosCheck m_oCheck;
	
	// Check table
	private PosCheckTable m_oCheckTable;
	
	// Outlet table
	private PosOutletTable m_oOutletTable;
	
	// Check discount list
	private List<PosCheckDiscount> m_oCheckDiscountList;
	
	// Check Extra Info list
	private List<PosCheckExtraInfo> m_oCheckExtraInfoList;
	
	// Check payment list
	private ArrayList<PosCheckPayment> m_oCheckPaymentList;
	
	// Check payment list for adjust payment
	private ArrayList<PosCheckPayment> m_oPaymentSnapShotListForAdjustPayment;
	
	// Check party list
	private ArrayList<FuncCheckParty> m_oFuncCheckPartyList;
	private FuncCheckParty m_oCurrentFuncCheckParty;
	
	// Check Tax Sc Ref List
	private List<PosCheckTaxScRef> m_oCheckTaxScRefList;
	
	// Tax and Service charge setup
	private HashMap<Integer, PosTaxScType> m_oTaxType;
	private HashMap<Integer, PosTaxScType> m_oScType;
	
	// Attached member
	private MemMember m_oMember;
	
	// Process check user id and station id
	private int m_iUserId;
	private int m_iStationId;
	
	// Table no. and extension
	private String m_sTableNo;
	private String m_sTableExtension;
	private String[] m_sTableName;
	
	// Flag to determine if the table is locked
	private Boolean m_bIsTableLock;
	
	// Last error message
	private String m_sErrorMessage;
	private String m_sWarningMessage;
	
	// Current Item stock list
	private PosOutletItemList m_oItemStockList;
	
	// Flag to determine if the check is created in fast food mode
	private Boolean m_bFastFoodCheck;
	
	// Flag to determine if the check is a stock delivery invoice
	private Boolean m_bStockDeliveryInvoice;
	private PosStockDeliveryInvoice m_oPosStockDeliveryInvoice;
	
	// Flag to record if the receipt need to be print for update Payment Info
	private Boolean m_bNoNeedPrintReceipt;
	
	// URL for last print check
	private String m_sLastPrintCheckUrl;
	// View Content for last print check
	private String m_sLastPrintViewContent;
	
	private boolean m_bModified;
	
	private long m_sCustomerDisplayInfo_DataUpdate_Timestamp;
	private long m_sCustomerDisplayInfo_LastGenInterfaceFile_Timestamp;
	
	// Last release payment void reason ID for void paid check function
	private int m_iLastReleasePaymentVoidReasonId;
	
	// Last release payment void reason 
	private PosVoidReason m_oLastReleasePaymentVoidReason;
	
	// Current check prefix no (only available if it is fastfood mode operation and the check number is generated by station)
	private String m_sCurrentCheckPrefixNo;
	
	private boolean m_bPaymentInterfacePrinting;
	
	private boolean m_bIsCheckRounding;
	
	// Previous payment and tips total for adjust payment function that store the original value of pay and tips value
	private BigDecimal m_dLastPayTotal;
	private BigDecimal m_dLastTipsTotal;
	
	// Base Total in Loyalty interface
	private BigDecimal m_dBaseTotal;
	
	// Fail redeem benefit list
	private List<HashMap<String, HashMap<String, String>>> m_oFailRedeemBenefitList;
	
	//Item and check discount list snap shot for cancel payment
	private List<HashMap<String, String>> m_oItemSnapShotListForPayment;
	
	//JSON object snap shot of external interface for adjust payment
	private JSONObject m_oSnapShotOfIntfPostDetailsForPayment;
	
	private String m_sCurrentFunctionKey;
	
	// Store the special handle round amount for inclusive SC/Tax with breakdown
	private BigDecimal m_dSpecialHandleRoundAmountForInclusiveSCTax;
	
	// Payment gateway transactions
	private PosPaymentGatewayTransactionsList m_oPosPaymentGatewayTransactionsList;
	
	// declare the active payment gateway transaction list for storing TYPE_AUTH and TYPE_TOPUP_AUTH only, for adding default payment in cashier screen
	private PosPaymentGatewayTransactionsList m_oActiveAuthPosPaymentGatewayTransactionList;
	
	// declare the payment gateway transaction list for storing some node is unattached in cashier
	private PosPaymentGatewayTransactionsList m_oUnattachPaymentPosGatewayTransactionList;
	
	// declare the check is allowed to continuous print
	private String m_sAllowContinuousPrint;
	
	// Remaining Balance after Loyalty SVC payment
	private BigDecimal m_dLoyaltySVCRemainingBalance;
	
	// Return the error message
	public String getLastErrorMessage(){
		return m_sErrorMessage;
	}
	
	// Return the warning message
	public String getLastWarningMessage(){
		return m_sWarningMessage;
	}
	
	/** list of interested listeners (observers, same thing) */
    private ArrayList<FuncCheckListener> listeners;
    
	/** add a new ModelListener observer for this Model */
    public void addListener(FuncCheckListener listener) {
        listeners.add(listener);
    }
    
    /** remove a ModelListener observer for this Model */
    public void removeListener(FuncCheckListener listener) {
        listeners.remove(listener);
    }
    
    /** remove all ModelListener observer for this Model */
    public void removeAllListener() {
    	listeners.clear();
    }
	
	public FuncCheck(){
		listeners = new ArrayList<FuncCheckListener>();

		// Check
		m_oCheck = new PosCheck(AppGlobal.g_oFuncUser.get().getUserId());
		
		// Outlet table
		m_oOutletTable = new PosOutletTable();
		
		// Check table
		m_oCheckTable = new PosCheckTable();
		
		m_iUserId = AppGlobal.g_oFuncUser.get().getUserId();
		m_iStationId = AppGlobal.g_oFuncStation.get().getStationId();
		
		// Check discount list
		m_oCheckDiscountList = new ArrayList<PosCheckDiscount>();
		m_oCheckPaymentList = new ArrayList<PosCheckPayment>();
		m_oPaymentSnapShotListForAdjustPayment = new ArrayList<PosCheckPayment>();
		
		// Check Extra Info list
		m_oCheckExtraInfoList = new CopyOnWriteArrayList<PosCheckExtraInfo>();
		
		// Check party list
		m_oFuncCheckPartyList = new ArrayList<FuncCheckParty>();
		m_oCurrentFuncCheckParty = new FuncCheckParty();
		m_oFuncCheckPartyList.add(m_oCurrentFuncCheckParty);
		
		// Attached member
		m_oMember = null;
		
		// Check Tax Sc Ref List
		m_oCheckTaxScRefList = new ArrayList<PosCheckTaxScRef>();
		
		m_bIsTableLock = false;
		
		m_bFastFoodCheck = false;
		
		m_bStockDeliveryInvoice = false;
		m_oPosStockDeliveryInvoice = new PosStockDeliveryInvoice();
		
		m_bNoNeedPrintReceipt = false;
		
		// Payment Gateway Transactions List
		m_oPosPaymentGatewayTransactionsList = new PosPaymentGatewayTransactionsList();
		
		m_sErrorMessage = "";
		m_sWarningMessage = "";
		
		m_bModified = false;
		
		m_dBaseTotal = BigDecimal.ZERO;
		m_oItemStockList = new PosOutletItemList();
		
		// Init Customer Display Info TimeStamps
		m_sCustomerDisplayInfo_DataUpdate_Timestamp = 0;
		m_sCustomerDisplayInfo_LastGenInterfaceFile_Timestamp = 0;
		
		m_bPaymentInterfacePrinting = false;
		m_sLastPrintCheckUrl = "";
		m_sLastPrintViewContent = "";
		m_sTableName = StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, "");
		m_sCurrentFunctionKey = "";
		m_sTableExtension = "";
		m_sAllowContinuousPrint = "";
		m_dLoyaltySVCRemainingBalance = BigDecimal.ZERO;
		
		m_oLastReleasePaymentVoidReason = new PosVoidReason();
		m_bIsCheckRounding = false;
	}
	
	// Check whether the table is locked
	public boolean isTableLocked(){
		return m_bIsTableLock;
	}
	
	// Check whether the check is used by other
	public boolean isInUsedByOthers(){
		//if((m_oCheck.getLockStationId() > 0 && m_oCheck.getLockStationId() != AppGlobal.g_oFuncStation.get().getStationId()) || (m_oCheck.getLockUserId() > 0 && m_oCheck.getLockUserId() != AppGlobal.g_oFuncUser.get().getUserId())) {
		if((m_oCheck.getLockStationId() > 0 && m_oCheck.getLockStationId() != AppGlobal.g_oFuncStation.get().getStationId())) {
			FuncStation oUsedStation = new FuncStation();
			if(oUsedStation.loadStationById(m_oCheck.getLockStationId()))
				m_sErrorMessage = AppGlobal.g_oLang.get()._("table_is_locked_by_station")+" "+oUsedStation.getName(AppGlobal.g_oCurrentLangIndex.get());
			return true;
		}else
			return false;
	}
	
	// Check whether this is a old check
	public boolean isOldCheck(){
		if(m_bStockDeliveryInvoice){
			if(m_oPosStockDeliveryInvoice.getSinvId() > 0)
				return true;
			else
				return false;
		}else{
			if(!m_oCheck.getCheckId().equals(""))
				return true;
			else
				return false;
		}
	}
	
	// Check whether check is printed
	public boolean isPrinted() {
		if(m_oCheck.getPrintCount() > 0)
			return true;
		else
			return false;
	}
	
	// Check whether check is paid
	public boolean isPaid(boolean bCurrentPartyOnly) {
		if(bCurrentPartyOnly){
			if(AppGlobal.g_oFuncStation.get().isPartialPayment() && !m_oCurrentFuncCheckParty.getCheckParty().isPartialPaid()
				||	(!AppGlobal.g_oFuncStation.get().isPartialPayment() && !m_oCurrentFuncCheckParty.getCheckParty().isNotPaid()))
				return true;
			else
				return false;
		}else{
			if((AppGlobal.g_oFuncStation.get().isPartialPayment() && m_oCheck.isFullPaid()) 
				||	(!AppGlobal.g_oFuncStation.get().isPartialPayment() && !m_oCheck.isNotPaid())) {
				return true;
			}	
			else
				return false;
		}
	}
	
	public boolean isTableOccupied(int iOutletId, String sTableNo, String sTableExtension) {
		// Check if table is in use by other station
		m_oOutletTable.readByOutletIdTable(iOutletId, Integer.parseInt(sTableNo), sTableExtension);
		if(!m_oOutletTable.getOtblId().equals("")) {
			if(!m_oOutletTable.getCheckId().equals("")){
				m_sErrorMessage = AppGlobal.g_oLang.get()._("table")+ " " + AppGlobal.g_oFuncOutlet.get().getTableNameWithTableNo(sTableNo, sTableExtension)[AppGlobal.g_oCurrentLangIndex.get()-1] + " " + AppGlobal.g_oLang.get()._("is_occupied_please_select_other_table");
				return true;
			}
		}
		
		return false;
	}
	
	// Set the check is create in fast food mode
	public void setFastFoodCheck(boolean bFastFoodCheck) {
		this.m_bFastFoodCheck = bFastFoodCheck;
	}
	
	// Is the check is create in fast food mode
	public boolean isFastFoodCheck(){
		return this.m_bFastFoodCheck;
	}
	
	// Set the check as stock delivery invoice
	public void setStockDeliveryInvoice(boolean bStockDeliveryInvoice) {
		this.m_bStockDeliveryInvoice = bStockDeliveryInvoice;
	}
	
	public void setNoNeedPrintReceipt(boolean bNoNeedPrintReceipt) {
		this.m_bNoNeedPrintReceipt = bNoNeedPrintReceipt;
	}
	
	public void setIsCheckRounding(boolean bIsCheckRounding){
		this.m_bIsCheckRounding = bIsCheckRounding;
	}
	
	public boolean isCheckRounding(){
		return this.m_bIsCheckRounding;
	}
	
	// Has new gateway transactions record
	public boolean hasNewPaymentGatewayTransactions(){
		for(PosPaymentGatewayTransactions oPosPaymentGatewayTransactions : m_oPosPaymentGatewayTransactionsList.getPosPaymentGatewayTransactionsList()){
			if(oPosPaymentGatewayTransactions.getPgtxId() != null && oPosPaymentGatewayTransactions.getPgtxId().isEmpty()  && 
					!oPosPaymentGatewayTransactions.getStatus().equals(PosPaymentGatewayTransactions.STATUS_VOIDED) && this.getCheckId().equals(oPosPaymentGatewayTransactions.getChksId()))
				return true;
		}
		
		return false;
	}
	
	// check this check exist active payment gateway transaction (key : TYPE_AUTH OR TYPE_COMPLETE_AUTH)
	public boolean haveActivePaymentGatewayTransactions() {
		boolean bExist = false;
		
		for (PosPaymentGatewayTransactions oPosPaymentGatewayTrans: m_oPosPaymentGatewayTransactionsList.getPosPaymentGatewayTransactionsList()) {
			if (oPosPaymentGatewayTrans.getType().equals(PosPaymentGatewayTransactions.TYPE_AUTH) || oPosPaymentGatewayTrans.getType().equals(PosPaymentGatewayTransactions.TYPE_COMPLETE_AUTH)) {
				if(!oPosPaymentGatewayTrans.getStatus().equals(PosPaymentGatewayTransactions.STATUS_AUTHORIZE_COMPLETE)){
					bExist = true;
					break;
				}
			}
		}
		
		return bExist;
	}
	
	// get the payment gateway transaction list grouped by parent_auth_code
	public PosPaymentGatewayTransactionsList getActivePaymentGatewayTransactionListGroupedByParentAuthCode(String sAuthType) {
		PosPaymentGatewayTransactionsList oRetListGroupedByParentAuthCode = new PosPaymentGatewayTransactionsList();
		int iPgtxPayId = 1;
		
 		for (PosPaymentGatewayTransactions oPosPaymentGatewayTrans: m_oPosPaymentGatewayTransactionsList.getPosPaymentGatewayTransactionsList()) {
			String sTempAuthType = oPosPaymentGatewayTrans.getType();
			String sTempStatus = oPosPaymentGatewayTrans.getStatus();
			String sTempParentAuthCode = oPosPaymentGatewayTrans.getParentAuthCode();
			String sTempAuthCode = oPosPaymentGatewayTrans.getAuthCode();
			if (sTempStatus.equals(PosPaymentGatewayTransactions.STATUS_AUTHORIZE_COMPLETE) || sTempStatus.equals(PosPaymentGatewayTransactions.STATUS_VOIDED))
				continue;
			
			if (sAuthType.equals(PosPaymentGatewayTransactions.TYPE_COMPLETE_AUTH) && !sTempAuthType.equals(PosPaymentGatewayTransactions.TYPE_COMPLETE_AUTH))
				continue;
			if (sAuthType.equals(PosPaymentGatewayTransactions.TYPE_AUTH) && !(sTempAuthType.equals(PosPaymentGatewayTransactions.TYPE_AUTH) || sTempAuthType.equals(PosPaymentGatewayTransactions.TYPE_TOPUP_AUTH)))
				continue;
			
			if (sTempParentAuthCode.isEmpty())
				sTempParentAuthCode = sTempAuthCode;
			
			if (oRetListGroupedByParentAuthCode.checkExistActivePaymentGatewayTransactionByParentAuthCodeAndType(sTempParentAuthCode, sTempAuthType))
				oRetListGroupedByParentAuthCode.updateActivePaymentGatewayTransactionAmountByAuthAuthCodeAndType(sTempParentAuthCode, sTempAuthCode, sTempAuthType, oPosPaymentGatewayTrans.getAmount());
			else {
				PosPaymentGatewayTransactions oAddTrans = new PosPaymentGatewayTransactions();
				oAddTrans.setPgtxId(oPosPaymentGatewayTrans.getPgtxId());
				oAddTrans.setMaskedPan(oPosPaymentGatewayTrans.getMaskedPan());
				if (sTempAuthType.equals(PosPaymentGatewayTransactions.TYPE_AUTH) || sTempAuthType.equals(PosPaymentGatewayTransactions.TYPE_TOPUP_AUTH))
					oAddTrans.setType(PosPaymentGatewayTransactions.TYPE_AUTH);
				else if (sTempAuthType.equals(PosPaymentGatewayTransactions.TYPE_COMPLETE_AUTH))
					oAddTrans.setType(PosPaymentGatewayTransactions.TYPE_COMPLETE_AUTH);
				oAddTrans.setIssuer(oPosPaymentGatewayTrans.getIssuer());
				oAddTrans.setAmount(oPosPaymentGatewayTrans.getAmount());
				oAddTrans.setTips(oPosPaymentGatewayTrans.getTips());
				if (!oPosPaymentGatewayTrans.getParentAuthCode().isEmpty())
					oAddTrans.setParentAuthCode(oPosPaymentGatewayTrans.getParentAuthCode());
				else
					oAddTrans.setParentAuthCode(oPosPaymentGatewayTrans.getAuthCode());
				oAddTrans.setAuthCode(oPosPaymentGatewayTrans.getAuthCode());
				oAddTrans.setPgtxPayId(iPgtxPayId);
				oAddTrans.setRefNo(oPosPaymentGatewayTrans.getRefNo());
				oAddTrans.setStatus(oPosPaymentGatewayTrans.getStatus());
				oAddTrans.setIntfId(oPosPaymentGatewayTrans.getIntfId());
				oAddTrans.setChksId(oPosPaymentGatewayTrans.getChksId());
				oAddTrans.setTraceNo(oPosPaymentGatewayTrans.getTraceNo());
				oAddTrans.setInvoiceNo(oPosPaymentGatewayTrans.getInvoiceNo());
				oAddTrans.setToken(oPosPaymentGatewayTrans.getToken());
				if(!oPosPaymentGatewayTrans.getCpayId().isEmpty())
					oAddTrans.setCpayId(oPosPaymentGatewayTrans.getCpayId());
				if (sAuthType.equals(PosPaymentGatewayTransactions.TYPE_AUTH) || sAuthType.equals(PosPaymentGatewayTransactions.TYPE_TOPUP_AUTH))
					oAddTrans.setTips(BigDecimal.ZERO);
				iPgtxPayId++;
				oRetListGroupedByParentAuthCode.add(oAddTrans);
			}
		}
		
		if (oRetListGroupedByParentAuthCode.getActivePaymentGatewayTransactionsCount() > 0)
			this.m_oUnattachPaymentPosGatewayTransactionList = new PosPaymentGatewayTransactionsList();

		return oRetListGroupedByParentAuthCode;
	}
	
	public void setCurrentAuthPosPaymentGatewayTransactionList() {
		this.m_oActiveAuthPosPaymentGatewayTransactionList = getActivePaymentGatewayTransactionListGroupedByParentAuthCode(PosPaymentGatewayTransactions.TYPE_AUTH);
	}
	
	public PosPaymentGatewayTransactionsList getCurrentAuthPosPaymentGatewayTransactionList() {
		return this.m_oActiveAuthPosPaymentGatewayTransactionList;
	}
	
	public PosPaymentGatewayTransactions getNextNonSettleActiveGatewayTransaction(PosPaymentGatewayTransactionsList oTransList) {
		PosPaymentGatewayTransactions oRetTrans = new PosPaymentGatewayTransactions();
		for (PosPaymentGatewayTransactions oPosPaymentGatewayTrans: oTransList.getPosPaymentGatewayTransactionsList()) {
			if (oPosPaymentGatewayTrans.getDefaultPayAdded() == false && oPosPaymentGatewayTrans.getStatus().equals(PosPaymentGatewayTransactions.STATUS_ACTIVE)) {
				oPosPaymentGatewayTrans.setDefaultPayAdded(true);
				oRetTrans = oPosPaymentGatewayTrans;
				break;
			}
		}
		return oRetTrans;
	}
	
	public void setUnattachPaymentPosPaymentGatewayTransactionsList(PosPaymentGatewayTransactionsList oAttachAuthTransList) {
		if (this.getCurrentAuthPosPaymentGatewayTransactionList().getActivePaymentGatewayTransactionsCount() != oAttachAuthTransList.getActivePaymentGatewayTransactionsCount()) {
			this.m_oUnattachPaymentPosGatewayTransactionList = new PosPaymentGatewayTransactionsList();
			for (PosPaymentGatewayTransactions oTempTrans : this.getCurrentAuthPosPaymentGatewayTransactionList().getPosPaymentGatewayTransactionsList()) {
				int iTempPgtxPayId = oTempTrans.getPgtxPayId();
				if (!oAttachAuthTransList.isPosPaymentGatewayTransactionExistByPgtxPayId(iTempPgtxPayId)) {
					BigDecimal dTmpAmount = oTempTrans.getAmount();
					dTmpAmount = dTmpAmount.add(oTempTrans.getTips());
					oTempTrans.setAmount(dTmpAmount);
					this.m_oUnattachPaymentPosGatewayTransactionList.add(oTempTrans);
				}
			}
		}
	}
	
	public PosPaymentGatewayTransactionsList getUnattachPaymentPosPaymentGatewayTransactionsList() {
		return this.m_oUnattachPaymentPosGatewayTransactionList;
	}
	
	// Set the reference check prefix no
	public void setReferenceCheckPrefix(String sCheckPrefixNo) {
		if(!AppGlobal.g_oFuncOutlet.get().getBusinessDay().isCheckNumGeneratedByOutlet())
			this.m_sCurrentCheckPrefixNo = sCheckPrefixNo;
	}
	
	// Check whether check is stock delivery invoice
	public boolean isStockDeliveryInvoice() {
		return this.m_bStockDeliveryInvoice;
	}
	
	public boolean isNoNeedPrintReceipt() {
		return this.m_bNoNeedPrintReceipt;
	}
	
	public int getLockTableStationIdWithoutLoadCheck(int iOutletId, String sTableNo, String sTableExtension) {
		int iLockStationId = 0;
		
		// Check if table is in use by other station
		m_oOutletTable.readByOutletIdTable(iOutletId, Integer.parseInt(sTableNo), sTableExtension);
		if(!m_oOutletTable.getOtblId().equals("")) {
			if(m_oOutletTable.getStationId() > 0){
				iLockStationId = m_oOutletTable.getStationId();
			}
		}
		
		return iLockStationId;
	}
	
	public boolean hasCheckDiscount(boolean bCurrentPartyOnly, boolean bUsedForDiscountOnly) {
		if(bCurrentPartyOnly){
			if(!m_oCurrentFuncCheckParty.getPartyCheckDiscount().isEmpty()) {
				if(bUsedForDiscountOnly) {
					for(PosCheckDiscount oCheckDiscount: m_oCurrentFuncCheckParty.getPartyCheckDiscount()) {
						if(oCheckDiscount.isUsedForDiscount())
							return true;
					}
					
					return false;
				} else
					return true;
			} else
				return false;
		}else{
			for(FuncCheckParty oFuncCheckParty: m_oFuncCheckPartyList) {
				if(!oFuncCheckParty.getPartyCheckDiscount().isEmpty()) {
					if(bUsedForDiscountOnly) {
						for(PosCheckDiscount oCheckDiscount: oFuncCheckParty.getPartyCheckDiscount()) {
							if(oCheckDiscount.isUsedForDiscount())
								return true;
						}
						
						return false;
					} else
						return true;
				}
			}
			return false;
		}
	}
	
	public boolean hasItemDiscount(boolean bCurrentPartyOnly, boolean bUsedForDiscountOnly) {
		boolean bHasDiscount = false;
		
		if(bCurrentPartyOnly){
			if(m_oCurrentFuncCheckParty.getWholeItemList().isEmpty())
				return bHasDiscount;
			
			outerloop:
			for(List<FuncCheckItem> oItemList:m_oCurrentFuncCheckParty.getWholeItemList()){
				for(FuncCheckItem oFuncCheckItem:oItemList) {
					if(oFuncCheckItem.hasItemDiscount(bUsedForDiscountOnly)) {
						bHasDiscount = true;
						break outerloop;
					}
				}
			}
			
		}else{
			outerloop:
			for(FuncCheckParty oFuncCheckParty: m_oFuncCheckPartyList) {
				if(oFuncCheckParty.getWholeItemList().isEmpty())
					continue;
				
				for(List<FuncCheckItem> oItemList:m_oCurrentFuncCheckParty.getWholeItemList()){
					for(FuncCheckItem oFuncCheckItem:oItemList) {
						if(oFuncCheckItem.hasItemDiscount(bUsedForDiscountOnly)) {
							bHasDiscount = true;
							break outerloop;
						}
					}
				}
				
			}
		}
		
		return bHasDiscount;
	}
	
	public boolean hasNewItem(boolean bCurrentPartyOnly) {
		boolean bNewItem = false;
		
		if(bCurrentPartyOnly)
			return m_oCurrentFuncCheckParty.hasNewItem();
		else{
			for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
				if(oFuncCheckParty.hasNewItem())
					bNewItem = true;
			}
			
			return bNewItem;
		}
	}
	
	public boolean hasModifiedItem(boolean bCurrentPartyOnly) {
		boolean bModifiedItem = false;
		
		if(bCurrentPartyOnly)
			return m_oCurrentFuncCheckParty.hasModifiedItem();
		else {
			for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
				if(oFuncCheckParty.hasModifiedItem()) {
					bModifiedItem = true;
					break;
				}
			}
			
			return bModifiedItem;
		}
	}
	
	// Get item code list that is included in provided redeem item list
	public ArrayList<HashMap<String, String>> getOrderedRedeemItemCodeList(ArrayList<String> oDefinedRedeemItem) {
		ArrayList<HashMap<String, String>> oOrderedRedeemItems = new ArrayList<HashMap<String, String>>();
		ArrayList<String> oSelectedRedeemItems = new ArrayList<String>();
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(HashMap<String, String> oRedeemItem:oFuncCheckParty.getOrderedRedeemItemCodeList(oDefinedRedeemItem)){
				
				if(!oSelectedRedeemItems.contains(oRedeemItem.get("code"))) {
					oSelectedRedeemItems.add(oRedeemItem.get("code"));
					oOrderedRedeemItems.add(oRedeemItem);
				}
				
				oOrderedRedeemItems.add(oRedeemItem);
			}
		}
		
		return oOrderedRedeemItems;
	}
	
	// Get the target FuncCheckItem as redeemed item
	public FuncCheckItem getTargetRedeemItemByItemCode(String sItemCode) {
		FuncCheckItem oTargetRedeemItem = null;
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			oTargetRedeemItem = oFuncCheckParty.getTargetRedeemItemByItemCode(sItemCode);
			if(oTargetRedeemItem != null)
				break;
		}
		
		return oTargetRedeemItem;
	}
	
	// Check whether check total is equal to print total
	public boolean isCheckTotalEqualToPrintTotal() {
		PosCheckPrintLog oCheckPrintLog = new PosCheckPrintLog();
		
		//get the latest print check total
		oCheckPrintLog.readLatestByCheckId(m_oCheck.getCheckId());
		if(oCheckPrintLog.getPrintCheckTotal().compareTo(m_oCheck.getCheckTotal()) == 0)
			return true;
		else 
			return false;
	}
	
	// Set cover
	public void setCover(int iCover, boolean bSetAutoGratuity){
		//attach gratuity when changing cover
		if (bSetAutoGratuity){
			int iOriginalGratId = 0, iNewGratId = 0;
			String sOriginalGratName = "", sNewGratName = "";
			boolean bNewGratuityExist = false;
			
			// Get Gratuity cover control setup
			iOriginalGratId = AppGlobal.g_oFuncStation.get().getCoverControlForGratuity(this.getCover());
			iNewGratId = AppGlobal.g_oFuncStation.get().getCoverControlForGratuity(iCover);
			
			// Remove old cover gratuity first
			if (iOriginalGratId > 0) {
				for (PosCheckGratuity oTempPosCheckGratuity : this.getActiveCheckGratuityList()) {
					if (iOriginalGratId > 0 && oTempPosCheckGratuity.getGratId() == iOriginalGratId){
						oTempPosCheckGratuity.setStatus(PosCheckGratuity.STATUS_DELETED);
						sOriginalGratName = oTempPosCheckGratuity.getName(AppGlobal.g_oCurrentLangIndex.get());
						break;
					}
				}
			}
			
			// Ignore new cover gratuity
			if (iNewGratId > 0) {
				for (PosCheckGratuity oTempPosCheckGratuity : this.getActiveCheckGratuityList()) {
					if (iNewGratId > 0 && oTempPosCheckGratuity.getGratId() == iNewGratId){
						bNewGratuityExist = true;
						break;
					}
				}
				
				if (!bNewGratuityExist) {
					// Get New PosGratuity object by id
					PosGratuity oPosGratuity = null;
					for (PosGratuity oTempPosGratuity : AppGlobal.g_oFuncOutlet.get().getPosGratuityList()){
						if (oTempPosGratuity.getGratId() == iNewGratId) {
							oPosGratuity = oTempPosGratuity;
							break;
						}
					}
					
					if (oPosGratuity != null){
						// Add new cover gratuity
						PosCheckGratuity oPosCheckGratuity = new PosCheckGratuity();
						oPosCheckGratuity.setBdayId(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId());
						if(!getCheckBusinessPeriodId().isEmpty())
							oPosCheckGratuity.setBperId(getCheckBusinessPeriodId());
						else
							oPosCheckGratuity.setBperId(AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId());
						
						oPosCheckGratuity.setShopId(AppGlobal.g_oFuncOutlet.get().getShopId());
						oPosCheckGratuity.setOletId(AppGlobal.g_oFuncOutlet.get().getOutletId());
						oPosCheckGratuity.setCptyId(getCheckPartyList().get(0).getCptyId());
						oPosCheckGratuity.setGratId(oPosGratuity.getGratId());
						oPosCheckGratuity.setName(oPosGratuity.getName());
						oPosCheckGratuity.setShortName(oPosGratuity.getShortName());
						oPosCheckGratuity.setMethod(oPosGratuity.getMethod());
						
						// Set updated input value to Check Gratuity List
						if (oPosGratuity.getMethod().equals(PosGratuity.METHOD_PERCENTAGE)){
							oPosCheckGratuity.setTotal(oPosGratuity.getRate().multiply(this.getItemTotal()));
							oPosCheckGratuity.setRoundTotal(oPosCheckGratuity.getTotal());
						// Fix amount
						}else{
							oPosCheckGratuity.setTotal(oPosGratuity.getFixAmount());
							oPosCheckGratuity.setRoundTotal(oPosCheckGratuity.getTotal());
						}
						oPosCheckGratuity.setRoundAmount(oPosCheckGratuity.getRoundTotal().subtract(oPosCheckGratuity.getTotal()));
						oPosCheckGratuity.setRate(oPosGratuity.getRate());
						
						oPosCheckGratuity.setStatus(PosCheckGratuity.STATUS_ACTIVE);
						this.addCheckGratuityToList(oPosCheckGratuity);
						sNewGratName = oPosCheckGratuity.getName(AppGlobal.g_oCurrentLangIndex.get());
					}
				}
			}
			
			// Calc Check and update basket
			this.calcCheck();
			for (FuncCheckListener listener : listeners) {
				listener.FuncCheck_updateBasketExtendBarCheckTotal();
			}
			
			if (iOriginalGratId > 0 && iNewGratId <= 0 && !sOriginalGratName.isEmpty()){
				FormDialogBox oFormDialogBox = new FormDialogBox(AppGlobal.g_oLang.get()._("ok"), null);
				oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._("warning"));
				oFormDialogBox.setMessage(AppGlobal.g_oLang.get()._("gratuity") + " " + sOriginalGratName + " " + AppGlobal.g_oLang.get()._("is_voided"));
				oFormDialogBox.show();
				oFormDialogBox = null;
			}
			
			if (!sOriginalGratName.isEmpty() || !sNewGratName.isEmpty()){
				// Add "cover_gratuity" log to action log list
				String sMsg = "from (" + sOriginalGratName + ") to (" + sNewGratName + ")";
				AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.edit_check_gratuity.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), "", "", "", "", sMsg);
				
				// Send action log
				AppGlobal.g_oActionLog.get().handleActionLog(false);
			}
		}
		
		m_oCheck.setGuests(iCover);
	}
	
	// Get no. of cover
	public int getCover(){
		return m_oCheck.getGuests();
	}
	
	// Set the check open time and do override
	public void setCheckOpenTimeValue(int iOutletId, boolean bNotSetCheckTime, int iAppliedUserId) {
		DateTime oCheckOpenLocTime = null, oOrderLocTime = null, oCurrentTime = null;
		String sCheckOpenTime = "", oOrderTime = "";
		
		DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		DateTimeFormatter oTimeFormatter = DateTimeFormat.forPattern("HH:mm:ss");
		
		// Get current time
		oCurrentTime = AppGlobal.getCurrentTime(false);
		
		// Item order time for new items
		oOrderLocTime = oCurrentTime;
		oOrderTime = formatter.print(AppGlobal.convertTimeToUTC(oCurrentTime));
		
		// Get current business period ID
		String sCurrentBusinessPeriodId = "";
		if(!m_oCheck.getBusinessPeriodId().isEmpty())
			sCurrentBusinessPeriodId = m_oCheck.getBusinessPeriodId();
		else
			sCurrentBusinessPeriodId = AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId();
		
		if(this.isOldCheck()) {
			// Old check
			oCheckOpenLocTime = m_oCheck.getOpenLocTime();
			sCheckOpenTime = m_oCheck.getOpenTime();
			
			m_oCheck.setModifiedLocTime(oCurrentTime);
			m_oCheck.setModifiedTime(formatter.print(AppGlobal.convertTimeToUTC(oCurrentTime)));

			if(iAppliedUserId == 0)
				m_oCheck.setModifiedUesrId(AppGlobal.g_oFuncUser.get().getUserId());
			else
				m_oCheck.setModifiedUesrId(iAppliedUserId);
			m_oCheck.setModifiedStationId(AppGlobal.g_oFuncStation.get().getStationId());
			
		}else if(!bNotSetCheckTime){
			// New check
			oCheckOpenLocTime = oCurrentTime;
			sCheckOpenTime = formatter.print(AppGlobal.convertTimeToUTC(oCurrentTime));
		
			// Set check period ID
			m_oCheck.setBusinessPeriod(sCurrentBusinessPeriodId);
		
			// Set open check local time and utc time
			m_oCheck.setOpenLocTime(oCheckOpenLocTime);
			m_oCheck.setOpenTime(sCheckOpenTime);
		}
		
		// Set new item period ID
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList){
			oFuncCheckParty.updateMultipleCheckItemInfoForNewItem(m_oCheck.getBusinessDayId(), sCurrentBusinessPeriodId, m_oCheck.getCheckId(), m_oCheck.getShopId(), iOutletId, oOrderTime, oOrderLocTime, iAppliedUserId);
		}
		
		//check override conditions
		checkOverrideConditions(oTimeFormatter.print(oCurrentTime), oTimeFormatter.print(oCurrentTime), m_oCheckTable.getTable(), m_oCheckTable.getTableExt(), false);
		
		//calculate the check first
		calcCheck();

	}
	
	// Lock table function
	// Input: iShopId - Shop ID, iOutletId - Outlet ID, iUserId - User ID, iStationId - Station ID, sTableNo - Table no., sTableExtension - Table extension 
	// Output: Error message - BLANK -> success
	public boolean lockTable(String sBusinessDayId, String sBusinessPeriodId, int iShopId, int iOutletId, String sTableNo, String sTableExtension, boolean bLoadCheck, boolean bSkipLockTable, String sOrderingMode, String sVerifyKey, boolean bSaveKey){
		String sCheckId = "";
		
		m_sErrorMessage = "";
		
		// OM Try to lock table (pos_outlet_tables)
		m_oOutletTable.init();
		
		if(!sTableNo.equals(""))
			this.getAndLockTableWithoutLoadCheck(iShopId, iOutletId, Integer.parseInt(sTableNo), sTableExtension, bSkipLockTable, (!m_bStockDeliveryInvoice && bLoadCheck), sVerifyKey, bSaveKey);
		else
			this.getAndLockTableWithoutLoadCheck(iShopId, iOutletId, -1, sTableExtension, bSkipLockTable, (!m_bStockDeliveryInvoice && bLoadCheck), sVerifyKey, bSaveKey);

		if (m_sErrorMessage.equals(AppGlobal.g_oLang.get()._("invalid_verification_key")))
			return false;

		if(!m_oOutletTable.getOtblId().equals("")) {
			if (m_oOutletTable.getStationId() > 0 && m_oOutletTable.getStationId() != AppGlobal.g_oFuncStation.get().getStationId()) {
				FuncStation oStation = new FuncStation();
				if(oStation.loadStationById(m_oOutletTable.getStationId())){
					String sStationName = oStation.getName(AppGlobal.g_oCurrentLangIndex.get());
					m_sErrorMessage = AppGlobal.g_oLang.get()._("table_is_locked_by_station")+" "+sStationName;
				}else
					m_sErrorMessage = AppGlobal.g_oLang.get()._("table_is_locked_by_station")+" "+m_oOutletTable.getStationId();
				return false;
			}else {
				//update outlet table information
				m_oOutletTable.setStationId(AppGlobal.g_oFuncStation.get().getStationId());
			}
		} else {
			if ((!m_bStockDeliveryInvoice && bLoadCheck)) {
				// Check if there is any problem in load check
				if (!m_sErrorMessage.equals(""))
					// Error in load check
					return false;
			}
		}

		if(m_bStockDeliveryInvoice){
			// Load stock delivery invoice
			// According to the design, table no. = stock delivery invoice record id
			if(m_oPosStockDeliveryInvoice.readById(Integer.parseInt(sTableNo), 1)){
				// Invoice is found
				addOldInvoiceItemToItemList();
			}else{
				if (m_oOutletTable.isVacant()) {
					m_oOutletTable.setStatus(PosOutletTable.STATUS_NEW_TABLE);
					m_oOutletTable.addUpdate(true);
				}
				
				// New invoice
				m_oCheck.setBusinessDayId(sBusinessDayId);
				m_oCheck.setTableId(m_oOutletTable.getOtblId());
				m_oCheck.setShopId(iShopId);
				m_oCheck.setOutletId(iOutletId);
				m_oCheck.setOpenStatId(AppGlobal.g_oFuncStation.get().getStationId());
				
			}
			
			// Set ordering mode
			m_oCheck.setOrderingMode(PosCheck.ORDERING_MODE_DELIVERY);
			
		}else{
			// Normal load check
			sCheckId = m_oOutletTable.getCheckId();
			
			// If pos_outlet_tables record does not have check ID, check with pos_checks and pos_check_tables to double check if there is a check in this table
			// Skip checking in fast food mode
			if(sCheckId.equals("") && m_bFastFoodCheck == false){
				PosCheck oPosCheck = new PosCheck(AppGlobal.g_oFuncUser.get().getUserId());
				String sResult = null;
				if(!sTableNo.equals(""))
					sResult = oPosCheck.getCheckIdByTable(sBusinessDayId, iOutletId, Integer.parseInt(sTableNo), sTableExtension, 0);
				else 
					sResult = oPosCheck.getCheckIdByTable(sBusinessDayId, iOutletId, -1, sTableExtension, 0);
				
				if (sResult.equals(PosCheck.API_RESULT_SUCCESS) && !oPosCheck.getCheckId().equals("")) {
					// *********************************************************************************
					// Check is found but not show in floor plan (missing check id in pos_outlet_tables)
					sCheckId = oPosCheck.getCheckId();
					
					// Update back the pos_outlet_tables
					m_oOutletTable.setCheckId(sCheckId);
					if(oPosCheck.getPrintCount() > 0)
						m_oOutletTable.setStatus(PosOutletTable.STATUS_CHECK_PRINTED);
					else
						m_oOutletTable.setStatus(PosOutletTable.STATUS_OCCUPIED);
					m_oOutletTable.addUpdate(true);
					
					// Reload the check
					sResult = m_oCheck.loadCheckById(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getOutletId(), sCheckId, m_oOutletTable, AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncStation.get().getStationId());
					
					// Write a error log!!!
					AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "", AppGlobal.g_oFuncUser.get().getUserId() + "", "ERROR: Missing check in pos_outlet_tables for table: " + sTableNo + sTableExtension + ", check id: " + sCheckId + ", record id: " + m_oOutletTable.getOtblId());
				}
				
				if (sResult.equals(PosCheck.API_RESULT_INVALID_BDAY) || sResult.equals(PosCheck.API_RESULT_MISSING_BDAY)) {
					if(sResult.equals(PosCheck.API_RESULT_INVALID_BDAY))
						m_sErrorMessage = AppGlobal.g_oLang.get()._("invalid_business_day");
					else
						m_sErrorMessage = AppGlobal.g_oLang.get()._("missing_active_business_day");

					String sLogMessage = "";
					if(sResult.equals(PosCheck.API_RESULT_INVALID_BDAY))
						sLogMessage = "Invalid business day";
					else
						sLogMessage = "Daily start has been carried out";
					
					sLogMessage += " [table: "+this.getTableNoWithExtensionForDisplay()+"]";
					
					AppGlobal.writeErrorLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), AppGlobal.g_oFuncStation.get().getStationId()+"", Integer.toString(AppGlobal.g_oFuncUser.get().getUserId()), sLogMessage);

					AppGlobal.startKillSingleStation(AppGlobal.g_oFuncStation.get().getStationId(), AppGlobal.g_oLang.get()._("station_is_killed_by_invalid_business_day"));
					return false;
				}
			}	
			
			if(sCheckId.compareTo("") > 0){
				//TODO
				//Check user authority about can recall check or not
				
				// If old check, load the check
				if(bLoadCheck) {
					//check will be locked during load check
					if(loadCheck(sCheckId) == false)
						return false;
					
					// Prevent loading paid check
					if(this.isPaid(false)){
						// Not allow to load a paid check
						
						// Update back the pos_outlet_tables
						m_oOutletTable.setCheckId("");
						if (!m_oOutletTable.isLockedByPortalStationByKey())
							m_oOutletTable.setStationId(0);
						m_oOutletTable.setStatus(PosOutletTable.STATUS_VACANT);
						m_oOutletTable.addUpdate(true);
						
						// Write a error log!!!
						AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "", AppGlobal.g_oFuncUser.get().getUserId() + "", "ERROR: Load a paid check for table: " + sTableNo + sTableExtension + ", check id: " + sCheckId);
						m_sErrorMessage = AppGlobal.g_oLang.get()._("cannot_load_the_check");
						return false;
					}
					
					if(AppGlobal.g_oFuncMixAndMatch.get().isSupportMixAndMatch() == true)
						// support mix and match	
						AppGlobal.g_oFuncMixAndMatch.get().getMixAndMatchRule(this);
				}else {
					m_oOutletTable.addUpdate(true);
					m_oCheck.setChksId(m_oOutletTable.getCheckId());
				}
				
			}else{
				

				// New check
				m_oCheck.setBusinessDayId(sBusinessDayId);
				m_oCheck.setShopId(iShopId);
				m_oCheck.setOutletId(iOutletId);
				m_oCheck.setOpenStatId(AppGlobal.g_oFuncStation.get().getStationId());
				
				// Set ordering mode
				m_oCheck.setOrderingMode(sOrderingMode);
			}
		}
		
		// Store the table no. for send check
		/*m_sTableNo = sTableNo;
		m_sTableExtension = sTableExtension;*/

		// Set the lock table flag to true
		m_bIsTableLock = true;
		
		return true;
	}
	
	// Lock check: set chks_lock_stat_id, chks_lock_user_id, chks_lock_time, chks_lock_loctime
	public boolean lockCheck() {
		m_sErrorMessage = "";
		
		DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		m_oCheck.setLockStationId(AppGlobal.g_oFuncStation.get().getStationId());
		m_oCheck.setLockUserId(AppGlobal.g_oFuncUser.get().getUserId());
		m_oCheck.setLockLocTime(AppGlobal.getCurrentTime(false));
		m_oCheck.setLockTime(formatter.print(AppGlobal.convertTimeToUTC(m_oCheck.getLockLocTime())));
		String sResult = this.updateCheck(false, false, PosCheckItem.SEND_MODE_NEW_ITEM, 0, false, 0, 0, 0, "", false, false, false, false, 0, 0, false, false);
		
		if(!sResult.equals(PosCheck.API_RESULT_SUCCESS))
			return false;
		
		return true;
	}
	
	// Unlock check: unset chks_lock_stat_id, chks_lock_user_id, chks_lock_time, chks_lock_loctime
	public void unlockCheck() {
		m_oCheck.setLockStationId(0);
		m_oCheck.setLockUserId(0);
		m_oCheck.setLockLocTime(null);
		m_oCheck.setLockTime(null);
		
		this.updateCheck(false, false, PosCheckItem.SEND_MODE_NEW_ITEM, 0, false, 0, 0, 0, "", false, false, false, false, 0, 0, false, false);
	}
	
	public boolean changeTable(String sTableNo, String sTableExtension, boolean bIsFastfoodMode) {
		String sCheckId = m_oCheck.getCheckId();
		String sOriTableNo = "", sOriTableExtension = "", sOriTableWithExt = "" , sNewTableWithExt = "", sNewTableNo = "";
		PosOutletTable oOldTable = null, oTargetNewTable = null;
		m_sErrorMessage = "";
		
		if(sTableNo.equals(m_sTableNo) && sTableExtension.equals(m_sTableExtension)) {
			m_sErrorMessage = AppGlobal.g_oLang.get()._("same_table_no");
			return false;
		}
		
		// For fast food mode, don't lock the table and replace the corresponding table directly
		if(bIsFastfoodMode) {
			m_sTableNo = sTableNo;
			m_sTableExtension = sTableExtension;
			m_oCheckTable.setOutletId(AppGlobal.g_oFuncOutlet.get().getOutletId());
			m_oCheckTable.setTable(Integer.parseInt(m_sTableNo));
			m_oCheckTable.setTableExt(sTableExtension);
			return true;
		}
		
		// Try to lock the target table (pos_outlet_tables)
		oTargetNewTable = new PosOutletTable();
		oTargetNewTable.setShopId(AppGlobal.g_oFuncOutlet.get().getShopId());
		oTargetNewTable.setOutletId(AppGlobal.g_oFuncOutlet.get().getOutletId());
		oTargetNewTable.setStationId(AppGlobal.g_oFuncStation.get().getStationId());
		oTargetNewTable.setTable(Integer.parseInt(sTableNo));
		oTargetNewTable.setTableExtension(sTableExtension);
		oTargetNewTable.readAndLock(null);
		if (oTargetNewTable.getStationId() > 0 && oTargetNewTable.getStationId() != AppGlobal.g_oFuncStation.get().getStationId()) {
			PosStation oLockedStation = new PosStation();
			oLockedStation.readById(oTargetNewTable.getStationId());
			m_sErrorMessage = AppGlobal.g_oLang.get()._("table_is_locked_by_station") + " " + oLockedStation.getName(AppGlobal.g_oCurrentLangIndex.get());
			return false;
		}
		
		if(!oTargetNewTable.getCheckId().equals("") || oTargetNewTable.getTag().equals(PosOutletTable.TAG_SEAT_IN)) {
			m_sErrorMessage = AppGlobal.g_oLang.get()._("table_is_already_exist");
			if(!oTargetNewTable.getOtblId().equals("")) {
				oTargetNewTable.setStationId(0);
				oTargetNewTable.addUpdate(true);
			}
			return false;
		}
		
		if(this.isOldCheck()) {
			oTargetNewTable.setCheckId(sCheckId);
			oTargetNewTable.setStatus(m_oOutletTable.getStatus());
		}else {
			oTargetNewTable.setStatus(PosOutletTable.STATUS_VACANT);
			// For changing a reserved new table, copy the outlet table tag and info
			if(m_oOutletTable.getTag().equals(PosOutletTable.TAG_SEAT_IN) && 
					(m_oOutletTable.isVacant() || m_oOutletTable.isNewTable())) {
				oTargetNewTable.setTag(PosOutletTable.TAG_SEAT_IN);
				oTargetNewTable.setInfo(m_oOutletTable.getInfo());
			}
		}	
		
		// Change global table number record
		sOriTableNo = m_sTableNo;
		sOriTableExtension = m_sTableExtension;
		m_sTableNo = sTableNo;
		m_sTableExtension = sTableExtension;
		m_sTableName = AppGlobal.g_oFuncOutlet.get().getTableName(m_sTableNo, m_sTableExtension);
		m_oCheckTable.setTable(Integer.parseInt(m_sTableNo));
		m_oCheckTable.setTableExt(sTableExtension);
		// Copy the outlet table object for unlock table at the end of the function
		oOldTable = new PosOutletTable();
		oOldTable.copyFromOtherOutletTable(m_oOutletTable);
		oOldTable.setCheckId("");
		oOldTable.setStationId(0);
		
		// check if current function support to mark cleaning status
		if(isSupportCleaningStatusFunction(AppGlobal.FUNC_LIST.change_table.name())) {
			oOldTable.setStatus(PosOutletTable.STATUS_CLEANING_TABLE);
			AppGlobal.updateCleaningTableList(oOldTable, AppGlobal.getCurrentTime(false));
		}else
			oOldTable.setStatus(PosOutletTable.STATUS_VACANT);

		oOldTable.setTag(PosOutletTable.TAG_NO);
		oOldTable.setInfo(null);
		
		//copy the new outlet table to m_oOutletTable
		m_oOutletTable.init();
		m_oOutletTable.copyFromOtherOutletTable(oTargetNewTable);
		
		//print special slip if it is old check
		if(this.isOldCheck()) {
			JSONObject oHeaderJSONObject = new JSONObject(), oInfoJSONObject = new JSONObject(), oTempJSONObject = null;
			JSONArray oTempArray = new JSONArray(), oCitmIdArray = new JSONArray();
			try {
				//form header
				oHeaderJSONObject.put("header", "Change Table");
				oTempJSONObject = new JSONObject();
				if (sOriTableNo.equals("0"))
					sOriTableNo = "";
				if (sOriTableExtension != null && !sOriTableExtension.isEmpty())
					sOriTableWithExt = sOriTableNo+sOriTableExtension;
				else
					sOriTableWithExt = sOriTableNo;
				if(!m_sTableNo.equals("0"))
					sNewTableNo = m_sTableNo;
				if (!m_sTableExtension.isEmpty())
					sNewTableWithExt = sNewTableNo+m_sTableExtension;
				else
					sNewTableWithExt = sNewTableNo;
				oTempJSONObject.put("message", sOriTableWithExt + " -> " + sNewTableWithExt);
				oTempArray.put(oTempJSONObject);
				
				String[] sOriTableName;
				oTempJSONObject = new JSONObject();
				JSONObject oTableNameJSONObject = new JSONObject();
				if(sOriTableNo.equals(""))
					sOriTableName = AppGlobal.g_oFuncOutlet.get().getTableName("0", sOriTableExtension);
				else
					sOriTableName = AppGlobal.g_oFuncOutlet.get().getTableName(sOriTableNo, sOriTableExtension);
				for (int i = 1; i <= AppGlobal.LANGUAGE_COUNT; i++) {
					oTableNameJSONObject.put("TargetTableNameL" + i, m_sTableName[i - 1]);
					oTableNameJSONObject.put("OriginalTableNameL" + i, sOriTableName[i - 1]);
				}
				oTempJSONObject.put("message", oTableNameJSONObject);
				oTempArray.put(oTempJSONObject);
				oHeaderJSONObject.put("messages", oTempArray);
				
				//form info
				oInfoJSONObject.put("stationId", AppGlobal.g_oFuncStation.get().getStationId());
				oInfoJSONObject.put("userName", AppGlobal.g_oFuncUser.get().getUserName(1));
				oInfoJSONObject.put("userId", AppGlobal.g_oFuncUser.get().getUserId());
				oInfoJSONObject.put("table", m_sTableNo);
				
				//print special slip "change_table"
				// *****************************************************************
				// Create thread to print special slip
				AppThreadManager oAppThreadManager = new AppThreadManager();
				
				// Add the method to the thread manager
				// Thread 1 : Print special slip
				// Create parameter array
				Object[] oParameters = new Object[5];
				oParameters[0] = PosActionPrintQueue.KEY_CHANGE_TABLE;
				oParameters[1] = oHeaderJSONObject;
				oParameters[2] = oInfoJSONObject;
				oParameters[3] = AppGlobal.g_oCurrentLangIndex.get();
				oParameters[4] = 0;
				oAppThreadManager.addThread(1, m_oCheck, "printSpecialSlip", oParameters);
				
				JSONObject oPosCheckItemForMenuJSONObject = new JSONObject();
				JSONArray oPosCheckItemForMenuJSONArray = new JSONArray();
				HashMap<Integer, FuncMenuItem> oMenuItems = new HashMap<Integer, FuncMenuItem>();
				//print special slip "change_table_item"
				for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
					for(List<FuncCheckItem> oItemListForSingleSeat:oFuncCheckParty.getWholeItemList()){
						for(FuncCheckItem oCheckItem:oItemListForSingleSeat) {
							if(oCheckItem.isOldItem() && (!oCheckItem.isPendingItem() || oCheckItem.isPartialPendingItem())) {
								oTempJSONObject = new JSONObject();
								oTempJSONObject.put("id", oCheckItem.getCheckItem().getCitmId());
								oCitmIdArray.put(oTempJSONObject);
								if (!oMenuItems.containsKey(oCheckItem.getCheckItem().getItemId()))
									oMenuItems.put(oCheckItem.getCheckItem().getItemId(), AppGlobal.g_oFuncMenu.get().getFuncMenuItemByItemId(oCheckItem.getCheckItem().getItemId()));
							}
						}
					}
				}
				
				oInfoJSONObject.put("citmIds", oCitmIdArray);
				for (Integer iItemId : oMenuItems.keySet()) {
					oPosCheckItemForMenuJSONObject = new JSONObject();
					if(oMenuItems.get(iItemId) != null && oMenuItems.get(iItemId).getMenuItem() != null){
						for (int i = 1; i <= 5; i++)
							oPosCheckItemForMenuJSONObject.put("item_info_l" + i,
									oMenuItems.get(iItemId).getMenuItem().getInfo(i));
						
					}else
						AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
								AppGlobal.g_oFuncUser.get().getUserId() + "",
								"Fail to get menu item(id: " + iItemId + ") in change table");
					
					oPosCheckItemForMenuJSONArray.put(iItemId, oPosCheckItemForMenuJSONObject);
				}
				oInfoJSONObject.put("menuItems", oPosCheckItemForMenuJSONArray);
				// Thread 2 : Print special slip
				// Create parameter array
				Object[] oParameter2s = new Object[5];
				oParameter2s[0] = PosActionPrintQueue.KEY_CHANGE_TABLE_ITEM;
				oParameter2s[1] = oHeaderJSONObject;
				oParameter2s[2] = oInfoJSONObject;
				oParameter2s[3] = AppGlobal.g_oCurrentLangIndex.get();
				oParameter2s[4] = 0;
				oAppThreadManager.addThread(2, m_oCheck, "printSpecialSlip", oParameter2s);
				
				// Run the thread without wait
				oAppThreadManager.runThread();

			}catch(JSONException jsone) {
				AppGlobal.stack2Log(jsone);
			}
			
			//update pos_check_tables
			PosCheckTable oCheckTable = new PosCheckTable();
			oCheckTable.readByCheckId(m_oOutletTable.getCheckId());
			if(!oCheckTable.getCtblId().equals("")) {
				oCheckTable.setTable(Integer.parseInt(sTableNo));
				oCheckTable.setTableExt(sTableExtension);
				oCheckTable.addUpdate(true, AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncStation.get().getStationId(), AppGlobal.g_oFuncOutlet.get().getTimeZone(), AppGlobal.g_oFuncOutlet.get().getTimeZoneName());
			}
			
			//add "change_table" to action log list
			AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.change_table.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), "", "", "", "", sOriTableWithExt+" -> "+sNewTableWithExt);
			AppGlobal.g_oActionLog.get().handleActionLog(false);
		}
		
		// Unlock the original outlet table record
		oOldTable.addUpdate(true);
		
		// Update cooking overtime table list
		handleCheckForOverCookingTimeTableList(sOriTableNo, sOriTableExtension, true);	//remove the original table from list
		handleCheckForOverCookingTimeTableList(null, null, false);	//remove the original table from list
		
		return true;
	}
	
	public void unlockTable(boolean sSaveCheck, boolean bQuitCheckFunction){
		// Unlock table
		if(m_oOutletTable.getOtblId().equals(""))
			return;
		
		// Set the lock table flag to false
		m_bIsTableLock = false;
		
		if (!m_oOutletTable.isLockedByPortalStationByKey())
			m_oOutletTable.setStationId(0);
		
		if(sSaveCheck && this.isOldCheck()) {
			// Old check
			m_oCheck.setLockTime("");
			m_oCheck.setLockLocTime(null);
			m_oCheck.setLockUserId(0);
			m_oCheck.setLockStationId(0);
			
			if(bQuitCheckFunction) {
				String sResult = updateCheck(false, true, PosCheckItem.SEND_MODE_ALL_ITEM, 0, true, 0, 0, 0, "", false, false, false, false, 0, 0, false, false);
				if(!sResult.equals(PosCheck.API_RESULT_SUCCESS)) {
					if(m_sErrorMessage.isEmpty())
						m_sErrorMessage = AppGlobal.g_oLang.get()._("fail_to_save_check");
					return;
				}
			}else {
				String sResult = updateCheck(false, false, PosCheckItem.SEND_MODE_NEW_ITEM, 0, true, 0, 0, 0, "", false, false, false, false, 0, 0, false, false);

				if(!sResult.equals(PosCheck.API_RESULT_SUCCESS)) {
					if(m_sErrorMessage.isEmpty())
						m_sErrorMessage = AppGlobal.g_oLang.get()._("fail_to_save_check");
					return;
				}
			}
		}else{
			if(!this.isOldCheck())
				m_oOutletTable.setStatus(PosOutletTable.STATUS_VACANT);
			
			// Update outlet table only
			m_oOutletTable.addUpdate(true);
		}
	}
	
	// Load check from OM
	public boolean loadCheck(String sCheckId){
		m_sErrorMessage = "";
		
		// Set guest
		setCover(m_oCheck.getGuests(), false);
		
		//form the check party list
		this.addOldCheckPartyToList();
		
		//form the check discount list
		this.addOldCheckDiscountToList();
		
		//form the check extra info list
		this.addOldCheckExtraInfoToList();
		
		// form the check tax sc ref list
		this.addOldCheckTaxScRefList();
		
		//form the check payment list
		this.addOldCheckPaymentToList();
		
		//form the payment gateway transactions list
		this.addOldPaymentGatewayTransToList();
		
		// get the flag "allow continuous print" from extra_info
		this.setAllowContinuousPrint("");
		String sAllowContPrint = getCheckExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_CONTINUOUS_PRINT, PosCheckExtraInfo.VARIABLE_ALLOW_CONTINUOUS_PRINT, 0);
		if (sAllowContPrint != null) {
			if (sAllowContPrint.equals(PosCheckExtraInfo.VALUE_TRUE))
				this.setAllowContinuousPrint(FuncCheck.ALLOW_CONTINUOUS_PRINT);
			else if (sAllowContPrint.equals(PosCheckExtraInfo.VALUE_FALSE))
				this.setAllowContinuousPrint(FuncCheck.NOT_ALLOW_CONTINUOUS_PRINT);
		}
		//TODO
		//check synchronize
		
		return true;
	}
	
	public boolean isNewCheckWithNoItem() {
		boolean bRet = true;
		
		if(this.isOldCheck())
			return false;
		
		// Check if item is added or not for new check
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				if(!oItemList.isEmpty()){
					bRet = false;
					break;
				}
			}
		}
		
		return bRet;
	}
	
	// Call after finish function on items
	public void updateCheckItemsAfterFunction(){
		calcCheck();
		
		if(this.isOldCheck()) {
			// If the check has check discount(s), set all old items is modified for check update
			if(this.hasCheckDiscount(true, false)) {
				for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
					for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
						for (FuncCheckItem oFuncCheckItem:oItemList){
							PosCheckItem oCheckItem = oFuncCheckItem.getCheckItem();
							oCheckItem.setModified(true);
						}
					}
				}
			}
			updateCheck(false, true, PosCheckItem.SEND_MODE_OLD_ITEM, 0, false, 0, 0, 0, "", false, false, false, false, 0, 0, false, false);
		}
	}
	
	public String sendCheck(boolean bPrintGuestCheck, boolean bPayCheck, boolean bInternalSendCheck, int iOutletId, String sOutletName, int iCheckPrintQueueId, int iCheckFormatId, boolean bDetailCheck, int iGetUpdateRecord, int iReceiptPrtqId, int iReceiptFormatId, String sOrderingMode, boolean bWithPayments, boolean bIsContPrint){
		boolean bOldCheck = isOldCheck();
		m_sErrorMessage = "";
		
		//re-sequence the item
		updateCheckItemSequence(false, true, 0);
		updateCheckDiscountSequence(true);
		
		m_oCheck.setOrderingMode(sOrderingMode);
		
		//reset locked information
		m_oCheck.setLockTime("");
		m_oCheck.setLockLocTime(null);
		m_oCheck.setLockUserId(0);
		m_oCheck.setLockStationId(0);
		
		// Update printing information if it is print check
		if(bPrintGuestCheck && !bDetailCheck) {
			int iPrintCount = this.getPrintCount();
			DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
			
			iPrintCount++;
			m_oCheck.setPrintLocTime(AppGlobal.getCurrentTime(false));
			m_oCheck.setPrintTime(formatter.print(AppGlobal.convertTimeToUTC(m_oCheck.getPrintLocTime())));
			m_oCheck.setPrintUserId(AppGlobal.g_oFuncUser.get().getUserId());
			m_oCheck.setPrintStationId(AppGlobal.g_oFuncStation.get().getStationId());
			m_oCheck.setPrintCount(iPrintCount);
		}
		
		// Update outlet table
		if (!bPrintGuestCheck && !bPayCheck && !bInternalSendCheck && !m_oOutletTable.isLockedByPortalStationByKey())
			m_oOutletTable.setStationId(0);
		if(this.hasNewItem(false) && iReceiptPrtqId == 0 && !PosCheck.ORDERING_MODE_DELIVERY.equals(sOrderingMode)) {
			if((m_oOutletTable.isVacant() || m_oOutletTable.isNewTable())
					&& m_oOutletTable.isSeatInTag()) {
				// update chks_book_date and chks_resv_refno_with_prefix to store tms information
				JSONObject oInfo = m_oOutletTable.getInfo();
				if(oInfo != null){
					String sAction = oInfo.optString("action");
					if(sAction.equals("new_check")){
						String sBookDate = oInfo.optString("book_date");
						String sResvNo = oInfo.optString("refno_with_prefix");
						if(!sBookDate.isEmpty()) {
							try {
								DateTimeFormatter format = DateTimeFormat.forPattern("yyyy-MM-dd");
								DateTime oBookdate = AppGlobal.convertTimeToLocal(format.parseDateTime(sBookDate));
								m_oCheck.setResvBookDate(oBookdate);
							} catch (Exception e) {
								e.printStackTrace();
								AppGlobal.stackToString(e);
							}
						}
						if(!sResvNo.isEmpty())
							m_oCheck.setRefnoWithPrefix(sResvNo);
						
						// Clear TMS information
						m_oOutletTable.setTag(PosOutletTable.TAG_NO);
						if (!m_oOutletTable.isLockedByPortalStationByKey())
							m_oOutletTable.setInfo(null);
						else {
							// Keep verify key for portal station
							JSONObject oOldInfo = m_oOutletTable.getInfo();
							JSONObject oNewInfo = new JSONObject();
							String sVerifyKey = oOldInfo.optString("verify_key");
							try {
								oNewInfo.put("verify_key", sVerifyKey);
							} catch(JSONException jsone) {
								AppGlobal.stack2Log(jsone);
							}
							m_oOutletTable.setInfo(oNewInfo);
						}
					}
				}
			}
			m_oOutletTable.setStatus(PosOutletTable.STATUS_OCCUPIED);
		}
		
		if(AppGlobal.g_iLogLevel >= 9){
			AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "Before update check");
		}
		
		//check whether need to send both new and old items
		boolean bSendNewAndOldItem = false;
		if(this.isOldCheck()) {
			for(FuncCheckParty oFuncCheckParty: this.m_oFuncCheckPartyList) {
				if(!oFuncCheckParty.getPartyCheckDiscount().isEmpty()) {
					for(PosCheckDiscount oPosCheckDiscount: oFuncCheckParty.getPartyCheckDiscount()) {
						if(oPosCheckDiscount.getCdisId().compareTo("") > 0)
							bSendNewAndOldItem = true;
					}
				}
				
				// If the check has minimum charge, system need to send all items when user click "Send Check" but no new item is added
				for (List<FuncCheckItem> oFuncItemList : oFuncCheckParty.getWholeItemList()) {
					for (FuncCheckItem oFuncCheckItem : oFuncItemList) {
						if (oFuncCheckItem.isMinimumChargeItem()) {
							bSendNewAndOldItem = true;
							break;
						}
					}
				}
				
				// Remove "split_revenue_item" extra info if no new split revenue item is added in first time split revenue
				for (List<FuncCheckItem> oFuncItemList : oFuncCheckParty.getWholeItemList()) {
					for (FuncCheckItem oFuncCheckItem : oFuncItemList) {
						if (oFuncCheckItem.isSplitRevenueParent() && oFuncCheckItem.getCheckItem().getChildCount() == 0) {
							oFuncCheckItem.removeExtraInfoFromList(PosCheckExtraInfo.BY_ITEM, PosCheckExtraInfo.SECTION_ITEM_TYPE, PosCheckExtraInfo.VARIABLE_SPLIT_REVENUE_ITEM);
							oFuncCheckItem.resetBasicCalculateMethod();
							break;
						}
					}
				}
			}
		}
		
		// Save check
		String sSaveCheckResult = PosCheck.API_RESULT_FAIL;
		boolean bExit = false;
		
		// For continuous print, program need to update "printed_status" extra_info for old item and new item
		if (AppGlobal.g_oFuncStation.get().getSupportContinuousPrinting() || m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name()) || m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_item_with_quantity.name()))
			bSendNewAndOldItem = true;
		// For final payment with turn on breakdown inclusive sc and tax
		if (bWithPayments && m_oCheck.getPaid().equals(PosCheck.PAID_FULL_PAID) && AppGlobal.g_oFuncStation.get().getBreakdownInclusiveScTaxAtFinalSettle())
			bSendNewAndOldItem = true;

		int iSendCheckType = 0;
		if (m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name()))
			iSendCheckType = 3;
		
		if(bSendNewAndOldItem) {
			//As party check discount is applied and the value has been updated, need to send all items including new and old
			sSaveCheckResult = updateCheck(true, true, PosCheckItem.SEND_MODE_ALL_ITEM, iSendCheckType, true, iGetUpdateRecord, iReceiptPrtqId, iReceiptFormatId, "", bWithPayments, false, bPrintGuestCheck, bPayCheck, iCheckPrintQueueId, iCheckFormatId, bDetailCheck, bIsContPrint);
		} else {
			if(!this.hasNewItem(false)) {
				sSaveCheckResult = updateCheck(true, false, PosCheckItem.SEND_MODE_NEW_ITEM, iSendCheckType, true, iGetUpdateRecord, iReceiptPrtqId, iReceiptFormatId, "", bWithPayments, false, bPrintGuestCheck, bPayCheck, iCheckPrintQueueId, iCheckFormatId, bDetailCheck, false);
			}
			else {
				sSaveCheckResult = updateCheck(true, true, PosCheckItem.SEND_MODE_NEW_ITEM, iSendCheckType, true, iGetUpdateRecord, iReceiptPrtqId, iReceiptFormatId, "", bWithPayments, false, bPrintGuestCheck, bPayCheck, iCheckPrintQueueId, iCheckFormatId, bDetailCheck, false);
			}
		}
		
		for(int iRetryCnt=0; iRetryCnt<=3; iRetryCnt++) {
			if(!sSaveCheckResult.equals(PosCheck.API_RESULT_SUCCESS)) {
				if(m_oCheck.getLastWsClientError().equals("record_exist")) {
					m_sErrorMessage = AppGlobal.g_oLang.get()._("duplicate_check_number_exist_when_open_new_check");
					AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "", AppGlobal.g_oFuncUser.get().getUserId() + "", "Duplicate check number exist when open new check");
					
					if(iRetryCnt == 3) {
						bExit = true;
						break;
					}
					
					AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "", AppGlobal.g_oFuncUser.get().getUserId() + "", "Send check retry:" + (iRetryCnt+1) + "");
					
					if(bSendNewAndOldItem)
						sSaveCheckResult = updateCheck(true, true, PosCheckItem.SEND_MODE_ALL_ITEM, iSendCheckType, true, iGetUpdateRecord, iReceiptPrtqId, iReceiptFormatId, "", bWithPayments, false, bPrintGuestCheck, bPayCheck, iCheckPrintQueueId, iCheckFormatId, bDetailCheck, bIsContPrint);
					else {
						if(!this.hasNewItem(false)) {
							sSaveCheckResult = updateCheck(true, false, PosCheckItem.SEND_MODE_NEW_ITEM, iSendCheckType, true, iGetUpdateRecord, iReceiptPrtqId, iReceiptFormatId, "", bWithPayments, false, bPrintGuestCheck, bPayCheck, iCheckPrintQueueId, iCheckFormatId, bDetailCheck, false);
						} else {
							sSaveCheckResult = updateCheck(true, true, PosCheckItem.SEND_MODE_NEW_ITEM, iSendCheckType, true, iGetUpdateRecord, iReceiptPrtqId, iReceiptFormatId, "", bWithPayments, false, bPrintGuestCheck, bPayCheck, iCheckPrintQueueId, iCheckFormatId, bDetailCheck, false);
						}
					}
					
				}else {
					bExit = true;
					m_sErrorMessage = AppGlobal.g_oLang.get()._("fail_to_save_check");
					if(m_oCheck.getLastWsClientError() != null)
						AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "", AppGlobal.g_oFuncUser.get().getUserId() + "", "API Error:" + m_oCheck.getLastWsClientError());
					break;
				}
			}else
				break;
		}

		if(m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name()))
			m_sCurrentFunctionKey = "";
		
		if(bExit) {
			//update table status
			if(!m_oOutletTable.getOtblId().equals("")) {
				if (!m_oOutletTable.isLockedByPortalStationByKey())
					m_oOutletTable.setStationId(0);
				if(!bOldCheck) {
					m_oOutletTable.setCheckId("");
					m_oOutletTable.setStatus(PosOutletTable.STATUS_VACANT);
				}
				m_oOutletTable.addUpdate(true);
			}
			
			// After update check, release the check lock
			for (FuncCheckListener listener : listeners) {
				listener.FuncCheck_finishSendCheck(this.getTableNoWithExtensionForDisplay());
			}
			this.updateUsedDiscountPointOnCheckExtraInfoForInterface();
			return sSaveCheckResult;
		}
		
		//update the station last's send check prefix and check number if it is and the check number is generated by station
		// *** No need to update during Workstation 2.0 standalone mode
		if(!AppGlobal.g_oFuncOutlet.get().getBusinessDay().isCheckNumGeneratedByOutlet() && !bOldCheck && !AppGlobal.g_oFuncSmartStation.isStandaloneRole())
			AppGlobal.g_oFuncStation.get().setLastCheckPrefixNumber(m_oCheck.getCheckPrefix(), getCheckNo());
		
		if(AppGlobal.g_iLogLevel >= 9){
			AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "After update check");
		}

		if(bPrintGuestCheck || bInternalSendCheck)
			m_oOutletTable.setCheckId(m_oCheck.getCheckId());
		
		/*if(bPrintGuestCheck){
			if(AppGlobal.g_iLogLevel >= 9){
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "Before print check");
			}
			
			// Print guest check
			if(printCheck(bPayCheck, AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncStation.get().getStationId(), iCheckPrintQueueId, iCheckFormatId, bDetailCheck, sOutletName, false, 0) == false){
				// Fail to print
				if(this.m_sErrorMessage.isEmpty())
					AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.print_check.name(), PosActionLog.ACTION_RESULT_FAIL, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), 0, 0, 0, 0, "Fail to print check");
				else
					AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.print_check.name(), PosActionLog.ACTION_RESULT_FAIL, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), 0, 0, 0, 0, m_sErrorMessage);
			}
			else {
				// Add "print_check" log to action log list
				AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.print_check.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), 0, 0, 0, 0, "");
			}
			
			if(AppGlobal.g_iLogLevel >= 9){
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "After print check");
			}
		}*/
		
		// After update check, release the check lock
		for (FuncCheckListener listener : listeners) {
			listener.FuncCheck_finishSendCheck(this.getTableNoWithExtensionForDisplay());
		}
		
		// Send action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
//Save Check (Send Check)
		// surveillance event: SaveCheck
		HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
		oSurveillanceEventInfo.put("checkNum", m_oCheck.getCheckPrefixNo());
		this.doSurveillanceEvent(FuncSurveillance.SURVEILLANCE_TYPE_SAVE_CHECK, oSurveillanceEventInfo);
		/*
		List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal
				.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);
		if (!oInterfaceConfigList.isEmpty()) {
			for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
				if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
					FuncSurveillance oFuncSurveillance = AppGlobal.getSurveillanceInfoFromList(
							AppGlobal.g_oFuncStation.get().getStationId(), oPosInterfaceConfig);
					HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
					oSurveillanceEventInfo.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_SAVE_CHECK);
					oSurveillanceEventInfo.put("checkNum", m_oCheck.getCheckPrefixNo());
					oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo);
				}
			}
		}
		*/
		
		if ((bPrintGuestCheck) && (m_oCheck.getPrintCount() > 1)) {
			// surveillance event: ReprintCheck
			HashMap<String, String> oSurveillanceEventInformation = new HashMap<String, String>();
			oSurveillanceEventInformation.put("checkNum", m_oCheck.getCheckPrefixNo());
			this.doSurveillanceEvent(FuncSurveillance.SURVEILLANCE_TYPE_REPRINT_CHECK, oSurveillanceEventInformation);
			/*
			if (!oInterfaceConfigList.isEmpty()) {
				for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
					if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
						FuncSurveillance oFuncSurveillance = AppGlobal.getSurveillanceInfoFromList(
								AppGlobal.g_oFuncStation.get().getStationId(), oPosInterfaceConfig);
						HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
						oSurveillanceEventInfo.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_REPRINT_CHECK);
						oSurveillanceEventInfo.put("checkNum", m_oCheck.getCheckPrefixNo());
						oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo);
					}
				}
			}
			*/
		}
		
/** SubTotal, TaxDue & TotalDue [sendCheck] */
/** Here is the summary of what I changed from Ken's code
 *  To get the language setting correctly, "iLangIndex" is created using if-clause, preset value = 1
 *  TaxDue compare using BigDecimal rather than double value
 *  it works when "Send Check", "Print Check", "Print and Paid" function */ 
		// surveillance eConnect check detail event: SubTotal, TaxDue & TotalDue
		if(sSaveCheckResult.equals(PosCheck.API_RESULT_SUCCESS)) {
			List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);
			if (!oInterfaceConfigList.isEmpty()) {
				for(PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
					if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
						FuncSurveillance oFuncSurveillance = new FuncSurveillance(oPosInterfaceConfig);
						
						// SubTotal
						oSurveillanceEventInfo = new HashMap<String, String>();
						oSurveillanceEventInfo.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_SUBTOTAL);
						oSurveillanceEventInfo.put("checkNum", this.getCheckPrefixNo());
						oSurveillanceEventInfo.put("amount", this.getItemTotal().toPlainString());
						oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo, null);
						
						// TaxDue
						PosTaxScTypeList oPosTaxScTypeList = new PosTaxScTypeList();
						oPosTaxScTypeList.getAllTaxes();
						HashMap<Integer, PosTaxScType> oTaxScTypeList = oPosTaxScTypeList.getTaxScTypeList();
						int iLangIndex = 1;
						if(oPosInterfaceConfig.getInterfaceConfig().has("general_setup") && oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").has("language_index"))
							iLangIndex = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").optJSONObject("language_index").optInt("value");
						for(int i=1; i<=25; i++){
							if(getTaxTotal(i).compareTo(BigDecimal.ZERO) > 0){
								oSurveillanceEventInfo = new HashMap<String, String>();
								oSurveillanceEventInfo.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_TAXDUE);
								oSurveillanceEventInfo.put("checkNum", this.getCheckPrefixNo());
								oSurveillanceEventInfo.put("amount", this.getTaxTotal(i).toPlainString());
								oSurveillanceEventInfo.put("taxName",oTaxScTypeList.get(i).getName(iLangIndex));
								oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo, null);
							}
						}
						
						// TotalDue
						oSurveillanceEventInfo = new HashMap<String, String>();
						oSurveillanceEventInfo.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_TOTALDUE);
						oSurveillanceEventInfo.put("checkNum", this.getCheckPrefixNo());
						oSurveillanceEventInfo.put("amount", this.getCheckTotal().toPlainString());
						oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo, null);
					}
				}
			}
		}
		this.updateUsedDiscountPointOnCheckExtraInfoForInterface();
		return sSaveCheckResult;
	}
	
	public boolean printCheck(boolean bSendAndPrint, boolean bKeepLockTable, int iUserId, int iStationId, int iPrintQueueId, int iCheckFormatId, boolean bDetailCheck, String sOutletName, boolean bVoidCheck, int iVoidReasonId, String sChkIdCacheKey, boolean bUpdatePrintInfo, boolean bWithVoidItems, boolean bIsContPrint){
		int iPrintCount = this.getPrintCount();
		PosCheckPrintLog oCheckPrintLog = null;
		DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		boolean bUpdateOutletTable = true;
		HashMap<String, String> oPassingInfomation = new HashMap<String, String>();
		List<PosCheckPayment> oCheckPayments = null;
		
		m_sErrorMessage = "";
		if(!bSendAndPrint && !this.isOldCheck()) {
			m_sErrorMessage = AppGlobal.g_oLang.get()._("cannot_print_new_check");
			return false;
		}
		
		if(isPaid(false) || bVoidCheck)
			bUpdateOutletTable = false;
		
		// Update table status
		// OM (pos_outlet_tables)
		String sOriTableStatus = "";
		if(bUpdateOutletTable) {
			if(!bKeepLockTable) {		// Unlock table after finishing print check
				if (!m_oOutletTable.isLockedByPortalStationByKey())
					m_oOutletTable.setStationId(0);
			}
			m_oOutletTable.getStatus();
			if(!bDetailCheck && iPrintQueueId > 0 && iCheckFormatId > 0)
				m_oOutletTable.setStatus(PosOutletTable.STATUS_CHECK_PRINTED);
			else
				m_oOutletTable.setStatus(PosOutletTable.STATUS_OCCUPIED);
		}
		
		//Check whether need to update non revenue to liability
		if(this.isUpdateLiability())
			this.setNonRevenue(PosCheck.NON_REVENUE_LIABILITY, true);
		
		// Update check extra info
		if(!isPaid(false) && m_bPaymentInterfacePrinting && isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0) && isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_OUT_TRADE_NUMBER, 0)) {
			String sOutTradeNumber = AppGlobal.g_oFuncOutlet.get().getOutletCode()+AppGlobal.g_oFuncOutlet.get().getBusinessDay().getDateInStringWithFormat("yyyyMMdd")+m_oCheck.getCheckPrefixNo()+(m_oCheck.getPrintCount()+1);
			
			updateCheckExtraInfoValue(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_OUT_TRADE_NUMBER, 0, sOutTradeNumber);
			addPrintedCheckToPaymentInterfaceCheckList(sOutTradeNumber);
		}
		
		if(!bSendAndPrint && !bDetailCheck && iPrintQueueId > 0 && iCheckFormatId > 0 && bUpdatePrintInfo) {
			iPrintCount++;
			m_oCheck.setPrintLocTime(AppGlobal.getCurrentTime(false));
			m_oCheck.setPrintTime(formatter.print(AppGlobal.convertTimeToUTC(m_oCheck.getPrintLocTime())));
			m_oCheck.setPrintUserId(iUserId);
			m_oCheck.setPrintStationId(iStationId);
			m_oCheck.setPrintCount(iPrintCount);
			
			// Increment the check no. for new check in standalone mode
			if (!isOldCheck() && AppGlobal.g_oFuncSmartStation.isStandaloneRole()) {
				AppGlobal.g_oFuncStation.get().addOneToLastCheckNumber();
			}
			
			if(!updateCheck(false, false, PosCheckItem.SEND_MODE_NEW_ITEM, 0, true, 0, 0, 0, "", false, false, false, false, 0, iCheckFormatId, false, false).equals(PosCheck.API_RESULT_SUCCESS)) {
				if(bUpdateOutletTable)
					m_oOutletTable.setStatus(sOriTableStatus);
				return false;
			}
		}/*else{
			if(bUpdateOutletTable)
				m_oOutletTable.addUpdate(true);
		}*/
		
		if (bIsContPrint)
			bWithVoidItems = true;
		
		//save print log
		if (iPrintQueueId > 0 && iCheckFormatId > 0) {
			List<PosCheckItem> oCheckItemListForPrinting = new ArrayList<PosCheckItem>();
			//print detail check with voided items
			//no need to save check print log
			if((!bWithVoidItems) || (bIsContPrint)){
				oCheckPrintLog = new PosCheckPrintLog();
				oCheckPrintLog.setOutletId(AppGlobal.g_oFuncOutlet.get().getOutletId());
				oCheckPrintLog.setChksId(m_oCheck.getCheckId());
				oCheckPrintLog.setPrintLocTime(AppGlobal.getCurrentTime(false));
				oCheckPrintLog.setPrintTime(formatter.print(AppGlobal.convertTimeToUTC(oCheckPrintLog.getPrintLocTime())));
				oCheckPrintLog.setPrintUserId(iUserId);
				oCheckPrintLog.setPrintStationId(iStationId);
				oCheckPrintLog.setPrintCheckTotal(m_oCheck.getCheckTotal());
				oCheckPrintLog.setPrintPartyTotal(BigDecimal.ZERO);
			}
			
			for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
				if(bVoidCheck)
					oFuncCheckParty.constructPosCheckPartyForSaving(2);
					
				for(PosCheckItem oPosCheckItem:oFuncCheckParty.getCheckParty().getCheckItemList()) {
					if (bVoidCheck) {
						if (oPosCheckItem.isSetMenuChildItem())
							continue;
					}
					
					if(!oFuncCheckParty.hasPartyCheckDiscount() || (!oPosCheckItem.isSetMenuChildItem() && oFuncCheckParty.hasPartyCheckDiscount()))
						oCheckItemListForPrinting.add(oPosCheckItem);
				}
			}
			
			//Add all void check items to the list	
			if(bWithVoidItems){
				PosCheckItemList oCheckItemList = new PosCheckItemList();
				oCheckItemList.readCheckItemByCheckId(m_oCheck.getCheckId(), PosCheckItem.STATUS_DELETED);
				if(oCheckItemList.getCheckItemList().size() > 0)
					oCheckItemListForPrinting.addAll(oCheckItemList.getCheckItemList());
			}
			
			m_oCurrentFuncCheckParty.getPartyCheckDiscount();
			HashMap<String, String> oTableName = null;
			if(AppGlobal.g_oFuncOutlet.get().isTableNameExist(m_sTableNo, m_sTableExtension))
				oTableName = AppGlobal.g_oFuncOutlet.get().getTableNameInAllLang(m_sTableNo, m_sTableExtension);
				
			//get Payment Gateway Transactions record
			JSONArray oPaymentGatewayTransArray = new JSONArray();
			for(PosPaymentGatewayTransactions oPosPaymentGatewayTransactions : this.getPosPaymentGatewayTransactionsLists().getPosPaymentGatewayTransactionsList())
				oPaymentGatewayTransArray.put(oPosPaymentGatewayTransactions.constructAddSaveJSON(true));
			
			JSONObject oResultJSONObject = null;
			
			HashMap<Integer, FuncMenuItem> oMenuItems = new HashMap<Integer, FuncMenuItem>();
			for (PosCheckItem oPosCheckItemForMenu : oCheckItemListForPrinting) {
				if (!oMenuItems.containsKey(oPosCheckItemForMenu.getItemId()))
					oMenuItems.put(oPosCheckItemForMenu.getItemId(),
							AppGlobal.g_oFuncMenu.get().getFuncMenuItemByItemId(oPosCheckItemForMenu.getItemId()));
			}
			
			String sPrintType = PosCheck.PRINTING_NORMAL;
			if (bIsContPrint)
				sPrintType = PosCheck.PRINTING_CONTINUOUS_PRINT;
			if(AppGlobal.g_oFuncStation.get().isPartialPayment())
				oCheckPayments = this.m_oCheckPaymentList; 
			if (AppGlobal.g_oFuncStation.get().getSupportContinuousPrinting())
				oPassingInfomation.put("isSupportContinuousPrint", "true");
			oResultJSONObject = m_oCheck.printGuestCheckWithPassingDetail(sPrintType, false, AppGlobal.g_oCurrentLangIndex.get(), iPrintQueueId, iCheckFormatId, bDetailCheck, m_bPaymentInterfacePrinting, m_sTableNo, m_sTableExtension, sChkIdCacheKey, bVoidCheck, iVoidReasonId, AppGlobal.g_oFuncStation.get().getStation(), AppGlobal.g_oFuncUser.get().getUser(), AppGlobal.g_oFuncOutlet.get().getShop(), AppGlobal.g_oFuncOutlet.get().getOutlet(), AppGlobal.g_oFuncOutlet.get().getMediaFilename(OutMediaObject.USED_FOR_LOGO),
				AppGlobal.g_oFuncOutlet.get().getBusinessDay(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod(), oCheckPrintLog, oCheckItemListForPrinting, m_oCurrentFuncCheckParty.getPartyCheckDiscount(), oTableName, oCheckPayments, "", "", "", oPaymentGatewayTransArray.toString(), oMenuItems, oPassingInfomation);
			
			List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_PAYMENT_INTERFACE);
			if(!isPaid(false) && !oInterfaceConfigList.isEmpty()) {
				PosInterfaceConfig oPosInterfaceConfig = oInterfaceConfigList.get(0);

				if(oResultJSONObject == null)
					return false;
				
				m_sErrorMessage = "";
				try {
					if (oResultJSONObject.has("printResult") && oResultJSONObject.getBoolean("printResult") == false) {
						if(oResultJSONObject.optInt("errorCode") != 0) {
							FuncPaymentInterface oFuncPaymentInterface = new FuncPaymentInterface(oPosInterfaceConfig);
							m_sErrorMessage = oFuncPaymentInterface.getErrorMessage(oResultJSONObject.optInt("errorCode"));
						}
						
						if(m_sErrorMessage == null)
							m_sErrorMessage = oResultJSONObject.optInt("errorCode")+": "+oResultJSONObject.optString("errorMessage");
						
						return false;
					}
					
					if (oResultJSONObject.has("url") && !oResultJSONObject.optString("url", "").isEmpty())
						m_sLastPrintCheckUrl = oResultJSONObject.optString("url", "");
					if (oResultJSONObject.has("viewContent") && !oResultJSONObject.optString("viewContent", "").isEmpty())
						m_sLastPrintViewContent = oResultJSONObject.optString("viewContent", "");
				} catch (JSONException e) {
					e.printStackTrace();
				}
			}
		}
		return true;
	}
	
	public boolean updatePaymentInfo(int iOutletId, String sClosePeriodId, DateTime oCloseDateTime, int iReceiptPrtqId, int iReceiptFormatId, boolean bSendAndPaid, boolean bFastFoodMode, boolean bSelfOrderKioskMode, boolean bIsBarTabMode
			,boolean bAdjustPayment, boolean bCloseCheck, int iAppliedUserId) {
		
		DateTimeFormatter closeFormatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		int iCouponRedeemItemCnt = 0;
		boolean bIsContPrint=false;
		
		m_sErrorMessage = "";
		
		// Get payment and tips amount total
		BigDecimal dPaymentTotal = BigDecimal.ZERO;
		BigDecimal dTips = BigDecimal.ZERO;
		for(PosCheckPayment oPosCheckPayment:m_oCheckPaymentList){
			if(oPosCheckPayment.isDelete())
				continue;
			
			dPaymentTotal = dPaymentTotal.add(oPosCheckPayment.getPayTotal());
			dTips = dTips.add(oPosCheckPayment.getPayTips());
		}
		m_oCheck.setPaymentTotal(dPaymentTotal);
		m_oCheck.setTipsTotal(dTips);
		
		if(iReceiptPrtqId > 0 && iReceiptFormatId > 0)
			m_oCheck.setReceiptPrintCount(1);
		if(bCloseCheck) {
			m_oCheck.setPaid(PosCheck.PAID_FULL_PAID);
			m_oCheck.setCloseLocTime(oCloseDateTime);
			m_oCheck.setCloseTime(closeFormatter.print(AppGlobal.convertTimeToUTC(m_oCheck.getCloseLocTime())));
			
			if(iAppliedUserId != 0)
				m_oCheck.setCloseUserId(iAppliedUserId);
			else	
				m_oCheck.setCloseUserId(AppGlobal.g_oFuncUser.get().getUserId());
			
			m_oCheck.setCloseStationId(AppGlobal.g_oFuncStation.get().getStationId());
			m_oCheck.setCloseBperId(sClosePeriodId);
		}
		else {
			if(AppGlobal.g_oFuncStation.get().isPartialPayment())
				m_oCheck.setPaid(PosCheck.PAID_PARTIAL_PAID);
		}
		
		// Unlock the check
		m_oCheck.setLockTime("");
		m_oCheck.setLockLocTime(null);
		m_oCheck.setLockUserId(0);
		m_oCheck.setLockStationId(0);
		
		// Unlock the table
		if(!bAdjustPayment) {
			if (!m_oOutletTable.isLockedByPortalStationByKey())
				m_oOutletTable.setStationId(0);
			
			if(bCloseCheck) {
				m_oOutletTable.setCheckId("");
				if (m_oOutletTable.isLockedByPortalStationByKey()) {
					m_oOutletTable.setStationId(0);
					m_oOutletTable.setInfo(null);
				}
				// Change table status to "cleaning" by setup
				if(m_sTableNo != null && AppGlobal.g_oFuncStation.get().getSupportTableStatusCleaning()) {
					m_oOutletTable.setStatus(PosOutletTable.STATUS_CLEANING_TABLE);
					AppGlobal.updateCleaningTableList(m_oOutletTable, AppGlobal.convertTimeToUTC(m_oCheck.getCloseLocTime()));
				} else
					m_oOutletTable.setStatus(PosOutletTable.STATUS_VACANT);
			}
		}
		
		// Set the lock table flag to false
		m_bIsTableLock = false;
		
		// Update the payment's check extra info
		List<PosInterfaceConfig> oPaymentInterfaceList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_PAYMENT_INTERFACE);
		if(!oPaymentInterfaceList.isEmpty()) {
			DateTimeFormatter fmt = DateTimeFormat.forPattern("yyMMddHHmmss");
			for(PosCheckPayment oCheckPayment: m_oCheckPaymentList) {
				PosCheckExtraInfo oCheckExtraInfo = oCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0);
				if(oCheckExtraInfo != null) {
					for(PosInterfaceConfig oPaymentInterface: oPaymentInterfaceList) {
						if(oPaymentInterface.getInterfaceId() == Integer.valueOf(oCheckExtraInfo.getValue()).intValue() && oPaymentInterface.getInterfaceVendorKey().equals(InfVendor.KEY_PAY_AT_TABLE)) {
							PosCheckExtraInfo oCheckExtraInfo1 = oCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_REFERENCE, 0);
							String sNewValue = oCheckExtraInfo1.getValue() + fmt.print(m_oCheck.getCloseLocTime());
							oCheckPayment.updateExtraInfo(PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_REFERENCE, 0, sNewValue);
							break;
						}
					}
				}
			}
		}
		
		// prompt the selection box to allow user to select continuous print or not
		if (AppGlobal.g_oFuncStation.get().getSupportContinuousPrinting()) {
				for (FuncCheckListener listener : listeners) {
					bIsContPrint = listener.FuncCheck_selectContinuousPrint();
				}
			// For printing receipt, user select "Reprint whole check" in continuous print
			// all items will need to print and change addUpdate = false
			if (!bIsContPrint) {
				for (FuncCheckParty oFuncCheckParty : m_oFuncCheckPartyList) {
					for (List<FuncCheckItem> oFuncItemList : oFuncCheckParty.getWholeItemList()) {
						for (FuncCheckItem oFuncCheckItem : oFuncItemList) {
							String sJsonStatus = oFuncCheckItem.getExtraInfoBySectionAndVariable(
									PosCheckExtraInfo.SECTION_CONTINUOUS_PRINT,
									PosCheckExtraInfo.VARIABLE_PRINTED_STATUS);
							try {
								JSONObject oJSONObject = new JSONObject();
								if (sJsonStatus != null)
									oJSONObject = new JSONObject(sJsonStatus);
								oJSONObject.put("addUpdate", false);
								if (sJsonStatus != null)
									oFuncCheckItem.updateExtraInfoValue(PosCheckExtraInfo.BY_ITEM,
											PosCheckExtraInfo.SECTION_CONTINUOUS_PRINT,
											PosCheckExtraInfo.VARIABLE_PRINTED_STATUS, oJSONObject.toString());
								else
									oFuncCheckItem.addExtraInfo(PosCheckExtraInfo.BY_ITEM,
											PosCheckExtraInfo.SECTION_CONTINUOUS_PRINT,
											PosCheckExtraInfo.VARIABLE_PRINTED_STATUS, oJSONObject.toString());
							} catch (JSONException e) {
							}
						}
					}
				}
			}
		}
		
		// Update database
		int iSendMode = PosCheckItem.SEND_MODE_NEW_ITEM;
		boolean bWithItems = false;
		if(bCloseCheck && AppGlobal.g_oFuncStation.get().getBreakdownInclusiveScTaxAtFinalSettle()) {
			iSendMode = PosCheckItem.SEND_MODE_ALL_ITEM;
			bWithItems = true;
		}
		boolean bUpdateCheckByThread = false;
		
		// send_and_pay
		if(bSendAndPaid){
			String sOrderingMode;
			
			if(AppGlobal.g_iLogLevel >= 9){
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "Before send check");
			}
			
			// *****************************************************************
			// Create thread to send check and free the table
			AppThreadManager oAppThreadManager = new AppThreadManager();
			
			if(bFastFoodMode || bSelfOrderKioskMode || bIsBarTabMode){
				if(bSelfOrderKioskMode)
					sOrderingMode = PosCheck.ORDERING_MODE_SELF_ORDER_KIOSK;
				else if (bFastFoodMode)
					sOrderingMode = PosCheck.ORDERING_MODE_FAST_FOOD;
				else 
					sOrderingMode = PosCheck.ORDERING_MODE_BAR_TAB;
				
				// Use thread to update database
				// Add the method to the thread manager
				// Thread 1 :
				// Create parameter array
				Object[] oParameters1 = new Object[14];
				oParameters1[0] = false;
				oParameters1[1] = false;
				oParameters1[2] = false;
				oParameters1[3] = iOutletId;
				oParameters1[4] = "";
				oParameters1[5] = 0;
				oParameters1[6] = 0;
				oParameters1[7] = false;
				oParameters1[8] = 0;
				oParameters1[9] = iReceiptPrtqId;
				oParameters1[10] = iReceiptFormatId;
				oParameters1[11] = sOrderingMode;
				oParameters1[12] = true;
				oParameters1[13] = false;
				oAppThreadManager.addThread(1, this, "sendCheck", oParameters1);
			}else{
				sOrderingMode = PosCheck.ORDERING_MODE_FINE_DINING;
				
				if(!this.sendCheck(false, true, false, iOutletId, "", 0, 0, false, 0, iReceiptPrtqId, iReceiptFormatId, sOrderingMode, true, false).equals(PosCheck.API_RESULT_SUCCESS))
					return false;
				
				// Free the table
				if(!bAdjustPayment) {
					m_oOutletTable.setCheckId("");
					m_oOutletTable.setStationId(0);
					m_oOutletTable.setStatus(PosOutletTable.STATUS_VACANT);
				}
				
				// Add the method to the thread manager
				// Thread 2 :
				// Create parameter array
				Object[] oParameters2 = new Object[1];
				oParameters2[0] = true;
				oAppThreadManager.addThread(2, m_oOutletTable, "addUpdate", oParameters2);
			}
			
			// Run the thread without wait
			oAppThreadManager.runThread();
			
			if(AppGlobal.g_iLogLevel >= 9){
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "After send check");
			}
			
		}else{
			if (!bFastFoodMode && !bSelfOrderKioskMode)
				bUpdateCheckByThread = true;
			else {
				if(AppGlobal.g_iLogLevel >= 9){
					AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "Before update check");
				}

				if(!updateCheck(false, bWithItems, iSendMode, 0, true, 0, iReceiptPrtqId, iReceiptFormatId, "", true, false, false, false, 0, 0, false, false).equals(PosCheck.API_RESULT_SUCCESS)) {
					return false;
				}

				// After update payment information, release the check lock
				for (FuncCheckListener listener : listeners) {
					listener.FuncCheck_finishSendCheck(this.getTableNoWithExtensionForDisplay());
				}
				
				if(AppGlobal.g_iLogLevel >= 9){
					AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "After update check");
				}
			}
			
		}

		// Print receipt
		// Process print receipt
		// *****************************************************************
		// Create thread to print receipt
		boolean bNotAllowPrintReceipt = this.m_bNoNeedPrintReceipt;
		
		if(!bFastFoodMode && !bSelfOrderKioskMode) {
			
			if(AppGlobal.g_iLogLevel >= 9){
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "Before print receipt");
			}
			
			AppThreadManager oAppThreadManager = new AppThreadManager();
			
			if (bUpdateCheckByThread) {
				if(AppGlobal.g_iLogLevel >= 9){
					AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "Before update check");
				}
				
				Object[] oParameters1 = new Object[17];
				oParameters1[0] = false;
				oParameters1[1] = bWithItems;
				oParameters1[2] = iSendMode;
				oParameters1[3] = 0;
				oParameters1[4] = true;
				oParameters1[5] = 0;
				oParameters1[6] = iReceiptPrtqId;
				oParameters1[7] = iReceiptFormatId;
				oParameters1[8] = "";
				oParameters1[9] = true;
				oParameters1[10] = false;
				oParameters1[11] = false;
				oParameters1[12] = false;
				oParameters1[13] = 0;
				oParameters1[14] = 0;
				oParameters1[15] = false;
				oParameters1[16] = false;
				oAppThreadManager.addThread(1, this, "updateCheck", oParameters1);
				
			}
			// Add the method to the thread manager
			// Thread 1 : Print receipt
	
			// Create parameter array
			if(!bNotAllowPrintReceipt) {
				Object[] oParameters = new Object[6];
				oParameters[0] = iReceiptPrtqId;
				oParameters[1] = iReceiptFormatId;
				oParameters[2] = m_oCheck.getCheckId();
				oParameters[3] = "";
				oParameters[4] = 0;
				oParameters[5] = bIsContPrint;
				oAppThreadManager.addThread(2, this, "printReceipt", oParameters);
			}
			
			//Add thread to print taiwan gui receipt
			if(AppGlobal.g_oFuncStation.get().supportTaiwanGui() && m_oCheck.getTaiwanGuiTran(1) != null && !m_oCheck.getTaiwanGuiTran(1).getType().equals(PosTaiwanGuiTran.TYPE_CHARITY) && m_oCheck.getTaiwanGuiTran(1).getCarrier().isEmpty()) {
				int iTaiwanGuiPrtqId = iReceiptPrtqId;
				if (AppGlobal.g_oFuncStation.get().getTaiWanGuiPrintQueueId() > 0) {
					// If print queue for GUI is defined, override the original receipt print queue
					iTaiwanGuiPrtqId = AppGlobal.g_oFuncStation.get().getTaiWanGuiPrintQueueId();
				}
				
				Object[] oParameters2 = new Object[6];
				oParameters2[0] = iTaiwanGuiPrtqId;
				oParameters2[1] = AppGlobal.g_oFuncStation.get().getTaiWanGuiPrintFormatId();
				oParameters2[2] = m_oCheck.getCheckId();
				oParameters2[3] = "";
				oParameters2[4] = 0;
				oParameters2[5] = false;
				oAppThreadManager.addThread(3, this, "printReceipt", oParameters2);
			}
			
			// Run the thread without wait
			oAppThreadManager.runThread();

			if (bUpdateCheckByThread) {
				oAppThreadManager.waitForThread();
				String sUpdateCheckResult = (String) oAppThreadManager.getResult(1);
				if (!sUpdateCheckResult.equals(PosCheck.API_RESULT_SUCCESS))
					return false;
				
				// After update payment information, release the check lock
				for (FuncCheckListener listener : listeners) {
					listener.FuncCheck_finishSendCheck(this.getTableNoWithExtensionForDisplay());
				}
				
				if(bAdjustPayment) {
					m_dLastPayTotal = m_oCheck.getPaymentTotal();
					m_dLastTipsTotal = m_oCheck.getTipsTotal();
				}
				
				if(AppGlobal.g_iLogLevel >= 9){
					AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "After update check");
				}
			}
			
			if(AppGlobal.g_iLogLevel >= 9){
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "After print receipt");
			}
		}
		
		if(AppGlobal.g_iLogLevel >= 9){
			AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "Before update coupon");
		}

		//Update coupon item status for coupon item
		boolean bNeedUpdateCouponStatus = false;
		List<FuncCoupon> oItemCouponList = new ArrayList<FuncCoupon>();
		DateTime oSellDateTime = AppGlobal.getCurrentTime(false);
		DateTimeFormatter oDateFormat = DateTimeFormat.forPattern("yyyyMMdd");
		DateTimeFormatter oTimeFormat = DateTimeFormat.forPattern("HHmmss");
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oFuncItemList:oFuncCheckParty.getWholeItemList()){
				for(FuncCheckItem oFuncCheckItem:oFuncItemList) {
					if(oFuncCheckItem.isCouponItem()) {
						bNeedUpdateCouponStatus = true;
						FuncCoupon oCoupon = new FuncCoupon();
						oCoupon.setStartCoupon(oFuncCheckItem.getExtraInfoBySectionAndVariable("online_coupon", "sell_start_coupon"));
						oCoupon.setEndCoupon(oFuncCheckItem.getExtraInfoBySectionAndVariable("online_coupon", "sell_end_coupon"));
						oCoupon.setCouponCurrentStatus(FuncCoupon.COUPON_STATUS_LOCKED);
						oCoupon.setCouponNextStatus(FuncCoupon.COUPON_STATUS_SOLD);
						oCoupon.setSellDate(oDateFormat.print(oSellDateTime));
						oCoupon.setSellTime(oTimeFormat.print(oSellDateTime));
						oCoupon.setSellPrice(oFuncCheckItem.getCheckItem().getTotal().divide(oFuncCheckItem.getCheckItem().getQty()));
						oCoupon.setEmployeeId(AppGlobal.g_oFuncUser.get().getUserId());
						oCoupon.setEmployeeName(AppGlobal.g_oFuncUser.get().getUserName(1));
						oCoupon.setSellCheck(getCheckId());
						
						oItemCouponList.add(oCoupon);
					}
				}
			}
		}
		
		//Update coupon status for coupon payment
		boolean bNeedUpdateCouponStatusForPayment = false;
		List<FuncCoupon> oPaymentCouponList = new ArrayList<FuncCoupon>();
		for(PosCheckPayment oCheckPayment:m_oCheckPaymentList) {
			if(oCheckPayment.isDelete())
				continue;
			
			if(oCheckPayment.isCouponPaymentType() && oCheckPayment.getRefData(1) != null && oCheckPayment.getRefDataByIndexAndKey(1, "coupon_number") != null) {
				bNeedUpdateCouponStatusForPayment = true;
				FuncCoupon oPaymentCoupon = new FuncCoupon();
				oPaymentCoupon.setStartCoupon(oCheckPayment.getRefDataByIndexAndKey(1, "coupon_number"));
				oPaymentCoupon.setEndCoupon(oCheckPayment.getRefDataByIndexAndKey(1, "coupon_number"));
				oPaymentCoupon.setCouponCurrentStatus(FuncCoupon.COUPON_STATUS_LOCKED);
				oPaymentCoupon.setCouponNextStatus(FuncCoupon.COUPON_STATUS_USED);
				oPaymentCoupon.setRedeemPrice(oCheckPayment.getPayTotal());
				oPaymentCoupon.setRedeemDate(oDateFormat.print(oSellDateTime));
				oPaymentCoupon.setRedeemTime(oTimeFormat.print(oSellDateTime));
				oPaymentCoupon.setRedeemOutlet(AppGlobal.g_oFuncOutlet.get().getOutletCode());
				oPaymentCoupon.setRedeemCheck(getCheckNo());
				if(oCheckPayment.getRefData(1) != null && oCheckPayment.getRefDataByIndexAndKey(1, "redeem_item_code") != null) {
					oPaymentCoupon.setRedeemItem(oCheckPayment.getRefDataByIndexAndKey(1, "redeem_item_code"));
					iCouponRedeemItemCnt++;
				}
				oPaymentCoupon.setEmployeeId(AppGlobal.g_oFuncUser.get().getUserId());
				oPaymentCoupon.setEmployeeName(AppGlobal.g_oFuncUser.get().getUserName(1));
				
				oPaymentCouponList.add(oPaymentCoupon);
			}
		}
		
		//Construct check item for saving redeem item extra information
		if(iCouponRedeemItemCnt > 0) {
			for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
				for(List<FuncCheckItem> oFuncItemList:oFuncCheckParty.getWholeItemList()){
					for(FuncCheckItem oFuncCheckItem:oFuncItemList) {
						if(oFuncCheckItem.isRedeemCouponItem()) {
							iCouponRedeemItemCnt++;
						}
					}
				}
			}
		}
		
		if(bNeedUpdateCouponStatus || bNeedUpdateCouponStatusForPayment || iCouponRedeemItemCnt > 0) {
			AppThreadManager oAppThreadManager2 = new AppThreadManager();
			int iFunctionCnt = 0;
			
			if(bNeedUpdateCouponStatus) {
				iFunctionCnt++;
				// Add the method to the thread manager
				// Thread : update multiple coupon status for coupon item
			
				// Create parameter array
				Object[] oParameters2 = new Object[2];
				oParameters2[0] = FuncCoupon.UPDATE_COUPON_TYPE_ORDER_ITEM;
				oParameters2[1] = oItemCouponList;
				oAppThreadManager2.addThread(iFunctionCnt, this, "updateMultipleCoupon", oParameters2);
			}
			
			if(bNeedUpdateCouponStatusForPayment) {
				iFunctionCnt++;
				// Add the method to the thread manager
				// Thread : update multiple coupon status for payment coupon
				
				//Create parameter array
				Object[] oParameters3 = new Object[2];
				oParameters3[0] = FuncCoupon.UPDATE_COUPON_TYPE_USE_AS_PAYMENT;
				oParameters3[1] = oPaymentCouponList;
				oAppThreadManager2.addThread(iFunctionCnt, this, "updateMultipleCoupon", oParameters3);
			}
			
			if(iCouponRedeemItemCnt > 0) {
				iFunctionCnt++;
				// Add the method to the thread manager
				// Thread : update multiple coupon status for redeemed item
				oAppThreadManager2.addThread(iFunctionCnt, this, "updateCheckItemsAfterFunction", null);
			}
			
			// Run the thread without wait
			oAppThreadManager2.runThread();
		}
		
		if(AppGlobal.g_iLogLevel >= 9){
			AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "After update coupon");
		}
		
		// Handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);

		return true;
	}
	
	// Update payment tips
	public boolean adjustTips(List<HashMap<String, String>> oPaymentInfos, PosPaymentMethodList oPaymentMethodList) {
		boolean bHaveTipsChanges = false, bIsFirstPosting = true, bHaveDccOptOutChangesOnly = false, bPmsSinglePosting = false;
		int iPaymentSequence = 0;
		FuncPMS oPMS = new FuncPMS(true);
		FuncMembershipInterface oFuncMembershipInterface = null;
		int iChosenReceiptPfmtId = 0;
		
		for(HashMap<String, String> oPaymentInfo:oPaymentInfos) {
			BigDecimal dOriTips = new BigDecimal(oPaymentInfo.get("payOriTips"));
			if(oPaymentInfo.get("payForeignCurrency").equals(PosCheckPayment.PAY_FOREIGN_CURRENCY_FOREIGN) && oPaymentInfo.get("selectDccOptOut").equals("false") && oPaymentInfo.get("dccOptOut").isEmpty())
				dOriTips = new BigDecimal(oPaymentInfo.get("PayOriTipsInForeignCurrency"));

			BigDecimal dNewTips = new BigDecimal(oPaymentInfo.get("payNewTips"));
			
			if(dOriTips.compareTo(dNewTips) != 0) {
				iPaymentSequence = 0;
				BigDecimal dPreviousPaymentTotal = BigDecimal.ZERO;
				for(PosCheckPayment oCheckPayment:m_oCheckPaymentList) {
					iPaymentSequence++;
					if(oCheckPayment.getCpayId().equals(oPaymentInfo.get("payId"))) {
						bHaveTipsChanges = true;
						
						PosPaymentMethod oPaymentMethod = oPaymentMethodList.getPaymentMethodList().get(oCheckPayment.getPaymentMethodId());
						
						// first do void the pms payment
						if(oCheckPayment.havePmsPayment()) {
							if(oPMS.pmsVoidPosting(this, oCheckPayment, oPaymentMethod, iPaymentSequence, dPreviousPaymentTotal, m_oCheckPaymentList, null) == false) {
								// fail to void posting, continue the process
								AppGlobal.writeErrorLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), AppGlobal.g_oFuncStation.get().getStationId()+"", "", "Fail to void previous PMS posting, process to next payment.");
								break;
							}
							
							//void standard tcpip with allow PMS posting after payment
							PosInterfaceConfig oPosInterfaceConfig = oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_PMS).get(0);
							if (oPMS.isAllowPostAfterPayment(oPosInterfaceConfig)) {
								if(this.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_MODE, 0)) {
									String sMode = this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_MODE);
									if (sMode.equals("periodic")) {
										if(oCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_VOID_STATUS, 0) == null)
											oCheckPayment.addExtraInfoToList(AppGlobal.g_oFuncOutlet.get().getOutletId(), PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_VOID_STATUS, 0, "false");
										else
											oCheckPayment.updateExtraInfo(PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_VOID_STATUS, 0, "false");
									}
								}
							}
							
							if(oPMS.isSinglePostingForMultiplePayments(oCheckPayment.getPmsPaymentIntfId()))
								bPmsSinglePosting = true;
						}
						
						//first do void the membership payment
						if(oCheckPayment.haveMembershipPayment()) {
							int iMembershipIntfId = oCheckPayment.getMembershipInterfaceId();
							if(iMembershipIntfId > 0) {
								PosInterfaceConfig oMembershipInterface = null;
								List<PosInterfaceConfig> oInterfaceConfigs = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_MEMBERSHIP_INTERFACE);
								for(PosInterfaceConfig oMembershipInterfaceConfig : oInterfaceConfigs) {
									if(oMembershipInterfaceConfig.getInterfaceId() == iMembershipIntfId) {
										oMembershipInterface = oMembershipInterfaceConfig;
										break;
									}
								}
								
								if(oMembershipInterface != null && 
										(oMembershipInterface.getInterfaceVendorKey().equals(InfVendor.KEY_GENERAL)
										|| oMembershipInterface.getInterfaceVendorKey().equals(InfVendor.KEY_SMART_INTEGRAL)
										|| oMembershipInterface.getInterfaceVendorKey().equals(InfVendor.KEY_ASPEN))) {
									List<PosCheckPayment> oCheckPayments = new ArrayList<PosCheckPayment>();
									oCheckPayments.add(oCheckPayment);
									
									oFuncMembershipInterface = new FuncMembershipInterface(oMembershipInterface);
									if(oFuncMembershipInterface.membershipVoidPosting(this, oCheckPayments, dPreviousPaymentTotal, false, iPaymentSequence) == false){
										// fail to void posting, continue the process
										AppGlobal.writeErrorLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), AppGlobal.g_oFuncStation.get().getStationId()+"", "", "Fail to void previous Member posting, process to next payment.");
										break;
									}
								}
							}
						}
						
						if (oPaymentInfo.get("selectDccOptOut").equals("true") || oPaymentInfo.get("dccOptOut").equals("dcc")) {
							oCheckPayment.setPayTips(dNewTips);
							BigDecimal dTipsTotalInLocalCurrency = dNewTips.multiply(oCheckPayment.getCurrencyRate());
							dTipsTotalInLocalCurrency = AppGlobal.g_oFuncOutlet.get().roundPaymentAmountToBigDecimal(dTipsTotalInLocalCurrency);
							oCheckPayment.setPayForeignTips(dTipsTotalInLocalCurrency);
						}else if(oCheckPayment.isPayByForeignCurrency()) {
							BigDecimal dPayTotalInForeignCurrency = dNewTips.add(oCheckPayment.getPayForeignTotal());
							BigDecimal dPayTotalInLocalCurrency = dPayTotalInForeignCurrency.divide(oCheckPayment.getCurrencyRate(), 10, RoundingMode.HALF_UP);
							dPayTotalInLocalCurrency = AppGlobal.g_oFuncOutlet.get().roundPaymentAmountToBigDecimal(dPayTotalInLocalCurrency);
							
							if((dPayTotalInLocalCurrency.compareTo(oCheckPayment.getPayTotal())) > 0) {
								BigDecimal dPayTipsInLocalCurrency = dPayTotalInLocalCurrency.subtract(new BigDecimal(oPaymentInfo.get("payAmount")));
								oCheckPayment.setPayTips(dPayTipsInLocalCurrency);
							}else
								oCheckPayment.setPayTips(BigDecimal.ZERO);
							oCheckPayment.setPayForeignTips(dNewTips);
							
						}else
							oCheckPayment.setPayTips(dNewTips);
						
						// update the surcharge amount with updated tips amount
						//PosPaymentMethod oPaymentMethod = oPaymentMethodList.getPaymentMethodList().get(oCheckPayment.getPaymentMethodId());
						if(oPaymentMethod.getSurchargeRate().compareTo(BigDecimal.ZERO) > 0){
							BigDecimal dSurchargePercentage = oPaymentMethod.getSurchargeRate().divide(new BigDecimal(100));
							BigDecimal dSurchargeAmount = AppGlobal.g_oFuncOutlet.get().roundPaymentAmountToBigDecimal(oCheckPayment.getPayTotal().add(oCheckPayment.getPayTips()).multiply(dSurchargePercentage));
							oCheckPayment.setSurcharge(dSurchargeAmount);
							
							// if Foreign currency, update foreign surcharge amount
							if(oCheckPayment.isPayByForeignCurrency()) {
								BigDecimal dCurrentForeignCurrencyRate = oCheckPayment.getCurrencyRate();
								oCheckPayment.setForeignSurcharge(oCheckPayment.getSurcharge().multiply(dCurrentForeignCurrencyRate));
							}
						}
						
						// do pms payment with new tips
						if(oCheckPayment.havePmsPayment()) {
							int iIntfId = oCheckPayment.getPmsPaymentIntfId();
							PosInterfaceConfig oPmsInterface = AppGlobal.getPosInterfaceConfigById(iIntfId);
							//re-new the trace ID for adjust tips
							if(oPmsInterface.getInterfaceVendorKey().equals(InfVendor.KEY_HTNG)) {
								JSONObject oHTNGConfig = oPmsInterface.getInterfaceConfig();
								if(oHTNGConfig.has("connection_setup") && oHTNGConfig.optJSONObject("connection_setup").has("params") && oHTNGConfig.optJSONObject("connection_setup").optJSONObject("params").has("pms_type")
										&& oHTNGConfig.optJSONObject("connection_setup").optJSONObject("params").optJSONObject("pms_type").optString("value", "").equals("standard")) {
									
									DateTimeFormatter formatter2 = DateTimeFormat.forPattern("yyMMddHHmmss");
									DateTime oCurrentTime = AppGlobal.getCurrentTime(false);
									String sPostingKey = formatter2.print(oCurrentTime) + iPaymentSequence + AppGlobal.g_oFuncStation.get().getStationId();
									oCheckPayment.updateExtraInfo(PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_TRACE_ID, 0, sPostingKey);
								}
							}
							HashMap<String, Boolean> oPartialPaymentInfo = new HashMap<String, Boolean>();
							oPartialPaymentInfo.put("forcePosCurrentPaymenttWithRounding", true);
							oPMS.pmsPosting(this, oCheckPayment, oPaymentMethod, iPaymentSequence, dPreviousPaymentTotal, m_oCheckPaymentList, oPartialPaymentInfo);
							// posting PMS standard tcpip with allow PMS posting after payment
							PosInterfaceConfig oPosInterfaceConfig = oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_PMS).get(0);
							if (oPMS.isAllowPostAfterPayment(oPosInterfaceConfig)) {
								if(this.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_MODE, 0)) {
									String sMode = this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_MODE);
									if (sMode.equals("periodic")) {
										if(oCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_POST_STATUS, 0) == null)
											oCheckPayment.addExtraInfoToList(AppGlobal.g_oFuncOutlet.get().getOutletId(), PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_POST_STATUS, 0, "false");
										else
											oCheckPayment.updateExtraInfo(PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_POST_STATUS, 0, "false");
									}
								}
							}
						}
						
						// do membership posting
						if(oCheckPayment.haveMembershipPayment()) {
							int iMembershipIntfId = oCheckPayment.getMembershipInterfaceId();
							PosInterfaceConfig oMembershipInterface = null;
							List<PosInterfaceConfig> oInterfaceConfigs = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_MEMBERSHIP_INTERFACE);
							for(PosInterfaceConfig oMembershipInterfaceConfig : oInterfaceConfigs) {
								if(oMembershipInterfaceConfig.getInterfaceId() == iMembershipIntfId) {
									oMembershipInterface = oMembershipInterfaceConfig;
									break;
								}
							}
							
							if(oMembershipInterface != null && oMembershipInterface.getInterfaceVendorKey().equals(InfVendor.KEY_GENERAL)) {
								List<PosCheckPayment> oCheckPayments = new ArrayList<PosCheckPayment>();
								oCheckPayments.add(oCheckPayment);
								
								HashMap<String, String> oPostingInfo = new HashMap<String,String>();
								oPostingInfo.put("memberNo", oCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER, 0).getValue());
								oPostingInfo.put("memberName", oCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_MEMBER_NAME, 0).getValue());
								oPostingInfo.put("arAccountNo", oCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_AR_ACCOUNT_NUMBER, 0).getValue());
								oPostingInfo.put("cardNo", oCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_CARD_NO, 0).getValue());
								oPostingInfo.put("traceId", oCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_TRACE_ID, 0).getValue()+"_CT");
								oPostingInfo.put("password", "");
								oPostingInfo.put("paymentSequence", String.valueOf(iPaymentSequence));
								
								oFuncMembershipInterface.membershipPosting(oPostingInfo, this, oCheckPayments,null, false, false);
							}
							else if(oMembershipInterface != null && oMembershipInterface.getInterfaceVendorKey().equals(InfVendor.KEY_ASPEN)) {
								List<PosCheckPayment> oCheckPayments = new ArrayList<PosCheckPayment>();
								oCheckPayments.add(oCheckPayment);
								HashMap<String, String> oPostingInfo = new HashMap<String,String>();
								oPostingInfo.put("cardNo", oCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_CARD_NO, 0).getValue());
								oPostingInfo.put("traceId", "");
								oPostingInfo.put("memberNo", "");
								
								if(oFuncMembershipInterface.membershipPosting(oPostingInfo, this, oCheckPayments, null, false, false)){
									// update point balance
									if(oCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_BALANCE, 0) != null)
										oCheckPayment.updateExtraInfo(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_BALANCE, 0, oFuncMembershipInterface.m_oLastLpsSvcResponseInfo.sPointsBalance);
								}
							}
						}
						
						if (oCheckPayment.isCreditCardsPaymentType()) {
							List<PosInterfaceConfig> oPosInterfaceConfigs = oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_PERIPHERAL_DEVICE);
							if (oPosInterfaceConfigs != null) {
								for (PosInterfaceConfig oPosInterfaceConfig:oPosInterfaceConfigs) {
									if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_DEVICE_MANAGER)) {
										if (oPosInterfaceConfig.getInterfaceConfig().has("credit_card_setup") &&
												oPosInterfaceConfig.getInterfaceConfig().optJSONObject("credit_card_setup").optJSONObject("params").has("model")) {
											String sCreditCardModel = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("credit_card_setup").optJSONObject("params").optJSONObject("model").optString("value", "0");
											// 2: CTBC Model
											if(sCreditCardModel.equals("2"))
												break;
										}
										PosCheckExtraInfo oCheckExtraInfo = oCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_CREDIT_CARD, PosCheckExtraInfo.VARIABLE_TRACE_ID, 0);
										if (oCheckExtraInfo != null) {
											String sTraceNo = oCheckExtraInfo.getValue();
											// do opt out function if user select this payment is selected non-DCC adjustment 
											if (oPaymentInfo.get("selectDccOptOut").equals("true") && !oPaymentInfo.get("dccOptOut").equals("dcc")) {
												if(doAbjustTipsCreditCardOptOut(oPaymentInfo, oCheckPayment, bIsFirstPosting) == false)
													return false;
												else
													bIsFirstPosting = false;
											}
											
											boolean bSuccess = false;
											for (FuncCheckListener listener : listeners) {
												bSuccess = false;
												BigDecimal dPaymentAmount = new BigDecimal(oPaymentInfo.get("payAmount"));
												
												if (oPaymentInfo.get("paytypeDcc").equals("dcc") && oPaymentInfo.get("dccOptOut").isEmpty())
													dPaymentAmount = new BigDecimal(oPaymentInfo.get("PayAmountInForeignCurrency"));
												
												String sCreditCardMethodType = FuncCreditCardOperation.METHOD_TYPE_NORMAL_CREDIT_CARD;
												if(oPosInterfaceConfig.getConfigValue() != null)
													sCreditCardMethodType = oPosInterfaceConfig.getConfigValue().optJSONObject("general").optJSONObject("params").optJSONObject("payment_type").optString("value");
												if (sCreditCardMethodType.equals(FuncCreditCardOperation.METHOD_TYPE_CUP_CREDIT_CARD)) {
													// *** Skip online posting according to request on 20170314
													bSuccess = true;
												} else {
													bSuccess = listener.FuncCheck_creditCardSpectraAdjustTips(sTraceNo, dPaymentAmount, dNewTips, bIsFirstPosting);
												}
												if (!bSuccess)
													break;
												bIsFirstPosting = false;
											}
											if (!bSuccess) {
												m_sErrorMessage = AppGlobal.g_oLang.get()._("fail_to_adjust_tips");
												return false;
											}
										}
										
										break;
									}
								}
							}
						}
						
						//void payment gateway transaction
						if (oPaymentMethod.isPaymentInterface(InfVendor.KEY_SPA_STANDARD)) {
							
							String sPaymentType = FramePaymentCardAuthorization.AUTHORIZATION_PAYMENT_TYPE.standard.name();
							
							List<PosInterfaceConfig> oPaymentInterfaceConfigs = oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_PAYMENT_INTERFACE);
							if(oPaymentInterfaceConfigs != null && oPaymentInterfaceConfigs.size() > 0) {
								for(PosInterfaceConfig oPaymentInterfaceConfig : oPaymentInterfaceConfigs) {
									if(oPaymentInterfaceConfig.getConfigValue() != null && oPaymentInterfaceConfig.getConfigValue().has("type") && 
											oPaymentInterfaceConfig.getConfigValue().optJSONObject("type").has("params")){
										JSONObject oConfigValueJSONObject = oPaymentInterfaceConfig.getConfigValue().optJSONObject("type").optJSONObject("params");
										String sConfigValuePaymentType = oConfigValueJSONObject.optJSONObject("payment_type").optString("value");
										if(sConfigValuePaymentType.equals(FramePaymentCardAuthorization.AUTHORIZATION_PAYMENT_TYPE.direct_sale.name())){
											sPaymentType = sConfigValuePaymentType;
											break;
										}
									}
								}
							}
							
							if(sPaymentType.equals(FramePaymentCardAuthorization.AUTHORIZATION_PAYMENT_TYPE.direct_sale.name())){
								PosInterfaceConfig oPosInterfaceConfig = oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_PAYMENT_INTERFACE).get(0);
								PosPaymentGatewayTransactions oPosPaymentGatewayTransactions = oCheckPayment.getPosPaymentGatewayTransactionsList().getPosPaymentGatewayTransactionsByIndex(0);
								if (oPosInterfaceConfig != null && !oPosPaymentGatewayTransactions.getPgtxId().isEmpty() && oPosPaymentGatewayTransactions.getIntfId() > 0) {
									if(oPosPaymentGatewayTransactions.getType().equals(PosPaymentGatewayTransactions.TYPE_SALE) && 
											oPosPaymentGatewayTransactions.getIntfId() == oPosInterfaceConfig.getInterfaceId()){
										if(AppGlobal.g_iLogLevel >= 1)
											AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "Begin adjust SPA direct tips");
										
										FuncPaymentInterface oFuncPaymentInterface = new FuncPaymentInterface(oPosInterfaceConfig);
										
										String sRefNo = oPosPaymentGatewayTransactions.getRefNo();
										if(oCheckPayment.getPosPaymentGatewayTransactionsList().getPosPaymentGatewayTransactionsList().size() > 1)
											sRefNo = oCheckPayment.getPosPaymentGatewayTransactionsList().getPosPaymentGatewayTransactionsByIndex(oCheckPayment.getPosPaymentGatewayTransactionsList().getPosPaymentGatewayTransactionsList().size() - 1).getRefNo();
											
										if(!oFuncPaymentInterface.cardAuthorization(this, FramePaymentCardAuthorization.AUTHORIZATION_TYPE.adjust_tip.name(), "", sRefNo, 
											StringLib.BigDecimalToString(oPosPaymentGatewayTransactions.getAmount(), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getPayDecimal()), 
											StringLib.BigDecimalToString(oPosPaymentGatewayTransactions.getAmount().add(dNewTips), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getPayDecimal()),
											StringLib.BigDecimalToString(oCheckPayment.getSurcharge(), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getPayDecimal()),
											oPosPaymentGatewayTransactions.getTraceNo(), oPosPaymentGatewayTransactions.getInvoiceNo(), 
											oPosPaymentGatewayTransactions.getIssuer(), oPosPaymentGatewayTransactions.getAuthCode(), 
											oPosPaymentGatewayTransactions.getToken()))
											return false;
										else {
											if(oFuncPaymentInterface.getPosPaymentGatewayTransactions() != null){
												// append new adjust payment transaction
												PosPaymentGatewayTransactions oAdjustPaymentGatewayTransactions = oFuncPaymentInterface.getPosPaymentGatewayTransactions();
												oAdjustPaymentGatewayTransactions.setType(PosPaymentGatewayTransactions.TYPE_ADJUST_TIP);
												oAdjustPaymentGatewayTransactions.setMaskedPan(oPosPaymentGatewayTransactions.getMaskedPan());
												if(oPosPaymentGatewayTransactions.getTips().compareTo(BigDecimal.ZERO) == 0 && dNewTips.compareTo(BigDecimal.ZERO) != 0)
													oAdjustPaymentGatewayTransactions.setTips(dNewTips);
												oAdjustPaymentGatewayTransactions.setIssuer(oPosPaymentGatewayTransactions.getIssuer());
												oAdjustPaymentGatewayTransactions.setToken(oPosPaymentGatewayTransactions.getToken());
												oAdjustPaymentGatewayTransactions.setParentAuthCode(oPosPaymentGatewayTransactions.getAuthCode());
												oAdjustPaymentGatewayTransactions.setCpayId(oPosPaymentGatewayTransactions.getCpayId());
												
												//add the recevied tips and surcharge to the current payment method
												if(oAdjustPaymentGatewayTransactions.getSurcharge().compareTo(BigDecimal.ZERO) != 0)
													oCheckPayment.setSurcharge(oAdjustPaymentGatewayTransactions.getSurcharge());
												if(oAdjustPaymentGatewayTransactions.getTips().compareTo(BigDecimal.ZERO) != 0)
													oCheckPayment.setPayTips(oAdjustPaymentGatewayTransactions.getTips());
												
												this.addPaymentGatewayTransToList(oAdjustPaymentGatewayTransactions, oPosInterfaceConfig.getInterfaceId());
											}
											else 
												return false;
										}
										
										if(AppGlobal.g_iLogLevel >= 1)
											AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "After adjust SPA direct tips");
									}
								}
							}
						}
						
						break;
					}
					dPreviousPaymentTotal = dPreviousPaymentTotal.add(oCheckPayment.getPayTotal());
				}
				
				// do void check level PMS posting and posting again with new tips
				// for PMS interface required to do a single posting for a check
				if(bPmsSinglePosting) {
					// do void posting
					oPMS.setForSinglePaymentPosting(false);
					if(oPMS.pmsVoidPosting(this, null, null, 0, BigDecimal.ZERO, m_oCheckPaymentList, null) == false) {
						// fail to void posting, continue the process
						AppGlobal.writeErrorLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), AppGlobal.g_oFuncStation.get().getStationId()+"", "", "Fail to void PMS posting.");
						break;
					}
					
					// do pms posting
					if(oPMS.pmsPosting(this, null, null, 0, BigDecimal.ZERO, m_oCheckPaymentList, null) == false) {
						// fail to post, continue the process
						AppGlobal.writeErrorLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), AppGlobal.g_oFuncStation.get().getStationId()+"", "", "Fail to do PMS posting.");
						break;
					}
				}
				
				//do void check level membership posting
				List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_MEMBERSHIP_INTERFACE);
				FuncMembershipInterface oCheckMembershipInterface = null;
				String sInterfaceId = this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID);
				int iInterfaceId = sInterfaceId.isEmpty()? 0: Integer.parseInt(sInterfaceId);
				for(PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
					if (oPosInterfaceConfig.getInterfaceId() != iInterfaceId)
						continue;
					
					if(oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_VIENNA_CRM)) {
						String sTraceId = this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_TRACE_ID);
						if(sTraceId == null || sTraceId.isEmpty()){
							break;
						}
						oCheckMembershipInterface = new FuncMembershipInterface(oPosInterfaceConfig);
						if(oCheckMembershipInterface.membershipVoidPosting(this, m_oCheckPaymentList, dPreviousPaymentTotal, false, 0)){
							
						}else{
							// fail to void posting, continue the process
							AppGlobal.writeErrorLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), AppGlobal.g_oFuncStation.get().getStationId()+"", "", "Fail to void previous PMS posting, process to next payment.");
							break;
						}
						String sMemberCardNo = this.getCheckExtraInfoValueListBySectionVariable(
								PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_CARD_NO);
						if (sMemberCardNo == null || sMemberCardNo.isEmpty()) {
							break;
						}
						oFuncMembershipInterface = new FuncMembershipInterface(oPosInterfaceConfig);
						HashMap<String, String> oPostingInfo = new HashMap<String, String>();
						oPostingInfo.put("memberNo", "");
						oPostingInfo.put("memberName", "");
						oPostingInfo.put("arAccountNo", "");
						oPostingInfo.put("cardNo", sMemberCardNo);
						oPostingInfo.put("traceId", "");
						oPostingInfo.put("employeeName", AppGlobal.g_oFuncUser.get().getUserName(1));
						oFuncMembershipInterface.membershipPosting(oPostingInfo, this, m_oCheckPaymentList, null, false, false);
					}
				}
			}else {
				// do Dcc Opt out only if no tips amount for Spectra Credit Card payment
				for(PosCheckPayment oCheckPayment:m_oCheckPaymentList) {
					if(oCheckPayment.getCpayId().equals(oPaymentInfo.get("payId"))) {
						if (oCheckPayment.isCreditCardsPaymentType()) {
							PosPaymentMethod oPaymentMethod = oPaymentMethodList.getPaymentMethodList().get(oCheckPayment.getPaymentMethodId());
							List<PosInterfaceConfig> oPosInterfaceConfigs = oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_PERIPHERAL_DEVICE);
							if (oPosInterfaceConfigs != null) {
								for (PosInterfaceConfig oPosInterfaceConfig:oPosInterfaceConfigs) {
									if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_DEVICE_MANAGER)) {
										// do opt out function if user select this payment is selected non-DCC adjustment 
										if (oPaymentInfo.get("selectDccOptOut").equals("true") && !oPaymentInfo.get("dccOptOut").equals("dcc")) {
											bHaveDccOptOutChangesOnly = true;
											if(doAbjustTipsCreditCardOptOut(oPaymentInfo, oCheckPayment, bIsFirstPosting) == false)
												return false;
											else
												bIsFirstPosting = false;
										}
									}
								}
							}
						}
					}
				}
			}
			
			// surveillance eConnect check termination event: TipVoid
			if(dOriTips.compareTo(BigDecimal.ZERO) > 0) {
				HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
				oSurveillanceEventInfo.put("checkNum", this.getCheckPrefixNo());
				oSurveillanceEventInfo.put("amount", dOriTips.negate().toPlainString());
				this.doSurveillanceEvent(FuncSurveillance.SURVEILLANCE_TYPE_TIP_VOID, oSurveillanceEventInfo);
			}
			
			// surveillance eConnect check termination event: TipAdd
			if(dNewTips.compareTo(BigDecimal.ZERO) > 0) {
				HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
				oSurveillanceEventInfo.put("checkNum", this.getCheckPrefixNo());
				oSurveillanceEventInfo.put("amount", dNewTips.toPlainString());
				this.doSurveillanceEvent(FuncSurveillance.SURVEILLANCE_TYPE_TIP_ADD, oSurveillanceEventInfo);
			}
		}
		
		// unlock check
		m_oCheck.setLockStationId(0);
		m_oCheck.setLockUserId(0);
		m_oCheck.setLockTime(null);
		m_oCheck.setLockLocTime(null);
		
		if(AppGlobal.g_oFuncStation.get().isAdjustTipsReprintReceipt()){
			//Get receipt format
			for (FuncCheckListener listener : listeners) {
				iChosenReceiptPfmtId = listener.FuncCheck_getReceiptFormat();
			}
		}
		
		if(bHaveTipsChanges) {
			BigDecimal dNewTipsTotal = BigDecimal.ZERO;
			BigDecimal dNewSurchargeTotal = BigDecimal.ZERO;
			for(PosCheckPayment oCheckPayment:m_oCheckPaymentList) {
				dNewTipsTotal = dNewTipsTotal.add(oCheckPayment.getPayTips());
				dNewSurchargeTotal = dNewSurchargeTotal.add(oCheckPayment.getSurcharge());
			}
			m_oCheck.setTipsTotal(dNewTipsTotal);
			m_oCheck.setSurchargeTotal(dNewSurchargeTotal);
			
			if(!updateCheck(false, false, PosCheckItem.SEND_MODE_NEW_ITEM, 0, false, 0, 0, 0, "", true, false, false, false, 0, 0, false, false).equals(PosCheck.API_RESULT_SUCCESS))
				return false;
			else {
				if(AppGlobal.g_oFuncStation.get().isAdjustTipsReprintReceipt()){
					printReceipt(AppGlobal.g_oFuncStation.get().getStation().getReceiptPrtqId(), iChosenReceiptPfmtId, getCheckId(), "", 1, false);
				}
				
				return true;
			}
		}else {
			if(bHaveDccOptOutChangesOnly) {
				if(!updateCheck(false, false, PosCheckItem.SEND_MODE_NEW_ITEM, 0, false, 0, 0, 0, "", true, false, false, false, 0, 0, false, false).equals(PosCheck.API_RESULT_SUCCESS))
					return false;
				else
					return true;
			}
			else {
				updateCheck(false, false, PosCheckItem.SEND_MODE_NEW_ITEM, 0, false, 0, 0, 0, "", false, false, false, false, 0, 0, false, false);
				m_sErrorMessage = AppGlobal.g_oLang.get()._("no_tips_adjustments");
				return false;
			}
		}
	}
	
	//do adjust tips opt out for credit card
	private boolean doAbjustTipsCreditCardOptOut(HashMap<String, String> oPaymentInfo, PosCheckPayment oCheckPayment, boolean bIsFirstPosting) {
		boolean bSuccess = false;
		JSONObject oRefDataJSONObject = new JSONObject();
		for (FuncCheckListener listener : listeners) {
			bSuccess = listener.FuncCheck_creditCardSpectraDccOptOut(oPaymentInfo.get("chksCheckPrefixNum"), oPaymentInfo.get("traceNum"), oRefDataJSONObject, bIsFirstPosting);
			if (!bSuccess)
				break;
			//bIsFirstPosting = false;
		}
		if (!bSuccess) {
			m_sErrorMessage = AppGlobal.g_oLang.get()._("fail_to_do_dcc_opt_out");
			return false;
		}
		else {
			oPaymentInfo.put("dccOptOut", "dcc");
			// success to do DCC opt-out, update the pos_check_extra_infos record value
			oCheckPayment.updateExtraInfo(PosCheckExtraInfo.SECTION_CREDIT_CARD, PosCheckExtraInfo.VARIABLE_TERMINAL_NUMBER, 0, oRefDataJSONObject.optString("terminal_number"));
			oCheckPayment.updateExtraInfo(PosCheckExtraInfo.SECTION_CREDIT_CARD, PosCheckExtraInfo.VARIABLE_MERCHANT_NUMBER, 0, oRefDataJSONObject.optString("merchant_number"));
			oCheckPayment.updateExtraInfo(PosCheckExtraInfo.SECTION_CREDIT_CARD, PosCheckExtraInfo.VARIABLE_BATCH_NUMBER, 0, oRefDataJSONObject.optString("batch_number"));
			oCheckPayment.updateExtraInfo(PosCheckExtraInfo.SECTION_CREDIT_CARD, PosCheckExtraInfo.VARIABLE_REFERENCE, 0, oRefDataJSONObject.optString("refernece"));
			// add "opt_out" parameter into payment extra info
			oCheckPayment.addExtraInfoToList(AppGlobal.g_oFuncOutlet.get().getOutletId(), PosCheckExtraInfo.SECTION_CREDIT_CARD, PosCheckExtraInfo.VARIABLE_DCC_OPT_OUT, 0, "dcc");
			
			// cleanup foreign currency information
			oCheckPayment.setPayForeignCurrency(PosPaymentMethod.PAY_FOREIGN_CURRENCY_LOCAL);
			oCheckPayment.setPayForeignTotal(new BigDecimal("0.00"));
			oCheckPayment.setPayForeignTips(new BigDecimal("0.00"));
			oCheckPayment.setCurrencyCode(AppGlobal.g_oFuncOutlet.get().getCurrencyCode());
			oCheckPayment.setCurrencyRate(new BigDecimal("0.00"));
		}
		
		return true;
	}
	
	// Add old item to item list
	public void addOldCheckPartyToList() {
		int i = 0;
		List<PosCheckParty> checkPartiesArrayList = m_oCheck.getCheckPartiesArrayList();
		
		// Clear all check party
		m_oFuncCheckPartyList.clear();
		
		// Create check parties
		boolean bNeedUpdateCheck = false;
		for(i=0; i<checkPartiesArrayList.size(); i++) {
			m_oCurrentFuncCheckParty = new FuncCheckParty(checkPartiesArrayList.get(i), m_oCheckTaxScRefList);
			m_oFuncCheckPartyList.add(m_oCurrentFuncCheckParty);
			
			// Check if update check is required due to item re-sequence
			if (!bNeedUpdateCheck) {
				for (List<FuncCheckItem> oItemListForSingleSeat:m_oCurrentFuncCheckParty.getWholeItemList()) {
					for (FuncCheckItem oCheckItem:oItemListForSingleSeat) {
						if (oCheckItem.isOldItem() && oCheckItem.isModified()) {
							bNeedUpdateCheck = true;
							break;
						}
					}
					if (bNeedUpdateCheck) {
						break;
					}
				}
			}
		}
		
		// Need update check due to item re-sequence
		if (bNeedUpdateCheck) {
			updateCheck(false, true, PosCheckItem.SEND_MODE_OLD_ITEM, 0, false, 0, 0, 0, "", false, false, false, false, 0, 0, false, false);
		}
		
		m_oCheck.clearCheckPartyArrayList();
	}
	
	// Add old invoice item to item list
	public void addOldInvoiceItemToItemList() {
		int i = 0, iSeatNo = 0, iLineNo = 0;
		FuncCheckItem oFuncCheckItem = null;
		List<PosStockDeliveryInvoiceItem> itemArrayList = null;
		itemArrayList = m_oPosStockDeliveryInvoice.getInvoiceItemsArrayList();
		
		for(i=0; i<itemArrayList.size(); i++) {
			// Create the FuncCheckItem from Invoice Item
			oFuncCheckItem = this.createFuncCheckItemFromStockDeliveryInvoiceItem(itemArrayList.get(i)); 
			
			iLineNo++;
			
			this.addItemToItemList(iSeatNo, iLineNo, oFuncCheckItem);
		}
		
		m_oCheck.clearCheckPartyArrayList();
	}
	
	// *** Process current check party ONLY
	public Integer moveItemToItemList(int iOriSeatNo, int iNewSeatNo, int iLineNo, BigDecimal dChgQty) {
		int iTargetItemIndex = -1;
		
		int iCurrentItemCount = getItemListCount(iNewSeatNo);
		FuncCheckItem oFuncCheckItem = m_oCurrentFuncCheckParty.getCheckItem(iOriSeatNo, iLineNo);
		
		if (dChgQty.compareTo(BigDecimal.ZERO) == 0){
			// Move all quantity
			dChgQty = oFuncCheckItem.getCheckItem().getQty();
		}
		
		if(dChgQty.compareTo(oFuncCheckItem.getCheckItem().getQty()) > 0) {
			m_sErrorMessage = "Inputted quantity is larger than item's quantity";
			return -1;
		}
		
		BigDecimal dNewQty = oFuncCheckItem.getCheckItem().getQty().subtract(dChgQty);
		if (dNewQty.compareTo(BigDecimal.ZERO) > 0) {// change some quantity
			// *** Further development
			/*
			FuncCheckItem oNewSeatFuncCheckItem = new FuncCheckItem(oFuncCheckItem, null);
			oNewSeatFuncCheckItem.getCheckItem().setQty(dChgQty);
			calcCheckItem(oNewSeatFuncCheckItem);
			
			this.addItemToItemList(iNewSeatNo, iCurrentItemCount+1, oNewSeatFuncCheckItem);
		
			// add new seat item to database
			if (oFuncCheckItem.isOldItem()) { // Old Item
				
				boolean updateItemInfo = false;
				// add new seat item's modifier
				if(oNewSeatFuncCheckItem.hasModifier()) {
					for(int i = 0; i < oNewSeatFuncCheckItem.getModifierList().size(); i++) {
						FuncCheckItem oModiFuncCheckItem = oNewSeatFuncCheckItem.getModifierList().get(i);
						oModiFuncCheckItem.getCheckItem().setParentItemId(oNewSeatFuncCheckItem.getCheckItem().getCitmId());
						oModiFuncCheckItem.getCheckItem().setSeatNo(iNewSeatNo);
					}
					updateItemInfo = true;
				}
				
				// add new seat item's discount
				if(oNewSeatFuncCheckItem.hasItemDiscount()) {
					for(int i = 0; i < oNewSeatFuncCheckItem.getItemDiscountList().size(); i++) {
						PosCheckDiscount oDiscountFuncCheckItem = oNewSeatFuncCheckItem.getItemDiscountList().get(i);
						oDiscountFuncCheckItem.setCitmId(oNewSeatFuncCheckItem.getCheckItem().getCitmId());
					}
					updateItemInfo = true;
				}
				
				if (updateItemInfo) {
					oNewSeatFuncCheckItem.getCheckItem().setModified(true);
				}
			} else { // New Item
				if(oNewSeatFuncCheckItem.hasModifier()) {
					for(int i = 0; i < oNewSeatFuncCheckItem.getModifierList().size(); i++) {
						FuncCheckItem oModiFuncCheckItem = oNewSeatFuncCheckItem.getModifierList().get(i);
						oModiFuncCheckItem.getCheckItem().setSeatNo(iNewSeatNo);
					}
				}
			}
			
			// Update quantity and total of original item
			oFuncCheckItem.getCheckItem().setQty(dNewQty);
			calcCheckItem(oFuncCheckItem);
			*/
		} else { // move all quantity to other seat
			this.addItemToItemList(iNewSeatNo, iCurrentItemCount+1, oFuncCheckItem);
			
			if(oFuncCheckItem.hasModifier()) {
				for(int i = 0; i < oFuncCheckItem.getModifierList().size(); i++) {
					FuncCheckItem oModiFuncCheckItem = oFuncCheckItem.getModifierList().get(i);
					oModiFuncCheckItem.getCheckItem().setSeatNo(iNewSeatNo);
				}
			}
			
			m_oCurrentFuncCheckParty.getItemList(iOriSeatNo).remove(iLineNo);
		}

		calcCheck();
		
		// update check and original check item info in database
		if (oFuncCheckItem.isOldItem()) {
			oFuncCheckItem.getCheckItem().setModified(true);
		}
		
		iTargetItemIndex = iCurrentItemCount;
		return iTargetItemIndex;
	}
	
	// Add old check discount to item list
	public void addOldCheckDiscountToList() {
		List<PosCheckDiscount> oCheckDiscList = m_oCheck.getCheckDiscountArrayList();
		
		for(int i=0; i<oCheckDiscList.size(); i++) {
			PosCheckDiscount oCheckDiscount = oCheckDiscList.get(i);
			m_oCheckDiscountList.add(oCheckDiscount);
			
			//handle discount item
			List<PosCheckDiscountItem> oCheckDiscountItems = oCheckDiscount.getCheckDiscountItemList();
			if(oCheckDiscountItems.isEmpty())
				continue;
			
			oCheckDiscount.addCheckDiscountItemCount(oCheckDiscountItems.size());
			for(int j=0; j<m_oFuncCheckPartyList.size(); j++) {
				FuncCheckParty oFuncCheckParty = m_oFuncCheckPartyList.get(j);
				List<List<FuncCheckItem>> oFuncCheckItemPreSeat = oFuncCheckParty.getWholeItemList();
				
				for(int iSeat=0; iSeat<oFuncCheckItemPreSeat.size(); iSeat++) {
					for(int iItemIndex=0; iItemIndex<oFuncCheckItemPreSeat.get(iSeat).size(); iItemIndex++) {
						for(PosCheckDiscountItem oCheckDiscountItem:oCheckDiscountItems) {
							if(oCheckDiscountItem.getCitmId().equals(oFuncCheckItemPreSeat.get(iSeat).get(iItemIndex).getCheckItem().getCitmId())) 
								oFuncCheckItemPreSeat.get(iSeat).get(iItemIndex).addCheckDiscountItemToList(oCheckDiscount.getSeq(), oCheckDiscountItem);
						}
					}
				}
			}
			
			oCheckDiscount.cleanupCheckDiscountItemList();
		}
		
		m_oCheck.clearCheckDiscountList();
	}
	
	// Add new check payment to payment list
	public void addNewCheckPaymentToList(PosCheckPayment oCheckPayment) {
		m_oCheckPaymentList.add(oCheckPayment);
	}
	
	// Add old check payment to payment list
	public void addOldCheckPaymentToList() {
		List<PosCheckPayment> oCheckPaymentList = m_oCheck.getCheckPaymentArrayList();
		m_oCheckPaymentList.clear();
		
		for(PosCheckPayment oCheckPayment: oCheckPaymentList)
			m_oCheckPaymentList.add(oCheckPayment);
		
		m_oCheck.clearCheckPaymentList();
	}
	
	// Add item to item list
	// *** Process current check party ONLY
	public void addItemToItemList(int iSeatNo, int iLineNo, FuncCheckItem oFuncCheckItem){
		if(m_oCurrentFuncCheckParty.getWholeItemList().size() < iSeatNo) {
			m_oCurrentFuncCheckParty.getWholeItemList().add(new ArrayList<FuncCheckItem>());
		}
		
		m_oCurrentFuncCheckParty.addItemToItemList(iSeatNo, iLineNo, oFuncCheckItem);
		
		if(!oFuncCheckItem.isOldItem())
			m_bModified = true;
	}
	
	// Insert item to item list
	// *** Process current check party ONLY
	public void insertItemToItemList(int iSeatNo, int iLineNo, List<FuncCheckItem> oFuncCheckItems){
		if(m_oCurrentFuncCheckParty.getWholeItemList().size() < iSeatNo) {
			m_oCurrentFuncCheckParty.getWholeItemList().add(new ArrayList<FuncCheckItem>());
		}
		
		m_oCurrentFuncCheckParty.insertItemToItemList(iSeatNo, iLineNo, oFuncCheckItems);
		
		for (FuncCheckItem oFuncCheckItem : oFuncCheckItems) {
			if(!oFuncCheckItem.isOldItem()) {
				m_bModified = true;
				break;
			}
		}
	}
	
	// Reset item sequence for single seat no.
	// *** Process current check party ONLY
	public void resetItemSequenceForSeat(int iSeatNo) {
		int iSeq = 1;
		for (FuncCheckItem oFuncCheckItemInSeat : m_oCurrentFuncCheckParty.getWholeItemList().get(iSeatNo)) {
			oFuncCheckItemInSeat.getCheckItem().setSeq(iSeq);
			//set the seat number of it's modifier
			if(oFuncCheckItemInSeat.hasModifier()) {
				for(FuncCheckItem oModiFuncCheckItem:oFuncCheckItemInSeat.getModifierList())
					oModiFuncCheckItem.getCheckItem().setSeatNo(iSeatNo);
			}
			iSeq++;
		}
	}
	
	// Change cover
	public boolean changeCover(int newCover) {
		DateTime modifiedLocTime = null;
		DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		int originalCover = m_oCheck.getGuests();
		
		if(originalCover == newCover) {
			m_sErrorMessage = AppGlobal.g_oLang.get()._("same_cover_value");
			return false;
		}
		
		if(originalCover > newCover) {
			int iNumOfOrderedSeats = 0;
			for(int i = 1; i <= MAX_SEATS; i++) {
				if(this.getItemListCount(i) > 0) {
					iNumOfOrderedSeats++;
				}
			}
			if(iNumOfOrderedSeats > newCover) {
				m_sErrorMessage = AppGlobal.g_oLang.get()._("the_number_of_seats_with_ordered_items_is_more_than_the_new_order");
				return false;
			}
		}
		
		this.setCover(newCover, true);
		
		if(!m_oCheck.getCheckId().equals("")) {
			modifiedLocTime = AppGlobal.getCurrentTime(false);
			m_oCheck.setModifiedLocTime(modifiedLocTime);
			m_oCheck.setModifiedTime(formatter.print(AppGlobal.convertTimeToUTC(modifiedLocTime)));
			m_oCheck.setModifiedUesrId(AppGlobal.g_oFuncUser.get().getUserId());
			m_oCheck.setModifiedStationId(AppGlobal.g_oFuncStation.get().getStationId());
			if(!updateCheck(false, false, PosCheckItem.SEND_MODE_NEW_ITEM, 0, false, 0, 0, 0, "", false, false, false, false, 0, 0, false, false).equals(PosCheck.API_RESULT_SUCCESS))
				return false;
			
			// Add "change_cover" log to action log list
			AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.change_cover.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), "", "", "", "", "from "+originalCover+" to "+newCover);
			
			// Send action log
			AppGlobal.g_oActionLog.get().handleActionLog(false);
		}
				
		return true;
	}
	
	// Save split item
	public boolean splitItemToTargetCheck(FuncCheck oTargetFuncCheck, String sOriTable, String sOriTableExtension, List<String> oTargetCitmIds, ArrayList<HashMap<String, HashMap<String, String>>> oItemsInfo, String sOrgItemIndex) {
		List<String> oItemIdsForSpecialSlip = new ArrayList<String>();
		List<Integer> oMenuitemIdsForSpecialSlip = new ArrayList<Integer>();
		
		JSONObject oPartialSendedQtyInfo = new JSONObject();
		
		List<FuncCheckItem> oCheckItemListForSurveillance = new ArrayList<FuncCheckItem>();
		
		/***** Handle Target Check *****/
		// Perform mix and match
		if(AppGlobal.g_oFuncMixAndMatch.get().isSupportMixAndMatch()){
			AppGlobal.g_oFuncMixAndMatch.get().processMixAndMatch(oTargetFuncCheck);
		}
				
		oTargetFuncCheck.calcCheck();
		
		// Unlock the target check and table
		oTargetFuncCheck.m_oCheck.setLockTime("");
		oTargetFuncCheck.m_oCheck.setLockLocTime(null);
		oTargetFuncCheck.m_oCheck.setLockUserId(0);
		oTargetFuncCheck.m_oCheck.setLockStationId(0);
		oTargetFuncCheck.m_oOutletTable.setStationId(0);
		oTargetFuncCheck.m_oOutletTable.setStatus(PosOutletTable.STATUS_OCCUPIED);

		// Set the update flag of the splitted item to true in order to update the items' check ID and others
		for(FuncCheckParty oFuncCheckParty:oTargetFuncCheck.getCheckPartyList()) {
			for(List<FuncCheckItem> oCheckItemList:oFuncCheckParty.getWholeItemList()){
				for(FuncCheckItem oCheckItem:oCheckItemList) {
					boolean bFound = false;
					for(String sId:oTargetCitmIds){
						if(sId.equals(oCheckItem.getCheckItem().getCitmId())){
							bFound = true;
							break;
						}
					}
					if(bFound == false)
						continue;
					
					// Change item's check id and add the item to default party
					oCheckItem.changeCheckAndCheckPartyId(oTargetFuncCheck.m_oCheck.getCheckId(), "");
					
					oCheckItem.getCheckItem().setModified(true);
					oCheckItemListForSurveillance.add(oCheckItem);
					// prepare the items being printed in special slip
					if(!oCheckItem.isPendingItem() || oCheckItem.isPartialPendingItem()){
						oItemIdsForSpecialSlip.add(oCheckItem.getCheckItem().getCitmId());
						oMenuitemIdsForSpecialSlip.add(oCheckItem.getCheckItem().getItemId());
					}
				}
			}
		}
		
		DateTime oCheckOpenLocTime = null, oCurrentTime = null;
		String sCheckOpenTime = "";
		DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		// Get current time
		oCurrentTime = AppGlobal.getCurrentTime(false);
		
		// Get current business period ID
		String sCurrentBusinessPeriodId = AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId();
		
		if(oTargetFuncCheck.isOldCheck()) {
			// Old check
			
			oTargetFuncCheck.m_oCheck.setModifiedLocTime(oCurrentTime);
			oTargetFuncCheck.m_oCheck.setModifiedTime(formatter.print(AppGlobal.convertTimeToUTC(oCurrentTime)));
			oTargetFuncCheck.m_oCheck.setModifiedUesrId(AppGlobal.g_oFuncUser.get().getUserId());
			oTargetFuncCheck.m_oCheck.setModifiedStationId(AppGlobal.g_oFuncStation.get().getStationId());
		}else {
			// New check
			
			// Increment the check no. for new check in standalone mode
			if (AppGlobal.g_oFuncSmartStation.isStandaloneRole())
				AppGlobal.g_oFuncStation.get().addOneToLastCheckNumber();
			
			oCheckOpenLocTime = oCurrentTime;
			sCheckOpenTime = formatter.print(AppGlobal.convertTimeToUTC(oCurrentTime));
			
			//set check period ID
			oTargetFuncCheck.m_oCheck.setBusinessPeriod(sCurrentBusinessPeriodId);
			
			//set open check local time and utc time
			oTargetFuncCheck.m_oCheck.setOpenLocTime(oCheckOpenLocTime);
			oTargetFuncCheck.m_oCheck.setOpenTime(sCheckOpenTime);
		}
		
		/***** Handle Current Check *****/
		// Perform mix and match
		if(AppGlobal.g_oFuncMixAndMatch.get().isSupportMixAndMatch()){
			AppGlobal.g_oFuncMixAndMatch.get().processMixAndMatch(this);
		}
		
		this.calcCheck();
		this.updateCheckItemSequence(false, true, 0);
		
		
		if( oTargetFuncCheck.m_oOutletTable.isSeatInTag()) {
			// update chks_book_date and chks_resv_refno_with_prefix to store tms information
			JSONObject oInfo = oTargetFuncCheck.m_oOutletTable.getInfo();
			if(oInfo != null){
				String sAction = oInfo.optString("action");
				if(sAction.equals("new_check")){
					String sBookDate = oInfo.optString("book_date");
					String sResvNo = oInfo.optString("refno_with_prefix");
					
					int iGuest = -1;
					iGuest = oInfo.optInt("guests");
					int iMemberId = -1;
					iMemberId = oInfo.optInt("member_id");
					
					if(!sBookDate.isEmpty()) {
						try {
							DateTimeFormatter format = DateTimeFormat.forPattern("yyyy-MM-dd");
							DateTime oBookdate = AppGlobal.convertTimeToLocal(format.parseDateTime(sBookDate));
							oTargetFuncCheck.setResvBookDate(oBookdate);
						} catch (Exception e) {
							e.printStackTrace();
							AppGlobal.stackToString(e);
						}
					}
					if(!sResvNo.isEmpty())
						oTargetFuncCheck.setRefnoWithPrefix(sResvNo);
					
					if(iGuest != -1)
						oTargetFuncCheck.setCover(iGuest, false);
					if(iMemberId != -1)
						oTargetFuncCheck.m_oCheck.setMemberId(iMemberId);
					
					// Clear TMS information
					oTargetFuncCheck.m_oOutletTable.setTag(PosOutletTable.TAG_NO);
					oTargetFuncCheck.m_oOutletTable.setInfo(null);
				}
			}
		}
		oTargetFuncCheck.m_oOutletTable.setStatus(PosOutletTable.STATUS_OCCUPIED);
		
		
		// *****************************************************************
		// Create thread to load detail
		AppThreadManager oAppThreadManager = new AppThreadManager();
		
		// Add the method to the thread manager
		// Thread 1 : Update target check
		// Create parameter array
		Object[] oParameters = new Object[17];
		oParameters[0] = true;
		oParameters[1] = true;
		oParameters[2] = PosCheckItem.SEND_MODE_OLD_ITEM;
		oParameters[3] = 1;
		oParameters[4] = true;
		oParameters[5] = 0;
		oParameters[6] = 0;
		oParameters[7] = 0;
		oParameters[8] = this.getCheckId();
		oParameters[9] = false;
		oParameters[10] = false;
		oParameters[11] = false;
		oParameters[12] = false;
		oParameters[13] = 0;
		oParameters[14] = 0;
		oParameters[15] = false;
		oParameters[16] = false;
		oAppThreadManager.addThread(1, oTargetFuncCheck, "updateCheck", oParameters);

		// Thread 2 : Update original check
		// Create parameter array
		Object[] oParameters2 = new Object[17];
		oParameters2[0] = false;
		oParameters2[1] = true;
		oParameters2[2] = PosCheckItem.SEND_MODE_OLD_ITEM;
		oParameters2[3] = 1;
		oParameters2[4] = false;
		oParameters2[5] = 0;
		oParameters2[6] = 0;
		oParameters2[7] = 0;
		oParameters2[8] = "";
		oParameters2[9] = false;
		oParameters2[10] = false;
		oParameters2[11] = false;
		oParameters2[12] = false;
		oParameters2[13] = 0;
		oParameters2[14] = 0;
		oParameters2[15] = false;
		oParameters2[16] = false;
		oAppThreadManager.addThread(2, this, "updateCheck", oParameters2);

		// Run all of the threads
		oAppThreadManager.runThread();

		// Wait for the thread to finish
		oAppThreadManager.waitForThread();

		String sUpdateTargetResult = (String) oAppThreadManager.getResult(1);
		String sUpdateOriginalResult = (String) oAppThreadManager.getResult(2);
		if(!sUpdateTargetResult.equals(PosCheck.API_RESULT_SUCCESS) || !sUpdateOriginalResult.equals(PosCheck.API_RESULT_SUCCESS))
			return false;
		else {
			if(!oTargetFuncCheck.isOldCheck()) {
				// surveillance event: NewCheck
				HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
				oSurveillanceEventInfo.put("checkNum", AppGlobal.g_oFuncStation.get().getNextCheckPrefixNumber(false));
				this.doSurveillanceEvent(FuncSurveillance.SURVEILLANCE_TYPE_NEW_CHECK, oSurveillanceEventInfo);
				/*
				List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);
				if (!oInterfaceConfigList.isEmpty()) {
					for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
						if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
							FuncSurveillance oFuncSurveillance = new FuncSurveillance(oPosInterfaceConfig);
							HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
							oSurveillanceEventInfo.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_NEW_CHECK);
							oSurveillanceEventInfo.put("checkNum", AppGlobal.g_oFuncStation.get().getNextCheckPrefixNumber(false));
							oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo);
						}
					}
				}
				*/
			}
		}
		//oItemIdsForSpecialSlip;
		// Add "split_table" log to action log + add partial pending information
		List<HashMap<String, String>> oTargetItemList = new ArrayList<HashMap<String, String>>();
		for(FuncCheckParty oFuncCheckParty:oTargetFuncCheck.getCheckPartyList()) {
			for(List<FuncCheckItem> oCheckItemList:oFuncCheckParty.getWholeItemList()){
				for(int iItemIndex = 0; iItemIndex < oCheckItemList.size(); iItemIndex++) {
					FuncCheckItem oCheckItem = oCheckItemList.get(iItemIndex);
					
					if(oItemIdsForSpecialSlip.contains(oCheckItem.getCheckItem().getCitmId())) {
						if(!oCheckItem.isPendingItem() || oCheckItem.isPartialPendingItem()){
							HashMap<String, String> oItemIdHashmap = new HashMap<String, String>();
							oItemIdHashmap.put("id", oCheckItem.getCheckItem().getCitmId());
							JSONObject oSendedItemObject = oCheckItem.getPartialPendingItemInfo(FuncCheckItem.partialPendingItem_PendingInfo);
							try {
								if (oSendedItemObject != null) {
									JSONArray oItemSuffixList = oSendedItemObject.names();
									for (int j = 0; j < oItemSuffixList.length(); ++j) {
										String sItemSuffix = oItemSuffixList.optString(j);
										oPartialSendedQtyInfo.put(oCheckItem.getCheckItem().getCitmId() + "_" + sItemSuffix, oSendedItemObject.optString(sItemSuffix));
									}
								}
								if(!sOrgItemIndex.isEmpty()) {
									int iSlashIndex = sOrgItemIndex.indexOf("_");
									int iSectionId = Integer.parseInt(sOrgItemIndex.substring(0, iSlashIndex));
									int iParentItemIndex = Integer.parseInt(sOrgItemIndex.substring(iSlashIndex + 1));
									FuncCheckItem oParentCheckItem = this.getCheckItem(iSectionId, iParentItemIndex);
									JSONObject oParentSendedItemObject = oParentCheckItem.getPartialPendingItemInfo(FuncCheckItem.partialPendingItem_PendingInfo);
									if (oParentSendedItemObject != null) {
										JSONArray oItemSuffixList = oParentSendedItemObject.names();
										for (int j = 0; j < oItemSuffixList.length(); ++j) {
											String sItemSuffix = oItemSuffixList.optString(j);
											BigDecimal dQty = new BigDecimal(oParentSendedItemObject.optString(sItemSuffix));
											String sFromQty = "";
											for(HashMap<String, HashMap<String, String>> oItemInfo: oItemsInfo) {
												if(oItemInfo.get("SpliteOriItemInfo") != null && oItemInfo.get("SpliteOriItemInfo").get("ItemId") != null 
													&& oItemInfo.get("SpliteOriItemInfo").get("ItemId").compareTo(oParentCheckItem.getCheckItem().getCitmId()) == 0) {
													BigDecimal dItemQty = new BigDecimal(oItemInfo.get("SpliteOriItemInfo").get("ItemQuantity"));
													BigDecimal dOriItemQty = new BigDecimal(oItemInfo.get("SpliteOriItemInfo").get("ItemOriginalQuantity"));
													sFromQty = dQty.multiply(dOriItemQty.divide(dItemQty, 4, RoundingMode.HALF_UP)).toString() + ",";
												}
											}
											oPartialSendedQtyInfo.put(oParentCheckItem.getCheckItem().getCitmId() + "_" + sItemSuffix, sFromQty + dQty.toString());
											oItemIdHashmap.put("splitItemParentItemid", oParentCheckItem.getCheckItem().getCitmId());
										}
									}
								}
							} catch (JSONException e) {
								AppGlobal.stack2Log(e);
							}
							oTargetItemList.add(oItemIdHashmap);
						}
					}
					
					if(m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_item_with_quantity.name()))
						AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.split_item_with_quantity.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), AppGlobal.g_oFuncStation.get().getStationId(), oTargetFuncCheck.getCheckId(), "", oCheckItem.getCheckItem().getCitmId(), "", "", sOriTable+sOriTableExtension+" -> "+oTargetFuncCheck.m_sTableNo+oTargetFuncCheck.m_sTableExtension);
					else 
						AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.split_item_to_other_table.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), AppGlobal.g_oFuncStation.get().getStationId(), oTargetFuncCheck.getCheckId(), "", oCheckItem.getCheckItem().getCitmId(), "", "", sOriTable+sOriTableExtension+" -> "+oTargetFuncCheck.m_sTableNo+oTargetFuncCheck.m_sTableExtension);
				}
			}
		}

		if(m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_item_with_quantity.name()))
			m_sCurrentFunctionKey = "";
		
		// Update cooking overtime table list for target table
		oTargetFuncCheck.handleCheckForOverCookingTimeTableList(null, null, false);
		
		/***** Print Special Slip *****/
		//print action split
		JSONObject oHeaderJSONObject = new JSONObject(), oInfoJSONObject = new JSONObject(), oTempJSONObject = null;
		JSONArray oTempArray = new JSONArray(), oCitmIdArray = new JSONArray();
		String sNewTableNo = "";
		try {
			//form header
			oHeaderJSONObject.put("header", "Split Table");
			oTempJSONObject = new JSONObject();
			String sMessage = sOriTable;
			
			if(sMessage.equals("0"))
				sMessage = "";
			if (!sOriTableExtension.isEmpty())
				sMessage += sOriTableExtension;
			
			if(!oTargetFuncCheck.m_sTableNo.equals("0"))
				sNewTableNo = oTargetFuncCheck.m_sTableNo;
			else
				sNewTableNo = "0";
			
			sMessage += " -> "+sNewTableNo;
			if (!oTargetFuncCheck.m_sTableExtension.isEmpty())
				sMessage += oTargetFuncCheck.m_sTableExtension;
			oTempJSONObject.put("message", sMessage);
			oTempArray.put(oTempJSONObject);
			
			//Table name
			String[] sOriTableName;
			oTempJSONObject = new JSONObject();
			JSONObject oTableNameJSONObject = new JSONObject();
			
			sOriTableName = AppGlobal.g_oFuncOutlet.get().getTableName(sOriTable, sOriTableExtension);
			m_sTableName = AppGlobal.g_oFuncOutlet.get().getTableName(sNewTableNo, oTargetFuncCheck.m_sTableExtension);
			for (int i = 1; i <= AppGlobal.LANGUAGE_COUNT; i++) {
				oTableNameJSONObject.put("TargetTableNameL" + i, m_sTableName[i - 1]);
				oTableNameJSONObject.put("OriginalTableNameL" + i, sOriTableName[i - 1]);
			}
			oTempJSONObject.put("message", oTableNameJSONObject);
			oTempArray.put(oTempJSONObject);
			
			//original check id
			oTempJSONObject = new JSONObject();
			sMessage = this.getCheckId();
			oTempJSONObject.put("message", sMessage);
			oTempArray.put(oTempJSONObject);
			
			oHeaderJSONObject.put("messages", oTempArray);
			
			//Original item info
			oTempArray = new JSONArray();
			for(HashMap<String, HashMap<String, String>> oItemInfo : oItemsInfo){
				if(oItemInfo.containsKey("SpliteOriItemInfo")){
					oTempJSONObject = new JSONObject();
					for(Entry<String, String> oOriItemInfo : oItemInfo.get("SpliteOriItemInfo").entrySet())
						oTempJSONObject.put(oOriItemInfo.getKey(), oOriItemInfo.getValue());
					oTempArray.put(oTempJSONObject);
				}
			}
			oHeaderJSONObject.put("otherInfo", oTempArray);
			
			oTempArray = new JSONArray();
			if(oPartialSendedQtyInfo.length() > 0) {
				oTempArray.put(oPartialSendedQtyInfo);
				oInfoJSONObject.put("partialSendQty", oTempArray);
			}
			
			//form info
			oInfoJSONObject.put("stationId", AppGlobal.g_oFuncStation.get().getStationId());
			oInfoJSONObject.put("userName", AppGlobal.g_oFuncUser.get().getUserName(AppGlobal.g_oCurrentLangIndex.get()));
			oInfoJSONObject.put("userId", AppGlobal.g_oFuncUser.get().getUserId());
			oInfoJSONObject.put("table", oTargetFuncCheck.m_sTableNo);
			
			if(!oTargetItemList.isEmpty()) {
				for(HashMap<String, String> oItemIdHashmap : oTargetItemList) {
					oTempJSONObject = new JSONObject();
					oTempJSONObject.put("id", oItemIdHashmap.get("id"));
					oTempJSONObject.put("splitItemParentItemid", oItemIdHashmap.get("splitItemParentItemid"));
					oCitmIdArray.put(oTempJSONObject);
				}
			} else {
				for(String sCitmId:oItemIdsForSpecialSlip) {
					oTempJSONObject = new JSONObject();
					oTempJSONObject.put("id", sCitmId);
					oCitmIdArray.put(oTempJSONObject);
				}
			}
			oInfoJSONObject.put("citmIds", oCitmIdArray);
			
			JSONObject oPosCheckItemForMenuJSONObject = new JSONObject();
			JSONArray oPosCheckItemForMenuJSONArray = new JSONArray();
			HashMap<Integer, FuncMenuItem> oMenuItems = new HashMap<Integer, FuncMenuItem>();
			
			for(Integer iMenuitmId:oMenuitemIdsForSpecialSlip) {
				if (!oMenuItems.containsKey(iMenuitmId))
					oMenuItems.put(iMenuitmId, AppGlobal.g_oFuncMenu.get().getFuncMenuItemByItemId(iMenuitmId));
			}
			
			for (Integer iItemId : oMenuItems.keySet()) {
				oPosCheckItemForMenuJSONObject = new JSONObject();
				if(oMenuItems.get(iItemId) != null && oMenuItems.get(iItemId).getMenuItem() != null){
					for (int i = 1; i <= 5; i++) {
						oPosCheckItemForMenuJSONObject.put("item_info_l" + i,
								oMenuItems.get(iItemId).getMenuItem().getInfo(i));
					}
				}else
					AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
							AppGlobal.g_oFuncUser.get().getUserId() + "",
							"Fail to get menu item(id: " + iItemId + ") in split item");
				
				oPosCheckItemForMenuJSONArray.put(iItemId, oPosCheckItemForMenuJSONObject);
			}
			oInfoJSONObject.put("menuItems", oPosCheckItemForMenuJSONArray);
			// *****************************************************************
			// Create thread to load detail
			AppThreadManager oAppThreadManager2 = new AppThreadManager();
			// Add the method to the thread manager
			// Thread 1 : Update target check
			// Create parameter array
			Object[] oParameters3 = new Object[5];
			oParameters3[0] = PosActionPrintQueue.KEY_SPLIT_TABLE;
			oParameters3[1] = oHeaderJSONObject;
			oParameters3[2] = oInfoJSONObject;
			oParameters3[3] = AppGlobal.g_oCurrentLangIndex.get();
			oParameters3[4] = 0;
			oAppThreadManager2.addThread(1, oTargetFuncCheck.m_oCheck, "printSpecialSlip", oParameters3);
			
			// Run all of the threads
			oAppThreadManager2.runThread();
			
		}catch(JSONException jsone) {
			AppGlobal.stack2Log(jsone);
		}
		
		//Handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
//SplitCheck, TransferItem - Split to Other Table(split item to new check, split item to other table)
		List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal
				.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);

		for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
			if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
				FuncSurveillance oFuncSurveillance = AppGlobal.getSurveillanceInfoFromList(
						AppGlobal.g_oFuncStation.get().getStationId(), oPosInterfaceConfig);
				HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
				HashMap<String, JSONArray> oSurveillanceJSONEventInfo = new HashMap<String, JSONArray>();
				List<Integer> oSplitCheckNumsList = new ArrayList<Integer>();
				try {
					oSplitCheckNumsList.add(Integer.valueOf(m_oCheck.getCheckPrefixNo()));
					oSplitCheckNumsList.add(Integer.valueOf(oTargetFuncCheck.getCheckPrefixNo()));
				}	catch (NumberFormatException e) {
					//Check No Format Error
				}
				
				oSurveillanceEventInfo.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_SPLIT_CHECK);
				oSurveillanceEventInfo.put("sourceCheckNum", m_oCheck.getCheckPrefixNo());
				oSurveillanceJSONEventInfo.put("splitCheckNums", new JSONArray(oSplitCheckNumsList));
				oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo, oSurveillanceJSONEventInfo);

				int iLangIndex = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup")
						.optJSONObject("params").optJSONObject("language_index").optInt("value");

				for (FuncCheckItem oCheckItem : oCheckItemListForSurveillance) {

					if (oCheckItem.isMinimumChargeItem())
						continue;

					oSurveillanceEventInfo.clear();
					oSurveillanceEventInfo.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_TRANSFER_ITEM);
					oSurveillanceEventInfo.put("fromCheckNum", "" + m_oCheck.getCheckPrefixNo());
					oSurveillanceEventInfo.put("toCheckNum", "" + oTargetFuncCheck.getCheckPrefixNo());
					oSurveillanceEventInfo.put("itemCode", oCheckItem.getCheckItem().getCode());
					oSurveillanceEventInfo.put("itemName", oCheckItem.getCheckItem().getName(iLangIndex));
					oSurveillanceEventInfo.put("qty", "" + oCheckItem.getCheckItem().getQty());
					oSurveillanceEventInfo.put("amount", oCheckItem.getNetItemTotal().toPlainString());

					oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo, null);

					for (FuncCheckItem oChildCheckItem : oCheckItem.getChildItemList()) {
						oSurveillanceEventInfo.clear();
						oSurveillanceEventInfo.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_TRANSFER_ITEM);
						oSurveillanceEventInfo.put("fromCheckNum", "" + m_oCheck.getCheckPrefixNo());
						oSurveillanceEventInfo.put("toCheckNum", "" + oTargetFuncCheck.getCheckPrefixNo());
						oSurveillanceEventInfo.put("itemCode", oChildCheckItem.getCheckItem().getCode());
						oSurveillanceEventInfo.put("itemName", oChildCheckItem.getCheckItem().getName(iLangIndex));
						oSurveillanceEventInfo.put("qty", "" + oChildCheckItem.getCheckItem().getQty());
						oSurveillanceEventInfo.put("amount", oChildCheckItem.getNetItemTotal().toPlainString());

						oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo, null);
					}
				}
			}
		}
		return true;
	}
	
	// Split Table
	public boolean updateSplitItems(String sFunctionKey, HashMap<FuncCheck, List<FuncCheckItem>> oSplitTableItemIndexList, FuncCheck oFromCheck, DateTime oCurrentTime, ArrayList<HashMap<String, HashMap<String, String>>> oItemsInfo) {
		// Unlock the target check and table
		m_oCheck.setLockTime("");
		m_oCheck.setLockLocTime(null);
		m_oCheck.setLockUserId(0);
		m_oCheck.setLockStationId(0);
		m_oOutletTable.setStationId(AppGlobal.g_oFuncStation.get().getStationId());
		m_oOutletTable.setStatus(PosOutletTable.STATUS_OCCUPIED);
		
		boolean bOldCheck = isOldCheck();
		
		DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		
		JSONObject oPartialSendedQtyInfo = new JSONObject();
		String sSplitFromCheckId = "";
		if(oFromCheck != null)
			sSplitFromCheckId = oFromCheck.getCheckId();
		
		// Get current business period ID
		String sCurrentBusinessPeriodId = AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId();
		
		if(isOldCheck()) {
			// Old check
			
			m_oCheck.setModifiedLocTime(oCurrentTime);
			m_oCheck.setModifiedTime(formatter.print(AppGlobal.convertTimeToUTC(oCurrentTime)));
			m_oCheck.setModifiedUesrId(AppGlobal.g_oFuncUser.get().getUserId());
			m_oCheck.setModifiedStationId(AppGlobal.g_oFuncStation.get().getStationId());
			
		}else {
			// New check
			
			// Increment the check no. for new check in standalone mode
			if (AppGlobal.g_oFuncSmartStation.isStandaloneRole())
				AppGlobal.g_oFuncStation.get().addOneToLastCheckNumber();
			
			//set check period ID
			m_oCheck.setBusinessPeriod(sCurrentBusinessPeriodId);
			
			//set open check local time and utc time
			m_oCheck.setOpenLocTime(oCurrentTime);
			m_oCheck.setOpenTime(formatter.print(AppGlobal.convertTimeToUTC(oCurrentTime)));
		}
		
		/***** Handle Current Check *****/
		this.calcCheck();
		this.updateCheckItemSequence(false, true, 0);

		// Send old item first, then send new item
		if(updateCheck(true, true, PosCheckItem.SEND_MODE_OLD_ITEM, 1, true, 0, 0, 0, sSplitFromCheckId, false, false, false, false, 0, 0, false, false).equals(PosCheck.API_RESULT_SUCCESS)) {
			// Send new added item, no need to update check table and outlet table again
			if(!updateCheck(false, true, PosCheckItem.SEND_MODE_NEW_ITEM, 1, false, 0, 0, 0, sSplitFromCheckId, false, false, false, false, 0, 0, false, false).equals(PosCheck.API_RESULT_SUCCESS))
				return false;
			else {
				if(!bOldCheck) {
					// surveillance event: NewCheck
					HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
					oSurveillanceEventInfo.put("checkNum", AppGlobal.g_oFuncStation.get().getNextCheckPrefixNumber(false));
					this.doSurveillanceEvent(FuncSurveillance.SURVEILLANCE_TYPE_NEW_CHECK, oSurveillanceEventInfo);
					/*
					List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);
					if (!oInterfaceConfigList.isEmpty()) {
						for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
							if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
								FuncSurveillance oFuncSurveillance = new FuncSurveillance(oPosInterfaceConfig);
								HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
								oSurveillanceEventInfo.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_NEW_CHECK);
								oSurveillanceEventInfo.put("checkNum", AppGlobal.g_oFuncStation.get().getNextCheckPrefixNumber(false));
								oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo);
							}
						}
					}
					*/
				}
			}
		} else
			return false;
		
		
		if(m_oOutletTable.isSeatInTag()) {
			// update chks_book_date and chks_resv_refno_with_prefix to store tms information
			JSONObject oInfo = m_oOutletTable.getInfo();
			if(oInfo != null){
				String sAction = oInfo.optString("action");
				if(sAction.equals("new_check")){
					String sBookDate = oInfo.optString("book_date");
					String sResvNo = oInfo.optString("refno_with_prefix");
					
					int iGuest = -1;
					iGuest = oInfo.optInt("guests");	
					int iMemberId = -1;
					iMemberId =	oInfo.optInt("member_id");
					
					if(!sBookDate.isEmpty()) {
						try {
							DateTimeFormatter format = DateTimeFormat.forPattern("yyyy-MM-dd");
							DateTime oBookdate = AppGlobal.convertTimeToLocal(format.parseDateTime(sBookDate));
							m_oCheck.setResvBookDate(oBookdate);
						} catch (Exception e) {
							e.printStackTrace();
							AppGlobal.stackToString(e);
						}
					}
					if(!sResvNo.isEmpty())
						m_oCheck.setRefnoWithPrefix(sResvNo);
					
					if(iGuest!=-1)
						m_oCheck.setGuests(iGuest);
					if(iMemberId!=-1)
						m_oCheck.setMemberId(iMemberId);
					
					// Clear TMS information
					m_oOutletTable.setTag(PosOutletTable.TAG_NO);
					m_oOutletTable.setInfo(null);
				}
			}
		}
		m_oOutletTable.setStatus(PosOutletTable.STATUS_OCCUPIED);
		
		
		// Update cooking overtime table list
		this.handleCheckForOverCookingTimeTableList(null, null, false);
		
		JSONObject oPosCheckItemForMenuJSONObject = new JSONObject();
		JSONArray oPosCheckItemForMenuJSONArray = new JSONArray();
		HashMap<Integer, FuncMenuItem> oMenuItems = new HashMap<Integer, FuncMenuItem>();
		
		// add action log + add item partial pending information
		for(Entry<FuncCheck, List<FuncCheckItem>> entry: oSplitTableItemIndexList.entrySet()) {
			FuncCheck oOriFuncCheck = entry.getKey();
			String sOriTable = oOriFuncCheck.getTableNo();
			String sOriTableExtension = oOriFuncCheck.getTableExtension();
			
			List<HashMap<String, String>> oTargetItemList = new ArrayList<HashMap<String, String>>();
			//HashMap<String, HashMap<String, String>> oTargetItemList = new HashMap<String, HashMap<String, String>>();
			for(FuncCheckItem oCheckItem: entry.getValue()) {
				for(FuncCheckItem oCheckItem1 : this.getItemList(oCheckItem.getCheckItem().getSeatNo())) {
					if(oCheckItem1 == oCheckItem) {
						if(!oCheckItem1.isPendingItem() || oCheckItem1.isPartialPendingItem()){
							HashMap<String, String> oItemIdHashmap = new HashMap<String, String>();
							oItemIdHashmap.put("id", oCheckItem1.getCheckItem().getCitmId());
							oItemIdHashmap.put("splitItemParentItemid", oCheckItem1.getSplitItemParentItemId());
							
							oTargetItemList.add(oItemIdHashmap);
							if (!oMenuItems.containsKey(oCheckItem1.getCheckItem().getItemId()))
								oMenuItems.put(oCheckItem1.getCheckItem().getItemId(), AppGlobal.g_oFuncMenu.get().getFuncMenuItemByItemId(oCheckItem1.getCheckItem().getItemId()));
							JSONObject oSendedItemObject = oCheckItem1.getPartialPendingItemInfo(FuncCheckItem.partialPendingItem_PendingInfo);
							
							try {
								if (oSendedItemObject != null) {
									JSONArray oItemSuffixList = oSendedItemObject.names();
									for (int j = 0; j < oItemSuffixList.length(); ++j) {
										String sItemSuffix = oItemSuffixList.optString(j);
										oPartialSendedQtyInfo.put(oCheckItem1.getCheckItem().getCitmId() + "_" + sItemSuffix, oSendedItemObject.optString(sItemSuffix));
									}
								}
								if(oFromCheck != null) {
									for(int iSeatNo = 0; iSeatNo <= MAX_SEATS; iSeatNo++) {	
										for(FuncCheckItem oParentCheckItem : oFromCheck.getItemList(iSeatNo)) {
											if(oParentCheckItem.getCheckItem().getCitmId().compareTo(oCheckItem1.getSplitItemParentItemId()) == 0 
												&& oParentCheckItem.isPartialPendingItem()) {
												JSONObject oParentSendedItemObject = oParentCheckItem.getPartialPendingItemInfo(FuncCheckItem.partialPendingItem_PendingInfo);
												if (oParentSendedItemObject != null) {
													JSONArray oItemSuffixList = oParentSendedItemObject.names();
													for (int j = 0; j < oItemSuffixList.length(); ++j) {
														String sItemSuffix = oItemSuffixList.optString(j);
														BigDecimal dQty = new BigDecimal(oParentSendedItemObject.optString(sItemSuffix));
														String sFromQty = "";
														for(HashMap<String, HashMap<String, String>> oItemInfo: oItemsInfo) {
															if(oItemInfo.get("SpliteOriItemInfo") != null && oItemInfo.get("SpliteOriItemInfo").get("ItemId") != null 
																&& oItemInfo.get("SpliteOriItemInfo").get("ItemId").compareTo(oParentCheckItem.getCheckItem().getCitmId()) == 0) {
																BigDecimal dItemQty = new BigDecimal(oItemInfo.get("SpliteOriItemInfo").get("ItemQuantity"));
																BigDecimal dOriItemQty = new BigDecimal(oItemInfo.get("SpliteOriItemInfo").get("ItemOriginalQuantity"));
																sFromQty = dQty.multiply(dOriItemQty.divide(dItemQty, 4, RoundingMode.HALF_UP)).toString() + ",";
															}
														}
														oPartialSendedQtyInfo.put(oParentCheckItem.getCheckItem().getCitmId() + "_" + sItemSuffix, sFromQty + dQty.toString());
													}
												}
											}
										}
									}
								}
							} catch (JSONException e) {
								AppGlobal.stack2Log(e);
							}
						}
						AppGlobal.g_oActionLog.get().addActionLog(sFunctionKey, PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), AppGlobal.g_oFuncStation.get().getStationId(), this.getCheckId(), "", oCheckItem1.getCheckItem().getCitmId(), "", "", sOriTable+sOriTableExtension+" -> "+this.m_sTableNo+this.m_sTableExtension);
						
						break;
					}
				}
			}
			
			/***** Print Special Slip *****/
			//print action split
			JSONObject oHeaderJSONObject = new JSONObject(), oInfoJSONObject = new JSONObject(), oTempJSONObject = null;
			JSONArray oTempArray = new JSONArray(), oCitmIdArray = new JSONArray();
			String sNewTableNo = "";
			try {
				//form header
				oHeaderJSONObject.put("header", "Split Table");
				oTempJSONObject = new JSONObject();
				String sMessage = sOriTable;
				if(sMessage.equals("0"))
					sMessage = "";
				if (!sOriTableExtension.isEmpty())
					sMessage += sOriTableExtension;
				
				if(!this.getTableNo().equals("0"))
					sNewTableNo = this.getTableNo();
				sMessage += " -> " + sNewTableNo;
				if (!this.getTableExtension().isEmpty())
					sMessage += this.getTableExtension();
				oTempJSONObject.put("message", sMessage);
				oTempArray.put(oTempJSONObject);
				
				String[] sOriTableName;
				oTempJSONObject = new JSONObject();
				JSONObject oTableNameJSONObject = new JSONObject();
				
				sOriTableName = AppGlobal.g_oFuncOutlet.get().getTableName(sOriTable, sOriTableExtension);
				for (int i = 1; i <= AppGlobal.LANGUAGE_COUNT; i++) {
					oTableNameJSONObject.put("TargetTableNameL" + i, m_sTableName[i - 1]);
					oTableNameJSONObject.put("OriginalTableNameL" + i, sOriTableName[i - 1]);
				}
				oTempJSONObject.put("message", oTableNameJSONObject);
				oTempArray.put(oTempJSONObject);
				
				//original check id
				sMessage = oOriFuncCheck.getCheckId();
				oTempJSONObject = new JSONObject();
				oTempJSONObject.put("message", sMessage);
				oTempArray.put(oTempJSONObject);
				oHeaderJSONObject.put("messages", oTempArray);
				
				//Original item info
				oTempArray = new JSONArray();
				for(HashMap<String, HashMap<String, String>> oItemInfo : oItemsInfo){
					if(oItemInfo.containsKey("SpliteOriItemInfo")){
						oTempJSONObject = new JSONObject();
						for(Entry<String, String> oOriItemInfo : oItemInfo.get("SpliteOriItemInfo").entrySet())
							oTempJSONObject.put(oOriItemInfo.getKey(), oOriItemInfo.getValue());
						oTempArray.put(oTempJSONObject);
					}
				}
				oHeaderJSONObject.put("otherInfo", oTempArray);
				
				//form info
				oInfoJSONObject.put("stationId", AppGlobal.g_oFuncStation.get().getStationId());
				oInfoJSONObject.put("userName", AppGlobal.g_oFuncUser.get().getUserName(AppGlobal.g_oCurrentLangIndex.get()));
				oInfoJSONObject.put("userId", AppGlobal.g_oFuncUser.get().getUserId());
				oInfoJSONObject.put("table", this.getTableNo());
				for(HashMap<String, String> oItemIdHashmap : oTargetItemList) {
					oTempJSONObject = new JSONObject();
					oTempJSONObject.put("id", oItemIdHashmap.get("id"));
					oTempJSONObject.put("splitItemParentItemid", oItemIdHashmap.get("splitItemParentItemid"));
					oCitmIdArray.put(oTempJSONObject);
				}
				oInfoJSONObject.put("citmIds", oCitmIdArray);
				
				for (Integer iItemId : oMenuItems.keySet()) {
					oPosCheckItemForMenuJSONObject = new JSONObject();
					if(oMenuItems.get(iItemId) != null && oMenuItems.get(iItemId).getMenuItem() != null){
						for (int i = 1; i <= 5; i++) {
							oPosCheckItemForMenuJSONObject.put("item_info_l" + i,
										oMenuItems.get(iItemId).getMenuItem().getInfo(i));
						}
					}else
						AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
								AppGlobal.g_oFuncUser.get().getUserId() + "",
								"Fail to get menu item(id: " + iItemId + ") in update split item");
					
					oPosCheckItemForMenuJSONArray.put(iItemId, oPosCheckItemForMenuJSONObject);
				}
				oInfoJSONObject.put("menuItems", oPosCheckItemForMenuJSONArray);
				oInfoJSONObject.put("oriSplitItemItemId", oPosCheckItemForMenuJSONArray);
				
				oTempArray = new JSONArray();
				if(oPartialSendedQtyInfo.length() > 0) {
					oTempArray.put(oPartialSendedQtyInfo);
					oInfoJSONObject.put("partialSendQty", oTempArray);
				}
				
				// *****************************************************************
				// Create thread to load detail
				AppThreadManager oAppThreadManager2 = new AppThreadManager();
				// Add the method to the thread manager
				// Thread 1 : Update target check
				// Create parameter array
				Object[] oParameters3 = new Object[5];
				oParameters3[0] = PosActionPrintQueue.KEY_SPLIT_TABLE;
				oParameters3[1] = oHeaderJSONObject;
				oParameters3[2] = oInfoJSONObject;
				oParameters3[3] = AppGlobal.g_oCurrentLangIndex.get();
				oParameters3[4] = 0;
				oAppThreadManager2.addThread(1, m_oCheck, "printSpecialSlip", oParameters3);
				
				// Run all of the threads
				oAppThreadManager2.runThread();
				
			}catch(JSONException jsone) {
				AppGlobal.stack2Log(jsone);
			}
		}

		//Handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
//SplitCheck. TransferItem - Split Table	second version (split_table)
		if (sFunctionKey.equals(AppGlobal.FUNC_LIST.split_table.name())) {
			List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal
					.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);

			for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
				if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
					for (Entry<FuncCheck, List<FuncCheckItem>> entry : oSplitTableItemIndexList.entrySet()) {
						FuncCheck oOriFuncCheck = entry.getKey();
						FuncSurveillance oFuncSurveillance = AppGlobal.getSurveillanceInfoFromList(
								AppGlobal.g_oFuncStation.get().getStationId(), oPosInterfaceConfig);

						HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
						HashMap<String, JSONArray> oSurveillanceJSONEventInfo = new HashMap<String, JSONArray>();
						List<Integer> oSplitCheckNumsList = new ArrayList<Integer>();
						try {
							oSplitCheckNumsList.add(Integer.valueOf(oOriFuncCheck.getCheckPrefixNo()));
							oSplitCheckNumsList.add(Integer.valueOf(m_oCheck.getCheckPrefixNo()));
						}	catch (NumberFormatException e) {
							//Check No Format Error
						}
						oSurveillanceEventInfo.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_SPLIT_CHECK);
						oSurveillanceEventInfo.put("sourceCheckNum", oOriFuncCheck.getCheckPrefixNo());
						oSurveillanceJSONEventInfo.put("splitCheckNums", new JSONArray(oSplitCheckNumsList));
						oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo, oSurveillanceJSONEventInfo);

						int iLangIndex = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup")
								.optJSONObject("params").optJSONObject("language_index").optInt("value");

						for (FuncCheckItem oCheckItem : entry.getValue()) {

							if (oCheckItem.isMinimumChargeItem())
								continue;

							oSurveillanceEventInfo.clear();
							oSurveillanceEventInfo.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_TRANSFER_ITEM);
							oSurveillanceEventInfo.put("fromCheckNum", "" + oOriFuncCheck.getCheckPrefixNo());
							oSurveillanceEventInfo.put("toCheckNum", "" + m_oCheck.getCheckPrefixNo());
							oSurveillanceEventInfo.put("itemCode", oCheckItem.getCheckItem().getCode());
							oSurveillanceEventInfo.put("itemName", oCheckItem.getCheckItem().getName(iLangIndex));
							oSurveillanceEventInfo.put("qty", "" + oCheckItem.getCheckItem().getQty());
							oSurveillanceEventInfo.put("amount", oCheckItem.getNetItemTotal().toPlainString());

							oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo, null);

							for (FuncCheckItem oChildCheckItem : oCheckItem.getChildItemList()) {
								oSurveillanceEventInfo.clear();
								oSurveillanceEventInfo.put("eventType",
										FuncSurveillance.SURVEILLANCE_TYPE_TRANSFER_ITEM);
								oSurveillanceEventInfo.put("fromCheckNum", "" + oOriFuncCheck.getCheckPrefixNo());
								oSurveillanceEventInfo.put("toCheckNum", "" + m_oCheck.getCheckPrefixNo());
								oSurveillanceEventInfo.put("itemCode", oChildCheckItem.getCheckItem().getCode());
								oSurveillanceEventInfo.put("itemName",
										oChildCheckItem.getCheckItem().getName(iLangIndex));
								oSurveillanceEventInfo.put("qty", "" + oChildCheckItem.getCheckItem().getQty());
								oSurveillanceEventInfo.put("amount", oChildCheckItem.getNetItemTotal().toPlainString());

								oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo, null);
							}
						}
					}
				}
			}
		}
		return true;
	}
	
	// Split Check by options
	public boolean splitCheckByOptions(List<FuncCheck> oTargetCheckList, List<BigDecimal> dSplitAmountList) {
		List<HashMap<FuncCheck, List<FuncCheckItem>>> oSplitTableItemIndexList = new ArrayList<HashMap<FuncCheck, List<FuncCheckItem>>>();
		ArrayList<HashMap<String, HashMap<String, String>>> oItemsInfo = new ArrayList<HashMap<String, HashMap<String, String>>>();
		BigDecimal dCurrentCheckTotal = this.getCheckTotal();
		
		for(int i = 0; i < oTargetCheckList.size(); i++) {
			HashMap<FuncCheck, List<FuncCheckItem>> oSplitTableItemList = new HashMap<FuncCheck, List<FuncCheckItem>>();
			oSplitTableItemList.put(this, new ArrayList<FuncCheckItem>());
			oSplitTableItemIndexList.add(oSplitTableItemList);
		}
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oCheckItemList:oFuncCheckParty.getWholeItemList()){
				for(FuncCheckItem oCheckItem: oCheckItemList) {
					if(oCheckItem.isSetMenuItem())
						continue;
					
					if(oCheckItem.isMinimumChargeItem()) {
						FormDialogBox oFormDialogBox = new FormDialogBox(AppGlobal.g_oLang.get()._("ok"), null);
						oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._("warning"));
						oFormDialogBox.setMessage(AppGlobal.g_oLang.get()._("not_allow_to_split_minimum_charge_item"));
						oFormDialogBox.show();
						continue;
					}
					
					BigDecimal dItemQty = oCheckItem.getCheckItem().getQty();
					BigDecimal dOriItemQty = dItemQty;
					int iSeatNo = oCheckItem.getCheckItem().getSeatNo();
					
					for(int i = 0; i < oTargetCheckList.size(); i++) {
						FuncCheck oTargetCheck = oTargetCheckList.get(i);
						BigDecimal dSplitAmount = dSplitAmountList.get(i);

						FuncCheckItem oNewCheckItem = new FuncCheckItem(oCheckItem, null);
						oNewCheckItem.resetAsNewItem();
						
						BigDecimal dSplitRatio = dSplitAmount.divide(dCurrentCheckTotal, 4, RoundingMode.HALF_UP);
						BigDecimal dNewItemQty = dItemQty.multiply(dSplitRatio);
						
						dNewItemQty = dNewItemQty.setScale(4, RoundingMode.FLOOR);
						
						oNewCheckItem.internalChangeQty(dNewItemQty);
						
						// Add item to original information
						HashMap<String, HashMap<String, String>> oItemInfo = new HashMap<String, HashMap<String, String>>();
						HashMap<String, String> oOriItemInfo = new HashMap<String, String>();
						
						oOriItemInfo.put("ItemOriginalQuantity", dItemQty.toString());
						oOriItemInfo.put("ItemQuantity", dOriItemQty.subtract(dNewItemQty).toPlainString());
						oOriItemInfo.put("ItemId", oCheckItem.getCheckItem().getCitmId());
						oOriItemInfo.put("CheckId", oCheckItem.getCheckItem().getCheckId());
						oOriItemInfo.put("ItemCode", oCheckItem.getCheckItem().getCode());
						oOriItemInfo.put("ItemName", oCheckItem.getCheckItem().getName(AppGlobal.g_oCurrentLangIndex.get()));
						for(int iIndex = 1 ; iIndex <= 5 ; iIndex++){
							oOriItemInfo.put("ItemNameL" + iIndex, oCheckItem.getCheckItem().getName(iIndex));
						}
						
						oItemInfo.put("SpliteOriItemInfo", oOriItemInfo);
						oItemsInfo.add(oItemInfo);
						
						// Change item's check id and add the item to default party
						oNewCheckItem.setSplitFromCheckId(oNewCheckItem.getCheckItem().getCheckId()); // Store the check id split from
						oNewCheckItem.changeCheckAndCheckPartyId(oTargetCheck.getCheckId(), "");
						
						// Set the split item parent item id
						oNewCheckItem.setSplitItemParentItemId(oCheckItem.getCheckItem().getCitmId());
						
						oTargetCheck.addItemToItemList(iSeatNo, oTargetCheck.getItemListCount(iSeatNo)+1, oNewCheckItem);
						oSplitTableItemIndexList.get(i).get(this).add(oNewCheckItem);
	
						if (oCheckItem.isSetMenu()) {
							for (FuncCheckItem oChildCheckItem: oCheckItem.getChildItemList()) {
								int iChildSeatNo = oChildCheckItem.getCheckItem().getSeatNo();
								
								FuncCheckItem oNewChildCheckItem = new FuncCheckItem(oChildCheckItem, oNewCheckItem);
								oNewChildCheckItem.resetAsNewItem();
								
								oNewChildCheckItem.internalChangeQty(oNewChildCheckItem.getCheckItem().getBaseQty().multiply(dNewItemQty));
								
								// Change item's check id and add the item to default party
								oNewChildCheckItem.setSplitFromCheckId(oNewChildCheckItem.getCheckItem().getCheckId());
								oNewChildCheckItem.changeCheckAndCheckPartyId(oTargetCheck.getCheckId(), "");
								
								oTargetCheck.addItemToItemList(iChildSeatNo, oTargetCheck.getItemListCount(iChildSeatNo)+1, oNewChildCheckItem);
								oSplitTableItemIndexList.get(i).get(this).add(oNewChildCheckItem);
								
								// New Check Child Item Split Remaining Pending Info
								oNewChildCheckItem.remainingPendingInfoIsExistAndSplitByRatio(dSplitRatio);
							}
						}
						
						// Update quantity of original item
						dOriItemQty = dOriItemQty.subtract(dNewItemQty);
						
						// New Check Item Split Remaining Pending Info
						oNewCheckItem.remainingPendingInfoIsExistAndSplitByRatio(dSplitRatio);
						
						// Copy the item's extra info - add waive tax sc
						if(oCheckItem.isExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_ITEM, PosCheckExtraInfo.VARIABLE_ADD_WAIVE_TAX_SC, 0)) {
							String sExtraInfoValue = oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_ITEM, PosCheckExtraInfo.VARIABLE_ADD_WAIVE_TAX_SC);
							oNewCheckItem.addExtraInfo(PosCheckExtraInfo.BY_ITEM, PosCheckExtraInfo.SECTION_ITEM, PosCheckExtraInfo.VARIABLE_ADD_WAIVE_TAX_SC, ((sExtraInfoValue != null)? sExtraInfoValue : ""));
						}
					}
					BigDecimal dOriRatio = dOriItemQty.divide(dItemQty, 4, RoundingMode.HALF_UP);
					
					oCheckItem.internalChangeQty(dOriItemQty);
					oCheckItem.getCheckItem().setModified(true);
					if (oCheckItem.isSetMenu()) {
						for (FuncCheckItem oChildCheckItem: oCheckItem.getChildItemList()) {
							oChildCheckItem.internalChangeQty(oChildCheckItem.getCheckItem().getBaseQty().multiply(dOriItemQty));
							oChildCheckItem.getCheckItem().setModified(true);
							
							// Original Check Child Item Split Remaining Pending Info
							oChildCheckItem.remainingPendingInfoIsExistAndSplitByRatio(dOriRatio);
						}
					}
					// Original Check Item Split Remaining Pending Info
					oCheckItem.remainingPendingInfoIsExistAndSplitByRatio(dOriRatio);
				}
			}
		}
		
		// Get the processing time
		DateTime oCurrentTime = AppGlobal.getCurrentTime(false);
		
		// Since the check number get from check number field in pos_station, can't use threading to handle multiple send check, otherwise the check number will be wrong
		boolean bResult = true;
		int iNewCheckCount = 0;
		for(int i = 0; i < oTargetCheckList.size(); i++) {
			FuncCheck oTargetCheck = oTargetCheckList.get(i);
			if(oTargetCheck.isOldCheck() == false){
				iNewCheckCount++;
			}
			
			// Set disallow for continuous print (target check of split check by options)
			// Get the continuous printing flag
			oTargetCheck.setAllowContinuousPrint(FuncCheck.NOT_ALLOW_CONTINUOUS_PRINT);
			
			// *** For all new checks, the open time MUST NOT the same because of the duplicate send check checking
			// *** So, the open time is incremented by 1 second for each check
			bResult = oTargetCheck.updateSplitItems(AppGlobal.FUNC_LIST.split_check_by_options.name(), oSplitTableItemIndexList.get(i), this, oCurrentTime.plusSeconds(iNewCheckCount), oItemsInfo);
			if(!bResult)
				break;
		}
		
		// fail to split items
		if(!bResult) {
			m_sErrorMessage = AppGlobal.g_oLang.get()._("fail_to_split_check");
			return false;
		}
		
		// Set disallow for continuous print (original check of split check by options)
		// Get the continuous printing flag
		this.setAllowContinuousPrint(FuncCheck.NOT_ALLOW_CONTINUOUS_PRINT);
		
		// update current check
		this.calcCheck();
		if(!this.updateCheck(false, true, PosCheckItem.SEND_MODE_OLD_ITEM, 1, false, 0, 0, 0, "", false, false, false, false, 0, 0, false, false).equals(PosCheck.API_RESULT_SUCCESS)) {
			m_sErrorMessage = AppGlobal.g_oLang.get()._("fail_to_update_check");
			return false;
		}
		
//SplitCheck, TransferItem - Split check by Options(split_check_by_option)
		List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal
				.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);

		for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
			if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
				List<Integer> oSplitCheckNumsList = new ArrayList<Integer>();
				HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
				HashMap<String, JSONArray> oSurveillanceJSONEventInfo = new HashMap<String, JSONArray>();
				for (FuncCheck oTargetCheck : oTargetCheckList) {
					oSplitCheckNumsList.clear();
					try {
						oSplitCheckNumsList.add(Integer.valueOf(m_oCheck.getCheckPrefixNo()));
						oSplitCheckNumsList.add(Integer.valueOf(oTargetCheck.getCheckPrefixNo()));
					}  catch (NumberFormatException e) {
						// Check No format error
					}
					FuncSurveillance oFuncSurveillance = AppGlobal.getSurveillanceInfoFromList(
							AppGlobal.g_oFuncStation.get().getStationId(), oPosInterfaceConfig);

					oSurveillanceEventInfo.clear();
					oSurveillanceEventInfo.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_SPLIT_CHECK);
					oSurveillanceEventInfo.put("sourceCheckNum", "" + m_oCheck.getCheckPrefixNo());
					oSurveillanceJSONEventInfo.put("splitCheckNums", new JSONArray(oSplitCheckNumsList));
					oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo, oSurveillanceJSONEventInfo);

					int iLangIndex = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup")
							.optJSONObject("params").optJSONObject("language_index").optInt("value");

					for (List<FuncCheckItem> oListCheckItem : oTargetCheck.getWholeItemList()) {
						for (FuncCheckItem oCheckItem : oListCheckItem) {

							if (oCheckItem.isMinimumChargeItem())
								continue;

							oSurveillanceEventInfo.clear();
							oSurveillanceEventInfo.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_TRANSFER_ITEM);
							oSurveillanceEventInfo.put("fromCheckNum", "" + m_oCheck.getCheckPrefixNo());
							oSurveillanceEventInfo.put("toCheckNum", "" + oTargetCheck.getCheckPrefixNo());
							oSurveillanceEventInfo.put("itemCode", oCheckItem.getCheckItem().getCode());
							oSurveillanceEventInfo.put("itemName", oCheckItem.getCheckItem().getName(iLangIndex));
							oSurveillanceEventInfo.put("qty", "" + oCheckItem.getCheckItem().getQty());
							oSurveillanceEventInfo.put("amount", oCheckItem.getNetItemTotal().toPlainString());

							oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo, null);

							for (FuncCheckItem oChildCheckItem : oCheckItem.getChildItemList()) {
								oSurveillanceEventInfo.clear();
								oSurveillanceEventInfo.put("eventType",
										FuncSurveillance.SURVEILLANCE_TYPE_TRANSFER_ITEM);
								oSurveillanceEventInfo.put("fromCheckNum", "" + m_oCheck.getCheckPrefixNo());
								oSurveillanceEventInfo.put("toCheckNum", "" + oTargetCheck.getCheckPrefixNo());
								oSurveillanceEventInfo.put("itemCode", oChildCheckItem.getCheckItem().getCode());
								oSurveillanceEventInfo.put("itemName",
										oChildCheckItem.getCheckItem().getName(iLangIndex));
								oSurveillanceEventInfo.put("qty", "" + oChildCheckItem.getCheckItem().getQty());
								oSurveillanceEventInfo.put("amount", oChildCheckItem.getNetItemTotal().toPlainString());

								oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo, null);
							}
						}
					}
				}
			}
		}
		return true;
	}

	// Merge table
	public boolean mergeTable(FuncCheck oFromFuncCheck, int iVoidCodeId) {
		int i = 0, j = 0, k = 0, itemCount = 0;
		JSONArray oCitmIdArray = new JSONArray();
		JSONObject oPosCheckItemForMenuJSONObject = new JSONObject();
		JSONArray oPosCheckItemForMenuJSONArray = new JSONArray();
		HashMap<Integer, FuncMenuItem> oMenuItems = new HashMap<Integer, FuncMenuItem>();
		
		boolean bCurrentChecktHasCheckDiscount = this.hasCheckDiscount(true, false);
		boolean bTargetChecktHasCheckDiscount = oFromFuncCheck.hasCheckDiscount(true, false);
		
		if (isNeedRollbackForCheckMaximum(oFromFuncCheck.getCheckTotal())) {
			//BigDecimal dSubtotal = this.getCheckTotal().add(oFromFuncCheck.getCheckTotal());
			// Check if table limit is being settled, if yes not allow to
			// void discount
			return false;
		}
		if (oFromFuncCheck == null)
			return false;
		
		// Get the continuous printing flag
		// Set disallow for continuous print (target check only, original check will be voided)
		this.setAllowContinuousPrint(FuncCheck.NOT_ALLOW_CONTINUOUS_PRINT);
		
		// if target check contains check discount,
		// apply all target check discount into current check item(s) and
		// remove all target check discount
		if(bTargetChecktHasCheckDiscount) {
			for (i = 0; i < m_oFuncCheckPartyList.size(); i++) {
				oFromFuncCheck.switchCheckParty(i);
				
				//apply all target check discount(s) into current check item(s)
				for (PosCheckDiscount oDiscount : oFromFuncCheck.getCheckDiscountList()) {
					changeCheckDiscountCheckId(oDiscount, this.getCheckId(), m_oCurrentFuncCheckParty.getCptyId());
					m_oCurrentFuncCheckParty.addNewCheckDiscountToList(oDiscount);
					//change the extra info check id
					oDiscount.changeExtraInfoCheckId(this.getCheckId());
				}

				// remove all discount from the target check
				for (int iIndex = oFromFuncCheck.getCheckDiscountList().size() - 1 ;iIndex >= 0 ; iIndex--)  
					oFromFuncCheck.getCheckDiscountList().remove(iIndex);

				//set all current check item(s) as modified if the target check contains check discount
				for (j = 0; j <= MAX_SEATS; j++) {
					List<FuncCheckItem> oList = this.getItemList(j);
					if (oList.size() <= 0)
						continue;

					for (FuncCheckItem oItem : oList) {
						oItem.getCheckItem().setModified(true);
						checkDiscountForNewlyAddedItem(oItem);
					}
					
				}
			}
		}
		
		List<FuncCheckItem> oFuncCheckItemList = new ArrayList<FuncCheckItem>();
		
		// Loop the target check item list
		for(i=0; i<m_oFuncCheckPartyList.size(); i++){
			
			// Switch the current check party
			oFromFuncCheck.switchCheckParty(i);
			
			for (j = 0; j <= MAX_SEATS; j++) {
				List<FuncCheckItem> oCheckItemList = oFromFuncCheck.getItemList(j);
				if(oCheckItemList.size() <= 0)
					continue;
				
				itemCount = oCheckItemList.size();
				for (k = (itemCount - 1); k >= 0; k--) {
					FuncCheckItem oTargetCheckItem = oFromFuncCheck.getCheckItem(j, 0);
					oFuncCheckItemList.add(oTargetCheckItem);
					if (!oTargetCheckItem.isMinimumChargeItem()) {
						// add the check item id to JSONArray for printing special slip
						JSONObject oTempJSONObject = new JSONObject();
						if (!oTargetCheckItem.isPendingItem() || oTargetCheckItem.isPartialPendingItem()) {
							try {
								oTempJSONObject.put("id", oTargetCheckItem.getCheckItem().getCitmId());
								oCitmIdArray.put(oTempJSONObject);
								if (!oMenuItems.containsKey(oTargetCheckItem.getCheckItem().getItemId()))
									oMenuItems.put(oTargetCheckItem.getCheckItem().getItemId(), AppGlobal.g_oFuncMenu.get().getFuncMenuItemByItemId(oTargetCheckItem.getCheckItem().getItemId()));
							} catch (JSONException jsone) {
								AppGlobal.stack2Log(jsone);
							}
						}
						
						//remove the item from target table check
						oFromFuncCheck.removeItemFromList(j, 0);
						
						//add the item to this check
						int iCurrentItemCount = this.getItemListCount(j);
						oTargetCheckItem.changeCheckAndCheckPartyId(this.getCheckId(), m_oCurrentFuncCheckParty.getCptyId());
						oTargetCheckItem.getCheckItem().setModified(true);
						
						//if current check contains discount, apply the check discount to the target check item(s)
						if(bCurrentChecktHasCheckDiscount)
							checkDiscountForNewlyAddedItem(oTargetCheckItem);
						
						this.addItemToItemList(j, (iCurrentItemCount+1), oTargetCheckItem);
					} else {
						//remove the item from target table check
						oFromFuncCheck.removeItemFromList(j, 0);
						oFromFuncCheck.addItemToItemList(j, oFromFuncCheck.getItemListCount(j) + 1, oTargetCheckItem);
					}
					
					oFromFuncCheck.calcCheck();
					this.calcCheck();
				}
			}
		}
		
		//copy the information from target check to current check
		this.setCover(this.getCover()+oFromFuncCheck.getCover(), true);
		
		oFromFuncCheck.calcCheck();
		oFromFuncCheck.m_oCheck.setLockLocTime(null);
		oFromFuncCheck.m_oCheck.setLockTime("");
		oFromFuncCheck.m_oCheck.setLockStationId(0);
		oFromFuncCheck.m_oCheck.setLockUserId(0);
		
		this.calcCheck();
		m_oOutletTable.setStatus(PosOutletTable.STATUS_OCCUPIED);
		
		// *****************************************************************
		// Create thread to handle void slip
		AppThreadManager oAppThreadManager = new AppThreadManager();
		
		// Add the method to the thread manager
		// Thread 1 :
		// Create parameter array
/** CancelCheck & VoidCheck [mergeTable] ~ thread add param (for consistency) */
	//	Object[] oParameters = new Object[6];
		Object[] oParameters = new Object[7];
		oParameters[0] = iVoidCodeId;
		oParameters[1] = AppGlobal.g_oFuncUser.get().getUserId();
		oParameters[2] = AppGlobal.g_oFuncStation.get().getStationId();
		oParameters[3] = true;
		oParameters[4] = this.getCheckId();
		oParameters[5] = 0;
/** CancelCheck & VoidCheck [mergeTable] ~ thread add param (for consistency) */
		oParameters[6] = false;
		oAppThreadManager.addThread(1, oFromFuncCheck, "voidCheck", oParameters);
		
		// Add the method to the thread manager
		// Thread 2 :
		// Create parameter array
		Object[] oParameters2 = new Object[17];
		oParameters2[0] = false;
		oParameters2[1] = true;
		oParameters2[2] = PosCheckItem.SEND_MODE_OLD_ITEM;
		oParameters2[3] = 2;
		oParameters2[4] = false;
		oParameters2[5] = 0;
		oParameters2[6] = 0;
		oParameters2[7] = 0;
		oParameters2[8] = oFromFuncCheck.getCheckId();
		oParameters2[9] = false;
		oParameters2[10] = false;
		oParameters2[11] = false;
		oParameters2[12] = false;
		oParameters2[13] = 0;
		oParameters2[14] = 0;
		oParameters2[15] = false;
		oParameters2[16] = false;
		oAppThreadManager.addThread(2, this, "updateCheck", oParameters2);
		
		// Run all of the threads
		oAppThreadManager.runThread();

		// Wait for the thread to finish
		oAppThreadManager.waitForThread();
		
		boolean bVoidResult = (boolean) oAppThreadManager.getResult(1);
		String sUpdateResult = (String) oAppThreadManager.getResult(2);
		if(!bVoidResult || !sUpdateResult.equals(PosCheck.API_RESULT_SUCCESS))
            return false;
		
		//Update cooking overtime table list
		oFromFuncCheck.handleCheckForOverCookingTimeTableList(null, null, true);
		
		//print special split
		JSONObject oHeaderJSONObject = new JSONObject(), oInfo1JSONObject = new JSONObject(), oInfo2JSONObject = new JSONObject(), oTempJSONObject = null;
		JSONArray oTempArray = new JSONArray();
		try {
			//form header
			oHeaderJSONObject.put("header", "Merge Table");
			oTempJSONObject = new JSONObject();
			oTempJSONObject.put("message", oFromFuncCheck.getTableNoWithExtensionForDisplay()+" -> "+this.getTableNoWithExtensionForDisplay() );
			oTempArray.put(oTempJSONObject);
			
			// Table name
			oTempJSONObject = new JSONObject();
			JSONObject oTableNameJSONObject = new JSONObject();
			
			for (int iIndex = 1; iIndex <= AppGlobal.LANGUAGE_COUNT; iIndex++) {
				oTableNameJSONObject.put("TargetTableNameL" + iIndex, m_sTableName[iIndex - 1]);
				oTableNameJSONObject.put("OriginalTableNameL" + iIndex, oFromFuncCheck.getTableName()[iIndex - 1]);
			}
			oTempJSONObject.put("message", oTableNameJSONObject);
			oTempArray.put(oTempJSONObject);
			
			// From Check Id
			oTempJSONObject = new JSONObject();
			oTempJSONObject.put("message", oFromFuncCheck.getCheckId());
			oTempArray.put(oTempJSONObject);
			oHeaderJSONObject.put("messages", oTempArray);
			
			//form info for merge_table
			oInfo1JSONObject.put("stationId", AppGlobal.g_oFuncStation.get().getStationId());
			oInfo1JSONObject.put("userName", AppGlobal.g_oFuncUser.get().getUserName(AppGlobal.g_oCurrentLangIndex.get()));
			oInfo1JSONObject.put("userId", AppGlobal.g_oFuncUser.get().getUserId());
			oInfo1JSONObject.put("table", m_sTableNo);
			
			//form info for merge_table_item
			oInfo2JSONObject.put("stationId", AppGlobal.g_oFuncStation.get().getStationId());
			oInfo2JSONObject.put("userName", AppGlobal.g_oFuncUser.get().getUserName(AppGlobal.g_oCurrentLangIndex.get()));
			oInfo2JSONObject.put("userId", AppGlobal.g_oFuncUser.get().getUserId());
			oInfo2JSONObject.put("table", m_sTableNo);
			oInfo2JSONObject.put("citmIds", oCitmIdArray);
			for (Integer iItemId : oMenuItems.keySet()) {
				oPosCheckItemForMenuJSONObject = new JSONObject();
				if(oMenuItems.get(iItemId) != null && oMenuItems.get(iItemId).getMenuItem() != null){
					for (int iCounter = 1;  iCounter<= 5; iCounter++) {
						oPosCheckItemForMenuJSONObject.put("item_info_l" + iCounter,
								oMenuItems.get(iItemId).getMenuItem().getInfo(iCounter));
					}
				}else
					AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
							AppGlobal.g_oFuncUser.get().getUserId() + "",
							"Fail to get menu item(id: " + iItemId + ") in merge table");
				
				oPosCheckItemForMenuJSONArray.put(iItemId, oPosCheckItemForMenuJSONObject);
			}
			oInfo2JSONObject.put("menuItems", oPosCheckItemForMenuJSONArray);
			
			// *****************************************************************
			// Create thread to load detail
			AppThreadManager oAppThreadManager2 = new AppThreadManager();
			// Add the method to the thread manager
			// Thread 1 : print action slip "merge_table"
			// Create parameter array
			Object[] oParameters3 = new Object[5];
			oParameters3[0] = PosActionPrintQueue.KEY_MERGE_TABLE;
			oParameters3[1] = oHeaderJSONObject;
			oParameters3[2] = oInfo1JSONObject;
			oParameters3[3] = AppGlobal.g_oCurrentLangIndex.get();
			oParameters3[4] = 0;
			oAppThreadManager2.addThread(1, m_oCheck, "printSpecialSlip", oParameters3);
			
			// Add the method to the thread manager
			// Thread 2 : print action slip "merge_table_item"
			// Create parameter array
			Object[] oParameters4 = new Object[5];
			oParameters4[0] = PosActionPrintQueue.KEY_MERGE_TABLE_ITEM;
			oParameters4[1] = oHeaderJSONObject;
			oParameters4[2] = oInfo2JSONObject;
			oParameters4[3] = AppGlobal.g_oCurrentLangIndex.get();
			oParameters4[4] = 0;
			oAppThreadManager2.addThread(2, m_oCheck, "printSpecialSlip", oParameters4);
			
			// Run all of the threads
			oAppThreadManager2.runThread();
		}catch(JSONException jsone) {
			AppGlobal.stack2Log(jsone);
		}
		
		//Add "merge_table" log to action log list
		AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.merge_table.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), "", "", "", "", oFromFuncCheck.getTableNoWithExtensionForDisplay()+" -> "+this.getTableNoWithExtensionForDisplay());
		
		// Send action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
// Combine Check, TransferItem - Merge Table (merge_table)
		List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal
				.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);

		for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
			if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
				FuncSurveillance oFuncSurveillance = AppGlobal.getSurveillanceInfoFromList(
						AppGlobal.g_oFuncStation.get().getStationId(), oPosInterfaceConfig);

				HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
				HashMap<String, JSONArray> oSurveillanceJSONEventInfo = new HashMap<String, JSONArray>();
				oSurveillanceEventInfo.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_COMBINE_CHECKS);
				List<Integer> oSourceCheckNums = new ArrayList<Integer>();
				try {
					oSourceCheckNums.add(Integer.valueOf(m_oCheck.getCheckPrefixNo()));
					oSourceCheckNums.add(Integer.valueOf(oFromFuncCheck.getCheckPrefixNo()));
				} catch (NumberFormatException e) {
					// Check No format error
				}
				JSONArray sourceCheckNums = new JSONArray(oSourceCheckNums);

				// String sourceCheckNumsPair = m_oCheck.getCheckNo()+"," +
				// oFromFuncCheck.getCheckNo();
				oSurveillanceJSONEventInfo.put("sourceCheckNums", sourceCheckNums);
				oSurveillanceEventInfo.put("combinedCheckNum", m_oCheck.getCheckPrefixNo());

				oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo, oSurveillanceJSONEventInfo);

				int iLangIndex = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup")
						.optJSONObject("params").optJSONObject("language_index").optInt("value");

				for (FuncCheckItem oCheckItem : oFuncCheckItemList) {

					if (oCheckItem.isMinimumChargeItem())
						continue;

					oSurveillanceEventInfo.clear();
					oSurveillanceEventInfo.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_TRANSFER_ITEM);
					oSurveillanceEventInfo.put("fromCheckNum", oFromFuncCheck.getCheckPrefixNo());
					oSurveillanceEventInfo.put("toCheckNum", m_oCheck.getCheckPrefixNo());
					oSurveillanceEventInfo.put("itemCode", oCheckItem.getCheckItem().getCode());
					oSurveillanceEventInfo.put("itemName", oCheckItem.getCheckItem().getName(iLangIndex));
					oSurveillanceEventInfo.put("qty", oCheckItem.getCheckItem().getQty().toPlainString());
					oSurveillanceEventInfo.put("amount", oCheckItem.getNetItemTotal().toPlainString());

					oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo, null);

					for (FuncCheckItem oChildCheckItem : oCheckItem.getChildItemList()) {
						oSurveillanceEventInfo.clear();
						oSurveillanceEventInfo.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_TRANSFER_ITEM);
						oSurveillanceEventInfo.put("fromCheckNum", oFromFuncCheck.getCheckPrefixNo());
						oSurveillanceEventInfo.put("toCheckNum", m_oCheck.getCheckPrefixNo());
						oSurveillanceEventInfo.put("itemCode", oChildCheckItem.getCheckItem().getCode());
						oSurveillanceEventInfo.put("itemName", oChildCheckItem.getCheckItem().getName(iLangIndex));
						oSurveillanceEventInfo.put("qty", oChildCheckItem.getCheckItem().getQty().toPlainString());
						oSurveillanceEventInfo.put("amount", oChildCheckItem.getNetItemTotal().toPlainString());

						oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo, null);
					}
				}
			}
		}
		
		//unlock target table
		oFromFuncCheck.unlockTable(false, false);
		
		return true;
	}

	// Rush Order
	// *** Process current check party ONLY
	public int rushOrder(int iSeatNo, int iLineNo) {
		int iRushCount = 0;
		m_sErrorMessage = "";

		// Check whether selected item is new item
		FuncCheckItem oFuncCheckItem = getCheckItem(iSeatNo, iLineNo);
		if(oFuncCheckItem == null){
			m_sErrorMessage = AppGlobal.g_oLang.get()._("item_is_missing_in_menu_setup");
			return -1;
		}
		
		if(!oFuncCheckItem.isOldItem()) {
			m_sErrorMessage = AppGlobal.g_oLang.get()._("invalid_for_new_items");
			return -1;
		}
		
		if(oFuncCheckItem.isPendingItem() && !oFuncCheckItem.isPartialPendingItem()) {
			m_sErrorMessage = AppGlobal.g_oLang.get()._("invalid_for_pending_items");
			return -1;
		}
		
		if (oFuncCheckItem.isMinimumChargeItem()) {
			m_sErrorMessage = AppGlobal.g_oLang.get()._("cannot_perform_this_function_on_minimum_charge_item");
			return -1;
		}
		
		iRushCount = oFuncCheckItem.rushOrder(m_sTableNo);

		// update rush info of set menu's child item
		if(oFuncCheckItem.isSetMenu()) {
			for(FuncCheckItem oChildFuncCheckItem: oFuncCheckItem.getChildItemList()) {
				oChildFuncCheckItem.rushOrder(m_sTableNo);
			}
		}
		//update item database
		if(!updateCheck(false, true, PosCheckItem.SEND_MODE_OLD_ITEM, 0, false, 0, 0, 0, "", false, false, false, false, 0, 0, false, false).equals(PosCheck.API_RESULT_SUCCESS)) {
			m_sErrorMessage = AppGlobal.g_oLang.get()._("fail_to_update_check");
			return -1;
		}
		
		oFuncCheckItem.processPrintRushOrderActionSlip(m_sTableNo);
		if(oFuncCheckItem.isSetMenu()) {
			for(FuncCheckItem oChildFuncCheckItem: oFuncCheckItem.getChildItemList()) {
				oChildFuncCheckItem.processPrintRushOrderActionSlip(m_sTableNo);
			}
		}
		
		return iRushCount;
	}
	
	public HashMap<FuncCheckItem, String> rushMultipleOrder(List<HashMap<String, Integer>> oSelectedItems){
		int iRushCount = 0;
		m_sErrorMessage = "";
		ArrayList<String> oItemIds = new ArrayList<String>();
		ArrayList<Integer> oMenuItemIds = new ArrayList<Integer>();
		ArrayList<String> oRepeatChildItemId = new ArrayList<String>();
		HashMap<FuncCheckItem, String> oOrdersStatus = new HashMap<FuncCheckItem, String>();
		JSONObject oNeedToUpdateItemObject = new JSONObject();
		
		for(HashMap<String, Integer>oSelectedItem:oSelectedItems){
			boolean bRushOrder = true;
			// Check whether selected item is new item	
			FuncCheckItem oFuncCheckItem = getCheckItem(oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
			
			if(!oFuncCheckItem.isOldItem()) {
				m_sErrorMessage = AppGlobal.g_oLang.get()._("new_item");
				bRushOrder = false;
			}
			if(oFuncCheckItem.isPendingItem() && !oFuncCheckItem.isPartialPendingItem()) {
				m_sErrorMessage = AppGlobal.g_oLang.get()._("pending_item");
				bRushOrder = false;
			}
			
			if(!bRushOrder){
				oOrdersStatus.put(oFuncCheckItem, m_sErrorMessage);
			}else{
				//check menu item
				if(oFuncCheckItem.isSetMenu()){	
					//if yes, add item to rush order
					iRushCount = oFuncCheckItem.rushOrder(m_sTableNo);
					//add item to print slip queue
					oItemIds.add(oFuncCheckItem.getCheckItem().getCitmId());
					oMenuItemIds.add(oFuncCheckItem.getCheckItem().getItemId());
					oOrdersStatus.put(oFuncCheckItem, AppGlobal.g_oLang.get()._("success"));
					//add child item to rush order
					for(FuncCheckItem oChildFuncCheckItem: oFuncCheckItem.getChildItemList()) {
						oChildFuncCheckItem.rushOrder(m_sTableNo);
						oItemIds.add(oChildFuncCheckItem.getCheckItem().getCitmId());
						oMenuItemIds.add(oChildFuncCheckItem.getCheckItem().getItemId());
						//add child to repeated item id list
						oRepeatChildItemId.add(oChildFuncCheckItem.getCheckItem().getCitmId());
						oOrdersStatus.put(oChildFuncCheckItem, AppGlobal.g_oLang.get()._("success"));
					}
				}else{
					//if not menu item, check if the child item id list is empty or not
					if(oRepeatChildItemId.size()>0){
						//child item id list is not empty, check whether item exists in child item id list
						//if not child item, add item to rush order, otherwise do nothing
						if(!oRepeatChildItemId.contains(oFuncCheckItem.getCheckItem().getCitmId())){
							iRushCount = oFuncCheckItem.rushOrder(m_sTableNo);
							//add item to print slip queue
							oItemIds.add(oFuncCheckItem.getCheckItem().getCitmId());
							oMenuItemIds.add(oFuncCheckItem.getCheckItem().getItemId());
							oOrdersStatus.put(oFuncCheckItem, AppGlobal.g_oLang.get()._("success"));
						}
					}else{
						// if child item id list is empty, add item to rush order
						iRushCount = oFuncCheckItem.rushOrder(m_sTableNo);
						//add item to print slip queue
						oItemIds.add(oFuncCheckItem.getCheckItem().getCitmId());
						oMenuItemIds.add(oFuncCheckItem.getCheckItem().getItemId());
						oOrdersStatus.put(oFuncCheckItem, AppGlobal.g_oLang.get()._("success"));
					}
				}
			}
			
			try {
				if (oFuncCheckItem.isPartialPendingItem()) {
					JSONObject oSendedItemObject = oFuncCheckItem.getPartialPendingItemInfo(FuncCheckItem.partialPendingItem_PendingInfo);
					if (oSendedItemObject != null) {
						Iterator<String> oKeys = oSendedItemObject.keys();
						while (oKeys.hasNext()) {
							String sKeyOfSentItem = oKeys.next();
							BigDecimal dTempQty = null;
							dTempQty = new BigDecimal(oSendedItemObject.getString(sKeyOfSentItem));
							oNeedToUpdateItemObject.put(oFuncCheckItem.getCheckItem().getCitmId() + "_" + sKeyOfSentItem, dTempQty.toPlainString());
						}
					}
				}
			} catch (JSONException e) {
				AppGlobal.stack2Log(e);
			}
		}
		
		//update item database
		if(!updateCheck(false, true, PosCheckItem.SEND_MODE_OLD_ITEM, 0, false, 0, 0, 0, "", false, false, false, false, 0, 0, false, false).equals(PosCheck.API_RESULT_SUCCESS)) {
			m_sErrorMessage = AppGlobal.g_oLang.get()._("fail_to_update_check");
			return null;
		}
		
		JSONObject oPosCheckItemForMenuJSONObject = new JSONObject();
		JSONArray oPosCheckItemForMenuJSONArray = new JSONArray();
		HashMap<Integer, FuncMenuItem> oFunMenuItem = new HashMap<Integer, FuncMenuItem>();
		for (Integer oMenuItemId : oMenuItemIds) {
			if (!oFunMenuItem.containsKey(oMenuItemId))
				oFunMenuItem.put(oMenuItemId, AppGlobal.g_oFuncMenu.get().getFuncMenuItemByItemId(oMenuItemId));
		}
		for (Integer iItemId : oFunMenuItem.keySet()) {
			oPosCheckItemForMenuJSONObject = new JSONObject();
			if(oFunMenuItem.get(iItemId) != null && oFunMenuItem.get(iItemId).getMenuItem() != null){
				for (int i = 1; i <= 5; i++) {
					try {
						oPosCheckItemForMenuJSONObject.put("item_info_l" + i, oFunMenuItem.get(iItemId).getMenuItem().getInfo(i));
						oPosCheckItemForMenuJSONArray.put(iItemId, oPosCheckItemForMenuJSONObject);
					} catch (JSONException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}else {
				AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
						AppGlobal.g_oFuncUser.get().getUserId() + "",
						"Fail to get menu item(id: " + iItemId + ") in multiple rush table");
				m_sErrorMessage = AppGlobal.g_oLang.get()._("item_is_missing_in_menu_setup");
				return null;
			}
		}
		
		JSONObject oInfoJSONObject = new JSONObject();
		try {
			if(oNeedToUpdateItemObject.length() > 0) {
				JSONArray oTempJSONArray = new JSONArray();
				oTempJSONArray.put(oNeedToUpdateItemObject);
				oInfoJSONObject.put("partialSendQty", oTempJSONArray);
			}
		} catch (JSONException e) {
			AppGlobal.stack2Log(e);
		}
		
		// print multiple slip	
		processPrintMultiRushOrderActionSlip(oItemIds, oPosCheckItemForMenuJSONArray, oInfoJSONObject);
		
		return oOrdersStatus;
	}
	
	public void processPrintMultiRushOrderActionSlip(ArrayList<String> oItemIds, JSONArray oPosCheckItemForMenuJSONArray,JSONObject oInfoJSONObject) {
		// print slip
		JSONObject oHeaderJSONObject = new JSONObject();
		try {
			//form the header
			oHeaderJSONObject.put("header", "Rush Order");
			
			//form the information of slip
			oInfoJSONObject.put("stationId", AppGlobal.g_oFuncStation.get().getStationId());
			oInfoJSONObject.put("userId", AppGlobal.g_oFuncUser.get().getUserId());
			oInfoJSONObject.put("userName", AppGlobal.g_oFuncUser.get().getUserName(AppGlobal.g_oCurrentLangIndex.get()));
			oInfoJSONObject.put("table", m_sTableNo);
			
			// Print rush order special slip
			m_oCheck.printMultiSpecialSlip(m_oCheck.getCheckId(), "rush_order", oHeaderJSONObject, oInfoJSONObject, oItemIds, oPosCheckItemForMenuJSONArray, AppGlobal.g_oCurrentLangIndex.get());
		}catch(JSONException jsone) {
			AppGlobal.stack2Log(jsone);
		}
	}
	
	// Mark delivery / clear mark delivery
	// *** Process current check party ONLY
	public void markDelivery(HashMap<String, Integer> oMarkDeliveryItemIds, HashMap<String, Integer> oClearMarkDeliveryItemIds){
		boolean bNeedUpdateDatabaseBoolean = false;
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oCheckItemList:oFuncCheckParty.getWholeItemList()){
				for(FuncCheckItem oCheckItem:oCheckItemList) {
					
					if(oMarkDeliveryItemIds.containsKey(oCheckItem.getCheckItem().getCitmId())){
						//if is partial pending item, put all itemlist (if exist) to delivered list in the extra info
						if(oCheckItem.isPartialPendingItem()){
/*							if(oCheckItem.getPartialPendingItemInfo(FuncCheckItem.partialPendingItem_PendingInfo) != null && oCheckItem.getPartialPendingItemInfo(FuncCheckItem.partialPendingItem_Delivery_Info) != null)
								oCheckItem.updateCountForPartialSentPendingItem(oCheckItem.getPartialPendingItemAmount(), oCheckItem.getPartialPendingItemInfo(FuncCheckItem.partialPendingItem_Delivery_Info), oCheckItem.getPartialPendingItemInfo(FuncCheckItem.partialPendingItem_PendingInfo));
							else if(oCheckItem.getPartialPendingItemInfo(FuncCheckItem.partialPendingItem_PendingInfo) != null)
								oCheckItem.updateCountForPartialSentPendingItem(oCheckItem.getPartialPendingItemAmount(), new JSONObject(), oCheckItem.getPartialPendingItemInfo(FuncCheckItem.partialPendingItem_PendingInfo));
							else if(oCheckItem.getPartialPendingItemInfo(FuncCheckItem.partialPendingItem_Delivery_Info) != null)
								oCheckItem.updateCountForPartialSentPendingItem(oCheckItem.getPartialPendingItemAmount(), oCheckItem.getPartialPendingItemInfo(FuncCheckItem.partialPendingItem_Delivery_Info), new JSONObject());*/
							try {
								JSONObject oSendItemList = oCheckItem.getPartialPendingItemInfo(FuncCheckItem.partialPendingItem_PendingInfo);
								JSONObject oDeliveredItemList = oCheckItem.getPartialPendingItemInfo(FuncCheckItem.partialPendingItem_Delivery_Info);
								
								if (oSendItemList != null) {
									if (oDeliveredItemList == null)
										oDeliveredItemList = new JSONObject();
									
									JSONArray oItemSuffixList = oSendItemList.names();
									for (int j = 0; j < oItemSuffixList.length(); ++j) {
										String sItemSuffix = oItemSuffixList.optString(j);
										oDeliveredItemList.put(sItemSuffix, oSendItemList.optString(sItemSuffix));
									}
								}
								
								// Update the Extra Info
								oCheckItem.updateCountForPartialSentPendingItem(oCheckItem.getPartialPendingItemAmount(), null, oDeliveredItemList);
							} catch (JSONException e) {
								AppGlobal.stack2Log(e);
							}
						}
						
						// Update delivery time
						DateTime oCurrentTime = AppGlobal.getCurrentTime(false);
						DateTimeFormatter oFormatter = DateTimeFormat.forPattern("yyyy-MM-dd'T'HH:mm:ss");
						String sCurrntTimeStamp = oFormatter.print(AppGlobal.convertTimeToUTC(oCurrentTime));
						
						DateTime oMarkDeliveryDateTime = oFormatter.parseDateTime(sCurrntTimeStamp);
						oCheckItem.getCheckItem().setDeliveryTime(oMarkDeliveryDateTime);
						oCheckItem.getCheckItem().setModified(true);
						
						bNeedUpdateDatabaseBoolean = true;
						
						// Add log to action log list
						AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.mark_delivery.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), oFuncCheckParty.getCptyId(), oCheckItem.getCheckItem().getCitmId(), "", "", "Mark delivery");
					}else
					if(oClearMarkDeliveryItemIds.containsKey(oCheckItem.getCheckItem().getCitmId())){
						// Clear mark delivery
						oCheckItem.getCheckItem().setDeliveryTime(null);
						
						oCheckItem.getCheckItem().setModified(true);
						
						bNeedUpdateDatabaseBoolean = true;
						
						// Add log to action log list
						AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.mark_delivery.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), oFuncCheckParty.getCptyId(), oCheckItem.getCheckItem().getCitmId(), "", "", "Clear mark delivery");
					}
				}
			}
		}
		
		if(bNeedUpdateDatabaseBoolean)
			updateCheck(false, true, PosCheckItem.SEND_MODE_OLD_ITEM, 0, false, 0, 0, 0, "", false, false, false, false, 0, 0, false, false);
		
		//handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
	}
	
	public void updateCheckItemSequence(boolean bCurrentPartyOnly, boolean bAllSection, int iSection) {
		if(bCurrentPartyOnly){
			m_oCurrentFuncCheckParty.updateCheckItemSequence(bAllSection, iSection);
		}else{
			for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
				oFuncCheckParty.updateCheckItemSequence(bAllSection, iSection);
			}
		}
	}
	
	public void updateCheckDiscountSequence(boolean bCurrentPartyOnly) {
		if(bCurrentPartyOnly){
			m_oCurrentFuncCheckParty.updateCheckDiscountSequence();
		}else{
			for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
				oFuncCheckParty.updateCheckDiscountSequence();
			}
		}
	}
	
	// Get no. of child in the item list
	// *** Process current check party ONLY
	public int getItemListCount(int iSeatNo){
		if(m_oCurrentFuncCheckParty.getWholeItemList().size() < iSeatNo) {
			m_oCurrentFuncCheckParty.getWholeItemList().add(new ArrayList<FuncCheckItem>());
			return 0;
		}
		
		return m_oCurrentFuncCheckParty.getItemListCount(iSeatNo);
	}
	
	// Get total quantity of ordered item
	public BigDecimal getOrderedItemCount(boolean bCurrentPartyOnly) {
		if(bCurrentPartyOnly){
			return m_oCurrentFuncCheckParty.getOrderedItemCount();
		}else{
			BigDecimal dItemCount = BigDecimal.ZERO;
			for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
				dItemCount = dItemCount.add(oFuncCheckParty.getOrderedItemCount());
			}
			
			return dItemCount;
		}
	}
	
	// Get total quantity of new item
	public BigDecimal getNewItemCount(boolean bCurrentPartyOnly) {
		if(bCurrentPartyOnly){
			return m_oCurrentFuncCheckParty.getNewItemCount();
		}else{
			BigDecimal dItemCount = BigDecimal.ZERO;
			for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
				dItemCount = dItemCount.add(oFuncCheckParty.getNewItemCount());
			}
			
			return dItemCount;
		}
	}
	
	// Get total line count of new unique item (i.e. item in different line with same menu item ID count 1)
	// *** Process current check party ONLY
	public int getNewUniqueItemCount() {
		return m_oCurrentFuncCheckParty.getNewUniqueItemCount();
	}
	
	// Get no. of child item in a item
	// *** Process current check party ONLY
	public int getChildItemListCount(int iSeatNo, int iItemIndex){
		return m_oCurrentFuncCheckParty.getChildItemListCount(iSeatNo, iItemIndex);
	}
	
	// Get no. of modifier in a item
	// *** Process current check party ONLY
	public int getModifierListCount(int iSeatNo, int iItemIndex){
		return m_oCurrentFuncCheckParty.getModifierListCount(iSeatNo, iItemIndex);
	}
	
	// Get no. of child in the item list
	// *** Process current check party ONLY
	public List<FuncCheckItem> getItemList(int iSeatNo){
		if(m_oCurrentFuncCheckParty == null)
			return null;
		
		return m_oCurrentFuncCheckParty.getItemList(iSeatNo);
	}
	
	// Get whole item list
	// *** Process current check party ONLY
	public List<List<FuncCheckItem>> getWholeItemList() {
		if (m_oCurrentFuncCheckParty == null)
			return null;

		return m_oCurrentFuncCheckParty.getWholeItemList();
	}

	// Get check discount list
	public List<PosCheckDiscount> getCheckDiscountList() {
		if (m_oCurrentFuncCheckParty == null)
			return null;

		return m_oCurrentFuncCheckParty.getPartyCheckDiscount();
	}
	
	// Set whole item list
	// *** Process current check party ONLY
	public void setWholeItemList(List<List<FuncCheckItem>> oItemList){
		if(m_oCurrentFuncCheckParty != null)
			m_oCurrentFuncCheckParty.setWholeItemList(oItemList);
	}
	
	public void setCheckDiscountList(List<PosCheckDiscount> oCheckDiscountList){
		if(m_oCurrentFuncCheckParty != null) 
			m_oCurrentFuncCheckParty.setCheckDiscountList(oCheckDiscountList);
	}
	
	// Get the FuncCheckItem by citm ID
	public FuncCheckItem getOrderedCheckItemByCitmId(String sCitmId) {
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oCheckItemList:oFuncCheckParty.getWholeItemList()){
				for(FuncCheckItem oFuncCheckItem:oCheckItemList) {
					if(!oFuncCheckItem.isOldItem())
						continue;
					
					if(oFuncCheckItem.getCheckItem().getCitmId().equals(sCitmId)) {
						// Item found
						return oFuncCheckItem;
					}
				}
			}
		}
		
		return null;
	}
	
	// Get check item object
	// *** Process current check party ONLY
	public FuncCheckItem getCheckItem(int iSeatNo, int iItemIndex){
		return m_oCurrentFuncCheckParty.getCheckItem(iSeatNo, iItemIndex);
	}
	
	// Get check item object with party seq
	public FuncCheckItem getCheckItem(int iPartySeq, int iSeatNo, int iItemIndex){
		if(m_oFuncCheckPartyList.size() <= iPartySeq)
			return null;
		
		return m_oFuncCheckPartyList.get(iPartySeq).getCheckItem(iSeatNo, iItemIndex);
	}
	
	// Get last general item in current check party
	public int getLastGeneralCheckItemItemIndex(int iSeatNo){
		int iIndex = 0;
		for (iIndex = m_oCurrentFuncCheckParty.getWholeItemList().get(iSeatNo).size() - 1; iIndex >= 0; iIndex--) {
			FuncCheckItem oFuncCheckItemInSeat = m_oCurrentFuncCheckParty.getWholeItemList().get(iSeatNo).get(iIndex);
			if (!(oFuncCheckItemInSeat.isModifierItem() || oFuncCheckItemInSeat.isSetMenuItem())
					|| (oFuncCheckItemInSeat.getParentFuncCheckItem() != null
							&& oFuncCheckItemInSeat.getParentFuncCheckItem().isSplitRevenueParent()
							&& m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name()))) {
				break;
			}
		}
		
		return iIndex;
	}
	
	// Get the FuncCheck item index in current check party
	public int getFuncCheckItemItemIndex(int iSeatNo, int iCheckItemId){
		int iIndex = 0;
		for (iIndex = m_oCurrentFuncCheckParty.getWholeItemList().get(iSeatNo).size() - 1; iIndex >= 0; iIndex--) {
			FuncCheckItem oFuncCheckItemInSeat = m_oCurrentFuncCheckParty.getWholeItemList().get(iSeatNo).get(iIndex);
			if(oFuncCheckItemInSeat.getCheckItem().getItemId() == iCheckItemId){
				break;
			}
		}
		return iIndex;
	}
	
	// Change item form the check
	public boolean changeItemQty(boolean bReachZeroCntNotAllow, int iSeatNo, int iLineNo, String sTable, String sTableExtension, BigDecimal dNewQty, boolean bUpdateItemCount){
		BigDecimal dOriginalQty = BigDecimal.ZERO;
		FuncCheckItem oFuncCheckItem = null;
		m_sErrorMessage = "";
		
		// parent item
		oFuncCheckItem = (FuncCheckItem) m_oCurrentFuncCheckParty.getCheckItem(iSeatNo, iLineNo);
		if(oFuncCheckItem.getMenuItem() == null){
			AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
					AppGlobal.g_oFuncUser.get().getUserId() + "",
					"Fail to get menu item(id: " + oFuncCheckItem.getMenuItemId() + ") change item qty");
			m_sErrorMessage = AppGlobal.g_oLang.get()._("item_is_missing_in_menu_setup");
			return false;
		}
		
		dOriginalQty = oFuncCheckItem.getCheckItem().getQty();
		
		// Get the items seat no. and line no. pair for delete later
		TreeMap<String, BigDecimal> oSeatNoLineNoPairs = new TreeMap<String, BigDecimal>();
		// Parent item
		String sKey = StringLib.IntToStringWithLeadingZero(iSeatNo, 3) + "_" + StringLib.IntToStringWithLeadingZero(iLineNo, 5);
		oSeatNoLineNoPairs.put(sKey, dOriginalQty.subtract(dNewQty));
		if((oFuncCheckItem.isSetMenu() || oFuncCheckItem.getMenuItem().isOpenSetMenu()) && oFuncCheckItem.hasChildItem()) {
			// Child item
			for(FuncCheckItem oChildFuncCheckItem:oFuncCheckItem.getChildItemList()) {
				int iChildSeatNo = oChildFuncCheckItem.getCheckItem().getSeatNo();
				int iChildItemIndex = 0;
				for(FuncCheckItem oChildFuncCheckItem2:m_oCurrentFuncCheckParty.getItemList(iChildSeatNo)) {
					if(oChildFuncCheckItem == oChildFuncCheckItem2) {
						sKey = StringLib.IntToStringWithLeadingZero(iChildSeatNo, 3) + "_" + StringLib.IntToStringWithLeadingZero(iChildItemIndex, 5);
						oSeatNoLineNoPairs.put(sKey, oChildFuncCheckItem.getCheckItem().getQty().subtract(oChildFuncCheckItem.getCheckItem().getBaseQty().multiply(dNewQty)));
						break;
					}
					iChildItemIndex++;
				}
			}
		}
		
		// update item count
		if(bUpdateItemCount) {
			boolean bRollBackItemCount = false;
			TreeMap<String, BigDecimal> oRollBackSeatNoPairs = new TreeMap<String, BigDecimal>();
			FuncCheckItem oItmCntFuncCheckItem = null;
			BigDecimal dDifferentQty = null;
			
			for(Entry<String, BigDecimal> entry:oSeatNoLineNoPairs.entrySet()) {
				String split[] = entry.getKey().split("_");
				int iItmCntSeatNo = Integer.parseInt(split[0]);
				int iItmCntLineNo = Integer.parseInt(split[1]);
				dDifferentQty = entry.getValue();
				oItmCntFuncCheckItem = (FuncCheckItem) m_oCurrentFuncCheckParty.getCheckItem(iItmCntSeatNo, iItmCntLineNo);
				
				String sItmCntResult = "";
				String sErrMsg = "";
				if(dDifferentQty.compareTo(BigDecimal.ZERO) > 0) {
					sItmCntResult = this.updateItemCount(oItmCntFuncCheckItem.getMenuItemId(), dDifferentQty, false, false, false);
				}else {
					sItmCntResult = this.updateItemCount(oItmCntFuncCheckItem.getMenuItemId(), dDifferentQty.multiply(new BigDecimal("-1.0")), true, false, false);
				}
				
				if(sItmCntResult.equals("s")) {
					if(AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.no_display.name())) {
						bRollBackItemCount = true;
						break;
					}
					
					//Prompt error
					if(bReachZeroCntNotAllow) {
						sErrMsg = AppGlobal.g_oLang.get()._("item")+":"+oFuncCheckItem.getItemShortDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get())+" "+AppGlobal.g_oLang.get()._("sold_out");
						FormDialogBox oFormDialogBox = new FormDialogBox(AppGlobal.g_oLang.get()._("ok"), null);
						oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._("error"));
						oFormDialogBox.setMessage(sErrMsg);
						oFormDialogBox.show();
						oFormDialogBox = null;
						bRollBackItemCount = true;
						break;
					}else {
						sErrMsg = AppGlobal.g_oLang.get()._("item")+":"+oItmCntFuncCheckItem.getItemShortDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get())+" "+AppGlobal.g_oLang.get()._("sold_out")+", "+AppGlobal.g_oLang.get()._("continue_to_order")+"?";
						FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("ok"), AppGlobal.g_oLang.get()._("cancel"), null);
						oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("item_count_control"));
						oFormConfirmBox.setMessage(sErrMsg);
						oFormConfirmBox.show();
						
						if(oFormConfirmBox.isOKClicked()) {
							if(dDifferentQty.compareTo(BigDecimal.ZERO) > 0) {
								this.updateItemCount(oItmCntFuncCheckItem.getMenuItemId(), dDifferentQty, false, true, false);
							}else {
								this.updateItemCount(oItmCntFuncCheckItem.getMenuItemId(), dDifferentQty.multiply(new BigDecimal("-1.0")), true, true, false);
							}
						}else {
							bRollBackItemCount = true;
							break;
						}
					}
				}else if (sItmCntResult.equals("<")) {
					if(AppGlobal.g_sDisplayMode.get().equals(AppGlobal.DISPLAY_MODE.no_display.name())) {
						bRollBackItemCount = true;
						break;
					}
					
					//Prompt error
					if(bReachZeroCntNotAllow) {
						sErrMsg = AppGlobal.g_oLang.get()._("dont_have_enough_stock");
						FormDialogBox oFormDialogBox = new FormDialogBox(AppGlobal.g_oLang.get()._("ok"), null);
						oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._("error"));
						oFormDialogBox.setMessage(sErrMsg);
						oFormDialogBox.show();
						oFormDialogBox = null;
						bRollBackItemCount = true;
						break;
					}else {
						sErrMsg = AppGlobal.g_oLang.get()._("dont_have_enough_stock")+", "+AppGlobal.g_oLang.get()._("item")+":"+oItmCntFuncCheckItem.getItemShortDescriptionByIndex(AppGlobal.g_oCurrentLangIndex.get())+", "+AppGlobal.g_oLang.get()._("continue_to_order")+"?";
						FormConfirmBox oFormConfirmBox = new FormConfirmBox(AppGlobal.g_oLang.get()._("ok"), AppGlobal.g_oLang.get()._("cancel"), null);
						oFormConfirmBox.setTitle(AppGlobal.g_oLang.get()._("item_count_control"));
						oFormConfirmBox.setMessage(sErrMsg);
						oFormConfirmBox.show();
						
						if(oFormConfirmBox.isOKClicked()) {
							if(dDifferentQty.compareTo(BigDecimal.ZERO) > 0) {
								this.updateItemCount(oItmCntFuncCheckItem.getMenuItemId(), dDifferentQty, false, true, false);
							}else {
								this.updateItemCount(oItmCntFuncCheckItem.getMenuItemId(), dDifferentQty.multiply(new BigDecimal("-1.0")), true, true, false);
							}
						}else {	
							bRollBackItemCount = true;
							break;
						}
					}
				}else if (sItmCntResult.equals("-s") || sItmCntResult.equals("-<")) {
					if(dDifferentQty.compareTo(BigDecimal.ZERO) > 0) {
						this.updateItemCount(oItmCntFuncCheckItem.getMenuItemId(), dDifferentQty, false, true, false);
					}else {
						this.updateItemCount(oItmCntFuncCheckItem.getMenuItemId(), dDifferentQty.multiply(new BigDecimal("-1.0")), true, true, false);
					}
				}
				
				for (FuncCheckListener listener : listeners) {
					listener.FuncCheck_updateItemStockQty(oItmCntFuncCheckItem.getMenuItemId());
				}
				
				oRollBackSeatNoPairs.put(entry.getKey(), entry.getValue());
			}
			
			if(bRollBackItemCount) {
				if(!oRollBackSeatNoPairs.isEmpty()) {
					FuncCheckItem oRollBackFuncCheckItem = null;
					for(Entry<String, BigDecimal> entry:oRollBackSeatNoPairs.entrySet()) {
						String split[] = entry.getKey().split("_");
						int iRollBackSeatNo = Integer.parseInt(split[0]);
						int iRollBackLineNo = Integer.parseInt(split[1]);
						dDifferentQty = entry.getValue();
						oRollBackFuncCheckItem = (FuncCheckItem) m_oCurrentFuncCheckParty.getCheckItem(iRollBackSeatNo, iRollBackLineNo);
						
						if(dDifferentQty.compareTo(BigDecimal.ZERO) > 0) {
							this.updateItemCount(oRollBackFuncCheckItem.getMenuItemId(), dDifferentQty, true, true, false);
						}else {
							this.updateItemCount(oRollBackFuncCheckItem.getMenuItemId(), dDifferentQty.multiply(new BigDecimal("-1.0")), false, true, false);
						}
						
						for (FuncCheckListener listener : listeners) {
							listener.FuncCheck_updateItemStockQty(oRollBackFuncCheckItem.getMenuItemId());
						}
					}
				}
				return false;
			}
			
		}
		
		FuncCheckItem oChgQtyFuncCheckItem = null;
		List<FuncCheckItem> oChgQtyFuncCheckItemList = new ArrayList<FuncCheckItem>();
		for(Entry<String, BigDecimal> entry:oSeatNoLineNoPairs.entrySet()) {
			String split[] = entry.getKey().split("_");
			int iItmCntSeatNo = Integer.parseInt(split[0]);
			int iItmCntLineNo = Integer.parseInt(split[1]);
			oChgQtyFuncCheckItem = (FuncCheckItem) m_oCurrentFuncCheckParty.getCheckItem(iItmCntSeatNo, iItmCntLineNo);
			
			if(!oChgQtyFuncCheckItem.changeQty(sTable, sTableExtension, dOriginalQty, dNewQty)) {
				calcCheck();
				return false;
			}
			
			// store old items for print special slip after check update
			if(oChgQtyFuncCheckItem.isOldItem())
				oChgQtyFuncCheckItemList.add(oChgQtyFuncCheckItem);
		}
		
		// re-calculate the check before update check
		calcCheck();
		if (isNeedRollbackForCheckMaximum(BigDecimal.ZERO) || !this.checkEmployeeDiscount()) {
			for (Entry<String, BigDecimal> entry : oSeatNoLineNoPairs.entrySet()) {
				String split[] = entry.getKey().split("_");
				int iItmCntSeatNo = Integer.parseInt(split[0]);
				int iItmCntLineNo = Integer.parseInt(split[1]);
				oChgQtyFuncCheckItem = (FuncCheckItem) m_oCurrentFuncCheckParty.getCheckItem(iItmCntSeatNo,
						iItmCntLineNo);
				
				if (!oChgQtyFuncCheckItem.changeQty(sTable, sTableExtension, dNewQty, dOriginalQty)) {
					calcCheck();
					return false;
				}

				// store old items for print special slip after check update
				if (oChgQtyFuncCheckItem.isOldItem())
					oChgQtyFuncCheckItemList.add(oChgQtyFuncCheckItem);
			}

			calcCheck();
			return false;
		}
		if(isOldCheck()) {
			if(oFuncCheckItem.isOldItem()) {
				if(oFuncCheckItem.isPartialPendingItem()){
					try {
						JSONObject oSendedItemObject = oFuncCheckItem.getPartialPendingItemInfo(FuncCheckItem.partialPendingItem_PendingInfo);
						JSONObject oDeliveredItemObject = oFuncCheckItem.getPartialPendingItemInfo(FuncCheckItem.partialPendingItem_Delivery_Info);
						BigDecimal dNeedToAddQty = dNewQty;
						
						if (oSendedItemObject != null) {
							Iterator<String> oKeys = oSendedItemObject.keys();
							while (oKeys.hasNext()) {
								String sKeyOfSentItem = oKeys.next();
								BigDecimal dTempQty = new BigDecimal(oSendedItemObject.getString(sKeyOfSentItem));
								dNeedToAddQty = dNeedToAddQty.subtract(dTempQty);
							}
						}
						if (oDeliveredItemObject != null) {
							Iterator<String> oKeys = oDeliveredItemObject.keys();
							while (oKeys.hasNext()) {
								String sKeyOfSentItem = oKeys.next();
								BigDecimal dTempQty = new BigDecimal(oDeliveredItemObject.getString(sKeyOfSentItem));
								dNeedToAddQty = dNeedToAddQty.subtract(dTempQty);
							}
						}
						oFuncCheckItem.updateCountForPartialSentPendingItem(dNeedToAddQty, oSendedItemObject, oDeliveredItemObject);
						
						// Set the item status back to pending item
						if (!oFuncCheckItem.isPendingItem())
							oFuncCheckItem.setPendingItem(PosCheckItem.PENDING_PENDING_ITEM);
					} catch (JSONException e) {
						AppGlobal.stack2Log(e);
					}
				}
				oFuncCheckItem.getCheckItem().setModified(true);
				if(m_bStockDeliveryInvoice)
					oFuncCheckItem.getStockDeliveryInvoiceItem().setModified(true);
				if(m_oCurrentFuncCheckParty.hasPartyCheckDiscount()) {
					for(List<FuncCheckItem> oItemList:m_oCurrentFuncCheckParty.getWholeItemList()){
						for (FuncCheckItem oCheckItem:oItemList) {
							if(oCheckItem.isOldItem())
								oCheckItem.getCheckItem().setModified(true);
						}
					}
				}

				// Add print status for changing quantity for old item in old check
				// Get the continuous printing flag
				/*
				boolean isContPrint = true;
				if (isContPrint){
					// Not allow continuous print for (+) qty, set need to print for (-) qty
					if (dNewQty.compareTo(dOriginalQty) > 0){
						oFuncCheckItem.setIsAddUpdatePrinted(false);
						this.setIsAllowContinuousPrint(false);
					}else if (dNewQty.compareTo(dOriginalQty) < 0)
						oFuncCheckItem.setIsAddUpdatePrinted(false);
				}
				*/
				this.setAllowContinuousPrint(FuncCheck.NOT_ALLOW_CONTINUOUS_PRINT);

				if(updateCheck(false, true, PosCheckItem.SEND_MODE_OLD_ITEM, 0, false, 0, 0, 0, "", false, false, false, false, 0, 0, false, false).equals(PosCheck.API_RESULT_SUCCESS)) {
					for(FuncCheckItem oTmpFuncCheckItem: oChgQtyFuncCheckItemList) {
						if(!oTmpFuncCheckItem.isPendingItem())
							oTmpFuncCheckItem.processPrintChangeQtyActionSlip(sTable, sTableExtension, dOriginalQty.stripTrailingZeros().toPlainString(), dNewQty.stripTrailingZeros().toPlainString(), new JSONObject());
					}
				} else
					return false;
			}
		}
		
		return true;
	}
	
	// Change item receiving quantity for stock delivery control
	public boolean changeItemReceiveQty(int iSeatNo, int iLineNo, String sTable, String sTableExtension, BigDecimal dNewQty){
		FuncCheckItem oFuncCheckItem = null;

		m_sErrorMessage = "";
		
		oFuncCheckItem = (FuncCheckItem) m_oCurrentFuncCheckParty.getCheckItem(iSeatNo, iLineNo);
		PosStockDeliveryInvoiceItem oPosStockDeliveryInvoiceItem = oFuncCheckItem.getStockDeliveryInvoiceItem();
		oPosStockDeliveryInvoiceItem.setActualReceivedQty(dNewQty);
				
		if(isOldCheck()) {
			if(oFuncCheckItem.isOldItem()) {
				oFuncCheckItem.getCheckItem().setModified(true);
				oPosStockDeliveryInvoiceItem.setModified(true);
				updateCheck(false, true, PosCheckItem.SEND_MODE_OLD_ITEM, 0, false, 0, 0, 0, "", false, false, false, false, 0, 0, false, false);
			}else
				updateCheck(false, false, PosCheckItem.SEND_MODE_NEW_ITEM, 0, false, 0, 0, 0, "", false, false, false, false, 0, 0, false, false);
		}
		
		return true;
	}
	
	// Change item course no.
	public boolean changeItemCourse(int iSeatNo, int iLineNo, int iNewCourseId){
		FuncCheckItem oFuncCheckItem = null;

		m_sErrorMessage = "";
		
		oFuncCheckItem = (FuncCheckItem) m_oCurrentFuncCheckParty.getCheckItem(iSeatNo, iLineNo);
		oFuncCheckItem.getCheckItem().setCourseId(iNewCourseId);
		
		if(isOldCheck()) {
			if(oFuncCheckItem.isOldItem()) {
				oFuncCheckItem.getCheckItem().setModified(true);
			}
		}
		
		return true;
	}
	
	// Delete item from the check
	public boolean deleItem(BigDecimal dQty, int iSeatNo, int iLineNo, int iVoidCodeId, String sVoidReasonName, boolean bDeleteFromChangeQuantity) {
		FuncCheckItem oFuncCheckItem = null;
		BigDecimal dOriQty = BigDecimal.ZERO;
		List<String> oItemIds = new ArrayList<String>();
		JSONObject oNeedToUpdateItemObject = new JSONObject();
		//ArrayList<Integer> childItemIds = null;
		
		m_sErrorMessage = "";
		oFuncCheckItem = (FuncCheckItem) m_oCurrentFuncCheckParty.getCheckItem(iSeatNo, iLineNo);
		dOriQty = oFuncCheckItem.getCheckItem().getQty();
		oItemIds.add(oFuncCheckItem.getCheckItem().getCitmId());
		// Get the items seat no. and line no. pair for delete later
		TreeMap<String, Integer> oSeatNoLineNoPairs = new TreeMap<String, Integer>(Collections.reverseOrder());
		// Parent item
		String sKey = StringLib.IntToStringWithLeadingZero(iSeatNo, 3) + "_" + StringLib.IntToStringWithLeadingZero(iLineNo, 5);
		oSeatNoLineNoPairs.put(sKey, 0);
		// Child items
		/*if(oFuncCheckItem.isOldItem() && oFuncCheckItem.hasChildItem()) {
			childItemIds = new ArrayList<Integer>();
			childItemIds.add(Integer.valueOf(oFuncCheckItem.getCheckItem().getCitmId()));
		}*/

		for (FuncCheckItem oChildFuncCheckItem: oFuncCheckItem.getChildItemList()) {
			int iChildSeatNo = oChildFuncCheckItem.getCheckItem().getSeatNo();
			int iChildLineNo = oChildFuncCheckItem.getCheckItem().getSeq();
			BigDecimal dChildQty = oChildFuncCheckItem.getCheckItem().getBaseQty().multiply(dQty);
			
			oItemIds.add(oChildFuncCheckItem.getCheckItem().getCitmId());
			if (oChildFuncCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_CARRY_FORWARD, PosCheckExtraInfo.VARIABLE_ORIGINAL_BUSINESS_DAY) == null) {
				this.updateItemCount(oChildFuncCheckItem.getMenuItemId(), dChildQty, false, false, false);
				for (FuncCheckListener listener : listeners) {
					listener.FuncCheck_updateItemStockQty(oChildFuncCheckItem.getMenuItemId());
				}
			}
			/*for(FuncCheckItem oChildFuncCheckItem2:m_oCurrentFuncCheckParty.getItemList(iChildSeatNo)){
				if(oChildFuncCheckItem == oChildFuncCheckItem2){
					iChildLineNo = iIndex;
					/*if(oFuncCheckItem.isOldItem())
						childItemIds.add(Integer.valueOf(oChildFuncCheckItem2.getCheckItem().getCitmId()));
					//update child item count
					break;
				}
				iIndex++;
			}*/
			
			if(iChildLineNo > 0){
				int iChildLineIndex = iChildLineNo - 1;
				sKey = StringLib.IntToStringWithLeadingZero(iChildSeatNo, 3) + "_" + StringLib.IntToStringWithLeadingZero(iChildLineIndex, 5);
				oSeatNoLineNoPairs.put(sKey, 0);
			}
		}

		//update item count
		if (oFuncCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_CARRY_FORWARD, PosCheckExtraInfo.VARIABLE_ORIGINAL_BUSINESS_DAY) == null) {
			this.updateItemCount(oFuncCheckItem.getMenuItemId(), dQty, false, false, false);
			for (FuncCheckListener listener : listeners) {
				listener.FuncCheck_updateItemStockQty(oFuncCheckItem.getMenuItemId());
			}
		}
		
		// Add print status for the item (void or minus quantity) in old check
		// Get the continuous printing flag
		oFuncCheckItem.setIsVoidPrinted(false);
		this.setAllowContinuousPrint(FuncCheck.ALLOW_CONTINUOUS_PRINT);
		if(oFuncCheckItem.voidItem(this, dQty, iVoidCodeId, sVoidReasonName, this.getTableNo(), this.getTableExtension(), bDeleteFromChangeQuantity) == false){
			m_sErrorMessage = oFuncCheckItem.getLastErrorMessage();
			return false;
		}
		//check if the item being deleted need to print action slip
		boolean bNeededPrintActionSlip = false;
		boolean bNeedAlterItemQty = false;
		BigDecimal dPendingQty = BigDecimal.ZERO;
		if(oFuncCheckItem.isPartialPendingItem()) {
			try {
				dPendingQty = oFuncCheckItem.getPartialPendingItemAmount();
				
				BigDecimal dPendingItemAfterDelete = dPendingQty.subtract(dQty);
				if (dPendingItemAfterDelete.compareTo(BigDecimal.ZERO) < 0) {
					bNeededPrintActionSlip = true;
					bNeedAlterItemQty = true;
					
					if (dPendingItemAfterDelete.signum() < 0)
						dPendingItemAfterDelete = BigDecimal.ZERO;
				}
				JSONObject oSendedItemObject = oFuncCheckItem.getPartialPendingItemInfo(FuncCheckItem.partialPendingItem_PendingInfo);
				JSONObject oDeliveryItemObject = oFuncCheckItem.getPartialPendingItemInfo(FuncCheckItem.partialPendingItem_Delivery_Info);
				ArrayList <String> oPendingDeleteKey = new ArrayList<String>();
				if (bNeedAlterItemQty) {
					BigDecimal dNeedToDeleteQty = dQty.subtract(dPendingQty);
					if (oSendedItemObject != null) {
						Iterator<String> oKeys = oSendedItemObject.keys();
						while (oKeys.hasNext()) {
							String sKeyOfSentItem = oKeys.next();
							BigDecimal dTempQty = new BigDecimal(oSendedItemObject.getString(sKeyOfSentItem));
							if (dNeedToDeleteQty.compareTo(dTempQty) >= 0) {
								dNeedToDeleteQty = dNeedToDeleteQty.subtract(dTempQty);
								oPendingDeleteKey.add(sKeyOfSentItem);
								oNeedToUpdateItemObject.put(oFuncCheckItem.getCheckItem().getCitmId() + "_" + sKeyOfSentItem, dTempQty.toPlainString() + "," + BigDecimal.ZERO.toPlainString());
								if(dNeedToDeleteQty.compareTo(BigDecimal.ZERO) == 0)
									break;
							} else if(dNeedToDeleteQty.compareTo(dTempQty) < 0){
								oSendedItemObject.put(sKeyOfSentItem, dTempQty.subtract(dNeedToDeleteQty).toPlainString());
								oNeedToUpdateItemObject.put(oFuncCheckItem.getCheckItem().getCitmId() + "_" + sKeyOfSentItem, dTempQty.toPlainString() + "," + dTempQty.subtract(dNeedToDeleteQty).toPlainString());
								break;
							}
						}
						for(String sKeyToDelete : oPendingDeleteKey){
							oSendedItemObject.remove(sKeyToDelete);
						}
					}
					// Delete quantity with delivered item if all pending item and send item have been deleted
					if (oDeliveryItemObject != null && dPendingItemAfterDelete.compareTo(BigDecimal.ZERO) == 0 && (oSendedItemObject == null || oSendedItemObject.length() == 0)) {
						JSONArray oItemSuffixList = oDeliveryItemObject.names();
						for (int j = 0; j < oItemSuffixList.length(); ++j) {
							String sItemSuffix = oItemSuffixList.optString(j);
							BigDecimal dDeliveredItemQty = new BigDecimal(oDeliveryItemObject.optString(sItemSuffix));
							if (dNeedToDeleteQty.compareTo(dDeliveredItemQty) > 0) {
								dNeedToDeleteQty = dNeedToDeleteQty.subtract(dDeliveredItemQty);
								oDeliveryItemObject.remove(sItemSuffix);
							} else {
								oDeliveryItemObject.put(sItemSuffix, dDeliveredItemQty.subtract(dNeedToDeleteQty).toPlainString());
								break;
							}
						}
					}
				}
				oFuncCheckItem.updateCountForPartialSentPendingItem(dPendingItemAfterDelete, oSendedItemObject, oDeliveryItemObject);
				
				System.out.println("5227 dOriQty " + dOriQty.toPlainString() + " dQty " + dQty.toPlainString());
			} catch (JSONException e) {
				AppGlobal.stack2Log(e);
			}
		} else if(!oFuncCheckItem.isPendingItem())
			bNeededPrintActionSlip = true;
		this.removeMinimumCharge(oFuncCheckItem);
		
		// print special slip
		updateCheckItemSequence(true, true, 0);
		if(oFuncCheckItem.isOldItem()) {
			// Print action slip if item is not in pending status
			if(m_oCurrentFuncCheckParty.hasPartyCheckDiscount()) {
				for(List<FuncCheckItem> oItemList:m_oCurrentFuncCheckParty.getWholeItemList()){
					for (FuncCheckItem oCheckItem:oItemList) {
						if(oCheckItem.isOldItem())
							oCheckItem.getCheckItem().setModified(true);
					}
				}
			}
			
			if(!updateCheck(false, true, PosCheckItem.SEND_MODE_OLD_ITEM, 0, false, 0, 0, 0, "", false, false, false, false, 0, 0, false, false).equals(PosCheck.API_RESULT_SUCCESS)) {
				m_sErrorMessage = AppGlobal.g_oLang.get()._("fail_to_delete_item");
				return false;
			}
			if(bNeedAlterItemQty){
				dOriQty = dOriQty.subtract(dPendingQty);
				dQty = dQty.subtract(dPendingQty);
			}
			if(bNeededPrintActionSlip) {
				if (bDeleteFromChangeQuantity) {	// For delete item quantity from "Change Quantity" function, print "Change Quantity" action slip
					BigDecimal dNewQty = dOriQty.subtract(dQty);
					oFuncCheckItem.processPrintChangeQtyActionSlip(this.getTableNo(), this.getTableExtension(), dOriQty.stripTrailingZeros().toPlainString(), dNewQty.stripTrailingZeros().toPlainString(), oNeedToUpdateItemObject);
				} else {
					try {
						JSONObject oHeaderJSONObject = new JSONObject(), oInfoJSONObject = new JSONObject(), oTempJSONObject = null;
						JSONArray oTempJSONArray = null;
						
						//form header
						oHeaderJSONObject.put("header", "DeleteItem");
						oTempJSONArray = new JSONArray();
						oTempJSONObject = new JSONObject();
						oTempJSONObject.put("message", iVoidCodeId);
						oTempJSONArray.put(oTempJSONObject);
						oHeaderJSONObject.put("messages", oTempJSONArray);
						
						//form info
						oInfoJSONObject.put("stationId", AppGlobal.g_oFuncStation.get().getStationId());
						oInfoJSONObject.put("userId", AppGlobal.g_oFuncUser.get().getUserId());
						oInfoJSONObject.put("userName", AppGlobal.g_oFuncUser.get().getUserName(1));
						oInfoJSONObject.put("table", m_sTableNo + m_sTableExtension);
						oTempJSONArray = new JSONArray();
						oTempJSONObject = new JSONObject();
						oTempJSONObject.put(String.valueOf(oFuncCheckItem.getCheckItem().getCitmId()), dQty);
						oTempJSONArray.put(oTempJSONObject);
						oInfoJSONObject.put("removeQty", oTempJSONArray);
						
						oTempJSONArray = new JSONArray();
						oTempJSONArray.put(oNeedToUpdateItemObject);
						oInfoJSONObject.put("partialSendQty", oTempJSONArray);
						
						// *****************************************************************
						// Create thread to print special slip
						AppThreadManager oAppThreadManager = new AppThreadManager();
						
						// Add the method to the thread manager
						// Thread 1 : Print special slip
						// Create parameter array
						Object[] oParameters = new Object[6];
						oParameters[0] = getCheckId();
						oParameters[1] = PosActionPrintQueue.KEY_DELETE_ITEM;
						oParameters[2] = oHeaderJSONObject;
						oParameters[3] = oInfoJSONObject;
						oParameters[4] = oItemIds;
						oParameters[5] = AppGlobal.g_oCurrentLangIndex.get();
						oAppThreadManager.addThread(1, oFuncCheckItem.getCheckItem(), "printSpecialSlip", oParameters);
						
						// Run the thread without wait
						oAppThreadManager.runThread();
					}catch(JSONException jsone) {
						AppGlobal.stack2Log(jsone);
					}
				}
			}
		}
		
		//update coupon status if it is coupon item
		if(oFuncCheckItem.isCouponItem()) {
			FuncCoupon oCoupon = new FuncCoupon();
			oCoupon.setStartCoupon(oFuncCheckItem.getExtraInfoBySectionAndVariable("online_coupon", "sell_start_coupon"));
			oCoupon.setEndCoupon(oFuncCheckItem.getExtraInfoBySectionAndVariable("online_coupon", "sell_end_coupon"));
			oCoupon.setCouponCurrentStatus(FuncCoupon.COUPON_STATUS_LOCKED);
			oCoupon.setCouponNextStatus(FuncCoupon.COUPON_STATUS_NEW);
			
			oCoupon.updateCoupon(FuncCoupon.UPDATE_COUPON_TYPE_ORDER_ITEM);
		}
		
		// Void SVC Redeem Item Coupon
		if (oFuncCheckItem.isSVCCouponRedeemItem()) {
			voidSVCRedeemItemCoupon(oFuncCheckItem);
		}
		
		//really remove item form list
		if (dQty.compareTo(dOriQty) == 0){
			for(Entry<String, Integer> entry:oSeatNoLineNoPairs.entrySet()){
				String split[] = entry.getKey().split("_");
				int iRemoveSeatNo = Integer.parseInt(split[0]);
				int iRemoveLineNo = Integer.parseInt(split[1]);
				m_oCurrentFuncCheckParty.getItemList(iRemoveSeatNo).remove(iRemoveLineNo);
			}
			
			//re-sequence the item
			updateCheckItemSequence(true, true, 0);
		}
		
		calcCheck();
		
		return true;
	}
	
	// Delete multiple from the check
	public boolean deleMultipleItems(List<HashMap<String, Integer>> oSelectedItems, int iVoidCodeId, String sVoidReasonName) {
		int iSectionId = 0, iItemIndex = 0;
		FuncCheckItem oFuncCheckItem = null;
		BigDecimal dQty = null;
		List<String> oSlipItemIds = new ArrayList<String>(), oPrtItemIds = new ArrayList<String>();
		HashMap<String, BigDecimal> oSlipItemQtys = new HashMap<String, BigDecimal>();
		List<HashMap<String, String>> oUpdateItemCntList = new ArrayList<HashMap<String, String>>();
		
		if(oSelectedItems.isEmpty())
			return false;
		
		for(HashMap<String, Integer> oSelectedItem:oSelectedItems) {
			iSectionId = 0;
			iItemIndex = 0;
			
			iSectionId = oSelectedItem.get("sectionId");
			iItemIndex = oSelectedItem.get("itemIndex");
			
			if(oSelectedItem.get("setMenuItem") == 1)
				continue;
			
			oFuncCheckItem = (FuncCheckItem) m_oCurrentFuncCheckParty.getCheckItem(iSectionId, iItemIndex);
			dQty = oFuncCheckItem.getCheckItem().getQty();
			BigDecimal dOriRoundTotal = oFuncCheckItem.getCheckItem().getRoundTotal();
			
			// pre-handle update item count
			HashMap<String, String> oUpdateItemCnt = new HashMap<String, String>();
			oUpdateItemCnt.put("itemId", String.valueOf(oFuncCheckItem.getCheckItem().getItemId()));
			oUpdateItemCnt.put("qty", dQty.toPlainString());
			oUpdateItemCntList.add(oUpdateItemCnt);
			
			// void item
			if(oFuncCheckItem.voidItem(this, dQty, iVoidCodeId, sVoidReasonName, m_sTableNo, m_sTableExtension, false) == false) 
				continue;
			
			// update action slip printing item ids
			oPrtItemIds.add(oFuncCheckItem.getCheckItem().getCitmId());
			if(oFuncCheckItem.hasChildItem()) {
				for(FuncCheckItem oChildItem : oFuncCheckItem.getChildItemList())
					oPrtItemIds.add(oChildItem.getCheckItem().getCitmId());
			}
			
			this.removeMinimumCharge(oFuncCheckItem);
			
			// re-sequence the item
			updateCheckItemSequence(true, true, 0);
			
			// update coupon status
			if(oFuncCheckItem.isCouponItem()) {
				FuncCoupon oCoupon = new FuncCoupon();
				oCoupon.setStartCoupon(oFuncCheckItem.getExtraInfoBySectionAndVariable("online_coupon", "sell_start_coupon"));
				oCoupon.setEndCoupon(oFuncCheckItem.getExtraInfoBySectionAndVariable("online_coupon", "sell_end_coupon"));
				oCoupon.setCouponCurrentStatus(FuncCoupon.COUPON_STATUS_LOCKED);
				oCoupon.setCouponNextStatus(FuncCoupon.COUPON_STATUS_NEW);
				
				oCoupon.updateCoupon(FuncCoupon.UPDATE_COUPON_TYPE_ORDER_ITEM);
			}
			
			// Void SVC Redeem Item Coupon
			if (oFuncCheckItem.isSVCCouponRedeemItem()) {
				voidSVCRedeemItemCoupon(oFuncCheckItem);
			}
			
			if(iVoidCodeId != 0 && sVoidReasonName != null) {
				if(!oFuncCheckItem.isPendingItem()) {
					oSlipItemIds.add(oFuncCheckItem.getCheckItem().getCitmId());
					oSlipItemQtys.put(oFuncCheckItem.getCheckItem().getCitmId(), oFuncCheckItem.getCheckItem().getQty());
				}
				
				/*if(oFuncCheckItem.hasChildItem()) {
					for(FuncCheckItem oChildFuncCheckItem:oFuncCheckItem.getChildItemList()){
						oSlipItemIds.add(Integer.valueOf(oChildFuncCheckItem.getCheckItem().getCitmId()));
						oSlipItemQtys.put(Integer.valueOf(oChildFuncCheckItem.getCheckItem().getCitmId()), oChildFuncCheckItem.getCheckItem().getQty());
					}
				}*/
				
				// Add log to action log list
				AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.delete_multiple_item.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId() , AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), "", oFuncCheckItem.getCheckItem().getCitmId(), "", "", "");
			}
			
/**ItemCancel & ItemVoid [deleMultipleItems] */
/** Set menu item amount calculation method not complete : By 1) Zero / 2) Subtraction / 3) Multiplication */ 
			// surveillance eConnect check detail event: ItemCancel & ItemVoid
			List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);
			if (!oInterfaceConfigList.isEmpty()) {	
				for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
					if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {		
						FuncSurveillance oFuncSurveillance = new FuncSurveillance(oPosInterfaceConfig);
						String sCheckNum = (isOldCheck()) ? getCheckPrefixNo() : AppGlobal.g_oFuncStation.get().getNextCheckPrefixNumber(false);
						String sEventType = (oFuncCheckItem.isOldItem() && iVoidCodeId != 0 && sVoidReasonName != null) ? FuncSurveillance.SURVEILLANCE_TYPE_ITEM_VOID : FuncSurveillance.SURVEILLANCE_TYPE_ITEM_CANCEL;
						int iLangIndex = 1;
						if(oPosInterfaceConfig.getInterfaceConfig().has("general_setup") && oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").has("language_index"))
							iLangIndex = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").optJSONObject("language_index").optInt("value");
						
						HashMap<String, String> oSurveillanceEventInfo= new HashMap<String, String> ();
						oSurveillanceEventInfo.put("eventType", sEventType);
						oSurveillanceEventInfo.put("checkNum", sCheckNum);
						oSurveillanceEventInfo.put("qty", dQty.negate().toPlainString());
						if(dQty.compareTo(oFuncCheckItem.getCheckItem().getQty()) == 0)
							oSurveillanceEventInfo.put("amount", dOriRoundTotal.negate().toPlainString());
						else
							oSurveillanceEventInfo.put("amount", dOriRoundTotal.subtract(oFuncCheckItem.getCheckItem().getRoundTotal()).negate().toPlainString());
						oSurveillanceEventInfo.put("itemCode", oFuncCheckItem.getCheckItem().getCode());
						oSurveillanceEventInfo.put("itemName", oFuncCheckItem.getCheckItem().getName(iLangIndex));
						oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo, null);
						
						if (oFuncCheckItem.isSetMenu()) {
							for (FuncCheckItem oChildFuncCheckItem : oFuncCheckItem.getChildItemList()) {
								HashMap<String, String> oSurveillanceEventInfo1= new HashMap<String, String> ();
								oSurveillanceEventInfo1.put("eventType", sEventType);
								oSurveillanceEventInfo1.put("checkNum", sCheckNum);
								oSurveillanceEventInfo1.put("qty", dQty.multiply(oChildFuncCheckItem.getCheckItem().getBaseQty()).negate().toPlainString());
								oSurveillanceEventInfo1.put("amount", oChildFuncCheckItem.getCheckItem().getPrice().multiply(dQty).negate().toPlainString());	// ??? ZERO or using subtraction ???
								oSurveillanceEventInfo1.put("itemCode", oChildFuncCheckItem.getCheckItem().getCode());
								oSurveillanceEventInfo1.put("itemName", oChildFuncCheckItem.getCheckItem().getName(iLangIndex));
								oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo1, null);
							}
						}
					}
				}
			}
		}
		
		//handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
		//update item count
		if(!oUpdateItemCntList.isEmpty()) {
			updateMultipleItemCount(oUpdateItemCntList, false, false, false);
			for(HashMap<String, String> oUpdateItemCnt:oUpdateItemCntList) {
				for(FuncCheckListener listener : listeners) {
					listener.FuncCheck_updateItemStockQty(Integer.valueOf(oUpdateItemCnt.get("itemId")));
				}
			}
		}
		
		calcCheck();
		
		if(iVoidCodeId != 0 && sVoidReasonName != null) {
			if(!this.updateCheck(false, true, PosCheckItem.SEND_MODE_OLD_ITEM, 0, false, 0, 0, 0, "", false, false, false, false, 0, 0, false, false).equals(PosCheck.API_RESULT_SUCCESS))
				return false;
			
			if(!oSlipItemIds.isEmpty()) {
				try {
					JSONObject oHeaderJSONObject = new JSONObject(), oInfoJSONObject = new JSONObject(), oTempJSONObject = null;
					JSONArray oTempJSONArray = null;
					
					// form header
					oHeaderJSONObject.put("header", "delete_item");
					oTempJSONArray = new JSONArray();
					oTempJSONObject = new JSONObject();
					oTempJSONObject.put("message", iVoidCodeId);
					oTempJSONArray.put(oTempJSONObject);
					oHeaderJSONObject.put("messages", oTempJSONArray);
					
					// form info
					oInfoJSONObject.put("stationId", AppGlobal.g_oFuncStation.get().getStationId());
					oInfoJSONObject.put("userId", AppGlobal.g_oFuncUser.get().getUserId());
					oInfoJSONObject.put("userName", AppGlobal.g_oFuncUser.get().getUserName(1));
					oInfoJSONObject.put("table", m_sTableNo + m_sTableExtension);
					oTempJSONArray = new JSONArray();
					for(String iCitmId:oSlipItemIds) {
						oTempJSONObject = new JSONObject();
						oTempJSONObject.put(iCitmId, oSlipItemQtys.get(iCitmId));
						oTempJSONArray.put(oTempJSONObject);
					}
					oInfoJSONObject.put("removeQty", oTempJSONArray);
					
					// *****************************************************************
					// Create thread to print special slip
					AppThreadManager oAppThreadManager = new AppThreadManager();
					
					// Add the method to the thread manager
					// Thread 1 : Print special slip
					// Create parameter array
					Object[] oParameters = new Object[6];
					oParameters[0] = getCheckId();
					oParameters[1] = PosActionPrintQueue.KEY_DELETE_ITEM;
					oParameters[2] = oHeaderJSONObject;
					oParameters[3] = oInfoJSONObject;
					oParameters[4] = oPrtItemIds;
					oParameters[5] = AppGlobal.g_oCurrentLangIndex.get();
					oAppThreadManager.addThread(1, oFuncCheckItem.getCheckItem(), "printSpecialSlip", oParameters);
					
					// Run the thread without wait
					oAppThreadManager.runThread();
				}catch(JSONException jsone) {
					AppGlobal.stack2Log(jsone);
				}
			}
		}
		
		// remove the item form list
		for(HashMap<String, Integer> oSelectedItem:oSelectedItems) {
			iSectionId = oSelectedItem.get("sectionId");
			iItemIndex = oSelectedItem.get("itemIndex");
			m_oCurrentFuncCheckParty.getItemList(iSectionId).remove(iItemIndex);
		}
		
		// re-sequence the item
		updateCheckItemSequence(true, true, 0);
		
		return true;
	}
	
	public boolean deleModifier(BigDecimal dQty, int iSeatNo, int iLineNo, int iModifierIndex, int iVoidCodeId){
		FuncCheckItem oFuncCheckItem = null;
		
		m_sErrorMessage = "";
		
		oFuncCheckItem = (FuncCheckItem) m_oCurrentFuncCheckParty.getCheckItem(iSeatNo, iLineNo);
		oFuncCheckItem.voidModifier(iModifierIndex, dQty, iVoidCodeId);
		
		calcCheck();
		
		return true;
	}
	
	// Delete item from the check
	public boolean deleNewChildItemFromItem(int iSeatNo, int iLineNo, int iChildItemIndex){
		FuncCheckItem oFuncCheckItem = null, oChildCheckItem = null;
		
		m_sErrorMessage = "";
		
		oFuncCheckItem = (FuncCheckItem) m_oCurrentFuncCheckParty.getCheckItem(iSeatNo, iLineNo);
		oChildCheckItem = oFuncCheckItem.getChildItemList().get(iChildItemIndex);
		this.updateItemCount(oChildCheckItem.getMenuItemId(), oChildCheckItem.getCheckItem().getQty(), false, false, false);
		for (FuncCheckListener listener : listeners) {
			listener.FuncCheck_updateItemStockQty(oChildCheckItem.getMenuItemId());
		}
		oFuncCheckItem.deleteChildItemFromList(iChildItemIndex);
		
		calcCheck();
		
		return true;
	}
	
	// Delete payment from the check
	public boolean deleAllOldPaymentFromCheck(int iVdrsId) {
		DateTime dtVoidDateTime = AppGlobal.getCurrentTime(false);
		DateTimeFormatter voidFormatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		
		if(m_oCheckPaymentList.isEmpty())
			return false;
		
		for(PosCheckPayment oCheckPayment: m_oCheckPaymentList) {
			if(oCheckPayment.getCpayId().equals(""))
				continue;
			
			if(oCheckPayment.isDelete())
				continue;
			
			oCheckPayment.setVoidUserId(AppGlobal.g_oFuncUser.get().getUserId());
			oCheckPayment.setVoidStatId(AppGlobal.g_oFuncStation.get().getStationId());
			oCheckPayment.setVoidVdrsId(iVdrsId);
			oCheckPayment.setVoidLocTime(dtVoidDateTime);
			oCheckPayment.setVoidTime(voidFormatter.print(AppGlobal.convertTimeToUTC(dtVoidDateTime)));
			oCheckPayment.setStatus(PosCheckPayment.STATUS_DELETED);
			
			// Remove related extra infos
			for(PosCheckExtraInfo oPosCheckExtraInfo:oCheckPayment.getCheckExtraInfoArrayList()){
				if(oPosCheckExtraInfo.getBy().equals(PosCheckExtraInfo.BY_PAYMENT))
					oPosCheckExtraInfo.setStatus(PosCheckExtraInfo.STATUS_DELETED);
			}
		}
		
		//reset payment and tips amount
		m_oCheck.setPaymentTotal(BigDecimal.ZERO);
		m_oCheck.setTipsTotal(BigDecimal.ZERO);
		
		return true;
	}
	
	// Add/Waive service charge
	public boolean addWaiveScTax(boolean bAddScTax, List<HashMap<String, Integer>> oSelectedItems, boolean[] bChosenSc, String[] sChosenTax) {
		FuncCheckItem oFuncCheckItem = null;
		
		List<HashMap<String, Integer>> oResultSelectedItems = this.getAvailableItemIndexList(oSelectedItems);
		
		// Handle inclusive SC/Tax no breakdown add/waive SC/Tax pre-process
		boolean bNeedCheckReCalculation = false;
		for(HashMap<String, Integer> oSelectedItem:oResultSelectedItems) {
			oFuncCheckItem = (FuncCheckItem) this.getCheckItem(oSelectedItem.get("partySeq"), oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
			if(oFuncCheckItem.addWaiveScTaxPreProcessForInclusiveTaxSCNoBreakdown(bAddScTax, bChosenSc, sChosenTax)){
				bNeedCheckReCalculation = true;
			}
		}
		if(bNeedCheckReCalculation){
			// Have inclusive tax no breakdown, need recalculate check
			calcCheck();
		}
		
		for(HashMap<String, Integer> oSelectedItem:oResultSelectedItems) {
			oFuncCheckItem = (FuncCheckItem) this.getCheckItem(oSelectedItem.get("partySeq"), oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
			oFuncCheckItem.addWaiveScTax(bAddScTax, bChosenSc, sChosenTax, m_sTableNo+m_sTableExtension);
			oFuncCheckItem.setWaiveServiceChargeFlagNotByOverride(true);
		}
		calcCheck();
		
		//update check if it is old check and old item
		if(isOldCheck()) {
			int iGetUpdateRecord = 0;
			for(HashMap<String, Integer> oSelectedItem:oResultSelectedItems) {
				oFuncCheckItem = (FuncCheckItem) this.getCheckItem(oSelectedItem.get("partySeq"), oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
				if(oFuncCheckItem.isOldItem()) {
					oFuncCheckItem.getCheckItem().setModified(true);
					// Set disallow for continuous print for old check and old item (add and waive sc and tax)
					// Get the continuous printing flag
					this.setAllowContinuousPrint(FuncCheck.ALLOW_CONTINUOUS_PRINT);
					iGetUpdateRecord = 1;
				}
			}
			
			if(!updateCheck(false, true, PosCheckItem.SEND_MODE_OLD_ITEM, 0, false, iGetUpdateRecord, 0, 0, "", false, true, false, false, 0, 0, false, false).equals(PosCheck.API_RESULT_SUCCESS)) {
				return false;
			}
			
			// Update ckei_id in pos_check_extra_infos for "add_waive_sc_tax" record
			if (getResultJSONArrayOfRequest() != null) {
				PosCheckItemList oUpdatedItemList = new PosCheckItemList(getResultJSONArrayOfRequest());
				for(PosCheckItem oUpdatedItem:oUpdatedItemList.getCheckItemList()) {
					for(HashMap<String, Integer> oSelectedItem:oResultSelectedItems) {
						oFuncCheckItem = (FuncCheckItem) this.getCheckItem(oSelectedItem.get("partySeq"), oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
						if(oFuncCheckItem.getCheckItem().getCitmId().equals(oUpdatedItem.getCitmId())) {
							oFuncCheckItem.updateCheckItem(oUpdatedItem);
						}
					}
				}
			}
		}
		
		return true;
	}
	
	// Set/clear item takeout
	public boolean takeout(List<HashMap<String, Integer>> oTakeoutItemIds, List<HashMap<String, Integer>> oClearTakeoutItemIds) {
		for(HashMap<String, Integer> oSelectedItemIndex:oTakeoutItemIds) {
			FuncCheckItem oParentFuncCheckItem = getCheckItem(oSelectedItemIndex.get("partySeq"), oSelectedItemIndex.get("sectionId"), oSelectedItemIndex.get("itemIndex"));
			oParentFuncCheckItem.takeout(true);
			
			// Add log to action log list
			oParentFuncCheckItem.addActionLog(AppGlobal.FUNC_LIST.takeout.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), "", "", "", "", "Takeout");
		}
		for(HashMap<String, Integer> oSelectedItemIndex:oClearTakeoutItemIds) {
			FuncCheckItem oParentFuncCheckItem = getCheckItem(oSelectedItemIndex.get("partySeq"), oSelectedItemIndex.get("sectionId"), oSelectedItemIndex.get("itemIndex"));
			oParentFuncCheckItem.takeout(false);
			
			// Add log to action log list
			oParentFuncCheckItem.addActionLog(AppGlobal.FUNC_LIST.takeout.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), "", "", "", "", "Clear takeout");
		}
		
		// call check override condition for takeout items
		DateTimeFormatter oTimeFormatter = DateTimeFormat.forPattern("HH:mm:ss");
		DateTime oCurrentTime = AppGlobal.getCurrentTime(false);
		this.checkOverrideConditions(oTimeFormatter.print(oCurrentTime), oTimeFormatter.print(oCurrentTime), Integer.parseInt(this.getTableNo()), this.getTableExtension(), true);
		
		calcCheck();
		
		return true;
	}
	
	// Initialize the outlet setup in current business date
	public void initBusinessDaySetup(FuncOutlet oFuncOutlet){
		PosBusinessDay oPosBusinessDay;
		
		m_oScType = new HashMap<Integer, PosTaxScType>();
		m_oTaxType = new HashMap<Integer, PosTaxScType>();
		
		oPosBusinessDay = oFuncOutlet.getBusinessDay();
		for(int i=1; i<=5; i++){
			PosTaxScType oPosTaxScType = new PosTaxScType();
			oPosTaxScType.setRate(oPosBusinessDay.getSc(i));
			oPosTaxScType.setRateForInclusiveNoBreakdown(oPosBusinessDay.getSc(i));
			oPosTaxScType.setIncludeTaxScMask(oPosBusinessDay.getTaxScIncludeTaxScMask(i));
			if(!oPosBusinessDay.getTaxScIncludePreDisc().isEmpty()){
				if(oPosBusinessDay.getTaxScIncludePreDisc().substring(i-1, i).equals("1"))
					oPosTaxScType.setIncludePreDisc(PosTaxScType.INCLUDE_PRE_DISC_YES);
			}
			m_oScType.put(i-1, oPosTaxScType);
		}

		for(int i=1; i<=25; i++){
			PosTaxScType oPosTaxScType = new PosTaxScType();
			oPosTaxScType.setRate(oPosBusinessDay.getTax(i));
			oPosTaxScType.setRateForInclusiveNoBreakdown(oPosBusinessDay.getTax(i));
			oPosTaxScType.setIncludeTaxScMask(oPosBusinessDay.getTaxScIncludeTaxScMask(5+i));
			if(!oPosBusinessDay.getTaxScIncludePreDisc().isEmpty()){
				if(oPosBusinessDay.getTaxScIncludePreDisc().substring(5+i-1, 5+i).equals("1"))
					oPosTaxScType.setIncludePreDisc(PosTaxScType.INCLUDE_PRE_DISC_YES);
			}
			if(!oPosBusinessDay.getTaxIncludeMidDisc().isEmpty()){
				if(oPosBusinessDay.getTaxIncludeMidDisc().substring(i-1, i).equals("1"))
					oPosTaxScType.setIncludeMidDisc(PosTaxScType.INCLUDE_MID_DISC_YES);
			}
			m_oTaxType.put(i-1, oPosTaxScType);
		}
	}
	
/** CancelCheck & VoidCheck [voidCheck] ~ add 1 new param (bReleaseBefore)*/
	public boolean voidCheck(int iVoidCodeId, int iUserId, int iStationId, boolean bMergeTable, String sMergeTableTargetCheckId, int iChosenCheckPftmId, boolean bReleaseBefore) {
		DateTime dtVoidDateTime = AppGlobal.getCurrentTime(false);
		DateTimeFormatter voidFormatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		ArrayList<String> oItemIdList = new ArrayList<String>();
		String sActionLogKey = "", sActionLogRemark = "";

		// For void check, restore the printed status to false for continuous print
		if (AppGlobal.g_oFuncStation.get().getSupportContinuousPrinting()) {
			for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
				for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
					for (FuncCheckItem oFuncCheckItem:oItemList){
						oFuncCheckItem.setIsAddUpdatePrinted(false);
					}
				}
			}
		}
		
		//print check before void 
		if(!bMergeTable && AppGlobal.g_oFuncStation.get().getCheckPrtqId() != 0 && printCheck(false, false, AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncStation.get().getStationId(), AppGlobal.g_oFuncStation.get().getCheckPrtqId(), iChosenCheckPftmId, false, AppGlobal.g_oFuncOutlet.get().getOutletNameByIndex(AppGlobal.g_oCurrentLangIndex.get()), true, iVoidCodeId, "", true, false, false) == false) {
			m_oOutletTable.setStationId(0);
			m_oOutletTable.addUpdate(true);
			return false;
		}
		
		if(bMergeTable) {
			sActionLogKey = AppGlobal.FUNC_LIST.merge_table.name();
			sActionLogRemark = "Void check for merge table";
		}else
			sActionLogKey = AppGlobal.FUNC_LIST.void_check.name();
		m_sErrorMessage = "";
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			
			PosCheckParty oPosCheckParty = oFuncCheckParty.getCheckParty();
			oPosCheckParty.setVoidTime(voidFormatter.print(AppGlobal.convertTimeToUTC(dtVoidDateTime)));
			oPosCheckParty.setVoidLocalTime(dtVoidDateTime);
			oPosCheckParty.setVoidStationId(iStationId);
			oPosCheckParty.setVoidReasonId(iVoidCodeId);
			oPosCheckParty.setVoidUserId(iUserId);
			oPosCheckParty.setStatus(PosCheckParty.STATUS_DELETED);
			
			for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem:oItemList){
					PosCheckItem oCheckItem = oFuncCheckItem.getCheckItem();
					
					// Remove new item
					if (oFuncCheckItem.isOldItem()) { // Update old item void info
						oCheckItem.setVoidTime(voidFormatter.print(AppGlobal.convertTimeToUTC(dtVoidDateTime)));
						oCheckItem.setVoidLocalTime(dtVoidDateTime);
						oCheckItem.setVoidStationId(iStationId);
						oCheckItem.setVoidReasonId(iVoidCodeId);
						oCheckItem.setVoidUserId(iUserId);
						oCheckItem.setStatus(PosCheckItem.STATUS_DELETED);
						oCheckItem.setModified(true);
						
						//update extra info status
						if(oFuncCheckItem.hasExtraInfo()) {
							for(PosCheckExtraInfo oExtraInfo:oFuncCheckItem.getExtraInfoList())
								oExtraInfo.setStatus(PosCheckExtraInfo.STATUS_DELETED);
						}
						
						// update tax sc ref status
						if (oFuncCheckItem.hasTaxScRef()) {
							for (PosCheckTaxScRef oTaxScRef: oFuncCheckItem.getTaxScRefList()) {
								oTaxScRef.setStatus(PosCheckTaxScRef.STATUS_DELETED);
							}
						}
						
						// Add to list for printing void action slip
						if(!oCheckItem.isPendingItem())
							oItemIdList.add(oCheckItem.getCitmId());
						
						// Add "void_check_delete_item" log to action log list
						AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.delete_item.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), oFuncCheckItem.getCheckItem().getCptyId(), oFuncCheckItem.getCheckItem().getCitmId(), "", "", "Void check");
					}
					
					// Void Item Discount
					if (oFuncCheckItem.hasItemDiscount(false)) {
						oFuncCheckItem.voidItemDiscount(iVoidCodeId, iUserId, iStationId);
					}
					
					// Void Item Modifier
					if (!oFuncCheckItem.getModifierList().isEmpty())
						oFuncCheckItem.voidAllModifier(iVoidCodeId, iUserId, iStationId, true);
				}
			}
		}

		// Void Check Discount if any
		for(FuncCheckParty oFuncCheckParty: m_oFuncCheckPartyList) {
			if(oFuncCheckParty.hasPartyCheckDiscount()) {
				for(PosCheckDiscount oPosCheckDiscount: oFuncCheckParty.getPartyCheckDiscount()) 
					oFuncCheckParty.voidOldCheckDiscount(oPosCheckDiscount.getSeq(), iVoidCodeId);
			}
		}
		
		// Void loyalty check extra info (only deleted records which ckei_by="check")
		ArrayList<PosCheckExtraInfo> oCheckExtraInfoList = new ArrayList<PosCheckExtraInfo>();
		for (PosCheckExtraInfo oCheckExtraInfo: m_oCheckExtraInfoList) {
			if (oCheckExtraInfo.getBy().equals(PosCheckExtraInfo.BY_CHECK)) {
				oCheckExtraInfo.setStatus(PosCheckExtraInfo.STATUS_DELETED);
				oCheckExtraInfoList.add(oCheckExtraInfo);
			}
		}
		
		ArrayList<PosCheckTaxScRef> oCheckTaxScRefList = new ArrayList<PosCheckTaxScRef>();
		for (PosCheckTaxScRef oCheckTaxScRef: m_oCheckTaxScRefList) {
			oCheckTaxScRef.setStatus(PosCheckTaxScRef.STATUS_DELETED);
			oCheckTaxScRefList.add(oCheckTaxScRef);
		}
		
		// Re-active the attached advance order
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_ADVANCE_ORDER_CHKS_ID, 0)) {
			String sTargetAdvanceOrderId = getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_ADVANCE_ORDER_CHKS_ID);
			if(!sTargetAdvanceOrderId.isEmpty()) {
				PosCheckExtraInfo oCheckExtraInfo = new PosCheckExtraInfo();
				oCheckExtraInfo.setCheckId(sTargetAdvanceOrderId);
				oCheckExtraInfo.setBy(PosCheckExtraInfo.BY_CHECK);
				oCheckExtraInfo.setSection(PosCheckExtraInfo.SECTION_ADVANCE_ORDER);
				oCheckExtraInfo.setVariable(PosCheckExtraInfo.VARIABLE_RETRIEVED);
				oCheckExtraInfo.setIndex(0);
				oCheckExtraInfo.setValue("false");
				oCheckExtraInfo.updateCheckExtraInfoByOtherIdSectionVariable();
			}
		}
		
		// Void Check Gratuity if any
		if(this.getCheckGratuityList().size() > 0) {
			for(PosCheckGratuity oPosCheckGratuity: getCheckGratuityList()) 
				oPosCheckGratuity.setStatus(PosCheckGratuity.STATUS_DELETED);
		}
		
		if (!oCheckExtraInfoList.isEmpty()) {
			this.clearCheckExtraInfoList();
			m_oCheckExtraInfoList = oCheckExtraInfoList;
		}
		
		if (!oCheckTaxScRefList.isEmpty()) {
			this.clearCheckTaxScRefList();
			m_oCheckTaxScRefList = oCheckTaxScRefList;
		}
		
		if(AppGlobal.g_oFuncStation.get().isVoidGuestCheckImage())
			this.addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, "", PosCheckExtraInfo.VARIABLE_GUEST_CHECK_CONTENT, 0, m_sLastPrintViewContent);
		
		m_oCheck.setVoidLocTime(dtVoidDateTime);
		m_oCheck.setVoidTime(voidFormatter.print(AppGlobal.convertTimeToUTC(dtVoidDateTime)));
		m_oCheck.setVoidUserId(iUserId);
		m_oCheck.setVoidStationId(iStationId);
		m_oCheck.setVoidVdrsId(iVoidCodeId);
		m_oCheck.setStatus(PosCheck.STATUS_DELETED);
		m_oCheckTable.setStatus(PosCheckTable.STATUS_DELETED);
		
		int iSaveCheckType = 0;
		if(bMergeTable)
			iSaveCheckType = 2;
		
		if(!updateCheck(true, true, PosCheckItem.SEND_MODE_OLD_ITEM, iSaveCheckType, false, 0, 0, 0, sMergeTableTargetCheckId, false, false, false, false, 0, 0, false, false).equals(PosCheck.API_RESULT_SUCCESS)) {
			m_oOutletTable.setStationId(0);
			m_oOutletTable.addUpdate(true);
			return false;
		}
		
		//Void tms check
		FuncTMS oFuncTMS = AppGlobal.getTmsInfoFromTmsInterfaceInfoList(AppGlobal.g_oFuncOutlet.get().getOutletId(), this.getCheckId());
		if(oFuncTMS != null)
			AppGlobal.removeTmsInfoFromTmsInterfaceInfoList(AppGlobal.g_oFuncOutlet.get().getOutletId(), this.getCheckId());
		
		//Update item count and coupon item status
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem:oItemList){
					PosCheckItem oCheckItem = oFuncCheckItem.getCheckItem();
					
					//update item count
					this.updateItemCount(oCheckItem.getItemId(), oCheckItem.getQty(), false, false, false);
					
					//update coupon item status
					if(oFuncCheckItem.isCouponItem()) {
						FuncCoupon oCouponItem = new FuncCoupon();
						oCouponItem.setStartCoupon(oFuncCheckItem.getExtraInfoBySectionAndVariable("online_coupon", "sell_start_coupon"));
						oCouponItem.setEndCoupon(oFuncCheckItem.getExtraInfoBySectionAndVariable("online_coupon", "sell_end_coupon"));
						oCouponItem.setCouponCurrentStatus(FuncCoupon.COUPON_STATUS_LOCKED);
						oCouponItem.setCouponNextStatus(FuncCoupon.COUPON_STATUS_NEW);
						oCouponItem.setSellPrice(BigDecimal.ZERO);
						
						oCouponItem.updateCoupon(FuncCoupon.UPDATE_COUPON_TYPE_ORDER_ITEM);
					}
					
					// Void SVC Redeem Item Coupon
					if (oFuncCheckItem.isSVCCouponRedeemItem()) {
						voidSVCRedeemItemCoupon(oFuncCheckItem);
					}
				}
			}
		}
		
		m_oOutletTable.setCheckId("");
		m_oOutletTable.setStationId(0);
		
		// check if current function support to mark cleaning status
		if(bMergeTable && isSupportCleaningStatusFunction(AppGlobal.FUNC_LIST.merge_table.name())) {
			m_oOutletTable.setStatus(PosOutletTable.STATUS_CLEANING_TABLE);
			AppGlobal.updateCleaningTableList(m_oOutletTable, AppGlobal.getCurrentTime(false));
		}else
			m_oOutletTable.setStatus(PosOutletTable.STATUS_VACANT);
		
		// *****************************************************************
		// Create thread to handle void slip
		AppThreadManager oAppThreadManager = new AppThreadManager();
		
		// Add the method to the thread manager
		// Thread 1 :
		// Create parameter array
		Object[] oParameters1 = new Object[1];
		oParameters1[0] = true;
		oAppThreadManager.addThread(1, m_oOutletTable, "addUpdate", oParameters1);

		// Add the method to the thread manager
		// Thread 2 :
		// Create parameter array
		if (!bMergeTable) {
			Object[] oParameters2 = new Object[6];
			oParameters2[0] = m_oCheck.getCheckId();
			oParameters2[1] = iVoidCodeId;
			oParameters2[2] = iUserId;
			oParameters2[3] = iStationId;
			oParameters2[4] = m_sTableNo+m_sTableExtension;
			oParameters2[5] = oItemIdList;
			oAppThreadManager.addThread(2, this, "processPrintVoidActionSlip", oParameters2);
		}
		
		// Run all of the threads
		oAppThreadManager.runThread();
		oAppThreadManager.waitForThread();

		// Add "void_check" log to action log list
		AppGlobal.g_oActionLog.get().addActionLog(sActionLogKey, PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), "", "", "", "", sActionLogRemark);
		
		// Send action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
/** CancelCheck & VoidCheck [voidCheck] */
/** The VoidCheck eConnect event in "voidPaidCheck()" was merged here, both CancelCheck & VoidCheck work normally after adding a new param */ 
		// surveillance eConnect check termination event: CancelCheck & VoidCheck
		HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
		String sEventType = (bReleaseBefore) ? FuncSurveillance.SURVEILLANCE_TYPE_VOID_CHECK : FuncSurveillance.SURVEILLANCE_TYPE_CANCEL_CHECK;
		oSurveillanceEventInfo.put("checkNum", this.getCheckPrefixNo());
		this.doSurveillanceEvent(sEventType, oSurveillanceEventInfo);
		/*
		List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);
		if (!oInterfaceConfigList.isEmpty()) {
			for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
				if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
					FuncSurveillance oFuncSurveillance = new FuncSurveillance(oPosInterfaceConfig);
					String sEventType = (bReleaseBefore) ? FuncSurveillance.SURVEILLANCE_TYPE_VOID_CHECK : FuncSurveillance.SURVEILLANCE_TYPE_CANCEL_CHECK;
					HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
					oSurveillanceEventInfo.put("eventType", sEventType);
					oSurveillanceEventInfo.put("checkNum", this.getCheckPrefixNo());
					oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo);
				}
			}
		}
		*/
		return true;
	}
	
	// Thread process for void action slip printing
	private void processPrintVoidActionSlip(String sCheckId, int iVoidCodeId, int iUserId, int iStationId, String sTableNo, ArrayList<String> oItemIdList){
		PosCheck oCheck = new PosCheck();
		oCheck.setChksId(sCheckId);
		
		//print special split
		JSONObject oHeaderJSONObject = new JSONObject(), oInfoJSONObject = new JSONObject(), oTempJSONObject = null;
		JSONArray oTempArray = new JSONArray(), oCitmIdArray = new JSONArray();
		JSONArray oPosCheckItemForMenuJSONArray = new JSONArray();
		HashMap<Integer, FuncMenuItem> oMenuItems = new HashMap<Integer, FuncMenuItem>();
		try {
			//form header
			oHeaderJSONObject.put("header", "Void Check");
			oTempJSONObject = new JSONObject();
			oTempJSONObject.put("message", iVoidCodeId);
			oTempArray.put(oTempJSONObject);
			oHeaderJSONObject.put("messages", oTempArray);
			
			//form info
			oInfoJSONObject.put("stationId", iStationId);
			oInfoJSONObject.put("userId", iUserId);
			oInfoJSONObject.put("table", sTableNo);
			for(String iItemId:oItemIdList) {
				oTempJSONObject = new JSONObject();
				oTempJSONObject.put("id", iItemId);
				oCitmIdArray.put(oTempJSONObject);
			}
			oInfoJSONObject.put("citmIds", oCitmIdArray);

			for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
				for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
					for (FuncCheckItem oFuncCheckItem:oItemList){
						PosCheckItem oCheckItem = oFuncCheckItem.getCheckItem();
						if (oFuncCheckItem.isOldItem()) {
							// Add to list for printing void action slip
							if(!oCheckItem.isPendingItem())
								if (!oMenuItems.containsKey(oCheckItem.getItemId()))
									oMenuItems.put(oCheckItem.getItemId(), AppGlobal.g_oFuncMenu.get().getFuncMenuItemByItemId(oCheckItem.getItemId()));
						}
					}
				}
			}
			oInfoJSONObject.put("menuItems", oPosCheckItemForMenuJSONArray);
			oCheck.printSpecialSlip(PosActionPrintQueue.KEY_VOID_CHECK, oHeaderJSONObject, oInfoJSONObject, AppGlobal.g_oCurrentLangIndex.get(), 0);
		}catch(JSONException jsone) {
			AppGlobal.stack2Log(jsone);
		}
		
	}
	
	// Void stock delivery invoice
	public void voidStockDeliveryInvoice(){
		DateTime dtVoidDateTime = AppGlobal.getCurrentTime(false);
		DateTimeFormatter voidFormatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		
		m_oCheck.setVoidLocTime(dtVoidDateTime);
		m_oCheck.setVoidTime(voidFormatter.print(AppGlobal.convertTimeToUTC(dtVoidDateTime)));
		m_oCheck.setVoidUserId(AppGlobal.g_oFuncUser.get().getUserId());
		m_oCheck.setVoidStationId(AppGlobal.g_oFuncStation.get().getStationId());
		m_oCheck.setStatus(PosCheck.STATUS_DELETED);
		
		m_oOutletTable.setCheckId("");
		m_oOutletTable.setStationId(0);
		m_oOutletTable.setStatus(PosOutletTable.STATUS_VACANT);
		
		if (updateCheck(false, false, PosCheckItem.SEND_MODE_NEW_ITEM, 0, true, 0, 0, 0, "", false, false, false, false, 0, 0, false, false).equals(PosCheck.API_RESULT_SUCCESS)) {
			// Add log to action log list
			AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.stock_delivery_invoice_setup.name(), PosActionLog.ACTION_RESULT_SUCCESS, "", AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId() , AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), "", "", "", "", "Delete Stock Delivery Order");
			//handle action log
			AppGlobal.g_oActionLog.get().handleActionLog(false);
		}
	}
	
	// Update multiple coupon
	public void updateMultipleCoupon(int iType, List<FuncCoupon> oCouponList) {
		if(oCouponList.isEmpty())
			return;
		
		for(FuncCoupon oCoupon:oCouponList) {
			if((oCoupon.updateCoupon(iType)) == false) {
				FormDialogBox oFormDialogBox = new FormDialogBox(AppGlobal.g_oLang.get()._("ok"), null);
				oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._("error"));
				oFormDialogBox.setMessage(oCoupon.getLastErrorMessage());
				oFormDialogBox.show();
				oFormDialogBox = null;
			}
		}
	}
	
	public void calcCheck(){
		PosCheckParty oCheckParty;
		
		// Clear all figures
		m_oCheck.resetSalesData();
		for (int i = 1; i <= 5; i++) {
			String sCheckScInclTaxKey = String.format("incl_sc_ref%d", i);
			if (this.isTaxScRefExistBySectionVariable(sCheckScInclTaxKey))
				this.updateCheckTaxScRefValue(PosCheckTaxScRef.BY_CHECK, sCheckScInclTaxKey, "0");
			
			String sDiscOnScKey = String.format("round_post_disc_on_sc_ref%d", i);
			if (this.isTaxScRefExistBySectionVariable(sCheckScInclTaxKey))
				this.updateCheckTaxScRefValue(PosCheckTaxScRef.BY_CHECK, sDiscOnScKey, "0");
		}
		for (int i = 1; i <= 25; i++) {
			String sCheckTaxInclScKey = String.format("incl_tax_ref%d", i);
			if (this.isTaxScRefExistBySectionVariable(sCheckTaxInclScKey))
				this.updateCheckTaxScRefValue(PosCheckTaxScRef.BY_CHECK, sCheckTaxInclScKey, "0");
			
			String sCheckScInclTaxKey = String.format("sc_incl_tax%d", i);
			if (this.isTaxScRefExistBySectionVariable(sCheckScInclTaxKey))
				this.updateCheckTaxScRefValue(PosCheckTaxScRef.BY_CHECK, sCheckScInclTaxKey, "0");
			
			String sDiscOnScKey = String.format("round_post_disc_on_tax_ref%d", i);
			if (this.isTaxScRefExistBySectionVariable(sDiscOnScKey))
				this.updateCheckTaxScRefValue(PosCheckTaxScRef.BY_CHECK, sDiscOnScKey, "0");
		}
		
		// Initialize the special handle round amount for inclusive SC/Tax with breakdown
		m_dSpecialHandleRoundAmountForInclusiveSCTax = BigDecimal.ZERO;
		
		// Major function for check party total calculation
		calcCheckParty();
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList){
			oCheckParty = oFuncCheckParty.getCheckParty();
			
			// Add value to check
			m_oCheck.setItemTotal(m_oCheck.getItemTotal().add(oCheckParty.getItemTotal()));
			m_oCheck.setPreDisc(m_oCheck.getPreDisc().add(oCheckParty.getPreDisc()));
			m_oCheck.setMidDisc(m_oCheck.getMidDisc().add(oCheckParty.getMidDisc()));
			m_oCheck.setPostDisc(m_oCheck.getPostDisc().add(oCheckParty.getPostDisc()));
			for(int i=1; i<=5; i++){
				m_oCheck.setSc(i, m_oCheck.getSc(i).add(oCheckParty.getSc(i)));
				
				if(oFuncCheckParty.getInclScRef(i).compareTo(BigDecimal.ZERO) != 0) {
					String sCheckScInclTaxKey = String.format("incl_sc_ref%d", i);
					addUpdateTaxScRef(PosCheckTaxScRef.BY_CHECK, sCheckScInclTaxKey, AppGlobal.g_oFuncOutlet.get().roundSCAmountToString(oFuncCheckParty.getInclScRef(i)));
				}
				
				if(oFuncCheckParty.getDiscOnScTax(PosDiscountType.TYPE_POST_DISCOUNT, false, i).compareTo(BigDecimal.ZERO) != 0) {
					String sDiscOnScKey = String.format("round_post_disc_on_sc_ref%d", i);
					addUpdateTaxScRef(PosCheckTaxScRef.BY_CHECK, sDiscOnScKey, AppGlobal.g_oFuncOutlet.get().roundSCAmountToString(oFuncCheckParty.getDiscOnScTax(PosDiscountType.TYPE_POST_DISCOUNT, false, i)));
				}
			}
			for(int i=1; i<=25; i++){
				m_oCheck.setTax(i, m_oCheck.getTax(i).add(oCheckParty.getTax(i)));
				
				if (oFuncCheckParty.getInclTaxRef(i).compareTo(BigDecimal.ZERO) != 0) {
					String sCheckTaxInclScKey = String.format("incl_tax_ref%d", i);
					addUpdateTaxScRef(PosCheckTaxScRef.BY_CHECK, sCheckTaxInclScKey, AppGlobal.g_oFuncOutlet.get().roundTaxAmountToString(oFuncCheckParty.getInclTaxRef(i)));
				}
				
				if(oFuncCheckParty.getDiscOnScTax(PosDiscountType.TYPE_POST_DISCOUNT, true, i).compareTo(BigDecimal.ZERO) != 0) {
					String sDiscOnTaxKey = String.format("round_post_disc_on_tax_ref%d", i);
					addUpdateTaxScRef(PosCheckTaxScRef.BY_CHECK, sDiscOnTaxKey, AppGlobal.g_oFuncOutlet.get().roundTaxAmountToString(oFuncCheckParty.getDiscOnScTax(PosDiscountType.TYPE_POST_DISCOUNT, true, i)));
				}
			}
			for(int i=1; i<=4; i++){
				m_oCheck.setInclusiveTaxRef(i, m_oCheck.getInclusiveTaxRef(i).add(oCheckParty.getInclusiveTaxRef(i)));
			}
			
			// Calculate check tax sc ref
			for(int i = 1; i <= oCheckParty.getCheckTaxScRefTotal().length; i++) {
				if (oCheckParty.getCheckTaxScRefTotalByIndex(i) == null)
					continue;
				
				String sCheckScInclTaxKey = String.format("sc_incl_tax%d", i);
				addUpdateTaxScRef(PosCheckTaxScRef.BY_CHECK, sCheckScInclTaxKey, AppGlobal.g_oFuncOutlet.get().roundTaxAmountToString(oCheckParty.getCheckTaxScRefTotalByIndex(i)));
			}
		}
		
		// Calculate the round amount of SC, tax
		for(int i=1; i<=5; i++){
			m_oCheck.setSc(i, AppGlobal.g_oFuncOutlet.get().roundSCAmountToBigDecimal(m_oCheck.getSc(i)));
		}
		for(int i=1; i<=25; i++){
			m_oCheck.setTax(i, AppGlobal.g_oFuncOutlet.get().roundTaxAmountToBigDecimal(m_oCheck.getTax(i)));
		}
		for(int i=1; i<=4; i++){
			m_oCheck.setInclusiveTaxRef(i, AppGlobal.g_oFuncOutlet.get().roundTaxAmountToBigDecimal(m_oCheck.getInclusiveTaxRef(i)));
		}
				
		BigDecimal dGratuityTotal = BigDecimal.ZERO;
		for (PosCheckGratuity oPosCheckGratuity: m_oCheck.getCheckGratuityList()){
			if (oPosCheckGratuity.getStatus().equals(PosCheckGratuity.STATUS_ACTIVE)){
				if (oPosCheckGratuity.getMethod().equals(PosCheckGratuity.METHOD_PERCENTAGE)){
					oPosCheckGratuity.setTotal(oPosCheckGratuity.getRate().multiply(m_oCheck.getItemTotal()));
					oPosCheckGratuity.setRoundTotal(AppGlobal.g_oFuncOutlet.get().roundGratuityAmountToBigDecimal(oPosCheckGratuity.getTotal()));
					oPosCheckGratuity.setRoundAmount(oPosCheckGratuity.getRoundTotal().subtract(oPosCheckGratuity.getTotal()));
				}
				dGratuityTotal = dGratuityTotal.add(oPosCheckGratuity.getRoundTotal());
			}
		}
		m_oCheck.setGratuityTotal(AppGlobal.g_oFuncOutlet.get().roundGratuityAmountToBigDecimal(dGratuityTotal));
		
		// Process the check
		BigDecimal dBeforeRoundCheckTotal = m_oCheck.getItemTotal();
		
		for(int i=1; i<=5; i++){
			dBeforeRoundCheckTotal = dBeforeRoundCheckTotal.add(m_oCheck.getSc(i));
		}
		for(int i=1; i<=25; i++){
			dBeforeRoundCheckTotal = dBeforeRoundCheckTotal.add(m_oCheck.getTax(i));
		}
		
		dBeforeRoundCheckTotal = dBeforeRoundCheckTotal.add(m_oCheck.getPreDisc());
		dBeforeRoundCheckTotal = dBeforeRoundCheckTotal.add(m_oCheck.getMidDisc());
		dBeforeRoundCheckTotal = dBeforeRoundCheckTotal.add(m_oCheck.getPostDisc());
		dBeforeRoundCheckTotal = dBeforeRoundCheckTotal.add(m_oCheck.getGratuityTotal());
		
		// Calculate check round amount
		m_oCheck.setCheckTotal(AppGlobal.g_oFuncOutlet.get().roundCheckAmountToBigDecimal(dBeforeRoundCheckTotal.add(m_dSpecialHandleRoundAmountForInclusiveSCTax)));
		m_oCheck.setRoundAmount(m_oCheck.getCheckTotal().subtract(dBeforeRoundCheckTotal));
		
		// Special calculation of inclusive VAT of Thailand in inclusive tax reference
		boolean bCalculateInclusiveTaxReferenceByCheckTotal = AppGlobal.g_oFuncStation.get().getCalcInclusiveTaxRefByCheckTotal();
		if(bCalculateInclusiveTaxReferenceByCheckTotal){
			BigDecimal[] dInclusiveTaxRef = new BigDecimal[4];
			for(int i=0; i<25; i++){
				int iInclusiveTaxIndex = i;
				if(i > 3)
					iInclusiveTaxIndex = 3;
				else
					dInclusiveTaxRef[i] = BigDecimal.ZERO;
				if(m_oCheck.getInclusiveTaxRef(iInclusiveTaxIndex+1).compareTo(BigDecimal.ZERO) > 0){
					BigDecimal dRate = m_oTaxType.get(i).getRate();
					dInclusiveTaxRef[iInclusiveTaxIndex] = dInclusiveTaxRef[iInclusiveTaxIndex].add(m_oCheck.getCheckTotal().subtract(m_oCheck.getCheckTotal().divide(dRate.add(new BigDecimal("1.0")), 10, RoundingMode.HALF_UP)));
				}
			}
			
			for(int i=0; i<4; i++){
				m_oCheck.setInclusiveTaxRef(i+1, AppGlobal.g_oFuncOutlet.get().roundTaxAmountToBigDecimal(dInclusiveTaxRef[i]));
			}
		}
		
/*	
System.out.println("CalcCheck ---------------------------------------- (Check total: " + m_oCheck.getCheckTotal() + ")");
System.out.println("CalcCheck ---------------------------------------- (SC 1 total: " + m_oCheck.getSc(1) + ")");
System.out.println("CalcCheck ---------------------------------------- (SC 2 total: " + m_oCheck.getSc(2) + ")");
System.out.println("CalcCheck ---------------------------------------- (Tax 1 total: " + m_oCheck.getTax(1) + ")");
System.out.println("CalcCheck ---------------------------------------- (Tax 2 total: " + m_oCheck.getTax(2) + ")");
System.out.println("CalcCheck ---------------------------------------- (Tax 3 total: " + m_oCheck.getTax(3) + ")");
*/
		
		for (FuncCheckListener listener : listeners) {
			listener.FuncCheck_updateBasketExtendBarCheckTotal();
			break;
		}
    	// Generate customer display interface files
    	this.updateCustomerDisplayDataUpdateTimestamp();
    	this.generateCustomerDisplayInterfaceFiles(1);
		
	}
	
	public void calcCheckParty(){
		PosCheckParty oCheckParty;
		PosCheckItem oCheckItem;
		ArrayList<PosCheckDiscount> oItemDiscountList = null;
		
		//Reset check party's and its check item's figure
		for(FuncCheckParty oFuncCheckParty:this.m_oFuncCheckPartyList){
			oCheckParty = oFuncCheckParty.getCheckParty();
			
			oCheckParty.setPartyTotal(BigDecimal.ZERO);
			oCheckParty.setItemTotal(BigDecimal.ZERO);
			for(int i=1; i<=5; i++) {
				oCheckParty.setSc(i, BigDecimal.ZERO);
				oFuncCheckParty.setInclScRef(i, BigDecimal.ZERO);
			}
			for (int i = 1; i <= 25; i++) {
				oCheckParty.setTax(i, BigDecimal.ZERO);
				oFuncCheckParty.setInclTaxRef(i, BigDecimal.ZERO);
			}
			for(int i=1; i<=4; i++)
				oCheckParty.setInclusiveTaxRef(i, BigDecimal.ZERO);
			for (int i = 1; i <= oCheckParty.getCheckTaxScRefTotal().length; i++)
				oCheckParty.setCheckTaxScRefTotal(i, null);
			oCheckParty.setPreDisc(BigDecimal.ZERO);
			oCheckParty.setMidDisc(BigDecimal.ZERO);
			oCheckParty.setPostDisc(BigDecimal.ZERO);
			oCheckParty.setRoundAmount(BigDecimal.ZERO);
			oFuncCheckParty.setDiscOnScTax(PosDiscountType.TYPE_POST_DISCOUNT, false, 0, BigDecimal.ZERO);
			oFuncCheckParty.setDiscOnScTax(PosDiscountType.TYPE_POST_DISCOUNT, true, 0, BigDecimal.ZERO);
			
			for (List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem:oItemList){
					oCheckItem = oFuncCheckItem.getCheckItem();
					
					oCheckItem.setTotal(BigDecimal.ZERO);
					oCheckItem.setCarryTotal(BigDecimal.ZERO);
					for(int i=1; i<=5; i++)
						oCheckItem.setSc(i, BigDecimal.ZERO);
					for(int i=1; i<=25; i++)
						oCheckItem.setTax(i, BigDecimal.ZERO);
					for(int i=1; i<=4; i++)
						oCheckItem.setInclusiveTaxRef(i, BigDecimal.ZERO);
					if(!oFuncCheckItem.isSplitRevenueParent()) {
						oCheckItem.setPreDisc(BigDecimal.ZERO);
						oCheckItem.setMidDisc(BigDecimal.ZERO);
						oCheckItem.setPostDisc(BigDecimal.ZERO);
					}
				}
			}
		}
		
		for(FuncCheckParty oFuncCheckParty: m_oFuncCheckPartyList){
			BigDecimal[] dDiscOnSc = new BigDecimal[AppGlobal.SC_COUNT];
			BigDecimal[] dDiscOnTax = new BigDecimal[AppGlobal.TAX_COUNT];
			for(int i=1; i<=AppGlobal.SC_COUNT; i++)
				dDiscOnSc[i-1] = BigDecimal.ZERO;
			for(int i=1; i<=AppGlobal.TAX_COUNT; i++)
				dDiscOnTax[i-1] = BigDecimal.ZERO;
			
			for (List<FuncCheckItem> oItemList: oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem: oItemList){
					oCheckItem = oFuncCheckItem.getCheckItem();
					
					if(oFuncCheckItem.isSetMenuItem() && oFuncCheckItem.isSumUpChildItemToParent()) {
						// Set menu child item: Item total = 0.0
						oCheckItem.setTotal(BigDecimal.ZERO);
					}else {
						// Calculate item price, item total, item carry total, item carry revenue, item revenue
						calcItemPrice(oFuncCheckItem, oFuncCheckItem);
					}
					
					// Calculate item round amount
					oCheckItem.setRoundTotal(AppGlobal.g_oFuncOutlet.get().roundItemAmountToBigDecimal(oCheckItem.getTotal()));
					oCheckItem.setRoundAmount(oCheckItem.getRoundTotal().subtract(oCheckItem.getTotal()));
					
					// Process party item's pre-discount
					oItemDiscountList = oFuncCheckItem.getItemDiscountList();
					for(PosCheckDiscount oCheckItemDiscount: oItemDiscountList) {
						if(oCheckItemDiscount.isDeleted())
							continue;
						
						if(oCheckItemDiscount.isPreDiscountType()) {
							// Re-calculate the item discount
							// Pre-discount
							List<FuncCheckItem> oFuncCheckItemList = new ArrayList<FuncCheckItem>();
							oFuncCheckItemList.add(oFuncCheckItem);
							calcPreDiscount("item", oCheckItemDiscount, oFuncCheckItemList, null);
						}
					}
				}
			}
		}
		
		// Process party check pre-discount
		for(FuncCheckParty oFuncCheckParty: m_oFuncCheckPartyList){
			if(oFuncCheckParty.getPartyCheckDiscount().isEmpty())		//no party check discount applied
				continue;
			
			List<PosCheckDiscount> oPartyCheckDiscounts = oFuncCheckParty.getPartyCheckDiscount();
			List<PosCheckDiscount> oPartyPreFixDiscounts = new ArrayList<PosCheckDiscount>();
			List<PosCheckDiscount> oPartyPrePercentageDiscounts = new ArrayList<PosCheckDiscount>();
			List<Integer> oHandledPartyDiscountIndex = new ArrayList<Integer>();
			
			for(PosCheckDiscount oPosCheckDiscount: oPartyCheckDiscounts) {
				if(oPosCheckDiscount.isDeleted())
					continue;
				if(!oPosCheckDiscount.isPreDiscountType())
					continue;
				
				if(oPosCheckDiscount.isFixAmountDiscountMethod())
					oPartyPreFixDiscounts.add(oPosCheckDiscount);
				if(oPosCheckDiscount.isPercentageDiscountMethod())
					oPartyPrePercentageDiscounts.add(oPosCheckDiscount);
			}
			
			// handle fix discount
			for(PosCheckDiscount oPosCheckDiscount: oPartyPreFixDiscounts) {
				calcPreDiscount("check", oPosCheckDiscount, oFuncCheckParty.getAppliedCheckDiscountItemList(oPosCheckDiscount.getSeq()), oHandledPartyDiscountIndex);
				oHandledPartyDiscountIndex.add(oPosCheckDiscount.getSeq());
			}
			
			// handle percentage discount
			for(PosCheckDiscount oPosCheckDiscount: oPartyPrePercentageDiscounts) {
				calcPreDiscount("check", oPosCheckDiscount, oFuncCheckParty.getAppliedCheckDiscountItemList(oPosCheckDiscount.getSeq()), oHandledPartyDiscountIndex);
				oHandledPartyDiscountIndex.add(oPosCheckDiscount.getSeq());
			}
		}
		
		// Process Service Charge
		for(FuncCheckParty oFuncCheckParty: m_oFuncCheckPartyList){
			List<Integer> oAppliedPreDiscountIndexes = new ArrayList<Integer>();
			
			// get the applied party pre-discount index
			for(PosCheckDiscount oPosCheckDiscount: oFuncCheckParty.getPartyCheckDiscount()) {
				if(oPosCheckDiscount.isDeleted())
					continue;
				
				if(oPosCheckDiscount.isPreDiscountType())
					oAppliedPreDiscountIndexes.add(oPosCheckDiscount.getSeq());
			}
			
			for (List<FuncCheckItem> oItemList: oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem: oItemList)
					calcSC(oFuncCheckItem, oAppliedPreDiscountIndexes);
			}
		}
		
		// Process Item's Mid-Discount
		for(FuncCheckParty oFuncCheckParty: m_oFuncCheckPartyList){
			List<PosCheckDiscount> oPartyCheckDiscounts = oFuncCheckParty.getPartyCheckDiscount();
			HashMap<String, List<Integer>> oAppliedPartyDiscountIndex = new HashMap<String, List<Integer>>();
			oAppliedPartyDiscountIndex.put("preDisc", new ArrayList<Integer>());
			oAppliedPartyDiscountIndex.put("midDisc", new ArrayList<Integer>());
			for(PosCheckDiscount oPosCheckDiscount: oPartyCheckDiscounts) {
				if(oPosCheckDiscount.isDeleted())
					continue;
				
				if(oPosCheckDiscount.isPreDiscountType()) 
					oAppliedPartyDiscountIndex.get("preDisc").add(oPosCheckDiscount.getSeq());
			}
			
			for (List<FuncCheckItem> oItemList: oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem: oItemList) {
					oItemDiscountList = oFuncCheckItem.getItemDiscountList();
					for(PosCheckDiscount oCheckItemDiscount:oItemDiscountList) {
						if(oCheckItemDiscount.isDeleted())
							continue;
						
						if(oCheckItemDiscount.isMidDiscountType()) {
							// Re-calculate the item discount
			        		// Mid-discount
							List<FuncCheckItem> oFuncCheckItemList = new ArrayList<FuncCheckItem>();
							oFuncCheckItemList.add(oFuncCheckItem);
							calcMidDiscount("item", oCheckItemDiscount, oFuncCheckItemList, oAppliedPartyDiscountIndex);
						}
					}
				}
			}
		}
		
		// Process party check mid-discount
		for(FuncCheckParty oFuncCheckParty: m_oFuncCheckPartyList){
			if(oFuncCheckParty.getPartyCheckDiscount().isEmpty())		//no party check discount applied
				continue;
			
			List<PosCheckDiscount> oPartyCheckDiscounts = oFuncCheckParty.getPartyCheckDiscount();
			List<PosCheckDiscount> oPartyMidFixDiscounts = new ArrayList<PosCheckDiscount>();
			List<PosCheckDiscount> oPartyMidPercentageDiscounts = new ArrayList<PosCheckDiscount>();
			HashMap<String, List<Integer>> oAppliedPartyDiscountIndex = new HashMap<String, List<Integer>>();
			oAppliedPartyDiscountIndex.put("preDisc", new ArrayList<Integer>());
			oAppliedPartyDiscountIndex.put("midDisc", new ArrayList<Integer>());
			
			for(PosCheckDiscount oPosCheckDiscount: oPartyCheckDiscounts) {
				if(oPosCheckDiscount.isDeleted())
					continue;
				
				if(oPosCheckDiscount.isPreDiscountType()) {
					oAppliedPartyDiscountIndex.get("preDisc").add(oPosCheckDiscount.getSeq());
					continue;
				}else if(oPosCheckDiscount.isPostDiscountType())
					continue;
				
				if(oPosCheckDiscount.isFixAmountDiscountMethod()) 
					oPartyMidFixDiscounts.add(oPosCheckDiscount);
				if(oPosCheckDiscount.isPercentageDiscountMethod())
					oPartyMidPercentageDiscounts.add(oPosCheckDiscount);
			}
			
			// handle fix discount
			for(PosCheckDiscount oPosCheckDiscount: oPartyMidFixDiscounts) {
				calcMidDiscount("check", oPosCheckDiscount, oFuncCheckParty.getAppliedCheckDiscountItemList(oPosCheckDiscount.getSeq()), oAppliedPartyDiscountIndex);
				oAppliedPartyDiscountIndex.get("midDisc").add(oPosCheckDiscount.getSeq());
			}
			
			// handle percentage discount
			for(PosCheckDiscount oPosCheckDiscount: oPartyMidPercentageDiscounts) {
				calcMidDiscount("check", oPosCheckDiscount, oFuncCheckParty.getAppliedCheckDiscountItemList(oPosCheckDiscount.getSeq()), oAppliedPartyDiscountIndex);
				oAppliedPartyDiscountIndex.get("midDisc").add(oPosCheckDiscount.getSeq());
			}
		}
		
		// Process Taxes
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList){
			HashMap<String, List<Integer>> oAppliedDiscountIndexes = new HashMap<String, List<Integer>>();
			List<Integer> oAppliedCheckPreDiscount = new ArrayList<Integer>();
			List<Integer> oAppliedCheckMidDiscount = new ArrayList<Integer>();
			
			// get the applied party pre-discount index
			for(PosCheckDiscount oPosCheckDiscount: oFuncCheckParty.getPartyCheckDiscount()) {
				if(oPosCheckDiscount.isDeleted())
					continue;
				
				if(oPosCheckDiscount.isPreDiscountType())
					oAppliedCheckPreDiscount.add(oPosCheckDiscount.getSeq());
				if(oPosCheckDiscount.isMidDiscountType())
					oAppliedCheckMidDiscount.add(oPosCheckDiscount.getSeq());
			}
			oAppliedDiscountIndexes.put("preDisc", oAppliedCheckPreDiscount);
			oAppliedDiscountIndexes.put("midDisc", oAppliedCheckMidDiscount);
			
			for (List<FuncCheckItem> oItemList: oFuncCheckParty.getWholeItemList()) {
				for (FuncCheckItem oFuncCheckItem:oItemList)
					calcTax(oFuncCheckItem, oAppliedDiscountIndexes);
			}
		}
		
		// Process Item's Post Discount
		for(FuncCheckParty oFuncCheckParty: m_oFuncCheckPartyList){
			List<PosCheckDiscount> oPartyCheckDiscounts = oFuncCheckParty.getPartyCheckDiscount();
			HashMap<String, List<Integer>> oAppliedPartyDiscountIndex = new HashMap<String, List<Integer>>();
			oAppliedPartyDiscountIndex.put("preDisc", new ArrayList<Integer>());
			oAppliedPartyDiscountIndex.put("midDisc", new ArrayList<Integer>());
			
			for(PosCheckDiscount oPosCheckDiscount: oPartyCheckDiscounts) {
				if(oPosCheckDiscount.isDeleted())
					continue;
				
				if(oPosCheckDiscount.isPreDiscountType()) 
					oAppliedPartyDiscountIndex.get("preDisc").add(oPosCheckDiscount.getSeq());
				else if(oPosCheckDiscount.isMidDiscountType())
					oAppliedPartyDiscountIndex.get("midDisc").add(oPosCheckDiscount.getSeq());
			}
			
			for (List<FuncCheckItem> oItemList: oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem: oItemList) {
					oItemDiscountList = oFuncCheckItem.getItemDiscountList();
					for(PosCheckDiscount oCheckItemDiscount:oItemDiscountList) {
						if(oCheckItemDiscount.isDeleted())
							continue;
						
						if(oCheckItemDiscount.isPostDiscountType()) {
							// Re-calculate the item discount
							// Post-discount
							List<FuncCheckItem> oFuncCheckItemList = new ArrayList<FuncCheckItem>();
							oFuncCheckItemList.add(oFuncCheckItem);
							calcPostDiscount("item", oCheckItemDiscount, oFuncCheckItemList, oAppliedPartyDiscountIndex);
						}
					}
				}
			}
		}
		
		// Process party check post-discount
		for(FuncCheckParty oFuncCheckParty: m_oFuncCheckPartyList){
			if(oFuncCheckParty.getPartyCheckDiscount().isEmpty())		//no party check discount applied
				continue;
			
			List<PosCheckDiscount> oPartyCheckDiscounts = oFuncCheckParty.getPartyCheckDiscount();
			List<PosCheckDiscount> oPartyPostFixDiscounts = new ArrayList<PosCheckDiscount>();
			List<PosCheckDiscount> oPartyPostPercentageDiscounts = new ArrayList<PosCheckDiscount>();
			HashMap<String, List<Integer>> oAppliedPartyDiscountIndex = new HashMap<String, List<Integer>>();
			oAppliedPartyDiscountIndex.put("preDisc", new ArrayList<Integer>());
			oAppliedPartyDiscountIndex.put("midDisc", new ArrayList<Integer>());
			oAppliedPartyDiscountIndex.put("postDisc", new ArrayList<Integer>());
			
			for(PosCheckDiscount oPosCheckDiscount: oPartyCheckDiscounts) {
				if(oPosCheckDiscount.isDeleted())
					continue;
				
				if(oPosCheckDiscount.isPreDiscountType()) {
					oAppliedPartyDiscountIndex.get("preDisc").add(oPosCheckDiscount.getSeq());
					continue;
				}else if(oPosCheckDiscount.isMidDiscountType()) {
					oAppliedPartyDiscountIndex.get("midDisc").add(oPosCheckDiscount.getSeq());
					continue;
				}
				
				if(oPosCheckDiscount.isFixAmountDiscountMethod()) 
					oPartyPostFixDiscounts.add(oPosCheckDiscount);
				if(oPosCheckDiscount.isPercentageDiscountMethod())
					oPartyPostPercentageDiscounts.add(oPosCheckDiscount);
			}
			
			// handle fix discount
			for(PosCheckDiscount oPosCheckDiscount: oPartyPostFixDiscounts) {
				this.calcPostDiscount("check", oPosCheckDiscount, oFuncCheckParty.getAppliedCheckDiscountItemList(oPosCheckDiscount.getSeq()), oAppliedPartyDiscountIndex);
				oAppliedPartyDiscountIndex.get("postDisc").add(oPosCheckDiscount.getSeq());
			}
			
			// handle percentage discount
			for(PosCheckDiscount oPosCheckDiscount: oPartyPostPercentageDiscounts) {
				this.calcPostDiscount("check", oPosCheckDiscount, oFuncCheckParty.getAppliedCheckDiscountItemList(oPosCheckDiscount.getSeq()), oAppliedPartyDiscountIndex);
				oAppliedPartyDiscountIndex.get("postDisc").add(oPosCheckDiscount.getSeq());
			}
		}
		
		// Calculate post discount on sc / tax
		for(FuncCheckParty oFuncCheckParty: m_oFuncCheckPartyList){
			for (List<FuncCheckItem> oItemList: oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem: oItemList) {
					for(int i=1; i<=AppGlobal.SC_COUNT; i++) {
						if(oFuncCheckItem.getDiscOnScTax(false, PosDiscountType.TYPE_POST_DISCOUNT, i).compareTo(BigDecimal.ZERO) != 0) {
							BigDecimal dTmpDiscOnSc = oFuncCheckParty.getDiscOnScTax(PosDiscountType.TYPE_POST_DISCOUNT, false, i).add(oFuncCheckItem.getDiscOnScTax(false, PosDiscountType.TYPE_POST_DISCOUNT, i));
							oFuncCheckParty.setDiscOnScTax(PosDiscountType.TYPE_POST_DISCOUNT, false, i, dTmpDiscOnSc);
						}
					}
					for(int i=1; i<=AppGlobal.TAX_COUNT; i++) {
						if(oFuncCheckItem.getDiscOnScTax(true, PosDiscountType.TYPE_POST_DISCOUNT, i).compareTo(BigDecimal.ZERO) != 0) {
							BigDecimal dTmpDiscOnTax = oFuncCheckParty.getDiscOnScTax(PosDiscountType.TYPE_POST_DISCOUNT, true, i).add(oFuncCheckItem.getDiscOnScTax(true, PosDiscountType.TYPE_POST_DISCOUNT, i));
							oFuncCheckParty.setDiscOnScTax(PosDiscountType.TYPE_POST_DISCOUNT, true, i, dTmpDiscOnTax);
						}
					}
				}
			}
		}
		
		// Special handling on rounding issue of inclusive SC/tax with breakdown
		// Step 1 :	Find out the total item total with inclusive SC/tax with breakdown
		//			Find out the total original item total with inclusive SC/tax with breakdown
		//			Find out the total inclusive SC and tax
		BigDecimal dAllItemTotalAfterInclusiveBreakdown = BigDecimal.ZERO;
		BigDecimal dAllOriginalItemTotal = BigDecimal.ZERO;
		BigDecimal[] dAllInclusiveSCs = new BigDecimal[5];
		for(int i=0; i<5; i++)
			dAllInclusiveSCs[i] = BigDecimal.ZERO;
		BigDecimal[] dAllInclusiveTaxs = new BigDecimal[25];
		for(int i=0; i<25; i++)
			dAllInclusiveTaxs[i] = BigDecimal.ZERO;
		for(FuncCheckParty oFuncCheckParty: m_oFuncCheckPartyList){
			for (List<FuncCheckItem> oItemList: oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem: oItemList){
					PosCheckItem oPosCheckItem = oFuncCheckItem.getCheckItem();
					boolean bNeedHandle = false;
					BigDecimal dRollBackItemTotal = BigDecimal.ZERO;
					dRollBackItemTotal = dRollBackItemTotal.add(oPosCheckItem.getTotal());
					BigDecimal[] dInclusiveSCs = new BigDecimal[5];
					for(int i=0; i<5; i++)
						dInclusiveSCs[i] = BigDecimal.ZERO;
					BigDecimal[] dInclusiveTaxs = new BigDecimal[25];
					for(int i=0; i<25; i++)
						dInclusiveTaxs[i] = BigDecimal.ZERO;
					for(int i=1; i<=5; i++){
						if(oPosCheckItem.getChargeSc(i).equals(PosCheckItem.CHARGE_SC_CHARGED_IN_ITEM_PRICE)){
							dRollBackItemTotal = dRollBackItemTotal.add(oPosCheckItem.getSc(i));
							dInclusiveSCs[i-1] = oPosCheckItem.getSc(i);
							bNeedHandle = true;
						}
						
						if(oPosCheckItem.getChargeTax(i).equals(PosCheckItem.CHARGE_TAX_CHARGED_IN_ITEM_PRICE)){
							dRollBackItemTotal = dRollBackItemTotal.add(oPosCheckItem.getTax(i));
							dInclusiveTaxs[i-1] = oPosCheckItem.getTax(i);
							bNeedHandle = true;
						}
					}
					
					for(int i=6; i<=25; i++){
						// Check if the item is charged by Tax
						if(oPosCheckItem.getChargeTax(i).equals(PosCheckItem.CHARGE_TAX_CHARGED_IN_ITEM_PRICE)){
							dRollBackItemTotal = dRollBackItemTotal.add(oPosCheckItem.getTax(i));
							dInclusiveTaxs[i-1] = oPosCheckItem.getTax(i);
							bNeedHandle = true;
						}
					}
					
					dRollBackItemTotal = dRollBackItemTotal.setScale(4, RoundingMode.HALF_UP);
					BigDecimal dOriginalItemTotal = oPosCheckItem.getOriginalPrice().multiply(oPosCheckItem.getQty());
					if (bNeedHandle && dOriginalItemTotal.compareTo(dRollBackItemTotal) == 0) {
						// Perform special handling
						for(int i=0; i<5; i++)
							dAllInclusiveSCs[i] = dAllInclusiveSCs[i].add(dInclusiveSCs[i]);
						for(int i=0; i<25; i++)
							dAllInclusiveTaxs[i] = dAllInclusiveTaxs[i].add(dInclusiveTaxs[i]);
						dAllItemTotalAfterInclusiveBreakdown = dAllItemTotalAfterInclusiveBreakdown.add(oPosCheckItem.getRoundTotal());
						dAllOriginalItemTotal = dAllOriginalItemTotal.add(dOriginalItemTotal);
					}
				}
			}
		}
		
		// Special handling on rounding issue of inclusive SC/tax with breakdown
		// Step 2: Find out the round total
		BigDecimal dSpecialHandleRoundAmountForInclusiveSCTax = BigDecimal.ZERO;
		dSpecialHandleRoundAmountForInclusiveSCTax = dSpecialHandleRoundAmountForInclusiveSCTax.add(dAllOriginalItemTotal);
		dSpecialHandleRoundAmountForInclusiveSCTax = dSpecialHandleRoundAmountForInclusiveSCTax.subtract((dAllItemTotalAfterInclusiveBreakdown));
		for(int i=0; i<5; i++)
			dSpecialHandleRoundAmountForInclusiveSCTax = dSpecialHandleRoundAmountForInclusiveSCTax.subtract((AppGlobal.g_oFuncOutlet.get().roundSCAmountToBigDecimal(dAllInclusiveSCs[i])));
		for(int i=0; i<25; i++)
			dSpecialHandleRoundAmountForInclusiveSCTax = dSpecialHandleRoundAmountForInclusiveSCTax.subtract((AppGlobal.g_oFuncOutlet.get().roundTaxAmountToBigDecimal(dAllInclusiveTaxs[i])));
		
		// Calculate the Party's information
		for(FuncCheckParty oFuncCheckParty: m_oFuncCheckPartyList){
			oCheckParty = oFuncCheckParty.getCheckParty();
			
			for (List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem:oItemList){
					oCheckItem = oFuncCheckItem.getCheckItem();
					if(oCheckItem.isDeleted())
						continue;
					
					if(oFuncCheckItem.isMinimumChargeItem())
						continue;
					
					// Add value to check
					oCheckParty.setItemTotal(oCheckParty.getItemTotal().add(oCheckItem.getRoundTotal()));
					for (PosCheckDiscount oItemDiscount : oFuncCheckItem.getItemDiscountList()) {
						if (oItemDiscount.isDeleted())
							continue;
						
						if (oItemDiscount.isPreDiscountType())
							oCheckParty.setPreDisc(oCheckParty.getPreDisc().add(oItemDiscount.getRoundTotal()));
						else if (oItemDiscount.isMidDiscountType())
							oCheckParty.setMidDisc(oCheckParty.getMidDisc().add(oItemDiscount.getRoundTotal()));
						else if (oItemDiscount.isPostDiscountType())
							oCheckParty.setPostDisc(oCheckParty.getPostDisc().add(oItemDiscount.getRoundTotal()));
					}
					for (int i = 1; i <= 5; i++) {
						oCheckParty.setSc(i, oCheckParty.getSc(i).add(oCheckItem.getSc(i)));
						
						String sScInclTaxKey = String.format("incl_sc_ref%d", i); 
						oFuncCheckParty.setInclScRef(i, oFuncCheckParty.getInclScRef(i).add(oFuncCheckItem.getTaxScRefByVariable(sScInclTaxKey)));
					}
					for (int i = 1; i <= 25; i++) {
						oCheckParty.setTax(i, oCheckParty.getTax(i).add(oCheckItem.getTax(i)));
						
						String sTaxInclScKey = String.format("incl_tax_ref%d", i);
						oFuncCheckParty.setInclTaxRef(i, oFuncCheckParty.getInclTaxRef(i).add(oFuncCheckItem.getTaxScRefByVariable(sTaxInclScKey)));
					}
					for (int i = 1; i <= 4; i++) {
						oCheckParty.setInclusiveTaxRef(i, oCheckParty.getInclusiveTaxRef(i).add(oCheckItem.getInclusiveTaxRef(i)));
					}
					
					// calculate service charge include tax amount
					for (PosCheckTaxScRef oPosCheckTaxScRef : oFuncCheckItem.getTaxScRefList()) {
						for (int i = 1; i <= 25; i++) {
							for (int j = 1; j <= 5; j++) {
								String sItemScInclTaxKey = String.format("sc%d_incl_tax%d", j, i);
								if (!oPosCheckTaxScRef.getVariable().equals(sItemScInclTaxKey) || oPosCheckTaxScRef.isDeleted())
									continue;
								
								if (oPosCheckTaxScRef.getValue() == null || oPosCheckTaxScRef.getValue().isEmpty())
									continue;
								
								if (oCheckParty.getCheckTaxScRefTotalByIndex(i) == null)
									oCheckParty.setCheckTaxScRefTotal(i, BigDecimal.ZERO);
								
								oCheckParty.setCheckTaxScRefTotal(i, oCheckParty.getCheckTaxScRefTotalByIndex(i).add(new BigDecimal(oPosCheckTaxScRef.getValue())));
							}
						}
					}
				}
			}
			
			// Add party discount to check
			for(PosCheckDiscount oPartyCheckDiscount : oFuncCheckParty.getPartyCheckDiscount()) {
				if(oPartyCheckDiscount.isDeleted())
					continue;
				
				if(oPartyCheckDiscount.isPreDiscountType())
					oCheckParty.setPreDisc(oCheckParty.getPreDisc().add(oPartyCheckDiscount.getRoundTotal()));
				
				if(oPartyCheckDiscount.isMidDiscountType())
					oCheckParty.setMidDisc(oCheckParty.getMidDisc().add(oPartyCheckDiscount.getRoundTotal()));
				
				if(oPartyCheckDiscount.isPostDiscountType())
					oCheckParty.setPostDisc(oCheckParty.getPostDisc().add(oPartyCheckDiscount.getRoundTotal()));
			}
			
			// Calculate the round amount of SC, tax
			for(int i=1; i<=5; i++){
				BigDecimal dSCNotFromInclusiveSCItem = oCheckParty.getSc(i).subtract(dAllInclusiveSCs[i-1]);
				// New calculation of SC
				// SC = round of SC (not breakdown from inclusive SC item) + round of SC (breakdown from inclusive SC item)
				oCheckParty.setSc(i, AppGlobal.g_oFuncOutlet.get().roundSCAmountToBigDecimal(dSCNotFromInclusiveSCItem).add(AppGlobal.g_oFuncOutlet.get().roundSCAmountToBigDecimal(dAllInclusiveSCs[i-1])));
				oFuncCheckParty.setInclScRef(i, AppGlobal.g_oFuncOutlet.get().roundSCAmountToBigDecimal(oFuncCheckParty.getInclScRef(i)));
			}
			for(int i=1; i<=25; i++){
				BigDecimal dTaxNotFromInclusiveTaxItem = oCheckParty.getTax(i).subtract(dAllInclusiveTaxs[i-1]);
				// New calculation of Tax
				// Tax = round of Tax (not breakdown from inclusive Tax item) + round of Tax (breakdown from inclusive Tax item)
				oCheckParty.setTax(i, AppGlobal.g_oFuncOutlet.get().roundTaxAmountToBigDecimal(dTaxNotFromInclusiveTaxItem).add(AppGlobal.g_oFuncOutlet.get().roundTaxAmountToBigDecimal(dAllInclusiveTaxs[i-1])));
				oFuncCheckParty.setInclTaxRef(i, AppGlobal.g_oFuncOutlet.get().roundTaxAmountToBigDecimal(oFuncCheckParty.getInclTaxRef(i)));
			}
			for(int i=1; i<=4; i++){
				oCheckParty.setInclusiveTaxRef(i, AppGlobal.g_oFuncOutlet.get().roundTaxAmountToBigDecimal(oCheckParty.getInclusiveTaxRef(i)));
			}
			
			// Process party check total
			BigDecimal dBeforeRoundCheckTotal = oCheckParty.getItemTotal();
			
			for(int i=1; i<=5; i++){
				dBeforeRoundCheckTotal = dBeforeRoundCheckTotal.add(oCheckParty.getSc(i));
			}
			for(int i=1; i<=25; i++){
				dBeforeRoundCheckTotal = dBeforeRoundCheckTotal.add(oCheckParty.getTax(i));
			}
			
			dBeforeRoundCheckTotal = dBeforeRoundCheckTotal.add(oCheckParty.getPreDisc());
			dBeforeRoundCheckTotal = dBeforeRoundCheckTotal.add(oCheckParty.getMidDisc());
			dBeforeRoundCheckTotal = dBeforeRoundCheckTotal.add(oCheckParty.getPostDisc());
			
			String sMinimumCharge = this.getCheckExtraInfoBySectionAndVariable("", PosCheckExtraInfo.VARIABLE_MIN_CHARGE, 0);
			if (sMinimumCharge != null && !sMinimumCharge.equals("0") && !sMinimumCharge.equals("")) {
				BigDecimal dMinimumCharge = new BigDecimal(sMinimumCharge);
				BigDecimal dNewMinimumCharge = BigDecimal.ZERO;
				for (List<FuncCheckItem> oFuncCheckItemList : oFuncCheckParty.getWholeItemList()) {
					for (FuncCheckItem oFuncCheckItem : oFuncCheckItemList) {
						if (oFuncCheckItem.isMinimumChargeItem()) {
							//BigDecimal dDefaultItemTotal = oFuncCheckItem.getCheckItem().getRoundTotal();
							if (dMinimumCharge.compareTo(dBeforeRoundCheckTotal) > 0)
								dNewMinimumCharge = dMinimumCharge.subtract(dBeforeRoundCheckTotal);
							
							oFuncCheckItem.changeItemPrice(dNewMinimumCharge);
							calcItemPrice(oFuncCheckItem, oFuncCheckItem);
							oFuncCheckItem.getCheckItem().setRoundTotal(AppGlobal.g_oFuncOutlet.get().roundItemAmountToBigDecimal(oFuncCheckItem.getCheckItem().getTotal()));
							oFuncCheckItem.getCheckItem().setRoundAmount(oFuncCheckItem.getCheckItem().getRoundTotal().subtract(oFuncCheckItem.getCheckItem().getTotal()));
							oFuncCheckItem.getCheckItem().setModified(true);
							dBeforeRoundCheckTotal = dBeforeRoundCheckTotal.add(dNewMinimumCharge);
							oCheckParty.setItemTotal(oCheckParty.getItemTotal().add(dNewMinimumCharge));
							for (FuncCheckListener listener : listeners) {
								listener.FuncCheck_updateBasketItemPrice(oFuncCheckItem.getCheckItem().getSeatNo(), oFuncCheckItem.getCheckItem().getSeq() - 1, oFuncCheckItem);
								break;
							}
							break;
						}
					}
				}
			}
			
			// Calculate party check round amount
			if(dSpecialHandleRoundAmountForInclusiveSCTax.signum() == -1)
				dSpecialHandleRoundAmountForInclusiveSCTax=Util.HERORound(dSpecialHandleRoundAmountForInclusiveSCTax.negate(), "1", AppGlobal.g_oFuncOutlet.get().getBusinessDay().getCheckDecimal()).negate();
			else
				dSpecialHandleRoundAmountForInclusiveSCTax=Util.HERORound(dSpecialHandleRoundAmountForInclusiveSCTax, "1", AppGlobal.g_oFuncOutlet.get().getBusinessDay().getCheckDecimal());
			oCheckParty.setPartyTotal(AppGlobal.g_oFuncOutlet.get().roundCheckAmountToBigDecimal(dBeforeRoundCheckTotal).add(dSpecialHandleRoundAmountForInclusiveSCTax));
			oCheckParty.setRoundAmount(oCheckParty.getPartyTotal().subtract(dBeforeRoundCheckTotal));
			
			// Special handling on discount on sc/tax for single 100% post discount
			if(oFuncCheckParty.isHundredPercentPostDiscForWholeParty()) {
				for(int i=1; i<=AppGlobal.SC_COUNT; i++) {
					if(!oFuncCheckParty.getDiscOnScTax(PosDiscountType.TYPE_POST_DISCOUNT, false, i).equals(BigDecimal.ZERO)) {
						BigDecimal bPreviousValue = oFuncCheckParty.getDiscOnScTax(PosDiscountType.TYPE_POST_DISCOUNT, false, i);
						oFuncCheckParty.setDiscOnScTax(PosDiscountType.TYPE_POST_DISCOUNT, false, i, oFuncCheckParty.getInclScRef(i).multiply(new BigDecimal("-1")));
						
						// calculate the and assign to check item
						BigDecimal dRounding = oFuncCheckParty.getDiscOnScTax(PosDiscountType.TYPE_POST_DISCOUNT, false, i).subtract(bPreviousValue);
						if(!dRounding.equals(BigDecimal.ZERO))
							oFuncCheckParty.addDiscOnScTaxRoundingToItem(PosDiscountType.TYPE_POST_DISCOUNT, false, i, dRounding);
					}
				}
				for(int i=1; i<=3; i++) {
					if(!oFuncCheckParty.getDiscOnScTax(PosDiscountType.TYPE_POST_DISCOUNT, true, i).equals(BigDecimal.ZERO)) {
						BigDecimal bPreviousValue = oFuncCheckParty.getDiscOnScTax(PosDiscountType.TYPE_POST_DISCOUNT, true, i);
						oFuncCheckParty.setDiscOnScTax(PosDiscountType.TYPE_POST_DISCOUNT, true, i, oCheckParty.getInclusiveTaxRef(i).multiply(new BigDecimal("-1")));
						
						// calculate the and assign to check item
						BigDecimal dRounding = oFuncCheckParty.getDiscOnScTax(PosDiscountType.TYPE_POST_DISCOUNT, true, i).subtract(bPreviousValue);
						if(!dRounding.equals(BigDecimal.ZERO))
							oFuncCheckParty.addDiscOnScTaxRoundingToItem(PosDiscountType.TYPE_POST_DISCOUNT, true, i, dRounding);
					}
				}
			}
			
			// Store the special handle round amount for inclusive SC/Tax with breakdown
			m_dSpecialHandleRoundAmountForInclusiveSCTax = m_dSpecialHandleRoundAmountForInclusiveSCTax.add(dSpecialHandleRoundAmountForInclusiveSCTax);
		}
	}
	
	//Calculate loyalty base total
	public void calcLoyaltyBaseTotal(){
		//check loyalty session ID
		if(AppGlobal.g_oFuncStation.get().getLoyaltySessionId().isEmpty())
			return;
		
		PosInterfaceConfig oInterfaceConfig = null;
		List<PosInterfaceConfig> oPaymentInterfaceList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_LOYALTY_INTERFACE);
		if(!oPaymentInterfaceList.isEmpty()) {
			for(PosInterfaceConfig oPaymentInterface: oPaymentInterfaceList) {
				if(oPaymentInterface.getInterfaceVendorKey().equals(InfVendor.KEY_GM_LOYALTY))
					oInterfaceConfig = oPaymentInterface;
			}
		}
		if(oInterfaceConfig == null)
			return;
		
		if(oInterfaceConfig.getInterfaceConfig().optJSONObject("base_total_calculation_setup").optJSONObject("params").optJSONObject("bonus_base_type").optInt("value") == 1){
			m_dBaseTotal = BigDecimal.ZERO;
			// Include Revenue Item Total
			if(oInterfaceConfig.getInterfaceConfig().optJSONObject("base_total_calculation_setup").optJSONObject("params").optJSONObject("include_revenue_item_total").optInt("value") == 1){
				if(m_oCheck.isRevenue())
					m_dBaseTotal = m_dBaseTotal.add(m_oCheck.getItemTotal()).add(m_oCheck.getPreDisc()).add(m_oCheck.getMidDisc()).add(m_oCheck.getPostDisc());
			}
			
			// Include Non Revenue Item Total
			if(oInterfaceConfig.getInterfaceConfig().optJSONObject("base_total_calculation_setup").optJSONObject("params").optJSONObject("include_non_revenue_item_total").optInt("value") == 1){
				if(!m_oCheck.isRevenue())
					m_dBaseTotal = m_dBaseTotal.add(m_oCheck.getItemTotal()).subtract(m_oCheck.getPreDisc().add(m_oCheck.getMidDisc().add(m_oCheck.getPostDisc())));
			}
			
			// Include Check Discount Total
			if(oInterfaceConfig.getInterfaceConfig().optJSONObject("base_total_calculation_setup").optJSONObject("params").optJSONObject("include_check_discount_total").optInt("value") == 1)
				m_dBaseTotal = m_dBaseTotal.add(m_oCheck.getPreDisc().add(m_oCheck.getPostDisc()).add(m_oCheck.getMidDisc()).multiply(new BigDecimal("-1.0")));
			
			// Include Round Amount
			if(oInterfaceConfig.getInterfaceConfig().optJSONObject("base_total_calculation_setup").optJSONObject("params").optJSONObject("include_round_amount").optInt("value") == 1)
				m_dBaseTotal = m_dBaseTotal.add(m_oCheck.getRoundAmount());
			
			// Include Service Charge
			if(oInterfaceConfig.getInterfaceConfig().optJSONObject("base_total_calculation_setup").optJSONObject("params").optJSONObject("include_service_charge").optInt("value") == 1){
				for(int i=1; i<=5; i++)
					m_dBaseTotal = m_dBaseTotal.add(m_oCheck.getSc(i));
			}
			
			// Include Tax
			if(oInterfaceConfig.getInterfaceConfig().optJSONObject("base_total_calculation_setup").optJSONObject("params").optJSONObject("include_tax").optInt("value") == 1){
				for(int i=1; i<=25; i++)
					m_dBaseTotal = m_dBaseTotal.add(m_oCheck.getTax(i));
			}
			
			// Exclude Discount Item OR Exclude Loyalty Item
			if(oInterfaceConfig.getInterfaceConfig().optJSONObject("base_total_calculation_setup").optJSONObject("params").optJSONObject("exclude_discount_item").optInt("value") == 1 ||
				oInterfaceConfig.getInterfaceConfig().optJSONObject("base_total_calculation_setup").optJSONObject("params").optJSONObject("exclude_loyalty_item").optInt("value") == 1	){
				
				if(oInterfaceConfig.getInterfaceConfig().optJSONObject("base_total_calculation_setup").optJSONObject("params").optJSONObject("include_revenue_item_total").optInt("value") == 1 && m_oCheck.isRevenue() ||
					oInterfaceConfig.getInterfaceConfig().optJSONObject("base_total_calculation_setup").optJSONObject("params").optJSONObject("include_non_revenue_item_total").optInt("value") == 1 && !m_oCheck.isRevenue()){
					for(int i = 0; i <= AppGlobal.MAX_SEATS; i++) {	
						for(FuncCheckItem oFuncCheckItem:this.getItemList(i)){
							// Exclude Discount Item
							if(oInterfaceConfig.getInterfaceConfig().optJSONObject("base_total_calculation_setup").optJSONObject("params").optJSONObject("exclude_discount_item").optInt("value") == 1){
								if(oFuncCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_BENEFIT_CODE) == null && 
									oFuncCheckItem.getAppliedCheckDiscountTotal().compareTo(BigDecimal.ZERO) > 0)
										m_dBaseTotal = m_dBaseTotal.subtract(oFuncCheckItem.getNetItemTotal().add(oFuncCheckItem.getAppliedCheckDiscountTotal()));
							}
							// Exclude Loyalty Item
							if(oInterfaceConfig.getInterfaceConfig().optJSONObject("base_total_calculation_setup").optJSONObject("params").optJSONObject("exclude_loyalty_item").optInt("value") == 1){
								if(oFuncCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_BENEFIT_CODE) != null && 
									!oFuncCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_BENEFIT_CODE).isEmpty()){
										m_dBaseTotal = m_dBaseTotal.subtract(oFuncCheckItem.getNetItemTotal());
										if(oInterfaceConfig.getInterfaceConfig().optJSONObject("base_total_calculation_setup").optJSONObject("params").optJSONObject("include_service_charge").optInt("value") == 1){
											for(int j=1; j<=5; j++)
												m_dBaseTotal = m_dBaseTotal.subtract(oFuncCheckItem.getCheckItem().getSc(j));
										}
										if(oInterfaceConfig.getInterfaceConfig().optJSONObject("base_total_calculation_setup").optJSONObject("params").optJSONObject("include_tax").optInt("value") == 1){
											for(int j=1; j<=25; j++)
												m_dBaseTotal = m_dBaseTotal.subtract(oFuncCheckItem.getCheckItem().getTax(j));
										}
								}
							}
						}
					}
				}
			}
		}
		else
			m_dBaseTotal = m_oCheck.getCheckTotal();
		return;
	}
	
	public void calcItemPrice(FuncCheckItem oFuncCheckItem, FuncCheckItem oParentFuncCheckItem){
		// Process item modifiers
		BigDecimal dModifierCarryTotal = BigDecimal.ZERO;
		BigDecimal dModifierCarryRevenue = BigDecimal.ZERO;
		ArrayList<FuncCheckItem> oModifierList = oFuncCheckItem.getModifierList();
		for(FuncCheckItem oModifierFuncCheckItem: oModifierList) {
			calcItemPrice(oModifierFuncCheckItem, oParentFuncCheckItem);
			
			dModifierCarryTotal = dModifierCarryTotal.add(oModifierFuncCheckItem.getCheckItem().getCarryTotal());
			dModifierCarryRevenue = dModifierCarryRevenue.add(oModifierFuncCheckItem.getCheckItem().getCarryRevenue());
		}
		
		// Process item child
		BigDecimal dChildCarryTotal = BigDecimal.ZERO;
		BigDecimal dChildCarryRevenue = BigDecimal.ZERO;
		if (oFuncCheckItem.isCalculateMethodSumUp()) {
			ArrayList<FuncCheckItem> oChildList = oFuncCheckItem.getChildItemList();
			for(FuncCheckItem oChildFuncCheckItem: oChildList) {
				calcItemPrice(oChildFuncCheckItem, oParentFuncCheckItem);
				
				dChildCarryTotal = dChildCarryTotal.add(oChildFuncCheckItem.getCheckItem().getCarryTotal());
				dChildCarryRevenue = dChildCarryRevenue.add(oChildFuncCheckItem.getCheckItem().getCarryRevenue());
			}
		}
		
		// Reset discount on sc / tax
		oFuncCheckItem.setDiscOnScTax(false, PosDiscountType.TYPE_PRE_DISCOUNT, 0, BigDecimal.ZERO, true);
		oFuncCheckItem.setDiscOnScTax(false, PosDiscountType.TYPE_MID_DISCOUNT, 0, BigDecimal.ZERO, true);
		oFuncCheckItem.setDiscOnScTax(false, PosDiscountType.TYPE_POST_DISCOUNT, 0, BigDecimal.ZERO, true);
		oFuncCheckItem.setDiscOnScTax(true, PosDiscountType.TYPE_PRE_DISCOUNT, 0, BigDecimal.ZERO, true);
		oFuncCheckItem.setDiscOnScTax(true, PosDiscountType.TYPE_MID_DISCOUNT, 0, BigDecimal.ZERO, true);
		oFuncCheckItem.setDiscOnScTax(true, PosDiscountType.TYPE_POST_DISCOUNT, 0, BigDecimal.ZERO, true);
		
		// Calculate inclusive SC and tax
		calcInclusiveSCAndTax(oFuncCheckItem, oParentFuncCheckItem);
		
		PosCheckItem oCheckItem = oFuncCheckItem.getCheckItem();
		// Calculate the breakdown price
		oFuncCheckItem.setBreakdownPrice(oCheckItem.getPrice());
		if(oCheckItem.isScTaxInclusiveNoBreakdown() 
				|| (oFuncCheckItem.isModifierItem() && oParentFuncCheckItem.getCheckItem().isScTaxInclusiveNoBreakdown())
				|| (oFuncCheckItem.isSetMenuItem() && oParentFuncCheckItem.isSumUpChildItemToParent() && oParentFuncCheckItem.getCheckItem().isScTaxInclusiveNoBreakdown())) {
			PosCheckItem oTargetCheckItem = oCheckItem;
			if(oFuncCheckItem.isModifierItem() || (oFuncCheckItem.isSetMenuItem() && oFuncCheckItem.isSumUpChildItemToParent()))
				oTargetCheckItem = oParentFuncCheckItem.getCheckItem();
			
			oTargetCheckItem.calculateScTaxRateForInclusiveNoBreakdown(m_oScType, m_oTaxType);
			BigDecimal dRateTotalForInclusiveScNoBreakdown = oTargetCheckItem.getInclusiveNoBreakdownBaseRate(m_oScType, m_oTaxType, null);
			oFuncCheckItem.setBreakdownPrice(oFuncCheckItem.getBreakdownPrice().divide(dRateTotalForInclusiveScNoBreakdown.add(new BigDecimal("1.0")), 10, RoundingMode.HALF_UP));
		}
		
		// Calculate carry total
		
		BigDecimal dCarryTotal = BigDecimal.ZERO;
		dCarryTotal = oCheckItem.getPrice().multiply(oCheckItem.getQty());
		dCarryTotal = dCarryTotal.add(dModifierCarryTotal);
		dCarryTotal = dCarryTotal.add(dChildCarryTotal);
		
		if(oFuncCheckItem == oParentFuncCheckItem){
			// Parent item
			oCheckItem.setTotal(dCarryTotal);
		}else{
			// Child item
			oCheckItem.setCarryTotal(dCarryTotal);
		}
		
		// Calculate carry revenue
		BigDecimal dCarryRevenue = BigDecimal.ZERO;
		if(oCheckItem.getGetRevenue().equals(PosCheckItem.GET_REVENUE_SPLIT_ORIGINAL_BASIC_PRICE)){
			dCarryRevenue = oCheckItem.getPrice().subtract(oCheckItem.getBasicPrice());
			dCarryRevenue = dCarryRevenue.multiply(oCheckItem.getQty());
		}else if(oCheckItem.getGetRevenue().equals(PosCheckItem.GET_REVENUE_SPLIT_PRICE)){
			dCarryRevenue = oCheckItem.getPrice().subtract(oCheckItem.getPrice());	// Should be ZERO
			dCarryRevenue = dCarryRevenue.multiply(oCheckItem.getQty());
		}else{
			dCarryRevenue = oCheckItem.getPrice().multiply(oCheckItem.getQty());
			dCarryRevenue = dCarryRevenue.add(dModifierCarryRevenue);
			dCarryRevenue = dCarryRevenue.add(dChildCarryRevenue);
		}
		if(oFuncCheckItem == oParentFuncCheckItem){
			// Parent item
			oCheckItem.setCarryRevenue(BigDecimal.ZERO);
		}else{
			// Child item
			oCheckItem.setCarryRevenue(dCarryRevenue);
		}
		
		// Calculate revenue
		BigDecimal dRevenue = BigDecimal.ZERO;
		if(oFuncCheckItem == oParentFuncCheckItem){
			// Parent item
			dRevenue = oCheckItem.getPrice().multiply(oCheckItem.getQty());
			dRevenue = dRevenue.add(dModifierCarryRevenue);
			dRevenue = dRevenue.add(dChildCarryRevenue);
		}else{
			// Child item
			if(oCheckItem.getGetRevenue().equals(PosCheckItem.GET_REVENUE_SPLIT_ORIGINAL_BASIC_PRICE)){
				dRevenue = oCheckItem.getBasicPrice().multiply(oCheckItem.getQty());
				dRevenue = dRevenue.add(dModifierCarryRevenue);
				dRevenue = dRevenue.add(dChildCarryRevenue);
			}else if(oCheckItem.getGetRevenue().equals(PosCheckItem.GET_REVENUE_SPLIT_PRICE)){
				dRevenue = oCheckItem.getPrice().multiply(oCheckItem.getQty());
				dRevenue = dRevenue.add(dModifierCarryRevenue);
				dRevenue = dRevenue.add(dChildCarryRevenue);
			}else
				dRevenue = BigDecimal.ZERO;
		}
		oCheckItem.setRevenue(dRevenue);
	}
	
	public void calcPreDiscount(String sType, PosCheckDiscount oPosCheckDiscount, List<FuncCheckItem> oFuncCheckItemList, List<Integer> oAppliedDiscountIndexes) {
		PosCheckItem oPosCheckItem = null;
		BigDecimal dBaseTotal = BigDecimal.ZERO;
		
		// Calculate Item Pre-Discount
		if(sType.equals("item")) {
			oPosCheckItem = oFuncCheckItemList.get(0).getCheckItem();
			
			for(FuncCheckItem oFuncCheckItem:oFuncCheckItemList) {
				if(oFuncCheckItem.isSplitRevenueParent()) 
					return;
				
				boolean bWithBreakdown = false;
				for(int i = 1; i <= 25; i++) {
					if(oFuncCheckItem.getCheckItem().getChargeTax(i).equals(PosCheckItem.CHARGE_TAX_CHARGED_IN_ITEM_PRICE)) {
						bWithBreakdown = true;
						break;
					}
				}
				if (bWithBreakdown)
					dBaseTotal = dBaseTotal.add(oFuncCheckItem.getCheckItem().getTotal());
				else
					dBaseTotal = dBaseTotal.add(oFuncCheckItem.getCheckItem().getRoundTotal());
			}
			
			BigDecimal dDiscountTotal = BigDecimal.ZERO;
			
			if(oPosCheckDiscount.isPercentageDiscountMethod()) {
				// Percentage discount
				dDiscountTotal = dBaseTotal.multiply(oPosCheckDiscount.getRate());
			}else {
				//define total is negative or not. 
				if(dBaseTotal.signum() != -1){
					//dBaseTotal is +ve, fix amount is -ve, discount need to be -ve
					if(dBaseTotal.compareTo(oPosCheckDiscount.getFixAmount().negate()) >= 0) 
						dDiscountTotal = oPosCheckDiscount.getFixAmount();
					else
						dDiscountTotal = dBaseTotal.negate();
				}else{
					//dBaseTotal is -ve, fix amount is -ve, discount need to be +ve
					if(dBaseTotal.compareTo(oPosCheckDiscount.getFixAmount()) < 0)
						dDiscountTotal = oPosCheckDiscount.getFixAmount().negate();
					else
						dDiscountTotal = dBaseTotal.negate();
				}
			}
			
			//Calculate maximum discount amount
			if (oPosCheckDiscount.isUsedForDiscount())
				dDiscountTotal = this.getDiscountMaxAmount(oPosCheckDiscount, dDiscountTotal);
			
			oPosCheckDiscount.setTotal(dDiscountTotal);
			
			// Calculate the round amount
			BigDecimal dDiscRoundTotal = AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(oPosCheckDiscount.getTotal());
			oPosCheckDiscount.setRoundTotal(dDiscRoundTotal);
			oPosCheckDiscount.setRoundAmount(oPosCheckDiscount.getRoundTotal().subtract(oPosCheckDiscount.getTotal()));
			
			// Set pos_check_discount_item value
			if(oPosCheckDiscount.getCheckDiscountItemList() != null && !oPosCheckDiscount.getCheckDiscountItemList().isEmpty()) {
				PosCheckDiscountItem oCheckDiscountItem = oPosCheckDiscount.getCheckDiscountItemList().get(0);
				oCheckDiscountItem.setTotal(oPosCheckDiscount.getTotal());
				oCheckDiscountItem.setRoundTotal(oPosCheckDiscount.getRoundTotal());
				
				// Break down the tax and sc (for inclusive on break down item only)
				if(oFuncCheckItemList.size() > 0 && oFuncCheckItemList.get(0).getCheckItem().isScTaxInclusiveNoBreakdown() 
						&& oFuncCheckItemList.get(0).getCheckItem().isScTaxInclusiveNoBreakdown()) {
					FuncCheckItem oFuncCheckItem = oFuncCheckItemList.get(0);
					HashMap<String, BigDecimal[]> oScTaxInclusiveRateNoBreakdown = new HashMap<String, BigDecimal[]>();
					oScTaxInclusiveRateNoBreakdown.put("sc", new BigDecimal[AppGlobal.SC_COUNT]);
					oScTaxInclusiveRateNoBreakdown.put("tax", new BigDecimal[AppGlobal.TAX_COUNT]);
					
					dBaseTotal = oFuncCheckItem.calculateScTaxRateBaseOnDiscount(PosDiscountType.TYPE_PRE_DISCOUNT, oPosCheckDiscount.getIncludeTaxScMask(), dBaseTotal, m_oScType, m_oTaxType, oScTaxInclusiveRateNoBreakdown);
					BigDecimal dBaseRate = oPosCheckItem.getInclusiveNoBreakdownBaseRate(m_oScType, m_oTaxType, oPosCheckDiscount);
					oFuncCheckItem.breakdownDiscountItemValue(oPosCheckDiscount, oCheckDiscountItem, dBaseRate, oScTaxInclusiveRateNoBreakdown);
				}
				
				oPosCheckItem.addValueToPreDisc(oCheckDiscountItem.getTotal());
			}
		}
		// Calculate Party Check Pre-Discount
		else {
			List<HashMap<String, BigDecimal>> oFuncCheckItemBases = new ArrayList<HashMap<String, BigDecimal>>();
			BigDecimal dItemsRemain = BigDecimal.ZERO;
			BigDecimal dDiscountBase = BigDecimal.ZERO;
			BigDecimal dDiscountAmount = BigDecimal.ZERO;
			BigDecimal dRoundDiscount = BigDecimal.ZERO;
			
			// Calculate the item base: item remaining total, item base total
			for(int i=0; i<oFuncCheckItemList.size(); i++) {
				HashMap<String, BigDecimal> oFuncCheckItemBase = new HashMap<String, BigDecimal>();
				BigDecimal dItemBase = BigDecimal.ZERO;
				BigDecimal dPreviousPreDiscountTotal = BigDecimal.ZERO;
				
				boolean bWithBreakdown = false;
				for(int j = 1; j <= 25; j++) {
					if(oFuncCheckItemList.get(i).getCheckItem().getChargeTax(j).equals(PosCheckItem.CHARGE_TAX_CHARGED_IN_ITEM_PRICE)) {
						bWithBreakdown = true;
						break;
					}
				}
				
				// item remain total
				BigDecimal dItemRemain = BigDecimal.ZERO;
				BigDecimal dRoundItemRemain = BigDecimal.ZERO;
				if (bWithBreakdown)
					dItemRemain = oFuncCheckItemList.get(i).getCheckItem().getTotal();
				else
					dItemRemain = oFuncCheckItemList.get(i).getCheckItem().getRoundTotal();
				dRoundItemRemain = oFuncCheckItemList.get(i).getCheckItem().getRoundTotal();
				
				if(!oFuncCheckItemList.get(i).getItemDiscountList().isEmpty()) {		//subtract the applied item's pre-discount
					for(int j=0; j<oFuncCheckItemList.get(i).getItemDiscountList().size(); j++) {
						if(oFuncCheckItemList.get(i).getItemDiscountList().get(j).isDeleted())
							continue;
						
						if(oFuncCheckItemList.get(i).getItemDiscountList().get(j).isPreDiscountType()) {
							dPreviousPreDiscountTotal = dPreviousPreDiscountTotal.add(oFuncCheckItemList.get(i).getItemDiscountList().get(j).getTotal());
							dItemRemain = dItemRemain.add(oFuncCheckItemList.get(i).getItemDiscountList().get(j).getTotal());	//-ve for discount value
							dRoundItemRemain = dRoundItemRemain.add(oFuncCheckItemList.get(i).getItemDiscountList().get(j).getRoundTotal());	//-ve for discount value
						}
					}
				}
				if(!oAppliedDiscountIndexes.isEmpty()) {		//subtract the applied party's pre-discount
					for(Integer iAppliedDiscountIndex: oAppliedDiscountIndexes) {
						if(oFuncCheckItemList.get(i).hasAppliedCheckDiscountByIndex(iAppliedDiscountIndex)) {
							dItemRemain = dItemRemain.add(oFuncCheckItemList.get(i).getCheckDiscountItemList(iAppliedDiscountIndex.intValue()).getTotal());	// -ve for discount value
							dRoundItemRemain = dRoundItemRemain.add(oFuncCheckItemList.get(i).getCheckDiscountItemList(iAppliedDiscountIndex.intValue()).getRoundTotal());	// -ve for discount value
							dPreviousPreDiscountTotal = dPreviousPreDiscountTotal.add(oFuncCheckItemList.get(i).getCheckDiscountItemList(iAppliedDiscountIndex.intValue()).getTotal());
						}
					}
				}
				
				if (AppGlobal.g_oFuncStation.get().getApplyDiscountRestriction() == 3) {
					if((oFuncCheckItemList.get(i).getCheckItem().getPreDisc().compareTo(BigDecimal.ZERO) != 0)||
							(oFuncCheckItemList.get(i).getCheckItem().getMidDisc().compareTo(BigDecimal.ZERO) != 0)||
							(oFuncCheckItemList.get(i).getCheckItem().getPostDisc().compareTo(BigDecimal.ZERO) != 0)) {
						dItemRemain = BigDecimal.ZERO;
						dRoundItemRemain = BigDecimal.ZERO;
					}
				}
				
				dItemsRemain = dItemsRemain.add(dItemRemain);
				
				// item base
				if(oPosCheckDiscount.isExcludePreviousDiscount())
					dItemBase = dItemBase.add(dItemRemain);
				else {
					if (bWithBreakdown)
						dItemBase = dItemBase.add(oFuncCheckItemList.get(i).getCheckItem().getTotal());
					else
						dItemBase = dItemBase.add(oFuncCheckItemList.get(i).getCheckItem().getRoundTotal());
					
					if (AppGlobal.g_oFuncStation.get().includePreviousSameLevelDiscount())
						dItemBase = dItemBase.add(dPreviousPreDiscountTotal);
				}
				
				if (AppGlobal.g_oFuncStation.get().getApplyDiscountRestriction() == 3) {
					if ((oFuncCheckItemList.get(i).getCheckItem().getPreDisc().compareTo(BigDecimal.ZERO) != 0)||
							(oFuncCheckItemList.get(i).getCheckItem().getMidDisc().compareTo(BigDecimal.ZERO) != 0)||
							(oFuncCheckItemList.get(i).getCheckItem().getPostDisc().compareTo(BigDecimal.ZERO) != 0))
						dItemBase = BigDecimal.ZERO;
				}
				
				oFuncCheckItemBase.put("remain", dItemRemain);
				oFuncCheckItemBase.put("roundRemain", dRoundItemRemain);
				oFuncCheckItemBase.put("base", dItemBase);
				oFuncCheckItemBases.add(oFuncCheckItemBase);
				
				if(oPosCheckDiscount.isFixAmountPerItemDiscountMethod()){
					BigDecimal dItemDiscount = oPosCheckDiscount.getFixAmount().multiply(oFuncCheckItemList.get(i).getCheckItem().getQty());
					if(dItemDiscount.signum() == -1){
						//dItemRemain is +ve, dItemDiscount is -ve, dItemDiscount need to be -ve
						if(dItemRemain.compareTo(dItemDiscount.negate()) < 0)
							dItemDiscount = dItemRemain.negate();
					}else{
						//dItemRemain is -ve, dItemDiscount is +ve, dItemDiscount need to be +ve
						if((dItemRemain.negate()).compareTo(dItemDiscount) < 0)
							dItemDiscount = dItemRemain.negate();
					}
					
					oFuncCheckItemBases.get(i).put("discount", dItemDiscount);
					dDiscountAmount = dDiscountAmount.add(dItemDiscount);
				}
			}
			
			if(!oPosCheckDiscount.isFixAmountPerItemDiscountMethod()){
				// Calculate the discount base
				for(HashMap<String, BigDecimal> oFuncCheckItemBase: oFuncCheckItemBases)
					dDiscountBase = dDiscountBase.add(oFuncCheckItemBase.get("base"));
				
				// Calculate the discount amount
				if(oPosCheckDiscount.isPercentageDiscountMethod())
					dDiscountAmount = dDiscountBase.multiply(oPosCheckDiscount.getRate());
				else {
					if(dDiscountBase.signum() != -1){
						//dDicountBase is +ve, fix amount is -ve, dDiscountAmount need to be -ve
						if(dDiscountBase.compareTo(oPosCheckDiscount.getFixAmount().negate()) >= 0)
							dDiscountAmount = oPosCheckDiscount.getFixAmount();
						else
							dDiscountAmount = dDiscountBase.negate();
					}else{
						//dDicountBase is -ve, fix amount is -ve, dDiscountAmount need to be +ve
						if(dDiscountBase.compareTo(oPosCheckDiscount.getFixAmount()) < 0)
							dDiscountAmount = oPosCheckDiscount.getFixAmount().negate();
						else
							dDiscountAmount = dDiscountBase.negate();
					}	
				}
				
				// Check whether remaining items total > discount amount
				if(!oPosCheckDiscount.isUsedForExtraCharge()) {
					if(dDiscountAmount.signum() != -1){
						if(dDiscountAmount.compareTo(dItemsRemain.negate()) > 0)
							dDiscountAmount = dItemsRemain.negate();
					}else{
						//dDiscountAmount is -ve, dItemRemain is +ve, discount need to be -ve
						if((dDiscountAmount.negate()).compareTo(dItemsRemain) > 0)
							dDiscountAmount = dItemsRemain.negate();
					}
				}
				
				//Calculate maximum discount amount
				if (oPosCheckDiscount.isUsedForDiscount())
					dDiscountAmount = this.getDiscountMaxAmount(oPosCheckDiscount, dDiscountAmount);
				
				// Calculate the round discount
				dRoundDiscount = AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(dDiscountAmount);
				
				// Backward calculate the discount to each applied item
				for(int i=0; i<oFuncCheckItemList.size(); i++) {
					BigDecimal dItemBase = oFuncCheckItemBases.get(i).get("base");
					BigDecimal dItemDiscount = BigDecimal.ZERO;
					if(dDiscountBase.compareTo(BigDecimal.ZERO) != 0)
						dItemDiscount = (dItemBase.multiply(dRoundDiscount)).divide(dDiscountBase, 10, RoundingMode.HALF_UP);
					//change to positive compare
					if(dItemDiscount.signum() == -1){
						//dItemDiscount is -ve, item remain is +ve, discount need to be -ve
						if((dItemDiscount.negate()).compareTo(oFuncCheckItemBases.get(i).get("remain")) > 0)
							dItemDiscount = (oFuncCheckItemBases.get(i).get("remain")).negate();
					}else{
						//dItemDiscount is +ve, item remain is -ve, discount need to be +ve
						if(dItemDiscount.compareTo(oFuncCheckItemBases.get(i).get("remain").negate()) > 0)
							dItemDiscount = (oFuncCheckItemBases.get(i).get("remain")).negate();
					}
					oFuncCheckItemBases.get(i).put("discount", dItemDiscount);
				}
			}else{
				// Fix amount check discount per item
				// Calculate the round discount
				dRoundDiscount = AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(dDiscountAmount);
			}
			
			// Calculate the difference
			BigDecimal dItemDiscTotal = BigDecimal.ZERO;
			for(int i=0; i<oFuncCheckItemList.size(); i++) 
				dItemDiscTotal = dItemDiscTotal.add(oFuncCheckItemBases.get(i).get("discount"));
			BigDecimal dDifference = dDiscountAmount.subtract(dItemDiscTotal);
			if(dDifference.compareTo(BigDecimal.ZERO) != 0) {
				for(int i=(oFuncCheckItemList.size() - 1); i>=0; i--) {
					BigDecimal dItemReamin = oFuncCheckItemBases.get(i).get("remain").subtract(oFuncCheckItemBases.get(i).get("discount"));
					if(dItemReamin.compareTo(new BigDecimal ("0.0")) != 0) {
						oFuncCheckItemBases.get(i).put("discount", oFuncCheckItemBases.get(i).get("discount").add(dDifference));
						break;
					}
				}
			}
			
			for(int i=0; i<oFuncCheckItemList.size(); i++){
				BigDecimal oPositiveDiscountTotal = BigDecimal.ZERO;
				if(oFuncCheckItemBases.get(i).get("discount").signum() == -1)
					oPositiveDiscountTotal = oFuncCheckItemBases.get(i).get("discount").negate();
				else
					oPositiveDiscountTotal = oFuncCheckItemBases.get(i).get("discount");
				
				int iDiscDecimal = AppGlobal.g_oFuncOutlet.get().getBusinessDay().getDiscDecimal();
				
				// get two extra decimal and do round off
				oPositiveDiscountTotal = oPositiveDiscountTotal.setScale(iDiscDecimal+2, RoundingMode.HALF_UP);
				
				// using the discount decimal and do round off again 
				BigDecimal oRoundedTotal = Util.RoundOff(oPositiveDiscountTotal, AppGlobal.g_oFuncOutlet.get().getDiscRoundDecimal());
				if(oFuncCheckItemBases.get(i).get("discount").signum() == -1)
					oRoundedTotal = oRoundedTotal.negate();
				oFuncCheckItemBases.get(i).put("round", oRoundedTotal);
			}
			
			// Set pos_check_discount
			BigDecimal dCheckDiscountTotal = BigDecimal.ZERO;
			for(int i=0; i<oFuncCheckItemList.size(); i++) {
				if (AppGlobal.g_oFuncStation.get().getApplyDiscountRestriction() == 3) {
					if ((oFuncCheckItemList.get(i).getCheckItem().getPreDisc().compareTo(BigDecimal.ZERO) != 0)||
							(oFuncCheckItemList.get(i).getCheckItem().getMidDisc().compareTo(BigDecimal.ZERO) != 0)||
							(oFuncCheckItemList.get(i).getCheckItem().getPostDisc().compareTo(BigDecimal.ZERO) != 0)){
						continue;
					}
				}
				dCheckDiscountTotal = dCheckDiscountTotal.add(oFuncCheckItemBases.get(i).get("discount"));
			}
			oPosCheckDiscount.setTotal(dCheckDiscountTotal);
			oPosCheckDiscount.setRoundTotal(AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(dCheckDiscountTotal));
			oPosCheckDiscount.setRoundAmount(oPosCheckDiscount.getRoundTotal().subtract(oPosCheckDiscount.getTotal()));
			
			// Calculate the round amount of sum of check discount item round total compare with final discount total
			BigDecimal dPositiveCheckDiscRoundTotal = oPosCheckDiscount.getRoundTotal().multiply(new BigDecimal("-1.0"));
			BigDecimal dPositiveCheckDiscountItemTotal = BigDecimal.ZERO;
			BigDecimal dCheckDiscountItemRoundAmt = BigDecimal.ZERO;
			for(int i=0; i<oFuncCheckItemBases.size(); i++)
				dPositiveCheckDiscountItemTotal = dPositiveCheckDiscountItemTotal.add(oFuncCheckItemBases.get(i).get("round").multiply(new BigDecimal("-1.0")));
			dCheckDiscountItemRoundAmt = dPositiveCheckDiscRoundTotal.subtract(dPositiveCheckDiscountItemTotal);
			//dCheckDisountItemRoundAmt always equals to zero, if-case below will not process ??? 
			if(dCheckDiscountItemRoundAmt.compareTo(BigDecimal.ZERO) != 0) {
				for(int i=0; i<oFuncCheckItemList.size(); i++) {
					BigDecimal dItemRemain = oFuncCheckItemBases.get(i).get("roundRemain");
					BigDecimal dNewDiscRoundTotal = (oFuncCheckItemBases.get(i).get("round").multiply(new BigDecimal("-1.0"))).add(dCheckDiscountItemRoundAmt);
					if(dItemRemain.signum() != -1){
						//dItemRemain is +ve , dNewDiscRountTotal is +ve
						if(dItemRemain.compareTo(dNewDiscRoundTotal) >= 0) {
							oFuncCheckItemBases.get(i).put("round", dNewDiscRoundTotal.multiply(new BigDecimal("-1.0")));
							dCheckDiscountItemRoundAmt = BigDecimal.ZERO;
							break;
						}else {
							oFuncCheckItemBases.get(i).put("round", dItemRemain.multiply(new BigDecimal("-1.0")));
							dCheckDiscountItemRoundAmt = dNewDiscRoundTotal.subtract(dItemRemain);
						}
					}else{
						//dItemRemain is -ve , dNewDiscRountTotal is -ve
						if(dItemRemain.compareTo(dNewDiscRoundTotal) < 0) {
							oFuncCheckItemBases.get(i).put("round", dNewDiscRoundTotal.multiply(new BigDecimal("-1.0")));
							dCheckDiscountItemRoundAmt = BigDecimal.ZERO;
							break;
						}else {
							oFuncCheckItemBases.get(i).put("round", dItemRemain.multiply(new BigDecimal("-1.0")));
							dCheckDiscountItemRoundAmt = dNewDiscRoundTotal.subtract(dItemRemain);
						}
					}
				}
				
				if (dCheckDiscountItemRoundAmt.compareTo(BigDecimal.ZERO) != 0 && oFuncCheckItemList.size() > 0) {
					BigDecimal dNewCheckDiscRoundTotal = oPosCheckDiscount.getRoundTotal().add(dCheckDiscountItemRoundAmt);
					oPosCheckDiscount.setRoundTotal(dNewCheckDiscRoundTotal);
				}
			}
			
			// Set pos_check_discount_item
			for(int i=0; i<oFuncCheckItemList.size(); i++) {
				PosCheckDiscountItem oPosCheckDiscountItem = oFuncCheckItemList.get(i).getCheckDiscountItemList(oPosCheckDiscount.getSeq());
				
				oPosCheckDiscountItem.setTotal(oFuncCheckItemBases.get(i).get("discount"));
				oPosCheckDiscountItem.setRoundTotal(oFuncCheckItemBases.get(i).get("round"));
				
				// Break down the tax and sc (for inclusive on break down item only)
				if(oFuncCheckItemList.get(i).getCheckItem().isScTaxInclusiveNoBreakdown()) {
					FuncCheckItem oTempFuncCheckItem = oFuncCheckItemList.get(i);
					PosCheckItem oTempPosCheckItem = oTempFuncCheckItem.getCheckItem();
					
					HashMap<String, BigDecimal[]> oScTaxInclusiveRateNoBreakdown = new HashMap<String, BigDecimal[]>();
					oScTaxInclusiveRateNoBreakdown.put("sc", new BigDecimal[AppGlobal.SC_COUNT]);
					oScTaxInclusiveRateNoBreakdown.put("tax", new BigDecimal[AppGlobal.TAX_COUNT]);
					dBaseTotal = oTempFuncCheckItem.calculateScTaxRateBaseOnDiscount(PosDiscountType.TYPE_PRE_DISCOUNT, oPosCheckDiscount.getIncludeTaxScMask(), dBaseTotal, m_oScType, m_oTaxType, oScTaxInclusiveRateNoBreakdown);
					
					BigDecimal dBaseRate = oTempPosCheckItem.getInclusiveNoBreakdownBaseRate(m_oScType, m_oTaxType, oPosCheckDiscount);
					oFuncCheckItemList.get(i).breakdownDiscountItemValue(oPosCheckDiscount, oPosCheckDiscountItem, dBaseRate, oScTaxInclusiveRateNoBreakdown);
				}
			}
		}
	}
	
	public void calcSC(FuncCheckItem oFuncCheckItem, List<Integer> oAppliedCheckPreDiscountList) {
		PosCheckItem oPosCheckItem = oFuncCheckItem.getCheckItem();
		BigDecimal dBaseTotalForInclusiveScNoBreakdown = BigDecimal.ZERO;
		BigDecimal dRateTotalForInclusiveScNoBreakdown = BigDecimal.ZERO;
		BigDecimal[] dRatesForInclusiveScNoBreakdown = new BigDecimal[6];	// Index from 1 to 5
		boolean bIsInclusiveNoBreakDown = oPosCheckItem.isScTaxInclusiveNoBreakdown();
		if(bIsInclusiveNoBreakDown)
			oPosCheckItem.calculateScTaxRateForInclusiveNoBreakdown(m_oScType, m_oTaxType);
		
		// Process service charge
        for(int i=1; i<=5; i++){
        	oPosCheckItem.setSc(i, BigDecimal.ZERO);
        	dRatesForInclusiveScNoBreakdown[i] = BigDecimal.ZERO;
        	
        	// Clear up inclusive ref value
        	String sScInclTaxKey = String.format("incl_sc_ref%d", i);
        	if (oFuncCheckItem.isTaxScRefExistBySectionVariable(sScInclTaxKey))
				oFuncCheckItem.updateTaxScRefValue(PosCheckTaxScRef.BY_ITEM, sScInclTaxKey, StringLib.BigDecimalToString(BigDecimal.ZERO, 10));
        	
        	// Check if the item is charged by SC
			if(oPosCheckItem.getChargeSc(i).equals(PosCheckItem.CHARGE_SC_YES) || oPosCheckItem.getChargeSc(i).equals(PosCheckItem.CHARGE_SC_CHARGED_IN_ITEM_PRICE)){
				// Re-calculate the service charge
				BigDecimal dBaseTotal = oPosCheckItem.getTotal();
				
				// Include the pre-discount or not
				if(m_oScType.get(i-1).isIncludePreDisc()) {
					dBaseTotal = dBaseTotal.add(oPosCheckItem.getPreDisc());	// item's preDisc value is -ve value
					
					if(!oAppliedCheckPreDiscountList.isEmpty()) {
						for(Integer iCheckDiscountIndex: oAppliedCheckPreDiscountList) {
							if(oFuncCheckItem.hasAppliedCheckDiscountByIndex(iCheckDiscountIndex))
								dBaseTotal = dBaseTotal.add(oFuncCheckItem.getCheckDiscountItemList(iCheckDiscountIndex.intValue()).getTotal());
						}
					}
				}
			
				// Include the previous S.C./Tax
				String sTaxScMask = StringLib.fillZero(m_oScType.get((i-1)).getIncludeTaxScMask(), 30);
				for(int j=1; j<i; j++){
					if(sTaxScMask.substring((j-1), j).equals("1")){
						dBaseTotal = dBaseTotal.add(oPosCheckItem.getSc(j));
					}
				}
				
				oPosCheckItem.setSc(i, dBaseTotal.multiply(m_oScType.get(i-1).getRate()));
			}else if (oPosCheckItem.getChargeSc(i).equals(PosCheckItem.CHARGE_SC_INCLUSIVE_IN_ITEM_PRICE_WITHOUT_BREAKDOWN)) {
				// Re-calculate the tax
				BigDecimal dBaseTotal = oPosCheckItem.getTotal();
				BigDecimal dRate = m_oScType.get(i-1).getRate();
				
				// Include the pre-discount or not
				if(m_oScType.get(i-1).isIncludePreDisc()) {
					dBaseTotal = dBaseTotal.add(oPosCheckItem.getPreDisc());	// preDisc value is -ve value (Item discount)
					
					if(!oAppliedCheckPreDiscountList.isEmpty()) {	// (Check discount)
						for(Integer iCheckDiscountIndex: oAppliedCheckPreDiscountList) {
							if(oFuncCheckItem.hasAppliedCheckDiscountByIndex(iCheckDiscountIndex))
								dBaseTotal = dBaseTotal.add(oFuncCheckItem.getCheckDiscountItemList(iCheckDiscountIndex.intValue()).getTotal());
						}
					}
				}
				
				// Include the previous S.C./Tax
				String sTaxScMask = StringLib.fillZero(m_oScType.get(i-1).getIncludeTaxScMask(), 30);
				for(int j=1; j<i; j++){
					if (sTaxScMask.substring((j-1), j).equals("1")) {
						if(oPosCheckItem.getChargeSc(j).equals(PosCheckItem.CHARGE_SC_YES)){
							dBaseTotal = dBaseTotal.add(oPosCheckItem.getSc(j));
						}else
							dRate = dRate.add(m_oScType.get(j-1).getRateForInclusiveNoBreakdown().multiply(m_oScType.get(i-1).getRate()));
					}
				}
				
				if (dBaseTotalForInclusiveScNoBreakdown.compareTo(BigDecimal.ZERO) == 0) {
					// Assign the base total to variable for inclusive sc calculation later
					dBaseTotalForInclusiveScNoBreakdown = dBaseTotalForInclusiveScNoBreakdown.add(dBaseTotal);
				}
				dRateTotalForInclusiveScNoBreakdown = dRateTotalForInclusiveScNoBreakdown.add(dRate);
				dRatesForInclusiveScNoBreakdown[i] = dRatesForInclusiveScNoBreakdown[i].add(dRate);
			}
		}
		
		if (dBaseTotalForInclusiveScNoBreakdown.compareTo(BigDecimal.ZERO) != 0) {
			if(bIsInclusiveNoBreakDown)
				dRateTotalForInclusiveScNoBreakdown = oPosCheckItem.getInclusiveNoBreakdownBaseRate(m_oScType, m_oTaxType, null);
			for(int i=1; i<=5; i++){
				if (oPosCheckItem.getChargeSc(i).equals(PosCheckItem.CHARGE_SC_INCLUSIVE_IN_ITEM_PRICE_WITHOUT_BREAKDOWN)) {
					// Calculate the item total exclude the inclusive tax
					BigDecimal dItemTotalExcludeInclusiveSc = dBaseTotalForInclusiveScNoBreakdown.divide(dRateTotalForInclusiveScNoBreakdown.add(new BigDecimal("1.0")), 10, RoundingMode.HALF_UP);
					
					// Calculate the inclusive tax
					BigDecimal dInclusiveScRef = dItemTotalExcludeInclusiveSc.multiply(dRatesForInclusiveScNoBreakdown[i]);
					
					// add tax sc ref record
					String sScInclTaxKey = String.format("incl_sc_ref%d", i);
					if (oFuncCheckItem.isTaxScRefExistBySectionVariable(sScInclTaxKey))
						oFuncCheckItem.updateTaxScRefValue(PosCheckTaxScRef.BY_ITEM, sScInclTaxKey, StringLib.BigDecimalToString(dInclusiveScRef, 10));
					else
						oFuncCheckItem.addTaxScRef(PosCheckTaxScRef.BY_ITEM, sScInclTaxKey, StringLib.BigDecimalToString(dInclusiveScRef, 10));
				}
			}
		}
	}
	
	public void calcMidDiscount(String sType, PosCheckDiscount oPosCheckDiscount, List<FuncCheckItem> oFuncCheckItemList, HashMap<String, List<Integer>> oAppliedPartyDiscountIndex) {
		BigDecimal dBaseTotal = BigDecimal.ZERO;
		PosCheckItem oPosCheckItem = null;
		
		if(sType.equals("item")) {
			// Item Mid-Discount
			for(FuncCheckItem oFuncCheckItem:oFuncCheckItemList) {
				if(oFuncCheckItem.isSplitRevenueParent()) 
					return;
				oPosCheckItem = oFuncCheckItem.getCheckItem();
				boolean bWithBreakdown = false;
				for (int i = 1; i <= 25; i++) {
					if (oPosCheckItem.getChargeTax(i).equals(PosCheckItem.CHARGE_TAX_CHARGED_IN_ITEM_PRICE)) {
						bWithBreakdown = true;
						break;
					}
				}
				if (bWithBreakdown)
					dBaseTotal = dBaseTotal.add(oPosCheckItem.getTotal());
				else
					dBaseTotal = dBaseTotal.add(oPosCheckItem.getRoundTotal());
				
				// Include the previous pre-discount
				if(oPosCheckDiscount.isIncludePreDisc() == true) {
					dBaseTotal = dBaseTotal.add(oPosCheckItem.getPreDisc()); // preDisc value is -ve value
					
					if(oAppliedPartyDiscountIndex.containsKey("preDisc") && !oAppliedPartyDiscountIndex.get("preDisc").isEmpty()) {
						for(Integer iCheckDiscountIndex: oAppliedPartyDiscountIndex.get("preDisc")) 
							dBaseTotal = dBaseTotal.add(oFuncCheckItem.getCheckDiscountItemList(iCheckDiscountIndex.intValue()).getTotal());
					}
				}
				
				// Include the previous S.C./Tax
				String sScMask = StringLib.fillZero(oPosCheckDiscount.getIncludeTaxScMask(), 30);
				for(int j=1; j<=5; j++){
					if(sScMask.substring(j-1, j).equals("1")){
						dBaseTotal = dBaseTotal.add(oPosCheckItem.getSc(j));
					}
				}
			}
			
			BigDecimal dDiscountTotal = BigDecimal.ZERO;
			
			if(oPosCheckDiscount.isPercentageDiscountMethod()){
				dDiscountTotal = dBaseTotal.multiply(oPosCheckDiscount.getRate());
			}else {
				//define total is negative or not. 
				if(dBaseTotal.signum() != -1){
					//dBaseTotal is +ve, fix amount is -ve 
					if(dBaseTotal.compareTo(oPosCheckDiscount.getFixAmount().negate()) >= 0) 
						dDiscountTotal = oPosCheckDiscount.getFixAmount();
					else
						dDiscountTotal = dBaseTotal.negate();
				}else{
					//dBaseTotal is -ve, fix amount is -ve
					if(dBaseTotal.compareTo(oPosCheckDiscount.getFixAmount()) < 0)
						dDiscountTotal = oPosCheckDiscount.getFixAmount().negate();
					else
						dDiscountTotal = dBaseTotal.negate();
				}
			}
			
			//Calculate maximum discount amount
			if (oPosCheckDiscount.isUsedForDiscount())
				dDiscountTotal = this.getDiscountMaxAmount(oPosCheckDiscount, dDiscountTotal);

			
			oPosCheckDiscount.setTotal(dDiscountTotal);
			
			// Calculate the round amount
			BigDecimal dDiscRoundTotal = AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(oPosCheckDiscount.getTotal());
			oPosCheckDiscount.setRoundTotal(dDiscRoundTotal);
			oPosCheckDiscount.setRoundAmount(oPosCheckDiscount.getRoundTotal().subtract(oPosCheckDiscount.getTotal()));
			
			// Set pos_check_discount_item value
			PosCheckDiscountItem oCheckDiscountItem = oPosCheckDiscount.getCheckDiscountItemList().get(0);
			oCheckDiscountItem.setTotal(oPosCheckDiscount.getTotal());
			oCheckDiscountItem.setRoundTotal(oPosCheckDiscount.getRoundTotal());
			
			oFuncCheckItemList.get(0).getCheckItem().addValueToMidDisc(oPosCheckDiscount.getTotal());
			
		}
		// Calculate Party Check Mid-Discount
		else {
			List<HashMap<String, BigDecimal>> oFuncCheckItemBases = new ArrayList<HashMap<String, BigDecimal>>();
			BigDecimal dItemsRemain = BigDecimal.ZERO;
			BigDecimal dDiscountBase = BigDecimal.ZERO;
			BigDecimal dDiscountAmount = BigDecimal.ZERO;
			BigDecimal dRoundDiscount = BigDecimal.ZERO;
			
			// Calculate the item base: item remaining total, item base total
			for(int i=0; i<oFuncCheckItemList.size(); i++) {
				HashMap<String, BigDecimal> oFuncCheckItemBase = new HashMap<String, BigDecimal>();
				BigDecimal dItemBase = BigDecimal.ZERO;
				BigDecimal dPreviousPreDiscountTotal = BigDecimal.ZERO;
				BigDecimal dPreviousMidDiscountTotal = BigDecimal.ZERO;
				String sScMask = StringLib.fillZero(oPosCheckDiscount.getIncludeTaxScMask(), 30);
				
				// item remain total
				boolean bWithBreakdown = false;
				for (int j = 1; j <= 25; j++) {
					if (oFuncCheckItemList.get(i).getCheckItem().getChargeTax(j).equals(PosCheckItem.CHARGE_TAX_CHARGED_IN_ITEM_PRICE)) {
						bWithBreakdown = true;
						break;
					}
				}
				BigDecimal dItemRemain = BigDecimal.ZERO;
				BigDecimal dRoundItemRemain = BigDecimal.ZERO;
				if (bWithBreakdown)
					dItemRemain = oFuncCheckItemList.get(i).getCheckItem().getTotal();
				else
					dItemRemain = oFuncCheckItemList.get(i).getCheckItem().getRoundTotal();
				dRoundItemRemain = oFuncCheckItemList.get(i).getCheckItem().getRoundTotal();
				
				for(int j=1; j<=5; j++){	// add SC charge to remin if it is include SC
					if(sScMask.substring(j-1, j).equals("1")){
						dItemRemain = dItemRemain.add(oFuncCheckItemList.get(i).getCheckItem().getSc(j));
						dRoundItemRemain = dRoundItemRemain.add(oFuncCheckItemList.get(i).getCheckItem().getSc(j));
					}
				}
				if(!oFuncCheckItemList.get(i).getItemDiscountList().isEmpty()) {		//subtract the previous applied item's pre-discount and mid-discount
					for(int j=0; j<oFuncCheckItemList.get(i).getItemDiscountList().size(); j++) {
						if(oFuncCheckItemList.get(i).getItemDiscountList().get(j).isDeleted())
							continue;
						
						if(oFuncCheckItemList.get(i).getItemDiscountList().get(j).isPreDiscountType()) {
							dPreviousPreDiscountTotal = dPreviousPreDiscountTotal.add(oFuncCheckItemList.get(i).getItemDiscountList().get(j).getTotal());
							dRoundItemRemain = dRoundItemRemain.add(oFuncCheckItemList.get(i).getItemDiscountList().get(j).getRoundTotal());	//-ve for discount value
						}
						if(oFuncCheckItemList.get(i).getItemDiscountList().get(j).isMidDiscountType()) {
							dPreviousMidDiscountTotal = dPreviousMidDiscountTotal.add(oFuncCheckItemList.get(i).getItemDiscountList().get(j).getTotal());
							dRoundItemRemain = dRoundItemRemain.add(oFuncCheckItemList.get(i).getItemDiscountList().get(j).getRoundTotal());	//-ve for discount value
						}
					}
				}
				if(!oAppliedPartyDiscountIndex.get("preDisc").isEmpty()) {		//subtract the previous applied party's pre-discount
					for(Integer iAppliedDiscountIndex: oAppliedPartyDiscountIndex.get("preDisc")) {
						if(oFuncCheckItemList.get(i).hasAppliedCheckDiscountByIndex(iAppliedDiscountIndex)) {
							dPreviousPreDiscountTotal = dPreviousPreDiscountTotal.add(oFuncCheckItemList.get(i).getCheckDiscountItemList(iAppliedDiscountIndex.intValue()).getTotal());
							dRoundItemRemain = dRoundItemRemain.add(oFuncCheckItemList.get(i).getCheckDiscountItemList(iAppliedDiscountIndex.intValue()).getRoundTotal());	//-ve for discount value
						}
					}
				}
				if(!oAppliedPartyDiscountIndex.get("midDisc").isEmpty()) {		//subtract the applied party's mid-discount
					for(Integer iAppliedDiscountIndex: oAppliedPartyDiscountIndex.get("midDisc")) {
						if(oFuncCheckItemList.get(i).hasAppliedCheckDiscountByIndex(iAppliedDiscountIndex)) {
							dPreviousMidDiscountTotal = dPreviousMidDiscountTotal.add(oFuncCheckItemList.get(i).getCheckDiscountItemList(iAppliedDiscountIndex.intValue()).getTotal());
							dRoundItemRemain = dRoundItemRemain.add(oFuncCheckItemList.get(i).getCheckDiscountItemList(iAppliedDiscountIndex.intValue()).getRoundTotal());	//-ve for discount value
						}
					}
				}
				
				dItemRemain = dItemRemain.add(dPreviousPreDiscountTotal);
				dItemRemain = dItemRemain.add(dPreviousMidDiscountTotal);
				if (AppGlobal.g_oFuncStation.get().getApplyDiscountRestriction() == 3) {
					if ((oFuncCheckItemList.get(i).getCheckItem().getPreDisc().compareTo(BigDecimal.ZERO) != 0)||
							(oFuncCheckItemList.get(i).getCheckItem().getMidDisc().compareTo(BigDecimal.ZERO) != 0)||
							(oFuncCheckItemList.get(i).getCheckItem().getPostDisc().compareTo(BigDecimal.ZERO) != 0)) {
						dItemRemain = BigDecimal.ZERO;
						dRoundItemRemain = BigDecimal.ZERO;
					}
				}
				dItemsRemain = dItemsRemain.add(dItemRemain);
				
				// item base
				if(oPosCheckDiscount.isExcludePreviousDiscount())
					dItemBase = dItemBase.add(dItemRemain);
				else {
					if (bWithBreakdown)
						dItemBase = dItemBase.add(oFuncCheckItemList.get(i).getCheckItem().getTotal());
					else
					dItemBase = dItemBase.add(oFuncCheckItemList.get(i).getCheckItem().getRoundTotal());
					
					if(oPosCheckDiscount.isIncludePreDisc() == true) 
						dItemBase = dItemBase.add(dPreviousPreDiscountTotal);
					
					if (AppGlobal.g_oFuncStation.get().includePreviousSameLevelDiscount())
						dItemBase = dItemBase.add(dPreviousMidDiscountTotal);
				}
				
				// Include the previous S.C./Tax
				for(int j=1; j<=5; j++){
					if(sScMask.substring(j-1, j).equals("1")){
						dItemBase = dItemBase.add(oFuncCheckItemList.get(i).getCheckItem().getSc(j));
					}
				}
				
				if (AppGlobal.g_oFuncStation.get().getApplyDiscountRestriction() == 3) {
					if ((oFuncCheckItemList.get(i).getCheckItem().getPreDisc().compareTo(BigDecimal.ZERO) != 0)||
							(oFuncCheckItemList.get(i).getCheckItem().getMidDisc().compareTo(BigDecimal.ZERO) != 0)||
							(oFuncCheckItemList.get(i).getCheckItem().getPostDisc().compareTo(BigDecimal.ZERO) != 0))
						dItemBase = BigDecimal.ZERO;
				}
				oFuncCheckItemBase.put("remain", dItemRemain);
				oFuncCheckItemBase.put("roundRemain", dRoundItemRemain);
				oFuncCheckItemBase.put("base", dItemBase);
				oFuncCheckItemBases.add(oFuncCheckItemBase);
				
				if(oPosCheckDiscount.isFixAmountPerItemDiscountMethod()){
					BigDecimal dItemDiscount = oPosCheckDiscount.getFixAmount().multiply(oFuncCheckItemList.get(i).getCheckItem().getQty());
					if(dItemDiscount.signum() == -1){
						//dItemRemain is +ve, dItemDiscount is -ve
						if(dItemRemain.compareTo(dItemDiscount.negate()) < 0)
							dItemDiscount = dItemRemain.negate();
					}else{
						//dItemRemain is -ve, dItemDiscount is +ve
						if((dItemRemain.negate()).compareTo(dItemDiscount) < 0)
							dItemDiscount = dItemRemain.negate();
					}
					
					oFuncCheckItemBases.get(i).put("discount", dItemDiscount);
					dDiscountAmount = dDiscountAmount.add(dItemDiscount);
				}
			}
			
			if(!oPosCheckDiscount.isFixAmountPerItemDiscountMethod()){
				// Calculate the discount base
				for(HashMap<String, BigDecimal> oFuncCheckItemBase: oFuncCheckItemBases)
					dDiscountBase = dDiscountBase.add(oFuncCheckItemBase.get("base"));
				
				// Calculate the discount amount
				if(oPosCheckDiscount.isPercentageDiscountMethod())
					dDiscountAmount = dDiscountBase.multiply(oPosCheckDiscount.getRate());
				else {
					//define dDiscountBase is negative or not. 
					if(dDiscountBase.signum() != -1){
						//dDicountBase is +ve, fix amount is -ve
						if(dDiscountBase.compareTo(oPosCheckDiscount.getFixAmount().negate()) >= 0)
							dDiscountAmount = oPosCheckDiscount.getFixAmount();
						else
							dDiscountAmount = dDiscountBase.negate();
					}else{
						//dDicountBase is -ve, fix amount is -ve
						if(dDiscountBase.compareTo(oPosCheckDiscount.getFixAmount()) < 0)
							dDiscountAmount = oPosCheckDiscount.getFixAmount().negate();
						else
							dDiscountAmount = dDiscountBase.negate();
					}	
				}
				
				// Check whether remaining items total > discount amount
				if(!oPosCheckDiscount.isUsedForExtraCharge()) {
					if(dDiscountAmount.signum() != -1){
						if(dDiscountAmount.compareTo(dItemsRemain.negate()) > 0)
							dDiscountAmount = dItemsRemain.negate();
					}else{
						//dDiscountAmount is -ve, dItemRemain is +ve, discount need to be -ve
						if((dDiscountAmount.negate()).compareTo(dItemsRemain) > 0)
							dDiscountAmount = dItemsRemain.negate();
					}
				}
				
				//Calculate maximum discount amount
				if (oPosCheckDiscount.isUsedForDiscount())
					dDiscountAmount = this.getDiscountMaxAmount(oPosCheckDiscount, dDiscountAmount);
				
				// Calculate the round discount
				//default negative, do round with absolute value
				dRoundDiscount = AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(dDiscountAmount);
				
				// Backward calculate the discount to each applied item
				for(int i=0; i<oFuncCheckItemList.size(); i++) {
					BigDecimal dItemBase = oFuncCheckItemBases.get(i).get("base");
					BigDecimal dItemDiscount = BigDecimal.ZERO;
					if(dDiscountBase.compareTo(BigDecimal.ZERO) != 0)
						dItemDiscount = (dItemBase.multiply(dRoundDiscount)).divide(dDiscountBase, 10, RoundingMode.HALF_UP);
					
					if(dItemDiscount.signum() == -1){
						//dItemDiscount is -ve, item remain is +ve
						if((dItemDiscount.negate()).compareTo(oFuncCheckItemBases.get(i).get("remain")) > 0)
							dItemDiscount = (oFuncCheckItemBases.get(i).get("remain")).negate();
					}else{
						//dItemDiscount is +ve, item remain is -ve
						if(dItemDiscount.compareTo(oFuncCheckItemBases.get(i).get("remain").negate()) > 0)
							dItemDiscount = (oFuncCheckItemBases.get(i).get("remain")).negate();
					}
					
					oFuncCheckItemBases.get(i).put("discount", dItemDiscount);
				}
			}else{
				// Fix amount check discount per item
				// Calculate the round discount
				dRoundDiscount = AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(dDiscountAmount);
			}
			
			// Calculate the difference
			BigDecimal dItemDiscTotal = BigDecimal.ZERO;
			for(int i=0; i<oFuncCheckItemList.size(); i++) 
				dItemDiscTotal = dItemDiscTotal.add(oFuncCheckItemBases.get(i).get("discount"));
			BigDecimal dDifference = dDiscountAmount.subtract(dItemDiscTotal);
			if(dDifference.compareTo(BigDecimal.ZERO) != 0) {
				for(int i=(oFuncCheckItemList.size() - 1); i>=0; i--) {
					BigDecimal dItemReamin = oFuncCheckItemBases.get(i).get("remain").subtract(oFuncCheckItemBases.get(i).get("discount"));
					if(dItemReamin.compareTo(new BigDecimal ("0.0")) != 0) {
						oFuncCheckItemBases.get(i).put("discount", oFuncCheckItemBases.get(i).get("discount").add(dDifference));
						break;
					}
				}
			}
			
			for(int i=0; i<oFuncCheckItemList.size(); i++){
				BigDecimal oPositiveDiscountTotal = BigDecimal.ZERO;
				if(oFuncCheckItemBases.get(i).get("discount").signum() == -1)
					oPositiveDiscountTotal = oFuncCheckItemBases.get(i).get("discount").negate();
				else
					oPositiveDiscountTotal = oFuncCheckItemBases.get(i).get("discount");
				
				int iDiscDecimal = AppGlobal.g_oFuncOutlet.get().getBusinessDay().getDiscDecimal();
				
				// get two extra decimal and do round off
				oPositiveDiscountTotal = oPositiveDiscountTotal.setScale(iDiscDecimal+2, RoundingMode.HALF_UP);
				
				// using the discount decimal and do round off again 
				BigDecimal oRoundedTotal = Util.RoundOff(oPositiveDiscountTotal, AppGlobal.g_oFuncOutlet.get().getDiscRoundDecimal());
				if(oFuncCheckItemBases.get(i).get("discount").signum() == -1)
					oRoundedTotal = oRoundedTotal.negate();
				oFuncCheckItemBases.get(i).put("round", oRoundedTotal);
			}
			
			// Set pos_check_discount
			BigDecimal dCheckDiscountTotal = BigDecimal.ZERO;
			for(int i=0; i<oFuncCheckItemList.size(); i++) {
				if (AppGlobal.g_oFuncStation.get().getApplyDiscountRestriction() == 3) {
					if ((oFuncCheckItemList.get(i).getCheckItem().getPreDisc().compareTo(BigDecimal.ZERO) != 0)||
							(oFuncCheckItemList.get(i).getCheckItem().getMidDisc().compareTo(BigDecimal.ZERO) != 0)||
							(oFuncCheckItemList.get(i).getCheckItem().getPostDisc().compareTo(BigDecimal.ZERO) != 0))
						continue;
				}
				dCheckDiscountTotal = dCheckDiscountTotal.add(oFuncCheckItemBases.get(i).get("discount"));
			}
			oPosCheckDiscount.setTotal(dCheckDiscountTotal);
			oPosCheckDiscount.setRoundTotal(AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(dCheckDiscountTotal));
			oPosCheckDiscount.setRoundAmount(oPosCheckDiscount.getRoundTotal().subtract(oPosCheckDiscount.getTotal()));
			
			// Calculate the round amount of sum of check discount item round total compare with final discount total
			BigDecimal dPositiveCheckDiscRoundTotal = oPosCheckDiscount.getRoundTotal().multiply(new BigDecimal("-1.0"));
			BigDecimal dPositiveCheckDiscountItemTotal = BigDecimal.ZERO;
			BigDecimal dCheckDiscountItemRoundAmt = BigDecimal.ZERO;
			for(int i=0; i<oFuncCheckItemBases.size(); i++)
				dPositiveCheckDiscountItemTotal = dPositiveCheckDiscountItemTotal.add(oFuncCheckItemBases.get(i).get("round").multiply(new BigDecimal("-1.0")));
			dCheckDiscountItemRoundAmt = dPositiveCheckDiscRoundTotal.subtract(dPositiveCheckDiscountItemTotal);
			//dCheckDisountItemRoundAmt always equals to zero, if-case below will not process ??? 
			if(dCheckDiscountItemRoundAmt.compareTo(BigDecimal.ZERO) != 0) {
				for(int i=0; i<oFuncCheckItemList.size(); i++) {
					BigDecimal dItemRemain = oFuncCheckItemBases.get(i).get("roundRemain");
					BigDecimal dNewDiscRoundTotal = (oFuncCheckItemBases.get(i).get("round").multiply(new BigDecimal("-1.0"))).add(dCheckDiscountItemRoundAmt);
					if(dItemRemain.signum() != -1){
						//dItemRemain is +ve , dNewDiscRountTotal is +ve
						if(dItemRemain.compareTo(dNewDiscRoundTotal) >= 0) {
							oFuncCheckItemBases.get(i).put("round", dNewDiscRoundTotal.multiply(new BigDecimal("-1.0")));
							dCheckDiscountItemRoundAmt = BigDecimal.ZERO;
							break;
						}else {
							oFuncCheckItemBases.get(i).put("round", dItemRemain.multiply(new BigDecimal("-1.0")));
							dCheckDiscountItemRoundAmt = dNewDiscRoundTotal.subtract(dItemRemain);
						}
					}else{
						//dItemRemain is -ve , dNewDiscRountTotal is -ve
						if(dItemRemain.compareTo(dNewDiscRoundTotal) < 0) {
							oFuncCheckItemBases.get(i).put("round", dNewDiscRoundTotal.multiply(new BigDecimal("-1.0")));
							dCheckDiscountItemRoundAmt = BigDecimal.ZERO;
							break;
						}else {
							oFuncCheckItemBases.get(i).put("round", dItemRemain.multiply(new BigDecimal("-1.0")));
							dCheckDiscountItemRoundAmt = dNewDiscRoundTotal.subtract(dItemRemain);
						}
					}
				}
				
				if (dCheckDiscountItemRoundAmt.compareTo(BigDecimal.ZERO) != 0 && oFuncCheckItemList.size() > 0) {
					BigDecimal dNewCheckDiscRoundTotal = oPosCheckDiscount.getRoundTotal().add(dCheckDiscountItemRoundAmt);
					oPosCheckDiscount.setRoundTotal(dNewCheckDiscRoundTotal);
				}
			}
			
			// Set pos_check_discount_item
			for(int i=0; i<oFuncCheckItemList.size(); i++) {
				PosCheckDiscountItem oPosCheckDiscountItem = oFuncCheckItemList.get(i).getCheckDiscountItemList(oPosCheckDiscount.getSeq());
				oPosCheckDiscountItem.setTotal(oFuncCheckItemBases.get(i).get("discount"));
				oPosCheckDiscountItem.setRoundTotal(oFuncCheckItemBases.get(i).get("round"));
			}
		}
	}
	
	public void calcTax(FuncCheckItem oFuncCheckItem, HashMap<String, List<Integer>> oAppliedDiscountIndexes) {
		PosCheckItem oPosCheckItem = oFuncCheckItem.getCheckItem();
		BigDecimal dBaseTotalForInclusiveTaxNoBreakdown = BigDecimal.ZERO;
		BigDecimal dRateTotalForInclusiveTaxNoBreakdown = BigDecimal.ZERO;
		BigDecimal[] dRatesForInclusiveTaxNoBreakdown = new BigDecimal[26];	// Index from 1 to 25
		boolean bIsInclusiveNoBreakDown = oPosCheckItem.isScTaxInclusiveNoBreakdown();
		if(bIsInclusiveNoBreakDown)
			oPosCheckItem.calculateScTaxRateForInclusiveNoBreakdown(m_oScType, m_oTaxType);
		
		for(int i=1; i<=25; i++){
			oPosCheckItem.setTax(i, BigDecimal.ZERO);
			if(i <= 4)
				oPosCheckItem.setInclusiveTaxRef(i, BigDecimal.ZERO);
			dRatesForInclusiveTaxNoBreakdown[i] = BigDecimal.ZERO;
			
			// Clear up inclusive ref value
			String sInclTaxKey = String.format("incl_tax_ref%d", i);
			if (oFuncCheckItem.isTaxScRefExistBySectionVariable(sInclTaxKey))
				oFuncCheckItem.updateTaxScRefValue(PosCheckTaxScRef.BY_ITEM, sInclTaxKey, StringLib.BigDecimalToString(BigDecimal.ZERO, 10));
			
			for (int j = 1; j <= 5; j++) {
				String sScInclTaxKey = String.format("sc%d_incl_tax%d", j, i);
				if (oFuncCheckItem.isTaxScRefExistBySectionVariable(sScInclTaxKey))
					oFuncCheckItem.updateTaxScRefValue(PosCheckTaxScRef.BY_ITEM, sScInclTaxKey, "0");
			}
			// Check if the item is charged by Tax
			if(oPosCheckItem.getChargeTax(i).equals(PosCheckItem.CHARGE_TAX_YES) || oPosCheckItem.getChargeTax(i).equals(PosCheckItem.CHARGE_TAX_CHARGED_IN_ITEM_PRICE)){
				// Re-calculate the tax
				BigDecimal dBaseTotal = oPosCheckItem.getTotal();
				
				// Include the pre-discount and mid-discount or not
				if(m_oTaxType.get(i-1).isIncludePreDisc()) {
					dBaseTotal = dBaseTotal.add(oPosCheckItem.getPreDisc());	// item's preDisc value is -ve value
					
					if(oAppliedDiscountIndexes.containsKey("preDisc") && !oAppliedDiscountIndexes.get("preDisc").isEmpty()) {
						for(Integer iCheckDiscountIndex: oAppliedDiscountIndexes.get("preDisc")) {
							if(oFuncCheckItem.hasAppliedCheckDiscountByIndex(iCheckDiscountIndex))
								dBaseTotal = dBaseTotal.add(oFuncCheckItem.getCheckDiscountItemList(iCheckDiscountIndex.intValue()).getTotal());
						}
					}
				}
				if(m_oTaxType.get(i-1).isIncludeMidDisc()) {
					dBaseTotal = dBaseTotal.add(oPosCheckItem.getMidDisc());	// midDisc value is -ve value
					
					if(oAppliedDiscountIndexes.containsKey("midDisc") && !oAppliedDiscountIndexes.get("midDisc").isEmpty()) {
						for(Integer iCheckDiscountIndex: oAppliedDiscountIndexes.get("midDisc")) {
							if(oFuncCheckItem.hasAppliedCheckDiscountByIndex(iCheckDiscountIndex))
								dBaseTotal = dBaseTotal.add(oFuncCheckItem.getCheckDiscountItemList(iCheckDiscountIndex.intValue()).getTotal());
						}
					}
				}
				
				// Include the previous S.C./Tax
				String sTaxScMask = StringLib.fillZero(m_oTaxType.get(i-1).getIncludeTaxScMask(), 30);
				for(int j=1; j<=5; j++){
					if(sTaxScMask.substring((j-1), j).equals("1")){
						dBaseTotal = dBaseTotal.add(oPosCheckItem.getSc(j));
					}
				}
				for(int j=1; j<i; j++){
					if(sTaxScMask.substring(4+j, 4+j+1).equals("1")){
						dBaseTotal = dBaseTotal.add(oPosCheckItem.getTax(j));
					}
				}
				
				// check whether it is base less than 0
//				if(oPosCheckItem.getTotal().compareTo(BigDecimal.ZERO) > 0 && dBaseTotal.compareTo(BigDecimal.ZERO) < 0)
//					dBaseTotal = BigDecimal.ZERO;
				
				oPosCheckItem.setTax(i, dBaseTotal.multiply(m_oTaxType.get(i-1).getRate()));
			} else if (oPosCheckItem.getChargeTax(i).equals(PosCheckItem.CHARGE_TAX_INCLUSIVE_IN_ITEM_PRICE_WITHOUT_BREAKDOWN)) {
				// Re-calculate the tax
				BigDecimal dBaseTotal = oPosCheckItem.getTotal();
				BigDecimal dRate = m_oTaxType.get(i-1).getRate();

				// Include the pre-discount and mid-discount or not
				if(m_oTaxType.get(i-1).isIncludePreDisc()) {
					dBaseTotal = dBaseTotal.add(oPosCheckItem.getPreDisc());	// preDisc value is -ve value
					
					if(oAppliedDiscountIndexes.containsKey("preDisc") && !oAppliedDiscountIndexes.get("preDisc").isEmpty()) {
						for(Integer iCheckDiscountIndex: oAppliedDiscountIndexes.get("preDisc")) {
							if(oFuncCheckItem.hasAppliedCheckDiscountByIndex(iCheckDiscountIndex))
								dBaseTotal = dBaseTotal.add(oFuncCheckItem.getCheckDiscountItemList(iCheckDiscountIndex.intValue()).getTotal());
						}
					}
				}
				if(m_oTaxType.get(i-1).isIncludeMidDisc()) {
					dBaseTotal = dBaseTotal.add(oPosCheckItem.getMidDisc());	// midDisc value is -ve value
					
					if(oAppliedDiscountIndexes.containsKey("midDisc") && !oAppliedDiscountIndexes.get("midDisc").isEmpty()) {
						for(Integer iCheckDiscountIndex: oAppliedDiscountIndexes.get("midDisc")) {
							if(oFuncCheckItem.hasAppliedCheckDiscountByIndex(iCheckDiscountIndex))
								dBaseTotal = dBaseTotal.add(oFuncCheckItem.getCheckDiscountItemList(iCheckDiscountIndex.intValue()).getTotal());
						}
					}
				}
				
				// Include the previous S.C./Tax
				String sTaxScMask = StringLib.fillZero(m_oTaxType.get(i-1).getIncludeTaxScMask(), 30);
				for (int j = 1; j <= 5; j++) {
					if (sTaxScMask.substring((j - 1), j).equals("1")) {
						if(oPosCheckItem.getChargeSc(j).equals(PosCheckItem.CHARGE_SC_YES)){
							if(oPosCheckItem.getSc(j).compareTo(BigDecimal.ZERO) != 0) {
								dBaseTotal = dBaseTotal.add(oPosCheckItem.getSc(j));
								String sScInclTaxKey = String.format("sc%d_incl_tax%d", j, i);
								
								// add tax sc ref record
								BigDecimal oScInclTax = oPosCheckItem.getSc(j).subtract(oPosCheckItem.getSc(j).divide(dRate.add(BigDecimal.ONE), 10, RoundingMode.HALF_UP));
								if (oFuncCheckItem.isTaxScRefExistBySectionVariable(sScInclTaxKey)) {
									oFuncCheckItem.updateTaxScRefValue(PosCheckTaxScRef.BY_ITEM, sScInclTaxKey, StringLib.BigDecimalToString(oScInclTax, 10));
								} else
									oFuncCheckItem.addTaxScRef(PosCheckTaxScRef.BY_ITEM, sScInclTaxKey, StringLib.BigDecimalToString(oScInclTax, 10));
							}
						}else if (oPosCheckItem.getChargeSc(j).equals(PosCheckItem.CHARGE_SC_INCLUSIVE_IN_ITEM_PRICE_WITHOUT_BREAKDOWN))
							dRate = dRate.add(m_oScType.get(j-1).getRateForInclusiveNoBreakdown().multiply(m_oTaxType.get(i-1).getRate()));
					}
				}
				
				for (int j = 1; j < i; j++) {
					if (sTaxScMask.substring(4 + j, 4 + j + 1).equals("1")) {
						if (oPosCheckItem.getChargeTax(j).equals(PosCheckItem.CHARGE_TAX_YES)) {
							dBaseTotal = dBaseTotal.add(oPosCheckItem.getTax(j));
						}else{
							dRate = dRate.add(m_oTaxType.get(j-1).getRateForInclusiveNoBreakdown().multiply(m_oTaxType.get(i-1).getRate()));
						}
					}
				}
				
				if (dBaseTotalForInclusiveTaxNoBreakdown.compareTo(BigDecimal.ZERO) == 0) {
					// Assign the base total to variable for inclusive tax calculation later
					dBaseTotalForInclusiveTaxNoBreakdown = dBaseTotalForInclusiveTaxNoBreakdown.add(dBaseTotal);
				}
				dRateTotalForInclusiveTaxNoBreakdown = dRateTotalForInclusiveTaxNoBreakdown.add(dRate);
				dRatesForInclusiveTaxNoBreakdown[i] = dRatesForInclusiveTaxNoBreakdown[i].add(dRate);
			}
		}
		
		if (dBaseTotalForInclusiveTaxNoBreakdown.compareTo(BigDecimal.ZERO) != 0) {
			if(bIsInclusiveNoBreakDown)
				dRateTotalForInclusiveTaxNoBreakdown = oPosCheckItem.getInclusiveNoBreakdownBaseRate(m_oScType, m_oTaxType, null);
			for(int i=1; i<=25; i++){
				if (oPosCheckItem.getChargeTax(i).equals(PosCheckItem.CHARGE_TAX_INCLUSIVE_IN_ITEM_PRICE_WITHOUT_BREAKDOWN)) {
					int iInclusiveTaxIndex = i;
					if(i > 4)
						iInclusiveTaxIndex = 4;
					
					// Calculate the item total exclude the inclusive tax
					BigDecimal dItemTotalExcludeInclusiveTax = dBaseTotalForInclusiveTaxNoBreakdown.divide(dRateTotalForInclusiveTaxNoBreakdown.add(new BigDecimal("1.0")), 10, RoundingMode.HALF_UP);
					
					// Calculate the inclusive tax
					BigDecimal dInclusiveTaxRef = dItemTotalExcludeInclusiveTax.multiply(dRatesForInclusiveTaxNoBreakdown[i]);
					oPosCheckItem.setInclusiveTaxRef(iInclusiveTaxIndex, oPosCheckItem.getInclusiveTaxRef(iInclusiveTaxIndex).add(dInclusiveTaxRef));
					
					// add tax sc ref record
					String sTaxInclScKey = String.format("incl_tax_ref%d", i);
					if (oFuncCheckItem.isTaxScRefExistBySectionVariable(sTaxInclScKey))
						oFuncCheckItem.updateTaxScRefValue(PosCheckTaxScRef.BY_ITEM, sTaxInclScKey, StringLib.BigDecimalToString(dInclusiveTaxRef, 10));
					else
						oFuncCheckItem.addTaxScRef(PosCheckTaxScRef.BY_ITEM, sTaxInclScKey, StringLib.BigDecimalToString(dInclusiveTaxRef, 10));
				}
			}
		}
	}
	
	public void calcPostDiscount(String sType, PosCheckDiscount oPosCheckDiscount, List<FuncCheckItem> oFuncCheckItemList, HashMap<String, List<Integer>> oAppliedPartyDiscountIndex) {
		BigDecimal dBaseTotal = BigDecimal.ZERO;
		PosCheckItem oPosCheckItem = null;
		
		if(sType.equals("item")) {
			for(FuncCheckItem oFuncCheckItem:oFuncCheckItemList) {
				if(oFuncCheckItem.isSplitRevenueParent()) 
					return;
				oPosCheckItem = oFuncCheckItem.getCheckItem();
				boolean bWithBreakdown = false;
				for (int i = 1; i <= 25; i++) {
					if (oPosCheckItem.getChargeTax(i).equals(PosCheckItem.CHARGE_TAX_CHARGED_IN_ITEM_PRICE)) {
						bWithBreakdown = true;
						break;
					}
				}
				if (bWithBreakdown)
					dBaseTotal = dBaseTotal.add(oPosCheckItem.getTotal());
				else
					dBaseTotal = dBaseTotal.add(oPosCheckItem.getRoundTotal());
				if(oPosCheckDiscount.isIncludePreDisc() == true) {
					dBaseTotal = dBaseTotal.add(oPosCheckItem.getPreDisc());		//preDisc is -ve value
					
					if(oAppliedPartyDiscountIndex.containsKey("preDisc") && !oAppliedPartyDiscountIndex.get("preDisc").isEmpty()) {
						for(Integer iCheckDiscountIndex: oAppliedPartyDiscountIndex.get("preDisc")) {
							if(oFuncCheckItem.hasAppliedCheckDiscountByIndex(iCheckDiscountIndex))
								dBaseTotal = dBaseTotal.add(oFuncCheckItem.getCheckDiscountItemList(iCheckDiscountIndex.intValue()).getTotal());
						}
					}
				}
				
				if(oPosCheckDiscount.isIncludeMidDisc() == true) {
					dBaseTotal = dBaseTotal.add(oPosCheckItem.getMidDisc());		//midDisc is -ve value
					
					if(oAppliedPartyDiscountIndex.containsKey("midDisc") && !oAppliedPartyDiscountIndex.get("midDisc").isEmpty()) {
						for(Integer iCheckDiscountIndex: oAppliedPartyDiscountIndex.get("midDisc")) {
							if(oFuncCheckItem.hasAppliedCheckDiscountByIndex(iCheckDiscountIndex))
								dBaseTotal = dBaseTotal.add(oFuncCheckItem.getCheckDiscountItemList(iCheckDiscountIndex.intValue()).getTotal());
						}
					}
				}
				
				// Include the previous S.C./Tax
				HashMap<String, BigDecimal[]> oScTaxInclusiveRateNoBreakdown = new HashMap<String, BigDecimal[]>();
				oScTaxInclusiveRateNoBreakdown.put("sc", new BigDecimal[AppGlobal.SC_COUNT]);
				oScTaxInclusiveRateNoBreakdown.put("tax", new BigDecimal[AppGlobal.TAX_COUNT]);
				dBaseTotal = oFuncCheckItem.calculateScTaxRateBaseOnDiscount(PosDiscountType.TYPE_POST_DISCOUNT, oPosCheckDiscount.getIncludeTaxScMask(), dBaseTotal, m_oScType, m_oTaxType, oScTaxInclusiveRateNoBreakdown);
				
				BigDecimal dDiscountTotal = BigDecimal.ZERO;
				if(oPosCheckDiscount.isPercentageDiscountMethod()){
					// Percentage discount
					dDiscountTotal = dBaseTotal.multiply(oPosCheckDiscount.getRate());
				}else {
					//define total is negative or not. 
					if(dBaseTotal.signum() != -1){
						//dBaseTotal is +ve, fix amount is -ve, discount need to be -ve
						if(dBaseTotal.compareTo(oPosCheckDiscount.getFixAmount().negate()) >= 0) 
							dDiscountTotal = oPosCheckDiscount.getFixAmount();
						else
							dDiscountTotal = dBaseTotal.negate();
					}else{
						//dBaseTotal is -ve, fix amount is -ve, discount need to be +ve
						if(dBaseTotal.compareTo(oPosCheckDiscount.getFixAmount()) < 0)
							dDiscountTotal = oPosCheckDiscount.getFixAmount().negate();
						else
							dDiscountTotal = dBaseTotal.negate();
					}
				}
				
				//Calculate maximum discount amount
				if (oPosCheckDiscount.isUsedForDiscount())
					dDiscountTotal = this.getDiscountMaxAmount(oPosCheckDiscount, dDiscountTotal);
				
				oPosCheckDiscount.setTotal(dDiscountTotal);
				
				// Calculate the round amount
				BigDecimal dDiscRoundTotal = AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(oPosCheckDiscount.getTotal());
				
				oPosCheckDiscount.setRoundTotal(dDiscRoundTotal);
				oPosCheckDiscount.setRoundAmount(oPosCheckDiscount.getRoundTotal().subtract(oPosCheckDiscount.getTotal()));
				
				// Set pos_check_discount_item value
				PosCheckDiscountItem oCheckDiscountItem = oPosCheckDiscount.getCheckDiscountItemList().get(0);
				oCheckDiscountItem.setTotal(oPosCheckDiscount.getTotal());
				oCheckDiscountItem.setRoundTotal(oPosCheckDiscount.getRoundTotal());
				
				// Break down the tax and sc (for inclusive on break down item only)
				if(oFuncCheckItem.getCheckItem().isScTaxInclusiveNoBreakdown()) {
					BigDecimal dBaseRate = oPosCheckItem.getInclusiveNoBreakdownBaseRate(m_oScType, m_oTaxType, oPosCheckDiscount);
					oFuncCheckItem.breakdownDiscountItemValue(oPosCheckDiscount, oCheckDiscountItem, dBaseRate, oScTaxInclusiveRateNoBreakdown);
				}
				
				oPosCheckItem.addValueToPostDisc(oPosCheckDiscount.getTotal());
			}
		}
		// Calculate Party Check Post-Discount
		else {
			List<HashMap<String, BigDecimal>> oFuncCheckItemBases = new ArrayList<HashMap<String, BigDecimal>>();
			BigDecimal dItemsRemain = BigDecimal.ZERO;
			BigDecimal dDiscountBase = BigDecimal.ZERO;
			BigDecimal dDiscountAmount = BigDecimal.ZERO;
			BigDecimal dRoundDiscount = BigDecimal.ZERO;
			
			// Calculate the item base: item remaining total, item base total
			for(int i=0; i<oFuncCheckItemList.size(); i++) {
				HashMap<String, BigDecimal> oFuncCheckItemBase = new HashMap<String, BigDecimal>();
				BigDecimal dItemBase = BigDecimal.ZERO;
				BigDecimal dPreviousPreDiscountTotal = BigDecimal.ZERO;
				BigDecimal dPreviousMidDiscountTotal = BigDecimal.ZERO;
				BigDecimal dPreviousPostDiscountTotal = BigDecimal.ZERO;
				String sScMask = StringLib.fillZero(oPosCheckDiscount.getIncludeTaxScMask(), 30);
				
				// item remain total
				boolean bWithBreakdown = false;
				for (int j = 1; j <= 25; j++) {
					if (oFuncCheckItemList.get(i).getCheckItem().getChargeTax(j).equals(PosCheckItem.CHARGE_TAX_CHARGED_IN_ITEM_PRICE)) {
						bWithBreakdown = true;
						break;
					}
				}
				BigDecimal dItemRemain = BigDecimal.ZERO;
				BigDecimal dRoundItemRemain = BigDecimal.ZERO;
				if (bWithBreakdown)
					dItemRemain = oFuncCheckItemList.get(i).getCheckItem().getTotal();
				else
					dItemRemain = oFuncCheckItemList.get(i).getCheckItem().getRoundTotal();
				dRoundItemRemain = oFuncCheckItemList.get(i).getCheckItem().getRoundTotal();
				
				for(int j=1; j<=5; j++){	// add SC charge to remain if it is include SC
					if(sScMask.substring(j-1, j).equals("1")){
						dItemRemain = dItemRemain.add(oFuncCheckItemList.get(i).getCheckItem().getSc(j));
						dRoundItemRemain = dRoundItemRemain.add(oFuncCheckItemList.get(i).getCheckItem().getSc(j));
					}
				}	
				for(int j=1; j<=25; j++){	// add Tax charge to remain if it is include Tax
					if(sScMask.substring(4+j, 4+j+1).equals("1")){
						dItemRemain = dItemRemain.add(oFuncCheckItemList.get(i).getCheckItem().getTax(j));
						dRoundItemRemain = dRoundItemRemain.add(oFuncCheckItemList.get(i).getCheckItem().getTax(j));
					}
				}
				
				if(!oFuncCheckItemList.get(i).getItemDiscountList().isEmpty()) {		//subtract the previous applied item's pre-discount, mid-discount and post-discount
					for(int j=0; j<oFuncCheckItemList.get(i).getItemDiscountList().size(); j++) {
						if(oFuncCheckItemList.get(i).getItemDiscountList().get(j).isDeleted())
							continue;
						
						if(oFuncCheckItemList.get(i).getItemDiscountList().get(j).isPreDiscountType()) {
							dPreviousPreDiscountTotal = dPreviousPreDiscountTotal.add(oFuncCheckItemList.get(i).getItemDiscountList().get(j).getTotal());
							dRoundItemRemain = dRoundItemRemain.add(oFuncCheckItemList.get(i).getItemDiscountList().get(j).getRoundTotal());	//-ve for discount value
						} else if(oFuncCheckItemList.get(i).getItemDiscountList().get(j).isMidDiscountType()) {
							dPreviousMidDiscountTotal = dPreviousMidDiscountTotal.add(oFuncCheckItemList.get(i).getItemDiscountList().get(j).getTotal());
							dRoundItemRemain = dRoundItemRemain.add(oFuncCheckItemList.get(i).getItemDiscountList().get(j).getRoundTotal());	//-ve for discount value
						} else {
							dPreviousPostDiscountTotal = dPreviousPostDiscountTotal.add(oFuncCheckItemList.get(i).getItemDiscountList().get(j).getTotal());
							dRoundItemRemain = dRoundItemRemain.add(oFuncCheckItemList.get(i).getItemDiscountList().get(j).getRoundTotal());	//-ve for discount value
						}
					}
				}
				if(!oAppliedPartyDiscountIndex.get("preDisc").isEmpty()) {		//subtract the previous applied party's pre-discount
					for(Integer iAppliedDiscountIndex: oAppliedPartyDiscountIndex.get("preDisc")) {
						if(oFuncCheckItemList.get(i).hasAppliedCheckDiscountByIndex(iAppliedDiscountIndex)) {
							dPreviousPreDiscountTotal = dPreviousPreDiscountTotal.add(oFuncCheckItemList.get(i).getCheckDiscountItemList(iAppliedDiscountIndex.intValue()).getTotal());
							dRoundItemRemain = dRoundItemRemain.add(oFuncCheckItemList.get(i).getCheckDiscountItemList(iAppliedDiscountIndex.intValue()).getRoundTotal());	//-ve for discount value
						}
					}
					
				}
				if(!oAppliedPartyDiscountIndex.get("midDisc").isEmpty()) {		//subtract the previous applied party's mid-discount
					for(Integer iAppliedDiscountIndex: oAppliedPartyDiscountIndex.get("midDisc")) {
						if(oFuncCheckItemList.get(i).hasAppliedCheckDiscountByIndex(iAppliedDiscountIndex)) {
							dPreviousMidDiscountTotal = dPreviousMidDiscountTotal.add(oFuncCheckItemList.get(i).getCheckDiscountItemList(iAppliedDiscountIndex.intValue()).getTotal());
							dRoundItemRemain = dRoundItemRemain.add(oFuncCheckItemList.get(i).getCheckDiscountItemList(iAppliedDiscountIndex.intValue()).getRoundTotal());	//-ve for discount value
						}
					}
				}
				if(!oAppliedPartyDiscountIndex.get("postDisc").isEmpty()) {		//subtract the previous applied party's post-discount
					for(Integer iAppliedDiscountIndex: oAppliedPartyDiscountIndex.get("postDisc")) {
						if(oFuncCheckItemList.get(i).hasAppliedCheckDiscountByIndex(iAppliedDiscountIndex)) {
							dPreviousPostDiscountTotal = dPreviousPostDiscountTotal.add(oFuncCheckItemList.get(i).getCheckDiscountItemList(iAppliedDiscountIndex.intValue()).getTotal());
							dRoundItemRemain = dRoundItemRemain.add(oFuncCheckItemList.get(i).getCheckDiscountItemList(iAppliedDiscountIndex.intValue()).getRoundTotal());	//-ve for discount value
						}
					}
				}
				
				dItemRemain = dItemRemain.add(dPreviousPreDiscountTotal);
				dItemRemain = dItemRemain.add(dPreviousMidDiscountTotal);
				dItemRemain = dItemRemain.add(dPreviousPostDiscountTotal);
				if (AppGlobal.g_oFuncStation.get().getApplyDiscountRestriction() == 3) {
					if ((oFuncCheckItemList.get(i).getCheckItem().getPreDisc().compareTo(BigDecimal.ZERO) != 0)||
							(oFuncCheckItemList.get(i).getCheckItem().getMidDisc().compareTo(BigDecimal.ZERO) != 0)||
							(oFuncCheckItemList.get(i).getCheckItem().getPostDisc().compareTo(BigDecimal.ZERO) != 0)) {
						dItemRemain = BigDecimal.ZERO;
						dRoundItemRemain = BigDecimal.ZERO;
					}
				}
				dItemsRemain = dItemsRemain.add(dItemRemain);
				
				// item base
				if(oPosCheckDiscount.isExcludePreviousDiscount())
					dItemBase = dItemBase.add(dItemRemain);
				else {
					if (bWithBreakdown)
						dItemBase = dItemBase.add(oFuncCheckItemList.get(i).getCheckItem().getTotal());
					else
						dItemBase = dItemBase.add(oFuncCheckItemList.get(i).getCheckItem().getRoundTotal());
					
					if(oPosCheckDiscount.isIncludePreDisc() == true) 
						dItemBase = dItemBase.add(dPreviousPreDiscountTotal);
					
					if(oPosCheckDiscount.isIncludeMidDisc() == true)
						dItemBase = dItemBase.add(dPreviousMidDiscountTotal);
					
					if (AppGlobal.g_oFuncStation.get().includePreviousSameLevelDiscount())
						dItemBase = dItemBase.add(dPreviousPostDiscountTotal);
				}
				
				// Include the previous S.C./Tax
				for(int j=1; j<=5; j++){
					if(sScMask.substring(j-1, j).equals("1")){
						dItemBase = dItemBase.add(oFuncCheckItemList.get(i).getCheckItem().getSc(j));
					}
				}
				for(int j=1; j<=25; j++){
					if(sScMask.substring(4+j, 4+j+1).equals("1")){
						dItemBase = dItemBase.add(oFuncCheckItemList.get(i).getCheckItem().getTax(j));
					}
				}
				
				if (AppGlobal.g_oFuncStation.get().getApplyDiscountRestriction() == 3) {
					if ((oFuncCheckItemList.get(i).getCheckItem().getPreDisc().compareTo(BigDecimal.ZERO) != 0)||
							(oFuncCheckItemList.get(i).getCheckItem().getMidDisc().compareTo(BigDecimal.ZERO) != 0)||
							(oFuncCheckItemList.get(i).getCheckItem().getPostDisc().compareTo(BigDecimal.ZERO) != 0))
						dItemBase = BigDecimal.ZERO;
				}
				oFuncCheckItemBase.put("remain", dItemRemain);
				oFuncCheckItemBase.put("roundRemain", dRoundItemRemain);
				oFuncCheckItemBase.put("base", dItemBase);
				oFuncCheckItemBases.add(oFuncCheckItemBase);
				
				if(oPosCheckDiscount.isFixAmountPerItemDiscountMethod()){
					BigDecimal dItemDiscount = oPosCheckDiscount.getFixAmount().multiply(oFuncCheckItemList.get(i).getCheckItem().getQty());
					if(dItemDiscount.signum() == -1){
						//dItemRemain is +ve, dItemDiscount is -ve
						if(dItemRemain.compareTo(dItemDiscount.negate()) < 0)
							dItemDiscount = dItemRemain.negate();
					}else{
						//dItemRemain is -ve, dItemDiscount is +ve
						if((dItemRemain.negate()).compareTo(dItemDiscount) < 0)
							dItemDiscount = dItemRemain.negate();
					}
					
					oFuncCheckItemBases.get(i).put("discount", dItemDiscount);
					dDiscountAmount = dDiscountAmount.add(dItemDiscount);
				}
			}
			
			if(!oPosCheckDiscount.isFixAmountPerItemDiscountMethod()){
				// Calculate the discount base
				for(HashMap<String, BigDecimal> oFuncCheckItemBase: oFuncCheckItemBases)
					dDiscountBase = dDiscountBase.add(oFuncCheckItemBase.get("base"));
				
				// Calculate the discount amount
				if(oPosCheckDiscount.isPercentageDiscountMethod())
					dDiscountAmount = dDiscountBase.multiply(oPosCheckDiscount.getRate());
				else {
					if(dDiscountBase.signum() != -1){
						//dDicountBase is +ve, fix amount is -ve
						if(dDiscountBase.compareTo(oPosCheckDiscount.getFixAmount().negate()) >= 0)
							dDiscountAmount = oPosCheckDiscount.getFixAmount();
						else
							dDiscountAmount = dDiscountBase.negate();
					}else{
						//dDicountBase is -ve, fix amount is -ve
						if(dDiscountBase.compareTo(oPosCheckDiscount.getFixAmount()) < 0)
							dDiscountAmount = oPosCheckDiscount.getFixAmount().negate();
						else
							dDiscountAmount = dDiscountBase.negate();
					}
				}
				
				// Check whether remaining items total > discount amount
				if(!oPosCheckDiscount.isUsedForExtraCharge()) {
					if(dDiscountAmount.signum() != -1){
						if(dDiscountAmount.compareTo(dItemsRemain.negate()) > 0)
							dDiscountAmount = dItemsRemain.negate();
					}else{
						//dDiscountAmount is -ve, dItemRemain is +ve, discount need to be -ve
						if((dDiscountAmount.negate()).compareTo(dItemsRemain) > 0)
							dDiscountAmount = dItemsRemain.negate();
					}
				}
				
				//Calculate maximum discount amount
				if (oPosCheckDiscount.isUsedForDiscount())
					dDiscountAmount = this.getDiscountMaxAmount(oPosCheckDiscount, dDiscountAmount);
				
				// Calculate the round discount
				//default negative, do round with absolute value
				dRoundDiscount = AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(dDiscountAmount);
				
				// Backward calculate the discount to each applied item
				for(int i=0; i<oFuncCheckItemList.size(); i++) {
					BigDecimal dItemBase = oFuncCheckItemBases.get(i).get("base");
					BigDecimal dItemDiscount = BigDecimal.ZERO;
					if(dDiscountBase.compareTo(BigDecimal.ZERO) != 0)
						dItemDiscount = (dItemBase.multiply(dRoundDiscount)).divide(dDiscountBase, 10, RoundingMode.HALF_UP);
					
					//change to positive compare
					if(dItemDiscount.signum() == -1){
						//dItemDiscount is -ve, item remain is +ve
						if((dItemDiscount.negate()).compareTo(oFuncCheckItemBases.get(i).get("remain")) > 0)
							dItemDiscount = (oFuncCheckItemBases.get(i).get("remain")).negate();
					}else{
						//dItemDiscount is +ve, item remain is -ve
						if(dItemDiscount.compareTo(oFuncCheckItemBases.get(i).get("remain").negate()) > 0)
							dItemDiscount = (oFuncCheckItemBases.get(i).get("remain")).negate();
					}
					
					oFuncCheckItemBases.get(i).put("discount", dItemDiscount);
				}
			}else{
				// Fix amount check discount per item
				// Calculate the round discount
				dRoundDiscount = AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(dDiscountAmount);
			}
			
			// Calculate the difference
			BigDecimal dItemDiscTotal = BigDecimal.ZERO;
			for(int i=0; i<oFuncCheckItemList.size(); i++) 
				dItemDiscTotal = dItemDiscTotal.add(oFuncCheckItemBases.get(i).get("discount"));
			BigDecimal dDifference = dDiscountAmount.subtract(dItemDiscTotal);
			if(dDifference.compareTo(BigDecimal.ZERO) != 0) {
				for(int i=(oFuncCheckItemList.size() - 1); i>=0; i--) {
					BigDecimal dItemReamin = oFuncCheckItemBases.get(i).get("remain").subtract(oFuncCheckItemBases.get(i).get("discount"));
					if(dItemReamin.compareTo(new BigDecimal ("0.0")) != 0) {
						oFuncCheckItemBases.get(i).put("discount", oFuncCheckItemBases.get(i).get("discount").add(dDifference));
						break;
					}
				}
			}
			
			for(int i=0; i<oFuncCheckItemList.size(); i++){
				BigDecimal oPositiveDiscountTotal = BigDecimal.ZERO;
				if(oFuncCheckItemBases.get(i).get("discount").signum() == -1)
					oPositiveDiscountTotal = oFuncCheckItemBases.get(i).get("discount").negate();
				else
					oPositiveDiscountTotal = oFuncCheckItemBases.get(i).get("discount");
				
				int iDiscDecimal = AppGlobal.g_oFuncOutlet.get().getBusinessDay().getDiscDecimal();
				
				// get two extra decimal and do round off
				oPositiveDiscountTotal = oPositiveDiscountTotal.setScale(iDiscDecimal+2, RoundingMode.HALF_UP);
				
				// using the discount decimal and do round off again 
				BigDecimal oRoundedTotal = Util.RoundOff(oPositiveDiscountTotal, AppGlobal.g_oFuncOutlet.get().getDiscRoundDecimal());
				if(oFuncCheckItemBases.get(i).get("discount").signum() == -1)
					oRoundedTotal = oRoundedTotal.negate();
				oFuncCheckItemBases.get(i).put("round", oRoundedTotal);
			}
			
			// Set pos_check_discount
			BigDecimal dCheckDiscountTotal = BigDecimal.ZERO;
			for(int i=0; i<oFuncCheckItemList.size(); i++) {
				if (AppGlobal.g_oFuncStation.get().getApplyDiscountRestriction() == 3) {
					if ((oFuncCheckItemList.get(i).getCheckItem().getPreDisc().compareTo(BigDecimal.ZERO) != 0)||
							(oFuncCheckItemList.get(i).getCheckItem().getMidDisc().compareTo(BigDecimal.ZERO) != 0)||
							(oFuncCheckItemList.get(i).getCheckItem().getPostDisc().compareTo(BigDecimal.ZERO) != 0))
						continue;
				}
				dCheckDiscountTotal = dCheckDiscountTotal.add(oFuncCheckItemBases.get(i).get("discount"));
			}
			oPosCheckDiscount.setTotal(dCheckDiscountTotal);

			oPosCheckDiscount.setRoundTotal(AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(dCheckDiscountTotal));
			
			oPosCheckDiscount.setRoundAmount(oPosCheckDiscount.getRoundTotal().subtract(oPosCheckDiscount.getTotal()));
			
			// Calculate the round amount of sum of check discount item round total compare with final discount total
			// Put the round amount
			BigDecimal dPositiveCheckDiscRoundTotal = oPosCheckDiscount.getRoundTotal().multiply(new BigDecimal("-1.0"));
			BigDecimal dPositiveCheckDiscountItemTotal = BigDecimal.ZERO;
			BigDecimal dCheckDiscountItemRoundAmt = BigDecimal.ZERO;
			for(int i=0; i<oFuncCheckItemBases.size(); i++)
				dPositiveCheckDiscountItemTotal = dPositiveCheckDiscountItemTotal.add(oFuncCheckItemBases.get(i).get("round").multiply(new BigDecimal("-1.0")));
			dCheckDiscountItemRoundAmt = dPositiveCheckDiscRoundTotal.subtract(dPositiveCheckDiscountItemTotal);
			//dCheckDisountItemRoundAmt always equals to zero, if-case blow will not process ??? 
			if(dCheckDiscountItemRoundAmt.compareTo(BigDecimal.ZERO) != 0) {
				for(int i=0; i<oFuncCheckItemList.size(); i++) {
					BigDecimal dItemRemain = oFuncCheckItemBases.get(i).get("roundRemain");
					BigDecimal dNewDiscRoundTotal = (oFuncCheckItemBases.get(i).get("round").multiply(new BigDecimal("-1.0"))).add(dCheckDiscountItemRoundAmt);
					if(dItemRemain.signum() != -1){
						//dItemRemain is +ve , dNewDiscRountTotal is +ve
						if(dItemRemain.compareTo(dNewDiscRoundTotal) >= 0) {
							oFuncCheckItemBases.get(i).put("round", dNewDiscRoundTotal.multiply(new BigDecimal("-1.0")));
							dCheckDiscountItemRoundAmt = BigDecimal.ZERO;
							break;
						}else {
							oFuncCheckItemBases.get(i).put("round", dItemRemain.multiply(new BigDecimal("-1.0")));
							dCheckDiscountItemRoundAmt = dNewDiscRoundTotal.subtract(dItemRemain);
						}
					}else{
						//dItemRemain is -ve , dNewDiscRountTotal is -ve
						if(dItemRemain.compareTo(dNewDiscRoundTotal) < 0) {
							oFuncCheckItemBases.get(i).put("round", dNewDiscRoundTotal.multiply(new BigDecimal("-1.0")));
							dCheckDiscountItemRoundAmt = BigDecimal.ZERO;
							break;
						}else {
							oFuncCheckItemBases.get(i).put("round", dItemRemain.multiply(new BigDecimal("-1.0")));
							dCheckDiscountItemRoundAmt = dNewDiscRoundTotal.subtract(dItemRemain);
						}
					}
				}
				
				if (dCheckDiscountItemRoundAmt.compareTo(BigDecimal.ZERO) != 0 && oFuncCheckItemList.size() > 0) {
					BigDecimal dNewCheckDiscRoundTotal = oPosCheckDiscount.getRoundTotal().add(dCheckDiscountItemRoundAmt);
					oPosCheckDiscount.setRoundTotal(dNewCheckDiscRoundTotal);
				}
			}
			
			// Set pos_check_discount_item
			for(int i=0; i<oFuncCheckItemList.size(); i++) {
				PosCheckDiscountItem oPosCheckDiscountItem = oFuncCheckItemList.get(i).getCheckDiscountItemList(oPosCheckDiscount.getSeq());
				oPosCheckDiscountItem.setTotal(oFuncCheckItemBases.get(i).get("discount"));
				oPosCheckDiscountItem.setRoundTotal(oFuncCheckItemBases.get(i).get("round"));
				
				// Break down the tax and sc (for inclusive on break down item only)
				if(oFuncCheckItemList.get(i).getCheckItem().isScTaxInclusiveNoBreakdown()) {
					FuncCheckItem oTempFuncCheckItem = oFuncCheckItemList.get(i);
					PosCheckItem oTempPosCheckItem = oTempFuncCheckItem.getCheckItem();
					
					HashMap<String, BigDecimal[]> oScTaxInclusiveRateNoBreakdown = new HashMap<String, BigDecimal[]>();
					oScTaxInclusiveRateNoBreakdown.put("sc", new BigDecimal[AppGlobal.SC_COUNT]);
					oScTaxInclusiveRateNoBreakdown.put("tax", new BigDecimal[AppGlobal.TAX_COUNT]);
					dBaseTotal = oTempFuncCheckItem.calculateScTaxRateBaseOnDiscount(PosDiscountType.TYPE_POST_DISCOUNT, oPosCheckDiscount.getIncludeTaxScMask(), dBaseTotal, m_oScType, m_oTaxType, oScTaxInclusiveRateNoBreakdown);
					
					BigDecimal dBaseRate = oTempPosCheckItem.getInclusiveNoBreakdownBaseRate(m_oScType, m_oTaxType, oPosCheckDiscount);
					oFuncCheckItemList.get(i).breakdownDiscountItemValue(oPosCheckDiscount, oPosCheckDiscountItem, dBaseRate, oScTaxInclusiveRateNoBreakdown);
				}
			}
		}
		
		// add sc / tax ref record accordingly
		for(int i=0; i<oFuncCheckItemList.size(); i++){
			FuncCheckItem oFuncCheckItem = oFuncCheckItemList.get(i);
			for(int j=1; j<=AppGlobal.SC_COUNT; j++) {
				String sScInclTaxKey = String.format("round_post_disc_on_sc_ref%d", j);
				BigDecimal dPostDiscOnSc = AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(oFuncCheckItem.getDiscOnScTax(false, PosDiscountType.TYPE_POST_DISCOUNT, j));
				if (oFuncCheckItem.isTaxScRefExistBySectionVariable(sScInclTaxKey))
					oFuncCheckItem.updateTaxScRefValue(PosCheckTaxScRef.BY_ITEM, sScInclTaxKey, StringLib.BigDecimalToString(dPostDiscOnSc, 10));
				else if(dPostDiscOnSc.compareTo(BigDecimal.ZERO) != 0)
					oFuncCheckItem.addTaxScRef(PosCheckTaxScRef.BY_ITEM, sScInclTaxKey, StringLib.BigDecimalToString(dPostDiscOnSc, 10));
			}
			
			for(int j=1; j<=AppGlobal.TAX_COUNT; j++) {
				String sScInclTaxKey = String.format("round_post_disc_on_tax_ref%d", j);
				BigDecimal dPostDiscOnTax = AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(oFuncCheckItem.getDiscOnScTax(true, PosDiscountType.TYPE_POST_DISCOUNT, j));
				if (oFuncCheckItem.isTaxScRefExistBySectionVariable(sScInclTaxKey))
					oFuncCheckItem.updateTaxScRefValue(PosCheckTaxScRef.BY_ITEM, sScInclTaxKey, StringLib.BigDecimalToString(dPostDiscOnTax, 10));
				else if(dPostDiscOnTax.compareTo(BigDecimal.ZERO) != 0)
					oFuncCheckItem.addTaxScRef(PosCheckTaxScRef.BY_ITEM, sScInclTaxKey, StringLib.BigDecimalToString(dPostDiscOnTax, 10));
			}
		}
	}
	
	// Breakdown the inclusive no breakdown sc / tax to breakdown value
	public void breakdownInclusiveScTax() {
		if(!AppGlobal.g_oFuncStation.get().getBreakdownInclusiveScTaxAtFinalSettle())
			return;
		
		BigDecimal dOriCheckTotal = m_oCheck.getCheckTotal();
		JSONObject oBreakdownDetails = m_oCheck.getBasicNoBreakdownDetails();
		if(oBreakdownDetails.length() > 0) {
			if(isCheckExtraInfoExistBySectionVariableAndIndex("", PosCheckExtraInfo.VARIABLE_NON_BREAKDOWN_DETAILS, 0))
				updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, "", PosCheckExtraInfo.VARIABLE_NON_BREAKDOWN_DETAILS, 0, oBreakdownDetails.toString());
			else
				addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, "", PosCheckExtraInfo.VARIABLE_NON_BREAKDOWN_DETAILS, 0, oBreakdownDetails.toString());
		}
		m_oCheck.resetSalesData();
		
		for(FuncCheckParty oFuncCheckParty: m_oFuncCheckPartyList){
			for (List<FuncCheckItem> oItemList: oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem: oItemList)
					oFuncCheckItem.swipeBreakdownValue(true);
			}
			oFuncCheckParty.swipeBreakdownValue(true);
			
			PosCheckParty oCheckParty = oFuncCheckParty.getCheckParty();
			m_oCheck.setItemTotal(m_oCheck.getItemTotal().add(oCheckParty.getItemTotal()));
			for(int i=1; i<AppGlobal.SC_COUNT; i++)
				m_oCheck.setSc(i, m_oCheck.getSc(i).add(oCheckParty.getSc(i)));
			for(int i=1; i<AppGlobal.TAX_COUNT; i++)
				m_oCheck.setTax(i, m_oCheck.getTax(i).add(oCheckParty.getTax(i)));
			for(int i=1; i<AppGlobal.INCL_TAX_COUNT; i++)
				m_oCheck.setInclusiveTaxRef(i, m_oCheck.getInclusiveTaxRef(i).add(oCheckParty.getInclusiveTaxRef(i)));
			m_oCheck.setPreDisc(m_oCheck.getPreDisc().add(oCheckParty.getPreDisc()));
			m_oCheck.setMidDisc(m_oCheck.getMidDisc().add(oCheckParty.getMidDisc()));
			m_oCheck.setPostDisc(m_oCheck.getPostDisc().add(oCheckParty.getPostDisc()));
		}
		
		// Calculate the round amount of SC, tax
		// Calculate check round amount
		BigDecimal dBeforeRoundCheckTotal = m_oCheck.getItemTotal();
		for(int i=1; i<=AppGlobal.SC_COUNT; i++) {
			m_oCheck.setSc(i, AppGlobal.g_oFuncOutlet.get().roundSCAmountToBigDecimal(m_oCheck.getSc(i)));
			dBeforeRoundCheckTotal = dBeforeRoundCheckTotal.add(m_oCheck.getSc(i));
		}for(int i=1; i<=AppGlobal.TAX_COUNT; i++) {
			m_oCheck.setTax(i, AppGlobal.g_oFuncOutlet.get().roundTaxAmountToBigDecimal(m_oCheck.getTax(i)));
			dBeforeRoundCheckTotal = dBeforeRoundCheckTotal.add(m_oCheck.getTax(i));
		}for(int i=1; i<=AppGlobal.INCL_TAX_COUNT; i++)
			m_oCheck.setInclusiveTaxRef(i, AppGlobal.g_oFuncOutlet.get().roundTaxAmountToBigDecimal(m_oCheck.getInclusiveTaxRef(i)));
				
		dBeforeRoundCheckTotal = dBeforeRoundCheckTotal.add(m_oCheck.getPreDisc());
		dBeforeRoundCheckTotal = dBeforeRoundCheckTotal.add(m_oCheck.getMidDisc());
		dBeforeRoundCheckTotal = dBeforeRoundCheckTotal.add(m_oCheck.getPostDisc());
		dBeforeRoundCheckTotal = dBeforeRoundCheckTotal.add(m_oCheck.getGratuityTotal());
		
		// Calculate check round amount
		BigDecimal dRoundCheckTotal = AppGlobal.g_oFuncOutlet.get().roundCheckAmountToBigDecimal(dBeforeRoundCheckTotal);
		if(dOriCheckTotal.compareTo(dRoundCheckTotal) != 0)
			dRoundCheckTotal = dOriCheckTotal;
		
		m_oCheck.setCheckTotal(dRoundCheckTotal);
		m_oCheck.setRoundAmount(m_oCheck.getCheckTotal().subtract(dBeforeRoundCheckTotal));
	}
	
	// Rollback the breakdwon value to inclusive no breakdown sc / tax
	public void rollbackToInclusiveScTax() {
		if(!AppGlobal.g_oFuncStation.get().getBreakdownInclusiveScTaxAtFinalSettle())
			return;
		
		m_oCheck.resetSalesData();
		for(FuncCheckParty oFuncCheckParty: m_oFuncCheckPartyList){
			for (List<FuncCheckItem> oItemList: oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem: oItemList)
					oFuncCheckItem.swipeBreakdownValue(false);
			}
			oFuncCheckParty.swipeBreakdownValue(false);
		}
		
		// roll back breakdown to inclusvie sc / tax
		if(isCheckExtraInfoExistBySectionVariableAndIndex("", PosCheckExtraInfo.VARIABLE_NON_BREAKDOWN_DETAILS, 0)) {
			try {
				JSONObject oNonBreakdownInfo = new JSONObject(getCheckExtraInfoBySectionAndVariable("", PosCheckExtraInfo.VARIABLE_NON_BREAKDOWN_DETAILS, 0));
				BigDecimal oTmpValue = null;
				if((oTmpValue = Util.jsonObjectKeyToBigDecimal(oNonBreakdownInfo, "chks_check_total")) != null)
					m_oCheck.setCheckTotal(oTmpValue);
				if((oTmpValue = Util.jsonObjectKeyToBigDecimal(oNonBreakdownInfo, "chks_round_amount")) != null)
					m_oCheck.setRoundAmount(oTmpValue);
				if((oTmpValue = Util.jsonObjectKeyToBigDecimal(oNonBreakdownInfo, "chks_pre_disc")) != null)
					m_oCheck.setPreDisc(oTmpValue);
				if((oTmpValue = Util.jsonObjectKeyToBigDecimal(oNonBreakdownInfo, "chks_mid_disc")) != null)
					m_oCheck.setMidDisc(oTmpValue);
				if((oTmpValue = Util.jsonObjectKeyToBigDecimal(oNonBreakdownInfo, "chks_post_disc")) != null)
					m_oCheck.setPostDisc(oTmpValue);
				if((oTmpValue = Util.jsonObjectKeyToBigDecimal(oNonBreakdownInfo, "chks_item_total")) != null)
					m_oCheck.setItemTotal(oTmpValue);
				for(int i=1; i<=AppGlobal.INCL_TAX_COUNT; i++) {
					String sTempKey = "chks_incl_tax_ref"+i;
					if((oTmpValue = Util.jsonObjectKeyToBigDecimal(oNonBreakdownInfo, sTempKey)) != null)
						m_oCheck.setInclusiveTaxRef(i, oTmpValue);
				}
			}catch (JSONException e) {} 
		}
	}
	
	//Get Discount Max Amount (Not for Extra Charge)
	private BigDecimal getDiscountMaxAmount(PosCheckDiscount oPosCheckDiscount, BigDecimal dDiscountAmount) {
		PosCheckExtraInfo oPosCheckExtraInfo = oPosCheckDiscount.getExtraInfoFromList("", PosCheckExtraInfo.VARIABLE_MAX_CHARGE, 0);
		BigDecimal dDiscountMaxLimit = oPosCheckExtraInfo == null ? BigDecimal.ZERO : new BigDecimal(oPosCheckExtraInfo.getValue());
		
		if (dDiscountMaxLimit.compareTo(BigDecimal.ZERO) > 0) 
			dDiscountAmount = dDiscountAmount.negate().compareTo(dDiscountMaxLimit) > 0 ? dDiscountMaxLimit.negate() : dDiscountAmount;
		
		return dDiscountAmount;
	}
	
	// Calculate inclusive SC and tax
	private void calcInclusiveSCAndTax(FuncCheckItem oFuncCheckItem, FuncCheckItem oFuncCheckItemForSCTaxMaskRef){
		BigDecimal dSCFactor[] = {BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO};
		BigDecimal dTaxFactor[] = {BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO,
				BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO,
				BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO,
				BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO,
				BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO};
		
		PosCheckItem oPosCheckItem = oFuncCheckItem.getCheckItem();
		PosCheckItem oPosCheckItemForSCTaxMaskRef = oFuncCheckItemForSCTaxMaskRef.getCheckItem();
		BigDecimal dFinalFactor = BigDecimal.ONE;
		Boolean bHaveInclusiveSCTax = false;
		
		if (oPosCheckItem.getOriginalPrice().compareTo(oPosCheckItem.getPrice()) != 0) {
			// Inclusive tax and sc is calculated before, no need to calculate again
			return;
		}
		
		for(int i=1; i<=5; i++){
			if(oPosCheckItemForSCTaxMaskRef.getChargeSc(i).equals(PosCheckItem.CHARGE_SC_CHARGED_IN_ITEM_PRICE)){
				dSCFactor[i-1] = BigDecimal.ONE;
				
				// Include the previous S.C./Tax
				String sTaxScMask = StringLib.fillZero(m_oScType.get((i-1)).getIncludeTaxScMask(), 30);
				for(int j=1; j<i; j++){
					if(sTaxScMask.substring((j-1), j).equals("1")){
						dSCFactor[i-1] = dSCFactor[i-1].add(dSCFactor[j-1]);
					}
				}
				
				dSCFactor[i-1] = dSCFactor[i-1].multiply(m_oScType.get(i-1).getRate());
				
				bHaveInclusiveSCTax = true;
				
				dFinalFactor = dFinalFactor.add(dSCFactor[i-1]);
			}
		}
		
		for(int i=1; i<=25; i++){
			// Check if the item is charged by Tax
			if(oPosCheckItemForSCTaxMaskRef.getChargeTax(i).equals(PosCheckItem.CHARGE_TAX_CHARGED_IN_ITEM_PRICE)){
				dTaxFactor[i-1] = BigDecimal.ONE;
				
				// Include the previous S.C./Tax
				String sTaxScMask = StringLib.fillZero(m_oTaxType.get(i-1).getIncludeTaxScMask(), 30);
				for(int j=1; j<=5; j++){
					if(sTaxScMask.substring((j-1), j).equals("1")){
						dTaxFactor[i-1] = dTaxFactor[i-1].add(dSCFactor[j-1]);
					}
				}
				for(int j=1; j<i; j++){
					if(sTaxScMask.substring(4+j, 4+j+1).equals("1")){
						dTaxFactor[i-1] = dTaxFactor[i-1].add(dTaxFactor[j-1]);
					}
				}
				
				dTaxFactor[i-1] = dTaxFactor[i-1].multiply(m_oTaxType.get(i-1).getRate());
				
				bHaveInclusiveSCTax = true;
				
				dFinalFactor = dFinalFactor.add(dTaxFactor[i-1]);
			}
		}
		
		if(bHaveInclusiveSCTax && dFinalFactor.compareTo(BigDecimal.ZERO) > 0){
			// Reverse calculation of item price
			BigDecimal dFinalPrice = oPosCheckItem.getOriginalPrice().divide(dFinalFactor, 10, RoundingMode.HALF_UP);
			oPosCheckItem.setPrice(dFinalPrice);
		}
	}
	
	public boolean checkNegativeGalaxyPayment(int iPaymentIndex) {
		List<PosCheckPayment> oPosCheckPaymentList;
		if (iPaymentIndex >= 0) {
			oPosCheckPaymentList = new ArrayList<PosCheckPayment>();
			oPosCheckPaymentList.add(m_oCheckPaymentList.get(iPaymentIndex));
		} else
			oPosCheckPaymentList = m_oCheckPaymentList;
		
		for(PosCheckPayment oPosCheckPayment:oPosCheckPaymentList) {
			if(oPosCheckPayment.haveVoucherPayment()) {
				int iVoucherIntfId = oPosCheckPayment.getVoucherInterfaceId();
				if(iVoucherIntfId > 0) {
					PosInterfaceConfig oVoucherInterface = null;
					List<PosInterfaceConfig> oInterfaceConfigs = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_VOUCHER_INTERFACE);
					for(PosInterfaceConfig oVoucherInterfaceConfig : oInterfaceConfigs) {
						if(oVoucherInterfaceConfig.getInterfaceId() == iVoucherIntfId) {
							oVoucherInterface = oVoucherInterfaceConfig;
							break;
						}
					}
					
					if(oVoucherInterface != null && 
							oVoucherInterface.getInterfaceVendorKey().equals(InfVendor.KEY_GALAXY)) {
						if(oPosCheckPayment.getPayTotal().compareTo(BigDecimal.ZERO) < 0) {
							m_sErrorMessage =  AppGlobal.g_oLang.get()._("cannot_void_negative_check_payment");
							return false;
						}
					}
				}
			}
		}
		return true;
	}
	
	// release payment for a check
	// It is also used for release previous payments of adjust payments
	public boolean releasePayment(String iBusinessDayId, int iOutletId, String sCheckPrefixNum, int iTableNo, String sTableExt, boolean bAdjustPayments, PosPaymentMethodList oPaymentMethodList,
			PosVoidReason oPosVoidReason, boolean bVoidPayment, int iPaymentIndex) {
		DateTime dtVoidDateTime = AppGlobal.getCurrentTime(false);
		DateTimeFormatter voidFormatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		FuncPayment oFuncPayment = new FuncPayment();
		boolean bAspenNeedVoid = false, bPmsSinglePosting = false, bVoidAllPayment = false, bAspenPmsVoided = false, bClearAutoTopUpExtraInfo = false;
		// bVoidAllPayment == true  <=> release payment
		// bVoidAllPayment == false <=> void payment
		if (iPaymentIndex < 0)
			bVoidAllPayment = true;
		
		// For adjust payments, only void PMS and coupon
		if(bAdjustPayments) {
			BigDecimal dPreviousPaymentTotal = BigDecimal.ZERO;
			int iPaymentCount = 0;
			// For SCAN PAY void slip
			List<PosCheckPayment> oVoidedCheckPayments = new ArrayList<PosCheckPayment>();
			
			// For General v2, do void point earn (point refund)
			List<PosInterfaceConfig> oPosInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_MEMBERSHIP_INTERFACE);
			for(PosInterfaceConfig oPosInterfaceConfig : oPosInterfaceConfigList) {
				// no need to do point refund for negative check
				if(oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_GENERAL_V2) && !this.isNegativeCheck()) {
					if(getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID) == null
							|| getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID).isEmpty())
						continue;
					
					int iInterfaceId = Integer.parseInt(this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID));
					if (iInterfaceId != oPosInterfaceConfig.getInterfaceId())
						break;
					
					FuncMembershipInterface oFuncMembershipInterface = new FuncMembershipInterface(oPosInterfaceConfig);
					if(this.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_EARN, 0)){
						String sPointEarn = this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_EARN);
						if(sPointEarn != null && !sPointEarn.isEmpty()) {
							//do point refund
							if(!this.pointRefundForGeneralV2(oFuncMembershipInterface))
								return false;
						}
					}
				}
			}
			
			for(PosCheckPayment oCheckPayment:m_oCheckPaymentList) {
				iPaymentCount++;
				
				if(oCheckPayment.getNonRevenue().equals(PosCheck.NON_REVENUE_PAYMENT) && !this.getNonRevenue().equals(PosCheck.NON_REVENUE_ADVANCE_ORDER))
					this.setNonRevenue(PosCheck.NON_REVENUE_NO, false);
				
				PosPaymentMethod oPaymentMethod = oPaymentMethodList.getPaymentMethodList().get(oCheckPayment.getPaymentMethodId());
				
				// Create a list for some interface usage
				List<PosCheckPayment> oCheckPaymentsList = new ArrayList<PosCheckPayment>();
				oCheckPaymentsList.add(oCheckPayment);
				
				// Void payment interface posting if needed
				if (oPaymentMethod.isPaymentInterface(InfVendor.KEY_SCAN_PAY)) {
					PosInterfaceConfig oPosInterfaceConfig = oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_PAYMENT_INTERFACE).get(0);
					FuncPaymentInterface oFuncPaymentInterface = new FuncPaymentInterface(oPosInterfaceConfig);
					
					if(oFuncPaymentInterface.doVoidPosting(this, oCheckPayment) == false) {
						if(oFuncPaymentInterface.getLastErrorCode() == Integer.parseInt(FuncPaymentInterface.ERROR_CODE_QUERY_TIMEOUT)) {
							m_sWarningMessage = oFuncPaymentInterface.getLastErrorMessage();
						}else {
							m_sErrorMessage = oFuncPaymentInterface.getLastErrorMessage();
							return false;
						}
					}else
						oVoidedCheckPayments.add(oCheckPayment);
				}
				
				String sErrorMsg = "";
				sErrorMsg = oFuncPayment.releaseVoucherPayment(oCheckPayment);
				if(!sErrorMsg.isEmpty()) {
					m_sErrorMessage = sErrorMsg;
					return false;
				}
				
				// Void pms posting if needed
				if(oCheckPayment.isDelete() && oCheckPayment.havePmsPayment()) {
					FuncPMS oFuncPMS = new FuncPMS(true);
					JSONObject oPMSPostDetail = null;
					JSONArray oPMSPostArray = m_oSnapShotOfIntfPostDetailsForPayment.has("pms")? m_oSnapShotOfIntfPostDetailsForPayment.optJSONArray("pms") : new JSONArray();
					for(int i=0; i<oPMSPostArray.length(); i++) {
						JSONObject oTempPostDetail = oPMSPostArray.optJSONObject(i);
						if(oTempPostDetail.has("payment") &&
								oTempPostDetail.optJSONObject("payment").has("cpay_id") &&
								oTempPostDetail.optJSONObject("payment").optString("cpay_id").equals(oCheckPayment.getCpayId())) {
							oPMSPostDetail = oTempPostDetail;
							break;
						}
					}
					
					
					if(!oPaymentMethod.isPaymentInterface(InfVendor.KEY_ASPEN_PMS) || (oPaymentMethod.isPaymentInterface(InfVendor.KEY_ASPEN_PMS) && !bAspenPmsVoided)){
						if(oFuncPMS.pmsVoidPosting(this, oCheckPayment, oPaymentMethod, iPaymentCount, dPreviousPaymentTotal, m_oCheckPaymentList, oPMSPostDetail) == false) {
							m_sErrorMessage = AppGlobal.g_oLang.get()._("fail_to_void_pms_payment")+", "+AppGlobal.g_oLang.get()._("please_try_again");
							return false;
						}
					}
					if(oPaymentMethod.isPaymentInterface(InfVendor.KEY_ASPEN_PMS))
						bAspenPmsVoided = true;
					
					//void standard tcpip
					PosInterfaceConfig oPosInterfaceConfig = oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_PMS).get(0);
					if (oFuncPMS.isAllowPostAfterPayment(oPosInterfaceConfig)) {
						if(this.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_MODE, 0)) {
							String sMode = this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_MODE);
							if (sMode.equals("periodic")) {
								oCheckPayment.addExtraInfoToList(AppGlobal.g_oFuncOutlet.get().getOutletId(), PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_VOID_STATUS, 0, "false");
							}
						}
					}
					
					if(oFuncPMS.isSinglePostingForMultiplePayments(oCheckPayment.getPmsPaymentIntfId()))
						bPmsSinglePosting = true;
				}
				
				// Void general member posting if needed
				if(oPaymentMethod.isMembershipInterfacePayment(InfVendor.KEY_GENERAL)) {
					PosInterfaceConfig oPosInterfaceConfig = oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_MEMBERSHIP_INTERFACE).get(0);
					FuncMembershipInterface oFuncMembershipInterface = new FuncMembershipInterface(oPosInterfaceConfig);
					
					// Do void post
					oFuncMembershipInterface.membershipVoidPosting(this, oCheckPaymentsList, dPreviousPaymentTotal, false, iPaymentCount);
				}
				
				// Void SVC coupon posting if needed
				if (oPaymentMethod.isMembershipInterfacePayment(InfVendor.KEY_LPS_SVC_COUPON)) {
					PosInterfaceConfig oPosInterfaceConfig = oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_MEMBERSHIP_INTERFACE).get(0);
					FuncMembershipInterface oFuncMembershipInterface = new FuncMembershipInterface(oPosInterfaceConfig);
					
					// Do void post
					oFuncMembershipInterface.membershipVoidPosting(this, oCheckPaymentsList, dPreviousPaymentTotal, false, 0);
				}
				
				// Void Loyalty svc payment
				if (oPaymentMethod.isLoyaltySVCPayment()) {
					// Get stored card no. from extra info
					String sSVCCardNumber = oCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_LOYALTY_SVC, PosCheckExtraInfo.VARIABLE_SVC_CARD_NUMBER, 0).getValue();
					int iSvcInterfaceId = 0;
					boolean bSkipLoyaltySvcPayment = false;
					if (this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_LOYALTY_SVC, PosCheckExtraInfo.VARIABLE_AUTO_TOP_UP_CARD_BALANCE) != null && !this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_LOYALTY_SVC, PosCheckExtraInfo.VARIABLE_AUTO_TOP_UP_CARD_BALANCE).isEmpty()) {
						JSONArray oCardBalanceArray;
						try {
							oCardBalanceArray = new JSONArray(this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_LOYALTY_SVC, PosCheckExtraInfo.VARIABLE_AUTO_TOP_UP_CARD_BALANCE));
							if(oCardBalanceArray.length() > 0){
								for(int i = 0; i < oCardBalanceArray.length(); i++){
									if(sSVCCardNumber.equals(oCardBalanceArray.optJSONObject(i).getString("cardNumber"))){
										bSkipLoyaltySvcPayment = true;
										break;
									}
								}
							}
						} catch (JSONException e) {
							AppGlobal.stack2Log(e);
							return false;
						}
					}
					
					if(!bSkipLoyaltySvcPayment){
						for(PosInterfaceConfig oLoyaltyInterfaceConfig : oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_LOYALTY_INTERFACE)){
							if(oLoyaltyInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_GM_LOYALTY_SVC))
								iSvcInterfaceId = oLoyaltyInterfaceConfig.getInterfaceId();
					}
					
					boolean bResult = this.loyaltySvcPayment(true, iSvcInterfaceId, sSVCCardNumber, oCheckPayment.getPayTotal(), oCheckPayment.getCheckExtraInfoArrayList());
					if (!bResult && !this.getLastErrorMessage().isEmpty()) {
						m_sErrorMessage = this.getLastErrorMessage();
						return false;
					}
				}
				}
				
				if(oPaymentMethod.isMembershipInterfacePayment(InfVendor.KEY_ASPEN)){
					List<PosInterfaceConfig> oPaymentInterfaceConfigs = oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_MEMBERSHIP_INTERFACE);
					for(PosInterfaceConfig oPaymentInterfaceConfig: oPaymentInterfaceConfigs)
						bAspenNeedVoid = true;
				}
				
				//void 2700 payment
				if(oPaymentMethod.isMembershipInterfacePayment(InfVendor.KEY_2700)){
					PosInterfaceConfig oPosInterfaceConfig = oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_MEMBERSHIP_INTERFACE).get(0);
					FuncMembershipInterface oFuncMembershipInterface = new FuncMembershipInterface(oPosInterfaceConfig);
					if(oFuncMembershipInterface.memberSerialPortPosting(this, oCheckPayment, oPaymentMethod, iPaymentCount, dPreviousPaymentTotal, m_oCheckPaymentList, true) == false){
						m_sErrorMessage = AppGlobal.g_oLang.get()._("fail_to_void_2700_payment")+", "+AppGlobal.g_oLang.get()._("please_try_again");
						return false;
					}
				}
				
				//void epos point payment
				if(oPaymentMethod.isMembershipInterfacePayment(InfVendor.KEY_EPOS)) {
					PosInterfaceConfig oPosInterfaceConfig = oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_MEMBERSHIP_INTERFACE).get(0);
					if (oPosInterfaceConfig != null) {
						FuncMembershipInterface oMembershipInterface = new FuncMembershipInterface(oPosInterfaceConfig);
						oMembershipInterface.membershipVoidPosting(this, m_oCheckPaymentList, dPreviousPaymentTotal, true, 0);
					}
				}
				
				// void bally
				if(bVoidPayment && oPaymentMethod.isGamingInterfacePayment(InfVendor.KEY_BALLY)){
					PosInterfaceConfig oPosInterfaceConfig = oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_GAMING_INTERFACE).get(0);
					FuncGamingInterface oFuncGamingInterface = new FuncGamingInterface(oPosInterfaceConfig);
					
					if (!performVoidBally(oCheckPayment, oPosInterfaceConfig, oFuncGamingInterface, oCheckPaymentsList))
						return false;
				}
				
				// Update coupon payment status
				if(oCheckPayment.getPaymentType().equals(PosCheckPayment.PAYMENT_TYPE_COUPON) && oCheckPayment.getRefData(1) != null && oCheckPayment.getRefDataByIndexAndKey(1, "coupon_number") != null) {
					FuncCoupon oCouponPayment = new FuncCoupon();
					oCouponPayment.setStartCoupon(oCheckPayment.getRefDataByIndexAndKey(1, "coupon_number"));
					oCouponPayment.setEndCoupon(oCheckPayment.getRefDataByIndexAndKey(1, "coupon_number"));
					oCouponPayment.setRedeemItem("");
					oCouponPayment.setCouponCurrentStatus(FuncCoupon.COUPON_STATUS_USED);
					oCouponPayment.setCouponNextStatus(FuncCoupon.COUPON_STATUS_SOLD);
					
					oCouponPayment.updateCoupon(FuncCoupon.UPDATE_COUPON_TYPE_USE_AS_PAYMENT);
				}
				
				//void payment gateway transaction
				if (oPaymentMethod.isPaymentInterface(InfVendor.KEY_SPA_STANDARD)) {
					PosInterfaceConfig oPosInterfaceConfig = oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_PAYMENT_INTERFACE).get(0);
					PosPaymentGatewayTransactions oPosPaymentGatewayTransactions  = oCheckPayment.getPosPaymentGatewayTransactionsList().getPosPaymentGatewayTransactionsByIndex(0);
					if (oPosInterfaceConfig != null && !oPosPaymentGatewayTransactions.getPgtxId().isEmpty() && oPosPaymentGatewayTransactions.getIntfId() > 0) {
						if(AppGlobal.g_iLogLevel >= 1){
							AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "void #" + iPaymentCount + " Begin void SPA direct sale");
						}
						if(oPosPaymentGatewayTransactions.getIntfId() == oPosInterfaceConfig.getInterfaceId()){
							oPosPaymentGatewayTransactions.setCpayId("");
							
							if(oPosPaymentGatewayTransactions.getType().equals(PosPaymentGatewayTransactions.TYPE_SALE)){
								if(AppGlobal.g_iLogLevel >= 1){
									AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "void #" + iPaymentCount + " Begin void SPA direct sale");
								}
								
								FuncPaymentInterface oFuncPaymentInterface = new FuncPaymentInterface(oPosInterfaceConfig);
								
								if(!oFuncPaymentInterface.cardAuthorization(this, FramePaymentCardAuthorization.AUTHORIZATION_TYPE.sale.name(), 
										FramePaymentCardAuthorization.AUTHORIZATION_TYPE.sale.name(), oPosPaymentGatewayTransactions.getRefNo(), 
										StringLib.BigDecimalToString(oPosPaymentGatewayTransactions.getAmount(), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getPayDecimal()), 
										StringLib.BigDecimalToString(oPosPaymentGatewayTransactions.getAmount().add(oCheckPayment.getPayTips()), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getPayDecimal()),
										StringLib.BigDecimalToString(oCheckPayment.getSurcharge(), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getPayDecimal()),
										oPosPaymentGatewayTransactions.getTraceNo(), oPosPaymentGatewayTransactions.getInvoiceNo(), 
										oPosPaymentGatewayTransactions.getIssuer(), oPosPaymentGatewayTransactions.getAuthCode(), 
										oPosPaymentGatewayTransactions.getToken()))
									return false;
								else {
									if(oFuncPaymentInterface.getPosPaymentGatewayTransactions() != null){
										removePaymentGatewayTransFromList(oPosPaymentGatewayTransactions.getRefNo());
										oPosPaymentGatewayTransactions.setStatus(PosPaymentGatewayTransactions.STATUS_VOIDED);
										for(PosCheckPayment oPosCheckPayment : m_oCheckPaymentList){
											if(oPosCheckPayment.getCpayId().equals(oCheckPayment.getCpayId())){
												oPosCheckPayment.voidSalePaymentGatewayTransaction();
												break;
											}
										}
										// Print the authorization slip
										this.printCardAuthorizationSlip(FramePaymentCardAuthorization.AUTHORIZATION_TYPE.void_sale.name(), oPosPaymentGatewayTransactions.constructAddSaveJSON(true) ,oPosPaymentGatewayTransactions.getAmount().setScale(AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal(), BigDecimal.ROUND_HALF_UP));
									}
									else 
										return false;
								}
								
								if(AppGlobal.g_iLogLevel >= 1)
									AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "void #" + iPaymentCount + " After void SPA direct sale");
							}
							// Handle adjust payment handling in standard SPA
							/*
							else {
							}
							*/
						}
					}
				}
				
				//void generalV2 payment --- award cancellation (but no need to void for negative check)
				if(oPaymentMethod.isMembershipInterfacePayment(InfVendor.KEY_GENERAL_V2) && !this.isNegativeCheck()) {
					PosInterfaceConfig oPosInterfaceConfig = oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_MEMBERSHIP_INTERFACE).get(0);
					FuncMembershipInterface oFuncMembershipInterface = new FuncMembershipInterface(oPosInterfaceConfig);

					//award cancellation
					if(!this.voidPostingForGeneralV2(oPosInterfaceConfig, dPreviousPaymentTotal, oFuncMembershipInterface))
						return false;

					if(AppGlobal.g_iLogLevel >= 1)
						AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "void #" + 0 + " After void GENERAL_V2");
				}
				
				dPreviousPaymentTotal = dPreviousPaymentTotal.add(oCheckPayment.getPayTotal());
				
				List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);
				if (!oInterfaceConfigList.isEmpty()) {
					for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
						if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
							int iLangIndex = 1;
							if(oPosInterfaceConfig.getInterfaceConfig().has("general_setup") && oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").has("language_index"))
							iLangIndex = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").optJSONObject("language_index").optInt("value");
							HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
							oSurveillanceEventInfo.put("checkNum", this.getCheckPrefixNo());
							oSurveillanceEventInfo.put("amount", oCheckPayment.getPayTotal().negate().toPlainString());	// ken's approach ==> m_oFuncPayment.getCheckPaymentList().get(iItemIndex).getPayTotal().toPlainString()
							PosPaymentMethod oPosPaymentMethod = oPaymentMethodList.getPaymentMethodList().get(oCheckPayment.getPaymentMethodId());
							oSurveillanceEventInfo.put("tenderTypeNum", oPosPaymentMethod.getPaymentCode()); //ken's approach (can only get payment id not payment code)==> String.valueOf(m_oFuncPayment.getCheckPaymentList().get(iItemIndex).getPaymentMethodId())
							oSurveillanceEventInfo.put("tenderTypeName", oPosPaymentMethod.getName(iLangIndex));
							this.doSurveillanceEvent(FuncSurveillance.SURVEILLANCE_TYPE_TENDER_VOID, oSurveillanceEventInfo);
						}
					}
				}
				
				// surveillance eConnect check termination event: TipVoid
				if(oCheckPayment.getPayTips().compareTo(BigDecimal.ZERO) > 0) {
					HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
					oSurveillanceEventInfo.put("checkNum", this.getCheckPrefixNo());
					oSurveillanceEventInfo.put("amount", oCheckPayment.getPayTips().negate().toPlainString());
					this.doSurveillanceEvent(FuncSurveillance.SURVEILLANCE_TYPE_TIP_VOID, oSurveillanceEventInfo);
				}
			}
			
			// do void check level PMS interface
			if(bPmsSinglePosting) {
				FuncPMS oFuncPMS = new FuncPMS(false);
				if(oFuncPMS.pmsVoidPosting(this, null, null, 0, BigDecimal.ZERO, m_oCheckPaymentList, null) == false) {
					m_sErrorMessage = AppGlobal.g_oLang.get()._("fail_to_void_pms_payment")+", "+AppGlobal.g_oLang.get()._("please_try_again");
					return false;
				}
			}
			
			if(oVoidedCheckPayments.size() > 0) {
				FuncPaymentInterface oFuncPaymentInterface = new FuncPaymentInterface(null);
				oFuncPaymentInterface.printVoidPostingSlip(FuncPaymentInterface.PRINT_SLIP_TYPE_SCAN_PAY_VOID, oVoidedCheckPayments);
			}
			return true;
		}
		
		//Normal release payments process
		m_oCheck = new PosCheck();
		if (m_oCheck.readByCheckNo(iBusinessDayId, iOutletId, sCheckPrefixNum, 1, true).equals(PosCheck.API_RESULT_SUCCESS) == false) {
			m_sErrorMessage = AppGlobal.g_oLang.get()._("check_is_not_found");
			return false;
		}
		
		if (bVoidAllPayment && !isPaid(false)) {
			m_sErrorMessage = AppGlobal.g_oLang.get()._("check_is_not_paid");
			return false;
		}
		
		// Check if table is in use by other station
		m_oOutletTable.readByOutletIdTable(m_oCheck.getOutletId(), iTableNo, sTableExt);
		if (bVoidAllPayment && !m_oOutletTable.getOtblId().equals("")) {
			if (m_oOutletTable.getStationId() > 0 && m_oOutletTable.getStationId() != AppGlobal.g_oFuncStation.get().getStationId()) {
				FuncStation oStation = new FuncStation();
				if(oStation.loadStationById(m_oOutletTable.getStationId())){
					String sStationName = oStation.getName(AppGlobal.g_oCurrentLangIndex.get());
					m_sErrorMessage = AppGlobal.g_oLang.get()._("table_is_locked_by_station")+" "+sStationName;
				}else
					m_sErrorMessage = AppGlobal.g_oLang.get()._("table_is_locked_by_station")+" "+m_oOutletTable.getStationId();
				return false;
			}
			
			if(!m_oOutletTable.getCheckId().isEmpty()){
				m_sErrorMessage = AppGlobal.g_oLang.get()._("table")+ " " + AppGlobal.g_oFuncOutlet.get().getTableNameWithTableNo(Integer.toString(m_oOutletTable.getTable()), m_oOutletTable.getTableExtension())[AppGlobal.g_oCurrentLangIndex.get()-1] + AppGlobal.g_oLang.get()._("is_occupied_please_select_other_table");
				return false;
			}
		}
		
		//void OGS payment if needed
		List<PosInterfaceConfig> oOgsInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_PAYMENT_INTERFACE);
		if (bVoidAllPayment && !oOgsInterfaceConfigList.isEmpty()) {
			PosInterfaceConfig oPosInterfaceConfig = oOgsInterfaceConfigList.get(0);
			if(oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_OGS)) {
				String sInterfaceId = this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID);
				if (!sInterfaceId.isEmpty() && Integer.parseInt(sInterfaceId) == oPosInterfaceConfig.getInterfaceId()) {	// check whether check have related interface id in check extra info
					FuncPaymentInterface oFuncPaymentInterface = new FuncPaymentInterface(oPosInterfaceConfig);
					
					// after void ogs payment successfully, mark status of check extra info to deleted
					if(oFuncPaymentInterface.releaseOgsPayment(this)) {
						for(PosCheckExtraInfo oCheckExtraInfo: this.getCheckExtraInfoList()) {
							if(oCheckExtraInfo.getBy().equals(PosCheckExtraInfo.BY_PAYMENT))
								oCheckExtraInfo.setStatus(PosCheckExtraInfo.STATUS_DELETED);
						}
					} else {
						m_sErrorMessage = oFuncPaymentInterface.getLastErrorMessage();
						return false;
					}
				}
			}
		}
		
		//Loyalty Inteface - gm_loyalty
		//check whether having loyalty reference ID for opened check
		String sLoyaltyInterfaceCode = "";
		HashMap<String, String> oPostingInfo = new HashMap<String, String>();
		String sLoyaltySvcInterfaceId = "";
		String sLoyaltyInterfaceId = "";
		BigDecimal dLoyaltySvcCardBalance = BigDecimal.ZERO;
		if (bVoidAllPayment) {
			List<PosInterfaceConfig> oLoyaltyInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_LOYALTY_INTERFACE);
			for (PosInterfaceConfig oPosInterfaceConfig : oLoyaltyInterfaceConfigList) {
				if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_GM_LOYALTY_SVC)) {
					// loyalty svc interface id, code
					sLoyaltySvcInterfaceId = Integer.toString(oPosInterfaceConfig.getInterfaceId());
					
						FuncLoyaltySvc oAssignedLoyaltySvc = new FuncLoyaltySvc();
						
						if (!this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_LOYALTY_SVC, PosCheckExtraInfo.VARIABLE_AUTO_TOP_UP_CARD_BALANCE).isEmpty()) {
							try {
								JSONArray oCardBalanceArray = new JSONArray(this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_LOYALTY_SVC, PosCheckExtraInfo.VARIABLE_AUTO_TOP_UP_CARD_BALANCE));
								if(oCardBalanceArray.length() > 0){
									for(int i=0; i<oCardBalanceArray.length(); i++){
										JSONObject oCardBalanceObj = oCardBalanceArray.optJSONObject(i);
									// Loyalty Interface Id
									sLoyaltyInterfaceId = oCardBalanceObj.optString("loyaltyInterfaceId", "");
									if (sLoyaltyInterfaceId.isEmpty() || sLoyaltyInterfaceId == null){
										FormDialogBox oFormDialogBox = new FormDialogBox(AppGlobal.g_oLang.get()._("ok"), null);
										oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._("error"));
										oFormDialogBox.setMessage(AppGlobal.g_oLang.get()._("missing_loyalty_setup"));
										oFormDialogBox.show();
										oFormDialogBox = null;
										
										return false;
									}
									// Card Number
										String sCardNumber = oCardBalanceObj.optString("cardNumber", "");
										BigDecimal dCardBalanceAfterPayment = new BigDecimal(oCardBalanceObj.optString("cardBalance", ""));
									
									if (!sCardNumber.isEmpty()) {
										oAssignedLoyaltySvc.svcSearchCardNumber(sCardNumber, "", sLoyaltyInterfaceId, sLoyaltySvcInterfaceId, this, 0);
										HashMap<String, String> oTmpInfo = null;
										oTmpInfo = new HashMap<String, String>();
										oTmpInfo.put("interfaceId", sLoyaltyInterfaceId);
										oTmpInfo.put("svcInterfaceId", sLoyaltySvcInterfaceId);
										oTmpInfo.put("outletId", Integer.toString(AppGlobal.g_oFuncOutlet.get().getOutletId()));
										oTmpInfo.put("outletCode", AppGlobal.g_oFuncOutlet.get().getOutletCode());
										oTmpInfo.put("sessionId", AppGlobal.g_oFuncStation.get().getLoyaltySessionId());
										oTmpInfo.put("svcSessionId", AppGlobal.g_oFuncStation.get().getLoyaltySessionId());
										oTmpInfo.put("memberNumber", sCardNumber);
										oTmpInfo.put("svcCardNumber", sCardNumber);
										oAssignedLoyaltySvc.searchCard(oTmpInfo);
										
										dLoyaltySvcCardBalance = oAssignedLoyaltySvc.getcheckBalanceBonusBalance();
									}
									
									if (dCardBalanceAfterPayment.compareTo(dLoyaltySvcCardBalance) != 0) {
										FormDialogBox oFormDialogBox = new FormDialogBox(AppGlobal.g_oLang.get()._("ok"), null);
										oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._("error"));
										oFormDialogBox.setMessage(AppGlobal.g_oLang.get()._("current_card_balance_is_not_equal_to_previous_card_balance"));
										oFormDialogBox.show();
										oFormDialogBox = null;
										
										return false;
									}
								}
								}
							} catch (JSONException e) {
								AppGlobal.stack2Log(e);
							}
						}
					break;
				}
			}
			for (PosInterfaceConfig oPosInterfaceConfig : oLoyaltyInterfaceConfigList) {
				// interface id, code
				sLoyaltyInterfaceId = Integer.toString(oPosInterfaceConfig.getInterfaceId());
				sLoyaltyInterfaceCode = oPosInterfaceConfig.getInterfaceVendorKey();
				// gm loyalty
				if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_GM_LOYALTY)) {
					oPostingInfo.put("interfaceId", sLoyaltyInterfaceId);
					oPostingInfo.put("interfaceCode", sLoyaltyInterfaceCode);
					oPostingInfo.put("sessionId", AppGlobal.g_oFuncStation.get().getLoyaltySessionId());
					
					// reference id
					if (!this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_TRACE_ID).isEmpty()) {
						oPostingInfo.put("referenceId", this.getCheckExtraInfoValueListBySectionVariable(
								PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_TRACE_ID));
						
						FuncLoyalty oAssignedLoyalty = new FuncLoyalty();
						oAssignedLoyalty.releaseTrans(oPostingInfo);
					}
				}
				// give x release payment for topup or activate card
				else if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_GIVEX)) {
					for (FuncCheckParty oFuncCheckParty : m_oFuncCheckPartyList) {
						for (List<FuncCheckItem> oFuncItemList : oFuncCheckParty.getWholeItemList()) {
							for (FuncCheckItem oFuncCheckItem : oFuncItemList) {
								if ((sLoyaltyInterfaceId.equals(oFuncCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_INTERFACE_ID))
										&& (oFuncCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_REMARK).equals("TU")
												|| oFuncCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_REMARK).equals("IS")))) {
									DateTime oCurrentTime = AppGlobal.getCurrentTime(false);
									String sFormatTime = DateTimeFormat.forPattern("HHmmss").print(oCurrentTime);
									String sTransactionCode = this.getCheckNo() + sFormatTime;
									
									oPostingInfo.put("interfaceId", sLoyaltyInterfaceId);
									oPostingInfo.put("transactionCode", sTransactionCode);
									oPostingInfo.put("authCode", oFuncCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_AUTH_CODE));
									oPostingInfo.put("cardNumber", oFuncCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_CARD_NO));
									oPostingInfo.put("amount", oFuncCheckItem.getNetItemTotal().toString());
									
									FuncLoyalty oAssignedLoyalty = new FuncLoyalty();
									if (!oAssignedLoyalty.releaseTrans(oPostingInfo)) {
										FormDialogBox oFormDialogBox = new FormDialogBox(
												AppGlobal.g_oLang.get()._("ok"), null);
										oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._("error"));
										oFormDialogBox.setMessage(AppGlobal.g_oLang.get()._("invalid_response"));
										oFormDialogBox.show();
										oFormDialogBox = null;
										return false;
									}
								}
							}
						}
					}
				}
			}
		}
		
		
		boolean bVoid = true;
		boolean bResult = false;
		if (bVoidAllPayment) {
			// Reverse Svc Auto Top Up
			bResult = this.loyaltySvcReverseAutoTopUpAndDeduction();
			if (!bResult && !this.getLastErrorMessage().isEmpty()) 
				return false;
			
			if(bResult)
				bClearAutoTopUpExtraInfo = true;
				
			// Void Loyalty Add Value
			bResult = this.loyaltySvcAddValueOrIssueCard(bVoid);
			if (!bResult && !this.getLastErrorMessage().isEmpty()) {
				return false;
			}
		}
		
		BigDecimal dPreviousPaymentTotal = BigDecimal.ZERO;
		int iPaymentCount = 0;
		// For SCAN PAY void slip
		List<PosCheckPayment> oVoidedCheckPayments = new ArrayList<PosCheckPayment>();
		String sCreditCardMethodType = FuncCreditCardOperation.METHOD_TYPE_NORMAL_CREDIT_CARD;
		boolean bIsFirstPosting = true;
		bPmsSinglePosting = false;
		
		List<PosCheckPayment> oPosCheckPaymentList;
		if (iPaymentIndex >= 0) {
			oPosCheckPaymentList = new ArrayList<PosCheckPayment>();
			oPosCheckPaymentList.add(m_oCheckPaymentList.get(iPaymentIndex));
		} else
			oPosCheckPaymentList = m_oCheckPaymentList;
		
		//General v2 interface - do point refund for any case because user can change the payment list after release payment
		List<PosInterfaceConfig> oPosInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_MEMBERSHIP_INTERFACE);
		for(PosInterfaceConfig oPosInterfaceConfig : oPosInterfaceConfigList) {
			// no need to do point refund for negative check
			if(oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_GENERAL_V2) && !this.isNegativeCheck()) {
				if(getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID) == null
						|| getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID).isEmpty())
					continue;

				int iInterfaceId = Integer.parseInt(this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID));
				if (iInterfaceId != oPosInterfaceConfig.getInterfaceId())
					break;

				FuncMembershipInterface oFuncMembershipInterface = new FuncMembershipInterface(oPosInterfaceConfig);
				if(this.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_EARN, 0)){
					String sPointEarn = this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_EARN);
					if(sPointEarn != null && !sPointEarn.isEmpty()) {
						//do point refund
						if(!this.pointRefundForGeneralV2(oFuncMembershipInterface))
							return false;
					}
				}
			}
		}
		
		for(PosCheckPayment oCheckPayment:oPosCheckPaymentList) {
			iPaymentCount++;
			
			if(oCheckPayment.getNonRevenue().equals(PosCheck.NON_REVENUE_PAYMENT) && !this.getNonRevenue().equals(PosCheck.NON_REVENUE_ADVANCE_ORDER))
				this.setNonRevenue(PosCheck.NON_REVENUE_NO, false);
			
			PosPaymentMethod oPaymentMethod = oPaymentMethodList.getPaymentMethodList().get(oCheckPayment.getPaymentMethodId());
			
			// Create a list for some interface usage
			List<PosCheckPayment> oCheckPaymentsList = new ArrayList<PosCheckPayment>();
			oCheckPaymentsList.add(oCheckPayment);
			
			// Void SCAN PAY
			if (bVoidAllPayment && oPaymentMethod.isPaymentInterface(InfVendor.KEY_SCAN_PAY)) {
				PosInterfaceConfig oPosInterfaceConfig = oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_PAYMENT_INTERFACE).get(0);
				FuncPaymentInterface oFuncPaymentInterface = new FuncPaymentInterface(oPosInterfaceConfig);
				
				if(oFuncPaymentInterface.doVoidPosting(this, oCheckPayment) == false) {
					if(oFuncPaymentInterface.getLastErrorCode() == Integer.parseInt(FuncPaymentInterface.ERROR_CODE_QUERY_TIMEOUT)) {
						m_sWarningMessage = oFuncPaymentInterface.getLastErrorMessage();
					}else {
						m_sErrorMessage = oFuncPaymentInterface.getLastErrorMessage();
						return false;
					}
				}else
					oVoidedCheckPayments.add(oCheckPayment);
			}
			
			// Void pms posting if needed
			if(oCheckPayment.havePmsPayment()) {
				PosInterfaceConfig oPosInterfaceConfig = oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_PMS).get(0);
				// For partial payment, it only available void standard PMS payment in void payment function, but not release payment function
				if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_STANDARD_TCPIP) && !bVoidPayment && iPaymentIndex < 0)
					continue;
				
				FuncPMS oFuncPMS = new FuncPMS(true);
				if((!oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ASPEN_PMS) || !bAspenPmsVoided && oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ASPEN_PMS))){
					if(oFuncPMS.pmsVoidPosting(this, oCheckPayment, oPaymentMethod, iPaymentCount, dPreviousPaymentTotal, m_oCheck.getCheckPaymentArrayList(), null) == false) {
						m_sErrorMessage = AppGlobal.g_oLang.get()._("fail_to_void_pms_payment")+", "+AppGlobal.g_oLang.get()._("please_try_again");
						return false;
					}
				}
				if(oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ASPEN_PMS))
					bAspenPmsVoided = true;
				
				//void standard tcpip
				if (oFuncPMS.isAllowPostAfterPayment(oPosInterfaceConfig)) {
					if(this.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_MODE, 0)) {
						String sMode = this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_MODE);
						if (sMode.equals("periodic")) {
							oCheckPayment.addExtraInfoToList(AppGlobal.g_oFuncOutlet.get().getOutletId(), PosCheckExtraInfo.SECTION_PMS, PosCheckExtraInfo.VARIABLE_VOID_STATUS, 0, "false");
						}
					}
				}
				
				if(oFuncPMS.isSinglePostingForMultiplePayments(oCheckPayment.getPmsPaymentIntfId()))
					bPmsSinglePosting = true;
			}
			
			if (bVoidAllPayment) {
				// Void general member posting if needed
				if(oPaymentMethod.isMembershipInterfacePayment(InfVendor.KEY_GENERAL)) {
					PosInterfaceConfig oPosInterfaceConfig = oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_MEMBERSHIP_INTERFACE).get(0);
					FuncMembershipInterface oFuncMembershipInterface = new FuncMembershipInterface(oPosInterfaceConfig);
					
					// Do void post
					oFuncMembershipInterface.membershipVoidPosting(this, oCheckPaymentsList, dPreviousPaymentTotal, false, iPaymentCount);
				}
				
				// Void member - svc posting if needed
				if (oPaymentMethod.isMembershipInterfacePayment(InfVendor.KEY_LPS_SVC)) {
					PosInterfaceConfig oPosInterfaceConfig = oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_MEMBERSHIP_INTERFACE).get(0);
					FuncMembershipInterface oFuncMembershipInterface = new FuncMembershipInterface(oPosInterfaceConfig);
					
					
					// Do void post
					oFuncMembershipInterface.membershipVoidPosting(this, oCheckPaymentsList, dPreviousPaymentTotal, false, 0);
					dPreviousPaymentTotal = dPreviousPaymentTotal.add(oCheckPayment.getPayTotal());
				}
				
				// Void SVC coupon posting if needed
				if (oPaymentMethod.isMembershipInterfacePayment(InfVendor.KEY_LPS_SVC_COUPON)) {
					PosInterfaceConfig oPosInterfaceConfig = oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_MEMBERSHIP_INTERFACE).get(0);
					FuncMembershipInterface oFuncMembershipInterface = new FuncMembershipInterface(oPosInterfaceConfig);
					
					// Do void post
					oFuncMembershipInterface.membershipVoidPosting(this, oCheckPaymentsList, dPreviousPaymentTotal, false, 0);
				}
			}

			// Void aspen member posting if needed
			/*if (oPaymentMethod.isMembershipInterfacePayment(InfVendor.KEY_ASPEN)) {
				List<PosInterfaceConfig> oPaymentInterfaceConfigs = oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_MEMBERSHIP_INTERFACE);
				for(PosInterfaceConfig oPaymentInterfaceConfig: oPaymentInterfaceConfigs) {
					JSONObject oConfigObject = oPaymentInterfaceConfig.getConfigValue();
					if (!oConfigObject.optJSONObject("type").optJSONObject("params").optJSONObject("payment_type").optString("value").equals("deposit"))
						bAspenNeedVoid = true;
				}
			}*/
			if (oPaymentMethod.isMembershipInterfacePayment(InfVendor.KEY_ASPEN))
				bAspenNeedVoid = true;
			
			// Void Loyalty svc payment
			if (bVoidAllPayment && oPaymentMethod.isLoyaltySVCPayment()) {
				bVoid = true;
				// Get stored card no. from extra info
				String sSVCCardNumber = oCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_LOYALTY_SVC, PosCheckExtraInfo.VARIABLE_SVC_CARD_NUMBER, 0).getValue();
				int iSvcInterfaceId = 0;
				
				for(PosInterfaceConfig oLoyaltyInterfaceConfig : oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_LOYALTY_INTERFACE)){
					if(oLoyaltyInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_GM_LOYALTY_SVC))
						iSvcInterfaceId = oLoyaltyInterfaceConfig.getInterfaceId();
				}
				boolean bSkipLoyaltySvcPayment = false;
				if (this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_LOYALTY_SVC, PosCheckExtraInfo.VARIABLE_AUTO_TOP_UP_CARD_BALANCE) != null && !this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_LOYALTY_SVC, PosCheckExtraInfo.VARIABLE_AUTO_TOP_UP_CARD_BALANCE).isEmpty()) {
					JSONArray oCardBalanceArray;
					try {
						oCardBalanceArray = new JSONArray(this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_LOYALTY_SVC, PosCheckExtraInfo.VARIABLE_AUTO_TOP_UP_CARD_BALANCE));
						if(oCardBalanceArray.length() > 0){
							for(int i=0; i<oCardBalanceArray.length(); i++){
								if(sSVCCardNumber.equals(oCardBalanceArray.optJSONObject(i).getString("cardNumber"))){
									bSkipLoyaltySvcPayment = true;
									break;
								}
							}
						}
					} catch (JSONException e) {
						// TODO Auto-generated catch block
						AppGlobal.stack2Log(e);
						return false;
					}
				}
				
				if(!bSkipLoyaltySvcPayment){
					bResult = this.loyaltySvcPayment(bVoid, iSvcInterfaceId, sSVCCardNumber, oCheckPayment.getPayTotal(), oCheckPayment.getCheckExtraInfoArrayList());
					if (!bResult && !this.getLastErrorMessage().isEmpty()) {
						FormDialogBox oFormDialogBox = new FormDialogBox(AppGlobal.g_oLang.get()._("ok"), null);
						oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._("error"));
						oFormDialogBox.setMessage(this.getLastErrorMessage());
						oFormDialogBox.show();
						oFormDialogBox = null;
						
						return false;
					}
				}
			}
			
			// Void Give X points redeem payment
			if (bVoidPayment && oPaymentMethod.isLoyaltyInterfacePayment(InfVendor.KEY_GIVEX)){
				HashMap<String, String> oReleaseInfo = new HashMap<String, String>();
				
				//interface id
				String sInterfaceId = oCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0).getValue();
				oReleaseInfo.put("interfaceId", sInterfaceId);
				
				//transaction code
				String sTranscationCode = oCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_TRACE_ID, 0).getValue();
				oReleaseInfo.put("transactionCode", sTranscationCode);
				
				//card number
				String sCardNumber = oCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_CARD_NO, 0).getValue();
				oReleaseInfo.put("cardNumber", sCardNumber);
				
				//amount = pay total + tips
				String sAmount = (oCheckPayment.getPayTotal().add(oCheckPayment.getPayTips())).toPlainString();
				oReleaseInfo.put("amount", sAmount);
				
				//auth code
				String sAuthCode = oCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_AUTH_CODE, 0).getValue();
				oReleaseInfo.put("authCode", sAuthCode);
				
				FuncLoyalty oAssignedLoyalty = new FuncLoyalty();
				if(!oAssignedLoyalty.releaseTrans(oReleaseInfo)){
					FormDialogBox oFormDialogBox = new FormDialogBox(AppGlobal.g_oLang.get()._("ok"), null);
					oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._("error"));
					oFormDialogBox.setMessage(AppGlobal.g_oLang.get()._("invalid_response"));
					oFormDialogBox.show();
					oFormDialogBox = null;
					return false;
				}
			}
			
			//release voucher payment for galaxy
			if(bVoidPayment) {
				String sErrorMsg = "";
				sErrorMsg = oFuncPayment.releaseVoucherPayment(oCheckPayment);
				if(!sErrorMsg.isEmpty()) {
					m_sErrorMessage = sErrorMsg;
					return false;
				}
			}
			
			if (bVoidAllPayment) {
				// Void 2700 posting
				if(oPaymentMethod.isMembershipInterfacePayment(InfVendor.KEY_2700)){
					PosInterfaceConfig oPosInterfaceConfig = oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_MEMBERSHIP_INTERFACE).get(0);
					FuncMembershipInterface oFuncMembershipInterface = new FuncMembershipInterface(oPosInterfaceConfig);
					if(!oFuncMembershipInterface.memberSerialPortPosting(this, oCheckPayment, oPaymentMethod, iPaymentCount, dPreviousPaymentTotal, m_oCheckPaymentList, true)){
						m_sErrorMessage = AppGlobal.g_oLang.get()._("fail_to_void_2700_payment")+", "+AppGlobal.g_oLang.get()._("please_try_again");
						return false;
					}
				}
				
				//void epos point payment
				if(oPaymentMethod.isMembershipInterfacePayment(InfVendor.KEY_EPOS)) {
					PosInterfaceConfig oPosInterfaceConfig = oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_MEMBERSHIP_INTERFACE).get(0);
					if (oPosInterfaceConfig != null) {
						FuncMembershipInterface oMembershipInterface = new FuncMembershipInterface(oPosInterfaceConfig);
						oMembershipInterface.membershipVoidPosting(this, m_oCheckPaymentList, dPreviousPaymentTotal, true, 0);
					}
				}
				
				if (oPaymentMethod.isCreditCardPaymentType()) {
					if (oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_PERIPHERAL_DEVICE) != null) {
						List<PosInterfaceConfig> oPosInterfaceConfigs = oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_PERIPHERAL_DEVICE);
						for (PosInterfaceConfig oPosInterfaceConfig:oPosInterfaceConfigs) {
							if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_DEVICE_MANAGER)) {
								if(oPosInterfaceConfig.getConfigValue() != null)
									sCreditCardMethodType = oPosInterfaceConfig.getConfigValue().optJSONObject("general").optJSONObject("params").optJSONObject("payment_type").optString("value");
								boolean bSuccess = false;
								for (FuncCheckListener listener : listeners) {
									bSuccess = listener.FuncCheck_creditCardSpectraVoidPayment(oCheckPayment, sCreditCardMethodType, bIsFirstPosting);
									if (!bSuccess)
										break;
								}
								if (!bSuccess)
									return false;
								bIsFirstPosting = false;
								
								break;
							}
						}
					}
				}
			}
			
			// void bally
			if(bVoidPayment && oPaymentMethod.isGamingInterfacePayment(InfVendor.KEY_BALLY)){
				PosInterfaceConfig oPosInterfaceConfig = oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_GAMING_INTERFACE).get(0);
				FuncGamingInterface oFuncGamingInterface = new FuncGamingInterface(oPosInterfaceConfig);
				
				if (!performVoidBally(oCheckPayment, oPosInterfaceConfig, oFuncGamingInterface, oCheckPaymentsList))
					return false;
			}
			
			if (bVoidPayment) {
				//void payment gateway transaction
				if (oPaymentMethod.isPaymentInterface(InfVendor.KEY_SPA_STANDARD)) {
					if(oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_PAYMENT_INTERFACE) != null){
						PosInterfaceConfig oPosInterfaceConfig = oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_PAYMENT_INTERFACE).get(0);
						PosPaymentGatewayTransactions oPosPaymentGatewayTransactions  = oCheckPayment.getPosPaymentGatewayTransactionsList().getPosPaymentGatewayTransactionsByIndex(0);
						
						PosPaymentGatewayTransactions oPaymentGatewayTransaction = m_oCheck.getPaymentGatewayTransArrayList().getPosPaymentGatewayTransactionByCpayId(oCheckPayment.getCpayId());
						if(oPaymentGatewayTransaction != null)
							oPaymentGatewayTransaction.setCpayId("");
						
						for(PosCheckPayment oPosCheckPayment : m_oCheckPaymentList){
							PosPaymentGatewayTransactions oCheckPaymentGatewayTransaction = oPosCheckPayment.getPosPaymentGatewayTransactionsList().getPosPaymentGatewayTransactionByCpayId(oCheckPayment.getCpayId());
							if(oCheckPaymentGatewayTransaction != null)
								oCheckPaymentGatewayTransaction.setCpayId("");
						}
						
						if(oPosInterfaceConfig != null && oPosPaymentGatewayTransactions.getIntfId() == oPosInterfaceConfig.getInterfaceId()){
							oPosPaymentGatewayTransactions.setCpayId("");
							if (oPosPaymentGatewayTransactions.getType().equals(PosPaymentGatewayTransactions.TYPE_SALE)) {
								
								if(AppGlobal.g_iLogLevel >= 1){
									AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "void #" + iPaymentCount + " Begin void SPA direct sale");
								}
								
								FuncPaymentInterface oFuncPaymentInterface = new FuncPaymentInterface(oPosInterfaceConfig);
								
								if(!oFuncPaymentInterface.cardAuthorization(this, FramePaymentCardAuthorization.AUTHORIZATION_TYPE.sale.name(), 
										FramePaymentCardAuthorization.AUTHORIZATION_TYPE.sale.name(), oPosPaymentGatewayTransactions.getRefNo(), 
										StringLib.BigDecimalToString(oPosPaymentGatewayTransactions.getAmount(), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getPayDecimal()), 
										StringLib.BigDecimalToString(oPosPaymentGatewayTransactions.getAmount().add(oCheckPayment.getPayTips()), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getPayDecimal()),
										StringLib.BigDecimalToString(oCheckPayment.getSurcharge(), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getPayDecimal()),
										oPosPaymentGatewayTransactions.getTraceNo(), oPosPaymentGatewayTransactions.getInvoiceNo(), 
										oPosPaymentGatewayTransactions.getIssuer(), oPosPaymentGatewayTransactions.getAuthCode(), 
										oPosPaymentGatewayTransactions.getToken()))
									return false;
								else {
									if(oFuncPaymentInterface.getPosPaymentGatewayTransactions() != null){
										// void complete auth transaction
										removePaymentGatewayTransFromList(oPosPaymentGatewayTransactions.getRefNo());
										oPosPaymentGatewayTransactions.setStatus(PosPaymentGatewayTransactions.STATUS_VOIDED);
										oPosPaymentGatewayTransactions.setIntfId(oPosInterfaceConfig.getInterfaceId());
										for(PosCheckPayment oPosCheckPayment : m_oCheckPaymentList){
											if(oPosCheckPayment.getCpayId().equals(oCheckPayment.getCpayId())){
												oPosCheckPayment.voidSalePaymentGatewayTransaction();
												break;
											}
										}
										this.printCardAuthorizationSlip(FramePaymentCardAuthorization.AUTHORIZATION_TYPE.void_sale.name(), oPosPaymentGatewayTransactions.constructAddSaveJSON(true) ,oPosPaymentGatewayTransactions.getAmount().setScale(AppGlobal.g_oFuncOutlet.get().getPayRoundDecimal(), BigDecimal.ROUND_HALF_UP));
									}
									else 
										return false;
								}
								
								if(AppGlobal.g_iLogLevel >= 1)
									AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "void #" + iPaymentCount + " After void SPA direct sale");
							} else if (!bVoidAllPayment) {
								if(oPaymentGatewayTransaction != null){
									for(PosPaymentGatewayTransactions oPosPaymentGatewayTransaction : m_oCheck.getPaymentGatewayTransArrayList().getPosPaymentGatewayTransactionsList()){
										if((oPosPaymentGatewayTransaction.getAuthCode().equals(oPaymentGatewayTransaction.getParentAuthCode()) &&
												oPosPaymentGatewayTransaction.getParentAuthCode().isEmpty()) || 
												oPosPaymentGatewayTransaction.getParentAuthCode().equals(oPaymentGatewayTransaction.getParentAuthCode()) &&
												oPosPaymentGatewayTransaction.getType().equals(PosPaymentGatewayTransactions.TYPE_TOPUP_AUTH))
											oPosPaymentGatewayTransaction.setStatus(PosPaymentGatewayTransactions.STATUS_ACTIVE);
									}
									oPaymentGatewayTransaction.setStatus(PosPaymentGatewayTransactions.STATUS_VOIDED);
								}
							}
						}
					}
				}
			}
			
			if (bVoidPayment && oPaymentMethod.isGamingInterfacePayment(InfVendor.KEY_GEMS)){
				boolean bIsContinue = true;
				for (FuncCheckListener listener : listeners)
					bIsContinue = listener.FuncCheck_confirmToVoidPayment(oPaymentMethod.getName(AppGlobal.g_oCurrentLangIndex.get()), (oCheckPayment.getPayTotal().add(oCheckPayment.getPayTips())).toPlainString());
				if (!bIsContinue)
					return false;
			}
			
			//void generalV2 payment --- award cancellation (But no need to do for negative check)
			if (!this.isNegativeCheck() && bVoidPayment && oPaymentMethod.isMembershipInterfacePayment(InfVendor.KEY_GENERAL_V2)){
				PosInterfaceConfig oPosInterfaceConfig = oPaymentMethod.getInterfaceConfig(InfInterface.TYPE_MEMBERSHIP_INTERFACE).get(0);
				FuncMembershipInterface oFuncMembershipInterface = new FuncMembershipInterface(oPosInterfaceConfig);
				
				//do award cancellation
				if(!this.voidPostingForGeneralV2(oPosInterfaceConfig, dPreviousPaymentTotal, oFuncMembershipInterface)) {
					m_sWarningMessage = oPosInterfaceConfig.getLastErrorMessage();
					return false;
				}

				if(AppGlobal.g_iLogLevel >= 1)
					AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "void #" + 0 + " After void GENERAL_V2");
			}
			
			dPreviousPaymentTotal = dPreviousPaymentTotal.add(oCheckPayment.getPayTotal());
			if(bVoidPayment) {
				List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);
				if (!oInterfaceConfigList.isEmpty()) {
					for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
						if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
							int iLangIndex = 1;
							if(oPosInterfaceConfig.getInterfaceConfig().has("general_setup") && oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").has("language_index"))
								iLangIndex = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").optJSONObject("language_index").optInt("value");
							HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
							oSurveillanceEventInfo.put("checkNum", this.getCheckPrefixNo());
							oSurveillanceEventInfo.put("amount", oCheckPayment.getPayTotal().negate().toPlainString());	// ken's approach ==> m_oFuncPayment.getCheckPaymentList().get(iItemIndex).getPayTotal().toPlainString()
							PosPaymentMethod oPosPaymentMethod = oPaymentMethodList.getPaymentMethodList().get(oCheckPayment.getPaymentMethodId());
							oSurveillanceEventInfo.put("tenderTypeNum", oPosPaymentMethod.getPaymentCode()); //ken's approach (can only get payment id not payment code)==> String.valueOf(m_oFuncPayment.getCheckPaymentList().get(iItemIndex).getPaymentMethodId())
							oSurveillanceEventInfo.put("tenderTypeName", oPosPaymentMethod.getName(iLangIndex));
							this.doSurveillanceEvent(FuncSurveillance.SURVEILLANCE_TYPE_TENDER_VOID, oSurveillanceEventInfo);
						}
					}
				}
				
				// surveillance eConnect check termination event: TipVoid
				if(oCheckPayment.getPayTips().compareTo(BigDecimal.ZERO) > 0) {
					HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
					oSurveillanceEventInfo.put("checkNum", this.getCheckPrefixNo());
					oSurveillanceEventInfo.put("amount", oCheckPayment.getPayTips().negate().toPlainString());
					this.doSurveillanceEvent(FuncSurveillance.SURVEILLANCE_TYPE_TIP_VOID, oSurveillanceEventInfo);
				}
			}
		}
		
		if(bClearAutoTopUpExtraInfo){
			// Clear the auto top up extra info
			this.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_LOYALTY_SVC, PosCheckExtraInfo.VARIABLE_AUTO_TOP_UP_INFORMATION, 0, "");
			this.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_LOYALTY_SVC, PosCheckExtraInfo.VARIABLE_AUTO_TOP_UP_CARD_BALANCE, 0, "");
		}
		
		// do void check level PMS interface
		if (bVoidAllPayment && bPmsSinglePosting) {
			FuncPMS oFuncPMS = new FuncPMS(false);
			if(oFuncPMS.pmsVoidPosting(this, null, null, 0, BigDecimal.ZERO, m_oCheck.getCheckPaymentArrayList(), null) == false) {
				m_sErrorMessage = AppGlobal.g_oLang.get()._("fail_to_void_pms_payment")+", "+AppGlobal.g_oLang.get()._("please_try_again");
				return false;
			}
		}
		
		List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_MEMBERSHIP_INTERFACE);
		FuncMembershipInterface oMembershipInterface = null;
		String sInterfaceId = this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID);
		int iInterfaceId = 0;
		try {
			if(sInterfaceId != null && !sInterfaceId.isEmpty())
				iInterfaceId = Integer.parseInt(sInterfaceId);
		} catch (Exception e) {
			AppGlobal.stack2Log(e);
		}
		
		for(PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
			if (oPosInterfaceConfig.getInterfaceId() != iInterfaceId)
				continue;
			
			if(bVoidAllPayment && oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ASCENTIS_CRM)) {
				String sCardNo = this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_CARD_NO);
				if(sCardNo == null || sCardNo.isEmpty()){
					break;
				}
				oMembershipInterface = new FuncMembershipInterface(oPosInterfaceConfig);
				if(oMembershipInterface.membershipVoidPosting(this, m_oCheckPaymentList, dPreviousPaymentTotal, false, 0)){
					this.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POSTING_KEY, 0, "");
					this.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_EARN, 0, "");
				}else{
					FormDialogBox oFormDialogBox = new FormDialogBox(AppGlobal.g_oLang.get()._("ok"), null);
					oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._("error"));
					oFormDialogBox.setMessage(oMembershipInterface.getLastErrorMessage());
					oFormDialogBox.show();
					oFormDialogBox = null;
					return false;
				}
			} else if(bVoidAllPayment && oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_YAZUO_CRM)) {
				String sCardNo = this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_CARD_NO);
				if(sCardNo == null || sCardNo.isEmpty()){
					break;
				}
				oMembershipInterface = new FuncMembershipInterface(oPosInterfaceConfig);
				if(oMembershipInterface.membershipVoidPosting(this, m_oCheckPaymentList, dPreviousPaymentTotal, false, 0)){
					this.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_TRACE_ID, 0, "");
					this.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_EARN, 0, "");
				}else{
					FormDialogBox oFormDialogBox = new FormDialogBox(AppGlobal.g_oLang.get()._("ok"), null);
					oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._("error"));
					oFormDialogBox.setMessage(oMembershipInterface.getLastErrorMessage());
					oFormDialogBox.show();
					oFormDialogBox = null;
					return false;
				}
			} else if (bVoidAllPayment && oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_VIENNA_CRM)) {
				String sTraceId = this.getCheckExtraInfoValueListBySectionVariable(
						PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_TRACE_ID);
				if (sTraceId == null || sTraceId.isEmpty()) {
					break;
				}
				oMembershipInterface = new FuncMembershipInterface(oPosInterfaceConfig);
				if (!oMembershipInterface.membershipVoidPosting(this, m_oCheckPaymentList, dPreviousPaymentTotal, false, 0)){
					FormDialogBox oFormDialogBox = new FormDialogBox(AppGlobal.g_oLang.get()._("ok"), null);
					oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._("error"));
					oFormDialogBox.setMessage(oMembershipInterface.getLastErrorMessage());
					oFormDialogBox.show();
					oFormDialogBox = null;
					return false;
				}
			} else if(bVoidAllPayment && oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_EPOS)) {
				//void epos
				String sMemberNo = this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER);
				if(sMemberNo == null || sMemberNo.isEmpty()){
					break;
				}
				
				/// For full point redemption, no need to do point earn, therefore no need to void epos point earn
				if(this.getCheckExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POSTING_KEY, 0) == null ||
						this.getCheckExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POSTING_KEY, 0).isEmpty())
					break;
				
				oMembershipInterface = new FuncMembershipInterface(oPosInterfaceConfig);
				if(oMembershipInterface.membershipVoidPosting(this, m_oCheckPaymentList, dPreviousPaymentTotal, false, 0)){
					this.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POSTING_KEY, 0, "");
				}else{
					FormDialogBox oFormDialogBox = new FormDialogBox(AppGlobal.g_oLang.get()._("ok"), null);
					oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._("error"));
					oFormDialogBox.setMessage(oMembershipInterface.getLastErrorMessage());
					oFormDialogBox.show();
					oFormDialogBox = null;
					return false;
				}
			} else if(bVoidAllPayment && oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_LPS_SVC)) {
				// Do void SVC point after finish all void posting
				if(oPosInterfaceConfig.getInterfaceConfig().optJSONObject("function_supported").optJSONObject("params").optJSONObject("support_point_function").optInt("value", 0) == 1) {
					FuncMembershipInterface oFuncMembershipInterfaceForSVCPointFunction = new FuncMembershipInterface(oPosInterfaceConfig);
					oFuncMembershipInterfaceForSVCPointFunction.membershipVoidPosting(this, m_oCheck.getCheckPaymentArrayList(), dPreviousPaymentTotal, true, 0);
				}
			} else if(bVoidPayment && oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_CONCEPT)) {
				// Do Void Concept Redeem Points
				if(getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID) == null || getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID).isEmpty())
					continue;
				
				String sGuestNo = this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_GUEST_NO);
				if(sGuestNo == null || sGuestNo.isEmpty())
					break;
				
				oMembershipInterface = new FuncMembershipInterface(oPosInterfaceConfig);
				if(!oMembershipInterface.membershipVoidPosting(this, m_oCheckPaymentList, dPreviousPaymentTotal, false, 0)){
					FormDialogBox oFormDialogBox = new FormDialogBox(AppGlobal.g_oLang.get()._("ok"), null);
					oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._("error"));
					oFormDialogBox.setMessage(oMembershipInterface.getLastErrorMessage());
					oFormDialogBox.show();
					oFormDialogBox = null;
					return false;
				}
			} else if(bVoidAllPayment && oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_SMART_INTEGRAL)) {
				String sMemberNo = this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER);
				if(sMemberNo == null || sMemberNo.isEmpty())
					break;
				
				oMembershipInterface = new FuncMembershipInterface(oPosInterfaceConfig);
				if(!oMembershipInterface.membershipVoidPosting(this, m_oCheckPaymentList, dPreviousPaymentTotal, false, 0)){
					FormDialogBox oFormDialogBox = new FormDialogBox(AppGlobal.g_oLang.get()._("ok"), null);
					oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._("error"));
					oFormDialogBox.setMessage(oMembershipInterface.getLastErrorMessage());
					oFormDialogBox.show();
					oFormDialogBox = null;
					return false;
				}else {
					updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_TRACE_ID, 0, "");
					updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_BALANCE, 0, "");
					updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_EARN, 0, "");
				}
			} else if(bVoidAllPayment && oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_GOLDEN_CIRCLE)) {
				String sMemberNo = this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER);
				if(sMemberNo == null || sMemberNo.isEmpty())
					break;
				
				if(!this.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POSTED_POINTS_USE, 0))
					continue;
				
				BigDecimal dRefundPoints = BigDecimal.ZERO;
				BigDecimal dRefundAmount = BigDecimal.ZERO;
				BigDecimal dPostedPoints = BigDecimal.ZERO;
				BigDecimal dPostedAmount = BigDecimal.ZERO;
				
				if(this.getCheckExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POSTED_POINTS_USE, 0) != null)
					dPostedPoints = new BigDecimal(this.getCheckExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POSTED_POINTS_USE, 0));
				
				if(this.getCheckExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POSTED_AMOUNT_USE, 0) != null)
					dPostedAmount = new BigDecimal(this.getCheckExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POSTED_AMOUNT_USE, 0));
				
				if(this.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_REFUND_POINTS, 0)) {
					if(this.getCheckExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_REFUND_POINTS, 0) != null)
						dRefundPoints = new BigDecimal(this.getCheckExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_REFUND_POINTS, 0));
					this.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, 
							PosCheckExtraInfo.VARIABLE_REFUND_POINTS, 0, StringLib.BigDecimalToStringWithoutZeroDecimal(dPostedPoints));
				}else {
					this.addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, 
							PosCheckExtraInfo.VARIABLE_REFUND_POINTS, 0, StringLib.BigDecimalToStringWithoutZeroDecimal(dPostedPoints));
				}
				
				if(this.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_REFUND_AMOUNT, 0)) {
					if(this.getCheckExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_REFUND_AMOUNT, 0) != null)
						dRefundAmount = new BigDecimal(this.getCheckExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_REFUND_AMOUNT, 0));
					this.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, 
							PosCheckExtraInfo.VARIABLE_REFUND_AMOUNT, 0, StringLib.BigDecimalToStringWithoutZeroDecimal(dPostedAmount));
				}else {
					this.addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, 
							PosCheckExtraInfo.VARIABLE_REFUND_AMOUNT, 0, StringLib.BigDecimalToStringWithoutZeroDecimal(dPostedAmount));
				}
				
				if(this.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_USE, 0))
					this.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, 
							PosCheckExtraInfo.VARIABLE_POINTS_USE, 0, StringLib.BigDecimalToStringWithoutZeroDecimal(dPostedPoints.subtract(dRefundPoints)));
				
				if(this.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_AMOUNT_USE, 0))
					this.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, 
							PosCheckExtraInfo.VARIABLE_AMOUNT_USE, 0, StringLib.BigDecimalToStringWithoutZeroDecimal(dPostedAmount.subtract(dRefundAmount)));
				
				FuncMembershipInterface oFuncMembershipInterface = new FuncMembershipInterface(oPosInterfaceConfig);
				String sNameId = this.getCheckExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_GUEST_NO, 0);
				
				oPostingInfo = new HashMap<String, String>();
				oPostingInfo.put("memberNumber", sNameId);
				oPostingInfo.put("password", "");
				oPostingInfo.put("checkId", String.valueOf(this.getCheckId()));
				oPostingInfo.put("passportNumber", "");
				oPostingInfo.put("mobileNumber", "");
				oPostingInfo.put("cardNumber", "");
				
				if (oFuncMembershipInterface.cardEnquiry(oPostingInfo) == false) {
					FormDialogBox oFormDialogBox = new FormDialogBox(AppGlobal.g_oLang.get()._("ok"), null);
					oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._("member_enquiry"));
					oFormDialogBox.setMessage(oFuncMembershipInterface.getLastErrorMessage());
					oFormDialogBox.show();
					break;
				}
				
				// update point balance extra info
				if(this.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_BALANCE, 0))
					this.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_BALANCE, 0, oFuncMembershipInterface.m_oLastLpsSvcResponseInfo.sPointsBalance);
				
				// update local balance extra info
				if(this.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_LOCAL_BALANCE, 0))
					this.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_LOCAL_BALANCE, 0, oFuncMembershipInterface.m_oLastLpsSvcResponseInfo.sLocalBalance);
				
				// update points available extra info
				if(this.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_AVAILABLE, 0))
					this.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_AVAILABLE, 0, oFuncMembershipInterface.m_oLastLpsSvcResponseInfo.sPoints);
				
				// update total points balance extra info
				if(this.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_TOTAL_POINTS_BALANCE, 0))
					this.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_TOTAL_POINTS_BALANCE, 0, oFuncMembershipInterface.m_oLastLpsSvcResponseInfo.sTotalPointsBalance);
			}
		}
			
		if (bVoidAllPayment) {
			
			// For SCAN PAY, print void slip
			if(oVoidedCheckPayments.size() > 0) {
				FuncPaymentInterface oFuncPaymentInterface = new FuncPaymentInterface(null);
				oFuncPaymentInterface.printVoidPostingSlip(FuncPaymentInterface.PRINT_SLIP_TYPE_SCAN_PAY_VOID, oVoidedCheckPayments);
			}
		}
		
		//update check
		//Handle Release Payment
		int iSendMode = PosCheckItem.SEND_MODE_NEW_ITEM;
		boolean bSendWithItems = false;
		if(m_oCheck.getPaid().equals(PosCheck.PAID_FULL_PAID) && AppGlobal.g_oFuncStation.get().getBreakdownInclusiveScTaxAtFinalSettle()) {
			rollbackToInclusiveScTax();
			iSendMode = PosCheckItem.SEND_MODE_ALL_ITEM;
			bSendWithItems = true;
		}
		
		if ((!bVoidPayment || iPaymentIndex >= 0) && getCheckPaymentList().size() > 1) {
			// For release check and void payment function, update paid status and payment total 
			BigDecimal dPaymentTotal = BigDecimal.ZERO;
			BigDecimal dTipsTotal = BigDecimal.ZERO;
			for(int i = 0 ; i < this.getCheckPaymentList().size() ; i++) {
				if(i == iPaymentIndex)
					continue;
				
				dPaymentTotal = dPaymentTotal.add(this.getCheckPaymentList().get(i).getPayTotal());
				dTipsTotal = dTipsTotal.add(this.getCheckPaymentList().get(i).getPayTips());
			}
			
			m_oCheck.setPaymentTotal(dPaymentTotal);
			m_oCheck.setTipsTotal(dTipsTotal);
			m_oCheck.setPaid(PosCheck.PAID_PARTIAL_PAID);
		} else {
			m_oCheck.setPaymentTotal(BigDecimal.ZERO);
			m_oCheck.setTipsTotal(BigDecimal.ZERO);
			m_oCheck.setPaid(PosCheck.PAID_NOT_PAID);
		}
		
		// roll back the check total and check round amount if have check rounding
		String sPaymentRounding = "";
		if(this.isCheckExtraInfoExistBySectionVariableAndIndex("", PosCheckExtraInfo.VARIABLE_PAYMENT_ROUNDING, 0))
			sPaymentRounding = this.getCheckExtraInfoValueListBySectionVariable("", PosCheckExtraInfo.VARIABLE_PAYMENT_ROUNDING);
		if(!sPaymentRounding.isEmpty()){
			BigDecimal dPaymentRounding = new BigDecimal(sPaymentRounding);
			this.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, "", PosCheckExtraInfo.VARIABLE_PAYMENT_ROUNDING, 0, "0");
			this.setRoundAmount(this.getRoundAmount().subtract(AppGlobal.g_oFuncOutlet.get().roundCheckAmountToBigDecimal(dPaymentRounding)));
			this.setCheckTotal(AppGlobal.g_oFuncOutlet.get().roundCheckAmountToBigDecimal(this.getCheckTotal().subtract(dPaymentRounding)));
		}
		
		m_oCheck.setSettleShiftNo(0);
		m_oCheck.setCloseLocTime(null);
		m_oCheck.setCloseTime("");
		m_oCheck.setCloseUserId(0);
		m_oCheck.setCloseStationId(0);
		m_oCheck.setCloseBperId("");
		
		if(AppGlobal.g_oFuncStation.get().isRemoveCheckTypeForReleasePayment())
			m_oCheck.setCustomTypeId(0);
		
		if (bVoidAllPayment) {
			// Process taiwan GUI
			if (AppGlobal.g_oFuncStation.get().supportTaiwanGui())
				this.voidTaiwanGuiTran();
		}
		
		if (!updateCheck(false, bSendWithItems, iSendMode, 0, false, 0, 0, 0, "", true, false, false, false, 0, 0, false, false).equals(PosCheck.API_RESULT_SUCCESS)) {
			//update outlet table
			m_oOutletTable.setCheckId("");
			m_oOutletTable.setStationId(0);
			m_oOutletTable.setStatus(PosOutletTable.STATUS_VACANT);
			m_oOutletTable.addUpdate(true);
			m_sCurrentFunctionKey = "";
			return false;
		}
		
		//update TMS interface - release payment
		//tms release payment
		if (bVoidAllPayment) {
			PosInterfaceConfig oTmsInterfaceConfig = null;
			FuncTMS oFuncTMS = null;
			oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_TMS);
			for(PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList){
				sInterfaceId = this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_TMS, PosCheckExtraInfo.VARIABLE_INTERFACE_ID);
				if(sInterfaceId.compareTo(Integer.toString(oPosInterfaceConfig.getInterfaceId())) == 0){
					oTmsInterfaceConfig = oPosInterfaceConfig;
					break;
				}
			}
			if(oTmsInterfaceConfig != null){
				//delete tms table
				oFuncTMS = AppGlobal.getTmsInfoFromTmsInterfaceInfoList(AppGlobal.g_oFuncOutlet.get().getOutletId(), m_oCheck.getCheckId());
				oFuncTMS = new FuncTMS(oTmsInterfaceConfig);
				oFuncTMS.resetCheckId(m_oCheck.getCheckId());
				oFuncTMS.tmsDeleteTable();
				
				m_sCurrentFunctionKey = "";
			}
			
			if (FuncInventoryInterface.isSupportInventInterface()) {
				List<PosInterfaceConfig> oInventoryInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_INVENTORY_INTERFACE);
				for (PosInterfaceConfig oInventoryInterfaceConfig : oInventoryInterfaceConfigList) {
					if(oInventoryInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_COOKING_THE_BOOK)){
						FuncInventoryInterface oCookingTheBookInterface = new FuncInventoryInterface(oInventoryInterfaceConfig);
						if(oCookingTheBookInterface.doVoidSales(m_oCheck.getCheckId()) == false){
							FormDialogBox oFormDialogBox = new FormDialogBox(AppGlobal.g_oLang.get()._("ok"), null);
							oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._("warning"));
							oFormDialogBox.setMessage(AppGlobal.g_oLang.get()._("fail_to_post_to_inventory_interface") 
													+ System.lineSeparator() + oCookingTheBookInterface.getLastErrorMessage() 
													+ System.lineSeparator() + System.lineSeparator() + AppGlobal.g_oLang.get()._("payment_is_released")
													+ System.lineSeparator() + AppGlobal.g_oLang.get()._("press_ok_to_continue"));
							oFormDialogBox.show();
							oFormDialogBox = null;
							return false;
						}
					}
				}
			}
		}
		
		//update check table
		PosCheckTable oCheckTable = new PosCheckTable();
		oCheckTable.readByCheckId(m_oCheck.getCheckId());
		if (!(iTableNo == oCheckTable.getTable() && sTableExt.equals(oCheckTable.getTableExt()))) { // Inputted table no. is not equal to record's table no.
			oCheckTable.setTable(iTableNo);
			oCheckTable.setTableExt(sTableExt);
			oCheckTable.addUpdate(true, AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncStation.get().getStationId(), AppGlobal.g_oFuncOutlet.get().getTimeZone(), AppGlobal.g_oFuncOutlet.get().getTimeZoneName());
		}
		
		// get check's payment method
		if (bVoidPayment) {
			for (PosCheckPayment oCheckPayment: oPosCheckPaymentList) {
				oCheckPayment.setVoidUserId(AppGlobal.g_oFuncUser.get().getUserId());
				oCheckPayment.setVoidStatId(AppGlobal.g_oFuncStation.get().getStationId());
				oCheckPayment.setVoidVdrsId(oPosVoidReason.getVdrsId());
				oCheckPayment.setVoidLocTime(dtVoidDateTime);
				oCheckPayment.setVoidTime(voidFormatter.print(AppGlobal.convertTimeToUTC(dtVoidDateTime)));
				oCheckPayment.setStatus(PosCheckPayment.STATUS_DELETED);
				
				// Mark delete to check extra info
				for(PosCheckExtraInfo oPosCheckExtraInfo:oCheckPayment.getCheckExtraInfoArrayList()){
					oPosCheckExtraInfo.setStatus(PosCheckExtraInfo.STATUS_DELETED);
				}
				
				oFuncPayment.addOldCheckPayment(oCheckPayment);
				// add "release_payment" to action log list
				
				if(!oCheckPayment.getCpayId().equals("")) {
					String sFuncKey = (iPaymentIndex < 0)? AppGlobal.FUNC_LIST.release_payment.name(): AppGlobal.FUNC_LIST.void_payment.name();
					AppGlobal.g_oActionLog.get().addActionLog(sFuncKey, PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), "", "", "", oCheckPayment.getCpayId(), "");
				}
			}
		}
		
		// update payment
		oFuncPayment.saveMultipleCheckPayments(this.getCheckPrefixNo(), 0, 1, false);
		
		if (bVoidAllPayment) {
			// update coupon payment status
			for(PosCheckPayment oCheckPayment:m_oCheckPaymentList) {
				if(oCheckPayment.getPaymentType().equals(PosCheckPayment.PAYMENT_TYPE_COUPON) && oCheckPayment.getRefData(1) != null && oCheckPayment.getRefDataByIndexAndKey(1, "coupon_number") != null) {
					FuncCoupon oCouponPayment = new FuncCoupon();
					oCouponPayment.setStartCoupon(oCheckPayment.getRefDataByIndexAndKey(1, "coupon_number"));
					oCouponPayment.setEndCoupon(oCheckPayment.getRefDataByIndexAndKey(1, "coupon_number"));
					oCouponPayment.setRedeemItem("");
					oCouponPayment.setCouponCurrentStatus(FuncCoupon.COUPON_STATUS_USED);
					oCouponPayment.setCouponNextStatus(FuncCoupon.COUPON_STATUS_SOLD);
					
					oCouponPayment.updateCoupon(FuncCoupon.UPDATE_COUPON_TYPE_USE_AS_PAYMENT);
				}
			}
			
			//update coupon item status
			int iCouponRedeemItemCnt = 0;
			for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
				for(List<FuncCheckItem> oCheckItemList:oFuncCheckParty.getWholeItemList()){
					for(FuncCheckItem oCheckItem:oCheckItemList) {
						if(oCheckItem.isCouponItem()) {
							FuncCoupon oCouponItem = new FuncCoupon();
							oCouponItem.setStartCoupon(oCheckItem.getExtraInfoBySectionAndVariable("online_coupon", "sell_start_coupon"));
							oCouponItem.setEndCoupon(oCheckItem.getExtraInfoBySectionAndVariable("online_coupon", "sell_end_coupon"));
							oCouponItem.setCouponCurrentStatus(FuncCoupon.COUPON_STATUS_SOLD);
							oCouponItem.setCouponNextStatus(FuncCoupon.COUPON_STATUS_LOCKED);
							
							oCouponItem.updateCoupon(FuncCoupon.UPDATE_COUPON_TYPE_ORDER_ITEM);
						}
						
						if(oCheckItem.isRedeemCouponItem()) {
							oCheckItem.updateExtraInfoStatus(PosCheckExtraInfo.BY_ITEM, PosCheckExtraInfo.SECTION_ONLINE_COUPON, PosCheckExtraInfo.VARIABLE_REDEEM_COUNT, PosCheckExtraInfo.STATUS_DELETED);
							iCouponRedeemItemCnt++;
						}
					}
				}
			}
			
			if(iCouponRedeemItemCnt > 0)
				updateCheckItemsAfterFunction();
		}
		
		// Store the void ID for further use
		m_iLastReleasePaymentVoidReasonId = oPosVoidReason.getVdrsId();
		m_oLastReleasePaymentVoidReason = oPosVoidReason;
		
		// roll back check sc/tax and discount
		if (bVoidPayment) {
			for (PosCheckPayment oCheckPayment : oPosCheckPaymentList) {
				for (FuncCheckListener listener : listeners) {
					listener.FuncCheck_rollbackTaxAndSCForReleasePayment(this, oCheckPayment, oPosVoidReason);
				}
			}
		}
		
		//update outlet table
		m_oOutletTable.setCheckId(m_oCheck.getCheckId());
		m_oOutletTable.setStationId(0);
		m_oOutletTable.setStatus(PosOutletTable.STATUS_CHECK_PRINTED);
		m_oOutletTable.addUpdate(true);
		
		if (bVoidPayment && iPaymentIndex < 0) {
			// Clear the payment list
			m_oCheckPaymentList.clear();
			m_oPaymentSnapShotListForAdjustPayment.clear();
		}
		
		// handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
		return true;
	}
	
	public JSONArray getCheckHistory(String sBdayId, int iOutletId, int iTable, String sTableExt) {
		PosCheck oCheck = new PosCheck();
		return oCheck.getCheckListByTable(sBdayId, iOutletId, iTable, sTableExt);
	}
	
	// get all unsettled checks of specified user
	public List<PosCheck> getUnsettleCheckList(String sBdayId, int iCloseUserId, int iOutletId) {
		List<PosCheck> oUnsettledCheckList = new ArrayList<PosCheck>(); 
		m_oCheck = new PosCheck();
		
		JSONArray oCheckJSONArray = m_oCheck.getCheckListByCloseUserIdOrOutletId(sBdayId, iCloseUserId, iOutletId);
		
		if(oCheckJSONArray != null) {
			for(int i = 0; i < oCheckJSONArray.length(); i++) {
				JSONObject oCheckJSONObject = oCheckJSONArray.optJSONObject(i);
				if (oCheckJSONObject == null)
					continue;
				
				PosCheck oCheck = new PosCheck(oCheckJSONObject);
				oUnsettledCheckList.add(oCheck);
			}
		}
		
		return oUnsettledCheckList;
	}
	
	// get last settle shift number
	public int getSettleShiftNum(String sBdayId, int iCloseUserId, int iOutletId) {
		int iShiftNum = 0;
		m_oCheck = new PosCheck();
		
		m_oCheck.getCheckByCloseUserIdOrOutletId(sBdayId, iCloseUserId, iOutletId);
		if(!m_oCheck.getCheckId().equals(""))
			iShiftNum = m_oCheck.getSettleShiftNum();
		
		return iShiftNum;
	}
	
	// update shift number of paid checks for specified user
	public boolean settleChecks(List<PosCheck> oCheckList, int iShiftNo, String sBusinessDay, int iUserId, int iOutletId, int iPrintQueueId, int iLangIndex) {
		m_oCheck = new PosCheck();

		for(PosCheck oCheck: oCheckList) {
			oCheck.setSettleShiftNo(iShiftNo);
		}
		
		return m_oCheck.cashierSettlement(oCheckList, iShiftNo, sBusinessDay, iUserId, iOutletId, iPrintQueueId, iLangIndex);
	}
	
	// Review Guest check
	public JSONObject previewGuestCheck(int iCheckFormatId, boolean bWithVoidItems){
		JSONObject oResultJSONObject = null;
		JSONObject oReturnJSONObject = new JSONObject();
		List<PosCheckPayment> oCheckPayments = null;
		
		//generate the item list for printing
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			// Build the PosCheckParty object for saving
			oFuncCheckParty.constructPosCheckPartyForSaving(1);
		}
		
		List<PosCheckItem> oCheckItemListForPrinting = new ArrayList<PosCheckItem>();
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(PosCheckItem oPosCheckItem:oFuncCheckParty.getCheckParty().getCheckItemList()) {
				if(oPosCheckItem.isSetMenuChildItem())
					continue; 
				
				oCheckItemListForPrinting.add(oPosCheckItem);
			}
		}
		
		//Add all void check items to the list	
		if(bWithVoidItems){
			PosCheckItemList oCheckItemList = new PosCheckItemList();
			oCheckItemList.readCheckItemByCheckId(m_oCheck.getCheckId(), PosCheckItem.STATUS_DELETED);
			if(oCheckItemList.getCheckItemList().size() > 0)
				oCheckItemListForPrinting.addAll(oCheckItemList.getCheckItemList());
		}
		
		//get table name
		HashMap<String, String> oTableName = null;
		if(AppGlobal.g_oFuncOutlet.get().isTableNameExist(m_sTableNo, m_sTableExtension))
			oTableName = AppGlobal.g_oFuncOutlet.get().getTableNameInAllLang(m_sTableNo, m_sTableExtension);
		
		//get Payment Gateway Transactions record
		JSONArray oPaymentGatewayTransArray = new JSONArray();
		for(PosPaymentGatewayTransactions oPosPaymentGatewayTransactions : this.getPosPaymentGatewayTransactionsLists().getPosPaymentGatewayTransactionsList())
			oPaymentGatewayTransArray.put(oPosPaymentGatewayTransactions.constructAddSaveJSON(true));
		
		HashMap<Integer, FuncMenuItem> oMenuItems = new HashMap<Integer, FuncMenuItem>();
		for (PosCheckItem oPosCheckItemForMenu : oCheckItemListForPrinting) {
			if (!oMenuItems.containsKey(oPosCheckItemForMenu.getItemId()))
				oMenuItems.put(oPosCheckItemForMenu.getItemId(),
						AppGlobal.g_oFuncMenu.get().getFuncMenuItemByItemId(oPosCheckItemForMenu.getItemId()));
		}
		
		if(AppGlobal.g_oFuncStation.get().isPartialPayment())
			oCheckPayments = m_oCheckPaymentList;
		HashMap <String, String> oPassingInfomation = new HashMap <String, String>();
		if (AppGlobal.g_oFuncStation.get().getSupportContinuousPrinting())
			oPassingInfomation.put("isSupportContinuousPrint", "true");
		if(m_oCheckTaxScRefList.size() != 0)
			m_oCheck.setCheckTaxScRefList(m_oCheckTaxScRefList);
		oResultJSONObject = m_oCheck.printGuestCheckWithPassingDetail(PosCheck.PRINTING_PREVIEW, false, AppGlobal.g_oCurrentLangIndex.get(), 0, iCheckFormatId, false, m_bPaymentInterfacePrinting, m_sTableNo, m_sTableExtension, "", false, 0, AppGlobal.g_oFuncStation.get().getStation(), AppGlobal.g_oFuncUser.get().getUser(), AppGlobal.g_oFuncOutlet.get().getShop(), AppGlobal.g_oFuncOutlet.get().getOutlet(), AppGlobal.g_oFuncOutlet.get().getMediaFilename(OutMediaObject.USED_FOR_LOGO),
				AppGlobal.g_oFuncOutlet.get().getBusinessDay(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod(), null, oCheckItemListForPrinting, m_oCurrentFuncCheckParty.getPartyCheckDiscount(), oTableName, oCheckPayments, "", "", "", oPaymentGatewayTransArray.toString(), oMenuItems, oPassingInfomation);
		if(m_oCheckTaxScRefList.size() != 0)
			m_oCheck.clearCheckTaxScRefList();
		
		//get the url and content
		if(oResultJSONObject != null) {
			try {
				if (oResultJSONObject.has("url") && !oResultJSONObject.optString("url", "").isEmpty())
					oReturnJSONObject.put("url", oResultJSONObject.optString("url", ""));
				if (oResultJSONObject.has("viewContent") && !oResultJSONObject.optString("viewContent", "").isEmpty())
					oReturnJSONObject.put("viewContent", oResultJSONObject.optString("viewContent", ""));
			} catch (JSONException e) {
				e.printStackTrace();
			}
		}
		
		//clean up necessary list
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			oFuncCheckParty.cleanupPosCheckPartyItemList();
			oFuncCheckParty.cleanupPosCheckPartyCheckDiscountList();
		}
		
		return oReturnJSONObject;
	}
	
	// Review receipt
	public String previewReceipt(String sChksId, int iReceiptFormatId){
		HashMap <String, String> oPassingInformation = new HashMap <String, String>();
		if (AppGlobal.g_oFuncStation.get().getBreakdownInclusiveScTaxAtFinalSettle() && m_oCheck.getCheckTotal().compareTo(m_oCheck.getPaymentTotal()) == 0)
			oPassingInformation.put("isBreakdownFromInclusiveNoBreakdown", "true");
		return m_oCheck.previewReceipt(sChksId, iReceiptFormatId, AppGlobal.g_oCurrentLangIndex.get(), oPassingInformation);
	}
	
	// Print receipt
	public HashMap<String, String> printReceipt(int iReceiptPrtqId, int iReceiptFormatId, String sCheckId, String sChkIdCacheKey, int iReprintType, boolean bIsContPrint){
		if(iReceiptPrtqId == 0 || iReceiptFormatId == 0)
			return null;
		
		boolean bSupportExtraPDFReceipt = false;
		String sPdfExportPath = "";
		//String sPdfPassword = "";
		JSONObject oPdfJSONObject = AppGlobal.g_oFuncStation.get().getGenerateReceiptPdfConfigure();
		if(oPdfJSONObject != null && oPdfJSONObject.optString("support").equals("y")){
			bSupportExtraPDFReceipt = true;
			sPdfExportPath = oPdfJSONObject.optString("path");
			//sPdfPassword = oPdfJSONObject.optString("password");
		}
		
		boolean bSupportEJournalReceipt = false;
		String sEJournalExportPath = "";
		JSONObject oEJournalJSONObject = AppGlobal.g_oFuncStation.get().getExportEJournalConfigure();
		if(oEJournalJSONObject != null && oEJournalJSONObject.optString("support").equals("y")){
			bSupportEJournalReceipt = true;
			sEJournalExportPath = oEJournalJSONObject.optString("path");
		}
		
		HashMap <String, String> oPassingInformation = new HashMap <String, String>();
		if (AppGlobal.g_oFuncStation.get().getSupportContinuousPrinting())
			oPassingInformation.put("isSupportContinuousPrint", "true");
		if (AppGlobal.g_oFuncStation.get().getBreakdownInclusiveScTaxAtFinalSettle() && m_oCheck.getCheckTotal().compareTo(m_oCheck.getPaymentTotal()) == 0)
			oPassingInformation.put("isBreakdownFromInclusiveNoBreakdown", "true");
		// For reprint receipt
		if(iReprintType > 0) {
			if(bSupportExtraPDFReceipt)
				return	m_oCheck.printReceipt(iReceiptPrtqId, iReceiptFormatId, sCheckId, AppGlobal.g_oCurrentLangIndex.get(), iReprintType, FuncCheck.RECEIPT_RENDER_FORMAT_TYPE_PDF, sPdfExportPath, false, oPassingInformation);
			else
				return	m_oCheck.printReceipt(iReceiptPrtqId, iReceiptFormatId, sCheckId, AppGlobal.g_oCurrentLangIndex.get(), iReprintType, "", "", false, oPassingInformation);
		}
		
		// For printing normal receipt
		List<PosCheckItem> oCheckItemListForPrinting = new ArrayList<PosCheckItem>();
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			oFuncCheckParty.constructPosCheckPartyForSaving(2);
			for(PosCheckItem oPosCheckItem:oFuncCheckParty.getCheckParty().getCheckItemList()) {
				if (oPosCheckItem.isSetMenuChildItem())
					continue;
				oCheckItemListForPrinting.add(oPosCheckItem);
			}
		}

		List<PosInterfaceConfig> oOgsInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_PAYMENT_INTERFACE);
		if (!oOgsInterfaceConfigList.isEmpty()) {
			for (PosInterfaceConfig oPosInterfaceConfig: oOgsInterfaceConfigList) {
				if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_OGS)) {
					this.addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0, Integer.toString(oPosInterfaceConfig.getInterfaceId()));
				}
			}
		}
		
		// Update the check extra info from FuncCheck to PosCheck object
		if (!m_oCheckExtraInfoList.isEmpty()) {
			m_oCheck.setCheckExtraInfoList(m_oCheckExtraInfoList);
		}
		
		m_oCurrentFuncCheckParty.getPartyCheckDiscount();
		HashMap<String, String> oTableName = null;
		if(AppGlobal.g_oFuncOutlet.get().isTableNameExist(m_sTableNo, m_sTableExtension))
			oTableName = AppGlobal.g_oFuncOutlet.get().getTableNameInAllLang(m_sTableNo, m_sTableExtension);
		
		JSONObject oResponseJSON = new JSONObject();
		
		//get Payment Gateway Transactions record
		JSONArray oPaymentGatewayTransArray = new JSONArray();
		for(PosPaymentGatewayTransactions oPosPaymentGatewayTransactions : this.getPosPaymentGatewayTransactionsLists().getPosPaymentGatewayTransactionsList())
			oPaymentGatewayTransArray.put(oPosPaymentGatewayTransactions.constructAddSaveJSON(true));
		
		HashMap<Integer, FuncMenuItem> oMenuItems = new HashMap<Integer, FuncMenuItem>();
		for (PosCheckItem oPosCheckItemForMenu : oCheckItemListForPrinting) {
			if (!oMenuItems.containsKey(oPosCheckItemForMenu.getItemId()))
				oMenuItems.put(oPosCheckItemForMenu.getItemId(),
						AppGlobal.g_oFuncMenu.get().getFuncMenuItemByItemId(oPosCheckItemForMenu.getItemId()));
		}
		String sPrintType = PosCheck.PRINTING_NORMAL;
		if (bIsContPrint)
			sPrintType = PosCheck.PRINTING_CONTINUOUS_PRINT;
		HashMap <String, String> oPassingInfomation = new HashMap <String, String>();
		if (AppGlobal.g_oFuncStation.get().getSupportContinuousPrinting())
			oPassingInfomation.put("isSupportContinuousPrint", "true");
		if(bSupportExtraPDFReceipt || bSupportEJournalReceipt)
			oResponseJSON = m_oCheck.printGuestCheckWithPassingDetail(sPrintType, true, AppGlobal.g_oCurrentLangIndex.get(), iReceiptPrtqId, iReceiptFormatId, false, m_bPaymentInterfacePrinting, m_sTableNo, m_sTableExtension, sChkIdCacheKey, false, 0, AppGlobal.g_oFuncStation.get().getStation(), AppGlobal.g_oFuncUser.get().getUser(), AppGlobal.g_oFuncOutlet.get().getShop(), AppGlobal.g_oFuncOutlet.get().getOutlet(), AppGlobal.g_oFuncOutlet.get().getMediaFilename(OutMediaObject.USED_FOR_LOGO),
				AppGlobal.g_oFuncOutlet.get().getBusinessDay(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod(), null, oCheckItemListForPrinting, m_oCurrentFuncCheckParty.getPartyCheckDiscount(), oTableName, m_oCheckPaymentList , FuncCheck.RECEIPT_RENDER_FORMAT_TYPE_PDF, sPdfExportPath, sEJournalExportPath, oPaymentGatewayTransArray.toString(), oMenuItems, oPassingInformation);
		else
			oResponseJSON = m_oCheck.printGuestCheckWithPassingDetail(sPrintType, true, AppGlobal.g_oCurrentLangIndex.get(), iReceiptPrtqId, iReceiptFormatId, false, m_bPaymentInterfacePrinting, m_sTableNo, m_sTableExtension, sChkIdCacheKey, false, 0, AppGlobal.g_oFuncStation.get().getStation(), AppGlobal.g_oFuncUser.get().getUser(), AppGlobal.g_oFuncOutlet.get().getShop(), AppGlobal.g_oFuncOutlet.get().getOutlet(), AppGlobal.g_oFuncOutlet.get().getMediaFilename(OutMediaObject.USED_FOR_LOGO),
				AppGlobal.g_oFuncOutlet.get().getBusinessDay(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod(), null, oCheckItemListForPrinting, m_oCurrentFuncCheckParty.getPartyCheckDiscount(), oTableName, m_oCheckPaymentList , "", "", "", oPaymentGatewayTransArray.toString(), oMenuItems, oPassingInformation);
		
		HashMap<String, String> oReturnInfo = new HashMap<String, String>();
		if(oResponseJSON != null) {
			oReturnInfo.put("url", oResponseJSON.optString("url"));
			String sTaiwanGuiGeneratedMode = AppGlobal.g_oFuncStation.get().getTaiwanGuiGeneratedMode();
			if(sTaiwanGuiGeneratedMode != null && sTaiwanGuiGeneratedMode.equals(PosTaiwanGuiConfig.GENERATED_MODE_RPU420) && oResponseJSON.has("page"))
				oReturnInfo.put("page", String.valueOf(oResponseJSON.optInt("page")));
			if(oResponseJSON.has("error"))
				oReturnInfo.put("error", oResponseJSON.optString("error"));
		}
		return oReturnInfo;
	}
	
	public String printReceiptForFastFoodMode(int iReceiptPrtqId, int iReceiptFormatId, String sCheckPrefixNo, List<PosCheckItem> oCheckItemList, HashMap<Integer, PosCheckDiscount> oCheckDiscountList, boolean bReprint) {
		return m_oCheck.printReceiptForFastFoodMode(AppGlobal.g_oCurrentLangIndex.get(), iReceiptPrtqId, iReceiptFormatId, bReprint, sCheckPrefixNo, this.m_sTableNo, this.m_sTableExtension, AppGlobal.g_oFuncStation.get().getStation(), AppGlobal.g_oFuncUser.get().getUser(), AppGlobal.g_oFuncOutlet.get().getShop(), AppGlobal.g_oFuncOutlet.get().getOutlet(), AppGlobal.g_oFuncOutlet.get().getMediaFilename(OutMediaObject.USED_FOR_LOGO), AppGlobal.g_oFuncOutlet.get().getBusinessDay(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod(), oCheckItemList, oCheckDiscountList, m_oCheckPaymentList);
	}
	
	// Print serving list
	public String printServingList(int iServingPrtqId, int iServingFormatId) {
		JSONObject oResultJSONObject = null;
		String sGuestCheckUrl = "";
		boolean bResult = false;
		
		//generate the item list for printing
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			// Build the PosCheckParty object for saving
			oFuncCheckParty.constructPosCheckPartyForSaving(1);
		}
		
		List<PosCheckItem> oCheckItemListForPrinting = new ArrayList<PosCheckItem>();
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(PosCheckItem oPosCheckItem:oFuncCheckParty.getCheckParty().getCheckItemList()) {
				if(oPosCheckItem.isSetMenuChildItem())
					continue;
				oCheckItemListForPrinting.add(oPosCheckItem);
			}
		}
		
		//get Payment Gateway Transactions record
		JSONArray oPaymentGatewayTransArray = new JSONArray();
		for(PosPaymentGatewayTransactions oPosPaymentGatewayTransactions : this.getPosPaymentGatewayTransactionsLists().getPosPaymentGatewayTransactionsList())
			oPaymentGatewayTransArray.put(oPosPaymentGatewayTransactions.constructAddSaveJSON(true));
		
		//get table name
		HashMap<String, String> oTableName = null;
		if(AppGlobal.g_oFuncOutlet.get().isTableNameExist(m_sTableNo, m_sTableExtension))
			oTableName = AppGlobal.g_oFuncOutlet.get().getTableNameInAllLang(m_sTableNo, m_sTableExtension);
		
		HashMap<Integer, FuncMenuItem> oMenuItems = new HashMap<Integer, FuncMenuItem>();
		for (PosCheckItem oPosCheckItemForMenu : oCheckItemListForPrinting) {
			if (!oMenuItems.containsKey(oPosCheckItemForMenu.getItemId()))
				oMenuItems.put(oPosCheckItemForMenu.getItemId(),
						AppGlobal.g_oFuncMenu.get().getFuncMenuItemByItemId(oPosCheckItemForMenu.getItemId()));
		}
		
		HashMap <String, String> oPassingInfomation = new HashMap <String, String>();
		if (AppGlobal.g_oFuncStation.get().getSupportContinuousPrinting())
			oPassingInfomation.put("isSupportContinuousPrint", "true");
		oResultJSONObject = m_oCheck.printGuestCheckWithPassingDetail(PosCheck.PRINTING_SERVING_LIST, false, AppGlobal.g_oCurrentLangIndex.get(), iServingPrtqId, iServingFormatId, false, m_bPaymentInterfacePrinting, m_sTableNo, m_sTableExtension, "", false, 0, AppGlobal.g_oFuncStation.get().getStation(), AppGlobal.g_oFuncUser.get().getUser(), AppGlobal.g_oFuncOutlet.get().getShop(), AppGlobal.g_oFuncOutlet.get().getOutlet(), AppGlobal.g_oFuncOutlet.get().getMediaFilename(OutMediaObject.USED_FOR_LOGO),
				AppGlobal.g_oFuncOutlet.get().getBusinessDay(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod(), null, oCheckItemListForPrinting, m_oCurrentFuncCheckParty.getPartyCheckDiscount(), oTableName, null, "", "", "", oPaymentGatewayTransArray.toString(), oMenuItems, oPassingInfomation);
		
		//get the url
		if(oResultJSONObject == null)
			bResult = false;
		else {
			try {
				if (oResultJSONObject.has("printResult") && oResultJSONObject.getBoolean("printResult") == false) {
					if(oResultJSONObject.optInt("errorCode") != 0)
						bResult = false;
				}else {
					if (oResultJSONObject.has("url") && !oResultJSONObject.optString("url", "").isEmpty()) {
						sGuestCheckUrl = oResultJSONObject.optString("url", "");
						bResult = true;
					}
				}
			} catch (JSONException e) {
				e.printStackTrace();
			}
		}
		
		//clean up necessary list
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			oFuncCheckParty.cleanupPosCheckPartyItemList();
			oFuncCheckParty.cleanupPosCheckPartyCheckDiscountList();
		}
		
		if(bResult == false)
			return "";
		else
			return sGuestCheckUrl;
		//return m_oCheck.printServingList(iServingPrtqId, iServingFormatId, AppGlobal.g_oCurrentLangIndex.get());
	}

	public boolean getAndLockTableWithoutLoadCheck(int iShopId, int iOutletId, int iTable, String sTableExtension, boolean bSkipLockTable, boolean bLoadCheck, String sVerifyKey, boolean bSaveKey) {
		m_oOutletTable.init();
		m_oOutletTable.setShopId(iShopId);
		m_oOutletTable.setOutletId(iOutletId);
		m_oOutletTable.setStationId(AppGlobal.g_oFuncStation.get().getStationId());
		if(iTable != -1)
			m_oOutletTable.setTable(iTable);
		m_oOutletTable.setTableExtension(sTableExtension);
		m_oOutletTable.setStatus(PosOutletTable.STATUS_NEW_TABLE);
		if (AppGlobal.g_oFuncStation.get().isPortalStation()) {
			JSONObject oInfoJSONObject = new JSONObject();
			try {
				oInfoJSONObject.put("verify_key", sVerifyKey);
				oInfoJSONObject.put("saveKeyToTable", bSaveKey);
			} catch(JSONException jsone) {
				AppGlobal.stack2Log(jsone);
			}
			m_oOutletTable.setInfo(oInfoJSONObject);
		}

		m_oCheck.setBusinessDayId(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId());
		m_oCheck.setLockUserId(AppGlobal.g_oFuncUser.get().getUserId());
		m_oCheck.setLockStationId(AppGlobal.g_oFuncStation.get().getStationId());
		
		// Check if the table is locked by other station
		// *** Skip lock table and update table status for fast food mode
		if(this.isOldCheck() || bSkipLockTable != true){
			if(!m_oOutletTable.readAndLock(m_oCheck)) {
				String sLoadResult = m_oOutletTable.getLastErrorMessage();
				String sLogMessage = "";
				boolean bIncorrectBday = false;
				
				if(sLoadResult.equals(PosCheck.API_RESULT_INVALID_BDAY)) {
					sLogMessage = "Invalid business day";
					m_sErrorMessage = AppGlobal.g_oLang.get()._("invalid_business_day");
					bIncorrectBday = true;
				} else if(sLoadResult.equals(PosCheck.API_RESULT_MISSING_BDAY)){
					sLogMessage = "Daily start has been carried out";
					m_sErrorMessage = AppGlobal.g_oLang.get()._("missing_active_business_day");
					bIncorrectBday = true;
				} else if (sLoadResult.equals(PosCheck.API_RESULT_INVALID_VERIFYKEY))
					m_sErrorMessage = AppGlobal.g_oLang.get()._("invalid_verification_key");
				else
					this.m_sErrorMessage = AppGlobal.g_oLang.get()._("fail_to_lock_table");
				
				if(bIncorrectBday) {
					m_sErrorMessage += System.lineSeparator();
					m_sErrorMessage += AppGlobal.g_oLang.get()._("cannot_load_the_check");
					
					sLogMessage += " [table: "+this.getTableNoWithExtensionForDisplay();
					sLogMessage += ", Check: "+m_oOutletTable.getCheckId()+"]";
					
					AppGlobal.writeErrorLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), AppGlobal.g_oFuncStation.get().getStationId()+"", "", sLogMessage);
					AppGlobal.startKillSingleStation(AppGlobal.g_oFuncStation.get().getStationId(), AppGlobal.g_oLang.get()._("station_is_killed_by_invalid_business_day"));
				}
				return false;
			}else if (m_oOutletTable.getStationId() > 0 && m_oOutletTable.getStationId() != AppGlobal.g_oFuncStation.get().getStationId()) {
				FuncStation oStation = new FuncStation();
				if(oStation.loadStationById(m_oOutletTable.getStationId())){
					String sStationName = oStation.getName(AppGlobal.g_oCurrentLangIndex.get());
					m_sErrorMessage = AppGlobal.g_oLang.get()._("table_is_locked_by_station")+" "+sStationName;
				}else
					m_sErrorMessage = AppGlobal.g_oLang.get()._("table_is_locked_by_station")+" "+m_oOutletTable.getStationId();
				return false;
			}
		}
		
		m_oCheck.setChksId(m_oOutletTable.getCheckId());
		
		// Store the table no. for send check
		m_sTableNo = String.valueOf(iTable);
		m_sTableExtension = sTableExtension;
		m_sTableName = AppGlobal.g_oFuncOutlet.get().getTableName(m_sTableNo, m_sTableExtension);
		m_oCheckTable.setOutletId(AppGlobal.g_oFuncOutlet.get().getOutletId());
		m_oCheckTable.setTable(iTable);
		m_oCheckTable.setTableExt(sTableExtension);

		return true;
	}
	
	public boolean getAndUnlockTableWithoutLoadCheck(int iShopId, int iOutletId, String sTable, String sTableExtension, String sVerifyKey) {
		m_oOutletTable.setShopId(iShopId);
		m_oOutletTable.setOutletId(iOutletId);
		m_oOutletTable.setTable(Integer.parseInt(sTable));
		m_oOutletTable.setTableExtension(sTableExtension);
		if (!sVerifyKey.isEmpty()) {
			JSONObject oInfoJSONObject = new JSONObject();
			try {
				oInfoJSONObject.put("verify_key", sVerifyKey);
			} catch(JSONException jsone) {
				AppGlobal.stack2Log(jsone);
			}
			m_oOutletTable.setInfo(oInfoJSONObject);
		}

		if(!m_oOutletTable.readAndUnlock()) {
			if (m_oOutletTable.getLastErrorMessage().equals(PosCheck.API_RESULT_INVALID_VERIFYKEY))
				this.m_sErrorMessage = AppGlobal.g_oLang.get()._("invalid_verification_key");
			else
				this.m_sErrorMessage = AppGlobal.g_oLang.get()._("fail_to_unlock_table");
			return false;
		}

		return true;
	}
	
	//apply discount
	public boolean applyDiscount(String sType, String sUsedFor, List<HashMap<String, Integer>> oSelectedItemIndexList, PosDiscountType oSelectedDiscType, BigDecimal dDiscountRateAmt, ArrayList<PosCheckExtraInfo> oExtraInfoList, int iAppliedUserId) {
		HashMap<String, FuncCheckItem> oUpdateFuncCheckItemList = new HashMap<String, FuncCheckItem>();
		PosCheckDiscount oCheckDiscount = null;
		boolean bEventSent = false;
		
		//check tax/sc override condition
		int iSphrId = 0;
		OutSpecialHour oSpecialHour = AppGlobal.g_oFuncOutlet.get().getCurrentSpecialPeriod();
		if(oSpecialHour != null)
			iSphrId = oSpecialHour.getSphrId();
		DateTime oCheckOpenDateTime = null;
		DateTime oItemOrderDateTime = AppGlobal.getCurrentTime(false);
		Time oCheckOpenTime = null, oItemOrderTime = null;
		DateTimeFormatter oTimeFormatter = DateTimeFormat.forPattern("HH:mm:ss");
		SimpleDateFormat oSimpleTimeFormat = new SimpleDateFormat("HH:mm:ss", Locale.ENGLISH);
		if(isOldCheck()) 
			oCheckOpenDateTime = getOpenLocTime();
		else
			oCheckOpenDateTime = AppGlobal.getCurrentTime(false);
		try {
			oCheckOpenTime = new Time(oSimpleTimeFormat.parse(oTimeFormatter.print(oCheckOpenDateTime)).getTime());
			oItemOrderTime = new Time(oSimpleTimeFormat.parse(oTimeFormatter.print(oItemOrderDateTime)).getTime());
		}catch (ParseException exception) {
			exception.printStackTrace();
			AppGlobal.stack2Log(exception);
		}
		List<Integer> oDtypeIdList = new ArrayList<Integer>();
		oDtypeIdList.add(oSelectedDiscType.getDtypId());
		
		List<HashMap<String, Integer>> oAvailableSelectedItemIndexList = this.getAvailableItemIndexList(oSelectedItemIndexList);
		
		for(HashMap<String, Integer> oFuncCheckItem:oAvailableSelectedItemIndexList) {
			FuncCheckItem oTempFuncCheckItem = getCheckItem(oFuncCheckItem.get("partySeq"), oFuncCheckItem.get("sectionId"), oFuncCheckItem.get("itemIndex"));
			AppGlobal.g_oFuncOverrideList.get(AppGlobal.g_oFuncOutlet.get().getOutletId()).checkDiscountOverrideForItemCheck(true, oTempFuncCheckItem, oCheckOpenTime,
					oItemOrderTime, Integer.valueOf(getTableNo()).intValue(), getTableExtension(), iSphrId, getCustomTypeId(), oDtypeIdList);
		}
		
		if(sType.equals("check")) {
			oCheckDiscount = addNewCheckDiscountToList(oAvailableSelectedItemIndexList, oSelectedDiscType, dDiscountRateAmt, oExtraInfoList, iAppliedUserId);
			calcCheck();
			
			if (oSelectedDiscType.isEmployeeDiscount() && !this.checkEmployeeDiscount()) {
				this.voidDiscount(sType, sUsedFor, oAvailableSelectedItemIndexList, oCheckDiscount.getSeq(), 0, "");
				return false;
			}
			
			if(isOldCheck()) {
				for(HashMap<String, Integer> oSelectedItemIndex:oAvailableSelectedItemIndexList) {
					FuncCheckItem oParentFuncCheckItem = getCheckItem(oSelectedItemIndex.get("partySeq"), oSelectedItemIndex.get("sectionId"), oSelectedItemIndex.get("itemIndex"));
					if(oParentFuncCheckItem.isOldItem()) {
						oParentFuncCheckItem.getCheckItem().setModified(true);
						oUpdateFuncCheckItemList.put(oParentFuncCheckItem.getCheckItem().getCitmId(), oParentFuncCheckItem);
					}
				}
				this.setAllowContinuousPrint(FuncCheck.ALLOW_CONTINUOUS_PRINT);
			}else {
				//Add log to action log list
				String sLogRemark = oCheckDiscount.getName(AppGlobal.g_oCurrentLangIndex.get()) + ":" + oCheckDiscount.getRoundTotal().toString();
				String sKey = AppGlobal.FUNC_LIST.check_discount.name();
				if(sUsedFor.equals(PosDiscountType.USED_FOR_EXTRA_CHARGE))
					sKey = AppGlobal.FUNC_LIST.check_extra_charge.name();
				AppGlobal.g_oActionLog.get().addActionLog(sKey, PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), AppGlobal.g_oFuncStation.get().getStationId(), getCheckId(), "", "", "", "", sLogRemark);
			}
			
		}else {
			for(HashMap<String, Integer> oSelectedItemIndex:oAvailableSelectedItemIndexList) {
				FuncCheckItem oParentFuncCheckItem = getCheckItem(oSelectedItemIndex.get("partySeq"), oSelectedItemIndex.get("sectionId"), oSelectedItemIndex.get("itemIndex"));
				FuncCheckParty oFuncCheckParty = this.getCheckPartyBySeq(oSelectedItemIndex.get("partySeq"));
				
				oParentFuncCheckItem.addNewItemDiscountToList(oSelectedDiscType, dDiscountRateAmt, getCheckId(), oFuncCheckParty.getCptyId(), oExtraInfoList, iAppliedUserId);
				calcCheck();
				
				if (oSelectedDiscType.isEmployeeDiscount() && !this.checkEmployeeDiscount()) {
					for(int i = 0; i < oAvailableSelectedItemIndexList.size(); i++)
						this.voidDiscount(sType, sUsedFor, oAvailableSelectedItemIndexList,  oParentFuncCheckItem.getItemDiscountList().size()-1, 0, "");
					return false;
				}
				oCheckDiscount = oParentFuncCheckItem.getItemDiscountList().get(oParentFuncCheckItem.getItemDiscountList().size()-1);
				
				if(isOldCheck() && oParentFuncCheckItem.isOldItem()) {
					oParentFuncCheckItem.getCheckItem().setModified(true);
					oUpdateFuncCheckItemList.put(oParentFuncCheckItem.getCheckItem().getCitmId(), oParentFuncCheckItem);
					
					// Add print status for old item with item discount for old check
					// Get the continuous printing flag
					if (!this.getAllowContinuousPrint().equals(FuncCheck.NOT_ALLOW_CONTINUOUS_PRINT)) {
						oParentFuncCheckItem.setIsAddUpdatePrinted(false);
						this.setAllowContinuousPrint(FuncCheck.ALLOW_CONTINUOUS_PRINT);
					}
				}
				else if (!oParentFuncCheckItem.isOldItem()) {
	//				oCheckDiscount = oParentFuncCheckItem.getItemDiscountList().get(oParentFuncCheckItem.getItemDiscountList().size()-1);
					// Add log to action log list
					String sLogRemark = "[" + oParentFuncCheckItem.getMenuItemName(AppGlobal.g_oCurrentLangIndex.get()) + "] " + oCheckDiscount.getName(AppGlobal.g_oCurrentLangIndex.get()) + ":" + oCheckDiscount.getRoundTotal();
					oParentFuncCheckItem.addActionLog(AppGlobal.FUNC_LIST.item_discount.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId() , AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), AppGlobal.g_oFuncStation.get().getStationId(), this.getCheckId(), "", "", "", "", sLogRemark);
				}
				
				// send surveillance event for multiple items discount
				if (oCheckDiscount != null) {
					// surveillance event: DiscountApply
					List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);
					if (!oInterfaceConfigList.isEmpty()) {
						for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
							if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
								String sCheckNum = (this.isOldCheck()) ? getCheckPrefixNo() : AppGlobal.g_oFuncStation.get().getNextCheckPrefixNumber(false);
								int iLangIndex = 1;
								if(oPosInterfaceConfig.getInterfaceConfig().has("general_setup") && oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").has("language_index"))
									iLangIndex = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").optJSONObject("language_index").optInt("value");
								FuncSurveillance oFuncSurveillance = new FuncSurveillance(oPosInterfaceConfig);
								HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
								oSurveillanceEventInfo.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_DISCOUNT_APPLY);
								oSurveillanceEventInfo.put("checkNum", sCheckNum);
								oSurveillanceEventInfo.put("discountName", oCheckDiscount.getName(iLangIndex));
								oSurveillanceEventInfo.put("amount", oCheckDiscount.getRoundTotal().toPlainString());
								oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo, null);
								
								bEventSent = true;
							}
						}
					}
				}
			}
		}
		
		//update database if check is old and item is old
		if(!oUpdateFuncCheckItemList.isEmpty()) {
			updateCheckDiscountSequence(true);
			
			// calculate the check it is item 100% post discount and the post discount same with item total
			if(sType.equals("item") && oSelectedDiscType.isPostDiscount() && oSelectedDiscType.isPercentageDiscountMethod() && dDiscountRateAmt.equals(new BigDecimal("-1.0")) && m_oCheck.getItemTotal().equals(m_oCheck.getPostDisc().abs()))
				calcCheck();
			
			if(updateCheck(false, true, PosCheckItem.SEND_MODE_OLD_ITEM, 0, false, 1, 0, 0, "", false, false, false, false, 0, 0, false, false).equals(PosCheck.API_RESULT_SUCCESS)) {
				if(sType.equals("item")) {
					//update the FuncCheckItem
					PosCheckItemList oUpdatedItemList = new PosCheckItemList(getResultJSONArrayOfRequest());
					for(PosCheckItem oUpdatedItem:oUpdatedItemList.getCheckItemList()) {
						if(oUpdateFuncCheckItemList.containsKey(oUpdatedItem.getCitmId())) {
							String sCdisId = "";
							String sLogRemark = "";
							
							sCdisId = oUpdatedItem.getItemDiscountList().get(oUpdatedItem.getItemDiscountList().size()-1).getCdisId();
							sLogRemark = oUpdatedItem.getItemDiscountList().get(oUpdatedItem.getItemDiscountList().size()-1).getName(AppGlobal.g_oCurrentLangIndex.get()) + ":" + oUpdatedItem.getItemDiscountList().get(oUpdatedItem.getItemDiscountList().size()-1).getRoundTotal();
							oUpdateFuncCheckItemList.get(oUpdatedItem.getCitmId()).updateCheckItem(oUpdatedItem);
							
							// Add log to action log list
							if (sCdisId.compareTo("") != 0)
								AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.item_discount.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId() , AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), AppGlobal.g_oFuncStation.get().getStationId(), this.getCheckId(), "", oUpdatedItem.getCitmId(), sCdisId, "", sLogRemark);
						}
					}
					
					//calc check again
					if(AppGlobal.g_oFuncStation.get().getBreakdownInclusiveScTaxAtFinalSettle())
						calcCheck();
				}else {
					String sLogRemark = oCheckDiscount.getName(AppGlobal.g_oCurrentLangIndex.get()) + ":" + oCheckDiscount.getRoundTotal();
					if(oCheckDiscount.getCdisId().compareTo("") != 0) {
						String sKey = AppGlobal.FUNC_LIST.check_discount.name();
						if(sUsedFor.equals(PosDiscountType.USED_FOR_EXTRA_CHARGE))
							sKey = AppGlobal.FUNC_LIST.check_extra_charge.name();
						AppGlobal.g_oActionLog.get().addActionLog(sKey, PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId() , AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), AppGlobal.g_oFuncStation.get().getStationId(), this.getCheckId(), "", "", oCheckDiscount.getCdisId(), "", sLogRemark);
						
						//update the FuncCheckItem
						PosCheckItemList oUpdatedItemList = new PosCheckItemList(getResultJSONArrayOfRequest());
						for(PosCheckItem oUpdatedItem:oUpdatedItemList.getCheckItemList()) {
							if(oUpdateFuncCheckItemList.containsKey(oUpdatedItem.getCitmId()))
								oUpdateFuncCheckItemList.get(oUpdatedItem.getCitmId()).updateCheckItem(oUpdatedItem);
						}
					}
				}
			} else
				return false;
			
			//handle action log
			AppGlobal.g_oActionLog.get().handleActionLog(false);
		}
		
// DiscountApply [applyDiscount]
		if (oCheckDiscount != null && !bEventSent) {
			// surveillance eConnect check detail event: DiscountApply
			List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);
			if (!oInterfaceConfigList.isEmpty()) {
				for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
					if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
						
						String sCheckNum = (this.isOldCheck()) ? getCheckPrefixNo() : AppGlobal.g_oFuncStation.get().getNextCheckPrefixNumber(false);
						int iLangIndex = 1;
						if(oPosInterfaceConfig.getInterfaceConfig().has("general_setup") && oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").has("language_index"))
							iLangIndex = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").optJSONObject("language_index").optInt("value");
						
						FuncSurveillance oFuncSurveillance = new FuncSurveillance(oPosInterfaceConfig);
						HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
						oSurveillanceEventInfo.put("eventType", FuncSurveillance.SURVEILLANCE_TYPE_DISCOUNT_APPLY);
						oSurveillanceEventInfo.put("checkNum", sCheckNum);
						oSurveillanceEventInfo.put("discountName", oCheckDiscount.getName(iLangIndex));
						oSurveillanceEventInfo.put("amount", oCheckDiscount.getRoundTotal().toPlainString());
						oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo, null);
					}
				}
			}
		}
		return true;
	}
	
	// remove discount
	public boolean voidDiscount(String sDiscountType, String sUsedFor, List<HashMap<String, Integer>> oSelectedItemList, int iDiscountIndex , int iVoidCodeId, String sVoidReasonName) {
		HashMap<String, FuncCheckItem> oUpdateFuncCheckItemList = new HashMap<String, FuncCheckItem>();
		
		//check tax/sc override condition
		// Do override checking
		int iSphrId = 0;
		OutSpecialHour oSpecialHour = AppGlobal.g_oFuncOutlet.get().getCurrentSpecialPeriod();
		if(oSpecialHour != null)
			iSphrId = oSpecialHour.getSphrId();
		DateTime oCheckOpenDateTime = null;
		DateTime oItemOrderDateTime = AppGlobal.getCurrentTime(false);
		Time oCheckOpenTime = null, oItemOrderTime = null;
		DateTimeFormatter oTimeFormatter = DateTimeFormat.forPattern("HH:mm:ss");
		SimpleDateFormat oSimpleTimeFormat = new SimpleDateFormat("HH:mm:ss", Locale.ENGLISH);
		boolean bEventSent = false;
		
		if(isOldCheck()) 
			oCheckOpenDateTime = getOpenLocTime();
		else
			oCheckOpenDateTime = AppGlobal.getCurrentTime(false);
		try {
			oCheckOpenTime = new Time(oSimpleTimeFormat.parse(oTimeFormatter.print(oCheckOpenDateTime)).getTime());
			oItemOrderTime = new Time(oSimpleTimeFormat.parse(oTimeFormatter.print(oItemOrderDateTime)).getTime());
		}catch (ParseException exception) {
			exception.printStackTrace();
			AppGlobal.stack2Log(exception);
		}
		
		PosCheckDiscount oCheckDiscount = null;
		if(sDiscountType.equals("check") && oSelectedItemList == null) {
			for(FuncCheckItem oTempFuncCheckItem : m_oCurrentFuncCheckParty.getAppliedCheckDiscountItemList(iDiscountIndex)) {
				List<Integer> oDtypeIdList = new ArrayList<Integer>();
//				PosCheckDiscount oCheckDiscount = null;
				oCheckDiscount = m_oCurrentFuncCheckParty.getPartyCheckDiscount(iDiscountIndex);
				oDtypeIdList.add(oCheckDiscount.getDtypId());
				AppGlobal.g_oFuncOverrideList.get(AppGlobal.g_oFuncOutlet.get().getOutletId()).checkDiscountOverrideForItemCheck(false, oTempFuncCheckItem,
						oCheckOpenTime, oItemOrderTime, Integer.valueOf(getTableNo()).intValue(), getTableExtension(), iSphrId, getCustomTypeId(), oDtypeIdList);
			}
		}else if(oSelectedItemList != null && oSelectedItemList.size() > 0) {
			for(HashMap<String, Integer> oFuncCheckItem:oSelectedItemList) {
				FuncCheckItem oTempFuncCheckItem = getCheckItem(oFuncCheckItem.get("sectionId"), oFuncCheckItem.get("itemIndex"));
				List<Integer> oDtypeIdList = new ArrayList<Integer>();
				//PosCheckDiscount oCheckDiscount = null;
				if(sDiscountType.equals("check"))
					oCheckDiscount = m_oCurrentFuncCheckParty.getPartyCheckDiscount(iDiscountIndex);
				else
					oCheckDiscount = oTempFuncCheckItem.getItemDiscountList().get(iDiscountIndex);
				oDtypeIdList.add(oCheckDiscount.getDtypId());
				AppGlobal.g_oFuncOverrideList.get(AppGlobal.g_oFuncOutlet.get().getOutletId()).checkDiscountOverrideForItemCheck(false, oTempFuncCheckItem,
						oCheckOpenTime, oItemOrderTime, Integer.valueOf(getTableNo()).intValue(), getTableExtension(), iSphrId, getCustomTypeId(), oDtypeIdList);
			}
		}

		if (sDiscountType.equals("item")) {
			// Void item discount
			for (HashMap<String, Integer> oSelectedItem : oSelectedItemList) {
				FuncCheckItem oParentFuncCheckItem = getCheckItem(oSelectedItem.get("sectionId"),
						oSelectedItem.get("itemIndex"));

				if (oParentFuncCheckItem.getItemDiscountList() == null
						|| oParentFuncCheckItem.getItemDiscountList().isEmpty())
					continue;

				// check whether the index exists in the list
				if (iDiscountIndex >= oParentFuncCheckItem.getItemDiscountList().size())
					continue;
				//PosCheckDiscount oCheckDiscount = oParentFuncCheckItem.getItemDiscountList().get(iDiscountIndex);
				oCheckDiscount = oParentFuncCheckItem.getItemDiscountList().get(iDiscountIndex);
				if (oCheckDiscount.getCdisId().compareTo("") > 0) {// Old item
																	// discount
					// Add print status for voiding old item discount
					// Get the continuous printing flag
					boolean isContPrint = true;
					if (isContPrint)
						oParentFuncCheckItem.setIsAddUpdatePrinted(false);
					oParentFuncCheckItem.voidOldItemDiscount(iDiscountIndex, iVoidCodeId, sVoidReasonName);
					calcCheck();
					if (isNeedRollbackForCheckMaximum(BigDecimal.ZERO)) {
						oParentFuncCheckItem.rollBackVoidOldItemDiscount(iDiscountIndex);
						calcCheck();
						return false;
					}
					oParentFuncCheckItem.getCheckItem().setModified(true);
					oUpdateFuncCheckItemList.put(oParentFuncCheckItem.getCheckItem().getCitmId(), oParentFuncCheckItem);

//DiscountCancel & DiscountVoid [voidDiscount]
					// send event for void multiple item discount 
					if (oCheckDiscount != null) {
						// surveillance eConnect check detail event: DiscountCancel & DiscountVoid
						List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);
						if (!oInterfaceConfigList.isEmpty()) {
							for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
								if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
									
									String sCheckNum = (isOldCheck()) ? getCheckPrefixNo() : AppGlobal.g_oFuncStation.get().getNextCheckPrefixNumber(false);
									String sEventType = (isOldCheck()) ? FuncSurveillance.SURVEILLANCE_TYPE_DISCOUNT_VOID : FuncSurveillance.SURVEILLANCE_TYPE_DISCOUNT_CANCEL;
									int iLangIndex = 1;
									if(oPosInterfaceConfig.getInterfaceConfig().has("general_setup") && oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").has("language_index"))
										iLangIndex = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").optJSONObject("language_index").optInt("value");
									
									FuncSurveillance oFuncSurveillance = new FuncSurveillance(oPosInterfaceConfig);
									HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
									oSurveillanceEventInfo.put("eventType", sEventType);
									oSurveillanceEventInfo.put("checkNum", sCheckNum);
									oSurveillanceEventInfo.put("discountName", oCheckDiscount.getName(iLangIndex));
									oSurveillanceEventInfo.put("amount", oCheckDiscount.getRoundTotal().negate().toPlainString());
									oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo, null);
									
									bEventSent = true;
								}
							}
						}
					}
					
					// Add log to action log list
					AppGlobal.g_oActionLog.get().addActionLog(
							AppGlobal.FUNC_LIST.item_void_discount_multiple_items.name(),
							PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(),
							AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(),
							m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(),
							AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), "",
							oParentFuncCheckItem.getCheckItem().getCitmId(), oCheckDiscount.getCdisId(), "",
							"VoidCodeId:" + iVoidCodeId + ":" + sVoidReasonName);
					// handle action log
					AppGlobal.g_oActionLog.get().handleActionLog(false);
				} else {
					PosCheckDiscount oPosCheckDiscount;
					oPosCheckDiscount = oParentFuncCheckItem.getItemDiscountList().get(iDiscountIndex);
					oParentFuncCheckItem.removeItemDiscount(iDiscountIndex);
					calcCheck();
					if (isNeedRollbackForCheckMaximum(BigDecimal.ZERO)) {
						oParentFuncCheckItem.getItemDiscountList().add(oPosCheckDiscount);
						calcCheck();
						return false;
					}
					// Add "new_check" log to action log list
					String sLogRemark = "[" + oParentFuncCheckItem.getMenuItemName(AppGlobal.g_oCurrentLangIndex.get())
							+ "] " + oCheckDiscount.getName(AppGlobal.g_oCurrentLangIndex.get()) + ":"
							+ oCheckDiscount.getRoundTotal();
					oParentFuncCheckItem.addActionLog(AppGlobal.FUNC_LIST.item_void_discount_multiple_items.name(),
							PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(),
							AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(),
							m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(),
							AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), "", "", "", "",
							sLogRemark);
				}
			}
			
			if(!oUpdateFuncCheckItemList.isEmpty()) {
				if(updateCheck(false, true, PosCheckItem.SEND_MODE_OLD_ITEM, 0, false, 1, 0, 0, "", false, false, false, false, 0, 0, false, false).equals(PosCheck.API_RESULT_SUCCESS)) {
					//update the FuncCheckItem
					PosCheckItemList oUpdatedItemList = new PosCheckItemList(getResultJSONArrayOfRequest());
					for(PosCheckItem oUpdatedItem:oUpdatedItemList.getCheckItemList()) {
						if(oUpdateFuncCheckItemList.containsKey(oUpdatedItem.getCitmId())) {
							oUpdateFuncCheckItemList.get(oUpdatedItem.getCitmId()).removeItemDiscount(iDiscountIndex);
							oUpdateFuncCheckItemList.get(oUpdatedItem.getCitmId()).updateCheckItem(oUpdatedItem);
						}
					}
				} else
					return false;
			}
		} else {
			// Void party check discount
//			PosCheckDiscount oCheckDiscount = m_oCurrentFuncCheckParty.getPartyCheckDiscount(iDiscountIndex);
			oCheckDiscount = m_oCurrentFuncCheckParty.getPartyCheckDiscount(iDiscountIndex);
			int iGetUpdateRecord = 1;
			String sKey = AppGlobal.FUNC_LIST.void_check_discount.name();
			if (sUsedFor.equals(PosDiscountType.USED_FOR_EXTRA_CHARGE))
				sKey = AppGlobal.FUNC_LIST.void_check_extra_charge.name();

			if (oCheckDiscount.getCdisId().compareTo("") > 0) {// Old party
																// check
																// discount
				// Clear member when void check discount for Interface SPC
				List<PosCheckExtraInfo> oCheckDiscountExtraInfo =  oCheckDiscount.getCheckExtraInfoList();
				String sMembershipInterfaceId = "", sMemberNumber = "";
				for (PosCheckExtraInfo oPosCheckExtraInfo : oCheckDiscountExtraInfo) {
					if (oPosCheckExtraInfo.equalToBySectionIndexVariable(PosCheckExtraInfo.BY_DISCOUNT, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, 0, PosCheckExtraInfo.VARIABLE_INTERFACE_ID)) {
						sMembershipInterfaceId = oPosCheckExtraInfo.getValue();
					}
					if (oPosCheckExtraInfo.equalToBySectionIndexVariable(PosCheckExtraInfo.BY_DISCOUNT, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, 0, PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER)) {
						sMemberNumber = oPosCheckExtraInfo.getValue();
					}
				}
				
				// If void check discount success, check for member attached
				if (m_oCurrentFuncCheckParty.voidOldCheckDiscount(iDiscountIndex, iVoidCodeId) && !sMembershipInterfaceId.isEmpty() && !sMemberNumber.isEmpty()) {
					// Get the interface by id
					PosInterfaceConfig oPosInterfaceConfig = AppGlobal.getPosInterfaceConfigById(Integer.valueOf(sMembershipInterfaceId));
					if (oPosInterfaceConfig != null && oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_SPC) &&
							sMemberNumber.equals(this.getCheckExtraInfoByTypeSectionAndVariable(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER, 0))) {
						// Interface found, clear member from check
						ArrayList<HashMap<String, String>> oCheckExtraInfos = new ArrayList<HashMap<String, String>>();
						oCheckExtraInfos = addCheckExtraInfoToList(oCheckExtraInfos, PosCheckExtraInfo.VARIABLE_INTERFACE_ID, "0", "");
						oCheckExtraInfos = addCheckExtraInfoToList(oCheckExtraInfos, PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER, "0", "");
						oCheckExtraInfos = addCheckExtraInfoToList(oCheckExtraInfos, PosCheckExtraInfo.VARIABLE_MEMBER_NAME, "0", "");
						
						this.saveMembershipInterfaceExtraInfo(true, oCheckExtraInfos);
					}
				}
				
				updateCheckDiscountSequence(true);
				calcCheck();
				if (isNeedRollbackForCheckMaximum(BigDecimal.ZERO)) {
					m_oCurrentFuncCheckParty.rollBackVoidOldCheckDiscount(-1);
					updateCheckDiscountSequence(true);
					calcCheck();
					return false;
				}
				if (oCheckDiscount.getCheckDiscountItemCount() == 0)
					iGetUpdateRecord = 0;
				
				if (updateCheck(false, true, PosCheckItem.SEND_MODE_OLD_ITEM, 0, false, iGetUpdateRecord, 0, 0, "",
						false, false, false, false, 0, 0, false, false).equals(PosCheck.API_RESULT_SUCCESS))
					m_oCurrentFuncCheckParty.removeCheckDiscountFromList(-1);
				else
					return false;

				// Add log to action log list
				AppGlobal.g_oActionLog.get().addActionLog(sKey, PosActionLog.ACTION_RESULT_SUCCESS,
						this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(),
						m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(),
						m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(),
						m_oCheck.getCheckId(), "", "", oCheckDiscount.getCdisId(), "",
						"VoidCodeId:" + iVoidCodeId + ":" + sVoidReasonName);
				// handle action log
				AppGlobal.g_oActionLog.get().handleActionLog(false);

			} else {
			//	PosCheckDiscount oPosCheckDiscount;
			//	oPosCheckDiscount = m_oCurrentFuncCheckParty.getPartyCheckDiscount(iDiscountIndex);
				oCheckDiscount = m_oCurrentFuncCheckParty.getPartyCheckDiscount(iDiscountIndex);
				List<FuncCheckItem> oAppliedItemList = m_oCurrentFuncCheckParty
						.getAppliedCheckDiscountItemList(iDiscountIndex);
				List<PosCheckDiscountItem> oPosCheckDiscountItems = new ArrayList<PosCheckDiscountItem>();
				// remove the pos_check_discount_item from FuncCheckItem
				for (FuncCheckItem oAppliedItem : oAppliedItemList)
					oPosCheckDiscountItems.add(oAppliedItem.getCheckDiscountItemList(iDiscountIndex));

				// Clear member when void check discount for Interface SPC
				List<PosCheckExtraInfo> oCheckDiscountExtraInfo =  oCheckDiscount.getCheckExtraInfoList();
				String sMembershipInterfaceId = "", sMemberNumber = "";
				for (PosCheckExtraInfo oPosCheckExtraInfo : oCheckDiscountExtraInfo) {
					if (oPosCheckExtraInfo.equalToBySectionIndexVariable(PosCheckExtraInfo.BY_DISCOUNT, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, 0, PosCheckExtraInfo.VARIABLE_INTERFACE_ID)) {
						sMembershipInterfaceId = oPosCheckExtraInfo.getValue();
					}
					if (oPosCheckExtraInfo.equalToBySectionIndexVariable(PosCheckExtraInfo.BY_DISCOUNT, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, 0, PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER)) {
						sMemberNumber = oPosCheckExtraInfo.getValue();
					}
				}
				m_oCurrentFuncCheckParty.removeCheckDiscountFromList(iDiscountIndex);
				// If void check discount success, check for member attached
				if (!sMembershipInterfaceId.isEmpty() && !sMemberNumber.isEmpty()) {
					// Get the interface by id
					PosInterfaceConfig oPosInterfaceConfig = AppGlobal.getPosInterfaceConfigById(Integer.valueOf(sMembershipInterfaceId));
					if (oPosInterfaceConfig != null && oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_SPC)&&
							sMemberNumber.equals(this.getCheckExtraInfoByTypeSectionAndVariable(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER, 0))) {
						// Interface found, clear member from check
						this.removeCheckExtraInfoFromList(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID);
						this.removeCheckExtraInfoFromList(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER);
						this.removeCheckExtraInfoFromList(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_MEMBER_NAME);
					}
				}

				updateCheckDiscountSequence(true);
				calcCheck();
				if (isNeedRollbackForCheckMaximum(BigDecimal.ZERO)) {
					if (oCheckDiscount != null) {
						int iCurrentCheckDiscountIndex = m_oCurrentFuncCheckParty
								.addNewCheckDiscountToList(oCheckDiscount);
						oCheckDiscount.setSeq(iCurrentCheckDiscountIndex);
						for (int i = 0; i < oAppliedItemList.size(); i++)
							oAppliedItemList.get(i).addCheckDiscountItemToList(iCurrentCheckDiscountIndex,
									oPosCheckDiscountItems.get(i));
					}
					calcCheck();
					return false;
				}
				// Add "new_check" log to action log list
				String sLogRemark = oCheckDiscount.getName(AppGlobal.g_oCurrentLangIndex.get()) + ":"
						+ oCheckDiscount.getRoundTotal();
				AppGlobal.g_oActionLog.get().addActionLog(sKey, PosActionLog.ACTION_RESULT_SUCCESS,
						this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(),
						m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(),
						m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(),
						m_oCheck.getCheckId(), "", "", "", "", sLogRemark);
			}
		}
		// surveillance eConnect check detail event: DiscountCancel & DiscountVoid
		if (!bEventSent && oCheckDiscount != null) {
			List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);
			if (!oInterfaceConfigList.isEmpty()) {
				for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
					if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
						
						String sCheckNum = (this.isOldCheck()) ? getCheckPrefixNo() : AppGlobal.g_oFuncStation.get().getNextCheckPrefixNumber(false);
						String sEventType = (isOldCheck()) ? FuncSurveillance.SURVEILLANCE_TYPE_DISCOUNT_VOID : FuncSurveillance.SURVEILLANCE_TYPE_DISCOUNT_CANCEL;
						int iLangIndex = 1;
						if(oPosInterfaceConfig.getInterfaceConfig().has("general_setup") && oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").has("language_index"))
							iLangIndex = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").optJSONObject("language_index").optInt("value");
						
						FuncSurveillance oFuncSurveillance = new FuncSurveillance(oPosInterfaceConfig);
						HashMap<String, String> oSurveillanceEventInfo = new HashMap<String, String>();
						oSurveillanceEventInfo.put("eventType", sEventType);
						oSurveillanceEventInfo.put("checkNum", sCheckNum);
						oSurveillanceEventInfo.put("discountName", oCheckDiscount.getName(iLangIndex));
						oSurveillanceEventInfo.put("amount", oCheckDiscount.getRoundTotal().negate().toPlainString());
						oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo, null);
					}
				}
			}
		}
		
		return true;
	}

	private boolean checkEmployeeDiscount() {
		HashMap<Integer, BigDecimal> oEmployeeDiscountUsed = new HashMap<Integer, BigDecimal>();
		
		for (PosCheckDiscount oPosCheckDiscount : this.getCurrentPartyAppliedCheckDiscount()) {
			if (oPosCheckDiscount.getExtraInfoFromList("discount", "user_id", 0) != null) {
				if(oEmployeeDiscountUsed.get(Integer.parseInt(oPosCheckDiscount.getExtraInfoFromList("discount", "user_id", 0).getValue())) != null) {
					BigDecimal dTmpLimit = oEmployeeDiscountUsed.get(Integer.parseInt(oPosCheckDiscount.getExtraInfoFromList("discount", "user_id", 0).getValue())).add(oPosCheckDiscount.getRoundTotal());
					oEmployeeDiscountUsed.put(Integer.parseInt(oPosCheckDiscount.getExtraInfoFromList("discount", "user_id", 0).getValue()), dTmpLimit);
				} else
					oEmployeeDiscountUsed.put(Integer.parseInt(oPosCheckDiscount.getExtraInfoFromList("discount", "user_id", 0).getValue()), oPosCheckDiscount.getRoundTotal());
			}
		}
		
		for (List<FuncCheckItem> oFuncCheckItems : this.getWholeItemList()) {
			for (FuncCheckItem oFuncCheckItem : oFuncCheckItems) {
				for (PosCheckDiscount oPosItemDiscount : oFuncCheckItem.getItemDiscountList()) {
					if (oPosItemDiscount.getExtraInfoFromList("discount", "user_id", 0) !=null) {
						if (oEmployeeDiscountUsed.get(Integer.parseInt(oPosItemDiscount.getExtraInfoFromList("discount", "user_id", 0).getValue())) != null) {
							BigDecimal dTmpLimit = oEmployeeDiscountUsed.get(Integer.parseInt(oPosItemDiscount.getExtraInfoFromList("discount", "user_id", 0).getValue())).add(oPosItemDiscount.getRoundTotal());
							oEmployeeDiscountUsed.put(Integer.parseInt(oPosItemDiscount.getExtraInfoFromList("discount", "user_id", 0).getValue()), dTmpLimit);
						} else
							oEmployeeDiscountUsed.put(Integer.parseInt(oPosItemDiscount.getExtraInfoFromList("discount", "user_id", 0).getValue()), oPosItemDiscount.getRoundTotal());
					}
				}
			}
		}

		if (oEmployeeDiscountUsed.size() != 0) {
			PosConfig oPosConfig = new PosConfig();
			PosDiscountTypeList oEmpDiscTypeList = new PosDiscountTypeList();
			oEmpDiscTypeList.readDiscountListWithEmployeeDiscount();
			ArrayList<Integer> oTmpDiscountList = new ArrayList<Integer>();
			for (PosDiscountType oEmpDiscountType : oEmpDiscTypeList.getPosDiscountTypeList())
				oTmpDiscountList.add(oEmpDiscountType.getDtypId());
			
			PosCheckDiscount oPosCheckDiscount = new PosCheckDiscount();
			for (Integer dKey : oEmployeeDiscountUsed.keySet()) {
				BigDecimal dTmpLimit = oEmployeeDiscountUsed.get(dKey).add(oPosCheckDiscount.getEmployeeDiscountUsedLimit(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getDate(), this.getCheckId(), dKey, oTmpDiscountList));
				oEmployeeDiscountUsed.put(dKey, dTmpLimit);
			}
	
			for (Integer dKey : oEmployeeDiscountUsed.keySet()) {
				if(oPosConfig.getEmployeeUserLimit(AppGlobal.g_oFuncStation.get().getStationId(), AppGlobal.g_oFuncOutlet.get().getOutletId(), AppGlobal.g_oFuncOutlet.get().getShopId(), "employee_discount_limit", dKey.toString())) {
					BigDecimal dLimit = BigDecimal.ZERO;
					String sUserLimit = oPosConfig.getValue();
					try {
						JSONObject oEmployeeDiscountJson = new JSONObject(sUserLimit);
						if (oEmployeeDiscountJson != null) {
							if(!oEmployeeDiscountJson.isNull("limit"))
								dLimit = new BigDecimal(oEmployeeDiscountJson.optString("limit"));
						}
					} catch (JSONException e) {
						e.printStackTrace();
					}
					if (dLimit.add(oEmployeeDiscountUsed.get(dKey)).compareTo(BigDecimal.ZERO) < 0) {
						FormDialogBox oFormDialogBox = new FormDialogBox(AppGlobal.g_oLang.get()._("ok"), null);
						oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._("error"));
						oFormDialogBox.setMessage((AppGlobal.g_oLang.get()._("over_employee_discount_limit")));
						oFormDialogBox.show();
						oFormDialogBox = null;
						return false;
					}
				} else {
					FormDialogBox oFormDialogBox = new FormDialogBox(AppGlobal.g_oLang.get()._("ok"), null);
					oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._("error"));
					oFormDialogBox.setMessage((AppGlobal.g_oLang.get()._("employee_not_allowed")));
					oFormDialogBox.show();
					oFormDialogBox = null;
					return false;
				}
			}
		}
		return true;
	}
	
	// Pantry Message
	public List<HashMap<String, Object>> pantryMessage(int iPantryMesgIndex, String sPantryMesgDesc, List<HashMap<String, Integer>> oSelectedItemIndexList, boolean bSupportKitchenMonitor) {
		JSONObject oHeaderJSONObject = new JSONObject(), oInfoJSONObject = new JSONObject(), oTempJSONObject = null;
		JSONArray oTempArray = new JSONArray(), oCitmIdArray = new JSONArray();
		HashMap<String, FuncCheckItem> oUpdateFuncCheckItemList = new HashMap<String, FuncCheckItem>();
		List<HashMap<String, Object>> oUpdatedItemInfoList = new ArrayList<HashMap<String, Object>>(); 
		boolean bHaveNewPantryMessage = false;
		JSONObject oPosCheckItemForMenuJSONObject = new JSONObject();
		JSONArray oPosCheckItemForMenuJSONArray = new JSONArray();
		HashMap<Integer, FuncMenuItem> oMenuItems = new HashMap<Integer, FuncMenuItem>();
		
		if(oSelectedItemIndexList.isEmpty())
			return null;
		
		try {
			//form header
			oHeaderJSONObject.put("header", "Pantry Message");
			oTempJSONObject = new JSONObject();
			oTempJSONObject.put("message", iPantryMesgIndex);
			oTempArray.put(oTempJSONObject);
			oHeaderJSONObject.put("messages", oTempArray);
			
			//form info
			oInfoJSONObject.put("stationId", AppGlobal.g_oFuncStation.get().getStationId());
			oInfoJSONObject.put("userName", AppGlobal.g_oFuncUser.get().getUserName(AppGlobal.g_oCurrentLangIndex.get()));
			oInfoJSONObject.put("userId", AppGlobal.g_oFuncUser.get().getUserId());
			oInfoJSONObject.put("table", m_sTableNo);
			
			int iLargestSequenceNumber = 0;
			int iTempSequence = 0;
			if(bSupportKitchenMonitor)
				iLargestSequenceNumber = this.getLargestItemSequenceNumber();
			//for(Integer iItemId: oSelectedItemIndexList) {
			for(HashMap<String, Integer> oSelectedItemIndex: oSelectedItemIndexList) {
				FuncCheckItem oParentFuncCheckItem = getCheckItem(oSelectedItemIndex.get("partySeq"), oSelectedItemIndex.get("sectionId"), oSelectedItemIndex.get("itemIndex"));
				
				oUpdateFuncCheckItemList.put(oParentFuncCheckItem.getCheckItem().getCitmId(), oParentFuncCheckItem);
				oTempJSONObject = new JSONObject();
				oTempJSONObject.put("id", oParentFuncCheckItem.getCheckItem().getCitmId());
				if (!oMenuItems.containsKey(oParentFuncCheckItem.getCheckItem().getItemId()))
					oMenuItems.put(oParentFuncCheckItem.getCheckItem().getItemId(), AppGlobal.g_oFuncMenu.get().getFuncMenuItemByItemId(oParentFuncCheckItem.getCheckItem().getItemId()));

				JSONObject oTempPantryMessageJSONObject = new JSONObject();
				try {
					if (!oParentFuncCheckItem.getPantryMessageList().isEmpty()) {
						boolean bFound = false;
						for (int iPantryMessageId: oParentFuncCheckItem.getPantryMessageList()) {
							if (iPantryMessageId == iPantryMesgIndex) {
								bFound = true;
								break;
							}	
						}
						
						if (!bFound) {
							bHaveNewPantryMessage = true;
							JSONArray oPantryMessageJSONArray = new JSONArray(oParentFuncCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_ITEM, PosCheckExtraInfo.VARIABLE_PANTRY_MESSAGE));
							oTempPantryMessageJSONObject = new JSONObject();
							oTempPantryMessageJSONObject.put("id", iPantryMesgIndex);
							if(bSupportKitchenMonitor) {
								iTempSequence = ++iLargestSequenceNumber;
								oTempPantryMessageJSONObject.put("seq", Integer.toString(iTempSequence));
							}
							oPantryMessageJSONArray.put(oTempPantryMessageJSONObject);
							oParentFuncCheckItem.updateExtraInfoValue(PosCheckExtraInfo.BY_ITEM, PosCheckExtraInfo.SECTION_ITEM, PosCheckExtraInfo.VARIABLE_PANTRY_MESSAGE, oPantryMessageJSONArray.toString());
							if(bSupportKitchenMonitor) {
								HashMap<String, Object> oItem = new HashMap<String, Object>();
								FuncCheckItem oTempCheckItem = new FuncCheckItem(oParentFuncCheckItem, null); //clone item
								oItem.put("parentItem", oTempCheckItem);
								oItem.put("pantryMessageSeq", iTempSequence);
								oItem.put("pantryMessageDesc", sPantryMesgDesc);
								oUpdatedItemInfoList.add(oItem);
							}
						}
					} else {
						bHaveNewPantryMessage = true;
						JSONArray pantryMessageIdJSONArray = new JSONArray();
						oTempPantryMessageJSONObject = new JSONObject();
						oTempPantryMessageJSONObject.put("id", iPantryMesgIndex);
						if(bSupportKitchenMonitor) {
							iTempSequence = ++iLargestSequenceNumber;
							oTempPantryMessageJSONObject.put("seq", Integer.toString(iTempSequence));
						}
						pantryMessageIdJSONArray.put(oTempPantryMessageJSONObject);
						oParentFuncCheckItem.addExtraInfo(PosCheckExtraInfo.BY_ITEM, PosCheckExtraInfo.SECTION_ITEM, PosCheckExtraInfo.VARIABLE_PANTRY_MESSAGE, pantryMessageIdJSONArray.toString());
						if(bSupportKitchenMonitor) {
							HashMap<String, Object> oItem = new HashMap<String, Object>();
							FuncCheckItem oTempCheckItem = new FuncCheckItem(oParentFuncCheckItem, null); //clone item
							oItem.put("parentItem", oTempCheckItem);
							oItem.put("pantryMessageSeq", iTempSequence);
							oItem.put("pantryMessageDesc", sPantryMesgDesc);
							oUpdatedItemInfoList.add(oItem);
						}
					}
				}catch(JSONException jsone) {
					AppGlobal.stack2Log(jsone);
				}
				
				oCitmIdArray.put(oTempJSONObject);
			}
			oInfoJSONObject.put("citmIds", oCitmIdArray);
			for (Integer iItemId : oMenuItems.keySet()) {
				oPosCheckItemForMenuJSONObject = new JSONObject();
				if(oMenuItems.get(iItemId) != null && oMenuItems.get(iItemId).getMenuItem() != null){
					for (int i = 1; i <= 5; i++) {
						if(oMenuItems.get(iItemId) != null && oMenuItems.get(iItemId).getMenuItem() != null)
							oPosCheckItemForMenuJSONObject.put("item_info_l" + i,
									oMenuItems.get(iItemId).getMenuItem().getInfo(i));
					}
				}else
					AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "",
							AppGlobal.g_oFuncUser.get().getUserId() + "",
							"Fail to get menu item(id: " + iItemId + ") in pantry message");
				
				oPosCheckItemForMenuJSONArray.put(iItemId, oPosCheckItemForMenuJSONObject);
			}
			oInfoJSONObject.put("menuItems", oPosCheckItemForMenuJSONArray);
			
			// Update the Pantry message in each Check Item
			if (bHaveNewPantryMessage) {
				this.updateCheck(false, true, PosCheckItem.SEND_MODE_OLD_ITEM, 0, false, 1, 0, 0, "", false, false, false, false, 0, 0, false, false);
				
				// Update item's pantry message info
				PosCheckItemList oUpdatedItemList = new PosCheckItemList(getResultJSONArrayOfRequest());
				for (PosCheckItem oUpdatedItem: oUpdatedItemList.getCheckItemList()) {
					if (oUpdateFuncCheckItemList.containsKey(oUpdatedItem.getCitmId()))
						oUpdateFuncCheckItemList.get(oUpdatedItem.getCitmId()).updateCheckItem(oUpdatedItem);
				}
			}
			
			// *****************************************************************
			// Create thread to print special slip
			AppThreadManager oAppThreadManager = new AppThreadManager();
			
			// Add the method to the thread manager
			// Thread 1 : Print special slip
			// Create parameter array
			Object[] oParameters = new Object[5];
			oParameters[0] = PosActionPrintQueue.KEY_PANTRY_MESSAGE;
			oParameters[1] = oHeaderJSONObject;
			oParameters[2] = oInfoJSONObject;
			oParameters[3] = AppGlobal.g_oCurrentLangIndex.get();
			oParameters[4] = 0;
			oAppThreadManager.addThread(1, m_oCheck, "printSpecialSlip", oParameters);
			
			// Run the thread without wait
			oAppThreadManager.runThread();
		}catch(JSONException jsone) {
			AppGlobal.stack2Log(jsone);
		}
		
		return oUpdatedItemInfoList;
	}
	
	// Get current item stock list
	public void getCurrentItemStockList(int iOutletId, String sCheckStock, String sSoldout) {
		synchronized(this){
			m_oItemStockList.readOutletItemListByCheckStockSoldout(iOutletId, sCheckStock, sSoldout);
		}
	}

	// Get current item stock list
	public void getCurrentInSellItemStockList(int iOutletId, String sSoldout) {
		synchronized(this){
			m_oItemStockList.readOutletItemListBySoldout(iOutletId, sSoldout);
		}
	}
	
	public List<PosOutletItem> getItemStockList() {
		synchronized(this){
			return m_oItemStockList.getOutletItemList();
		}
	}
	
	// Search item count existence
	public String updateItemCount(int iItemId, BigDecimal dQty, boolean bSubtract, boolean bForceUpdate, boolean bCreateIfNotExist) {
		String sReturn = "";
		PosOutletItem oOutletItem = null;
		synchronized(this){
			oOutletItem = m_oItemStockList.getOutletItemByItemId(iItemId);
		}
		if(oOutletItem == null && bCreateIfNotExist){
			// No outlet item before
			// Create one
			oOutletItem = new PosOutletItem();
			oOutletItem.setShopId(AppGlobal.g_oFuncOutlet.get().getShopId());
			oOutletItem.setOletId(AppGlobal.g_oFuncOutlet.get().getOutletId());
			oOutletItem.setItemId(iItemId);
			oOutletItem.setStockControlLevel("1");
			oOutletItem.setCheckStock(PosOutletItem.CHECK_STOCK_YES);
				
			oOutletItem.addUpdate(false);
			
			synchronized(this){
				m_oItemStockList.addOutletItemToOutletItemList(oOutletItem);
			}
		}
		
		if(m_bStockDeliveryInvoice == true)
			// Skip in stock delivery invoice
			return "";
		
		if(oOutletItem != null && oOutletItem.getCheckStock().equals(PosOutletItem.CHECK_STOCK_YES)) {
			oOutletItem.updateStockQty(dQty, bSubtract, bForceUpdate);
			if (oOutletItem.getStockQty().compareTo(BigDecimal.ZERO) < 0)
				sReturn = "-"+oOutletItem.getStockAvailability();
			else
				sReturn = oOutletItem.getStockAvailability();
		}
		
		return sReturn;
	}
	
	// Search multiple item count existence
	public void updateMultipleItemCount(List<HashMap<String, String>> oItemCountInfo, boolean bSubtract, boolean bForceUpdate, boolean bCreateIfNotExist) {
		PosOutletItem oOutletItem = null;
		List<HashMap<String, String>> oUpdateOutletItems = new ArrayList<HashMap<String, String>>();
		
		for(HashMap<String, String> oItemCount:oItemCountInfo) {
			synchronized(this){
				oOutletItem = m_oItemStockList.getOutletItemByItemId(Integer.parseInt(oItemCount.get("itemId")));
			}
			if(oOutletItem == null && bCreateIfNotExist) {
				// No outlet item before
				// Create one
				oOutletItem = new PosOutletItem();
				oOutletItem.setShopId(AppGlobal.g_oFuncOutlet.get().getShopId());
				oOutletItem.setOletId(AppGlobal.g_oFuncOutlet.get().getOutletId());
				oOutletItem.setItemId(Integer.parseInt(oItemCount.get("itemId")));
				oOutletItem.setStockControlLevel("1");
				oOutletItem.setCheckStock(PosOutletItem.CHECK_STOCK_YES);
				oOutletItem.addUpdate(false);
				
				synchronized(this){
					m_oItemStockList.addOutletItemToOutletItemList(oOutletItem);
				}
			}
			
			if(m_bStockDeliveryInvoice == true) 
				continue;
			
			if(oOutletItem != null){
				HashMap<String, String> oUpdateOutletItem = new HashMap<String, String>();
				oUpdateOutletItem.put("oitmId", String.valueOf(oOutletItem.getOitmId()));
				oUpdateOutletItem.put("qty", oItemCount.get("qty"));
				oUpdateOutletItems.add(oUpdateOutletItem);
			}
		}
		
		if(!oUpdateOutletItems.isEmpty()){
			synchronized(this){
				m_oItemStockList.updateMultipleStockQty(oUpdateOutletItems, bSubtract, bForceUpdate);
			}
		}
	}
	
	public boolean isSoldout(int iItemId) {
		boolean bSoldout = false;
		PosOutletItem oOutletItem = null;
		synchronized(this){
			oOutletItem = m_oItemStockList.getOutletItemByItemId(iItemId);
		}
		
		if (oOutletItem != null)
			bSoldout = oOutletItem.isSoldout();
		
		return bSoldout;
	}

	//check override conditions
	public void checkOverrideConditions(String sCheckCreateTime, String sOrderTime, int iTableNo, String sTableExt, boolean bSupportOldItem) {
		int iSphrId = 0;
		SimpleDateFormat oTimeFormat = new SimpleDateFormat("HH:mm:ss", Locale.ENGLISH);
		Time oCheckCreateTime = null, oOrderTime = null;
		OutSpecialHour oSpecialHour = null;
		
		try {
			oCheckCreateTime = new Time(oTimeFormat.parse(sCheckCreateTime).getTime());
			oOrderTime = new Time(oTimeFormat.parse(sOrderTime).getTime());
		}catch(ParseException exception) {
			exception.printStackTrace();
			AppGlobal.stack2Log(exception);
		}
		
		oSpecialHour = AppGlobal.g_oFuncOutlet.get().getCurrentSpecialPeriod();
		if(oSpecialHour != null)
			iSphrId = oSpecialHour.getSphrId();
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oItemListForSingleSeat:oFuncCheckParty.getWholeItemList()){
				for(FuncCheckItem oCheckItem:oItemListForSingleSeat) {
					// Check if support old item
					if(oCheckItem.isOldItem() && !bSupportOldItem) {
						continue;
					}
					//get discount type id list
					List<Integer> oDtypeIdList = new ArrayList<Integer>();
					if(this.getCurrentPartyAppliedCheckDiscount().size() > 0) {
						for(PosCheckDiscount oCheckDiscount : this.getCurrentPartyAppliedCheckDiscount())
							oDtypeIdList.add(oCheckDiscount.getDtypId());
					}
					if(oCheckItem.getItemDiscountList().size() > 0) {
						for(PosCheckDiscount oCheckDiscount : oCheckItem.getItemDiscountList())
							oDtypeIdList.add(oCheckDiscount.getDtypId());
					}
					
					AppGlobal.g_oFuncOverrideList.get(AppGlobal.g_oFuncOutlet.get().getOutletId()).checkPriceOverrideForItem(oCheckItem, m_bFastFoodCheck,
							oCheckCreateTime, oOrderTime, iTableNo, sTableExt, iSphrId, getCustomTypeId(), oDtypeIdList);
				}
			}
		}
	}
	
	public BigDecimal getItemStockQty(int iItemId) {
		PosOutletItem oOutletItem = null;
		BigDecimal dQty = null;
		
		synchronized(this){
			oOutletItem = m_oItemStockList.getOutletItemByItemId(iItemId);
		}
		
		if(oOutletItem != null)
			dQty = oOutletItem.getStockQty();
		
		return dQty;
	}
	
	public void removeAllNewItemFormItemList(boolean bUpdateItemCount, boolean bQuitCheck) {
		boolean bNoNewItemExist = true;
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			do {
				bNoNewItemExist = true;
				for (List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
					for (FuncCheckItem oFuncCheckItem:oItemList){
						if (!oFuncCheckItem.isOldItem()) {
							if (bUpdateItemCount)
								// update item count
								this.updateItemCount(oFuncCheckItem.getMenuItemId(),
										oFuncCheckItem.getCheckItem().getQty(), false, false, false);
							
							// update coupon item status
							if (bQuitCheck && oFuncCheckItem.isCouponItem()) {
								FuncCoupon oCouponItem = new FuncCoupon();
								oCouponItem.setStartCoupon(oFuncCheckItem.getExtraInfoBySectionAndVariable("online_coupon", "sell_start_coupon"));
								oCouponItem.setEndCoupon(oFuncCheckItem.getExtraInfoBySectionAndVariable("online_coupon", "sell_end_coupon"));
								oCouponItem.setCouponCurrentStatus(FuncCoupon.COUPON_STATUS_LOCKED);
								oCouponItem.setCouponNextStatus(FuncCoupon.COUPON_STATUS_NEW);
								oCouponItem.setSellPrice(BigDecimal.ZERO);
								
								oCouponItem.updateCoupon(FuncCoupon.UPDATE_COUPON_TYPE_ORDER_ITEM);
							}
							
							// Void SVC Redeem Item Coupon
							if (oFuncCheckItem.isSVCCouponRedeemItem()) {
								voidSVCRedeemItemCoupon(oFuncCheckItem);
							}
							
							// Reset minimum charge back to zero value
							this.removeMinimumCharge(oFuncCheckItem);
							
							oItemList.remove(oFuncCheckItem);
							bNoNewItemExist = false;
							break;
						}
					}

					if(bNoNewItemExist == false) {
						break;
					}
				}
			}while (bNoNewItemExist == false);
		}
	}
	
	// update item count for quiting new checking
	public void updateItemCountForQuitNewCheck() {
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem:oItemList){
					if (!oFuncCheckItem.isOldItem()) 
						//update item count
						this.updateItemCount(oFuncCheckItem.getMenuItemId(), oFuncCheckItem.getCheckItem().getQty(), false, false, false);
				}
			}
		}
	}
	
	// update coupon status for quiting new check
	public void updateCouponItemStatusForQuitNewCheck() {
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem:oItemList){
					if(!oFuncCheckItem.isOldItem() && oFuncCheckItem.isCouponItem()) {
						FuncCoupon oCouponItem = new FuncCoupon();
						oCouponItem.setStartCoupon(oFuncCheckItem.getExtraInfoBySectionAndVariable("online_coupon", "sell_start_coupon"));
						oCouponItem.setEndCoupon(oFuncCheckItem.getExtraInfoBySectionAndVariable("online_coupon", "sell_end_coupon"));
						oCouponItem.setCouponCurrentStatus(FuncCoupon.COUPON_STATUS_LOCKED);
						oCouponItem.setCouponNextStatus(FuncCoupon.COUPON_STATUS_NEW);
						oCouponItem.setSellPrice(BigDecimal.ZERO);
						
						oCouponItem.updateCoupon(FuncCoupon.UPDATE_COUPON_TYPE_ORDER_ITEM);
					}
					
					// Void SVC Redeem Item Coupon
					if (oFuncCheckItem.isSVCCouponRedeemItem()) {
						voidSVCRedeemItemCoupon(oFuncCheckItem);
					}
				}
			}
		}
	}
	
	// Remove item from the check
	public boolean removeItemFromList(int iSeatNo, int iLineNo){
		
		m_sErrorMessage = "";
		
		//really remove item form list
		m_oCurrentFuncCheckParty.getItemList(iSeatNo).remove(iLineNo);
		
		calcCheck();
		
		return true;
	}
	
	public void replaceItemToList(int iSeatNo, int iLineNo) {
		m_oCurrentFuncCheckParty.replaceItemToList(iSeatNo, iLineNo);
	}
	
	// Retrieve the new item information JSON array for update system menu item list
	public JSONArray createNewOrderItemJSONArray(){
		
		JSONArray itemJSONArray = new JSONArray();
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem:oItemList){
					PosCheckItem oCheckItem = oFuncCheckItem.getCheckItem();
	
					// Get new item
					if (oCheckItem.getCitmId().equals("")) {
						oFuncCheckItem.createJSONArrayForItemUpdate(itemJSONArray);
					}	
				}
			}
		}

		return itemJSONArray;
	}
	
	// Update system stored menu item list and current new order item
	public boolean updateSystemMenuItemList(){
		// Retrieve the ordered new item
		JSONArray itemJSONArray = this.createNewOrderItemJSONArray();
		
		// Update the system menu item list
		AppGlobal.g_oFuncMenu.get().updateStoredMenuItemList(itemJSONArray);
		
		// Update check item list
		this.updateCheckItemByUpdateMenuItem();
		
		// Recalculate the check
		this.calcCheck();
		
		return true;
	}
	
	// Update check new item by updated menu item list
	private boolean updateCheckItemByUpdateMenuItem(){
		boolean bIsMembershipRedeemItem = false;
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem:oItemList){
					// Get new item
					if (oFuncCheckItem.isOldItem() == false) {
						if(oFuncCheckItem.isCouponItem() || oFuncCheckItem.isSVCCouponRedeemItem())
							continue;
						if (!oFuncCheckItem.isOpenPrice()){
							String sInterfaceId = oFuncCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID);
							if(sInterfaceId != null && !sInterfaceId.isEmpty()){
								List<PosInterfaceConfig> oPosInterfaceConfigs = AppGlobal.g_oPosInterfaceConfigList.get().getInterfaceConfigListByInterfaceType(InfInterface.TYPE_MEMBERSHIP_INTERFACE);
								for(PosInterfaceConfig oPosInterfaceConfig: oPosInterfaceConfigs) {
									if(oPosInterfaceConfig.getInterfaceId() == Integer.valueOf(sInterfaceId).intValue() && oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_YAZUO_CRM)){
										bIsMembershipRedeemItem = true;
										break;
									}
								}
								if (bIsMembershipRedeemItem == true)
									continue;
							}
						}
						
						if(oFuncCheckItem.updateFromUpdateMenuItemList() == false){
							// Fail to update the item
							continue;
						}
	
					}
				}
			}
		}
		
		return true;
	}
	
	public boolean getCheckByCheckNum(String sBusinessDayId, int iOutletId, String sCheckPrefixNo, boolean bNeedCheckBusinessDay) {
		m_sErrorMessage = "";
		
		String sResult = m_oCheck.readByCheckNo(sBusinessDayId, iOutletId, sCheckPrefixNo, 1, bNeedCheckBusinessDay);
		if(sResult.equals(PosCheck.API_RESULT_INVALID_BDAY) || sResult.equals(PosCheck.API_RESULT_MISSING_BDAY)) {
			String sLogMessage = "";
			if(sResult.equals(PosCheck.API_RESULT_INVALID_BDAY)) {
				sLogMessage = "Invalid business day";
				m_sErrorMessage = AppGlobal.g_oLang.get()._("invalid_business_day");
			} else if(sResult.equals(PosCheck.API_RESULT_MISSING_BDAY)){
				sLogMessage = "Daily start has been carried out";
				m_sErrorMessage = AppGlobal.g_oLang.get()._("missing_active_business_day");
			}

			if (!m_sErrorMessage.isEmpty())
				m_sErrorMessage += System.lineSeparator();
			m_sErrorMessage += AppGlobal.g_oLang.get()._("cannot_load_the_check") + " " + sCheckPrefixNo;
			
			sLogMessage += " [Check number: "+sCheckPrefixNo+"]";
			
			AppGlobal.writeErrorLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), AppGlobal.g_oFuncStation.get().getStationId()+"", "", sLogMessage);

			AppGlobal.startKillSingleStation(AppGlobal.g_oFuncStation.get().getStationId(), AppGlobal.g_oLang.get()._("station_is_killed_by_invalid_business_day"));
			return false;
		}
		
		if(m_oCheck.getCheckId().equals("")) {
			m_sErrorMessage = AppGlobal.g_oLang.get()._("check_is_not_found");
			return false;
		}
		
		PosCheckTable oCheckTable = new PosCheckTable();
		oCheckTable.readByCheckId(m_oCheck.getCheckId());
		m_sTableNo = Integer.toString(oCheckTable.getTable());
		m_sTableExtension = oCheckTable.getTableExt();
		m_sTableName = AppGlobal.g_oFuncOutlet.get().getTableName(m_sTableNo, m_sTableExtension);
		m_oCheckTable.setTable(oCheckTable.getTable());
		m_oCheckTable.setTableExt(oCheckTable.getTableExt());
		
		//form the check party list
		this.addOldCheckPartyToList();
		
		//form the check discount list
		this.addOldCheckDiscountToList();
		
		// form the check payment list
		this.addOldCheckPaymentToList();
		
		//form the check extra info list
		this.addOldCheckExtraInfoToList();
		
		// form the check tax sc ref list
		this.addOldCheckTaxScRefList();
		
		//form the payment gateway transactions list
		this.addOldPaymentGatewayTransToList();
		
		return true;
	}
	
	// Item total (chks_item_total) : Sum of all items' (citm_round_total)
	// citm_round_total = (citm_price x citm_qty) + Sum of (Direct child item's citm_carry_total) (After round)
	public BigDecimal getItemTotal(){
		if(m_oCheck == null)
			return BigDecimal.ZERO;
		
		return m_oCheck.getItemTotal();
	}
	
	// Item net total : Sum of all items' (citm_round_total + citm_pre_disc(-ve) + citm_mid_disc(-ve) + citm_post_disc(-ve) )
	// citm_round_total = (citm_price x citm_qty) + Sum of (Direct child item's citm_carry_total) (After round)
	public BigDecimal getNetItemTotal() {
		BigDecimal dNetItemTotal = new BigDecimal(0.0);
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for(FuncCheckItem oFuncCheckItem:oItemList)
					dNetItemTotal = dNetItemTotal.add(oFuncCheckItem.getNetItemTotal());
			}
		}
		
		return dNetItemTotal;
	}
	
	// SC total : Rounded of Sum of (chks_sc1~5)
	public BigDecimal getServiceChargeTotal(){
		if(m_oCheck == null)
			return BigDecimal.ZERO;

		BigDecimal dTmp = BigDecimal.ZERO;
		for(int i=1; i<=5; i++)
			dTmp = dTmp.add(m_oCheck.getSc(i));
	
		return dTmp; 
	}
	
	// Tax total : Rounded of Sum of (chks_tax1~25)
	public BigDecimal getTaxTotal(int iIndex){
		if(m_oCheck == null)
			return BigDecimal.ZERO;
		return m_oCheck.getTax(iIndex); 
	}
	
	// Tax total : Rounded of Sum of (chks_tax1~25)
	public BigDecimal getTaxTotal(){
		if(m_oCheck == null)
			return BigDecimal.ZERO;
		
		BigDecimal dTmp = BigDecimal.ZERO;
		for(int i=1; i<=25; i++)
			dTmp = dTmp.add(m_oCheck.getTax(i));
	
		return dTmp; 
	}
	
	// Gratuity total : Rounded of Sum of (all cgra_round_total in pos_check_gratuities)
	public BigDecimal getGratuityTotal(){
		if(m_oCheck == null)
			return BigDecimal.ZERO;
		
		return m_oCheck.getGratuityTotal(); 
	}
	
	// Check total (chks_check_total) : chks_item_total + chks_sc1~5 + chks_tax1~25 + chks_pre_disc(-ve) + chks_mid_disc(-ve) + chks_post_disc(-ve) + chks_round_amount
	public BigDecimal getCheckTotal(){
		if(m_oCheck == null)
			return BigDecimal.ZERO;
		
		return m_oCheck.getCheckTotal();
	}
	
	// Round amount (chks_round_amount)
	public BigDecimal getRoundAmount(){
		if(m_oCheck == null)
			return BigDecimal.ZERO;
		
		return m_oCheck.getRoundAmount();
	}
	
	// Check discount total
	public BigDecimal getCheckDiscountTotal() {
		BigDecimal dChkDiscTotal = BigDecimal.ZERO;
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			List<PosCheckDiscount> oCheckDiscounts = oFuncCheckParty.getPartyCheckDiscount();
			for(PosCheckDiscount oPosCheckDiscount : oCheckDiscounts) {
				if(oPosCheckDiscount.isDeleted())
					continue;
				
				dChkDiscTotal = dChkDiscTotal.add(oPosCheckDiscount.getRoundTotal());
			}
		}
		
		return dChkDiscTotal;
	}
	
	// Item discount total (After round)
	public BigDecimal getItemDiscountTotal() {
		BigDecimal dItemDiscTotal = BigDecimal.ZERO;
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for(FuncCheckItem oFuncCheckItem:oItemList) {
					for(PosCheckDiscount oItemDiscount: oFuncCheckItem.getItemDiscountList())
						dItemDiscTotal = dItemDiscTotal.add(oItemDiscount.getRoundTotal());
				}
			}
		}
		
		return dItemDiscTotal;
	}
	
	// Check extra charge total
	public BigDecimal getExtraChargeTotal() {
		BigDecimal dChkExtraChargeTotal = BigDecimal.ZERO;
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			List<PosCheckDiscount> oCheckDiscounts = oFuncCheckParty.getPartyCheckDiscount();
			for(PosCheckDiscount oPosCheckDiscount : oCheckDiscounts) {
				if(oPosCheckDiscount.isDeleted())
					continue;
				
				if(oPosCheckDiscount.getUsedFor().equals(PosCheckDiscount.USED_FOR_EXTRA_CHARGE))
					dChkExtraChargeTotal = dChkExtraChargeTotal.add(oPosCheckDiscount.getRoundTotal());
			}
		}
		return dChkExtraChargeTotal;
	}
	
	//get print count
	public int getPrintCount() {
		if(m_oCheck == null)
			return -1;
		
		return m_oCheck.getPrintCount();
	}
	
	//get print count
	public int getReceiptPrintCount() {
		if(m_oCheck == null)
			return -1;
		
		return m_oCheck.getReceiptPrintCount();
	}
	
	public DateTime getOpenLocTime() {
		if(m_oCheck == null)
			return null;
		
		return m_oCheck.getOpenLocTime();
	}
	
	public DateTime getCloseLocTime() {
		if(m_oCheck == null)
			return null;
		
		return m_oCheck.getCloseLocTime();
	}
	
	// Add Round amount (chks_round_amount)
	public void setRoundAmount(BigDecimal dRoundAmount){
		if(m_oCheck == null)
			return;
		
		m_oCheck.setRoundAmount(dRoundAmount);
	}
	
	// Set Check Total
	public void setCheckTotal(BigDecimal dCheckTotal){
		if(m_oCheck == null)
			return;
		
		m_oCheck.setCheckTotal(dCheckTotal);
	}
	
	// Send check function
	// *** iSendMode:	0 - Send new items only
	//					1 - Send old items only
	//					2 - Send both new and old items
	// *** iSaveCheckType:	0 - Normal Send Check
	//					1 - Split Check
	//					2 - Merge Check
	//					3 - Split Revenue
	public String updateCheck(boolean bUpdateCheckTable, boolean bWithItems, int iSendMode, int iSaveCheckType, boolean bUpdateOutletTable, int iGetUpdateRecord, int iReceiptPrtqId, int iReceiptFormatId, String sSplitMergeCheckId, boolean bWithPayments, boolean bContructWithAllItemFields, boolean bPrintGuestCheck, boolean bPayCheck, int iChkPrintQueueId, int iCheckFmtId, boolean bPrtDetailChk, boolean bIsContPrint){
		boolean bResult = false, bSaveNewCheck = false, bFirstNewCheck = false;
		String sSaveCheckResult = "";
		String sPortalStationSendContent = "";
		List<PosPaymentGatewayTransactions> oNeedPrintPaymentGatewayTransactionsList = new ArrayList<PosPaymentGatewayTransactions>();
		String sOverrideCheckPrefix = "";
		long lOverrideCheckNo = 0;
		
		// Check if send new check or not
		boolean bUpdate = false;
		if(this.isOldCheck()) {
			bUpdate = true;
		}else if(AppGlobal.g_oFuncOutlet.get().isFirstNewCheck())
			bFirstNewCheck = true;
		
		// Check if update pos_outlet_tables or not
		// *** Skip lock table and update table status for fast food mode
		PosOutletTable oOutletTable = null;
		if(bUpdateOutletTable && !m_oOutletTable.getOtblId().equals(""))
			oOutletTable = m_oOutletTable;
		
		// Check if update pos_check_tables or not
		PosCheckTable oCheckTable = null;
		if(bUpdateCheckTable)
			oCheckTable = m_oCheckTable;

		if(m_bStockDeliveryInvoice){
			// Build the invoice structure
			this.createStockDeliveryInvoiceFromCurrentCheck();

			// Build the invoice item structure
			List<PosStockDeliveryInvoiceItem> oStockDeliveryInvoiceItemList = new ArrayList<PosStockDeliveryInvoiceItem>();
			if(bWithItems || m_oPosStockDeliveryInvoice.getReceivingUserId() > 0){
				for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
					for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
						for (FuncCheckItem oFuncCheckItem1:oItemList){
							// If send old item only, skip new item
							if(iSendMode == 1 && !oFuncCheckItem1.isOldItem())
								continue;
							
							// For new set menu child item, the item is updated by the child list of the parent item, skip to be included in this update list
							// For old set menu child item, the item is independent from the parent item and should be included in this update list
							//if(oFuncCheckItem1.isSetMenuItem() == true && !oFuncCheckItem1.isOldItem())
							//	continue;
							
							oStockDeliveryInvoiceItemList.add(this.createStockDeliveryInvoiceItemFromFuncCheckItem(oFuncCheckItem1));
						}
					}
				}
			}
			
			bResult = m_oPosStockDeliveryInvoice.addUpdate(bUpdate, bUpdateOutletTable, oOutletTable, oStockDeliveryInvoiceItemList, AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId());
			if(bResult)
				sSaveCheckResult = PosCheck.API_RESULT_SUCCESS;
			else
				sSaveCheckResult = PosCheck.API_RESULT_FAIL;
			
			if(bWithItems && bResult) // cannot preview check if modified items
				m_bModified = true;
		}else{
			List<PosCheckParty> oCheckPartyList = new ArrayList<PosCheckParty>();
			List<PosCheckItem> oCheckItemListForPrinting = new ArrayList<PosCheckItem>();
			
			// setup time zone
			m_oCheck.setTimezone(AppGlobal.g_oFuncOutlet.get().getTimeZone(), AppGlobal.g_oFuncOutlet.get().getTimeZoneName());

			// update all items "printed_status" to true in extra_info database
			// when select continuous print
			// determine each item is printed or not in continuous print
			if (AppGlobal.g_oFuncStation.get().getSupportContinuousPrinting()) {
				if (bPrintGuestCheck) {
					if (bIsContPrint) {
						// continuous print
						// if m_bIsAddUpdatePrinted / m_bIsVoidPrinted = true,
						// this item not need to print
						// if m_bIsAddUpdatePrinted / m_bIsVoidPrinted = false,
						// this item need to print and add extra_info
						for (FuncCheckParty oFuncCheckParty : m_oFuncCheckPartyList) {
							for (List<FuncCheckItem> oFuncItemList : oFuncCheckParty.getWholeItemList()) {
								for (FuncCheckItem oFuncCheckItem : oFuncItemList) {
									String sJsonStatus = oFuncCheckItem.getExtraInfoBySectionAndVariable(
											PosCheckExtraInfo.SECTION_CONTINUOUS_PRINT,
											PosCheckExtraInfo.VARIABLE_PRINTED_STATUS);
									try {
										JSONObject oJSONObject = new JSONObject();
										if (sJsonStatus != null)
											oJSONObject = new JSONObject(sJsonStatus);
										if (!oFuncCheckItem.isAddUpdatePrinted())
											oJSONObject.put("addUpdate", false);
										if (oFuncCheckItem.getCheckItem().getCitmId() == "")
											oJSONObject.put("addUpdate", true);
										if (sJsonStatus != null)
											oFuncCheckItem.updateExtraInfoValue(PosCheckExtraInfo.BY_ITEM,
													PosCheckExtraInfo.SECTION_CONTINUOUS_PRINT,
													PosCheckExtraInfo.VARIABLE_PRINTED_STATUS, oJSONObject.toString());
										else
											oFuncCheckItem.addExtraInfo(PosCheckExtraInfo.BY_ITEM,
													PosCheckExtraInfo.SECTION_CONTINUOUS_PRINT,
													PosCheckExtraInfo.VARIABLE_PRINTED_STATUS, oJSONObject.toString());
									} catch (JSONException e) {
									}
								}
							}
						}
						// roll-back the flag VARIABLE_ALLOW_CONTINUOUS_PRINT to
						// null in extra_info

						if (isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_CONTINUOUS_PRINT,
								PosCheckExtraInfo.VARIABLE_ALLOW_CONTINUOUS_PRINT, 0))
							updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK,
								PosCheckExtraInfo.SECTION_CONTINUOUS_PRINT,
								PosCheckExtraInfo.VARIABLE_ALLOW_CONTINUOUS_PRINT, 0, PosCheckExtraInfo.VALUE_TRUE);
						else
							addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_CONTINUOUS_PRINT,
									PosCheckExtraInfo.VARIABLE_ALLOW_CONTINUOUS_PRINT, 0, PosCheckExtraInfo.VALUE_TRUE);
					} else {
						// reprint whole check
						// If user select "Reprint whole check", all item will
						// be printed and change m_bIsAddUpdatePrinted /
						// m_bIsVoidPrinted = true
						for (FuncCheckParty oFuncCheckParty : m_oFuncCheckPartyList) {
							for (List<FuncCheckItem> oFuncItemList : oFuncCheckParty.getWholeItemList()) {
								for (FuncCheckItem oFuncCheckItem : oFuncItemList) {
									String sJsonStatus = oFuncCheckItem.getExtraInfoBySectionAndVariable(
											PosCheckExtraInfo.SECTION_CONTINUOUS_PRINT,
											PosCheckExtraInfo.VARIABLE_PRINTED_STATUS);
									try {
										JSONObject oJSONObject = new JSONObject();
										if (sJsonStatus != null)
											oJSONObject = new JSONObject(sJsonStatus);
										if (!oFuncCheckItem.isAddUpdatePrinted())
											oJSONObject.put("addUpdate", false);
										if (oFuncCheckItem.getCheckItem().getCitmId() == "")
											oJSONObject.put("addUpdate", true);
										oFuncCheckItem.setIsAddUpdatePrinted(true);
										if (sJsonStatus != null)
											oFuncCheckItem.updateExtraInfoValue(PosCheckExtraInfo.BY_ITEM,
													PosCheckExtraInfo.SECTION_CONTINUOUS_PRINT,
													PosCheckExtraInfo.VARIABLE_PRINTED_STATUS, oJSONObject.toString());
										else
											oFuncCheckItem.addExtraInfo(PosCheckExtraInfo.BY_ITEM,
													PosCheckExtraInfo.SECTION_CONTINUOUS_PRINT,
													PosCheckExtraInfo.VARIABLE_PRINTED_STATUS, oJSONObject.toString());
									} catch (JSONException e) {
									}
								}
							}
						}
						// update "allow_continuous_print" extra_info to true
						if (isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_CONTINUOUS_PRINT,
								PosCheckExtraInfo.VARIABLE_ALLOW_CONTINUOUS_PRINT, 0))
							updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK,
								PosCheckExtraInfo.SECTION_CONTINUOUS_PRINT,
								PosCheckExtraInfo.VARIABLE_ALLOW_CONTINUOUS_PRINT, 0, PosCheckExtraInfo.VALUE_TRUE);
						else
							addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_CONTINUOUS_PRINT,
									PosCheckExtraInfo.VARIABLE_ALLOW_CONTINUOUS_PRINT, 0, PosCheckExtraInfo.VALUE_TRUE);
						iSendMode = 0;
					}
					iGetUpdateRecord = 2;
				} else {
					// if send check, program need to update
					// m_bIsAddUpdatePrinted / m_bIsVoidPrinted into extra_info
					for (FuncCheckParty oFuncCheckParty : m_oFuncCheckPartyList) {
						for (List<FuncCheckItem> oFuncItemList : oFuncCheckParty.getWholeItemList()) {
							for (FuncCheckItem oFuncCheckItem : oFuncItemList) {
								String sJsonStatus = oFuncCheckItem.getExtraInfoBySectionAndVariable(
										PosCheckExtraInfo.SECTION_CONTINUOUS_PRINT,
										PosCheckExtraInfo.VARIABLE_PRINTED_STATUS);
								try {
									JSONObject oJSONObject = new JSONObject();
									if (sJsonStatus != null)
										oJSONObject = new JSONObject(sJsonStatus);
									if (!oFuncCheckItem.isAddUpdatePrinted())
										oJSONObject.put("addUpdate", false);
									if (sJsonStatus != null)
										oFuncCheckItem.updateExtraInfoValue(PosCheckExtraInfo.BY_ITEM,
												PosCheckExtraInfo.SECTION_CONTINUOUS_PRINT,
												PosCheckExtraInfo.VARIABLE_PRINTED_STATUS, oJSONObject.toString());
									else
										oFuncCheckItem.addExtraInfo(PosCheckExtraInfo.BY_ITEM,
												PosCheckExtraInfo.SECTION_CONTINUOUS_PRINT,
												PosCheckExtraInfo.VARIABLE_PRINTED_STATUS, oJSONObject.toString());
								} catch (JSONException e) {
								}
							}
						}
					}
					// other functions
					// update "allow_continuous_print" extra_info to false if
					// this function is not support continuous print
					if (getAllowContinuousPrint().equals(FuncCheck.ALLOW_CONTINUOUS_PRINT)) {
						if (isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_CONTINUOUS_PRINT,
								PosCheckExtraInfo.VARIABLE_ALLOW_CONTINUOUS_PRINT, 0))
							updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK,
									PosCheckExtraInfo.SECTION_CONTINUOUS_PRINT,
									PosCheckExtraInfo.VARIABLE_ALLOW_CONTINUOUS_PRINT, 0, PosCheckExtraInfo.VALUE_TRUE);
						else
							addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_CONTINUOUS_PRINT,
									PosCheckExtraInfo.VARIABLE_ALLOW_CONTINUOUS_PRINT, 0, PosCheckExtraInfo.VALUE_TRUE);
					} else if (getAllowContinuousPrint().equals(FuncCheck.NOT_ALLOW_CONTINUOUS_PRINT)) {
						if (isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_CONTINUOUS_PRINT,
								PosCheckExtraInfo.VARIABLE_ALLOW_CONTINUOUS_PRINT, 0))
							updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK,
									PosCheckExtraInfo.SECTION_CONTINUOUS_PRINT,
									PosCheckExtraInfo.VARIABLE_ALLOW_CONTINUOUS_PRINT, 0,
									PosCheckExtraInfo.VALUE_FALSE);
						else
							addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_CONTINUOUS_PRINT,
									PosCheckExtraInfo.VARIABLE_ALLOW_CONTINUOUS_PRINT, 0,
									PosCheckExtraInfo.VALUE_FALSE);
					} else if (getAllowContinuousPrint().isEmpty()) {
						if (isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_CONTINUOUS_PRINT,
								PosCheckExtraInfo.VARIABLE_ALLOW_CONTINUOUS_PRINT, 0))
							updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK,
									PosCheckExtraInfo.SECTION_CONTINUOUS_PRINT,
									PosCheckExtraInfo.VARIABLE_ALLOW_CONTINUOUS_PRINT, 0, "");
					}
				}
			}
			
			for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
				// Build the PosCheckParty object for saving
				oFuncCheckParty.constructPosCheckPartyForSaving(iSendMode);
				
				oCheckPartyList.add(oFuncCheckParty.getCheckParty());
				
				for(PosCheckItem oPosCheckItem:oFuncCheckParty.getCheckParty().getCheckItemList())
					oCheckItemListForPrinting.add(oPosCheckItem);
			}
			
			//Build the check discount list
			if(!m_oCheckDiscountList.isEmpty()) 
				m_oCheck.setCheckDiscountList(m_oCheckDiscountList);
			
			//Build the check extra info list
			if (!m_oCheckExtraInfoList.isEmpty())
				m_oCheck.setCheckExtraInfoList(m_oCheckExtraInfoList);
			
			if (!m_oCheckTaxScRefList.isEmpty())
				m_oCheck.setCheckTaxScRefList(m_oCheckTaxScRefList);
			
			//check whether saving new check
			String sChkIdCacheKey = "";
			if(!isOldCheck()) {
				bSaveNewCheck = true;
				
				//Only check number is generated by outlet or it is fine dinning mode will be generate the check ID cache key
				if(m_oCheck.getOrderingMode().equals(PosCheck.ORDERING_MODE_FINE_DINING) || m_oCheck.getOrderingMode().equals(PosCheck.ORDERING_MODE_BAR_TAB) || (m_oCheck.getOrderingMode().equals(PosCheck.ORDERING_MODE_FAST_FOOD) && AppGlobal.g_oFuncOutlet.get().getBusinessDay().isCheckNumGeneratedByOutlet())) {
					Calendar oCurrentInstance = Calendar.getInstance();
					SimpleDateFormat oTimeFormat = new SimpleDateFormat("HHmmss");
					sChkIdCacheKey = AppGlobal.g_oFuncStation.get().getStationId() + AppGlobal.g_oFuncOutlet.get().getBusinessDay().getDateInStringWithFormat("YYYYMMdd") + oTimeFormat.format(oCurrentInstance.getTime());
					sChkIdCacheKey = sChkIdCacheKey + AppGlobal.g_oFuncOutlet.get().getOutletId() + getTableNoWithExtensionForDisplay() + String.valueOf(getCover());
				}
				
				// For fast food mode and check number is generated by station
				if((m_oCheck.getOrderingMode().equals(PosCheck.ORDERING_MODE_FAST_FOOD) && !AppGlobal.g_oFuncOutlet.get().getBusinessDay().isCheckNumGeneratedByOutlet()))
					m_oCheck.setCheckPrefixNo(m_sCurrentCheckPrefixNo);
				
				// In Workstation 2.0 standalone mode, check no. is not generated by PHP. Check no. is generated by a special rule implemented in Java
				if (AppGlobal.g_oFuncSmartStation.isStandaloneRole()) {
					sOverrideCheckPrefix = AppGlobal.g_oFuncStation.get().getOverrideCheckPrefix();
					lOverrideCheckNo = AppGlobal.g_oFuncStation.get().getOverrideCheckNo();
				}
			}
			
			Runnable oRunnable = null;
			if (bUpdateOutletTable) {
				oRunnable = new Runnable() {
					public void run() {
						for (FuncCheckListener listener : listeners) {
							listener.FuncCheck_updateProcessingCheckInfo(FuncCheck.this.getTableNoWithExtensionForDisplay(), FuncCheck.this.getSendJSONObjectOfRequest());
						}
					}
				};
			}
			
			// Update database
			if(m_oCheck.getOrderingMode().equals(PosCheck.ORDERING_MODE_FAST_FOOD) && !AppGlobal.g_oFuncStation.get().supportTaiwanGui() && bWithPayments && iReceiptPrtqId != 0 && iReceiptFormatId != 0) {
				// Portal station send check handling
				sPortalStationSendContent = portalSendCheckHandling(bUpdate, AppGlobal.g_oFuncOutlet.get().getOutletId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), bWithItems, oCheckPartyList, iSendMode, 
						0, oOutletTable, oCheckTable, iGetUpdateRecord, m_iUserId, m_iStationId, iReceiptPrtqId, iReceiptFormatId, "", bWithPayments, m_oCheckPaymentList, bContructWithAllItemFields, sChkIdCacheKey);
				
				// Handle the update database and print receipt at same time
				// *****************************************************************
				// Create thread to handle update database and print receipt
				AppThreadManager oAppThreadManager = new AppThreadManager();
				
				// Add the method to thread manager
				// Thread 1 :
				// update database
				Object[] oParameters1 = new Object[24];
				oParameters1[0] = bUpdate;
				oParameters1[1] = AppGlobal.g_oFuncOutlet.get().getOutletId();
				oParameters1[2] = AppGlobal.g_oFuncOutlet.get().getShopId();
				oParameters1[3] = AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId();
				oParameters1[4] = bWithItems;
				oParameters1[5] = oCheckPartyList;
				oParameters1[6] = iSendMode;
				oParameters1[7] = 0;
				oParameters1[8] = oOutletTable;
				oParameters1[9] = oCheckTable;
				oParameters1[10] = iGetUpdateRecord;
				oParameters1[11] = m_iUserId;
				oParameters1[12] = m_iStationId; 
				oParameters1[13] = iReceiptPrtqId;
				oParameters1[14] = iReceiptFormatId;
				oParameters1[15] = "";
				oParameters1[16] = bWithPayments;
				oParameters1[17] = m_oCheckPaymentList;
				oParameters1[18] = bContructWithAllItemFields;
				oParameters1[19] = sChkIdCacheKey;
				oParameters1[20] = sOverrideCheckPrefix;
				oParameters1[21] = lOverrideCheckNo;
				oParameters1[22] = oRunnable;
				oParameters1[23] = bFirstNewCheck;
				oAppThreadManager.addThread(1, m_oCheck, "addUpdate", oParameters1);
				
				// Add the method to thread manager
				// Thread 2 :
				// print receipt for fast food mode
				boolean bNotAllowPrintReceipt = this.m_bNoNeedPrintReceipt;
				
				if(!bNotAllowPrintReceipt) {
					Object[] oParameters2 = new Object[6];
					oParameters2[0] = iReceiptPrtqId;
					oParameters2[1] = iReceiptFormatId;
					oParameters2[2] = getCheckId();
					oParameters2[3] = sChkIdCacheKey;
					oParameters2[4] = 0;
					oParameters2[5] = false;
					oAppThreadManager.addThread(2, this, "printReceipt", oParameters2);
				}

				// Run the thread without wait
				oAppThreadManager.runThread();
				oAppThreadManager.waitForThread();
				
				sSaveCheckResult = ((String) oAppThreadManager.getResult(1));
			}else {
				// add the payment gateway record which is need to print before the new check send check
				if(!this.isOldCheck()){
					for(PosPaymentGatewayTransactions oPosPaymentGatewayTransactions :this.getPosPaymentGatewayTransactionsLists().getPosPaymentGatewayTransactionsList()){
						if(oPosPaymentGatewayTransactions.getPgtxId().isEmpty())
							oNeedPrintPaymentGatewayTransactionsList.add(oPosPaymentGatewayTransactions);
					}
				}
				if(!bPrintGuestCheck) {
					// Portal station send check handling
					sPortalStationSendContent = portalSendCheckHandling(bUpdate, AppGlobal.g_oFuncOutlet.get().getOutletId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), bWithItems , oCheckPartyList, iSendMode, iSaveCheckType, oOutletTable, oCheckTable, iGetUpdateRecord, m_iUserId, m_iStationId, iReceiptPrtqId, iReceiptFormatId, sSplitMergeCheckId, bWithPayments, m_oCheckPaymentList, bContructWithAllItemFields, "");
					
					sSaveCheckResult = m_oCheck.addUpdate(bUpdate, AppGlobal.g_oFuncOutlet.get().getOutletId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), bWithItems , oCheckPartyList, iSendMode, iSaveCheckType, oOutletTable, oCheckTable, iGetUpdateRecord, m_iUserId, m_iStationId, iReceiptPrtqId, iReceiptFormatId, sSplitMergeCheckId, bWithPayments, m_oCheckPaymentList, bContructWithAllItemFields, "", sOverrideCheckPrefix, lOverrideCheckNo, oRunnable, bFirstNewCheck);
				}else {
					// Portal station send check handling
					sPortalStationSendContent = portalSendCheckHandling(bUpdate, AppGlobal.g_oFuncOutlet.get().getOutletId(),
							AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), bWithItems, oCheckPartyList, iSendMode, iSaveCheckType, null, oCheckTable, 
							iGetUpdateRecord, m_iUserId, m_iStationId, iReceiptPrtqId, iReceiptFormatId, sSplitMergeCheckId, bWithPayments, m_oCheckPaymentList, bContructWithAllItemFields, sChkIdCacheKey);
					
					//Handle send and print check
					//Handle the update database and print receipt at same time
					// *****************************************************************
					// Create thread to handle update database and print receipt
					AppThreadManager oAppThreadManager = new AppThreadManager();
					
					// Add the method to thread manager
					// Thread 1 :
					// update database
					Object[] oParameters1 = new Object[24];
					oParameters1[0] = bUpdate;
					oParameters1[1] = AppGlobal.g_oFuncOutlet.get().getOutletId();
					oParameters1[2] = AppGlobal.g_oFuncOutlet.get().getShopId();
					oParameters1[3] = AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId();
					oParameters1[4] = bWithItems;
					oParameters1[5] = oCheckPartyList;
					oParameters1[6] = iSendMode;
					oParameters1[7] = iSaveCheckType;
					oParameters1[8] = null;
					oParameters1[9] = oCheckTable;
					oParameters1[10] = iGetUpdateRecord;
					oParameters1[11] = m_iUserId;
					oParameters1[12] = m_iStationId; 
					oParameters1[13] = iReceiptPrtqId;
					oParameters1[14] = iReceiptFormatId;
					oParameters1[15] = sSplitMergeCheckId;
					oParameters1[16] = bWithPayments;
					oParameters1[17] = m_oCheckPaymentList;
					oParameters1[18] = bContructWithAllItemFields;
					oParameters1[19] = sChkIdCacheKey;
					oParameters1[20] = sOverrideCheckPrefix;
					oParameters1[21] = lOverrideCheckNo;
					oParameters1[22] = oRunnable;
					oParameters1[23] = bFirstNewCheck;
					oAppThreadManager.addThread(1, m_oCheck, "addUpdate", oParameters1);
					
					// Add the method to thread manager
					// Thread 2 :
					// print guest check
					Object[] oParameters2 = new Object[14];
					oParameters2[0] = true;
					oParameters2[1] = bPayCheck;
					oParameters2[2] = AppGlobal.g_oFuncUser.get().getUserId();
					oParameters2[3] = AppGlobal.g_oFuncStation.get().getStationId();
					oParameters2[4] = iChkPrintQueueId;
					oParameters2[5] = iCheckFmtId;
					oParameters2[6] = bPrtDetailChk;
					oParameters2[7] = AppGlobal.g_oFuncOutlet.get().getOutletNameByIndex(AppGlobal.g_oCurrentLangIndex.get());
					oParameters2[8] = false;
					oParameters2[9] = 0;
					oParameters2[10] = sChkIdCacheKey;
					oParameters2[11] = false;
					oParameters2[12] = false;
					oParameters2[13] = bIsContPrint;
					oAppThreadManager.addThread(2, this, "printCheck", oParameters2);
					
					// Run the thread without wait
					oAppThreadManager.runThread();
					oAppThreadManager.waitForThread();
					
					sSaveCheckResult = ((String) oAppThreadManager.getResult(1));
					
					//update the m_oOutletTable's check id
					if(bSaveNewCheck && m_oOutletTable.getCheckId().equals("") && !m_oCheck.getCheckId().equals(""))
						m_oOutletTable.setCheckId(m_oCheck.getCheckId());
					
					//update the check status for printing
					if(!bPayCheck && !isPaid(false) && !m_oOutletTable.getOtblId().equals("")) {
						if(m_oOutletTable.getStationId() > 0 && !m_oOutletTable.isLockedByPortalStationByKey())
							m_oOutletTable.setStationId(0);
						if(!bPrtDetailChk && iChkPrintQueueId > 0 && iCheckFmtId > 0) {
							m_oOutletTable.setStatus(PosOutletTable.STATUS_CHECK_PRINTED);
						}
						m_oOutletTable.addUpdate(true);
					}
				}
				
				if((m_oCheck.getOrderingMode().equals(PosCheck.ORDERING_MODE_FAST_FOOD) || m_oCheck.getOrderingMode().equals(PosCheck.ORDERING_MODE_SELF_ORDER_KIOSK))&& bWithPayments && iReceiptPrtqId != 0) {
					// Handle the print receipt for fastfood mode
					// *****************************************************************
					// Create thread to handle print receipt
					boolean bHaveThreadJob = false;
					AppThreadManager oAppThreadManager = new AppThreadManager();
					
					// Add the method to thread manager
					// Thread 1 :
					// print receipt for fast food mode
					boolean bNotAllowPrintReceipt = this.m_bNoNeedPrintReceipt;
					
					if(!bNotAllowPrintReceipt && iReceiptFormatId != 0) {
						bHaveThreadJob = true;
						Object[] oParameters2 = new Object[6];
						oParameters2[0] = iReceiptPrtqId;
						oParameters2[1] = iReceiptFormatId;
						oParameters2[2] = m_oCheck.getCheckId();
						oParameters2[3] = "";
						oParameters2[4] = 0;
						oParameters2[5] = false;
						oAppThreadManager.addThread(2, this, "printReceipt", oParameters2);
					}
					
					if(AppGlobal.g_oFuncStation.get().supportTaiwanGui() && m_oCheck.getTaiwanGuiTran(1) != null && !m_oCheck.getTaiwanGuiTran(1).getType().equals(PosTaiwanGuiTran.TYPE_CHARITY) && m_oCheck.getTaiwanGuiTran(1).getCarrier().isEmpty()) {
						int iTaiwanGuiPrtqId = iReceiptPrtqId;
						if (AppGlobal.g_oFuncStation.get().getTaiWanGuiPrintQueueId() > 0) {
							// If print queue for GUI is defined, override the original receipt print queue
							iTaiwanGuiPrtqId = AppGlobal.g_oFuncStation.get().getTaiWanGuiPrintQueueId();
						}
						
						bHaveThreadJob = true;
						Object[] oParameters3 = new Object[6];
						oParameters3[0] = iTaiwanGuiPrtqId;
						oParameters3[1] = AppGlobal.g_oFuncStation.get().getTaiWanGuiPrintFormatId();
						oParameters3[2] = m_oCheck.getCheckId();
						oParameters3[3] = "";
						oParameters3[4] = 0;
						oParameters3[5] = false;
						oAppThreadManager.addThread(3, this, "printReceipt", oParameters3);
					}
					
					// Run the thread without wait
					if(bHaveThreadJob)
						oAppThreadManager.runThread();
					//oAppThreadManager.waitForThread();
				}
			}
			
			if(sSaveCheckResult.equals(PosCheck.API_RESULT_INVALID_BDAY) || sSaveCheckResult.equals(PosCheck.API_RESULT_MISSING_BDAY)) {
				bResult = false;
				String sLogMessage = "";
				if(sSaveCheckResult.equals(PosCheck.API_RESULT_INVALID_BDAY)) {
					sLogMessage = "Invalid business day";
					m_sErrorMessage = AppGlobal.g_oLang.get()._("invalid_business_day");
				} else {
					sLogMessage = "Daily start has been carried out";
					m_sErrorMessage = AppGlobal.g_oLang.get()._("daily_start_has_been_carried_out");
				}
				
				sLogMessage += " [table: "+this.getTableNoWithExtensionForDisplay();
				
				if(this.isOldCheck())
					sLogMessage += ", Check: "+m_oCheck.getCheckId();
				
				String sItemList = "";
				for(PosCheckItem oCheckItem: oCheckItemListForPrinting) {
					if(!sItemList.isEmpty())
						sItemList += ", ";
					sItemList += "("+oCheckItem.getName(1) +": "+oCheckItem.getQty().toPlainString()+")";
				}
				
				if(!sItemList.isEmpty())
					sLogMessage += ", Item List: "+sItemList;
				
				String sPaymentList = "";
				for(PosCheckPayment oCheckPayment: m_oCheckPaymentList) {
					if(!sPaymentList.isEmpty())
						sPaymentList += ", ";
					sPaymentList += "("+oCheckPayment.getName(1) + ": "+oCheckPayment.getPayTotal().toPlainString()+")";
				}
				
				if(!sPaymentList.isEmpty())
					sLogMessage += ", Payment list: "+sPaymentList;
				sLogMessage += "]";

				AppGlobal.writeErrorLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), AppGlobal.g_oFuncStation.get().getStationId()+"", Integer.toString(AppGlobal.g_oFuncUser.get().getUserId()), sLogMessage);
				AppGlobal.startKillSingleStation(AppGlobal.g_oFuncStation.get().getStationId(), AppGlobal.g_oLang.get()._("station_is_killed_by_invalid_business_day"));
			}else if (sSaveCheckResult.equals(PosCheck.API_RESULT_FAIL)) {
				bResult = false;
			}else
				bResult = true;

			if(bWithItems && bResult) // cannot preview check if modified items
				m_bModified = true;

			if(bResult){
				// Send successfully
			
				// *****************************************************************
				// Create thread to print kitchen slip
				AppThreadManager oAppThreadManager = new AppThreadManager();
				
				// Update outlet table's check id
				m_oOutletTable.setCheckId(m_oCheck.getCheckId());
				
				// Update party ID,
				// Update the default check party
				m_oFuncCheckPartyList.get(0).getCheckParty().setCheckId(m_oCheck.getCheckId());
				
				// Update addition check party
				for(JSONObject oPartyInfo:m_oCheck.getPartyInfos()){
					String sId = oPartyInfo.optString("cpty_id");
					int iSeq = oPartyInfo.optInt("cpty_seq");
					
					m_oFuncCheckPartyList.get(iSeq).getCheckParty().setCheckId(m_oCheck.getCheckId());
					m_oFuncCheckPartyList.get(iSeq).getCheckParty().setPartyId(sId);
				}
				
				// Update table number and extension
				if(m_sTableNo.equals("-1") && m_sTableExtension.isEmpty() && (m_oCheck.getTable() != 0 || !m_oCheck.getTableExtension().isEmpty())) {
					if(m_oCheck.getTable() != 0)
						m_sTableNo = String.valueOf(m_oCheck.getTable());
					if(!m_oCheck.getTableExtension().isEmpty())
						m_sTableExtension = m_oCheck.getTableExtension();
				}
				
				// Update outlet's first new check flag
				if(!bUpdate && AppGlobal.g_oFuncOutlet.get().isFirstNewCheck())
					AppGlobal.g_oFuncOutlet.get().setFirstNewCheck(false);
				
				// If there is new item,
				LinkedHashMap<String ,HashMap<String, String>> oNewItemQuantityPair = new LinkedHashMap<>();
				for(JSONObject oNewItemInfo:m_oCheck.getNewAddItemInfos()){
					String sId = oNewItemInfo.optString("citm_id");
					int iSeatNo = oNewItemInfo.optInt("citm_seat");
					int iSeq = oNewItemInfo.optInt("citm_seq");
					int iPartySeq = oNewItemInfo.optInt("cpty_seq");
					JSONArray oNewChildItemInfos = oNewItemInfo.optJSONArray("citm_child_infos");
					JSONArray oNewItemExtraInfos = oNewItemInfo.optJSONArray("citm_extra_infos");

					FuncCheckItem oFuncCheckItem = m_oFuncCheckPartyList.get(iPartySeq).getItemList(iSeatNo).get(iSeq-1);
					if (!oFuncCheckItem.isNoKitchenSlip() && (!oFuncCheckItem.isPendingItem() || oFuncCheckItem.isPartialPendingItem())) {
						HashMap<String, String> oQtyRecord = new HashMap<>();
						oQtyRecord.put("qty", oFuncCheckItem.getCheckItem().getQty().toPlainString());
						oNewItemQuantityPair.put(sId, oQtyRecord);
					}
					
					if (!oFuncCheckItem.isOldItem()) {
						
						// Update item's check id and party id
						oFuncCheckItem.getCheckItem().setCheckItemId(sId);
						oFuncCheckItem.getCheckItem().setCheckId(m_oCheck.getCheckId());
						oFuncCheckItem.getCheckItem().setCheckPartyId(m_oFuncCheckPartyList.get(iPartySeq).getCptyId());
						
						// Update child item's check id and party id
						if(oFuncCheckItem.hasChildItem() && oNewChildItemInfos != null) {
							for(int i = 0; i < oNewChildItemInfos.length(); i++) {
								JSONObject oNewChildItemInfo = oNewChildItemInfos.optJSONObject(i);
								if(oNewChildItemInfo == null)
									continue;
								
								String sChildId = oNewChildItemInfo.optString("citm_id");
								int iChildSeatNo = oNewChildItemInfo.optInt("citm_seat");
								int iChildSeq = oNewChildItemInfo.optInt("citm_seq");
								int iChildPartySeq = oNewChildItemInfo.optInt("cpty_seq");
								JSONArray oNewChildItemExtraInfos = oNewChildItemInfo.optJSONArray("citm_extra_infos");
								FuncCheckItem oChildFuncCheckItem = m_oFuncCheckPartyList.get(iChildPartySeq).getItemList(iChildSeatNo).get(iChildSeq-1);
					
								oChildFuncCheckItem.getCheckItem().setCheckItemId(sChildId);
								oChildFuncCheckItem.getCheckItem().setCheckId(m_oCheck.getCheckId());
								oChildFuncCheckItem.getCheckItem().setCheckPartyId(m_oFuncCheckPartyList.get(iChildPartySeq).getCptyId());
								
								if (oNewChildItemExtraInfos != null) {
									for(int j=0; j<oNewChildItemExtraInfos.length(); j++) {
										JSONObject oNewItemExtraInfo = oNewChildItemExtraInfos.optJSONObject(j);
										if(oNewItemExtraInfo == null)
											continue;
										String sCkeiId = oNewItemExtraInfo.optString("ckei_id");
										String sBy = oNewItemExtraInfo.optString("ckei_by");
										String sSection = oNewItemExtraInfo.optString("ckei_section");
										String sVariable = oNewItemExtraInfo.optString("ckei_variable");
										int iIndex = oNewItemExtraInfo.optInt("ckei_index");
										
										boolean bFound = false;
										for(PosCheckExtraInfo oPosCheckExtraInfo: oChildFuncCheckItem.getExtraInfoList()) {
											if(oPosCheckExtraInfo.getBy().equals(sBy) && oPosCheckExtraInfo.getSection().equals(sSection) && oPosCheckExtraInfo.getVariable().equals(sVariable) && oPosCheckExtraInfo.getIndex() == iIndex) {
												oPosCheckExtraInfo.setCkeiId(sCkeiId);
												bFound = true;
											}
										}
										
										// some extra info added in server side (e.g. calling number), need to add back in check extra info list in java side
										if (!bFound) {
											PosCheckExtraInfo oNewAddedPosCheckExtraInfo = new PosCheckExtraInfo(oNewItemExtraInfo);
											oChildFuncCheckItem.addExtraInfoToList(oNewAddedPosCheckExtraInfo);
											oChildFuncCheckItem.getCheckItem().addExtraInfoToList(oNewAddedPosCheckExtraInfo);
										}
									}
								}
								// add the child item into the no kitchen slip child list
								if (!oChildFuncCheckItem.isNoKitchenSlip() && (!oChildFuncCheckItem.isPendingItem() || oChildFuncCheckItem.isPartialPendingItem())) {
									HashMap<String, String> oQtyRecord = new HashMap<>();
									oQtyRecord.put("qty", oChildFuncCheckItem.getCheckItem().getQty().toPlainString());
									oNewItemQuantityPair.put(sChildId, oQtyRecord);	//oNewItemIds.add(sChildId);
								}
								
								// action log for child item
								try {
									// Action log
									oChildFuncCheckItem.updateActionLog(m_oCheck.getCheckId(), sChildId, "");
									AppGlobal.g_oActionLog.get().addActionLogByList(oChildFuncCheckItem.getActionLogList());
									oChildFuncCheckItem.getActionLogList().clear();
								} catch (Exception e) {
									AppGlobal.stack2Log(e);
								}
							}
							
						}
						
						if (oNewItemExtraInfos != null) {
							for(int i=0; i<oNewItemExtraInfos.length(); i++) {
								JSONObject oNewItemExtraInfo = oNewItemExtraInfos.optJSONObject(i);
								if(oNewItemExtraInfo == null)
									continue;
								String sCkeiId = oNewItemExtraInfo.optString("ckei_id");
								String sBy = oNewItemExtraInfo.optString("ckei_by");
								String sSection = oNewItemExtraInfo.optString("ckei_section");
								String sVariable = oNewItemExtraInfo.optString("ckei_variable");
								int iIndex = oNewItemExtraInfo.optInt("ckei_index");
								
								boolean bFound = false;
								for(PosCheckExtraInfo oPosCheckExtraInfo: oFuncCheckItem.getExtraInfoList()) {
									if(oPosCheckExtraInfo.getBy().equals(sBy) && oPosCheckExtraInfo.getSection().equals(sSection) && oPosCheckExtraInfo.getVariable().equals(sVariable) && oPosCheckExtraInfo.getIndex() == iIndex) {
										oPosCheckExtraInfo.setCkeiId(sCkeiId);
										bFound = true;
									}
								}
								
								// some extra info added in server side (e.g. calling number), need to add back in check extra info list in java side
								if (!bFound) {
									PosCheckExtraInfo oNewAddedPosCheckExtraInfo = new PosCheckExtraInfo(oNewItemExtraInfo);
									oFuncCheckItem.addExtraInfoToList(oNewAddedPosCheckExtraInfo);
									oFuncCheckItem.getCheckItem().addExtraInfoToList(oNewAddedPosCheckExtraInfo);
								}
							}
						}
						
						try {
							// Action log
							oFuncCheckItem.updateActionLog(m_oCheck.getCheckId(), sId, "");
							AppGlobal.g_oActionLog.get().addActionLogByList(oFuncCheckItem.getActionLogList());
							oFuncCheckItem.getActionLogList().clear();
						} catch (Exception e) {
							AppGlobal.stack2Log(e);
						}
					}
				}
				
/*
 Setting iSaveCheckType as 1 aims to prevent sending unwanted kitchen slip after split, 
 but error log about audit component occur if set iSendCheckType 1 under split_item_with_quantity function,
 so "!m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_item_with_quantity.name())" condition added */
				if(!m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_item_with_quantity.name()) 
					&& !oNewItemQuantityPair.isEmpty() && iSaveCheckType != 1){ // For split table, no need print kitchen slip
					// Add the method to the thread manager
					// Thread 1 : Print kitchen slip
					// Create parameter array
					Object[] oParameters = new Object[4];
					oParameters[0] = m_oCheck.getCheckId();
					oParameters[1] = oNewItemQuantityPair;
					oParameters[2] = AppGlobal.g_oCurrentLangIndex.get();
					oParameters[3] = false;
					oAppThreadManager.addThread(1, m_oCheck, "printKitchenSlip", oParameters);
				}
				
				// If there is new check's extra info
				if(m_oCheck.getNewAddCheckExtraInfos() != null && !m_oCheck.getNewAddCheckExtraInfos().isEmpty()) {
					boolean bUpdateExtraInfoList = false;
					for(JSONObject oNewCheckExtraInfo: m_oCheck.getNewAddCheckExtraInfos()){
						String sCkeiId = oNewCheckExtraInfo.optString("ckei_id");
						String sBy = oNewCheckExtraInfo.optString("ckei_by");
						String sSection = oNewCheckExtraInfo.optString("ckei_section");
						String sVariable = oNewCheckExtraInfo.optString("ckei_variable");
						int iIndex = oNewCheckExtraInfo.optInt("ckei_index");
						
						boolean bFound = false;
						for(PosCheckExtraInfo oPosCheckExtraInfo: m_oCheckExtraInfoList) {
							if(oPosCheckExtraInfo.getBy().equals(sBy) && oPosCheckExtraInfo.getSection().equals(sSection) && oPosCheckExtraInfo.getVariable().equals(sVariable) && oPosCheckExtraInfo.getIndex() == iIndex) {
								oPosCheckExtraInfo.setCkeiId(sCkeiId);
								bFound = true;
							}
						}
						
						// some extra info added in server side (e.g. calling number), need to add back in check extra info list in java side
						if (!bFound) {
							PosCheckExtraInfo oNewAddedPosCheckExtraInfo = new PosCheckExtraInfo(oNewCheckExtraInfo);
							m_oCheckExtraInfoList.add(oNewAddedPosCheckExtraInfo);
							bUpdateExtraInfoList = true;
						}
					}
					
					if (bUpdateExtraInfoList)
						m_oCheck.setCheckExtraInfoList(m_oCheckExtraInfoList);
				}
				
				// If there is new check's tax sc ref
				if (m_oCheck.getNewAddCheckTaxScRefs() != null && !m_oCheck.getNewAddCheckTaxScRefs().isEmpty()) {
					boolean bUpdateTaxScRefList = false;
					for (JSONObject oNewPosCheckTaxScRef : m_oCheck.getNewAddCheckTaxScRefs()) {
						String sCtsrId = oNewPosCheckTaxScRef.optString("ctsr_id");
						String sBy = oNewPosCheckTaxScRef.optString("ctsr_by");
						String sVariable = oNewPosCheckTaxScRef.optString("ctsr_variable");
						
						boolean bFound = false;
						for (PosCheckTaxScRef oPosCheckTaxScRef : m_oCheckTaxScRefList) {
							if (oPosCheckTaxScRef.getBy().equals(sBy) && oPosCheckTaxScRef.getVariable().equals(sVariable)) {
								oPosCheckTaxScRef.setCtsrId(sCtsrId);
								bFound = true;
							}
						}
						
						// some extra info added in server side (e.g. calling number), need to add back in check extra info list in java side
						if (!bFound) {
							PosCheckTaxScRef oNewAddedPosCheckTaxScRef = new PosCheckTaxScRef(oNewPosCheckTaxScRef);
							m_oCheckTaxScRefList.add(oNewAddedPosCheckTaxScRef);
							bUpdateTaxScRefList = true;
						}
					}
					
					if (bUpdateTaxScRefList)
						m_oCheck.setCheckTaxScRefList(m_oCheckTaxScRefList);
				}
				
				// Update the check attribute
				if(hasActiveCheckAttribute())
					m_oCheck.getCheckAttribute().setChksId(m_oCheck.getCheckId());
				
				if(oNeedPrintPaymentGatewayTransactionsList.size() > 0){
					List<PosPaymentGatewayTransactions> oTmpPrintPaymentGatewayTransList = oNeedPrintPaymentGatewayTransactionsList;
					for(PosPaymentGatewayTransactions oPosPaymentGatewayTransactions : oNeedPrintPaymentGatewayTransactionsList){
						oPosPaymentGatewayTransactions.setChksId(m_oCheck.getCheckId());
						BigDecimal oTotalAmount = BigDecimal.ZERO;
						for(PosPaymentGatewayTransactions oPaymentGatewayTrans : oTmpPrintPaymentGatewayTransList){
							if(oPaymentGatewayTrans.getAuthCode().equals(oPosPaymentGatewayTransactions.getAuthCode()) ||
								oPaymentGatewayTrans.getAuthCode().equals(oPosPaymentGatewayTransactions.getParentAuthCode()) || 
								oPaymentGatewayTrans.getParentAuthCode().equals(oPosPaymentGatewayTransactions.getAuthCode()) ||
								(oPaymentGatewayTrans.getParentAuthCode().equals(oPosPaymentGatewayTransactions.getParentAuthCode()) && !oPosPaymentGatewayTransactions.getParentAuthCode().isEmpty())){
									oTotalAmount = oTotalAmount.add(oPaymentGatewayTrans.getAmount());
								}
						}
						printCardAuthorizationSlip(oPosPaymentGatewayTransactions.getType(), oPosPaymentGatewayTransactions.constructAddSaveJSON(true), oTotalAmount);
						
						// print cancel slip if the authorization has been cancel before
						if(oPosPaymentGatewayTransactions.getStatus().equals(PosPaymentGatewayTransactions.STATUS_VOIDED))
							printCardAuthorizationSlip(FramePaymentCardAuthorization.AUTHORIZATION_TYPE.cancel_authorization.name(), oPosPaymentGatewayTransactions.constructAddSaveJSON(true), oTotalAmount);
					}
				}
				
				// If there is new payment gateway transactions
				if(m_oCheck.getNewAddPaymentGatewayTrans() != null && !m_oCheck.getNewAddPaymentGatewayTrans().isEmpty()) {
					for(JSONObject oNewPaymentGatewayTrans: m_oCheck.getNewAddPaymentGatewayTrans()){
						String sPgtxId = oNewPaymentGatewayTrans.optString("pgtx_id");
						String sBdayId = oNewPaymentGatewayTrans.optString("pgtx_bday_id");
						String sChksId = oNewPaymentGatewayTrans.optString("pgtx_chks_id");
						String sTranceNo = oNewPaymentGatewayTrans.optString("pgtx_trace_num");
						//String sMaskedPan = oNewPaymentGatewayTrans.optString("pgtx_masked_pan");
						String sAuthCode = oNewPaymentGatewayTrans.optString("pgtx_auth_code");
						String sToken = "";
						
						if(oNewPaymentGatewayTrans.has("pgtx_other_info")){
							JSONObject resultOtherInfo = null;
							try {
								resultOtherInfo = new JSONObject(oNewPaymentGatewayTrans.optString("pgtx_other_info"));
							} catch (JSONException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							if(resultOtherInfo != null){
								sToken = resultOtherInfo.optString("token");
							}
						}
						
						
						for(PosPaymentGatewayTransactions oPosPaymentGatewayTransactions: m_oPosPaymentGatewayTransactionsList.getPosPaymentGatewayTransactionsList()) {
							if(oPosPaymentGatewayTransactions.getBdayId().equals(sBdayId) && oPosPaymentGatewayTransactions.getTraceNo().equals(sTranceNo)
									&& oPosPaymentGatewayTransactions.getToken().equals(sToken) && oPosPaymentGatewayTransactions.getAuthCode().equals(sAuthCode)) {
								oPosPaymentGatewayTransactions.setPgtxId(sPgtxId);
								oPosPaymentGatewayTransactions.setChksId(sChksId);
							}
						}
					}
				}
				
				// Update the check gratuity
				if(m_oCheck.getNewCheckGratuitiesList() != null && !m_oCheck.getNewCheckGratuitiesList().isEmpty()) {
					for(JSONObject oNewCheckGratuity: m_oCheck.getNewCheckGratuitiesList()){
						String sCgraId = oNewCheckGratuity.optString("cgra_id");
						int iGratId = oNewCheckGratuity.optInt("cgra_grat_id");
						String sChksId = oNewCheckGratuity.optString("cgra_chks_id");
						
						for(PosCheckGratuity oPosCheckGratuity: m_oCheck.getCheckGratuityList()) {
							if(oPosCheckGratuity.getGratId() == iGratId) {
								oPosCheckGratuity.setCgraId(sCgraId);
								oPosCheckGratuity.setChksId(sChksId);
								break;
							}
						}
					}
				}
				
				// Update mix and match parent id by using item sequence no.
				if(bWithItems && AppGlobal.g_oFuncMixAndMatch.get().isSupportMixAndMatch()){
					// Add the method to the thread manager
					// Thread 2 : Update mix and match item's master item ID	
					oAppThreadManager.addThread(2, this, "updateMixAndMatchMasterItemIds", null);
				}
				
				// Update check discount and its discount item ids
				List<JSONObject> oNewCheckDiscountInfos = m_oCheck.getNewCheckDiscountInfos();
				if(!oNewCheckDiscountInfos.isEmpty()) {
					for(JSONObject oCheckDiscountInfo:oNewCheckDiscountInfos) {
						int iCheckDiscIndex = oCheckDiscountInfo.optInt("cdis_seq");
						
						for(int iPartySeq=0; iPartySeq<m_oFuncCheckPartyList.size(); iPartySeq++) {
							if(m_oFuncCheckPartyList.get(iPartySeq).hasPartyCheckDiscount(iCheckDiscIndex) == true) {
								m_oFuncCheckPartyList.get(iPartySeq).getPartyCheckDiscount(iCheckDiscIndex).setCdisId(oCheckDiscountInfo.optString("checkDiscountId"));
								m_oFuncCheckPartyList.get(iPartySeq).getPartyCheckDiscount(iCheckDiscIndex).setModified(false);
								
								if(oCheckDiscountInfo.has("checkDiscountItemIds")) {
									JSONArray oCheckDiscountItemInfos = oCheckDiscountInfo.optJSONArray("checkDiscountItemIds");
									List<FuncCheckItem> oAppliedItems = m_oFuncCheckPartyList.get(iPartySeq).getAppliedCheckDiscountItemList(iCheckDiscIndex);
									
									for(int i=0; i<oCheckDiscountItemInfos.length(); i++) {
										for(FuncCheckItem oAppliedFuncCheckItem: oAppliedItems) {
											if(oAppliedFuncCheckItem.getCheckItem().getCitmId().equals(oCheckDiscountItemInfos.optJSONObject(i).optString("citmId"))) {
												oAppliedFuncCheckItem.getCheckDiscountItemList(iCheckDiscIndex).setCditId(oCheckDiscountItemInfos.optJSONObject(i).optString("cditId"));
												oAppliedFuncCheckItem.getCheckDiscountItemList(iCheckDiscIndex).setCdisId(oCheckDiscountInfo.optString("checkDiscountId"));
												break;
											}
										}
									}
								}
								
								if(oCheckDiscountInfo.has("checkExtraInfos")) {
									JSONArray oCheckDiscountExtraInfos = oCheckDiscountInfo.optJSONArray("checkExtraInfos");
									
									for(int i=0; i<oCheckDiscountExtraInfos.length(); i++) {
										JSONObject oNewCheckDiscountExtraInfo = oCheckDiscountExtraInfos.optJSONObject(i);
										if(oNewCheckDiscountExtraInfo == null)
											continue;
										String iCkeiId = oNewCheckDiscountExtraInfo.optString("ckei_id");
										String sBy = oNewCheckDiscountExtraInfo.optString("ckei_by");
										String sSection = oNewCheckDiscountExtraInfo.optString("ckei_section");
										String sVariable = oNewCheckDiscountExtraInfo.optString("ckei_variable");
										int iIndex = oNewCheckDiscountExtraInfo.optInt("ckei_index");
										
										for(PosCheckExtraInfo oPosCheckExtraInfo: m_oFuncCheckPartyList.get(iPartySeq).getPartyCheckDiscount(iCheckDiscIndex).getCheckExtraInfoList()) {
											if(oPosCheckExtraInfo.getBy().equals(sBy) && oPosCheckExtraInfo.getSection().equals(sSection) && oPosCheckExtraInfo.getVariable().equals(sVariable) && oPosCheckExtraInfo.getIndex() == iIndex) {
												oPosCheckExtraInfo.setCkeiId(iCkeiId);
											}
										}
									}
									
								}
								
								break;
							}
						}
					}
				}

				if(iGetUpdateRecord == 2) {
					
					//form the check party list
					this.addOldCheckPartyToList();
					
					//form the check discount list
					this.addOldCheckDiscountToList();
					
					//form the check extra info list
					this.addOldCheckExtraInfoToList();
					
					// form the check tax sc ref list
					this.addOldCheckTaxScRefList();
					
					//form the payment gateway transactions list
					this.addOldPaymentGatewayTransToList();
				}
				
				if(!bUpdate){
					// For new check,
					
					// Add "new_check" log to action log list
					AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.send_check.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), "", "", "", "", "");
				}

				List<String> oNewPaymentIds = m_oCheck.getNewPaymentIds();
				if(!oNewPaymentIds.isEmpty()) {
					String sLastPaymentId = "";
					for(String sNewCpayId:oNewPaymentIds){
						// For direct payment, add "paid" log to action log list
						AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.paid.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), m_oCheck.getShopId(), m_oCheck.getOutletId(), m_oCheck.getBusinessDayId(), m_oCheck.getBusinessPeriodId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), "", "", "", sNewCpayId, "");
						
						// Get the last payment Id
						sLastPaymentId = sNewCpayId;
					}
					
					// Add Octopus transaction if last payment is Octopus payment
					for (PosCheckPayment oCheckPayment:m_oCheckPaymentList) {
						if(oCheckPayment.isOctopusPaymentType()){
							// Add the method to the thread manager
							// Thread : add Octopus transaction
							//Create parameter array
							try{
								// Retrieve the Octopus transaction detail from check payment ref 1
								JSONObject oOctopusTransactionJsonObject = new JSONObject(oCheckPayment.getRefData(1));
								
								Object[] oParameters4 = new Object[19];
								oParameters4[0] = AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId();
								oParameters4[1] = AppGlobal.g_oFuncOutlet.get().getShopId();
								oParameters4[2] = AppGlobal.g_oFuncOutlet.get().getOutletId();
								oParameters4[3] = getCheckId();
								oParameters4[4] = sLastPaymentId;	// Last payment ID
								oParameters4[5] = PosOctopusTransaction.TYPE_DEDUCT_VALUE;
								oParameters4[6] = oOctopusTransactionJsonObject.getString("transaction_time");
								oParameters4[7] = new BigDecimal(oOctopusTransactionJsonObject.getString("transaction_amount"));
								oParameters4[8] = oCheckPayment.getPaymentMethodId();
								oParameters4[9] = oOctopusTransactionJsonObject.getString("device_id");
								oParameters4[10] = oOctopusTransactionJsonObject.getString("udsn");
								oParameters4[11] = oOctopusTransactionJsonObject.getString("card_id");
								oParameters4[12] = oOctopusTransactionJsonObject.getString("card_type");
								oParameters4[13] = new BigDecimal(oOctopusTransactionJsonObject.getString("original_remain_amount"));
								oParameters4[14] = new BigDecimal(oOctopusTransactionJsonObject.getString("current_remain_amount"));
								oParameters4[15] = AppGlobal.g_oFuncUser.get().getUserId();
								oParameters4[16] = AppGlobal.g_oFuncStation.get().getStationId();
								// Empty for deduct value
								oParameters4[17] = "";
								oParameters4[18] = "";
								oAppThreadManager.addThread(3, AppGlobal.g_oFuncOctopus.get(), "addOctopusTransaction", oParameters4);
							}catch (Exception e) {
								AppGlobal.stack2Log(e);
							}
							
							break;
						}
					}
				}
				
				// Run the thread without wait
				oAppThreadManager.runThread();
			}
			
			//do tms connect - "open check", "order item", "print check", "set course"
			if(sSaveCheckResult.equals(PosCheck.API_RESULT_SUCCESS)){
				FuncTMS oFuncTMS = AppGlobal.getTmsInfoFromTmsInterfaceInfoList(AppGlobal.g_oFuncOutlet.get().getOutletId(), this.getCheckId());
				if(oFuncTMS == null){
					//tms open check and set status to "order item"
					PosInterfaceConfig oTmsInterfaceConfig = null;
					List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_TMS);
					for(PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList){
						String sInterfaceId = this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_TMS, PosCheckExtraInfo.VARIABLE_INTERFACE_ID);
						if(sInterfaceId.compareTo(Integer.toString(oPosInterfaceConfig.getInterfaceId())) == 0){
							oTmsInterfaceConfig = oPosInterfaceConfig;
							break;
						}
					}
					if(oTmsInterfaceConfig != null && !m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.release_payment.name())){
						oFuncTMS = new FuncTMS(oTmsInterfaceConfig);
						String sResponseData = this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_TMS, PosCheckExtraInfo.VARIABLE_DATA);
						//split item or new check, need to open check
						if(sResponseData.isEmpty()){
							oFuncTMS.tmsOpenCheck(this);
							if(iSendMode == 1 || (!bWithItems && iSendMode == 0))//for split item, order old items
								oFuncTMS.tmsChangeStatus(FuncTMS.TABLE_STATUS_ORDER_ITEM, null);
						}
						AppGlobal.addCheckToTmsInterfaceCheckList(AppGlobal.g_oFuncOutlet.get().getOutletId(), oFuncTMS);
					}
				}
				
				if(oFuncTMS != null){
					//reset check id and response object back to FuncTMS
					//in case, server is down and threads is lost.
					if(oFuncTMS.getCheckId().equals("") || oFuncTMS.getResponseObject() == null){
						String sResponseData = this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_TMS, PosCheckExtraInfo.VARIABLE_DATA);
						JSONObject oResponseObject = null;
						try{
							oResponseObject = new JSONObject(sResponseData);
						}catch (Exception e) {
							// TODO: handle exception
						}
						if(oResponseObject != null){
							oFuncTMS.resetCheckId(this.getCheckId());
							oFuncTMS.resetResponseObject(oResponseObject);
						}
					}
					if(bWithItems){
						//if there are new items
						if(iSendMode != 1)
							oFuncTMS.tmsChangeStatus(FuncTMS.TABLE_STATUS_ORDER_ITEM, null);
						ArrayList<Integer> oMarkDeliveryItemCourseIds = new ArrayList<Integer>();
						ArrayList<String> oMarkedDeliveryItemIds = oFuncTMS.getMarkedDeliveryItemIds();
						for(List<FuncCheckItem> oItemList:m_oCurrentFuncCheckParty.getWholeItemList()){
							for (FuncCheckItem oCheckItem:oItemList) {
								if(oCheckItem.isOldItem()){
									String sCheckItemId = oCheckItem.getCheckItem().getCitmId();
									if(oCheckItem.hasDelivered()){
										//check the item whether "mark delivery before"
										if(!oMarkedDeliveryItemIds.contains(sCheckItemId)){
											oMarkedDeliveryItemIds.add(sCheckItemId);
											if(!oMarkDeliveryItemCourseIds.contains(oCheckItem.getCheckItem().getCourseId())){
												oMarkDeliveryItemCourseIds.add(oCheckItem.getCheckItem().getCourseId());
											}
										}
									}
								}	
							}
						}
						if(oMarkDeliveryItemCourseIds.size() > 0){
							oFuncTMS.setMarkedDeliveryItemIds(oMarkedDeliveryItemIds);
							oFuncTMS.tmsChangeStatus(FuncTMS.TABLE_STATUS_SET_COURSE, oMarkDeliveryItemCourseIds);
						}
					}
					//if any print action
					if(iCheckFmtId > 0)
						oFuncTMS.tmsChangeStatus(FuncTMS.TABLE_STATUS_PRINT_CHECK, null);
				}
			}
		}

		//handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		updateUsedDiscountPointOnCheckExtraInfoForInterface();
		return sSaveCheckResult;
	}
	
	// Send to Loyalty Server to calcTrans
	// save benefit item/discount, check number
	/*public boolean calculateLoyaltyTransaction() {
		m_sErrorMessage = "";
		//String sErrMsg = "";
		boolean bSupportLoyaltyMember = AppGlobal.g_oFuncStation.get().isSupportLoyaltyMember();
		if (!bSupportLoyaltyMember)
			return false;
		
		// Have no loyalty transaction, no need to do calcTrans
		if (this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_UUID).isEmpty())
			return false;
		
		// Construct item/discount list which is added from benefit, and then send "calcTrans" to master server
		// Only new added item/discount will send to calcTrans
		List<PosCheckItem> oCheckItemList = new ArrayList<PosCheckItem>();
		for (List<FuncCheckItem> oFuncCheckItemList: this.getWholeItemList()) {
			for (FuncCheckItem oFuncCheckItem: oFuncCheckItemList) {
				if (oFuncCheckItem.isOldItem())
					continue;
				
				if (oFuncCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_REFERENCE) == null)
					continue;
				
				PosCheckItem oPosCheckItem = new PosCheckItem(oFuncCheckItem.getCheckItem());
				oPosCheckItem.setExtraInfoList(oFuncCheckItem.getExtraInfoList());
				oCheckItemList.add(oPosCheckItem);
			}
		}
		List<PosCheckDiscount> oCheckDiscountList = new ArrayList<PosCheckDiscount>();
		for(FuncCheckParty oFuncCheckParty: m_oFuncCheckPartyList) {
			if (!oFuncCheckParty.hasPartyCheckDiscount())
				continue;
			
			for (PosCheckDiscount oPosCheckDiscount: oFuncCheckParty.getPartyCheckDiscount()) {
				if (oPosCheckDiscount.getCdisId().compareTo("") > 0)
					continue;
				
				if (oPosCheckDiscount.getExtraInfoFromList(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_REFERENCE, 0) == null)
					continue;
				
				oCheckDiscountList.add(oPosCheckDiscount);
			}
		}
		
		FuncLoyalty oFuncLoyalty = new FuncLoyalty();
		String sMemberNo = this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER);
		boolean bResult = oFuncLoyalty.calcTrans(sMemberNo, this, oCheckItemList, oCheckDiscountList);
		if (bResult) {
			String sBonusBalance = Integer.toString(oFuncLoyalty.getBonusBalance());
			
			if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_POINTS_BALANCE, 0))
				updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_POINTS_BALANCE, 0, sBonusBalance);
			else
				addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_POINTS_BALANCE, 0, sBonusBalance);
		} else {
			m_sErrorMessage = oFuncLoyalty.getErrorMessage();
			return false;
		}
		
		return true;
	}*/
	
	public boolean calculateLoyaltyTransaction() {
		String sInterfaceId = "", sSvcInterfaceId = "";
		m_sErrorMessage = "";
		FuncLoyalty oAssignedLoyalty = new FuncLoyalty();
		//check loyalty session ID
		if(AppGlobal.g_oFuncStation.get().getLoyaltySessionId().isEmpty())
			return true;
		
		// If the check is not a Loyalty check, return
		if(!isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_TRACE_ID, 0))
			return true;
		
		if(this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_TRACE_ID).isEmpty())
			return true;
		
		// Get Loyalty Interface
		PosInterfaceConfig oInterfaceConfig = null;
		List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_LOYALTY_INTERFACE);
		if(!oInterfaceConfigList.isEmpty()) {
			for(PosInterfaceConfig oPosInterfaceConfig: oInterfaceConfigList) {
				if(oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_GM_LOYALTY)){
					oInterfaceConfig = oPosInterfaceConfig;
					sInterfaceId = oPosInterfaceConfig.getInterfaceId() + "";
					break;
				}
			}
		}
		if(oInterfaceConfig == null)
			return true;
		
		// Get Loyalty SVC Interface
		oInterfaceConfig = null;
		oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_LOYALTY_INTERFACE);
		if(!oInterfaceConfigList.isEmpty()) {
			for(PosInterfaceConfig oPosInterfaceConfig: oInterfaceConfigList) {
				if(oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_GM_LOYALTY_SVC)){
					oInterfaceConfig = oPosInterfaceConfig;
					sSvcInterfaceId = oPosInterfaceConfig.getInterfaceId() + "";
					break;
				}
			}
		}
		
		this.calcLoyaltyBaseTotal();
		if(!oAssignedLoyalty.startRedeem("", FuncLoyalty.TYPE_NUMBER, sInterfaceId, sSvcInterfaceId, this, 0)) {
			m_sErrorMessage = oAssignedLoyalty.getLastErrorMessage();
			
			//If the m_sErrorMesasge is failed to redeem benefit, show those benefit
			if(oAssignedLoyalty.getItemErrorReasonRecords() != null && oAssignedLoyalty.getItemErrorReasonRecords().size() > 0)
				m_oFailRedeemBenefitList = oAssignedLoyalty.getItemErrorReasonRecords();
			
			return false;
		} else {
			if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_EXPIRY_DATE, 0))
				updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_EXPIRY_DATE, 0, oAssignedLoyalty.getExpiryDate());
			else
				addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_EXPIRY_DATE, 0, oAssignedLoyalty.getExpiryDate());
			
			if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_POINTS_EARN, 0))
				updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_POINTS_EARN, 0, oAssignedLoyalty.getBonusCredit().toString());
			else
				addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_POINTS_EARN, 0, oAssignedLoyalty.getBonusCredit().toString());
			
			BigDecimal m_oTotalDebit = BigDecimal.ZERO;
			for(int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
				// Create ordering basket section for seat
				List<FuncCheckItem> oFuncCheckItemList = this.getItemList(i);
				
				if(oFuncCheckItemList != null && oFuncCheckItemList.size() > 0) {					//Has ordered items in seat i
					for (int j=0; j<oFuncCheckItemList.size(); j++) {
						FuncCheckItem oFuncCheckItem = oFuncCheckItemList.get(j);
						for(PosCheckExtraInfo oPosCheckExtraInfo:oFuncCheckItem.getExtraInfoList()){
							if(oPosCheckExtraInfo.getSection().equals(PosCheckExtraInfo.SECTION_LOYALTY) &&
									oPosCheckExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_BENEFIT_AMOUNT) &&
									oPosCheckExtraInfo.getValue() != null && oPosCheckExtraInfo.getValue() != "")
								m_oTotalDebit = m_oTotalDebit.add(new BigDecimal(oPosCheckExtraInfo.getValue()));
						}
					}
				}
			}
			for(PosCheckDiscount oPosCheckDiscount:this.getCurrentPartyAppliedCheckDiscount()){
				BigDecimal oBenefitAmount = BigDecimal.ZERO;
				BigDecimal oBenefitUsed = BigDecimal.ONE;
				for(PosCheckExtraInfo oPosCheckExtraInfo:oPosCheckDiscount.getCheckExtraInfoList()){
					if(oPosCheckExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_BENEFIT_QTY)){
						if(oPosCheckExtraInfo.getValue() == null || oPosCheckExtraInfo.getValue() == "")
							oBenefitUsed = BigDecimal.ONE;
						else
							oBenefitUsed = new BigDecimal(oPosCheckExtraInfo.getValue());
					}
					
					if(oPosCheckExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_BENEFIT_AMOUNT)){
						if(oPosCheckExtraInfo.getValue() == null || oPosCheckExtraInfo.getValue() == "")
							oBenefitAmount = BigDecimal.ZERO;
						else
							oBenefitAmount = new BigDecimal(oPosCheckExtraInfo.getValue());
					}
				}
				m_oTotalDebit = m_oTotalDebit.add(oBenefitAmount.multiply(oBenefitUsed));
			}
			if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_POINT_REDEEM, 0))
				updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_POINT_REDEEM, 0, m_oTotalDebit.setScale(0).toString());
			else
				addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_POINT_REDEEM, 0, m_oTotalDebit.setScale(0).toString());
			
			return true;
		}
	}

	/*public boolean closeLoyaltyTransaction() {
		m_sErrorMessage = "";
		boolean bSupportLoyaltyMember = AppGlobal.g_oFuncStation.get().isSupportLoyaltyMember();
		
		// Not support loyalty member redemption
		if (!bSupportLoyaltyMember)
			return false;

		// Have no loyalty transaction, no need to do closeTrans
		if (this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_UUID).isEmpty())
			return false;

		FuncLoyalty oFuncLoyalty = new FuncLoyalty();
		boolean bResult = oFuncLoyalty.closeTrans(this, "");
		if (bResult) {
			String sBonusCredit = Integer.toString(oFuncLoyalty.getBonusCredit());
			if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_POINTS_EARN, 0))
				updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_POINTS_EARN, 0, sBonusCredit);
			else
				addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_POINTS_EARN, 0, sBonusCredit);
			
			String sBonusBalance = Integer.toString(oFuncLoyalty.getBonusBalance());
			if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_POINTS_BALANCE, 0))
				updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_POINTS_BALANCE, 0, sBonusBalance);
			else
				addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_POINTS_BALANCE, 0, sBonusBalance);

			String sValidThrough = oFuncLoyalty.getValidThrough();
			if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_EXPIRY_DATE, 0))
				updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_EXPIRY_DATE, 0, sValidThrough);
			else
				addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_EXPIRY_DATE, 0, sValidThrough);
		} else {
			m_sErrorMessage = oFuncLoyalty.getErrorMessage();
			return false;
		}
		
		return true;
	}*/
	
	public boolean closeLoyaltyTransaction(){
		String sInterfaceId = "";
		m_sErrorMessage = "";
		FuncLoyalty oAssignedLoyalty = new FuncLoyalty();
		
		//check loyalty session
		if(AppGlobal.g_oFuncStation.get().getLoyaltySessionId().isEmpty())
			return true;
		
		// If the check is not a Loyalty check, return
		if(this.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_TRACE_ID, 0) && 
			this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_TRACE_ID) == null)
			return true;
		
		if(this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_TRACE_ID) == null)
			return true;
		
		if(this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_TRACE_ID).isEmpty())
			return false;
		
		if(!this.isOldCheck())
			return false;
		
		PosInterfaceConfig oInterfaceConfig = null;
		List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_LOYALTY_INTERFACE);
		if(!oInterfaceConfigList.isEmpty()) {
			for(PosInterfaceConfig oPosInterfaceConfig: oInterfaceConfigList) {
				if(oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_GM_LOYALTY)){
					oInterfaceConfig = oPosInterfaceConfig;
					sInterfaceId = oPosInterfaceConfig.getInterfaceId() + "";
					break;
				}
			}
		}
		if(oInterfaceConfig == null)
			return true;
		
		BigDecimal m_oTotalDebit = BigDecimal.ZERO;
		for(int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
			// Create ordering basket section for seat
			ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>)this.getItemList(i);
			
			if(oFuncCheckItemList != null && oFuncCheckItemList.size() > 0) {					//Has ordered items in seat i
				for (int j=0; j<oFuncCheckItemList.size(); j++) {
					FuncCheckItem oFuncCheckItem = oFuncCheckItemList.get(j);
					for(PosCheckExtraInfo oPosCheckExtraInfo:oFuncCheckItem.getExtraInfoList()){
						if(oPosCheckExtraInfo.getSection().equals(PosCheckExtraInfo.SECTION_LOYALTY) &&
								oPosCheckExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_BENEFIT_AMOUNT) &&
								oPosCheckExtraInfo.getValue() != null)
							m_oTotalDebit = m_oTotalDebit.add(new BigDecimal(oPosCheckExtraInfo.getValue()));
					}
				}
			}
		}
		
		for(PosCheckDiscount oPosCheckDiscount:this.getCurrentPartyAppliedCheckDiscount()){
			BigDecimal oBenefitAmount = BigDecimal.ZERO;
			BigDecimal oBenefitUsed = BigDecimal.ONE;
			for(PosCheckExtraInfo oPosCheckExtraInfo:oPosCheckDiscount.getCheckExtraInfoList()){
				if(oPosCheckExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_BENEFIT_QTY)){
					if(oPosCheckExtraInfo.getValue() == null || oPosCheckExtraInfo.getValue() == "")
						oBenefitUsed = BigDecimal.ONE;
					else
						oBenefitUsed = new BigDecimal(oPosCheckExtraInfo.getValue());
				}
				
				if(oPosCheckExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_BENEFIT_AMOUNT)){
					if(oPosCheckExtraInfo.getValue() == null || oPosCheckExtraInfo.getValue() == "")
						oBenefitAmount = BigDecimal.ZERO;
					else
						oBenefitAmount = new BigDecimal(oPosCheckExtraInfo.getValue());
				}
			}
			m_oTotalDebit = m_oTotalDebit.add(oBenefitAmount.multiply(oBenefitUsed));
		}
		
		calculateLoyaltyTransaction();
		
		if(oAssignedLoyalty.closeLoyaltyTransaction(this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_TRACE_ID), sInterfaceId, m_oTotalDebit)){
			//add extraInfo to Check
			addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_POINT_REDEEM, 0, m_oTotalDebit.toString());
			return true;
		}
		
		return false;
	}
	
	private void updateMixAndMatchMasterItemIds(){
		HashMap<String, String>oMasterSlaveSeatSeqList = new HashMap<String, String>();
		
		// Initial all item with NO master item
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for (List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oMasterFuncCheckItem:oItemList){
					String sKey = oMasterFuncCheckItem.getCheckItem().getCptyId() + "_" + oMasterFuncCheckItem.getCheckItem().getSeatNo() + "_" + oMasterFuncCheckItem.getCheckItem().getSeq();
					String sValue = "0_0_0";
					oMasterSlaveSeatSeqList.put(sKey, sValue);
				}
			}
		}
		
		// Set the slave item with master item
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for (List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oMasterFuncCheckItem:oItemList){
					for (FuncCheckItem oSlaveFuncCheckItem:oMasterFuncCheckItem.getMixAndMatchItemList()){
						String sKey = oSlaveFuncCheckItem.getCheckItem().getCptyId() + "_" + oSlaveFuncCheckItem.getCheckItem().getSeatNo() + "_" + oSlaveFuncCheckItem.getCheckItem().getSeq();
						String sValue = oMasterFuncCheckItem.getCheckItem().getCptyId() + "_" + oMasterFuncCheckItem.getCheckItem().getSeatNo() + "_" + oMasterFuncCheckItem.getCheckItem().getSeq();
						oMasterSlaveSeatSeqList.put(sKey, sValue);
					}
				}
			}
		}
		
		if(!oMasterSlaveSeatSeqList.isEmpty())
			m_oCheck.updateMixAndMatchMasterItemIds(oMasterSlaveSeatSeqList);
	}
	
	// Split multiple quantity new item to single quantity
	public void splitMultipleQtyNewItemToSingleQty(){
		ArrayList<ArrayList<FuncCheckItem>> oAllPartiesNewFuncCheckItemList = new ArrayList<ArrayList<FuncCheckItem>>();
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			ArrayList<FuncCheckItem> oNewFuncCheckItemList = new ArrayList<FuncCheckItem>();
			// Get all new ordered items
			for(int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
				ArrayList<FuncCheckItem> oFuncCheckItemList = (ArrayList<FuncCheckItem>)oFuncCheckParty.getItemList(i);
				if(oFuncCheckItemList != null && !oFuncCheckItemList.isEmpty()) {					//Has ordered items in seat i
					for (int j=0; j<oFuncCheckItemList.size(); j++) {
						FuncCheckItem oFuncCheckItem = oFuncCheckItemList.get(j);
						// No need to handle old item and set menu child item
						if(!oFuncCheckItem.isOldItem() && !oFuncCheckItem.isSetMenuItem())
							oNewFuncCheckItemList.add(oFuncCheckItem);
					}
				}
			}
			
			oAllPartiesNewFuncCheckItemList.add(oNewFuncCheckItemList);
		}
		
		// Remove the new item first
		this.removeAllNewItemFormItemList(false, false);

		// Process each new ordered item
		for(int i = 0; i < oAllPartiesNewFuncCheckItemList.size(); i++) {
			
			// Switch current process party
			m_oCurrentFuncCheckParty = m_oFuncCheckPartyList.get(i);
			
			ArrayList<FuncCheckItem> oNewFuncCheckItemList = oAllPartiesNewFuncCheckItemList.get(i);
			for(int j = 0; j < oNewFuncCheckItemList.size(); j++) {
				FuncCheckItem oOriginalFuncCheckItem = oNewFuncCheckItemList.get(j);
				int iSeatNo = oOriginalFuncCheckItem.getCheckItem().getSeatNo();
				
				BigDecimal dOriginalQty = oOriginalFuncCheckItem.getCheckItem().getQty();
				BigDecimal dNewQty;
				boolean bBreakFlag = false;
				boolean bNeedSplit = true;
				
				if(oOriginalFuncCheckItem.isCouponItem() || oOriginalFuncCheckItem.isSVCCouponRedeemItem()) {
					bNeedSplit = false;
				}
				
				if(bNeedSplit){
					// Check if the item is belonged to one of the rules
					boolean bMatch = false;
					for(Entry<Integer, ArrayList<PosMixAndMatchItem>> entry:AppGlobal.g_oFuncMixAndMatch.get().getMixAndMatchItemList().entrySet()){
						ArrayList<PosMixAndMatchItem> oPosMixAndMatchItemList = entry.getValue();
						for(PosMixAndMatchItem oPosMixAndMatchItem:oPosMixAndMatchItemList){
							if(oPosMixAndMatchItem.isMenuItem()){
								if(oPosMixAndMatchItem.getRecordId() == oOriginalFuncCheckItem.getMenuItemId()){
									bMatch = true;
								}
							}else
							if(oPosMixAndMatchItem.isDepartment()){
								if(oPosMixAndMatchItem.getRecordId() == oOriginalFuncCheckItem.getMenuItem().getDeparmentId()){
									bMatch = true;
								}
							}else
							if(oPosMixAndMatchItem.isCategory()){
								if(oPosMixAndMatchItem.getRecordId() == oOriginalFuncCheckItem.getMenuItem().getCategoryId()){
									bMatch = true;
								}
							}
							if(bMatch){
								break;
							}
						}
						if(bMatch){
							break;
						}
					}
					if(bMatch == false){
						bNeedSplit = false;
					}
				}
				
				while(!bBreakFlag){
					if(bNeedSplit){
						if(dOriginalQty.compareTo(BigDecimal.ONE) > 0){
							dNewQty = BigDecimal.ONE;
							dOriginalQty = dOriginalQty.subtract(BigDecimal.ONE);
						}else{
							dNewQty = dOriginalQty;
							bBreakFlag = true;
						}
					}else{
						dNewQty = dOriginalQty;
						bBreakFlag = true;
					}
					
					// Clone a new item
					FuncCheckItem oNewFuncCheckItem = new FuncCheckItem(oOriginalFuncCheckItem, null);
					
					// Add to item list with given seat no.
					int iCurrentItemCount = this.getItemListCount(iSeatNo);
					this.addItemToItemList(iSeatNo, iCurrentItemCount+1, oNewFuncCheckItem);
					
					// Process child item
					for (FuncCheckItem oOriginalChildFuncCheckItem: oOriginalFuncCheckItem.getChildItemList()) {
						// Clone a new item
						FuncCheckItem oNewChildFuncCheckItem = new FuncCheckItem(oOriginalChildFuncCheckItem, oNewFuncCheckItem);
						
						// Add to item list with given seat no.
						iCurrentItemCount = this.getItemListCount(iSeatNo);
						this.addItemToItemList(iSeatNo, iCurrentItemCount+1, oNewChildFuncCheckItem);
						
						// Set the quantity
						oNewChildFuncCheckItem.internalChangeQty(oNewChildFuncCheckItem.getCheckItem().getBaseQty().multiply(dNewQty));
					}
					
					// Set the quantity
					oNewFuncCheckItem.internalChangeQty(dNewQty);
				}
			}
		}
	}
	
	private void createStockDeliveryInvoiceFromCurrentCheck(){

		DateTimeFormatter fmt = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		
		if(this.isOldCheck() == false){
			m_oPosStockDeliveryInvoice.setCreateLocTime(m_oCheck.getOpenLocTime());
			m_oPosStockDeliveryInvoice.setCreateTime(m_oCheck.getOpenTime());
			m_oPosStockDeliveryInvoice.setCreateUserId(m_oCheck.getOpenUserId());
			m_oPosStockDeliveryInvoice.setCreateStationId(m_oCheck.getOpenStatId());
			
			m_oPosStockDeliveryInvoice.setSinvId(0);
		}
		
		m_oPosStockDeliveryInvoice.setModifiedLocTime(AppGlobal.getCurrentTime(false));
		m_oPosStockDeliveryInvoice.setModifiedTime(fmt.print(AppGlobal.convertTimeToUTC(m_oPosStockDeliveryInvoice.getModifiedLocTime())));
		m_oPosStockDeliveryInvoice.setModifiedUserId(m_iUserId);
		m_oPosStockDeliveryInvoice.setModifiedStationId(m_iStationId);
		
		if(m_oCheck.isDeleted()){
			// Void check
			m_oPosStockDeliveryInvoice.setVoidLocTime(m_oCheck.getVoidLocTime());
			m_oPosStockDeliveryInvoice.setVoidTime(m_oCheck.getVoidTime());
			m_oPosStockDeliveryInvoice.setVoidUserId(m_oCheck.getVoidUserId());
			m_oPosStockDeliveryInvoice.setVoidStationId(m_oCheck.getVoidStatId());
			m_oPosStockDeliveryInvoice.setStatus(PosStockDeliveryInvoice.STATUS_DELETED);
		}
	}
	
	private PosStockDeliveryInvoiceItem createStockDeliveryInvoiceItemFromFuncCheckItem(FuncCheckItem oFuncCheckItem){
		
		PosStockDeliveryInvoiceItem oPosStockDeliveryInvoiceItem = oFuncCheckItem.getStockDeliveryInvoiceItem();
		
		if(oFuncCheckItem.isOldItem() == false){
			// New item
			oPosStockDeliveryInvoiceItem.setSinvId(m_oPosStockDeliveryInvoice.getSinvId());
			oPosStockDeliveryInvoiceItem.setItemId(oFuncCheckItem.getCheckItem().getItemId());
		}
		oPosStockDeliveryInvoiceItem.setExpectDeliveryQty(oFuncCheckItem.getCheckItem().getQty());
		oPosStockDeliveryInvoiceItem.setStatus(oFuncCheckItem.getCheckItem().getStatus());
		
		return oPosStockDeliveryInvoiceItem;
	}
	
	private FuncCheckItem createFuncCheckItemFromStockDeliveryInvoiceItem(PosStockDeliveryInvoiceItem oPosStockDeliveryInvoiceItem){
		FuncCheckItem oFuncCheckItem = new FuncCheckItem();
		
		oFuncCheckItem.retieveItemFromMenu(oPosStockDeliveryInvoiceItem.getItemId(), oPosStockDeliveryInvoiceItem.getExpectDeliveryQty(), oPosStockDeliveryInvoiceItem.getExpectDeliveryQty(), null, false, false, 0);
		oFuncCheckItem.setStockDeliveryInvoiceItem(oPosStockDeliveryInvoiceItem);
		
		return oFuncCheckItem;
	}
	
	public void checkReceiveStockDeliveryInvoice(){
		DateTimeFormatter fmt = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		
		m_oPosStockDeliveryInvoice.setReceivingLocTime(AppGlobal.getCurrentTime(false));
		m_oPosStockDeliveryInvoice.setReceivingTime(fmt.print(AppGlobal.convertTimeToUTC(m_oPosStockDeliveryInvoice.getReceivingLocTime())));
		m_oPosStockDeliveryInvoice.setReceivingUserId(m_iUserId);
		m_oPosStockDeliveryInvoice.setReceivingStationId(m_iStationId);
		m_oPosStockDeliveryInvoice.setStatus(PosStockDeliveryInvoice.STATUS_RECEIVED);
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem:oItemList){
					oFuncCheckItem.getStockDeliveryInvoiceItem().setModified(true);
				}
			}
		}
	}
	
	public int getNewStockDeliveryInvoiceRefId(){
		int iRandNo;
		Random rand = new Random();
		rand.setSeed(AppGlobal.getCurrentTime(false).getMillis());
		
		while(true){
			iRandNo = rand.nextInt(60000) + 1;
			if(m_oPosStockDeliveryInvoice.readById(iRandNo, 1) == false){
				// The reference no. is not used ==> can use for new invoice
				break;
			}
		}
		return iRandNo;
	}
	
	public boolean isStockDeliveryInvoiceExist(int iRefId){
		return m_oPosStockDeliveryInvoice.readById(iRefId, 1);
	}
	
	public int getStockDeliveryInvoiceRefId(){
		return m_oPosStockDeliveryInvoice.getSinvId();
	}
	
	public int getStockDeliveryInvoiceReceiveUserId(){
		return m_oPosStockDeliveryInvoice.getReceivingUserId();
	}
	
	public void setStockDeliveryInvoiceShopId(int iShopId){
		m_oPosStockDeliveryInvoice.setShopId(iShopId);
	}
	
	public void setStockDeliveryInvoiceOutletId(int iOutletId){
		m_oPosStockDeliveryInvoice.setOletId(iOutletId);
	}
	
	public void setStockDeliveryInvoiceUserRef(String sUserRef){
		m_oPosStockDeliveryInvoice.setUserRef(sUserRef);
	}
	
	public void clearPaymentList(){
		m_oCheckPaymentList.clear();
	}
	
	public int getAif(){
		return m_oCheck.getAif();
	}
	
	public String getCheckId(){
		return m_oCheck.getCheckId();
	}
	
	public int getCheckOwnerUserId(){
		return m_oCheck.getCheckOwnerUserId();
	}
	
	/*********/
	/* For action to re-open the paid check and try to lock an empty table(pos_outlet_table), the m_oCheck-chksId will clear
	 * and it will reset to 0. It is the records of outlet_table indicate it is new table.
	 */
	/*********/
	public void setCheckIdForOldCheckAfterLockTableAndCancelAction(String sCheckId) {
		m_oCheck.setChksId(sCheckId);
	}
	
	public String getCheckPrefix() {
		return m_oCheck.getCheckPrefix();
	}
	
	public int getCheckNo(){
		return m_oCheck.getCheckNo();
	}
	
	public String getCheckPrefixNo(){
		return m_oCheck.getCheckPrefixNo();
	}
	
	public int getSectId() {
		return m_oCheck.getSectId();
	}
	
	public int getCustomTypeId() {
		return m_oCheck.getCustomTypeId();
	}
	
	public PosCheckAttribute getCheckAttribute() {
		return m_oCheck.getCheckAttribute();
	}
	
	public BigDecimal getSurcharge() {
		return m_oCheck.getSurchargeTotal();
	}	
	
	// Check if has active check attribute
	public boolean hasActiveCheckAttribute(){
		if(m_oCheck.getCheckAttribute().getOutletId() != 0 && m_oCheck.getCheckAttribute().getStatus().isEmpty())
			return true;
		 
		return false;
	}
	
	public List<PosCheckGratuity> getCheckGratuityList() {
		return m_oCheck.getCheckGratuityList();
	}
	
	public List<PosCheckGratuity> getActiveCheckGratuityList() {
		List<PosCheckGratuity> oActiveCheckGratuityList = new ArrayList<>();
		
		for (PosCheckGratuity oPosCheckGratuity: m_oCheck.getCheckGratuityList()){
			if (oPosCheckGratuity.getStatus().equals(PosCheckGratuity.STATUS_ACTIVE))
				oActiveCheckGratuityList.add(oPosCheckGratuity);
		}
		
		return oActiveCheckGratuityList;
	}
	
	// Check if has active check gratuity
	public boolean hasActiveCheckGratuityList(){
		if(m_oCheck.getCheckGratuityList() != null && !m_oCheck.getCheckGratuityList().isEmpty())
			return true;
		 
		return false;
	}
	
	public String[] getTableName(){
		return m_sTableName;
	}	
	
	public String[] getTableNoWithTableName() {
		String[] sTable = null;
		if(m_sTableNo.equals("0"))
			sTable = StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, m_sTableExtension);
		else 
			sTable = StringLib.createStringArray(AppGlobal.LANGUAGE_COUNT, m_sTableNo + m_sTableExtension);

		if (AppGlobal.g_oFuncOutlet.get().isTableNameExist(m_sTableNo, m_sTableExtension)) {
			for (int i=0; i<AppGlobal.LANGUAGE_COUNT; i++) {
				if(sTable[i].equals(m_sTableName[i]) == false)
					sTable[i] = sTable[i] + "(" + m_sTableName[i] + ")";
			}
		}
		
		return sTable;
	}
	
	public String getTableNoWithExtensionForDisplay() {
		if(m_sTableNo != null && m_sTableNo.equals("0"))
			return m_sTableExtension;
		
		return (m_sTableNo + m_sTableExtension);
	}
	
	public String getTableNo() {
		return m_sTableNo;
	}
	
	public String getTableExtension(){
		return m_sTableExtension;
	}
	
	public boolean isModified() {
		return this.m_bModified;
	}
	
	public int getOpenUserId() {
		return m_oCheck.getOpenUserId();
	}
	
	public void setOpenUserId(int iOpenUserId) {
		m_oCheck.setOpenUserId(iOpenUserId);
	}
	
	public String[] getOpenUserName() {
		UserUser oUser = new UserUser();
		oUser.readByUserId(m_oCheck.getOpenUserId());
		
		String[] sName = StringLib.appendStringArray(oUser.getFirstName(), " ", oUser.getLastName());
		return sName;
	}
	
	public String[] getCheckOwnerName() {
		UserUser oUser = new UserUser();
		oUser.readByUserId(m_oCheck.getCheckOwnerUserId());
		
		String[] sName = StringLib.appendStringArray(oUser.getFirstName(), " ", oUser.getLastName());
		return sName;
	}
	
	public HashMap<Integer, PosTaxScType> getScType() {
		return m_oScType;
	}
	
	public String getOutletTableCheckId() {
		return this.m_oOutletTable.getCheckId();
	}
	
	public int getOutletTableStationId() {
		return this.m_oOutletTable.getStationId();
	}
	
	public String getOutletTableStatus() {
		return this.m_oOutletTable.getStatus();
	}
	
	public String getOutletTableTag() {
		return this.m_oOutletTable.getTag();
	}
	
	public JSONObject getOutletTableInfo() {
		return this.m_oOutletTable.getInfo();
	}
		
	//get updated JSONArray of webservice result
	public JSONArray getResultJSONArrayOfRequest() {
		return m_oCheck.getResultJSONArrayOfRequest();
	}
	
	//get send JSONObject of webservice
	public JSONObject getSendJSONObjectOfRequest() {
		return m_oCheck.getSendJSONObjectOfRequest();
	}
	
	public ArrayList<PosCheckPayment> getCheckPaymentList() {
		return m_oCheckPaymentList;
	}
	
	public ArrayList<PosCheckPayment> getPaymentSnapShotList() {
		return m_oPaymentSnapShotListForAdjustPayment;
	}
	
	public void setPaymentSnapShotList(ArrayList<PosCheckPayment> oCheckPaymentList) {
		m_oPaymentSnapShotListForAdjustPayment = oCheckPaymentList;
	}
	
	public void updateCustomerDisplayDataUpdateTimestamp() {
		long currentTimestamp=0;
		
		DateTime currentTime = AppGlobal.getCurrentTime(false);
		currentTimestamp = currentTime.getMillis();
		this.m_sCustomerDisplayInfo_DataUpdate_Timestamp = currentTimestamp;
	}
	
	
	private JSONArray getChildItemsJSONArray(JSONArray oChildItemJSONArray, List<FuncCheckItem> oChildItemList, int iLangIndex) {
		JSONArray oTmpChildItemsJSONArray = new JSONArray();
		JSONObject oTmpChildItemJSONObject = new JSONObject();
		JSONObject oTmpModifierJSONObject = new JSONObject();
		String sModiNames = "";
		String sModiNames_lang2 = "";
		String sModiNames_lang3 = "";
		
		BigDecimal dModiTotal = new BigDecimal(0);
		int iQtyRoundDecimal;
		
		oChildItemJSONArray = new JSONArray();
		
		for(FuncCheckItem oChildItem:oChildItemList) {
			// Do not show check item if it is no print item
			if (oChildItem.isNoPrint() && oChildItem.getNetItemTotal().compareTo(BigDecimal.ZERO) == 0)
				continue;
			
			oTmpChildItemJSONObject = new JSONObject();
			if(!oChildItem.getModifierList().isEmpty()) {
				oTmpModifierJSONObject = new JSONObject();
				sModiNames = "";
				dModiTotal = new BigDecimal(0);
				for(FuncCheckItem oChildModiItem:oChildItem.getModifierList()) {
					// Do not show check item if it is no print item
					if (oChildModiItem.isNoPrint())
						continue;
					
					if (sModiNames.length() == 0) {
						sModiNames = oChildModiItem.getItemDescriptionByIndex(iLangIndex);
						sModiNames_lang2 = oChildModiItem.getItemDescriptionByIndex(2);
						sModiNames_lang3 = oChildModiItem.getItemDescriptionByIndex(3);
					}
					else {
						sModiNames = sModiNames + ", " + oChildModiItem.getItemDescriptionByIndex(iLangIndex);
						sModiNames_lang2 = sModiNames_lang2 + ", " + oChildModiItem.getItemDescriptionByIndex(2);
						sModiNames_lang3 = sModiNames_lang3 + ", " + oChildModiItem.getItemDescriptionByIndex(3);
					}
					dModiTotal = dModiTotal.add(oChildModiItem.getCheckItem().getRoundTotal());
				}
			}
			
			// Handle no decimal value quantity
			iQtyRoundDecimal = 0;		// If QTY is without decimal value, uses no decimal point value for display
			if (Util.HERORound(oChildItem.getCheckItem().getQty(), AppGlobal.g_oFuncOutlet.get().getItemRoundMethod(), AppGlobal.g_oFuncOutlet.get().getItemRoundDecimal()).compareTo(Util.HERORound(oChildItem.getCheckItem().getQty(), AppGlobal.g_oFuncOutlet.get().getItemRoundMethod(), 0)) != 0) {
				iQtyRoundDecimal = AppGlobal.g_oFuncOutlet.get().getItemRoundDecimal();
			}
			
			try {
				oTmpChildItemJSONObject.put("Desc", oChildItem.getItemDescriptionByIndex(iLangIndex));
				oTmpChildItemJSONObject.put("Desc_lang2", oChildItem.getItemDescriptionByIndex(2));
				oTmpChildItemJSONObject.put("Desc_lang3", oChildItem.getItemDescriptionByIndex(3));
				oTmpChildItemJSONObject.put("Qty", StringLib.BigDecimalToString(oChildItem.getCheckItem().getQty(), iQtyRoundDecimal));
				oTmpChildItemJSONObject.put("Total", AppGlobal.g_oFuncOutlet.get().roundItemAmountToString(oChildItem.getCheckItem().getRoundTotal()));
				
				if (!oChildItem.getModifierList().isEmpty()) {
					oTmpModifierJSONObject.put("ModiDesc", sModiNames);
					oTmpModifierJSONObject.put("ModiDesc_lang2", sModiNames_lang2);
					oTmpModifierJSONObject.put("ModiDesc_lang3", sModiNames_lang3);
					oTmpModifierJSONObject.put("ModiTotal", AppGlobal.g_oFuncOutlet.get().roundItemAmountToString(dModiTotal));
					oTmpChildItemJSONObject.put("Modifier", oTmpModifierJSONObject);
				}
				if (!oChildItem.getChildItemList().isEmpty()) {
					// Recursive to get the child items from list
					oTmpChildItemsJSONArray = getChildItemsJSONArray(oTmpChildItemsJSONArray, oChildItem.getChildItemList(), iLangIndex);
					oTmpChildItemJSONObject.put("ChildItems", oTmpChildItemsJSONArray);
				}
				oChildItemJSONArray.put(oTmpChildItemJSONObject);
			}catch(JSONException jsone) {
				AppGlobal.stack2Log(jsone);
			}
		}
		
		return(oChildItemJSONArray);
	}
	
	
	// iCallType : 1-From calcCheck(), 2-From updatePaymentInfo(), 3-Cancel Check Function, 4-From preProcessEachPayment()
	public void generateCustomerDisplayInterfaceFiles(int iCallType) {
		if(!AppGlobal.isModuleSupport(AppGlobal.OPTIONAL_MODULE.signage.name()) || AppGlobal.g_oFuncSignage.get() == null || !AppGlobal.g_oFuncSignage.get().haveSignageSchedule(AppGlobal.g_oFuncOutlet.get().getOutletId()))
			return;
		
		String sCurrentTimestampStr;
		long lCurrentTimestamp=0;
		String sTableNo, sCheckNo, sItemTotal, sDiscTotal, sSCTotal, sTaxTotal, sCheckTotal, sRoundAmount;
		String sPriceLevelDesc, sPriceLevelDesc2, sPriceLevelDesc3;
		int iAllItemPriceLevel = 0;
		
		int iLangIndex;
		int iQtyRoundDecimal;
		BigDecimal dDiscTotal = new BigDecimal(0);
		BigDecimal dSCTotal = new BigDecimal(0);
		BigDecimal dTaxTotal = new BigDecimal(0);
		BigDecimal dRoundAmount = new BigDecimal(0);
		String sOutputBaseFolder, sOutputInfosFolder, sOutputAlertsFolder;
		String sTimestampFile, sDataFile;
		
		int iUserID;

		JSONObject oBillInfoJSONObject = new JSONObject();
		JSONObject oDataControlJSONObject = new JSONObject();
		JSONObject oBillSummaryJSONObject = new JSONObject();
		JSONObject oBillItemsJSONObject = new JSONObject();
		JSONObject oBillPaymentsJSONObject = new JSONObject();
		JSONArray oNewItemsJSONArray = new JSONArray();
		JSONArray oOrderedItemsJSONArray = new JSONArray();
		JSONArray oPaymentsJSONArray = new JSONArray();
				
		JSONObject oTmpItemJSONObject;
		JSONObject oTmpModifierJSONObject;
		JSONArray oTmpChildItemsJSONArray;
		JSONObject oTmpPaymentJSONObject;
		JSONArray oTmpPaymentInfosJSONArray;
		JSONObject oTmpPaymentInfoJSONObject;
		
		if (this.m_sCustomerDisplayInfo_DataUpdate_Timestamp >= this.m_sCustomerDisplayInfo_LastGenInterfaceFile_Timestamp) {
			// New customer display information is generated. Generate interface files and update last gen timestamp afterwards

			// Data Control JsonObject
			DateTime oCurrentTime = AppGlobal.getCurrentTime(false);
			lCurrentTimestamp = oCurrentTime.getMillis();		// TimeStamp : in Milliseconds from Epoch of of 1970-01-01T00:00:00Z
			DateTimeFormatter oFmt = DateTimeFormat.forPattern("yyyyMMddHHmmSSS");
			sCurrentTimestampStr = oFmt.print(oCurrentTime);

			try {
				oDataControlJSONObject.put("TimeStamp", sCurrentTimestampStr);
				oDataControlJSONObject.put("InterfaceType", "b");
			}catch(JSONException jsone) {
				AppGlobal.stack2Log(jsone);
			}
			
			// Find the price level of all items on the same check
			// if all items have the same price level, iAllItemPriceLevel is non-zero
			// if any one items have different price level in the check, iAllItemPriceLevel is zero
			iAllItemPriceLevel = getAllItemsPriceLevel();
			sPriceLevelDesc = "";	sPriceLevelDesc2 = "";	sPriceLevelDesc3 = "";
			if (iAllItemPriceLevel > 0 &&  AppGlobal.g_oMenuPriceLevelList.isPriceLevelExist(iAllItemPriceLevel)) {
				sPriceLevelDesc = AppGlobal.g_oMenuPriceLevelList.getMenuPriceLevelList().get(iAllItemPriceLevel).getName(AppGlobal.g_oCurrentLangIndex.get());
				sPriceLevelDesc2 = AppGlobal.g_oMenuPriceLevelList.getMenuPriceLevelList().get(iAllItemPriceLevel).getName(2);
				sPriceLevelDesc3 = AppGlobal.g_oMenuPriceLevelList.getMenuPriceLevelList().get(iAllItemPriceLevel).getName(3);
			}
			
			// Reset values
			if (iCallType == 3) {
				if (this.m_sTableNo != null || (this.m_sTableExtension != null && !this.m_sTableExtension.isEmpty()))
					sTableNo = this.m_sTableNo + this.m_sTableExtension;
				else
					sTableNo = "";
				sCheckNo = this.getCheckPrefixNo();
				iUserID = this.m_iUserId;
				sItemTotal = AppGlobal.g_oFuncOutlet.get().roundItemAmountToString(new BigDecimal(0)); 
				sSCTotal = AppGlobal.g_oFuncOutlet.get().roundSCAmountToString(new BigDecimal(0));
				sTaxTotal = AppGlobal.g_oFuncOutlet.get().roundTaxAmountToString(new BigDecimal(0));
				sCheckTotal = AppGlobal.g_oFuncOutlet.get().roundCheckAmountToString(new BigDecimal(0));
				sDiscTotal = AppGlobal.g_oFuncOutlet.get().roundDiscAmountToString(new BigDecimal(0));
				sRoundAmount = AppGlobal.g_oFuncOutlet.get().roundDiscAmountToString(new BigDecimal(0));
				
				try {
					oBillSummaryJSONObject.put("TableNo", sTableNo);
					oBillSummaryJSONObject.put("CheckNo", sCheckNo);
					oBillSummaryJSONObject.put("OperUser", iUserID);
					oBillSummaryJSONObject.put("ItemTotal", sItemTotal);
					// If the value is zero, it will not be included in the interface file : Tax, SC, Disc, Round Amount 
					oBillSummaryJSONObject.put("BillTotal", sCheckTotal);
					oBillSummaryJSONObject.put("PriceLevelDesc", sPriceLevelDesc);
					oBillSummaryJSONObject.put("PriceLevelDesc_lang2", sPriceLevelDesc2);
					oBillSummaryJSONObject.put("PriceLevelDesc_lang3", sPriceLevelDesc3);
					oBillInfoJSONObject.put("DataControl", oDataControlJSONObject);
					oBillInfoJSONObject.put("BillSummary", oBillSummaryJSONObject);
				}catch(JSONException jsone) {
					AppGlobal.stack2Log(jsone);
				}
			}
			else {
				// BillSummary JsonObject
				sTableNo = this.m_sTableNo + this.m_sTableExtension;
				sCheckNo = this.getCheckPrefixNo();
				iUserID = this.m_iUserId;
				
				dSCTotal = this.getServiceChargeTotal();
				dTaxTotal = this.getTaxTotal();
				dRoundAmount = this.getRoundAmount();
				
				sItemTotal = AppGlobal.g_oFuncOutlet.get().roundItemAmountToString(this.getItemTotal()); 
				sSCTotal = AppGlobal.g_oFuncOutlet.get().roundSCAmountToString(dSCTotal);
				sTaxTotal = AppGlobal.g_oFuncOutlet.get().roundTaxAmountToString(dTaxTotal);
				sCheckTotal = AppGlobal.g_oFuncOutlet.get().roundCheckAmountToString(this.getCheckTotal());
				dDiscTotal = dDiscTotal.add(this.getCheckDiscountTotal());
				dDiscTotal = dDiscTotal.add(this.getItemDiscountTotal());
				sDiscTotal = AppGlobal.g_oFuncOutlet.get().roundDiscAmountToString(dDiscTotal);
				sRoundAmount = AppGlobal.g_oFuncOutlet.get().roundDiscAmountToString(dRoundAmount);
			
				try {
					oBillSummaryJSONObject.put("TableNo", sTableNo);
					oBillSummaryJSONObject.put("CheckNo", sCheckNo);
					oBillSummaryJSONObject.put("OperUser", iUserID);
					oBillSummaryJSONObject.put("ItemTotal", sItemTotal);
					if (BigDecimal.ZERO.compareTo(dTaxTotal) != 0)
						oBillSummaryJSONObject.put("TaxTotal", sTaxTotal);
					if (BigDecimal.ZERO.compareTo(dSCTotal) != 0)
						oBillSummaryJSONObject.put("SCTotal", sSCTotal);
					if (BigDecimal.ZERO.compareTo(dDiscTotal) != 0)
						oBillSummaryJSONObject.put("DiscTotal", sDiscTotal);
					if (BigDecimal.ZERO.compareTo(dRoundAmount) != 0)
						oBillSummaryJSONObject.put("RoundAmount", sRoundAmount);
					oBillSummaryJSONObject.put("BillTotal", sCheckTotal);
					oBillSummaryJSONObject.put("PriceLevelDesc", sPriceLevelDesc);
					oBillSummaryJSONObject.put("PriceLevelDesc_lang2", sPriceLevelDesc2);
					oBillSummaryJSONObject.put("PriceLevelDesc_lang3", sPriceLevelDesc3);
				}catch(JSONException jsone) {
					AppGlobal.stack2Log(jsone);
				}
				
				// BillItems JsonObject
				// Get the language index used in customer display from setup
				iLangIndex = 1;
				
				for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
					for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
						for (FuncCheckItem oFuncCheckItem:oItemList){
							oTmpItemJSONObject = new JSONObject();
							oTmpModifierJSONObject = new JSONObject();
							String sModiNames = "";
							String sModiNames_lang2 = "";
							String sModiNames_lang3 = "";
							BigDecimal dModiTotal = new BigDecimal(0);
							
							// Skip Child Items (Handled in child item list)
							if (oFuncCheckItem.isSetMenuItem()) {
								continue;
							}
							
							// Do not show check item if it is no print item
							if (oFuncCheckItem.isNoPrint() && oFuncCheckItem.getNetItemTotal().compareTo(BigDecimal.ZERO) == 0)
								continue;
											
							// Construct Modifier
							if (oFuncCheckItem.hasModifier()) {
								for(FuncCheckItem oModifierItem:oFuncCheckItem.getModifierList()) {
									// Do not show check item if it is no print item
									if (oModifierItem.isNoPrint())
										continue;
									
									if (sModiNames.length() == 0) {
										sModiNames = oModifierItem.getItemDescriptionByIndex(iLangIndex);
										sModiNames_lang2 = oModifierItem.getItemDescriptionByIndex(2);
										sModiNames_lang3 = oModifierItem.getItemDescriptionByIndex(3);
									}
									else {
										sModiNames = sModiNames + ", " + oModifierItem.getItemDescriptionByIndex(iLangIndex);
										sModiNames_lang2 = sModiNames_lang2 + ", " + oModifierItem.getItemDescriptionByIndex(2);
										sModiNames_lang3 = sModiNames_lang3 + ", " + oModifierItem.getItemDescriptionByIndex(3);
									}
									dModiTotal = dModiTotal.add(oModifierItem.getCheckItem().getTotal());
								}
							}
							
							// Handle no decimal value quantity
							iQtyRoundDecimal = 0;		// If QTY is without decimal value, uses no decimal point value for display
							if (Util.HERORound(oFuncCheckItem.getCheckItem().getQty(), AppGlobal.g_oFuncOutlet.get().getItemRoundMethod(), AppGlobal.g_oFuncOutlet.get().getItemRoundDecimal()).compareTo(Util.HERORound(oFuncCheckItem.getCheckItem().getQty(), AppGlobal.g_oFuncOutlet.get().getItemRoundMethod(), 0)) != 0) {
								iQtyRoundDecimal = AppGlobal.g_oFuncOutlet.get().getItemRoundDecimal();
							}
							
							try {
								oTmpItemJSONObject.put("Desc", oFuncCheckItem.getItemDescriptionByIndex(iLangIndex));
								oTmpItemJSONObject.put("Desc_lang2", oFuncCheckItem.getItemDescriptionByIndex(2));
								oTmpItemJSONObject.put("Desc_lang3", oFuncCheckItem.getItemDescriptionByIndex(3));
								oTmpItemJSONObject.put("Qty", StringLib.BigDecimalToString(oFuncCheckItem.getCheckItem().getQty(), iQtyRoundDecimal));
								oTmpItemJSONObject.put("Total", AppGlobal.g_oFuncOutlet.get().roundItemAmountToString(oFuncCheckItem.getCheckItem().getTotal()));
								
								if (oFuncCheckItem.hasModifier() && !sModiNames.isEmpty() && !sModiNames_lang2.isEmpty()
										&& !sModiNames_lang3.isEmpty()) {
									oTmpModifierJSONObject.put("ModiDesc", sModiNames);
									oTmpModifierJSONObject.put("ModiDesc_lang2", sModiNames_lang2);
									oTmpModifierJSONObject.put("ModiDesc_lang3", sModiNames_lang3);
									oTmpModifierJSONObject.put("ModiTotal", AppGlobal.g_oFuncOutlet.get().roundItemAmountToString(dModiTotal));
									oTmpItemJSONObject.put("Modifier", oTmpModifierJSONObject);
								}
							}catch(JSONException jsone) {
								AppGlobal.stack2Log(jsone);
							}
							
							// Construct Child Items Array
							if (!oFuncCheckItem.getChildItemList().isEmpty()) {
								oTmpChildItemsJSONArray = new JSONArray();
								
								oTmpChildItemsJSONArray = getChildItemsJSONArray(oTmpChildItemsJSONArray, oFuncCheckItem.getChildItemList(), iLangIndex);
								
								try {
									oTmpItemJSONObject.put("ChildItems", oTmpChildItemsJSONArray);
								}catch(JSONException jsone) {
									AppGlobal.stack2Log(jsone);
								}
							}
							
							
							// Add to New Items and Ordered Items
							if (oFuncCheckItem.isOldItem()) {
								// Old Item
								oOrderedItemsJSONArray.put(oTmpItemJSONObject);
							}
							else {
								// New Item
								oNewItemsJSONArray.put(oTmpItemJSONObject);
							}
						}
					}
				}
				
				// Add to Bill Items
				try {
					if (oNewItemsJSONArray.length() > 0) {
						oBillItemsJSONObject.put("NewItems", oNewItemsJSONArray);
					}
					if (oOrderedItemsJSONArray.length() > 0) {
						oBillItemsJSONObject.put("OrderedItems", oOrderedItemsJSONArray);
					}
				}catch(JSONException jsone) {
					AppGlobal.stack2Log(jsone);
				}
	
				
				// BillPayments JsonObject
				if (iCallType == 2) {
					// With Payment Information
					for (PosCheckPayment oPOSCheckPayment:this.getCheckPaymentList()){
						oTmpPaymentJSONObject = new JSONObject();
						try {
							oTmpPaymentJSONObject.put("PayDesc", oPOSCheckPayment.getName(iLangIndex));
							oTmpPaymentJSONObject.put("PayDesc_lang2", oPOSCheckPayment.getName(2));
							oTmpPaymentJSONObject.put("PayDesc_lang3", oPOSCheckPayment.getName(3));
							oTmpPaymentJSONObject.put("PayAmt", AppGlobal.g_oFuncOutlet.get().roundPaymentAmountToString(oPOSCheckPayment.getPayTotal()));
							
							if (oPOSCheckPayment.getPayTips().compareTo(new BigDecimal(0)) != 0) {
								oTmpPaymentJSONObject.put("Tip", AppGlobal.g_oFuncOutlet.get().roundPaymentAmountToString(oPOSCheckPayment.getPayTips()));
							}
							else if (oPOSCheckPayment.getPayChange().compareTo(new BigDecimal(0)) != 0) {
								oTmpPaymentJSONObject.put("Changes", AppGlobal.g_oFuncOutlet.get().roundPaymentAmountToString(oPOSCheckPayment.getPayChange()));
							}
							
							// Payment infos
							oTmpPaymentInfosJSONArray = new JSONArray();
							
							// Octopus payment
							if(oPOSCheckPayment.isOctopusPaymentType()){
								oTmpPaymentInfoJSONObject = new JSONObject();
								
								String sOriginalLangCode = "";
								for(HashMap<String, String> oLangInfo:AppGlobal.g_oSupportedLangList) {
									if(oLangInfo.get("index").equals(String.valueOf(AppGlobal.g_oCurrentLangIndex.get()))){
										sOriginalLangCode = oLangInfo.get("code");
									}
									
									String sLangCode = oLangInfo.get("code");
									AppGlobal.g_oLang.get().switchLocale(sLangCode);
									
									int iIndex = Integer.parseInt(oLangInfo.get("index"));
									if(iIndex == 1){
										oTmpPaymentInfoJSONObject.put("Desc", AppGlobal.g_oLang.get()._("octopus_remaining_value"));
									}else
									if(iIndex == 2){
										oTmpPaymentInfoJSONObject.put("Desc_lang2", AppGlobal.g_oLang.get()._("octopus_remaining_value"));
									}else
									if(iIndex == 3){
										oTmpPaymentInfoJSONObject.put("Desc_lang3", AppGlobal.g_oLang.get()._("octopus_remaining_value"));
									}
								}
								// Roll back the language
								AppGlobal.g_oLang.get().switchLocale(sOriginalLangCode);
								
								JSONObject oOctopusTransactionJsonObject = new JSONObject(oPOSCheckPayment.getRefData(1));
								oTmpPaymentInfoJSONObject.put("Value", new BigDecimal(oOctopusTransactionJsonObject.getString("current_remain_amount")).setScale(1).toPlainString());
								
								oTmpPaymentInfosJSONArray.put(oTmpPaymentInfoJSONObject);
							}
							
							if(oTmpPaymentInfosJSONArray.length() > 0){
								oTmpPaymentJSONObject.put("PaymentInfos", oTmpPaymentInfosJSONArray);
							}
							
							oPaymentsJSONArray.put(oTmpPaymentJSONObject);
						}catch(JSONException jsone) {
							AppGlobal.stack2Log(jsone);
						}
					}
					try {
						if (oPaymentsJSONArray.length() > 0) {
							oBillPaymentsJSONObject.put("Payments", oPaymentsJSONArray);
						}
					}catch(JSONException jsone) {
						AppGlobal.stack2Log(jsone);
					}
				}
				
				// Whole Bill Info JsonObject
				try {
					oBillInfoJSONObject.put("DataControl", oDataControlJSONObject);
					oBillInfoJSONObject.put("BillSummary", oBillSummaryJSONObject);
					oBillInfoJSONObject.put("BillItems", oBillItemsJSONObject);
					oBillInfoJSONObject.put("BillPayments", oBillPaymentsJSONObject);
				}catch(JSONException jsone) {
					AppGlobal.stack2Log(jsone);
				}
			}

			// Create interface files
			// Directly overwrite current files
			sOutputBaseFolder = AppGlobal.g_sSystemDataPath + "//www//signage_displays";
			sOutputAlertsFolder = sOutputBaseFolder + "//" + "alerts";
			sOutputInfosFolder = sOutputBaseFolder + "//" + "infos";
			sTimestampFile = Integer.toString(m_iStationId) + ".txt";
			sDataFile = Integer.toString(m_iStationId) + ".txt";
			String sFilename1 = sOutputAlertsFolder + "//" + sTimestampFile;
			String sFilename2 = sOutputInfosFolder + "//" + sDataFile;
			File oTmpFile = null;
			FileWriter fWriter;

			try {
				// Update Info File
				oTmpFile = new File(sFilename2);
				if (oTmpFile.getParentFile() != null)
					oTmpFile.getParentFile().mkdirs();
				fWriter = new FileWriter(oTmpFile, false);
				fWriter.write(oBillInfoJSONObject.toString());
				fWriter.close();
				
				// Update Alert File
				oTmpFile = new File(sFilename1);
				if (oTmpFile.getParentFile() != null)
					oTmpFile.getParentFile().mkdirs();
				fWriter = new FileWriter(oTmpFile, false);
				fWriter.write(sCurrentTimestampStr);
				fWriter.close();
			}catch(IOException fileErr) {
				AppGlobal.stack2Log(fileErr);
			}
			
			// Update the last interface file generation timestamp
			this.m_sCustomerDisplayInfo_LastGenInterfaceFile_Timestamp = lCurrentTimestamp;
		}
	}
	
	// Retrieve pre-order items by ref no.
	public JSONObject retrievePreorderByRefNo(String sRefNo){
		PreorderCheck oPreorderCheck = new PreorderCheck();
		return oPreorderCheck.retrievePreorderByRefNo(AppGlobal.g_oFuncOutlet.get().getOutletId(), sRefNo);
	}
	
	// Retrieve pre-order items by order id
	public JSONObject retrievePreorderByOrderId(int iOrderId){
		PreorderCheck oPreorderCheck = new PreorderCheck();
		return oPreorderCheck.retrievePreorderByOrderId(AppGlobal.g_oFuncOutlet.get().getOutletId(), iOrderId);
	}
	
	// update pre-order items by table no
	public boolean updatePreorderReadCount(String sRefNo) {
		PreorderCheck oPreorderCheck = new PreorderCheck();
		return oPreorderCheck.updatePreorderReadCount(AppGlobal.g_oFuncOutlet.get().getOutletId(), sRefNo);
	}
	
	// Retrieve reservation by date and confirmation no
	public JSONObject retrieveReservationByDateRefno(String sDate, String sRefNo, String sRequestInfo) {
		ResvResv oResvResv = new ResvResv();
		return oResvResv.retrieveResvByDateConfirmno(AppGlobal.g_oFuncOutlet.get().getOutletId(), sDate, sRefNo, sRequestInfo);
	}
	
	// Set member
	public void setMember(int iMemberId, List<HashMap<String, String>> oInterfaceMemberInfo, boolean bMemberInterface, boolean bCleaupPreviousMember){
		DateTime modifiedLocTime = null;
		DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		
		if(!bMemberInterface) {
			if(bCleaupPreviousMember) {
				// Cleanup the previous assigned member before assigned member
				updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0, "");
				updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_ACCOUNT_NUMBER, 0, "");
				updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_ACCOUNT_NAME, 0, "");
				updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER, 0, "");
				updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_MEMBER_NAME, 0, "");
				updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_STATUS, 0, "");
				updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_CARD_NO, 0, "");
				updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_AR_ACCOUNT_NUMBER, 0, "");
				updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_MEMBER_TYPE, 0, "");
			}
			
			m_oCheck.setMemberId(iMemberId);
			
			if(this.isOldCheck()) {
				modifiedLocTime = AppGlobal.getCurrentTime(false);
				m_oCheck.setModifiedLocTime(modifiedLocTime);
				m_oCheck.setModifiedTime(formatter.print(AppGlobal.convertTimeToUTC(modifiedLocTime)));
				m_oCheck.setModifiedUesrId(AppGlobal.g_oFuncUser.get().getUserId());
				m_oCheck.setModifiedStationId(AppGlobal.g_oFuncStation.get().getStationId());
				updateCheck(false, false, PosCheckItem.SEND_MODE_NEW_ITEM, 0, false, 0, 0, 0, "", false, false, false, false, 0, 0, false, false);
			}
			
		}else {
			if(bCleaupPreviousMember)
				//Cleanup the previous assigned offline member before assign new interface member
				m_oCheck.setMemberId(0);
			
			for(int i=0; i<oInterfaceMemberInfo.size(); i++) {
				HashMap<String, String> oCheckExtraInfo = oInterfaceMemberInfo.get(i);
				if(oCheckExtraInfo.get("variable") == null || oCheckExtraInfo.get("variable").isEmpty())
					continue;

				if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, oCheckExtraInfo.get("variable"), 0))
					updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, oCheckExtraInfo.get("variable"), Integer.parseInt(oCheckExtraInfo.get("index")), oCheckExtraInfo.get("value"));
				else
					addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, oCheckExtraInfo.get("variable"), Integer.parseInt(oCheckExtraInfo.get("index")), oCheckExtraInfo.get("value"));
		
			}
			
			if(this.isOldCheck()) {
				modifiedLocTime = AppGlobal.getCurrentTime(false);
				m_oCheck.setModifiedLocTime(modifiedLocTime);
				m_oCheck.setModifiedTime(formatter.print(AppGlobal.convertTimeToUTC(modifiedLocTime)));
				m_oCheck.setModifiedUesrId(AppGlobal.g_oFuncUser.get().getUserId());
				m_oCheck.setModifiedStationId(AppGlobal.g_oFuncStation.get().getStationId());
				updateCheck(false, false, PosCheckItem.SEND_MODE_NEW_ITEM, 0, false, 0, 0, 0, "", false, false, false, false, 0, 0, false, false);
			}
		}
	}
	
	// Check if member is assigned
	public boolean hasMember(){
		if(m_oCheck.getMemberId() > 0)
			return true;
		else
			return false;
	}
	
	// Get assigned member Id
	public int getMemberId(){
		return m_oCheck.getMemberId();
	}
	
	// Get assigned member display name
	public String getMemberDisplayName() {
		if(m_oCheck.getMemberId() > 0) {
			this.getAttachedMember();
			return m_oMember.getName();
		}else
			return null;
	}
	
	// Get assigned member number
	public String getMemberNumber() {
		if(m_oCheck.getMemberId() > 0) {
			this.getAttachedMember();
			return m_oMember.getMemberNo();
		}else
			return null;
	}
	
	// Get assigned member card number
	public String getMemberCardNumber() {
		if(m_oCheck.getMemberId() > 0) {
			this.getAttachedMember();
			return m_oMember.getCardNumber();
		}else
			return null;
	}
	
	//get member function
	private void getAttachedMember() {
		if(m_oMember != null && m_oMember.getMemberId() == m_oCheck.getMemberId())
			return;
		m_oMember = new MemMember();
		m_oMember.readById(m_oCheck.getMemberId());
	}
	
	public void setOrderingType(String sOrderingType) {
		m_oCheck.setOrderingType(sOrderingType);
	}
	
	public void setNonRevenue(String sNonRevenue, boolean bUpdateDB) {
		m_oCheck.setNonRevenue(sNonRevenue);
		
		if (bUpdateDB && isOldCheck())
			updateCheck(false, false, PosCheckItem.SEND_MODE_NEW_ITEM, 0, false, 0, 0, 0, "", false, false, false, false, 0, 0, false, false);
	}
	
	public void setResvBookDate(DateTime oResvBookDate) {
		m_oCheck.setResvBookDate(oResvBookDate);
	}
	
	//Check whether need to update non revenue to liability
	public boolean isUpdateLiability(){
		boolean bUpdate = false;
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem:oItemList){
					if(!oFuncCheckItem.getCheckItem().getStatus().equals("d")){
						//If not Give X, not checking its liability status
						if(oFuncCheckItem.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0)) {
							int iIntfId = Integer.parseInt(oFuncCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_INTERFACE_ID));
							PosInterfaceConfig oInterfaceConfig = AppGlobal.getPosInterfaceConfigById(iIntfId);
							if(oInterfaceConfig == null || !oInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_GIVEX))
								continue;
							
						}else
							continue;
						
						if(oFuncCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_REMARK)!=null){
							if(oFuncCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_REMARK).equals("IS") || oFuncCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_REMARK).equals("TU") ){
								bUpdate = true;
							}
						}
					}
				}
			}
		}
		return bUpdate;
	}
	
	public void setRefnoWithPrefix(String sRefnoWithPrefix) {
		m_oCheck.setRefnoWithPrefix(sRefnoWithPrefix);
	}
	
	public DateTime getResvBookDate() {
		return m_oCheck.getResvBookDate();
	}
	
	public String getRefnoWithPrefix() {
		return m_oCheck.getRefnoWithPrefix();
	}
	
	public String getOrderingType() {
		return m_oCheck.getOrderingType();
	}
	
	public boolean isTakeoutOrderingType() {
		return m_oCheck.isTakeoutOrderingType();
	}
	
	public boolean isNormalOrderingType() {
		return m_oCheck.isNormalOrderingType();
	}
	
	public String getNonRevenue() {
		return m_oCheck.getNonRevenue();
	}

	public boolean isRevenue() {
		return m_oCheck.isRevenue();
	}
	
	public boolean isLiability(){
		return m_oCheck.isLiability();
	}
	
	// Get a section, item index list of current ordered item
	public List<HashMap<String, Integer>> getSectionItemIndexForCurrentOrderedItem() {
		int i, j, k;
		List<HashMap<String, Integer>> oSectionItemIndexList = new ArrayList<HashMap<String, Integer>>();

		for (i=0; i<m_oFuncCheckPartyList.size(); i++) {
			for (j=0; j<m_oFuncCheckPartyList.get(i).getWholeItemList().size(); j++) {
				for (k=0; k<m_oFuncCheckPartyList.get(i).getItemList(j).size(); k++) {
					HashMap<String, Integer> oItemHashMap = new HashMap<String, Integer>();
					oItemHashMap.put("partySeq", i);
					oItemHashMap.put("sectionId", j);
					oItemHashMap.put("itemIndex", k);
					oSectionItemIndexList.add(oItemHashMap);
				}
			}
		}
		
		return oSectionItemIndexList;
	}
	
	public int getLastReleasePaymentVoidReasonId() {
		return m_iLastReleasePaymentVoidReasonId;
	}
	
	public PosVoidReason getLastReleasePaymentVoidReason(){
		return m_oLastReleasePaymentVoidReason;
	}
	
	public int getDummyPaymentIndex(){
		int iDummyPaymentIndex = -1;
		String sDummyPaymentId = "";
		
		List<PosCheckExtraInfo> oCheckExtraInfoList = this.getCheckExtraInfoList();
		for(int i = 0; i < oCheckExtraInfoList.size(); i++){
			if(oCheckExtraInfoList.get(i).getBy().equals(PosCheckExtraInfo.BY_PAYMENT) && oCheckExtraInfoList.get(i).getSection().equals("") && oCheckExtraInfoList.get(i).getVariable().equals(PosCheckExtraInfo.VARIABLE_DUMMY_PAYMENT)){
				sDummyPaymentId = oCheckExtraInfoList.get(i).getCpayId();
				break;
			}
		}
		
		for(int i = 0; i < this.getCheckPaymentList().size(); i++){
			if(this.getCheckPaymentList().get(i).getCpayId().equals(sDummyPaymentId) && !this.getCheckPaymentList().get(i).isDelete()){
				iDummyPaymentIndex = i;
				break;
			}
		}
		return iDummyPaymentIndex;
	}

	public String getCheckBusinessPeriodId() {
		return this.m_oCheck.getBusinessPeriodId();
	}
	
	public JSONObject contrustPmsPostingCheckInformation(PosCheckPayment oCheckPayment) {
		List<PosCheckItem> oCheckItemListForPmsPosting = new ArrayList<PosCheckItem>();
		HashMap<String, List<PosCheckDiscountItem>> oCheckDiscOnItem = new HashMap<String, List<PosCheckDiscountItem>>();
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem1:oItemList){
					oFuncCheckItem1.setItemDiscountListForPmsPosting();
					oCheckItemListForPmsPosting.add(oFuncCheckItem1.getCheckItem());
					
					String sKey = oFuncCheckItem1.getCheckItem().getSeatNo()+"_"+oFuncCheckItem1.getCheckItem().getSeq();
					oCheckDiscOnItem.put(sKey, oFuncCheckItem1.getAllCheckDiscountItemList());
				}
			}
		}
		
		List<PosCheckDiscount> oCheckDiscountListForPmsPosting = new ArrayList<PosCheckDiscount>();
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			if(oFuncCheckParty.hasPartyCheckDiscount()) {
				for(PosCheckDiscount oPosCheckDiscount: oFuncCheckParty.getPartyCheckDiscount())
					oCheckDiscountListForPmsPosting.add(oPosCheckDiscount);
			}
		}
		
		HashMap <String, String> oPassingInformation = new HashMap <String, String>();
		if (AppGlobal.g_oFuncStation.get().getBreakdownInclusiveScTaxAtFinalSettle())
			oPassingInformation.put("isBreakdownFromInclusiveNoBreakdown", "true");
		
		return m_oCheck.contrustPmsPostingCheckInformation(oCheckItemListForPmsPosting, oCheckDiscOnItem, oCheckPayment, oCheckDiscountListForPmsPosting, m_oCheckTaxScRefList, oPassingInformation);
	}
	
	public JSONObject contrustSvcPostingCheckInformation(List<PosCheckPayment> oCheckPaymentList, List<PosCheckPayment> oCheckPreviousPaymentList, List<PosCheckGratuity> oCheckGratuityList) {
		List<PosCheckItem> oCheckItemListForPmsPosting = new ArrayList<PosCheckItem>();
		List<BigDecimal> oItemDiscTotalList = new ArrayList<BigDecimal>();
		List<BigDecimal> oItemCheckDiscTotalList = new ArrayList<BigDecimal>();
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem1:oItemList){
					oCheckItemListForPmsPosting.add(oFuncCheckItem1.getCheckItem());
					oItemDiscTotalList.add(oFuncCheckItem1.getAppliedItemDiscountTotal());
					oItemCheckDiscTotalList.add(oFuncCheckItem1.getAppliedCheckDiscountRoundTotal());
				}
			}
		}
		
		List<PosCheckDiscount> oCheckDiscountListForPmsPosting = new ArrayList<PosCheckDiscount>();
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			if(oFuncCheckParty.hasPartyCheckDiscount()) {
				for(PosCheckDiscount oPosCheckDiscount: oFuncCheckParty.getPartyCheckDiscount())
					oCheckDiscountListForPmsPosting.add(oPosCheckDiscount);
			}
		}
		
		return m_oCheck.contrustSvcPostingCheckInformation(oCheckItemListForPmsPosting, oItemDiscTotalList, oItemCheckDiscTotalList, oCheckPaymentList, oCheckDiscountListForPmsPosting, oCheckPreviousPaymentList, oCheckGratuityList);
	}
	
	public JSONObject contrustBallyPostingCheckInformation(List<PosCheckPayment> oCheckPaymentList) {
		List<PosCheckItem> oCheckItemListForBallyPosting = new ArrayList<PosCheckItem>();
		List<BigDecimal> oItemDiscTotalList = new ArrayList<BigDecimal>();
		List<BigDecimal> oItemCheckDiscTotalList = new ArrayList<BigDecimal>();
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem1:oItemList){
					oCheckItemListForBallyPosting.add(oFuncCheckItem1.getCheckItem());
					oItemDiscTotalList.add(oFuncCheckItem1.getAppliedItemDiscountTotal());
					oItemCheckDiscTotalList.add(oFuncCheckItem1.getAppliedCheckDiscountRoundTotal());
				}
			}
		}
		
		List<PosCheckDiscount> oCheckDiscountListForBallyPosting = new ArrayList<PosCheckDiscount>();
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			if(oFuncCheckParty.hasPartyCheckDiscount()) {
				for(PosCheckDiscount oPosCheckDiscount: oFuncCheckParty.getPartyCheckDiscount())
					oCheckDiscountListForBallyPosting.add(oPosCheckDiscount);
			}
		}
		
		return m_oCheck.contrustBallyPostingCheckInformation(oCheckItemListForBallyPosting, oItemCheckDiscTotalList, oCheckPaymentList, oCheckDiscountListForBallyPosting);
	}
	
	// Check if there is Octopus payment
	public boolean hasOctopusPayment() {
		for (PosCheckPayment oCheckPayment: this.getCheckPaymentList()) {
			if(oCheckPayment.isOctopusPaymentType())
				return true;
		}
		return false;
	}
	
	// Check if there is Rewite Card payment
	public boolean hasRewriteCardPayment() {
		for (PosCheckPayment oCheckPayment: this.getCheckPaymentList()) {
			if(oCheckPayment.isRewriteCardPaymentType())
				return true;
		}
		return false;
	}
	
	// Get payment total from payment records
	public BigDecimal getPaymentRecordPayTotal() {
		BigDecimal dPayTotal = new BigDecimal("0.0");
		
		if(this.getCheckPaymentList().isEmpty())
			return dPayTotal;
		else {
			for (PosCheckPayment oCheckPayment: this.getCheckPaymentList())
				dPayTotal = dPayTotal.add(oCheckPayment.getPayTotal());
			return dPayTotal;
		}
	}
	
	// Get item total from item records
	public BigDecimal getItemRecordItemTotal() {
		BigDecimal dItemTotal = new BigDecimal("0.0");
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oCheckItemList:oFuncCheckParty.getWholeItemList()){
				for(FuncCheckItem oCheckItem:oCheckItemList) {
					dItemTotal = dItemTotal.add(oCheckItem.getCheckItem().getRoundTotal());
				}
			}
		}
		
		return dItemTotal;
	}
	
	public ArrayList<FuncCheckParty> getCheckPartyList() {
		return m_oFuncCheckPartyList;
	}
	
	public FuncCheckParty getCheckPartyBySeq(int iSeq) {
		if(m_oFuncCheckPartyList.size() <= iSeq)
			return null;
		
		return m_oFuncCheckPartyList.get(iSeq);
	}
	
	public int getCurrentCheckPartySeq() {
		return m_oFuncCheckPartyList.indexOf(m_oCurrentFuncCheckParty);
	}
	
	public void addCheckParty() {
		FuncCheckParty oFuncCheckParty = new FuncCheckParty();
		
		// Set the seq no.
		int iSeq = m_oFuncCheckPartyList.size();
		oFuncCheckParty.getCheckParty().setSeq(iSeq);
		
		m_oFuncCheckPartyList.add(oFuncCheckParty);
		
		// Set check party count
		m_oCheck.setPartyCount(m_oFuncCheckPartyList.size()-1);
	}
	
	public boolean switchCheckParty(int iSeq) {
		if(m_oFuncCheckPartyList.size() <= iSeq)
			return false;
		
		m_oCurrentFuncCheckParty = m_oFuncCheckPartyList.get(iSeq);
		
		return true;
	}
	
	public boolean hasCouponItem() {
		boolean bFound = false;
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oCheckItemList:oFuncCheckParty.getWholeItemList()){
				for(FuncCheckItem oCheckItem:oCheckItemList) {
					if(oCheckItem.isCouponItem()) {
						bFound = true;
						break;
					}
				}
			}
		}
		
		return bFound;
	}
	
	public HashMap<String, Integer> getLoyaltyBenefitItemCount() {
		HashMap<String, Integer> oBenefitItemCountList = new HashMap<String, Integer>();
		for (FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for (List<FuncCheckItem> oCheckItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oCheckItem: oCheckItemList) {
					String sBenefitCode = oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_BENEFIT_CODE);
					if (sBenefitCode != null && oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_BENEFIT_CODE) != null) {
						int iItemCount = oCheckItem.getCheckItem().getQty().intValue();
						if (oBenefitItemCountList.containsKey(sBenefitCode))
							iItemCount += oBenefitItemCountList.get(sBenefitCode);
						oBenefitItemCountList.put(sBenefitCode, iItemCount);
						break;
					}
				}
			}
		}
		
		return oBenefitItemCountList;
	}

	public HashMap<String, Integer> getLoyaltyBenefitDiscountCount() {
		HashMap<String, Integer> oBenefitDiscountCountList = new HashMap<String, Integer>();
		for (FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for (PosCheckDiscount oPosCheckDiscount: oFuncCheckParty.getPartyCheckDiscount()){
				if (oPosCheckDiscount.getExtraInfoFromList(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_REFERENCE, 0) == null)
					continue;
				
				PosCheckExtraInfo oCheckExtraInfo = oPosCheckDiscount.getExtraInfoFromList(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_BENEFIT_CODE, 0);
				if (oCheckExtraInfo != null) {
					String sBenefitCode = oCheckExtraInfo.getValue();
					int iDiscountCount = 1;
					if (oBenefitDiscountCountList.containsKey(sBenefitCode))
						iDiscountCount += oBenefitDiscountCountList.get(sBenefitCode);
					oBenefitDiscountCountList.put(sBenefitCode, iDiscountCount);
					break;
				}
			}
		}
		
		return oBenefitDiscountCountList;
	}
	
	public boolean hasSVCCouponRedeemItem() {
		boolean bFound = false;
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oCheckItemList:oFuncCheckParty.getWholeItemList()){
				for(FuncCheckItem oCheckItem:oCheckItemList) {
					if(oCheckItem.isSVCCouponRedeemItem()) {
						bFound = true;
						break;
					}
				}
			}
		}
		
		return bFound;
	}
	
	public PosCheckDiscount addNewCheckDiscountToList(List<HashMap<String, Integer>> oSelectedItemList, PosDiscountType oDiscountType, BigDecimal dDiscAmountRate, List<PosCheckExtraInfo> oExtraInfoList, int iAppliedUserId) {
		int i = 0, iCurrentCheckDiscountIndex = 0;
		PosCheckDiscount oCheckDiscount = new PosCheckDiscount();
		DateTime oApplyTime = AppGlobal.getCurrentTime(false);
		DateTimeFormatter oFormatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		
		oCheckDiscount.setModified(true);
		oCheckDiscount.setBdayId(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId());
		if(!m_oCheck.getBusinessPeriodId().isEmpty())
			oCheckDiscount.setBperId(m_oCheck.getBusinessPeriodId());
		else
			oCheckDiscount.setBperId(AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId());
		
		oCheckDiscount.setShopId(AppGlobal.g_oFuncOutlet.get().getShopId());
		oCheckDiscount.setOletId(AppGlobal.g_oFuncOutlet.get().getOutletId());
		oCheckDiscount.setChksId(getCheckId());
		oCheckDiscount.setCptyId(m_oCurrentFuncCheckParty.getCptyId());
		//oCheckDiscount.setCptyId(getCurrentCheckPartySeq());
		oCheckDiscount.setCitmId("");
		oCheckDiscount.setDtypId(oDiscountType.getDtypId());
		for(i=1; i<=5; i++) {
			oCheckDiscount.setName(i, oDiscountType.getName(i));
			oCheckDiscount.setShortName(i, oDiscountType.getShortName(i));
		}
		oCheckDiscount.setDgrpId(oDiscountType.getDgrpId());
		oCheckDiscount.setMethod(oDiscountType.getMethod());
		oCheckDiscount.setType(oDiscountType.getType());
		oCheckDiscount.setUsedFor(oDiscountType.getUsedFor());
		oCheckDiscount.setClassKey(oDiscountType.getClassKey());
		if(oDiscountType.isPercentageDiscountMethod()) {
			oCheckDiscount.setFixAmount(BigDecimal.ZERO);
			oCheckDiscount.setRate(dDiscAmountRate);
		}else{
			if (oDiscountType.isUsedForDiscount() && oDiscountType.getDiscountMaxLimit().compareTo(BigDecimal.ZERO) > 0)
				dDiscAmountRate = dDiscAmountRate.negate().compareTo(oDiscountType.getDiscountMaxLimit()) > 0 ?  oDiscountType.getDiscountMaxLimit().negate() : dDiscAmountRate;
			oCheckDiscount.setFixAmount(dDiscAmountRate);
			oCheckDiscount.setRate(BigDecimal.ZERO);
		}
		oCheckDiscount.setIncludeTaxScMask(oDiscountType.getIncludeTaxScMask());
		oCheckDiscount.setIncludePreDisc(oDiscountType.getIncludePreDisc());
		oCheckDiscount.setIncludeMidDisc(oDiscountType.getIncludeMidDisc());
		oCheckDiscount.setApplyLocalTime(oApplyTime);
		oCheckDiscount.setApplyTime(oFormatter.print(AppGlobal.convertTimeToUTC(oApplyTime)));
		if(iAppliedUserId == 0)
			oCheckDiscount.setApplyUserId(AppGlobal.g_oFuncUser.get().getUserId());
		else
			oCheckDiscount.setApplyUserId(iAppliedUserId);
		oCheckDiscount.setApplyStationId(AppGlobal.g_oFuncStation.get().getStationId());
		oCheckDiscount.setIsCheckDiscount();
		
		iCurrentCheckDiscountIndex = m_oCurrentFuncCheckParty.addNewCheckDiscountToList(oCheckDiscount);
		oCheckDiscount.setSeq(iCurrentCheckDiscountIndex);
		
		//the corresponding pos check discount item
		for(HashMap<String, Integer> oSelectedItem:oSelectedItemList) {
			FuncCheckItem oParentFuncCheckItem = getCheckItem(oSelectedItem.get("partySeq"), oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
			
			PosCheckDiscountItem oPosCheckDiscountItem = new PosCheckDiscountItem();
			oPosCheckDiscountItem.setOutletId(AppGlobal.g_oFuncOutlet.get().getOutletId());
			oPosCheckDiscountItem.setCitmId(oParentFuncCheckItem.getCheckItem().getCitmId());
			oParentFuncCheckItem.addCheckDiscountItemToList(iCurrentCheckDiscountIndex, oPosCheckDiscountItem);
			
			oCheckDiscount.addCheckDiscountItemCount(1);
		}
		
		if (oExtraInfoList != null) {
			for (PosCheckExtraInfo oPosCheckExtraInfo: oExtraInfoList)
				oCheckDiscount.addExtraInfoToList(new PosCheckExtraInfo(oPosCheckExtraInfo));
		}
		
		if (oDiscountType.isUsedForDiscount() && oDiscountType.getDiscountMaxLimit().compareTo(BigDecimal.ZERO) > 0)
			oCheckDiscount.addExtraInfoToList(AppGlobal.g_oFuncOutlet.get().getOutletId(), "",
					PosCheckExtraInfo.VARIABLE_MAX_CHARGE, 0, oDiscountType.getDiscountMaxLimit().toPlainString());
		
		return oCheckDiscount;
	}
	
	public List<PosCheckDiscount> getCurrentPartyAppliedCheckDiscount() {
		return m_oCurrentFuncCheckParty.getPartyCheckDiscount();
	}
	
	public List<HashMap<String, Integer>> getSectionItemIndexWithAppliedCheckDiscount(int iChkDiscIndex) {
		List<HashMap<String, Integer>> oAppliedItemIndexList = m_oCurrentFuncCheckParty.getSeatItemIndexPairWithAppliedCheckDiscount(iChkDiscIndex);
		return oAppliedItemIndexList;
	}
	
	public List<HashMap<String, Integer>> getPartySectionItemIndexWithAppliedCheckDiscount(int iChkDiscIndex) {
		List<HashMap<String, Integer>> oPartySectionItemIndexList = new ArrayList<HashMap<String, Integer>>();
		
		for(int i=0; i<m_oFuncCheckPartyList.size(); i++) {
			List<HashMap<String, Integer>> oAppliedItemPerParty = m_oFuncCheckPartyList.get(i).getSeatItemIndexPairWithAppliedCheckDiscount(iChkDiscIndex);
			if(!oAppliedItemPerParty.isEmpty()) {
				for(HashMap<String, Integer> oItemInfo:oAppliedItemPerParty) {
					oItemInfo.put("partySeq", i);
					oPartySectionItemIndexList.add(oItemInfo);
				}
			}
		}
		
		return oPartySectionItemIndexList;
	}
	
	// Get existing check extra info list
	public List<PosCheckExtraInfo> getCheckExtraInfoList() {
		return this.m_oCheckExtraInfoList;
	}
	
	public void clearCheckExtraInfoList() {
		this.m_oCheckExtraInfoList.clear();
	}
	
	public void clearCheckTaxScRefList() {
		this.m_oCheckTaxScRefList.clear();
	}
	
	public void addCheckExtraInfoToList(PosCheckExtraInfo oCheckExtraInfo) {
		this.m_oCheckExtraInfoList.add(oCheckExtraInfo);
	}
	
	public void removeCheckExtraInfoFromList(String sBy, String sSection, String sVariable) {
		int iRemoveIndex = -1;
		PosCheckExtraInfo oCheckExtraInfo = null;
		
		for(int i = 0; i < m_oCheckExtraInfoList.size(); i++) {
			oCheckExtraInfo = m_oCheckExtraInfoList.get(i);
			if(oCheckExtraInfo.getBy().equals(sBy) && oCheckExtraInfo.getSection().equals(sSection) && oCheckExtraInfo.getVariable().equals(sVariable)) {
				iRemoveIndex = i;
				break;
			}
		}
		
		if(iRemoveIndex >= 0)
			m_oCheckExtraInfoList.remove(iRemoveIndex);
	}
	
	//Add old check extra info to list
	public void addOldCheckExtraInfoToList() {
		List<PosCheckExtraInfo> checkExtraInfoArrayList = m_oCheck.getCheckExtraInfoArrayList();
		
		synchronized (m_oCheckExtraInfoList) {
			//Clear all info
			m_oCheckExtraInfoList.clear();
			
			for(PosCheckExtraInfo chkExtraInfo:checkExtraInfoArrayList) {
				m_oCheckExtraInfoList.add(chkExtraInfo);
			}
		}
	}
	
	//Add old check extra info to list
	public void addOldPaymentToList() {
		List<PosCheckPayment> checkPaymentArrayList = m_oCheck.getCheckPaymentArrayList();
		
		//Clear all info
		m_oCheckPaymentList.clear();
		
		for(PosCheckPayment checkPayment:checkPaymentArrayList) {
			m_oCheckPaymentList.add(checkPayment);
		}
	}
	
	//Add old payment gateway transaction to list
	public void addOldPaymentGatewayTransToList() {
		PosPaymentGatewayTransactionsList paymentGatewayTransArrayList = m_oCheck.getPaymentGatewayTransArrayList();
		
		//Clear all info
		m_oPosPaymentGatewayTransactionsList.clearList();
		
		for(PosPaymentGatewayTransactions paymGatewayTrans:paymentGatewayTransArrayList.getPosPaymentGatewayTransactionsList()) {
			m_oPosPaymentGatewayTransactionsList.add(paymGatewayTrans);
		}
	}
	
	//Add old check extra info to list
	public void addOldCheckTaxScRefList() {
		List<PosCheckTaxScRef> checkTaxScRefList = m_oCheck.getCheckTaxScRefList();
		
		// Clear all info
		m_oCheckTaxScRefList.clear();
		
		for (PosCheckTaxScRef oCheckTaxScRef : checkTaxScRefList) {
			m_oCheckTaxScRefList.add(oCheckTaxScRef);
		}
		
		m_oCheck.clearCheckTaxScRefList();
	}
	
	public void addPaymentGatewayTransToList(PosPaymentGatewayTransactions oTopupPosPaymentGatewayTransactions, int intfId) {
		DateTime oCurrentTime = AppGlobal.getCurrentTime(false);
		DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		
		oTopupPosPaymentGatewayTransactions.setIntfId(intfId);
		oTopupPosPaymentGatewayTransactions.setBdayId(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId());
		oTopupPosPaymentGatewayTransactions.setChksId(m_oCheck.getCheckId());
		oTopupPosPaymentGatewayTransactions.setOletId(AppGlobal.g_oFuncOutlet.get().getOutletId());
		oTopupPosPaymentGatewayTransactions.setShopId(AppGlobal.g_oFuncOutlet.get().getShopId());
		oTopupPosPaymentGatewayTransactions.setActionLocTime(oCurrentTime);
		oTopupPosPaymentGatewayTransactions.setActionUserId(AppGlobal.g_oFuncUser.get().getUserId());
		oTopupPosPaymentGatewayTransactions.setActionTime(formatter.print(AppGlobal.convertTimeToUTC(oCurrentTime)));
		this.m_oPosPaymentGatewayTransactionsList.add(oTopupPosPaymentGatewayTransactions);
		m_oCheck.getPaymentGatewayTransArrayList().add(oTopupPosPaymentGatewayTransactions);
	}
	
	public void removePaymentGatewayTransFromList(String sRefNo) {
		for(int iIndex = 0 ; iIndex < this.m_oPosPaymentGatewayTransactionsList.getPosPaymentGatewayTransactionsList().size() ; iIndex++){
			if(this.m_oPosPaymentGatewayTransactionsList.getPosPaymentGatewayTransactionsList().get(iIndex).getRefNo()
					.equals(sRefNo)){
				this.m_oPosPaymentGatewayTransactionsList.remove(iIndex);
				break;
			}
		}
		
		for(int iIndex = 0 ; iIndex < m_oCheck.getPaymentGatewayTransArrayList().getPosPaymentGatewayTransactionsList().size() ; iIndex++){
			if(m_oCheck.getPaymentGatewayTransArrayList().getPosPaymentGatewayTransactionsList().get(iIndex).getRefNo()
					.equals(sRefNo)){
				m_oCheck.getPaymentGatewayTransArrayList().remove(iIndex);
				break;
			}
		}
	}
	
	public void removePaymentGatewayTransByPaymentId(String sCPayId) {
		ArrayList<Integer> iRemoveIndexList = new ArrayList<Integer>();
		for(int iIndex = this.m_oPosPaymentGatewayTransactionsList.getPosPaymentGatewayTransactionsList().size() - 1 ; iIndex >= 0 ; iIndex--){
			if(this.m_oPosPaymentGatewayTransactionsList.getPosPaymentGatewayTransactionsList().get(iIndex).getCpayId().equals(sCPayId))
				iRemoveIndexList.add(iIndex);
		}
		for(int iRemoveIndex : iRemoveIndexList)
			this.m_oPosPaymentGatewayTransactionsList.remove(iRemoveIndex);
		
		iRemoveIndexList = new ArrayList<Integer>();
		for(int iIndex = m_oCheck.getPaymentGatewayTransArrayList().getPosPaymentGatewayTransactionsList().size() - 1 ; iIndex >= 0 ; iIndex--){
			if(m_oCheck.getPaymentGatewayTransArrayList().getPosPaymentGatewayTransactionsList().get(iIndex).getCpayId().equals(sCPayId))
				iRemoveIndexList.add(iIndex);
		}
		for(int iRemoveIndex : iRemoveIndexList)
			m_oCheck.getPaymentGatewayTransArrayList().remove(iRemoveIndex);
	}
	
	public void addOldPaymentGatewayTransToList(PosPaymentGatewayTransactions oPosPaymentGatewayTransactions) {
		this.m_oPosPaymentGatewayTransactionsList.add(oPosPaymentGatewayTransactions);
		m_oCheck.getPaymentGatewayTransArrayList().add(oPosPaymentGatewayTransactions);
	}
	
	public void removeAllPaymentGatewayTransFromList() {
		this.m_oPosPaymentGatewayTransactionsList.clearList();
		m_oCheck.getPaymentGatewayTransArrayList().clearList();
	}
	
	public void addCheckExtraInfo(String sBy, String sSection, String sVariable, int iIndex, String sValue) {
		PosCheckExtraInfo oCheckExtraInfo = new PosCheckExtraInfo();
		oCheckExtraInfo.setBy(sBy);
		oCheckExtraInfo.setOutletId(AppGlobal.g_oFuncOutlet.get().getOutletId());
		oCheckExtraInfo.setCheckId(m_oCheck.getCheckId());
		oCheckExtraInfo.setSection(sSection);
		oCheckExtraInfo.setVariable(sVariable);
		oCheckExtraInfo.setIndex(iIndex);
		oCheckExtraInfo.setValue(sValue);
		m_oCheckExtraInfoList.add(oCheckExtraInfo);
	}

	public ArrayList<HashMap<String, String>> addCheckExtraInfoToList(ArrayList<HashMap<String, String>> oCheckExtraInfos, String sVariable, String sIndex, String sValue) {
		HashMap<String, String> oCheckExtraInfo = new HashMap<String, String>();
		oCheckExtraInfo.put("variable", sVariable);
		oCheckExtraInfo.put("index", sIndex);
		oCheckExtraInfo.put("value", sValue);
		oCheckExtraInfos.add(oCheckExtraInfo);
		
		return oCheckExtraInfos;
	}

	public void updateCheckExtraInfoValue(String sBy, String sSection, String sVariable, int iIndex, String sValue) {
		for(PosCheckExtraInfo oCheckExtraInfo:m_oCheckExtraInfoList) {
			if(oCheckExtraInfo.getBy().equals(sBy) && oCheckExtraInfo.getSection().equals(sSection) && oCheckExtraInfo.getVariable().equals(sVariable) && oCheckExtraInfo.getIndex() == iIndex) {
				oCheckExtraInfo.setValue(sValue);
				return;
			}
		}
	}
	
	public void addCheckTaxScRef(String sBy, String sVariable, String sValue) {
		PosCheckTaxScRef oCheckTaxScRef = new PosCheckTaxScRef();
		oCheckTaxScRef.setBy(sBy);
		oCheckTaxScRef.setOutletId(AppGlobal.g_oFuncOutlet.get().getOutletId());
		oCheckTaxScRef.setBussinessPeriodId(AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId());
		oCheckTaxScRef.setCheckId(m_oCheck.getCheckId());
		oCheckTaxScRef.setVariable(sVariable);
		oCheckTaxScRef.setValue(sValue);
		m_oCheckTaxScRefList.add(oCheckTaxScRef);
	}
	
	public void updateCheckTaxScRefValue(String sBy, String sVariable, String sValue) {
		for (PosCheckTaxScRef oCheckTaxScRef : m_oCheckTaxScRefList) {
			if (oCheckTaxScRef.getBy().equals(sBy) && oCheckTaxScRef.getVariable().equals(sVariable)) {
				oCheckTaxScRef.setValue(sValue);
				break;
			}
		}
	}
	
	//check whether a specific extra info exist or not
	public boolean isTaxScRefExistBySectionVariable(String sVariable) {
		if (m_oCheckTaxScRefList.isEmpty())
			return false;
		
		boolean bFound = false;
		for (PosCheckTaxScRef oPosCheckTaxScRef : m_oCheckTaxScRefList) {
			if (oPosCheckTaxScRef.getVariable().equals(sVariable)) {
				bFound = true;
				break;
			}
		}
		
		return bFound;
	}
	
	//add / update check's extra info
	//mode - 1:add, 2:update, 3:add if not find / update if find 
	public void addOrUpdateCheckExtraInfoValue(int iMode, String sBy, String sSection, String sVariable, int iIndex, String sValue) {
		if(iMode == 1 || (iMode == 3 && !isCheckExtraInfoExistBySectionVariableAndIndex(sSection, sVariable, iIndex)))
			this.addCheckExtraInfo(sBy, sSection, sVariable, iIndex, sValue);
		else if(iMode == 2 || (iMode == 3 && isCheckExtraInfoExistBySectionVariableAndIndex(sSection, sVariable, iIndex)))
			this.updateCheckExtraInfoValue(sBy, sSection, sVariable, iIndex, sValue);
	}
	
	public boolean isCheckExtraInfoExistByVariableAndIndex(String sVariable, int iIndex) {
		boolean bFound = false;
		
		for(PosCheckExtraInfo oCheckExtraInfo:m_oCheckExtraInfoList) {
			if(oCheckExtraInfo.getVariable().equals(sVariable) && oCheckExtraInfo.getIndex() == iIndex) {
				bFound = true;
				break;
			}
		}
		
		return bFound;
	}
	
	public boolean isCheckExtraInfoExistBySectionVariableAndIndex(String sSection, String sVariable, int iIndex) {
		boolean bFound = false;
		
		for(PosCheckExtraInfo oCheckExtraInfo:m_oCheckExtraInfoList) {
			if(oCheckExtraInfo.getSection().equals(sSection) && oCheckExtraInfo.getVariable().equals(sVariable) && oCheckExtraInfo.getIndex() == iIndex) {
				bFound = true;
				break;
			}
		}
		return bFound;
	}
	
	//ByType: this sBy parameter filter the extra info list. sBy should match ckei_by of the extra info record to return true
	public boolean isCheckExtraInfoExistByTypeSectionVariableAndIndex(String sBy, String sSection, String sVariable, int iIndex) {
		boolean bFound = false;
		
		for(PosCheckExtraInfo oCheckExtraInfo:m_oCheckExtraInfoList) {
			if(oCheckExtraInfo.getBy().equals(sBy) && oCheckExtraInfo.getSection().equals(sSection) && oCheckExtraInfo.getVariable().equals(sVariable) && oCheckExtraInfo.getIndex() == iIndex) {
				bFound = true;
				break;
			}
		}
		return bFound;
	}
	
	public String getCheckExtraInfoByCheckIdAndVariable(String sCheckId, String sVariable) {
		for(PosCheckExtraInfo oCheckExtraInfo:m_oCheckExtraInfoList) {
			if(oCheckExtraInfo.getChksId().equals(sCheckId) && oCheckExtraInfo.getVariable().equals(sVariable)) {
				return oCheckExtraInfo.getValue();
			}
		}
		
		return "";
	}
	
	public String getCheckExtraInfoBySectionAndVariable(String sSection, String sVariable, int iIndex) {
		for(PosCheckExtraInfo oCheckExtraInfo:m_oCheckExtraInfoList) {
			if(oCheckExtraInfo.getSection().equals(sSection) && oCheckExtraInfo.getVariable().equals(sVariable) && oCheckExtraInfo.getIndex() == iIndex)
				return oCheckExtraInfo.getValue();
		}
		
		return "";
	}
	
	//ByType: this sBy parameter filter the extra info list. sBy should match ckei_by of the extra info record to return the record
	public String getCheckExtraInfoByTypeSectionAndVariable(String sBy, String sSection, String sVariable, int iIndex) {
		for(PosCheckExtraInfo oCheckExtraInfo:m_oCheckExtraInfoList) {
			if(oCheckExtraInfo.getBy().equals(sBy) && oCheckExtraInfo.getSection().equals(sSection) && oCheckExtraInfo.getVariable().equals(sVariable) && oCheckExtraInfo.getIndex() == iIndex)
				return oCheckExtraInfo.getValue();
		}
		return "";
	}
	
	// Get the values list by variable
	public HashMap<Integer, String> getCheckExtraInfoValueListWithIndexBySectionVariable(String sSection, String sVariable) {
		HashMap<Integer, String> oCheckExtraInfoValues = new HashMap<Integer, String>();
		
		for(PosCheckExtraInfo oPosCheckExtraInfo: m_oCheckExtraInfoList) {
			if(oPosCheckExtraInfo.getBy().equals(PosCheckExtraInfo.BY_CHECK) && oPosCheckExtraInfo.getSection().equals(sSection) && oPosCheckExtraInfo.getVariable().equals(sVariable)) 
				oCheckExtraInfoValues.put(Integer.valueOf(oPosCheckExtraInfo.getIndex()), oPosCheckExtraInfo.getValue());
		}

		return oCheckExtraInfoValues;
	}
	
	// Get the values list by variable
	public String getCheckExtraInfoValueListBySectionVariable(String sSection, String sVariable) {
		String sValue = "";
		
		for(PosCheckExtraInfo oPosCheckExtraInfo: m_oCheckExtraInfoList) {
			if(oPosCheckExtraInfo.getSection().equals(sSection) && oPosCheckExtraInfo.getVariable().equals(sVariable)) 
				sValue = oPosCheckExtraInfo.getValue();
		}
		
		return sValue;
	}
	
	public void cleanupItemStockList() {
		synchronized(this) {
			m_oItemStockList.cleanupOutletItemList();
		}
	}
	
	public void addExtraInfoForSplitCheckAutoFunction() {
		if (AppGlobal.g_oFuncStation.get().getCheckAutoFunctionsOption() && !this.isOldCheck())
			this.addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_AUTO_FUNCTIONS, PosCheckExtraInfo.VARIABLE_FINISH, 0, PosCheckExtraInfo.VALUE_FALSE);
	}
	
	public void addExtraInfoForPaymentInterface(HashMap<String, String> oSelectedPaytypeInfo) {
		List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_PAYMENT_INTERFACE);
		PosInterfaceConfig oPosInterfaceConfig = null;
		int iInterfaceId = Integer.valueOf(oSelectedPaytypeInfo.get("interfaceId")).intValue();
		String sMemberNumber = "";
		
		for(PosInterfaceConfig oTempInterfaceConfig: oInterfaceConfigList) {
			if(oTempInterfaceConfig.getInterfaceId() == iInterfaceId)
				oPosInterfaceConfig = oTempInterfaceConfig;
		}
		
		if(oPosInterfaceConfig == null)
			return;
		
		// Get WeChat id from check extra info (Section : preorder, Variable : member_number)
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_PREORDER, PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER, 0))
			sMemberNumber = getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_PREORDER, PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER);
		
		try {
			JSONObject oInterfaceSetup = oPosInterfaceConfig.getInterfaceConfig();
			int iExpireTime;
			iExpireTime = oInterfaceSetup.getJSONObject("interface_setup").getJSONObject("params").getJSONObject("pay_url_expire_time").getInt("value");
			DateTime oExpireTime = (AppGlobal.getCurrentTime(false)).plusMinutes(iExpireTime);
			DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyyMMddHHmmss");
			String sExpireTime = formatter.print(oExpireTime);
			
			String sOutTradeNumber = "";
			
			// add related information to check's extra info
			if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0))
				updateCheckExtraInfoValue(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0, oSelectedPaytypeInfo.get("interfaceId"));
			else
				addCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0, oSelectedPaytypeInfo.get("interfaceId"));
			if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_PAYTYPE, 0))
				updateCheckExtraInfoValue(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_PAYTYPE, 0, oSelectedPaytypeInfo.get("paytype"));
			else
				addCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_PAYTYPE, 0, oSelectedPaytypeInfo.get("paytype"));
			if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_OUT_TRADE_NUMBER, 0))
				updateCheckExtraInfoValue(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_OUT_TRADE_NUMBER, 0, sOutTradeNumber);
			else
				addCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_OUT_TRADE_NUMBER, 0, sOutTradeNumber);
			if(!sMemberNumber.isEmpty()) {
				if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER, 0))
					updateCheckExtraInfoValue(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER, 0, sMemberNumber);
				else
					addCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER, 0, sMemberNumber);
			}
			if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_EXPIRE_TIME, 0))
				updateCheckExtraInfoValue(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_EXPIRE_TIME, 0, sExpireTime);
			else
				addCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_EXPIRE_TIME, 0, sExpireTime);
			
			m_bPaymentInterfacePrinting = true;
			
		} catch (JSONException e) {
			e.printStackTrace();
		}
	}
	
	public void addExtraInfoForSVCPointFunction(String sAccountNumber, String sPassword, String sPointBalance, String sPointEarn) {
		// add related information to check's extra info
		
		// Earn point account no.
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_ACCOUNT_NUMBER, 0))
			updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_ACCOUNT_NUMBER, 0, sAccountNumber);
		else
			addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_ACCOUNT_NUMBER, 0, sAccountNumber);
		
		// Password
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_ACCOUNT_PASSWORD, 0))
			updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_ACCOUNT_PASSWORD, 0, sPassword);
		else
			addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_ACCOUNT_PASSWORD, 0, sPassword);
		
		// Point balance
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_BALANCE, 0))
			updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_BALANCE, 0, sPointBalance);
		else
			addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_BALANCE, 0, sPointBalance);
		
		// Point earn
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_EARN, 0))
			updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_EARN, 0, sPointEarn);
		else
			addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_EARN, 0, sPointEarn);
	}
	
	public void addExtraInfoForAscentisCrmPointFunction(String sPointBalance, String sPointEarn, String sPostingKey, String sTotalPointsBalance){
		// add related information to check's extra info
		// Point balance
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_BALANCE, 0))
			updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_BALANCE, 0, sPointBalance);
		else
			addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_BALANCE, 0, sPointBalance);
		
		// Point earn
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_EARN, 0))
			updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_EARN, 0, sPointEarn);
		else
			addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_EARN, 0, sPointEarn);
		
		// Posting Key
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POSTING_KEY, 0))
			updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POSTING_KEY, 0, sPostingKey);
		else
			addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POSTING_KEY, 0, sPostingKey);
		
		// Total Points Balance
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_TOTAL_POINTS_BALANCE, 0))
			updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_TOTAL_POINTS_BALANCE, 0, sTotalPointsBalance);
		else
			addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_TOTAL_POINTS_BALANCE, 0, sTotalPointsBalance);
	}
	
	public void addExtraInfoForYazuoCrmFunction(String sCardNo, String sMemberNo, String sMemberName, String sTraceID , String sPointBalance, String sPointEarned, String sStoreValueBalance) {
		// add related information to check's extra info
		// Card Number
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_CARD_NO, 0))
			updateCheckExtraInfoValue(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_CARD_NO, 0, sCardNo);
		else
			addCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_CARD_NO, 0, sCardNo);
		
		// Member No
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER, 0))
			updateCheckExtraInfoValue(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER, 0, sMemberNo);
		else
			addCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER, 0, sMemberNo);
		
		// Member Name
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_MEMBER_NAME, 0))
			updateCheckExtraInfoValue(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_MEMBER_NAME, 0, sMemberName);
		else
			addCheckExtraInfo(PosCheckExtraInfo.BY_PAYMENT, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_MEMBER_NAME, 0, sMemberName);
		
		// Trace Id
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_TRACE_ID, 0))
			updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_TRACE_ID, 0, sTraceID);
		else
			addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_TRACE_ID, 0, sTraceID);
		
		// Point Balance
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_BALANCE, 0))
			updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_BALANCE, 0, sPointBalance);
		else
			addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_BALANCE, 0, sPointBalance);
		
		// Point Earned
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_EARN, 0))
			updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_EARN, 0, sPointEarned);
		else
			addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_EARN, 0, sPointEarned);
		
		// Store Value Balance
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_CARD_STORE_VALUE, 0))
			updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_CARD_STORE_VALUE, 0, sStoreValueBalance);
		else
			addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_CARD_STORE_VALUE, 0, sStoreValueBalance);
	}
	
	public void addExtraInfoForAdvanceOrder(String sReference, String sRetreived, String sPickupDate, String sGuestName, String sPhone, String sFax, String sNote1, String sNote2){	
		//Reference Number
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_REFERENCE, 0))
			updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_REFERENCE, 0, sReference);
		else
			addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_REFERENCE, 0, sReference);
		
		//Retrieved
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_RETRIEVED, 0))
			updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_RETRIEVED, 0, sRetreived);
		else
			addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_RETRIEVED, 0, sRetreived);
		
		//Pickup Date
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_PICKUP_DATE, 0))
			updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_PICKUP_DATE, 0, sPickupDate);
		else
			addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_PICKUP_DATE, 0, sPickupDate);
		
		//Guest Name
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_GUEST_NAME, 0))
			updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_GUEST_NAME, 0, sGuestName);
		else
			addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_GUEST_NAME, 0, sGuestName);
		
		//Phone
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_PHONE, 0))
			updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_PHONE, 0, sPhone);
		else
			addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_PHONE, 0, sPhone);
		
		//Fax
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_FAX, 0))
			updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_FAX, 0, sFax);
		else
			addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_FAX, 0, sFax);
		
		//Note 1
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_NOTE1, 0))
			updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_ADVANCE_ORDER,  PosCheckExtraInfo.VARIABLE_NOTE1, 0, sNote1);
		else
			addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_NOTE1, 0, sNote1);
	
		//Note 2
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_NOTE2, 0))
			updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_NOTE2, 0, sNote2);
		else
			addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_NOTE2, 0, sNote2);
	}

	public void addExtraInfoForRetreiveAdvanceOrder(String sReference, String sDepositAmount, String sAdvanceOrderChksId){
		//Reference Number
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_REFERENCE, 0))
			updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_REFERENCE, 0, sReference);
		else
			addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_REFERENCE, 0, sReference);
		
		//Deposit Amount
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_DEPOSIT_AMOUNT, 0))
			updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_DEPOSIT_AMOUNT, 0, sDepositAmount);
		else
			addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_DEPOSIT_AMOUNT, 0, sDepositAmount);
		
		//Advance Check Order Id
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_ADVANCE_ORDER_CHKS_ID, 0))
			updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_ADVANCE_ORDER_CHKS_ID, 0, sAdvanceOrderChksId);
		else
			addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_ADVANCE_ORDER, PosCheckExtraInfo.VARIABLE_ADVANCE_ORDER_CHKS_ID, 0, sAdvanceOrderChksId);
	}
	
	public void updateExtraInfoForDefaultPayment(JSONArray oDefaultPaymentJSONArray){
		DateTime modifiedLocTime = null;
		DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		
		ArrayList<Integer> oAppliedDefaultPaymentList = new ArrayList<>();
		int iIndex = 0;
		for(PosCheckExtraInfo oPosCheckExtraInfo: m_oCheckExtraInfoList) {
			if(oPosCheckExtraInfo.getBy().equals(PosCheckExtraInfo.BY_CHECK) && oPosCheckExtraInfo.getSection().equals(PosCheckExtraInfo.SECTION_DEFAULT_PAYMENT) && oPosCheckExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_DEFAULT_PAYMENT_DETAIL)) {
				oAppliedDefaultPaymentList.add(iIndex);
			}
			iIndex++;
		}
		
		// Insert/update the extra info for default payment
		for (int i=0; i<oDefaultPaymentJSONArray.length(); i++) {
			JSONObject oDefaultPaymentJSONObject;
			try {
				oDefaultPaymentJSONObject = (JSONObject) oDefaultPaymentJSONArray.get(i);
				if (i < oAppliedDefaultPaymentList.size()) {
					// Replace existing extra info
					PosCheckExtraInfo oPosCheckExtraInfo = m_oCheckExtraInfoList.get(oAppliedDefaultPaymentList.get(i).intValue());
					oPosCheckExtraInfo.setIndex(i+1);
					oPosCheckExtraInfo.setValue(oDefaultPaymentJSONObject.toString());
				} else {
					addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_DEFAULT_PAYMENT, PosCheckExtraInfo.VARIABLE_DEFAULT_PAYMENT_DETAIL, i+1, oDefaultPaymentJSONObject.toString());
				}
			} catch (JSONException e) {
				AppGlobal.stack2Log(e);
			}
		}
		
		// Delete extra default payment in extra info
		if (oAppliedDefaultPaymentList.size() > oDefaultPaymentJSONArray.length()) {
			for (int i=oAppliedDefaultPaymentList.size(); i>oDefaultPaymentJSONArray.length(); i--) {
				PosCheckExtraInfo oPosCheckExtraInfo = m_oCheckExtraInfoList.get(oAppliedDefaultPaymentList.get(i-1).intValue());
				oPosCheckExtraInfo.setStatus(PosCheckExtraInfo.STATUS_DELETED);
			}
		}
		
		if(this.isOldCheck()) {
			modifiedLocTime = AppGlobal.getCurrentTime(false);
			m_oCheck.setModifiedLocTime(modifiedLocTime);
			m_oCheck.setModifiedTime(formatter.print(AppGlobal.convertTimeToUTC(modifiedLocTime)));
			m_oCheck.setModifiedUesrId(AppGlobal.g_oFuncUser.get().getUserId());
			m_oCheck.setModifiedStationId(AppGlobal.g_oFuncStation.get().getStationId());
			updateCheck(false, false, PosCheckItem.SEND_MODE_NEW_ITEM, 0, false, 0, 0, 0, "", false, false, false, false, 0, 0, false, false);
		}
		
		if (oAppliedDefaultPaymentList.size() > oDefaultPaymentJSONArray.length()) {
			for (int i=oAppliedDefaultPaymentList.size(); i>oDefaultPaymentJSONArray.length(); i--) {
				m_oCheckExtraInfoList.remove(oAppliedDefaultPaymentList.get(i-1).intValue());
			}
		}
	}
	
	public void addPrintedCheckToPaymentInterfaceCheckList(String sOutTradeNumber) {
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0) == false)
			return;
		
		String sInterfaceId = getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID);
		String sPaytype = getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_PAYTYPE);
		String sExpireTime = "";
		if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_EXPIRE_TIME, 0))
			sExpireTime = getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_PAYMENT_INTERFACE, PosCheckExtraInfo.VARIABLE_EXPIRE_TIME);
		
		if(sInterfaceId.isEmpty() || sPaytype.isEmpty())
			return;
		
		HashMap<String, String> oCheckInfo = new HashMap<String, String>();
		oCheckInfo.put("checkId", String.valueOf(m_oCheck.getCheckId()));
		oCheckInfo.put("interfaceId", sInterfaceId);
		oCheckInfo.put("paytype", sPaytype);
		oCheckInfo.put("outTradeNumber", sOutTradeNumber);
		oCheckInfo.put("expireTime", sExpireTime);
		AppGlobal.addPrintedCheckToPaymentInterfaceCheckList(AppGlobal.g_oFuncOutlet.get().getOutletId(), oCheckInfo);
	}
	
	// Add a Taiwan GUI transaction
	public String addTaiwanGuiTran(String sTaiwanGuiType, String sRefNum, int iTransNum, String sCarrier, ArrayList<PosCheckPayment> oCheckPaymentList, PosPaymentMethodList oPaymentMethodList) {
		DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		
		if(!AppGlobal.g_oFuncStation.get().isTaiwanGuiConfigExist())
			return this.getTaiwanGUIErrorMessage("missing_station_setup");
		
		PosTaiwanGuiTran oTaiwanGuiTran = new PosTaiwanGuiTran();
		oTaiwanGuiTran.setShopId(AppGlobal.g_oFuncOutlet.get().getShopId());
		oTaiwanGuiTran.setOletId(AppGlobal.g_oFuncOutlet.get().getOutletId());
		oTaiwanGuiTran.setTwcfId(AppGlobal.g_oFuncStation.get().getTaiwanGuiConfigId());

		BigDecimal dVatTotal = BigDecimal.ZERO;
		BigDecimal dPrintTotal = BigDecimal.ZERO;
		
		// Calculate the print total and VAT total
		BigDecimal dPrepayTotal = BigDecimal.ZERO;
		for(FuncCheckParty oFuncCheckParty: m_oFuncCheckPartyList) {
			if(!oFuncCheckParty.getPartyCheckDiscount().isEmpty()) {
				for(PosCheckDiscount oCheckDiscount: oFuncCheckParty.getPartyCheckDiscount()) {
					if(oCheckDiscount.isUsedForExtraCharge()){
						// Get the pre-pay total (extra charge total)
						dPrepayTotal = dPrepayTotal.add(oCheckDiscount.getTotal());
					}
				}
			}
		}
		
		boolean bGuiPaymentExist = false;
		BigDecimal dGuiPaymentTotal = BigDecimal.ZERO;
		BigDecimal dNonGuiPaymentTotal = BigDecimal.ZERO;
		BigDecimal dTips = BigDecimal.ZERO;
		for(PosCheckPayment oPosCheckPayment:oCheckPaymentList){
			if(oPosCheckPayment.isDelete())
				continue;
			
			// Get GUI payment total
			if(oPaymentMethodList.getPaymentMethodList().containsKey(oPosCheckPayment.getPaymentMethodId())){
				PosPaymentMethod oPosPaymentMethod = oPaymentMethodList.getPaymentMethodList().get(oPosCheckPayment.getPaymentMethodId());
				if(oPosPaymentMethod.isTaiwanNonGuiPayment()){
					// Non-gui payment
					dNonGuiPaymentTotal = dNonGuiPaymentTotal.add(oPosCheckPayment.getPayTotal());
				}else{
					bGuiPaymentExist = true;
					// Gui payment
					dGuiPaymentTotal = dGuiPaymentTotal.add(oPosCheckPayment.getPayTotal());
					
					// Get tips amount total
					dTips = dTips.add(oPosCheckPayment.getPayTips());
				}
			}
		}
		
		if(!bGuiPaymentExist) 
			return "";
		
		// Exclude some items that are no need to open GUI receipt
		List<List<FuncCheckItem>> oWholePartyItemList = this.getWholeItemList();
		String sDeptList = AppGlobal.g_oFuncStation.get().getNonTaiwanGuiItemDeptGroup();
		if (sDeptList.length() > 0) {
			BigDecimal dGuiItemTotal = BigDecimal.ZERO;
			BigDecimal dItemTotal = BigDecimal.ZERO;
			String[] sItemDeptGroupIdList = sDeptList.split(",");
			ArrayList<String> oDeptGroupIdList = new ArrayList<String>(Arrays.asList(sItemDeptGroupIdList));
			MenuItemDeptGroupList oMenuItemDeptGroupList = new MenuItemDeptGroupList();
			oMenuItemDeptGroupList.readItemDeptGroupListByIds(oDeptGroupIdList);
			for (List<FuncCheckItem> oPartyItemList : oWholePartyItemList) {
				for (FuncCheckItem oFuncCheckItem : oPartyItemList) {
					boolean bFound = false;
					for (MenuItemDeptGroup oMenuItemDeptGroup : oMenuItemDeptGroupList.getItemDeptGroupList()) {
						for (MenuItemDeptGroupLookup oMenuItemDeptGroupLookup : oMenuItemDeptGroup.getItemDeptGroupLookupList()) {
							if (oMenuItemDeptGroupLookup.getDeptId() == oFuncCheckItem.getCheckItem().getDepartmentId()) {
								bFound = true;
								break;
							}
						}
						if (bFound)
							break;
					}
					
					if(oFuncCheckItem.hasAppliedCheckDiscount())
						dItemTotal = dItemTotal.add(oFuncCheckItem.getNetItemTotal().add(oFuncCheckItem.getAppliedCheckDiscountRoundTotal()));
					else
						dItemTotal = dItemTotal.add(oFuncCheckItem.getNetItemTotal());
					
					// No need to exclude item
					if (!bFound) {
						if(oFuncCheckItem.hasAppliedCheckDiscount())
							dGuiItemTotal = dGuiItemTotal.add(oFuncCheckItem.getNetItemTotal().add(oFuncCheckItem.getAppliedCheckDiscountRoundTotal()));
						else
							dGuiItemTotal = dGuiItemTotal.add(oFuncCheckItem.getNetItemTotal());
					}
				}
			}
			
			// Calculate the included check total
			BigDecimal dRatio = BigDecimal.ZERO;
			if (dItemTotal.compareTo(BigDecimal.ZERO) != 0)
				dRatio =  dGuiItemTotal.divide(dItemTotal, 10, RoundingMode.HALF_UP);
			
			BigDecimal dIncludeCheckTotal =  AppGlobal.g_oFuncOutlet.get().roundCheckAmountToBigDecimal(m_oCheck.getCheckTotal().multiply(dRatio));
			BigDecimal dIncludePayTotal =  dGuiPaymentTotal.subtract(dPrepayTotal);
			dIncludePayTotal = dIncludePayTotal.add(dTips);
			
			if (dIncludeCheckTotal.compareTo(dIncludePayTotal) > 0)
				dPrintTotal = dIncludePayTotal;
			else
				dPrintTotal = dIncludeCheckTotal;
		} else {
			dPrintTotal = dPrintTotal.add(dGuiPaymentTotal);
			dPrintTotal = dPrintTotal.subtract(dPrepayTotal);
			dPrintTotal = dPrintTotal.add(dTips);
		}
		
		//No need to generate Taiwan GUI number if print total is zero
		if (dPrintTotal.compareTo(BigDecimal.ZERO) == 0)
			return "";
		
		// Calculate the tax total according to GUI type
		int iTaxIndex;
		if(sTaiwanGuiType.equals(PosTaiwanGuiTran.TYPE_SPECIAL)){
			// ENT tax
			iTaxIndex = AppGlobal.g_oFuncStation.get().getTaiwanGuiEntertainmentTaxIndex();
		}else{
			// Normal tax
			iTaxIndex = AppGlobal.g_oFuncStation.get().getTaiwanGuiNormalTaxIndex();
		}
		
		if(iTaxIndex > 0){
			BigDecimal dFinalFactor = BigDecimal.ONE;
			dFinalFactor = dFinalFactor.add(m_oTaxType.get(iTaxIndex-1).getRate());
			dVatTotal = dPrintTotal.subtract(dPrintTotal.divide(dFinalFactor, 0, RoundingMode.HALF_UP));
		}
		
		oTaiwanGuiTran.setType(sTaiwanGuiType);
		oTaiwanGuiTran.setRefNum(sRefNum);
		oTaiwanGuiTran.setCarrier(sCarrier);
		
		oTaiwanGuiTran.setVatTotal(dVatTotal);
		oTaiwanGuiTran.setPrintTotal(dPrintTotal);
		oTaiwanGuiTran.setPrintCount(oTaiwanGuiTran.getPrintCount()+1);
		oTaiwanGuiTran.setPrintLocTime(AppGlobal.getCurrentTime(false));
		oTaiwanGuiTran.setPrintTime(formatter.print(AppGlobal.convertTimeToUTC(oTaiwanGuiTran.getPrintLocTime())));
		oTaiwanGuiTran.setPrintUserId(AppGlobal.g_oFuncUser.get().getUserId());
		oTaiwanGuiTran.setPrintStatId(AppGlobal.g_oFuncStation.get().getStationId());
	
		String sErrorMessage = oTaiwanGuiTran.addUpdate(false, iTransNum, m_oCheck.getCheckId());
		if(sErrorMessage.length() == 0){
			// No error
			if(isOldCheck() && m_oCheck.getTaiwanGuiTran() != null)
				m_oCheck.getTaiwanGuiTran().clear();
			m_oCheck.addTaiwanGuiTran(oTaiwanGuiTran);
			return "";
		}else{
			return this.getTaiwanGUIErrorMessage(sErrorMessage);
		}
	}
	
	// Get Taiwan GUI number of the check
	public int getTaiwanGuiNum(){
		if (m_oCheck.getTaiwanGuiTran(1) == null) {
			return 0;
		} else {
			return m_oCheck.getTaiwanGuiTran(1).getTguiNum();
		}
	}
	
	// Get the warning remain no. of GUI no.
	// 0 - no need to warn
	public int getRemainTaiwanGuiNumWarning(){
		if (m_oCheck.getTaiwanGuiTran(1) == null) {
			return 0;
		} else {
			// Further development
			return 0;
		}
	}
	
	public void voidTaiwanGuiTran() {
		DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		List<PosTaiwanGuiTran> oTaiwanGuiTranList = m_oCheck.getTaiwanGuiTran();
		
		if(oTaiwanGuiTranList == null)
			return;

		for(int i=0; i<oTaiwanGuiTranList.size(); i++) {
			PosTaiwanGuiTran oTaiwanGuiTran = oTaiwanGuiTranList.get(i);
			oTaiwanGuiTran.setVoidLocTime(AppGlobal.getCurrentTime(false));
			oTaiwanGuiTran.setVoidTime(formatter.print(AppGlobal.convertTimeToUTC(oTaiwanGuiTran.getVoidLocTime())));
			oTaiwanGuiTran.setVoidUserId(AppGlobal.g_oFuncUser.get().getUserId());
			oTaiwanGuiTran.setVoidStatId(AppGlobal.g_oFuncStation.get().getStationId());
			oTaiwanGuiTran.setStatus(PosTaiwanGuiTran.STATUS_DELETED);
		}
	}
	
	private String getTaiwanGUIErrorMessage(String sErrorMessageFromAPI){
		switch (sErrorMessageFromAPI) {
		case "missing_station_setup":
		case "missing_generate_by":
			return AppGlobal.g_oLang.get()._("missing_setup");
		case "exceed_range":
			return AppGlobal.g_oLang.get()._("taiwan_gui_number_is_out_of_range");
		case "duplicate_gui":
			return AppGlobal.g_oLang.get()._("duplicate_gui");
		default:
			return AppGlobal.g_oLang.get()._("internal_error");
		}
	}
	
	//get the itemizer total with itemizer number and configure
	public BigDecimal[] getItemizerTotal(int iNumberOfItemizer, HashMap<Integer, ArrayList<Integer>> oItemizerConfig) {
		int i = 0;
		BigDecimal[] dItemizers = new BigDecimal[iNumberOfItemizer];
		
		for(i=0; i<iNumberOfItemizer; i++)
			dItemizers[i] = BigDecimal.ZERO;
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oFuncItemList:oFuncCheckParty.getWholeItemList()){
				for(FuncCheckItem oFuncCheckItem:oFuncItemList) {
					for(Entry<Integer, ArrayList<Integer>> entry:oItemizerConfig.entrySet()) {
						ArrayList<Integer> oItemDeptIdList = entry.getValue();
						if(!oItemDeptIdList.isEmpty() && oItemDeptIdList.contains(oFuncCheckItem.getCheckItem().getDepartmentId())) {
							dItemizers[(entry.getKey()-1)] = dItemizers[(entry.getKey()-1)].add(oFuncCheckItem.getCheckItem().getRoundTotal());
							break;
						}
					}
				}
			}
		}
		
		return dItemizers;
	}
	
	public PosPaymentGatewayTransactionsList getPosPaymentGatewayTransactionsLists() {
		return m_oPosPaymentGatewayTransactionsList;
	}
	
	// If discount was applied before, check if the current discount can be applied or not
	public boolean checkDiscountApplyRestriction(boolean bCurrentApplyIsCheckDiscount){
		boolean bAllow = true;

		int iApplyDiscountRestriction = AppGlobal.g_oFuncStation.get().getApplyDiscountRestriction();
		
		if(iApplyDiscountRestriction > 0){
			if(bCurrentApplyIsCheckDiscount){
				// Currently apply check discount
				
				// Check if check discount was applied before
				if(hasCheckDiscount(true, true)){
					// Check discount was applied before
					bAllow = false;
				} else {
					if(iApplyDiscountRestriction == 1){
						// Check if item discount was applied before
						for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
							for(List<FuncCheckItem> oFuncItemList:oFuncCheckParty.getWholeItemList()){
								for(FuncCheckItem oFuncCheckItem:oFuncItemList) {
									if(oFuncCheckItem.hasItemDiscount(true)){
										// Item discount was applied before
										bAllow = false;
										break;
									}
								}
								if(!bAllow)
									break;
							}
							if(!bAllow)
								break;
						}
					} else if (iApplyDiscountRestriction == 3)
						bAllow = true;
				}
			} else {
				// Currently apply item discount
				if (iApplyDiscountRestriction == 1 || iApplyDiscountRestriction == 3) {
					// Check if check discount was applied before
					if(hasCheckDiscount(true, true)){
						// Check discount was applied before
						bAllow = false;
					}
				}
			}
		}
		
		return bAllow;
	}
	
	// Double check discount alert
	// Return value = 0: no alert  || 1: more than one discount || 2: same discount
	public int checkDoubleDiscountAlert(PosDiscountType oDiscountType){
		int iDoubleCheckDiscountAlert = AppGlobal.g_oFuncStation.get().getDoubleCheckDiscountAlert();
		int iAlert = 0;
		
		if(iDoubleCheckDiscountAlert > 0){
			// Check if check discount was applied before
			List<PosCheckDiscount> oAppliedCheckPartyDiscountList = getCurrentPartyAppliedCheckDiscount();
			if(!oAppliedCheckPartyDiscountList.isEmpty()){
				if(iDoubleCheckDiscountAlert == 1){
					return iAlert = 1;
				}else{
					//check if same check discount was applied before
					if(oAppliedCheckPartyDiscountList.size()>0){
						for(PosCheckDiscount oPosCheckDiscount: oAppliedCheckPartyDiscountList){
							if(oDiscountType.getDtypId() == oPosCheckDiscount.getDtypId()){
								return iAlert = 2;
							} 
						}
					}
				}
			}
		}
		
		return iAlert;
	}
	
	// Get last member no. in previous applied discount
	public String getPreviousAppliedDiscountMemberNo() {
		String sMemberNo = "";
		
		// Check if check discount was applied before
		List<PosCheckDiscount> oAppliedCheckPartyDiscountList = getCurrentPartyAppliedCheckDiscount();
		if(!oAppliedCheckPartyDiscountList.isEmpty()){
			//check if same check discount was applied before
			if(oAppliedCheckPartyDiscountList.size()>0){
				for(PosCheckDiscount oPosCheckDiscount: oAppliedCheckPartyDiscountList){
					PosCheckExtraInfo oPosCheckExtraInfo = oPosCheckDiscount.getExtraInfoFromList(PosCheckExtraInfo.SECTION_DISCOUNT, PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER, 0);
					if (oPosCheckExtraInfo != null) {
						sMemberNo = oPosCheckExtraInfo.getValue();
					}
				}
			}
		}
		
		return sMemberNo;
	}
	
	// Get last member input type in previous applied discount
	public String getPreviousAppliedDiscountMemberInputType() {
		String sInputType = "";
		
		// Check if check discount was applied before
		List<PosCheckDiscount> oAppliedCheckPartyDiscountList = getCurrentPartyAppliedCheckDiscount();
		if(!oAppliedCheckPartyDiscountList.isEmpty()){
			//check if same check discount was applied before
			if(oAppliedCheckPartyDiscountList.size()>0){
				for(PosCheckDiscount oPosCheckDiscount: oAppliedCheckPartyDiscountList){
					PosCheckExtraInfo oPosCheckExtraInfo = oPosCheckDiscount.getExtraInfoFromList(PosCheckExtraInfo.SECTION_DISCOUNT, PosCheckExtraInfo.VARIABLE_INPUT_TYPE, 0);
					if (oPosCheckExtraInfo != null) {
						sInputType = oPosCheckExtraInfo.getValue();
					}
				}
			}
		}
		return sInputType;
	}
	
	//get guest check url
	public String getGuestCheckUrl() {
		return m_sLastPrintCheckUrl;
	}
	
	// For Waive Tax Taiwan GUI, the check need to waive the tax
	// For other type, the check need to add back the tax for roll back
	// Parameter:
	// bAdd - true: add back the tax; false: waive the tax
	public void processTaiwanGUIWaiveTax(boolean bAdd) {
		int i;
		boolean[] bChosenSc = new boolean[5];
		String[] sChosenTax = new String[25];
		List<HashMap<String, Integer>> oSelectedItem = this.getSectionItemIndexForCurrentOrderedItem();
		for(i=0; i<5; i++)
			// No effect on SC
			bChosenSc[i] = false;
		for(i=0; i<25; i++){
			if(bAdd)
				sChosenTax[i] = PosOverrideCondition.CHARGE_TAX_CHARGE;
			else
				sChosenTax[i] = PosOverrideCondition.CHARGE_TAX_WAIVE;
		}
		this.addWaiveScTax(bAdd, oSelectedItem, bChosenSc, sChosenTax);
	}
	
	//generate a item snap shot list
	public void generateItemSnapShotList(boolean bGenerateExternalPostDetails) {
		m_oItemSnapShotListForPayment = new ArrayList<HashMap<String, String>>();
		if(bGenerateExternalPostDetails)
			m_oSnapShotOfIntfPostDetailsForPayment = new JSONObject();
		
		for(int iPartySeq=0; iPartySeq<m_oFuncCheckPartyList.size(); iPartySeq++) {
			FuncCheckParty oFuncCheckParty = m_oFuncCheckPartyList.get(iPartySeq);
			List<List<FuncCheckItem>> oPartyItemList = oFuncCheckParty.getWholeItemList();
			for(int iSection=0; iSection<oPartyItemList.size(); iSection++) {
				List<FuncCheckItem> oPartySectionItemList = oPartyItemList.get(iSection);
				for(int iItemIndex=0; iItemIndex<oPartySectionItemList.size(); iItemIndex++) {
					HashMap<String, String> oTempItemInfo = new HashMap<String, String>();
					
					oTempItemInfo.put("partySeq", String.valueOf(iPartySeq));
					oTempItemInfo.put("section", String.valueOf(iSection));
					oTempItemInfo.put("itemIndex", String.valueOf(iItemIndex));
					oTempItemInfo.put("oriChargeSc", String.valueOf(oPartySectionItemList.get(iItemIndex).getChargeSc()));
					oTempItemInfo.put("oriChargeTax", String.valueOf(oPartySectionItemList.get(iItemIndex).getChargeTax()));
					List<PosCheckDiscount> oItemDiscountList = oPartySectionItemList.get(iItemIndex).getItemDiscountList();
					String sItemDiscountList = "";
					if(!oItemDiscountList.isEmpty()) {
						for(int i=0; i<oItemDiscountList.size(); i++) {
							if(i > 1)
								sItemDiscountList = sItemDiscountList + ",";
							sItemDiscountList = sItemDiscountList + String.valueOf(oItemDiscountList.get(i).getCdisId());
						}
					}
					oTempItemInfo.put("oriDiscountIdList", sItemDiscountList);
					m_oItemSnapShotListForPayment.add(oTempItemInfo);
				}
			}
		}
		
		//get the applied check discount list
		for(int iPartySeq=0; iPartySeq<m_oFuncCheckPartyList.size(); iPartySeq++) {
			HashMap<String, String> oTempCheckDiscInfo = new HashMap<String, String>();
			List<PosCheckDiscount> oCheckDiscountList = m_oFuncCheckPartyList.get(iPartySeq).getPartyCheckDiscount();
			String sCheckDiscountString = ""; //format <check discount index>:<PosDiscountType ID>,...,<check discount index>:<PosDiscountType ID>
			if(oCheckDiscountList == null || oCheckDiscountList.isEmpty())
				continue;
			
			for(PosCheckDiscount oPosCheckDiscount: oCheckDiscountList) {
				if(!sCheckDiscountString.isEmpty())
					sCheckDiscountString = sCheckDiscountString+",";
				sCheckDiscountString = sCheckDiscountString+oPosCheckDiscount.getSeq()+":"+oPosCheckDiscount.getDtypId();
			}
			oTempCheckDiscInfo.put("checkDiscountInfo", sCheckDiscountString);
			m_oItemSnapShotListForPayment.add(oTempCheckDiscInfo);
		}
		
		if(bGenerateExternalPostDetails) {
			try {
				//get the post details for PMS
				JSONArray oPmsPostingArray = new JSONArray();
				for(PosCheckPayment oCheckPayment : m_oCheckPaymentList) {
					if(oCheckPayment.havePmsPayment())
						oPmsPostingArray.put(this.contrustPmsPostingCheckInformation(oCheckPayment));
				}
				if(oPmsPostingArray.length() > 0)
					m_oSnapShotOfIntfPostDetailsForPayment.put("pms", oPmsPostingArray);
			}catch(JSONException e) {
				
			}
		}
	}
	
	public List<HashMap<String, String>> getItemSnapShotList() {
		return m_oItemSnapShotListForPayment;
	}
	
	// set pending item
	public void setPendingItems(List<HashMap<String, Integer>> oPendingItemList, List<HashMap<String, Integer>> oRemovePendingItemList) {
		//set the item to pending item
		if(!oPendingItemList.isEmpty()) {
			for(int i=0; i<oPendingItemList.size(); i++) {
				FuncCheckItem oFuncCheckItem = getCheckItem(oPendingItemList.get(i).get("partySeq"), oPendingItemList.get(i).get("sectionId"), oPendingItemList.get(i).get("itemIndex"));
				if(oFuncCheckItem != null) {
					oFuncCheckItem.setPendingItem(PosCheckItem.PENDING_PENDING_ITEM);
					
					// Add log to action log list
					oFuncCheckItem.addActionLog(AppGlobal.FUNC_LIST.select_pending_item.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId() , AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), "", "", "", "",  "Pending");
				}
			}
		}
		
		//remove pending status from item
		if(!oRemovePendingItemList.isEmpty()) {
			for(int i=0; i<oRemovePendingItemList.size(); i++) {
				FuncCheckItem oFuncCheckItem = getCheckItem(oRemovePendingItemList.get(i).get("partySeq"), oRemovePendingItemList.get(i).get("sectionId"), oRemovePendingItemList.get(i).get("itemIndex"));
				if(oFuncCheckItem != null) {
					oFuncCheckItem.setPendingItem(PosCheckItem.PENDING_NORMAL_ITEM);
					
					// Add log to action log list
					oFuncCheckItem.addActionLog(AppGlobal.FUNC_LIST.select_pending_item.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId() , AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), "", "", "", "", "Clear Pending");
				}
			}
		}
	}
	
	//print pending item
	public void printPendingItems(List<HashMap<String, Integer>> oPendingItemList, BigDecimal oInputPendingQty) {
		LinkedHashMap<String ,HashMap<String, String>> oNewItemQuantityPair = new LinkedHashMap<>();
		try {
			for(HashMap<String, Integer> oPendingItem: oPendingItemList) {
				FuncCheckItem oFuncCheckItem = this.getCheckItem(oPendingItem.get("partySeq"), oPendingItem.get("sectionId"), oPendingItem.get("itemIndex"));
				if (oFuncCheckItem.isOldItem() && oFuncCheckItem.isPendingItem()) {
					boolean bIsPendingFullSend = true;
					BigDecimal oRemainingPendingQty = oFuncCheckItem.getCheckItem().getQty().stripTrailingZeros();
					
					JSONObject oRemainingPendingInfo = oFuncCheckItem.getPartialPendingItemInfo(FuncCheckItem.partialPendingItem_PendingInfo);
					JSONObject oDeliveredPendingInfo = oFuncCheckItem.getPartialPendingItemInfo(FuncCheckItem.partialPendingItem_Delivery_Info);
					
					// Get the quantity from extra info if exist
					if (oFuncCheckItem.isPartialPendingItem())
						oRemainingPendingQty = oFuncCheckItem.getPartialPendingItemAmount();
					
					// Check if is pending item with quantity
					if (oInputPendingQty != null) {
						if (oRemainingPendingQty.compareTo(oInputPendingQty) == 1) {
							// Get the sended item list from extra info & update the record
							JSONObject oSendedItemArray = new JSONObject();
							
							if (oRemainingPendingInfo != null)
								oSendedItemArray = oRemainingPendingInfo;
							
							DateTimeFormatter oFormatter = DateTimeFormat.forPattern("yyyyMMddHHmmssSSS");
							String sCurrentTimeStamp = oFormatter.print(AppGlobal.getCurrentTime(false));
							oSendedItemArray.put(sCurrentTimeStamp, oInputPendingQty.toPlainString());
							
							JSONObject oUpdatedPendingInfo = new JSONObject();
							oUpdatedPendingInfo.put("count", oRemainingPendingQty.subtract(oInputPendingQty).toPlainString());
							oUpdatedPendingInfo.put("itemList", oSendedItemArray);
							
							// Record the itemId and quantity to print
							HashMap<String, String> oQtyRecord = new HashMap<>();
							oQtyRecord.put("qty", oInputPendingQty.toPlainString());
							oQtyRecord.put("itemIdSuffix", sCurrentTimeStamp);
							
							oNewItemQuantityPair.put(oFuncCheckItem.getCheckItem().getCitmId(), oQtyRecord);
							
							// Update extra info
							if (oFuncCheckItem.isExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_ITEM, PosCheckExtraInfo.VARIABLE_REMAINING_PENDING_INFO, 0))
								oFuncCheckItem.updateCountForPartialSentPendingItem(oRemainingPendingQty.subtract(oInputPendingQty), oSendedItemArray, oDeliveredPendingInfo);
							else
								oFuncCheckItem.addExtraInfo(PosCheckExtraInfo.BY_ITEM, PosCheckExtraInfo.SECTION_ITEM, PosCheckExtraInfo.VARIABLE_REMAINING_PENDING_INFO, oUpdatedPendingInfo.toString());

							// Add log to action log list
							AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.print_pending_item_with_quantity.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId() , AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), "", oFuncCheckItem.getCheckItem().getCitmId(), "", "", "Print Pending With Quantity");
							
							bIsPendingFullSend = false;
						}
					}
					
					if (bIsPendingFullSend) {
						// Record the itemId and quantity to print
						HashMap<String, String> oQtyRecord = new HashMap<>();
						oQtyRecord.put("qty", oRemainingPendingQty.toPlainString());
						
						oFuncCheckItem.setPendingItem(PosCheckItem.PENDING_NORMAL_ITEM);
						oFuncCheckItem.calculateCookingTime(AppGlobal.getCurrentTime(false));
						
						// Update extra info if exist
						if(oFuncCheckItem.isPartialPendingItem()) {
							DateTimeFormatter oFormatter = DateTimeFormat.forPattern("yyyyMMddHHmmssSSS");
							String sCurrentTimeStamp = oFormatter.print(AppGlobal.getCurrentTime(false));
							
							JSONObject oSendedItemArray = new JSONObject();
							if (oRemainingPendingInfo != null)
								oSendedItemArray = oRemainingPendingInfo;
							
							oSendedItemArray.put(sCurrentTimeStamp, oRemainingPendingQty.toPlainString());

							oFuncCheckItem.updateCountForPartialSentPendingItem(BigDecimal.ZERO, oSendedItemArray, oDeliveredPendingInfo);
						
							oQtyRecord.put("itemIdSuffix", sCurrentTimeStamp);
						}
						
						oNewItemQuantityPair.put(oFuncCheckItem.getCheckItem().getCitmId(), oQtyRecord);
						
						// Add log to action log list
						AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.print_pending_item.name(), PosActionLog.ACTION_RESULT_SUCCESS, this.getTableNoWithExtensionForDisplay(), AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId() , AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), AppGlobal.g_oFuncStation.get().getStationId(), m_oCheck.getCheckId(), "", oFuncCheckItem.getCheckItem().getCitmId(), "", "", "Print Pending");
					}
				}
			}
		} catch (JSONException e) {
			AppGlobal.stackToString(e);
		}
		
		if(oNewItemQuantityPair.isEmpty())
			return;
		
		//handle action log
		AppGlobal.g_oActionLog.get().handleActionLog(false);
		
		// *****************************************************************
		// Create thread to print kitchen slip
		AppThreadManager oAppThreadManager = new AppThreadManager();
		
		// Add the method to the thread manager
		// Thread 1 : Print kitchen slip
		// Create parameter array
		Object[] oParameters = new Object[4];
		oParameters[0] = m_oCheck.getCheckId();
		oParameters[1] = oNewItemQuantityPair;
		oParameters[2] = AppGlobal.g_oCurrentLangIndex.get();
		oParameters[3] = true;
		oAppThreadManager.addThread(1, m_oCheck, "printKitchenSlip", oParameters);
		
		// Add the method to the thread manager
		// Thread 2 : Update check
		// Create parameter array
		Object[] oParameters2 = new Object[17];
		oParameters2[0] = false;
		oParameters2[1] = true;
		oParameters2[2] = PosCheckItem.SEND_MODE_OLD_ITEM;
		oParameters2[3] = 0;
		oParameters2[4] = false;
		oParameters2[5] = 2;
		oParameters2[6] = 0;
		oParameters2[7] = 0;
		oParameters2[8] = "";
		oParameters2[9] = false;
		oParameters2[10] = false;
		oParameters2[11] = false;
		oParameters2[12] = false;
		oParameters2[13] = 0;
		oParameters2[14] = 0;
		oParameters2[15] = false;
		oParameters2[16] = false;
		oAppThreadManager.addThread(2, this, "updateCheck", oParameters2);
		
		// Run the thread
		oAppThreadManager.runThread();
		oAppThreadManager.waitForThread();
	}
	
	public boolean havePendingItems() {
		boolean bHavePendingItems = false;
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oCheckItemList:oFuncCheckParty.getWholeItemList()){
				for(FuncCheckItem oFuncCheckItem:oCheckItemList) {
					if(oFuncCheckItem.isPendingItem()) {
						bHavePendingItems = true;
						return bHavePendingItems;
					}
				}
			}
		}
		
		return bHavePendingItems;
	}
	
	// Set member
	public void saveMembershipInterfaceExtraInfo(boolean bAddUpdate, ArrayList<HashMap<String, String>> oCheckExtraInfos){
		DateTime modifiedLocTime = null;
		DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		
		for(int i=0; i<oCheckExtraInfos.size(); i++) {
			HashMap<String, String> oCheckExtraInfo = oCheckExtraInfos.get(i);

			if(bAddUpdate) {
				if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, oCheckExtraInfo.get("variable"), 0))
					updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, oCheckExtraInfo.get("variable"), Integer.parseInt(oCheckExtraInfo.get("index")), oCheckExtraInfo.get("value"));
				else
					addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, oCheckExtraInfo.get("variable"), Integer.parseInt(oCheckExtraInfo.get("index")), oCheckExtraInfo.get("value"));
			}else {
				removeCheckExtraInfoFromList(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, oCheckExtraInfo.get("variable"));
			}
		}
		
		if(this.isOldCheck()) {
			modifiedLocTime = AppGlobal.getCurrentTime(false);
			m_oCheck.setModifiedLocTime(modifiedLocTime);
			m_oCheck.setModifiedTime(formatter.print(AppGlobal.convertTimeToUTC(modifiedLocTime)));
			m_oCheck.setModifiedUesrId(AppGlobal.g_oFuncUser.get().getUserId());
			m_oCheck.setModifiedStationId(AppGlobal.g_oFuncStation.get().getStationId());
			if (updateCheck(false, false, PosCheckItem.SEND_MODE_NEW_ITEM, 0, false, 0, 0, 0, "", false, false, false, false, 0, 0, false, false).equals(PosCheck.API_RESULT_SUCCESS)){
				// Remove temporary check extra info for audit log in cache
				if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_SET_MEMBER, 0))
					removeCheckExtraInfoFromList(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE,  PosCheckExtraInfo.VARIABLE_SET_MEMBER);
			}
		}
	}
	
	public void saveMembershipInterfaceExtraInfoByCheck(boolean bAddUpdate, ArrayList<HashMap<String, String>> oCheckExtraInfos){
		DateTime modifiedLocTime = null;
		DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		boolean bNeedUpdate = false;
		for(int i=0; i<oCheckExtraInfos.size(); i++) {
			HashMap<String, String> oCheckExtraInfo = oCheckExtraInfos.get(i);

			if(bAddUpdate) {
				if(this.getCheckExtraInfoValueListWithIndexBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, oCheckExtraInfo.get("variable")) != null){
					HashMap<Integer, String> oMemberInfoList = this.getCheckExtraInfoValueListWithIndexBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, oCheckExtraInfo.get("variable"));
					if(oMemberInfoList.size() == 0)
						bNeedUpdate = false;
					else
						bNeedUpdate = true;
				}
				
				if(bNeedUpdate)
					updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, oCheckExtraInfo.get("variable"), Integer.parseInt(oCheckExtraInfo.get("index")), oCheckExtraInfo.get("value"));
				else
					addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, oCheckExtraInfo.get("variable"), Integer.parseInt(oCheckExtraInfo.get("index")), oCheckExtraInfo.get("value"));
			}else {
				removeCheckExtraInfoFromList(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, oCheckExtraInfo.get("variable"));
			}
		}
		
		if(this.isOldCheck()) {
			modifiedLocTime = AppGlobal.getCurrentTime(false);
			m_oCheck.setModifiedLocTime(modifiedLocTime);
			m_oCheck.setModifiedTime(formatter.print(AppGlobal.convertTimeToUTC(modifiedLocTime)));
			m_oCheck.setModifiedUesrId(AppGlobal.g_oFuncUser.get().getUserId());
			m_oCheck.setModifiedStationId(AppGlobal.g_oFuncStation.get().getStationId());
			if (updateCheck(false, false, PosCheckItem.SEND_MODE_NEW_ITEM, 0, false, 0, 0, 0, "", false, false, false, false, 0, 0, false, false).equals(PosCheck.API_RESULT_SUCCESS)){
				// Remove temporary check extra info for audit log in cache
				if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_SET_MEMBER, 0))
					removeCheckExtraInfoFromList(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE,  PosCheckExtraInfo.VARIABLE_SET_MEMBER);
			}
		}
	}
	
	// Set member
	public void saveMembershipInterface2700ExtraInfo(boolean bAddUpdate, ArrayList<HashMap<String, String>> oCheckExtraInfos){
		DateTime modifiedLocTime = null;
		DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		
		for(int i=0; i<oCheckExtraInfos.size(); i++) {
			HashMap<String, String> oCheckExtraInfo = oCheckExtraInfos.get(i);

			if(bAddUpdate) {
				if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, oCheckExtraInfo.get("variable"), Integer.parseInt(oCheckExtraInfo.get("index"))))
					updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, oCheckExtraInfo.get("variable"), Integer.parseInt(oCheckExtraInfo.get("index")), oCheckExtraInfo.get("value"));
				else
					addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, oCheckExtraInfo.get("variable"), Integer.parseInt(oCheckExtraInfo.get("index")), oCheckExtraInfo.get("value"));
			}else {
				removeCheckExtraInfoFromList(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, oCheckExtraInfo.get("variable"));
			}
		}
		
		if(this.isOldCheck()) {
			modifiedLocTime = AppGlobal.getCurrentTime(false);
			m_oCheck.setModifiedLocTime(modifiedLocTime);
			m_oCheck.setModifiedTime(formatter.print(AppGlobal.convertTimeToUTC(modifiedLocTime)));
			m_oCheck.setModifiedUesrId(AppGlobal.g_oFuncUser.get().getUserId());
			m_oCheck.setModifiedStationId(AppGlobal.g_oFuncStation.get().getStationId());
			updateCheck(false, false, PosCheckItem.SEND_MODE_NEW_ITEM, 0, false, 0, 0, 0, "", false, false, false, false, 0, 0, false, false);
		}
	}
	
	// Set member
	public void saveGamingInterfaceExtraInfo(boolean bAddUpdate, ArrayList<HashMap<String, String>> oCheckExtraInfos){
		DateTime modifiedLocTime = null;
		DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		
		for(int i=0; i<oCheckExtraInfos.size(); i++) {
			HashMap<String, String> oCheckExtraInfo = oCheckExtraInfos.get(i);

			if(bAddUpdate) {
				if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_GAMING_INTERFACE, oCheckExtraInfo.get("variable"), 0))
					updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_GAMING_INTERFACE, oCheckExtraInfo.get("variable"), Integer.parseInt(oCheckExtraInfo.get("index")), oCheckExtraInfo.get("value"));
				else
					addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_GAMING_INTERFACE, oCheckExtraInfo.get("variable"), Integer.parseInt(oCheckExtraInfo.get("index")), oCheckExtraInfo.get("value"));
			}else {
				removeCheckExtraInfoFromList(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_GAMING_INTERFACE, oCheckExtraInfo.get("variable"));
			}
		}
		
		if(this.isOldCheck()) {
			modifiedLocTime = AppGlobal.getCurrentTime(false);
			m_oCheck.setModifiedLocTime(modifiedLocTime);
			m_oCheck.setModifiedTime(formatter.print(AppGlobal.convertTimeToUTC(modifiedLocTime)));
			m_oCheck.setModifiedUesrId(AppGlobal.g_oFuncUser.get().getUserId());
			m_oCheck.setModifiedStationId(AppGlobal.g_oFuncStation.get().getStationId());
			if (updateCheck(false, false, PosCheckItem.SEND_MODE_NEW_ITEM, 0, false, 0, 0, 0, "", false, false, false, false, 0, 0, false, false).equals(PosCheck.API_RESULT_SUCCESS)){
				// Remove temporary check extra info for audit log in cache
				if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_GAMING_INTERFACE, PosCheckExtraInfo.VARIABLE_SET_MEMBER, 0))
					removeCheckExtraInfoFromList(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_GAMING_INTERFACE,  PosCheckExtraInfo.VARIABLE_SET_MEMBER);
			}
		}
	}
	
	public boolean changeOrderedItemPriceLevel(List<HashMap<String, Integer>> oSelectedItems, int iTargetPriceLevel, boolean bChangePriceLevelManually){
		boolean bHaveUpdate = false;
		BigDecimal dPrice = BigDecimal.ZERO;
		
		for(HashMap<String, Integer> oSelectedItem:oSelectedItems) {
			FuncCheckItem oSelectedFuncCheckItem = this.getCheckItem(oSelectedItem.get("partySeq"), oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
			
			if(oSelectedFuncCheckItem.getCheckItem().getPriceLevel() == iTargetPriceLevel)
				continue;
			
			bHaveUpdate = true;
			
			// Set the manual change price level flag
			if (bChangePriceLevelManually)
				oSelectedFuncCheckItem.setChangePriceLevelManually(true);
			// ask input for item with target price level is open price
			dPrice = askOpenItemPriceAfterTogglingPriceLevel(oSelectedFuncCheckItem, iTargetPriceLevel);
			
			// Set item to target price level
			oSelectedFuncCheckItem.changePriceLevel(iTargetPriceLevel, false);
			if (dPrice.compareTo(BigDecimal.ZERO) > 0)
				oSelectedFuncCheckItem.getCheckItem().setPrice(dPrice);
			
			//for child item
			if(oSelectedFuncCheckItem.hasChildItem()) {
				for(FuncCheckItem oChildCheckItem:oSelectedFuncCheckItem.getChildItemList()) {
					if (bChangePriceLevelManually)
						oChildCheckItem.setChangePriceLevelManually(true);
					oChildCheckItem.changePriceLevel(iTargetPriceLevel, false);
					
					//for child modifier item
					if(oChildCheckItem.hasModifier()) {
						for(FuncCheckItem oChildModifierCheckItem:oChildCheckItem.getModifierList()){
							if (bChangePriceLevelManually)
								oChildModifierCheckItem.setChangePriceLevelManually(true);
							oChildModifierCheckItem.changePriceLevel(iTargetPriceLevel, false);
						}
					}
					
					// Re-calculate all my modifiers' price
					oChildCheckItem.setAllModifiersPrice(true);
					
					// Set modified flag if old item
					if(oChildCheckItem.isOldItem()){
						oChildCheckItem.getCheckItem().setModified(true);
					}
				}
			}
			
			//for modifier
			if(oSelectedFuncCheckItem.hasModifier()) {
				for(FuncCheckItem oModifierCheckItem:oSelectedFuncCheckItem.getModifierList()){
					if (bChangePriceLevelManually)
						oModifierCheckItem.setChangePriceLevelManually(true);
					// ask input for item with target price level is open price
					dPrice = askOpenItemPriceAfterTogglingPriceLevel(oModifierCheckItem, iTargetPriceLevel);
					oModifierCheckItem.changePriceLevel(iTargetPriceLevel, false);
					if (dPrice.compareTo(BigDecimal.ZERO) > 0) {
						oModifierCheckItem.getCheckItem().setPrice(dPrice);
						if(oModifierCheckItem.isOpenModifier())
							oModifierCheckItem.setOpenModiPriceRate(dPrice);
					}
				}
			}
			
			// Re-calculate all my modifiers' price
			oSelectedFuncCheckItem.setAllModifiersPrice(true);
			
			// Set modified flag if old item
			if(oSelectedFuncCheckItem.isOldItem()){
				oSelectedFuncCheckItem.getCheckItem().setModified(true);
			}
		}
		
		return bHaveUpdate;
	}
	
	// ask input for item with target price level is open price
	private BigDecimal askOpenItemPriceAfterTogglingPriceLevel(FuncCheckItem oSelectedFuncCheckItem, int iTargetPriceLevel){
		BigDecimal dPrice = BigDecimal.ZERO;
		
		// Check if open price after changing price level for 3 types: basic, child & modifier items
		if (oSelectedFuncCheckItem.getCheckItem().isBasicItem() && 
						(oSelectedFuncCheckItem.getMenuItem().isBasicForceOpenPrice() || oSelectedFuncCheckItem.getMenuItem().getBasicPriceByPriceLevel(iTargetPriceLevel) == null)
				|| (oSelectedFuncCheckItem.getCheckItem().isModifierItem() &&
						(oSelectedFuncCheckItem.getMenuItem().isModifierForceOpenPrice() || oSelectedFuncCheckItem.getMenuItem().getModifierPriceByPriceLevel(iTargetPriceLevel) == null))) {
			dPrice = oSelectedFuncCheckItem.getCheckItem().getPrice();
		} else {
			return dPrice;
		}
		
		if (dPrice == null)
			return BigDecimal.ZERO;
		
		while(true) {
			FormInputBox oFormInputBox = new FormInputBox(null);
			oFormInputBox.init();
			oFormInputBox.setTitle(AppGlobal.g_oLang.get()._("please_input_the_item_price"));
			oFormInputBox.setMessage(AppGlobal.g_oLang.get()._("open_price_item_after_changing_price_level")
					+ System.lineSeparator() + AppGlobal.g_oLang.get()._("item_name") + " : "
					+ oSelectedFuncCheckItem.getCheckItem().getName(AppGlobal.g_oCurrentLangIndex.get()));
			oFormInputBox.setKeyboardType(HeroActionProtocol.View.Attribute.KeyboardType.DECIMAL);
			oFormInputBox.setDefaultInputValue(dPrice.toPlainString());
			oFormInputBox.show();
			
			if(oFormInputBox.isUserCancel())
				break;
			
			if (oFormInputBox.getInputValue() != null && !oFormInputBox.getInputValue().isEmpty()) {
				try {
					dPrice = new BigDecimal(oFormInputBox.getInputValue());
					break;
				}catch(Exception e) {
					FormDialogBox oFormDialogBox = new FormDialogBox(AppGlobal.g_oLang.get()._("ok"), null);
					oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._("warning"));
					oFormDialogBox.setMessage(AppGlobal.g_oLang.get()._("invalid_input"));
					oFormDialogBox.show();
				}
			}else {
				FormDialogBox oFormDialogBox = new FormDialogBox(AppGlobal.g_oLang.get()._("ok"), null);
				oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._("warning"));
				oFormDialogBox.setMessage(AppGlobal.g_oLang.get()._("please_input_amount"));
				oFormDialogBox.show();
			}
		}
		
		return dPrice;
	}
	
	public void updatePMSExtraInfo(){
		if(this.isOldCheck()) {
			DateTime modifiedLocTime = AppGlobal.getCurrentTime(false);
			DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
			m_oCheck.setModifiedLocTime(modifiedLocTime);
			m_oCheck.setModifiedTime(formatter.print(AppGlobal.convertTimeToUTC(modifiedLocTime)));
			m_oCheck.setModifiedUesrId(AppGlobal.g_oFuncUser.get().getUserId());
			m_oCheck.setModifiedStationId(AppGlobal.g_oFuncStation.get().getStationId());
			updateCheck(false, false, PosCheckItem.SEND_MODE_NEW_ITEM, 0, false, 0, 0, 0, "", false, false, false, false, 0, 0, false, false).equals(PosCheck.API_RESULT_SUCCESS);
		}
	}
	
	// check have interface member
	public boolean haveInterfaceMember() {
		boolean bHaveInterfaceMember = false;
		String sInterfaceId = getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID);
		if(sInterfaceId == null || sInterfaceId.isEmpty())
			return bHaveInterfaceMember;
		
		List<PosInterfaceConfig> oPosInterfaceConfigs = AppGlobal.g_oPosInterfaceConfigList.get().getInterfaceConfigListByInterfaceType(InfInterface.TYPE_MEMBERSHIP_INTERFACE);
		for(PosInterfaceConfig oPosInterfaceConfig: oPosInterfaceConfigs) {
			if(oPosInterfaceConfig.getInterfaceId() == Integer.valueOf(sInterfaceId).intValue()) {
				String sMemberNumber = "";
				if(oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_GENERAL)){
					sMemberNumber = getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_ACCOUNT_NUMBER);
				}else if(oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ASPEN)){
					sMemberNumber = getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER);
				}
				else if(oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_GOLDEN_CIRCLE)) {
					sMemberNumber = getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER);
				}
				if(sMemberNumber == null || sMemberNumber.isEmpty())
					bHaveInterfaceMember = false;
				else
					bHaveInterfaceMember = true;
				break;
			}
		}
		
		return bHaveInterfaceMember;
	}

	// check include the membership interface or not
	public PosInterfaceConfig getCheckMembershipInterfaceConfig(String sVendor) {
		String sInterfaceId = getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID);
		if(sInterfaceId == null || sInterfaceId.isEmpty())
			return null;
		
		List<PosInterfaceConfig> oPosInterfaceConfigs = AppGlobal.g_oPosInterfaceConfigList.get().getInterfaceConfigListByInterfaceType(InfInterface.TYPE_MEMBERSHIP_INTERFACE);
		for(PosInterfaceConfig oPosInterfaceConfig: oPosInterfaceConfigs) {
			if(oPosInterfaceConfig.getInterfaceId() == Integer.valueOf(sInterfaceId).intValue()) {
				if(oPosInterfaceConfig.getInterfaceVendorKey().equals(sVendor))
					return oPosInterfaceConfig;
				else
					return null;
			}
		}
		
		return null;
	}
	
	// Void item post void request to SVC coupon interface
	private boolean voidSVCRedeemItemCoupon(FuncCheckItem oFuncCheckItem) {
		List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_MEMBERSHIP_INTERFACE);
		List<PosInterfaceConfig> oSvcPosInterfaceConfigList = new ArrayList<PosInterfaceConfig>();
		PosInterfaceConfig oPosInterfaceConfig = null;
		
		if(AppGlobal.isModuleSupport(AppGlobal.OPTIONAL_MODULE.pos_interface.name()) == false){
			return false;
		}
		
		if(oInterfaceConfigList.isEmpty()) {
			return false;
		}
		for(PosInterfaceConfig oConfig : oInterfaceConfigList) {
			if(oConfig.getInterfaceVendorKey().equals(InfVendor.KEY_LPS_SVC_COUPON))
				oSvcPosInterfaceConfigList.add(oConfig);
		}
				
		if(oSvcPosInterfaceConfigList.isEmpty()) {
			return false;
		}
		
		oPosInterfaceConfig = oSvcPosInterfaceConfigList.get(0);
		if (oPosInterfaceConfig != null) {
			FuncMembershipInterface oFuncMembershipInterface = new FuncMembershipInterface(oPosInterfaceConfig);
			return oFuncMembershipInterface.membershipVoidSVCRedeemPosting(this, oFuncCheckItem);
		}
		
		return false;
	}
	
	public void setLastPayAndTipsTotal() {
		m_dLastPayTotal = new BigDecimal(m_oCheck.getPaymentTotal().toPlainString());
		m_dLastTipsTotal = new BigDecimal(m_oCheck.getTipsTotal().toPlainString());
		return;
	}
	
	public void restoreLastPayAndTipsTotal() {
		m_oCheck.setPaymentTotal(new BigDecimal(m_dLastPayTotal.toPlainString()));
		m_oCheck.setTipsTotal(new BigDecimal(m_dLastTipsTotal.toPlainString()));
		return;
	}
	
	// Set section
	public void setSection(int iSection){
		m_oCheck.setSectId(iSection);
	}
	
	// Set custom type
	public void setCustomType(int iType){
		m_oCheck.setCustomTypeId(iType);
	}
	
	// Set check attribute
	public void setCheckAttribute(PosCheckAttribute oPosCheckAttribute) {
		m_oCheck.setCheckAttribute(oPosCheckAttribute);
	}
	
	// Set check gratuity
	public void setCheckGratuityList(boolean bMerge, List<PosCheckGratuity> oPosCheckGratuityList) {
		m_oCheck.setCheckGratuityList(bMerge, oPosCheckGratuityList);
	}
	
	// Add check gratuity to list
	public void addCheckGratuityToList(PosCheckGratuity oPosCheckGratuity) {
		m_oCheck.addCheckGratuityToList(oPosCheckGratuity);
	}
	
	// Set business period
	public void setBusinessPeriod(String sBusinessPeriodId){
		m_oCheck.setBusinessPeriod(sBusinessPeriodId);
	}
	
	// Set surcharge
	public void setSurcharge(BigDecimal dSurcharge){
		m_oCheck.setSurchargeTotal(dSurcharge);
	}
	
	public boolean hasReceiptUrl() {
		List<PosCheckExtraInfo> checkExtraInfoArrayList = m_oCheck.getCheckExtraInfoArrayList();
		for (PosCheckExtraInfo checkExtraInfo: checkExtraInfoArrayList) {
			if (checkExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_RECEIPT_URL)) {
				if (checkExtraInfo.getValue() != null && !checkExtraInfo.getValue().isEmpty())
					return true;
			}
		}
		return false;
	}
	
	//for tms interface checking
	public void setCurrentFunctionKey(String sFunctionKey){
		this.m_sCurrentFunctionKey = sFunctionKey;
	}
	
	// Get if allow continuous print
	public String getAllowContinuousPrint() {
		return m_sAllowContinuousPrint;
	}
	
	// Set if allow continuous print
	public void setAllowContinuousPrint(String sAllowContinuousPrint) {
		this.m_sAllowContinuousPrint = sAllowContinuousPrint;
	}

	public String transferCheckToTargetOutlet(int iStationId, int iTargetShopId, int iTargetOutletId, String sTargetTableNo, String sargetTableExtension, int iTargetSectionId, int iUserId) {
		// TODO Auto-generated method stub
		return m_oCheck.transferCheckToTargetOutlet(iStationId, iTargetShopId, iTargetOutletId, sTargetTableNo, sargetTableExtension, iTargetSectionId, iUserId);
	}
	
	public HashMap<String, Object> getCheckDetail(MenuItemCourseList oMenuItemCourseList) {
		HashMap<String, Object> oResultHashMap = new HashMap<String, Object>(), oTaxHashMap = null, oItemHashMap = null;
		HashMap<String, Object> oCourseHashMap = null, oModifyHashMap = null, oChildItemHashMap = null;
		HashMap<String, Object> oDiscountHashMap = null, oEmployeeHashMap = null, oPaymentHashMap = null;
		List<HashMap<String, Object>> oTaxHashMapList = null, oItemHashMapList = null, oModifyHashMapList = null;
		List<HashMap<String, Object>> oChildItemHashMapList = null, oDiscountHashMapList = null, oPaymentHashMapList = null;
		
		DateTime oCurrentDateTime = AppGlobal.getCurrentTime(false);
		DateTimeFormatter dateFormat = DateTimeFormat.forPattern("yyyyMMddHHmmss");
		String sDateTime = dateFormat.print(oCurrentDateTime);
		
		oResultHashMap.put("time", sDateTime);
		oResultHashMap.put("outletcode", AppGlobal.g_oFuncOutlet.get().getOutletCode());
		
		// Table information
		oResultHashMap.put("tableno", getTableNoWithExtensionForDisplay());
		String sTableName = "";
		if(AppGlobal.g_oFuncOutlet.get().isTableNameExist(getTableNo(), getTableExtension())){
			HashMap<String, String> oTableName = new HashMap<String, String>();
			oTableName = AppGlobal.g_oFuncOutlet.get().getTableNameInAllLang(getTableNo(), getTableExtension());
			sTableName = oTableName.get("tableName1");
		}
		oResultHashMap.put("tablename", sTableName);
		oResultHashMap.put("checkno", getCheckPrefixNo());
		oResultHashMap.put("cover", Integer.toString(m_oCheck.getGuests()));
		
		// Open employee's detail
		UserUser oUser = new UserUser();
		oUser.readByUserId(m_oCheck.getOpenUserId());
		oResultHashMap.put("openemployeecode", oUser.getNumber());
		oResultHashMap.put("openemployeename", oUser.getFirstName(1)+" "+oUser.getLastName(1));
		
		// Station Information
		if(AppGlobal.g_oFuncStation.get().getStationId() == m_oCheck.getOpenStatId())
			oResultHashMap.put("openstationcode", AppGlobal.g_oFuncStation.get().getCode());
		else {
			PosStation oPosStation = new PosStation();
			oPosStation.readById(m_oCheck.getOpenStatId());
			oResultHashMap.put("openstationcode", oPosStation.getCode());
		}
		
		// Check time information
		DateTimeFormatter fmt = DateTimeFormat.forPattern("HH:mm:ss");
		if(m_oCheck.getOpenLocTime() != null)
			oResultHashMap.put("opentime", fmt.print(m_oCheck.getOpenLocTime()));
		if(m_oCheck.getCloseLocTime() != null)
			oResultHashMap.put("closetime", fmt.print(m_oCheck.getCloseLocTime()));
		
		BigDecimal dServiceChargeTotal = getServiceChargeTotal();
		oResultHashMap.put("servicechargetotal", dServiceChargeTotal.toString());
		
		// Tax information
		oTaxHashMapList = new ArrayList<HashMap<String, Object>>();
		for(int i=1; i<=25; i++){
			if(getTaxTotal(i).compareTo(BigDecimal.ZERO) != 0){
				oTaxHashMap = new HashMap<String, Object>();
				oTaxHashMap.put("index", Integer.toString(i));
				oTaxHashMap.put("name", "Tax "+Integer.toString(i));
				oTaxHashMap.put("amount", m_oCheck.getTax(i).toString());
				oTaxHashMapList.add(oTaxHashMap);
			}
		}
		if(oTaxHashMapList.size() > 0)
			oResultHashMap.put("taxes", oTaxHashMapList);
		oResultHashMap.put("checktotal", getCheckTotal().toString());
		
		// Check Item information
		oItemHashMapList = new ArrayList<HashMap<String, Object>>();
		for(int i = 0; i <= AppGlobal.MAX_SEATS; i++) {
			for(FuncCheckItem oFuncCheckItem: getItemList(i)){
				oItemHashMap = new HashMap<String, Object>();
				oItemHashMap.put("code", oFuncCheckItem.getMenuItem().getCode());
				oItemHashMap.put("name", oFuncCheckItem.getItemDescriptionByIndex(1));
				oItemHashMap.put("qty", oFuncCheckItem.getCheckItem().getQty().toString());
				oItemHashMap.put("unitprice", oFuncCheckItem.getCheckItem().getPrice().toPlainString());
				oItemHashMap.put("total", oFuncCheckItem.getCheckItem().getRoundTotal().toPlainString());
				if(oFuncCheckItem.getCheckItem().getOrderingType().equals(PosCheckItem.ORDERING_TYPE_TAKEOUT))
					oItemHashMap.put("takeaway", "true");
				else if(oFuncCheckItem.getCheckItem().getOrderingType().equals(PosCheckItem.ORDERING_TYPE_FINE_DINING))
					oItemHashMap.put("takeaway", "false");
				oItemHashMap.put("seatnumber", Integer.toString(oFuncCheckItem.getCheckItem().getSeatNo()));
				
				// Item course information
				for(MenuItemCourse oMenuItemCourse: oMenuItemCourseList.getItemCourseList()){
					if(oMenuItemCourse.getIcouId() == oFuncCheckItem.getCheckItem().getCourseId()){
						oCourseHashMap = new HashMap<String, Object>();
						oCourseHashMap.put("code", oMenuItemCourse.getCode());
						oCourseHashMap.put("name", oMenuItemCourse.getName(1));
						oItemHashMap.put("course", oCourseHashMap);
						break;
					}
				}
				
				// Item Modify information
				oModifyHashMapList = new ArrayList<HashMap<String, Object>>();
				for(FuncCheckItem oFuncModifier: oFuncCheckItem.getModifierList()){
					oModifyHashMap = new HashMap<String, Object>();
					oModifyHashMap.put("code", oFuncModifier.getCheckItem().getCode());
					oModifyHashMap.put("name", oFuncModifier.getItemDescriptionByIndex(1));
					oModifyHashMap.put("qty", oFuncModifier.getCheckItem().getQty().toPlainString());
					oModifyHashMap.put("total", oFuncModifier.getCheckItem().getRoundTotal().toPlainString());
					oModifyHashMapList.add(oModifyHashMap);
				}
				if(oModifyHashMapList.size() > 0)
					oItemHashMap.put("modifiers", oModifyHashMapList);
			
				// Item child item information
				oChildItemHashMapList = new ArrayList<HashMap<String, Object>>();
				for(FuncCheckItem oFuncChildItem: oFuncCheckItem.getChildItemList()){
					oChildItemHashMap = new HashMap<String, Object>();
					oChildItemHashMap.put("code", oFuncChildItem.getCheckItem().getCode());
					oChildItemHashMap.put("name", oFuncChildItem.getItemDescriptionByIndex(1));
					oChildItemHashMap.put("qty", oFuncChildItem.getCheckItem().getQty().toPlainString());
					oChildItemHashMap.put("unitprice", oFuncChildItem.getCheckItem().getPrice().toPlainString());
					oChildItemHashMap.put("total", oFuncChildItem.getCheckItem().getRoundTotal());
					
					// Child Item Modify information
					oModifyHashMapList = new ArrayList<HashMap<String, Object>>();
					for(FuncCheckItem oFuncChildModifier:oFuncChildItem.getModifierList()){
						oModifyHashMap = new HashMap<String, Object>();
						oModifyHashMap.put("code", oFuncChildModifier.getCheckItem().getCode());
						oModifyHashMap.put("name", oFuncChildModifier.getItemDescriptionByIndex(1));
						oModifyHashMap.put("qty", oFuncChildModifier.getCheckItem().getQty().toPlainString());
						oModifyHashMap.put("total", oFuncChildModifier.getCheckItem().getRoundTotal().toPlainString());
						oModifyHashMapList.add(oModifyHashMap);
					}
					if(oModifyHashMapList.size() > 0)
						oChildItemHashMap.put("modifiers", oModifyHashMapList);
				
					oChildItemHashMapList.add(oChildItemHashMap);
				}
				if(oChildItemHashMapList.size() > 0)
					oItemHashMap.put("childitems", oChildItemHashMapList);
			
				// Item discount information
				oDiscountHashMapList = new ArrayList<HashMap<String, Object>>();
				for(PosCheckDiscount oItemDiscount: oFuncCheckItem.getItemDiscountList()){
					oDiscountHashMap = new HashMap<String, Object>();
					PosDiscountType oPosDiscountType = new PosDiscountType();
					oPosDiscountType.readById(oItemDiscount.getDtypId());
					oDiscountHashMap.put("code", oPosDiscountType.getCode());
					oDiscountHashMap.put("name", oItemDiscount.getName(1));
					oDiscountHashMap.put("amount", oItemDiscount.getRoundTotal());
					if(oItemDiscount.getMethod().equals(PosCheckDiscount.METHOD_FIX_AMOUNT_DISCOUNT_PER_ITEM) || oItemDiscount.getMethod().equals(PosCheckDiscount.METHOD_FIX_AMOUNT_DISCOUNT_PER_CHECK))
						oDiscountHashMap.put("type", "amount");
					else if (oItemDiscount.getMethod().equals(PosCheckDiscount.METHOD_PERCENTAGE_DISCOUNT)){
						oDiscountHashMap.put("type", "percentage");
						oDiscountHashMap.put("rate", oItemDiscount.getRate().toPlainString());
					}
					oDiscountHashMapList.add(oDiscountHashMap);
				}
				if(oDiscountHashMapList.size() > 0)
					oItemHashMap.put("discounts", oDiscountHashMapList);
			
				// Order information
				oEmployeeHashMap = new HashMap<String, Object>();
				oUser = new UserUser();
				oUser.readByUserId(oFuncCheckItem.getCheckItem().getOrderUserId());
				oEmployeeHashMap.put("code", oUser.getNumber());
				oEmployeeHashMap.put("name", oUser.getFirstName(1)+" "+oUser.getLastName(1));
				oItemHashMap.put("employee", oEmployeeHashMap);
				oItemHashMap.put("ordertime", oFuncCheckItem.getCheckItem().getOrderLocTime().toString("HH:mm:ss"));
			
				oItemHashMapList.add(oItemHashMap);
			}
		}
		if(oItemHashMapList.size() > 0)
			oResultHashMap.put("items", oItemHashMapList);
		
		//Check discount information
		oDiscountHashMapList = new ArrayList<HashMap<String, Object>>();
		for(FuncCheckParty oFuncCheckParty: m_oFuncCheckPartyList) {
			for(PosCheckDiscount oCheckDiscount : oFuncCheckParty.getPartyCheckDiscount()){
				oDiscountHashMap = new HashMap<String, Object>();
				PosDiscountType oPosDiscountType = new PosDiscountType();
				oPosDiscountType.readById(oCheckDiscount.getDtypId());
				oDiscountHashMap.put("code", oPosDiscountType.getCode());
				oDiscountHashMap.put("name", oCheckDiscount.getName(1));
				oDiscountHashMap.put("amount", oCheckDiscount.getRoundTotal());
				if(oCheckDiscount.getMethod().equals(PosCheckDiscount.METHOD_FIX_AMOUNT_DISCOUNT_PER_ITEM) || oCheckDiscount.getMethod().equals(PosCheckDiscount.METHOD_FIX_AMOUNT_DISCOUNT_PER_CHECK))
					oDiscountHashMap.put("type", "amount");
				else if (oCheckDiscount.getMethod().equals(PosCheckDiscount.METHOD_PERCENTAGE_DISCOUNT)){
					oDiscountHashMap.put("type", "percentage");
					oDiscountHashMap.put("rate", oCheckDiscount.getRate().toString());
				}
				oDiscountHashMapList.add(oDiscountHashMap);
			}
		}
		if(oDiscountHashMapList.size() > 0)
			oResultHashMap.put("discounts", oDiscountHashMapList);
	
		//Check payment information
		oPaymentHashMapList = new ArrayList<HashMap<String, Object>>();
		for(PosCheckPayment oCheckPayment: this.m_oCheckPaymentList){
			oPaymentHashMap = new HashMap<String, Object>();
			PosPaymentMethod oPaymentMethod = new PosPaymentMethod();
			oPaymentMethod.readPaymentMethodById(oCheckPayment.getPaymentMethodId());
			oPaymentHashMap.put("code", oPaymentMethod.getPaymentCode());
			oPaymentHashMap.put("name", oCheckPayment.getName(1));
			oPaymentHashMap.put("amount", oCheckPayment.getPayTotal());
			oPaymentHashMap.put("tips", oCheckPayment.getPayTips());
			oPaymentHashMapList.add(oPaymentHashMap);
		}
		if(oPaymentHashMapList.size() > 0)
			oResultHashMap.put("payments", oPaymentHashMapList);
		
		// Member information
		if(m_oCheck.getMemberId() > 0){
			oEmployeeHashMap = new HashMap<String, Object>();
			MemMember oMember = new MemMember();
			oMember.readById(m_oCheck.getMemberId());
			oEmployeeHashMap.put("number", oMember.getCardNumber());
			oEmployeeHashMap.put("name", oMember.getName());
			oResultHashMap.put("member", oEmployeeHashMap);
		}
		
		return oResultHashMap;
	}
	
	//get base total
	public BigDecimal getLoyaltyBaseTotal(){
		return m_dBaseTotal;
	}
	
	//set check discount business period
	public void setCheckDiscountBusinessPeriod(String sBusinessPeriod){
		for(PosCheckDiscount oCheckDiscount: this.getCurrentPartyAppliedCheckDiscount()) {
			oCheckDiscount.setBperId(sBusinessPeriod);
		}
	}
	
	//Loyalty SVC add value or issue card
	public boolean loyaltySvcAddValueOrIssueCard(boolean bVoid){
		int iLoyaltyInterfaceId = 0, iSVCInterfaceId = 0, iGiveXInterfaceId = 0;
		m_sErrorMessage = "";
		HashMap<String, String> oPostingInfo = null;
		boolean bNeedSendCheck = false;
		
		FuncLoyaltySvc oAssignedLoyaltySvc = new FuncLoyaltySvc();
		List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_LOYALTY_INTERFACE);
		if(!oInterfaceConfigList.isEmpty()) {
			for(PosInterfaceConfig oPosInterfaceConfig: oInterfaceConfigList) {
				if(oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_GM_LOYALTY)){
					iLoyaltyInterfaceId = oPosInterfaceConfig.getInterfaceId();
					break;
				}
			}
		}
		oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_LOYALTY_INTERFACE);
		if (!oInterfaceConfigList.isEmpty()) {
			for (PosInterfaceConfig oPosInterfaceConfig: oInterfaceConfigList) {
				if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_GM_LOYALTY_SVC)) {
					iSVCInterfaceId = oPosInterfaceConfig.getInterfaceId();
					break;
				} else if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_GIVEX)) {
					if(bVoid)
						return true;
					iGiveXInterfaceId = oPosInterfaceConfig.getInterfaceId();
					break;
				}
			}
		}
		if(iLoyaltyInterfaceId == 0 && iSVCInterfaceId == 0 && iGiveXInterfaceId == 0)
			return true;
		
		for (FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for (List<FuncCheckItem> oCheckItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oCheckItem: oCheckItemList) {
					oPostingInfo = new HashMap<String, String>();
					if(oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_INTERFACE_ID) == null)
						continue;
					
					int iItemIntfId = Integer.parseInt(oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_INTERFACE_ID));
					
					//skip if there is no svc card number
					if (iItemIntfId == 0 ||	( iItemIntfId != iLoyaltyInterfaceId && iItemIntfId != iSVCInterfaceId && iItemIntfId != iGiveXInterfaceId))
						continue;
					
					//load extra info
					if(iItemIntfId == iGiveXInterfaceId)
						oPostingInfo.put("interfaceId", Integer.toString(iGiveXInterfaceId));
					else
						oPostingInfo.put("interfaceId", Integer.toString(iLoyaltyInterfaceId));
					oPostingInfo.put("svcInterfaceId", Integer.toString(iSVCInterfaceId));
					oPostingInfo.put("outletId", Integer.toString(AppGlobal.g_oFuncOutlet.get().getOutletId()));
					oPostingInfo.put("outletCode", AppGlobal.g_oFuncOutlet.get().getOutletCode());
					oPostingInfo.put("sessionId", AppGlobal.g_oFuncStation.get().getLoyaltySessionId());
					oPostingInfo.put("svcSessionId", AppGlobal.g_oFuncStation.get().getLoyaltySessionId());
					
					if (iItemIntfId == iGiveXInterfaceId) {
						oPostingInfo.put("svcCardNumber", oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_CARD_NO));
						DateTime oCurrentTime = AppGlobal.getCurrentTime(false);
						DateTimeFormatter oFormatter = DateTimeFormat.forPattern("HHmmss");
						String sCurrntTimeStamp = oFormatter.print(AppGlobal.convertTimeToUTC(oCurrentTime));
						oPostingInfo.put("transactionCode", getCheckNo()+sCurrntTimeStamp);
					} else
						oPostingInfo.put("svcCardNumber", oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_SVC_CARD_NUMBER));
					
					if (oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER) != null)
						oPostingInfo.put("memberNumber", oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_MEMBER_NUMBER));
					
					if(m_oCheck.getOrderingMode().equals(PosCheck.ORDERING_MODE_FAST_FOOD) && !AppGlobal.g_oFuncOutlet.get().getBusinessDay().isCheckNumGeneratedByOutlet() && !this.isOldCheck())
						oPostingInfo.put("traceId", AppGlobal.g_oFuncStation.get().getNextCheckPrefixNumber(false));
					else
						oPostingInfo.put("traceId", this.getCheckPrefixNo());
					
					String sBusinessDateString = "";
					SimpleDateFormat timeDf = new SimpleDateFormat("HH:mm:ss");
					timeDf.setTimeZone(TimeZone.getTimeZone("UTC"));
					DateTimeFormatter df = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
					try {
						Timestamp currentTime = new Timestamp(System.currentTimeMillis());
						DateTime dtCreateTime = AppGlobal.convertTimeToLocal(df.withZoneUTC().parseDateTime(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getDateInString()+" "+timeDf.format(currentTime)));
						sBusinessDateString = df.print(dtCreateTime);
					} catch (Exception e) {
						e.printStackTrace();
						AppGlobal.stack2Log(e);
					}
					oPostingInfo.put("businessDate", sBusinessDateString);
					
					// For Give X
					if (iItemIntfId == iGiveXInterfaceId) {
						oPostingInfo.put("bonusAmount", oCheckItem.getNetItemTotal().toString());
					} else{
						if (!bVoid)
							oPostingInfo.put("bonusAmount", oCheckItem.getNetItemTotal().multiply(new BigDecimal("100.0")).toString());
						else
							oPostingInfo.put("bonusAmount", oCheckItem.getNetItemTotal().multiply(new BigDecimal("-100.0")).toString());
					}
					oPostingInfo.put("employeeId", AppGlobal.g_oFuncUser.get().getLoginId());
					if (oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_PASSWORD) != null)
						oPostingInfo.put("password", oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_PASSWORD));
					else
						oPostingInfo.put("password", "");
					boolean bIssueCard = false;
					if (oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_REMARK) != null) {
						oPostingInfo.put("remark", oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_REMARK));
						if (oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_REMARK).equals("IS"))
							bIssueCard = true;
					}
					if (oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_CREDIT_DATE) != null)
						oPostingInfo.put("credit_date", oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_CREDIT_DATE));
					if (oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_MEMBER_VALID_THROUGH) != null)
						oPostingInfo.put("memberValidThrough", oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_MEMBER_VALID_THROUGH));
					if (oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_SVC_VALID_THROUGH) != null)
						oPostingInfo.put("svcMemberValidThrough", oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_SVC_VALID_THROUGH));
					if (bIssueCard) {
						if (oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_ISSUE_DATE) != null)
							oPostingInfo.put("issue_date", oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_ISSUE_DATE));
						if (oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_CARD_ISSUE_DATE) != null)
							oPostingInfo.put("card_issue_dt", oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_CARD_ISSUE_DATE));
						if (oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_CARD_ISSUE_EMP_ID) != null)
							oPostingInfo.put("card_issue_emp_id", oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_CARD_ISSUE_EMP_ID));
						if (oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_CARD_SELLER) != null)
							oPostingInfo.put("card_seller", oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_CARD_SELLER));
						if (oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_CARD_BUYER_NAME) != null)
							oPostingInfo.put("card_buyer_name", oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_CARD_BUYER_NAME));
						if (oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_CARD_BUYER_PASSPORT_ID) != null)
							oPostingInfo.put("card_buyer_passport_id", oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_CARD_BUYER_PASSPORT_ID));
						if (oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_CARD_BUYER_CONTACT_NUMBER) != null)
							oPostingInfo.put("card_buyer_contact_number", oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_CARD_BUYER_CONTACT_NUMBER));
						if (oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_MEMBER_TYPE) != null)
							oPostingInfo.put("member_type", oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_MEMBER_TYPE));
						if (oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_ASSOC_MEMBER_NO) != null)
							oPostingInfo.put("assoc_member_no", oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_ASSOC_MEMBER_NO));
						if (oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_FIRST_SVC_NUMBER) != null)
							oPostingInfo.put("first_svc_number", oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_FIRST_SVC_NUMBER));
						if (oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_CARD_HISTORY) != null)
							oPostingInfo.put("card_history", oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_CARD_HISTORY));
						if (oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_SUB_MEMBER_TYPE) != null)
							oPostingInfo.put("sub_member_type", oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_SUB_MEMBER_TYPE));
					}
					
					if(!oAssignedLoyaltySvc.addValueOrIssueCard(oPostingInfo)){
						m_sErrorMessage = oAssignedLoyaltySvc.getLastErrorMessage();
						return false;
					} else {
						// For Give X
						if (iItemIntfId == iGiveXInterfaceId) {
							if(oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_POINTS_EARN) != null)
								oCheckItem.updateExtraInfoValue(PosCheckExtraInfo.BY_ITEM, PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_POINTS_EARN, oAssignedLoyaltySvc.getPointEarn().toString());
							else
								oCheckItem.addExtraInfo(PosCheckExtraInfo.BY_ITEM, PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_POINTS_EARN, oAssignedLoyaltySvc.getPointEarn().toString());
							
							if(oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_POINTS_BALANCE) != null)
								oCheckItem.updateExtraInfoValue(PosCheckExtraInfo.BY_ITEM, PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_POINTS_BALANCE, oAssignedLoyaltySvc.getSVCBalance().toString());
							else
								oCheckItem.addExtraInfo(PosCheckExtraInfo.BY_ITEM, PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_POINTS_BALANCE, oAssignedLoyaltySvc.getSVCBalance().toString());
							if(oAssignedLoyaltySvc.getTransReference() != null){
								String sAuthCode = oAssignedLoyaltySvc.getTransReference().split(":")[0];
								if(oCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_AUTH_CODE) != null)
									oCheckItem.updateExtraInfoValue(PosCheckExtraInfo.BY_ITEM, PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_AUTH_CODE, sAuthCode);
								else
									oCheckItem.addExtraInfo(PosCheckExtraInfo.BY_ITEM, PosCheckExtraInfo.SECTION_LOYALTY, PosCheckExtraInfo.VARIABLE_AUTH_CODE, sAuthCode);	
							}
							
							if (!bVoid && oCheckItem.isOldItem()) {
								// For old item, need send check to update item extra info
								bNeedSendCheck = true;
							}
						}
					}
				}
			}
		}
		
		if (bNeedSendCheck) {
			updateCheck(false, true, PosCheckItem.SEND_MODE_ALL_ITEM, 0, false, 1, 0, 0, "", false, false, false, false, 0, 0, false, false);
		}
		
		return false;
	}
	
	//Loyalty SVC payment
	public boolean loyaltySvcPayment(boolean bVoid, int iSVCInterfaceId, String sSVCCardNumber, BigDecimal dPayTotal, List<PosCheckExtraInfo> oPaymentExtraInfos){
		m_sErrorMessage = "";
		HashMap<String, String> oPostingInfo = null;
		FuncLoyaltySvc oFuncLoyaltySvc = new FuncLoyaltySvc();
		boolean bAllowAutoTopUp = false;
		
		if (iSVCInterfaceId <= 0)
			return true;
		//check loyalty session
		if(AppGlobal.g_oFuncStation.get().getLoyaltySessionId().isEmpty())
			return true;
		oPostingInfo = new HashMap<String, String>();
		//load extra info
		oPostingInfo.put("svcInterfaceId", Integer.toString(iSVCInterfaceId));
		oPostingInfo.put("outletId", Integer.toString(AppGlobal.g_oFuncOutlet.get().getOutletId()));
		oPostingInfo.put("outletCode", AppGlobal.g_oFuncOutlet.get().getOutletCode());
		oPostingInfo.put("svcSessionId", AppGlobal.g_oFuncStation.get().getLoyaltySessionId());
		oPostingInfo.put("svcCardNumber", sSVCCardNumber);
		
		if(m_oCheck.getOrderingMode().equals(PosCheck.ORDERING_MODE_FAST_FOOD) && !AppGlobal.g_oFuncOutlet.get().getBusinessDay().isCheckNumGeneratedByOutlet() && !this.isOldCheck())
			oPostingInfo.put("traceId", AppGlobal.g_oFuncStation.get().getNextCheckPrefixNumber(false));
		else
			oPostingInfo.put("traceId", this.getCheckPrefixNo());
		
		String sBussinessDateString = "";
		DateTime today = AppGlobal.getCurrentTime(false);
		DateTimeFormatter dt = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		sBussinessDateString = dt.print(today);
		
		oPostingInfo.put("businessDate", sBussinessDateString);
		if (!bVoid)
			oPostingInfo.put("bonusAmount", dPayTotal.multiply(new BigDecimal("-100")).setScale(0).toString());
		else
			oPostingInfo.put("bonusAmount", dPayTotal.multiply(new BigDecimal("100")).setScale(0).toString());
		oPostingInfo.put("employeeId", AppGlobal.g_oFuncUser.get().getLoginId());
		
		//Put the information for auto top up from ledger account
		if(!bVoid && oPaymentExtraInfos != null && !oPaymentExtraInfos.isEmpty()){
			JSONObject oTopUpInfomationJSON = null;
			for(PosCheckExtraInfo oPaymentExtraInfo : oPaymentExtraInfos){
				if(oPaymentExtraInfo.getVariable().equals(PosCheckExtraInfo.VARIABLE_AUTO_TOP_UP_INFORMATION)){
					try {
						oTopUpInfomationJSON = new JSONObject(oPaymentExtraInfo.getValue());
						bAllowAutoTopUp = true;
						break;
					} catch (JSONException e) {
						AppGlobal.stack2Log(e);
					}
				}
			}
			if(oTopUpInfomationJSON != null){
				try {
					if(oTopUpInfomationJSON.has("ledgerBalance") && oTopUpInfomationJSON.getString("ledgerBalance") != null)
						oPostingInfo.put("ledgerBonusAmount", oTopUpInfomationJSON.getString("ledgerBalance"));
					if(oTopUpInfomationJSON.has("ledgerNo") && oTopUpInfomationJSON.getString("ledgerNo") != null)
						oPostingInfo.put("ledgerNo", oTopUpInfomationJSON.getString("ledgerNo"));
					if(oTopUpInfomationJSON.has("cardBalance") && oTopUpInfomationJSON.getString("cardBalance") != null)
						oPostingInfo.put("cardBalance", oTopUpInfomationJSON.getString("cardBalance"));
					if(oTopUpInfomationJSON.has("topUpOutletCode") && oTopUpInfomationJSON.getString("topUpOutletCode") != null)
						oPostingInfo.put("topUpOutletCode", oTopUpInfomationJSON.getString("topUpOutletCode"));
					if(oTopUpInfomationJSON.has("maxAllowedAmount") && oTopUpInfomationJSON.getString("maxAllowedAmount") != null)
						oPostingInfo.put("maxAllowedAmount", oTopUpInfomationJSON.getString("maxAllowedAmount"));
				} catch (JSONException e) {
					AppGlobal.stack2Log(e);
				}
			}
		}
		
		if(!oFuncLoyaltySvc.svcPayment(oPostingInfo)){
			m_sErrorMessage = oFuncLoyaltySvc.getLastErrorMessage();
			return false;
		}
		
		if(bAllowAutoTopUp && oFuncLoyaltySvc.getAutoTopUpInformation() != null && !oFuncLoyaltySvc.getAutoTopUpInformation().isEmpty()){
			if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_LOYALTY_SVC, PosCheckExtraInfo.VARIABLE_AUTO_TOP_UP_INFORMATION, 0)){
				try {
					JSONArray oExistAutoTopUpJSONArray = new JSONArray();
					if(!this.getCheckExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY_SVC, PosCheckExtraInfo.VARIABLE_AUTO_TOP_UP_INFORMATION, 0).isEmpty()){
						oExistAutoTopUpJSONArray = new JSONArray(this.getCheckExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_LOYALTY_SVC, PosCheckExtraInfo.VARIABLE_AUTO_TOP_UP_INFORMATION, 0));
					}
					JSONArray oAutoTopUpJSONArray = new JSONArray(oFuncLoyaltySvc.getAutoTopUpInformation());
					int iExistAutoTopUpJSONArrayLength = oExistAutoTopUpJSONArray.length();
					
					for(int iJSONindex = 0 ; iJSONindex < oAutoTopUpJSONArray.length() ; iJSONindex++){
						JSONObject oAutoTopUpJSONObject = oAutoTopUpJSONArray.optJSONObject(iJSONindex);
						if(oAutoTopUpJSONObject.has("seq")){
							oAutoTopUpJSONObject.put("seq", iExistAutoTopUpJSONArrayLength + iJSONindex + 1);
							oExistAutoTopUpJSONArray.put(oAutoTopUpJSONObject);
						}
					}
					
					updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_LOYALTY_SVC, PosCheckExtraInfo.VARIABLE_AUTO_TOP_UP_INFORMATION, 0, oExistAutoTopUpJSONArray.toString());
				} catch (JSONException e) {
					AppGlobal.stack2Log(e);
				}
			} else 
				addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_LOYALTY_SVC, PosCheckExtraInfo.VARIABLE_AUTO_TOP_UP_INFORMATION, 0, oFuncLoyaltySvc.getAutoTopUpInformation());
		}
		m_dLoyaltySVCRemainingBalance = oFuncLoyaltySvc.getcheckBalanceBonusBalance();
		
		return false;
	}
	
	// reverse the transaction of auto top-up of loyalty card and loyalty ledger account for release payment
	public boolean loyaltySvcReverseAutoTopUpAndDeduction() {
		int iLoyaltyInterfaceId = 0, iSVCInterfaceId = 0;
		HashMap<String, String> oPostingInfo = null;
		
		FuncLoyaltySvc oAssignedLoyaltySvc = new FuncLoyaltySvc();
		List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_LOYALTY_INTERFACE);
		if(!oInterfaceConfigList.isEmpty()) {
			for(PosInterfaceConfig oPosInterfaceConfig: oInterfaceConfigList) {
				if(oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_GM_LOYALTY)){
					iLoyaltyInterfaceId = oPosInterfaceConfig.getInterfaceId();
					continue;
				}
				if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_GM_LOYALTY_SVC)) {
					iSVCInterfaceId = oPosInterfaceConfig.getInterfaceId();
					continue;
				}
			}
		}
		
		if(iLoyaltyInterfaceId == 0 && iSVCInterfaceId == 0)
			return true;
		
		// get the auto top up information for reversal top-up and deduction transaction
		if (!this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_LOYALTY_SVC, PosCheckExtraInfo.VARIABLE_AUTO_TOP_UP_INFORMATION).isEmpty()) {
			String sAutoTopUpInformation = this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_LOYALTY_SVC, PosCheckExtraInfo.VARIABLE_AUTO_TOP_UP_INFORMATION);
			
			String sLoyaltyTopUpOutletCode = "";
			if(this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_LOYALTY_SVC, PosCheckExtraInfo.VARIABLE_AUTO_TOP_UP_CARD_BALANCE) != null && 
					!this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_LOYALTY_SVC, PosCheckExtraInfo.VARIABLE_AUTO_TOP_UP_CARD_BALANCE).isEmpty())
				sLoyaltyTopUpOutletCode = this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_LOYALTY_SVC, PosCheckExtraInfo.VARIABLE_AUTO_TOP_UP_CARD_BALANCE);
			else{
				AppGlobal.writeErrorLog(AppGlobal.class.getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), AppGlobal.g_oFuncStation.get().getStationId()+"", "", "Missing extra info (VARIABLE_AUTO_TOP_UP_CARD_BALANCE)");
				return false;
				}
			oPostingInfo = new HashMap<String, String>();
			oPostingInfo.put("interfaceId", Integer.toString(iSVCInterfaceId));
			oPostingInfo.put("svcInterfaceId", Integer.toString(iSVCInterfaceId));
			oPostingInfo.put("outletId", Integer.toString(AppGlobal.g_oFuncOutlet.get().getOutletId()));
			oPostingInfo.put("outletCode", AppGlobal.g_oFuncOutlet.get().getOutletCode());
			oPostingInfo.put("sessionId", AppGlobal.g_oFuncStation.get().getLoyaltySessionId());
			oPostingInfo.put("svcSessionId", AppGlobal.g_oFuncStation.get().getLoyaltySessionId());
			oPostingInfo.put("traceId", this.getCheckPrefixNo());
			
			String sBusinessDateString = "";
			SimpleDateFormat timeDf = new SimpleDateFormat("HH:mm:ss");
			timeDf.setTimeZone(TimeZone.getTimeZone("UTC"));
			DateTimeFormatter df = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
			try {
				Timestamp currentTime = new Timestamp(System.currentTimeMillis());
				DateTime dtCreateTime = AppGlobal.convertTimeToLocal(df.withZoneUTC().parseDateTime(AppGlobal.g_oFuncOutlet.get().getBusinessDay().getDateInString()+" "+timeDf.format(currentTime)));
				sBusinessDateString = df.print(dtCreateTime);
			} catch (Exception e) {
				e.printStackTrace();
				AppGlobal.stack2Log(e);
			}
			oPostingInfo.put("businessDate", sBusinessDateString);
			oPostingInfo.put("employeeId", AppGlobal.g_oFuncUser.get().getLoginId());
			oPostingInfo.put("autoTopUpInformation", sAutoTopUpInformation);
			oPostingInfo.put("topUpOutletCode", sLoyaltyTopUpOutletCode);
			
			if(!oAssignedLoyaltySvc.reverseAutoTopUpAndDeduction(oPostingInfo)){
				m_sErrorMessage = oAssignedLoyaltySvc.getLastErrorMessage();
				return false;
			}
		}
		return true;
	}
	
	// Return fail loyalty redeem benefit list
	public List<HashMap<String, HashMap<String, String>>> getFailRedeemBenefitList(){
		return m_oFailRedeemBenefitList;
	}
	
	// Return largest item sequence number for kitchen monitor
	public int getLargestItemSequenceNumber() {
		int iLastestSequence = 0;
		//get largest sequence number
		for(HashMap<String, Integer> oItemInfo: this.getSectionItemIndexForCurrentOrderedItem()) {
			int iPartySeq = oItemInfo.get("partySeq");
			int iSeatNo = oItemInfo.get("sectionId");
			int iItemIndex = oItemInfo.get("itemIndex"); 
			
			FuncCheckItem oFuncCheckItem = this.getCheckItem(iPartySeq, iSeatNo, iItemIndex);
			if(oFuncCheckItem.isOldItem()){
				String sSequence = oFuncCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_KITCHEN_MONITOR, PosCheckExtraInfo.VARIABLE_DISPLAY_SEQUENCE);
				int iLastModifierSequence = 0;
				//check modifier sequence
				if(oFuncCheckItem.hasModifier()){
					for(FuncCheckItem oModifier : oFuncCheckItem.getModifierList()){
						String sModifierSequence = oModifier.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_KITCHEN_MONITOR, PosCheckExtraInfo.VARIABLE_DISPLAY_SEQUENCE);
						if(sModifierSequence != null){
							int iModifierSequence = Integer.parseInt(sModifierSequence);
							if(iLastModifierSequence < iModifierSequence)
								iLastModifierSequence = iModifierSequence;
						}
					}
				}
				
				//check pantry message sequence
				int iLastPantyMessageSequence = 0;
				if(oFuncCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_ITEM, PosCheckExtraInfo.VARIABLE_PANTRY_MESSAGE) != null 
						 && !oFuncCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_ITEM, PosCheckExtraInfo.VARIABLE_PANTRY_MESSAGE).isEmpty()) {
					try {
						JSONArray oPantryMessageJSONArray = new JSONArray(oFuncCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_ITEM, PosCheckExtraInfo.VARIABLE_PANTRY_MESSAGE));
						for (int i = 0; i < oPantryMessageJSONArray.length(); i++) {
							JSONObject oPantryMessageObject = oPantryMessageJSONArray.getJSONObject(i);
							String sPantryMessageSequence = oPantryMessageObject.optString("seq");
							if(!sPantryMessageSequence.isEmpty()) {
								int iPantryMessageSequence = Integer.parseInt(sPantryMessageSequence);
								if(iLastPantyMessageSequence < iPantryMessageSequence)
									iLastPantyMessageSequence = iPantryMessageSequence;
							}
						}
					} catch (JSONException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				
				if(sSequence != null){
					int iSequence = Integer.parseInt(sSequence);
					int iMaxSequence = Math.max(Math.max(iLastModifierSequence, iLastPantyMessageSequence), iSequence);
					
					if(iLastestSequence < iMaxSequence)
						iLastestSequence = iMaxSequence;
				}
			}
		}
		
		return iLastestSequence;
	}
	
	// For portal station, check whether having same sending content is handling.
	// If there is same sending content, add the open check time for 1s
	public String portalSendCheckHandling(boolean bUpdate, int iOutletId, int iShopId, String sCurrentBdayId, boolean bWithItems, List<PosCheckParty> oCheckPartyList, int iSendMode, int iSaveCheckType, PosOutletTable oOutletTable, PosCheckTable oCheckTable, int iGetUpdateItems, int iActionUserId, int iActionStationId, int iReceiptPrtqId, int iReceiptFormatId, String sSplitMergeCheckId, boolean bWithPayments, ArrayList<PosCheckPayment> oCheckPaymentList, boolean bContructWithAllItemFields, String sChkIdCacheKey) {
		String sSendCheckContent = "";
		
		//Remove timeout request form list
		AppGlobal.removeTimeoutProtalHandlingJob();
		
		if(!AppGlobal.g_oFuncStation.get().isPortalStation())
			return sSendCheckContent;
		
		boolean bBreakLoop = true;
		DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		do {
			JSONObject sSendingContentJSON = m_oCheck.constructCheckDuplicateJSON();
			
			bBreakLoop = AppGlobal.addProtalHandlingJob(sSendingContentJSON.toString());
			
			if(!bBreakLoop) {
				DateTime oTempLocTime = m_oCheck.getOpenLocTime().plusSeconds(1);
				m_oCheck.setOpenLocTime(oTempLocTime);
				m_oCheck.setOpenTime(formatter.print(AppGlobal.convertTimeToUTC(oTempLocTime)));
				AppGlobal.writeActionLog(AppGlobal.g_oFuncStation.get().getStationId() + "", AppGlobal.g_oFuncUser.get().getUserId() + "", "Existing handling count:"+(AppGlobal.getProtalHandlingJobCount()+"")+", Add 1s for duplication request:"+sSendingContentJSON.toString());
			}else
				sSendCheckContent = sSendingContentJSON.toString();
		}while(!bBreakLoop);
		
		return sSendCheckContent;
	}
	
	//do membership voucher redemption for all check discount and item discount
	public boolean doMembershipVoucherRedeem(FuncMembershipInterface oFuncMembershipInterface) {
		boolean bPostSuccess = true;
		
		//check for all check discount
		for(PosCheckDiscount oCheckDiscount: this.getCurrentPartyAppliedCheckDiscount()) {
			String sCardNo = "", sReferenceNo = "", sVoucherValue = "", sVoucherType = "", sMemberNo = "", sTraceId = "";
			int iInterfaceId = 0;
			
			if(oCheckDiscount.getCheckExtraInfoValueBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID).isEmpty())
				continue;
			
			iInterfaceId = Integer.parseInt(oCheckDiscount.getCheckExtraInfoValueBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID));
			if(iInterfaceId != oFuncMembershipInterface.getMembershipInterface().getInterfaceId())
				continue;
			sCardNo = oCheckDiscount.getCheckExtraInfoValueBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_CARD_NO);
			sReferenceNo = oCheckDiscount.getCheckExtraInfoValueBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_VOUCHER_NUMBER);
			sVoucherValue = oCheckDiscount.getCheckExtraInfoValueBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_VOUCHER_VALUE);
			sVoucherType = oCheckDiscount.getCheckExtraInfoValueBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_VOUCHER_TYPE);
			
			HashMap<String, String> oPostingInfo = new HashMap<String,String>();
			oPostingInfo.put("cardNo", sCardNo);
			oPostingInfo.put("traceId", sTraceId);
			oPostingInfo.put("memberNo", sMemberNo);
			oPostingInfo.put("referenceNo", sReferenceNo);
			oPostingInfo.put("voucherAmount", sVoucherValue);
			oPostingInfo.put("voucherType", sVoucherType);
			
			if(oFuncMembershipInterface.membershipPosting(oPostingInfo, this, null, null, false, false) == false) {
				bPostSuccess = false;
				return bPostSuccess;
			}
		}
		
		//check for all item discount
		for(FuncCheckParty oFuncCheckParty:this.getCheckPartyList()) {
			for(List<FuncCheckItem> oItemListForSingleSeat:oFuncCheckParty.getWholeItemList()) {
				for(FuncCheckItem oCheckItem:oItemListForSingleSeat){
					List<PosCheckDiscount> oCurrentDiscountList = oCheckItem.getItemDiscountList();
					for (PosCheckDiscount oPosCheckDiscount:oCurrentDiscountList) {
						String sCardNo = "", sReferenceNo = "", sVoucherValue = "", sVoucherType = "", sMemberNo = "", sTraceId = "";
						int iInterfaceId = 0;
						
						if(oPosCheckDiscount.getCheckExtraInfoValueBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID).isEmpty())
							continue;
						
						iInterfaceId = Integer.parseInt(oPosCheckDiscount.getCheckExtraInfoValueBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID));
						if(iInterfaceId != oFuncMembershipInterface.getMembershipInterface().getInterfaceId())
							continue;
						sCardNo = oPosCheckDiscount.getCheckExtraInfoValueBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_CARD_NO);
						sReferenceNo = oPosCheckDiscount.getCheckExtraInfoValueBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_VOUCHER_NUMBER);
						sVoucherValue = oPosCheckDiscount.getCheckExtraInfoValueBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_VOUCHER_VALUE);
						sVoucherType = oPosCheckDiscount.getCheckExtraInfoValueBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_VOUCHER_TYPE);
						
						HashMap<String, String> oPostingInfo = new HashMap<String,String>();
						oPostingInfo.put("cardNo", sCardNo);
						oPostingInfo.put("traceId", sTraceId);
						oPostingInfo.put("memberNo", sMemberNo);
						oPostingInfo.put("referenceNo", sReferenceNo);
						oPostingInfo.put("voucherAmount", sVoucherValue);
						oPostingInfo.put("voucherType", sVoucherType);
						
						if(oFuncMembershipInterface.membershipPosting(oPostingInfo, this, null, null, false, false) == false){
							bPostSuccess = false;
							return bPostSuccess;
						}
					}
				}	
			}
		}
		
		return bPostSuccess;
	}

	public boolean rollBackChangeOrderedItemPriceLevel(List<HashMap<String, Integer>> oSelectedItems) {
		boolean bHaveUpdate = false;

		for (HashMap<String, Integer> oSelectedItem : oSelectedItems) {
			FuncCheckItem oSelectedFuncCheckItem = this.getCheckItem(oSelectedItem.get("partySeq"),
					oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));

			if (oSelectedItem.containsKey("priceLevel")) {
				if (oSelectedFuncCheckItem.getCheckItem().getPriceLevel() == oSelectedItem.get("priceLevel"))
					continue;

				bHaveUpdate = true;

				// Set the manual change price level flag
				oSelectedFuncCheckItem.setChangePriceLevelManually(true);
				// Set item to target price level
				oSelectedFuncCheckItem.changePriceLevel(oSelectedItem.get("priceLevel"), false);

				// for child item
				if (oSelectedFuncCheckItem.hasChildItem()) {
					for (FuncCheckItem oChildCheckItem : oSelectedFuncCheckItem.getChildItemList()) {
						oChildCheckItem.setChangePriceLevelManually(true);
						oChildCheckItem.changePriceLevel(oSelectedItem.get("priceLevel"), false);

						// for child modifier item
						if (oChildCheckItem.hasModifier()) {
							for (FuncCheckItem oChildModifierCheckItem : oChildCheckItem.getModifierList()) {
								oChildModifierCheckItem.setChangePriceLevelManually(true);
								oChildModifierCheckItem.changePriceLevel(oSelectedItem.get("priceLevel"), false);
							}
						}

						// Re-calculate all my modifiers' price
						oChildCheckItem.setAllModifiersPrice(true);

						// Set modified flag if old item
						if (oChildCheckItem.isOldItem()) {
							oChildCheckItem.getCheckItem().setModified(true);
						}
					}
				}

				// for modifier
				if (oSelectedFuncCheckItem.hasModifier()) {
					for (FuncCheckItem oModifierCheckItem : oSelectedFuncCheckItem.getModifierList()) {
						oModifierCheckItem.setChangePriceLevelManually(true);
						oModifierCheckItem.changePriceLevel(oSelectedItem.get("priceLevel"), false);
					}
				}

				// Re-calculate all my modifiers' price
				oSelectedFuncCheckItem.setAllModifiersPrice(true);

				// Set modified flag if old item
				if (oSelectedFuncCheckItem.isOldItem()) {
					oSelectedFuncCheckItem.getCheckItem().setModified(true);
				}
			}

		}

		return bHaveUpdate;
	}
	public void printCardAuthorizationSlip(String sAuthorizationType, JSONObject oCardAuthJSON, BigDecimal oAuthAmount){
		JSONObject oHeaderJSONObject = new JSONObject(), oInfoJSONObject = new JSONObject(), oTempJSONObject = null;
		JSONArray oTempJSONArray = null;
		
		PosCheck oCheck = new PosCheck();
		oCheck.setChksId(this.getCheckId());
		// TO DO
		// Create thread to load detail
		AppThreadManager oAppThreadManager = new AppThreadManager();
		
		//form header
		try {
			oHeaderJSONObject.put("header", "CardAuthorization");
			oTempJSONArray = new JSONArray();
			oTempJSONObject = new JSONObject();
			oTempJSONObject.put("message", sAuthorizationType);
			oTempJSONArray.put(oTempJSONObject);
			oHeaderJSONObject.put("messages", oTempJSONArray);
			
			//form info
			oInfoJSONObject.put("stationId", AppGlobal.g_oFuncStation.get().getStationId());
			oInfoJSONObject.put("userId", AppGlobal.g_oFuncUser.get().getUserId());
			oInfoJSONObject.put("userName", AppGlobal.g_oFuncUser.get().getUserName(1));
			oInfoJSONObject.put("cardAuthority", oCardAuthJSON);
			oInfoJSONObject.put("authAmount", oAuthAmount);
			
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		// Add the method to the thread manager
		// Thread : print action slip "merge_table_item"
		// Create parameter array
		Object[] oParameters = new Object[5];
		oParameters[0] = PosActionPrintQueue.KEY_CREDIT_CARD_AUTH_TOPUP;
		oParameters[1] = oHeaderJSONObject;
		oParameters[2] = oInfoJSONObject;
		oParameters[3] = AppGlobal.g_oCurrentLangIndex.get();
		oParameters[4] = 0;
		oAppThreadManager.addThread(2, oCheck, "printSpecialSlip", oParameters);
		
		// Run all of the threads
		oAppThreadManager.runThread();
	}
	
	// Call print questionnaire slip function
	public void printQuestionnaireSlip(){		
		JSONObject oHeaderJSONObject = new JSONObject(), oInfoJSONObject = new JSONObject();
		
		PosCheck oCheck = new PosCheck();
		oCheck.setChksId(this.getCheckId());
		// TO DO
		// Create thread to load detail
		AppThreadManager oAppThreadManager = new AppThreadManager();
		
		//form header
		try {
			oHeaderJSONObject.put("header", "GuestQuestionnaire");
			oInfoJSONObject.put("stationId", AppGlobal.g_oFuncStation.get().getStationId());
			oInfoJSONObject.put("userId", AppGlobal.g_oFuncUser.get().getUserId());
			
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		// Add the method to the thread manager
		// Thread : print action slip "questionnaire"
		// Create parameter array
		Object[] oParameters = new Object[5];
		oParameters[0] = PosActionPrintQueue.KEY_QUESTIONNAIRE;
		oParameters[1] = oHeaderJSONObject;
		oParameters[2] = oInfoJSONObject;
		oParameters[3] = AppGlobal.g_oCurrentLangIndex.get();
		oParameters[4] = 0;
		oAppThreadManager.addThread(1, oCheck, "printSpecialSlip", oParameters);
		
		// Run all of the threads
		oAppThreadManager.runThread();
	}
	
	//calculate item's cooking time
	public void calculateItemCookingTime() {
		if (!hasNewItem(false))
			return;
		
		for (FuncCheckParty oFuncCheckParty : m_oFuncCheckPartyList) {
			for (List<FuncCheckItem> oCheckItemList : oFuncCheckParty.getWholeItemList()) {
				for (FuncCheckItem oFuncCheckItem : oCheckItemList) {
					if (oFuncCheckItem.isOldItem() || oFuncCheckItem.isPendingItem())
						continue;
					oFuncCheckItem.calculateCookingTime(AppGlobal.getCurrentTime(false));
				}
			}
		}
	}
	
	//handle cooking overtime table list
	public void handleCheckForOverCookingTimeTableList(String sTableNo, String sTableExtension, boolean bRemove) {
		JSONObject oTempJSONObject = AppGlobal.g_oFuncStation.get().getTableFloorPlanSetting();
		JSONObject oCookingInfo = null, oFireEventJson = new JSONObject();
		DateTimeFormatter oFormatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
		DateTime dtEarliestFinishTime = null;
		String sTableKey = null;
		
		if(oTempJSONObject == null)
			return;
		
		if(oTempJSONObject.optString("support_cooking_overtime").equals(""))
			return;
		
		//construct table key
		if(sTableNo != null && sTableExtension != null) {
			if(sTableExtension.isEmpty())
				sTableKey = sTableNo;
			else
				sTableKey = sTableNo + "_" + sTableExtension;
		}else {
			if(m_sTableExtension.isEmpty())
				sTableKey = m_sTableNo;
			else
				sTableKey = m_sTableNo + "_" + m_sTableExtension;
		}
		
		if(!bRemove) {
			//add table to list
			//get earlist cooking overtime
			for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList){
				for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
					for (FuncCheckItem oFuncCheckItem:oItemList){
						//Skip items that has delivered
						if(oFuncCheckItem.hasDelivered())
							continue;
						
						if(oFuncCheckItem.isExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_ITEM,  PosCheckExtraInfo.VARIABLE_COOKING_INFO, 0) 
								&& !oFuncCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_ITEM, PosCheckExtraInfo.VARIABLE_COOKING_INFO).isEmpty()){
							try {
								oCookingInfo = new JSONObject(oFuncCheckItem.getExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_ITEM, PosCheckExtraInfo.VARIABLE_COOKING_INFO));
							} catch (JSONException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
								continue;
							}
							
							if(oCookingInfo.has("finish_time") && !oCookingInfo.optString("finish_time", "").isEmpty()) {
								DateTime dtFinishTime = oFormatter.parseDateTime(oCookingInfo.optString("finish_time", ""));
								if(dtEarliestFinishTime == null || dtFinishTime.isBefore(dtEarliestFinishTime))
									dtEarliestFinishTime = dtFinishTime;
							}
						}
					}
				}
			}
			
			if(dtEarliestFinishTime == null){
				//Remove the table from list if their is no earlist time
				AppGlobal.handleOverCookingTimeTable(AppGlobal.g_oFuncOutlet.get().getOutletId(), sTableKey, null, true);
				return;
			}
			
			AppGlobal.handleOverCookingTimeTable(AppGlobal.g_oFuncOutlet.get().getOutletId(), sTableKey, dtEarliestFinishTime, bRemove);
			try {
				oFireEventJson.put("outlet_id", AppGlobal.g_oFuncOutlet.get().getOutletId());
				oFireEventJson.put("table_key", sTableKey);
				oFireEventJson.put("over_time", oFormatter.print(dtEarliestFinishTime));
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}else {
			AppGlobal.handleOverCookingTimeTable(AppGlobal.g_oFuncOutlet.get().getOutletId(), sTableKey, null, bRemove);
			try {
				oFireEventJson.put("outlet_id", AppGlobal.g_oFuncOutlet.get().getOutletId());
				oFireEventJson.put("table_key", sTableKey);
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		AppGlobal.startSynchronizeGlobalInfo(MQCommandManager.INFO_LIST_OVER_COOKING_TIME_TABLE, oFireEventJson.toString(), bRemove);
	}
	
	//check is disabled mix and match
	public boolean isDisabledMixAndMatch(){
		String sDisableIndicator = this.getCheckExtraInfoValueListBySectionVariable("",
				PosCheckExtraInfo.VARIABLE_DISABLE_MIX_AND_MATCH_RULES);
		
		if(sDisableIndicator != null && !sDisableIndicator.isEmpty())
			return true;
		
		return false;
	}
	
	//print loyalty auto top up slip
	public void printLoyaltyAutoTopUpSlip(JSONObject oSlipDetailJSON){
		JSONObject oHeaderJSONObject = new JSONObject(), oInfoJSONObject = new JSONObject(), oTempJSONObject = null;
		JSONArray oTempJSONArray = null;
		
		PosCheck oCheck = new PosCheck();
		oCheck.setChksId(this.getCheckId());
		
		// Create thread to load detail
		AppThreadManager oAppThreadManager = new AppThreadManager();
		
		try {
			//Form Header
			oHeaderJSONObject.put("header", "LoyaltyAutoTopUpSlip");
			oTempJSONArray = new JSONArray();
			oTempJSONObject = new JSONObject();
			oTempJSONObject.put("message", "");
			oTempJSONArray.put(oTempJSONObject);
			oHeaderJSONObject.put("messages", oTempJSONArray);
			
			//Form Info
			oInfoJSONObject.put("stationId", AppGlobal.g_oFuncStation.get().getStationId());
			oInfoJSONObject.put("userId", AppGlobal.g_oFuncUser.get().getUserId());
			oInfoJSONObject.put("userName", AppGlobal.g_oFuncUser.get().getUserName(1));
			oInfoJSONObject.put("topUpDetail", oSlipDetailJSON);
			
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		// Add the method to the thread manager
		// Thread : print action slip "printSpecialSlip"
		// Create parameter array
		Object[] oParameters = new Object[5];
		oParameters[0] = "loyalty_auto_top_up";
		oParameters[1] = oHeaderJSONObject;
		oParameters[2] = oInfoJSONObject;
		oParameters[3] = AppGlobal.g_oCurrentLangIndex.get();
		oParameters[4] = 0;
		oAppThreadManager.addThread(2, oCheck, "printSpecialSlip", oParameters);
				
		// Run all of the threads
		oAppThreadManager.runThread();
	}
	
	//print loyalty interface balance slip
	public void printLoyaltyBalanceSlip(JSONObject oBalanceDetailJSON){
		JSONObject oHeaderJSONObject = new JSONObject(), oInfoJSONObject = new JSONObject(), oTempJSONObject = null;
		JSONArray oTempJSONArray = null;
		
		PosCheck oCheck = new PosCheck();
		oCheck.setChksId(this.getCheckId());
		
		// Create thread to load detail
		AppThreadManager oAppThreadManager = new AppThreadManager();
		
		try {
			//Form Header
			oHeaderJSONObject.put("header", "LoyaltyBalance");
			oTempJSONArray = new JSONArray();
			oTempJSONObject = new JSONObject();
			oTempJSONObject.put("message", "");
			oTempJSONArray.put(oTempJSONObject);
			oHeaderJSONObject.put("messages", oTempJSONArray);
			
			//Form Info
			oInfoJSONObject.put("stationId", AppGlobal.g_oFuncStation.get().getStationId());
			oInfoJSONObject.put("userId", AppGlobal.g_oFuncUser.get().getUserId());
			oInfoJSONObject.put("userName", AppGlobal.g_oFuncUser.get().getUserName(1));
			oInfoJSONObject.put("balanceDetail", oBalanceDetailJSON);
			
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		// Add the method to the thread manager
		// Thread : print action slip "printSpecialSlip"
		// Create parameter array
		Object[] oParameters = new Object[5];
		oParameters[0] = "loyalty_balance";
		oParameters[1] = oHeaderJSONObject;
		oParameters[2] = oInfoJSONObject;
		oParameters[3] = AppGlobal.g_oCurrentLangIndex.get();
		oParameters[4] = 0;
		oAppThreadManager.addThread(2, oCheck, "printSpecialSlip", oParameters);
				
		// Run all of the threads
		oAppThreadManager.runThread();
	}
	
	public BigDecimal getLoyaltySVCRemainingBalance() {
		return m_dLoyaltySVCRemainingBalance;
	}
	
	public void setItemStockList(PosOutletItemList oPosOutletItemList) {
		synchronized(this) {
			m_oItemStockList = oPosOutletItemList;
		}
	}
	
	// update the maximum redemption amount and points into check extra_info when update check (for golden circle membership interface)
	public void updateMaxRedemptionPointsAndAmountForGoldenCircle() {
		String sMaxRedemptionPoints = "0";
		String sMaxRedemptionAmount = "0";
		BigDecimal dCheckTotal = getCheckTotal();
		BigDecimal dExchangeRatePointsToAmount = BigDecimal.ONE;
		BigDecimal dExchangeRateAmountToPoints = BigDecimal.ONE;
		boolean bExcludeSCTax = false;
		String sTier = "";
		List<PosInterfaceConfig> oPosInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_MEMBERSHIP_INTERFACE);
		
		for(PosInterfaceConfig oPosInterfaceConfig : oPosInterfaceConfigList){
			if(oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_GOLDEN_CIRCLE)) {
				
				if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0)) {
					if(!this.getCheckExtraInfoValueListBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID).equals(Integer.toString(oPosInterfaceConfig.getInterfaceId()))) 
						break;
				}else
					break;
				
				if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_MEMBER_TYPE, 0)) {
					sTier = this.getCheckExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_MEMBER_TYPE, 0);
					if (sTier == null || sTier.isEmpty())
						break;
				}else
					break;
				
				int iRoundingDecimal = 0;
				if(oPosInterfaceConfig.getInterfaceConfig().has("currency_setup") && oPosInterfaceConfig.getInterfaceConfig().optJSONObject("currency_setup").optJSONObject("params").has("rounding_decimal"))
					iRoundingDecimal = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("currency_setup").optJSONObject("params").optJSONObject("rounding_decimal").optInt("value", 0);
				if(oPosInterfaceConfig.getInterfaceConfig().has("general_setup") && oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").has("max_redemption_point"))
					sMaxRedemptionPoints = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").optJSONObject("max_redemption_point").optString("value", "");
				if(oPosInterfaceConfig.getInterfaceConfig().has("general_setup") && oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").has("redemption_point_exclude_sc_tax"))
					bExcludeSCTax = oPosInterfaceConfig.getInterfaceConfig().optJSONObject("general_setup").optJSONObject("params").optJSONObject("redemption_point_exclude_sc_tax").optBoolean("value", false);
				if(bExcludeSCTax)
					dCheckTotal = dCheckTotal.subtract(getTaxTotal().subtract(getServiceChargeTotal()));
				
				FuncMembershipInterface oFuncMembershipInterface = new FuncMembershipInterface(oPosInterfaceConfig);
				dExchangeRateAmountToPoints = oFuncMembershipInterface.getExchangeRate(true, sTier, this.getCheckTotal());
				dExchangeRatePointsToAmount = oFuncMembershipInterface.getExchangeRate(false, sTier, new BigDecimal(sMaxRedemptionPoints));
				
				sMaxRedemptionAmount = (new BigDecimal(sMaxRedemptionPoints)).multiply(dExchangeRatePointsToAmount).toString();
				
				if(dCheckTotal.multiply(dExchangeRateAmountToPoints).compareTo(BigDecimal.valueOf(Double.valueOf(sMaxRedemptionPoints))) < 0) {
					sMaxRedemptionPoints = String.valueOf(dCheckTotal.multiply(dExchangeRateAmountToPoints).setScale(0, BigDecimal.ROUND_HALF_UP));
					sMaxRedemptionAmount = dCheckTotal.toString();
				}
				
				if(this.isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_LOCAL_BALANCE, 0)
						&& this.getCheckExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_LOCAL_BALANCE, 0) != null) {
					
					BigDecimal dEquivalentTotalPointsBalance = new BigDecimal(this.getCheckExtraInfoBySectionAndVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_LOCAL_BALANCE, 0));
					
					if(dEquivalentTotalPointsBalance.multiply(dExchangeRateAmountToPoints).compareTo(BigDecimal.valueOf(Double.valueOf(sMaxRedemptionPoints))) < 0) {
						sMaxRedemptionPoints = String.valueOf(dEquivalentTotalPointsBalance.multiply(dExchangeRateAmountToPoints).setScale(0, BigDecimal.ROUND_HALF_UP));
						sMaxRedemptionAmount = dEquivalentTotalPointsBalance.toString();
					}
				}
				
				if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_MAX_REDEMPT_AMOUNT, 0))
					updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_MAX_REDEMPT_AMOUNT, 0, StringLib.BigDecimalToStringWithoutZeroDecimal((new BigDecimal(sMaxRedemptionAmount)).setScale(iRoundingDecimal, BigDecimal.ROUND_HALF_UP)));
				else
					addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_MAX_REDEMPT_AMOUNT, 0, StringLib.BigDecimalToStringWithoutZeroDecimal((new BigDecimal(sMaxRedemptionAmount)).setScale(iRoundingDecimal, BigDecimal.ROUND_HALF_UP)));
				
				if(isCheckExtraInfoExistBySectionVariableAndIndex(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_MAX_REDEMPT_POINTS, 0))
					updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_MAX_REDEMPT_POINTS, 0, StringLib.BigDecimalToStringWithoutZeroDecimal((new BigDecimal(sMaxRedemptionPoints)).setScale(0, BigDecimal.ROUND_HALF_UP)));
				else
					addCheckExtraInfo(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_MAX_REDEMPT_POINTS, 0, StringLib.BigDecimalToStringWithoutZeroDecimal((new BigDecimal(sMaxRedemptionPoints)).setScale(0, BigDecimal.ROUND_HALF_UP)));
			}
		}
	}
	
	// Calculate Inclusive Tax Total
	public BigDecimal getInclusiveTaxTotal(){
		if(m_oCheck == null)
			return BigDecimal.ZERO;
		
		BigDecimal dInclusiveTaxTotal = BigDecimal.ZERO;
		for(int i = 1; i <= 4; i++)
			dInclusiveTaxTotal = dInclusiveTaxTotal.add(m_oCheck.getInclusiveTaxRef(i));
		return dInclusiveTaxTotal;
	}
	
	public List<PosCheckTaxScRef> getCheckTaxScRefList() {
		return this.m_oCheckTaxScRefList;
	}
	
	public BigDecimal getCheckTaxScRefTotal() {
		BigDecimal oScInclTaxTotal = BigDecimal.ZERO;
		if (!this.getCheckTaxScRefList().isEmpty()) {
			for (PosCheckTaxScRef oCheckTaxScRef: this.getCheckTaxScRefList()) {
				if (!oCheckTaxScRef.getVariable().contains("sc_incl_tax"))
					continue; 
				
				if (oCheckTaxScRef.getValue() == null || oCheckTaxScRef.getValue().isEmpty())
					continue;
				
				BigDecimal oScInclTax = new BigDecimal(oCheckTaxScRef.getValue());
				oScInclTaxTotal = oScInclTaxTotal.add(oScInclTax);
			}
		}
		return oScInclTaxTotal;
	}
	
	public boolean isNeedRollbackForCheckMaximum(BigDecimal dAdditionalAmount){
		boolean bNeedRollbackForCheckLimit = false;
		for (FuncCheckListener listener : listeners) {
			bNeedRollbackForCheckLimit = listener.FuncCheck_isRollbackNeededForCheckMaximum(this, dAdditionalAmount);
		}
		return bNeedRollbackForCheckLimit;
	}
	
	public void removeMinimumCharge(FuncCheckItem oFuncCheckItem) {
		if (oFuncCheckItem.isMinimumChargeItem()) {
			this.updateCheckExtraInfoValue(PosCheckExtraInfo.BY_CHECK, "", PosCheckExtraInfo.VARIABLE_MIN_CHARGE, 0, "0");
		}
	}
	
	public List<HashMap<String, Integer>> getAvailableItemIndexList(List<HashMap<String, Integer>> oSelectedItems) {
		List<HashMap<String, Integer>> oResultSelectedItems = new ArrayList<HashMap<String, Integer>>();
		for(HashMap<String, Integer> oSelectedItem:oSelectedItems) {
			FuncCheckItem oFuncCheckItem = (FuncCheckItem) this.getCheckItem(oSelectedItem.get("partySeq"), oSelectedItem.get("sectionId"), oSelectedItem.get("itemIndex"));
			if (oFuncCheckItem.isMinimumChargeItem())
				continue;
			
			oResultSelectedItems.add(oSelectedItem);
		}
		
		return oResultSelectedItems;
	}
	
	public String getPaid() {
		return m_oCheck.getPaid();
	}
	
	public void setPaid(String sPaid) {
		m_oCheck.setPaid(sPaid); 
	}
	//Change discount's check id
	public void changeCheckDiscountCheckId(PosCheckDiscount oCheckDisc, String sChksId, String sCptyId) {
		oCheckDisc.setChksId(sChksId);
		oCheckDisc.setCptyId(sCptyId);
		oCheckDisc.setModified(true);
	}

	// Check whether included in applied check discount
	private void checkDiscountForNewlyAddedItem(FuncCheckItem oNewFuncCheckItem) {
		List<Integer> oItemDiscountGrpList = new ArrayList<Integer>();
		List<PosCheckDiscount> oAppliedCheckPartyDiscountList = null;
		HashMap<Integer, Boolean> oDiscountAllowance = new HashMap<Integer, Boolean>();


		oAppliedCheckPartyDiscountList = this.getCurrentPartyAppliedCheckDiscount();
		if (oAppliedCheckPartyDiscountList == null || oAppliedCheckPartyDiscountList.isEmpty())
			return;

		for (PosCheckDiscount oAppliedCheckDisc : oAppliedCheckPartyDiscountList) {
			int iCheckDiscountIndex = oAppliedCheckDisc.getSeq();
			PosDiscountType oDiscountType = new PosDiscountType();
			oDiscountType.readById(oAppliedCheckDisc.getDtypId());

			if (oNewFuncCheckItem.getMenuItem().getDiscountItemGroupId() != 0
					&& !oItemDiscountGrpList.contains(oNewFuncCheckItem.getMenuItem().getDiscountItemGroupId())) {
				boolean bDiscountAllowance = AppGlobal.g_oFuncDiscountAclList
						.get(AppGlobal.g_oFuncOutlet.get().getOutletId())
						.checkDiscountAcl(oNewFuncCheckItem.getMenuItem(), oDiscountType);
				oDiscountAllowance.put(oNewFuncCheckItem.getMenuItem().getDiscountItemGroupId(), bDiscountAllowance);
			}

			if (oNewFuncCheckItem.getMenuItem().getDiscountItemGroupId() == 0)
				continue;
			if (!oDiscountAllowance.containsKey(oNewFuncCheckItem.getMenuItem().getDiscountItemGroupId()))
				continue;
			if (oDiscountAllowance.get(oNewFuncCheckItem.getMenuItem().getDiscountItemGroupId()) == false)
				continue;

			// check whether the selected item is available for applying
			// discount
			if (oNewFuncCheckItem.getCheckItem().getPrice().compareTo(BigDecimal.ZERO) == 0)
				continue;

			oAppliedCheckDisc.setModified(true);
			PosCheckDiscountItem oCheckDiscountItem = new PosCheckDiscountItem();
			oCheckDiscountItem.setOutletId(AppGlobal.g_oFuncOutlet.get().getOutletId());
			oCheckDiscountItem.setCitmId(oNewFuncCheckItem.getCheckItem().getCitmId());
			if (oAppliedCheckDisc.getCdisId().compareTo("") > 0)
				oCheckDiscountItem.setCdisId(oAppliedCheckDisc.getCdisId());
			oNewFuncCheckItem.addCheckDiscountItemToList(iCheckDiscountIndex, oCheckDiscountItem);
			oAppliedCheckDisc.addCheckDiscountItemCount(1);
			
		}
	}
	
	public void addActionLogForSplitRevenue(FuncCheckItem oFuncCheckItem) {
		int iNewSplitRevenueItemCount = 0;
		String sNewSplitRevenueItemCodeList = "";
		for (FuncCheckItem oChildItem: oFuncCheckItem.getChildItemList()) {
			if (!oChildItem.isOldItem()) {
				if (iNewSplitRevenueItemCount > 0)
					sNewSplitRevenueItemCodeList += ",";
				sNewSplitRevenueItemCodeList += oFuncCheckItem.getCheckItem().getCode();
				iNewSplitRevenueItemCount++;
			}
		}
		AppGlobal.g_oActionLog.get().addActionLog(AppGlobal.FUNC_LIST.split_revenue.name(), PosActionLog.ACTION_RESULT_SUCCESS, "", AppGlobal.g_oFuncUser.get().getUserId(), AppGlobal.g_oFuncOutlet.get().getShopId(), AppGlobal.g_oFuncOutlet.get().getOutletId(), AppGlobal.g_oFuncOutlet.get().getBusinessDay().getBdayId(), AppGlobal.g_oFuncOutlet.get().getBusinessPeriod().getBperId(), AppGlobal.g_oFuncStation.get().getStationId(), oFuncCheckItem.getCheckItem().getCheckId(), "", oFuncCheckItem.getCheckItem().getCitmId(), "", "", "Split revenue item count: "+iNewSplitRevenueItemCount +" ("+sNewSplitRevenueItemCodeList+")");
		AppGlobal.g_oActionLog.get().handleActionLog(false);
	}
	
	public boolean isSplitRevenueMode() {
		return m_sCurrentFunctionKey.equals(AppGlobal.FUNC_LIST.split_revenue.name());
	}
	
	public ArrayList<JSONObject> prepareOrderingBasketExtraInfoList(ArrayList<JSONObject> oKeys) {
		ArrayList<JSONObject> oOrderingBasketExtraInfoList = new ArrayList<JSONObject>();
		if(oKeys != null) {
			for (int i = 0; i < oKeys.size(); i++) {
				String sValue = "";
				try {
					sValue = this.getCheckExtraInfoByTypeSectionAndVariable(PosCheckExtraInfo.BY_CHECK, PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, oKeys.get(i).getString("check_extra_info"), 0);
					JSONObject oKeyBuff = new JSONObject(oKeys.get(i).toString());
					oKeyBuff.append("value", sValue);
					oOrderingBasketExtraInfoList.add(oKeyBuff);
				} catch (JSONException e) {
					AppGlobal.stack2Log(e);
				}
			}
			// sorting the target function in sequence
			Collections.sort(oOrderingBasketExtraInfoList, new Comparator<JSONObject>() {
				public int compare(JSONObject oList1, JSONObject oList2) {
					return oList1.optInt("seq") - oList2.optInt("seq");
				}
			});
		}
		return oOrderingBasketExtraInfoList;
	}
	
	private void doSurveillanceEvent(String sEventType, HashMap<String, String> oSurveillanceEventInfo) {
		List<PosInterfaceConfig> oInterfaceConfigList = AppGlobal.getPosInterfaceConfigByInfType(InfInterface.TYPE_SURVEILLANCE_INTERFACE);
		if (!oInterfaceConfigList.isEmpty()) {
			for (PosInterfaceConfig oPosInterfaceConfig : oInterfaceConfigList) {
				if (oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_ECONNECT)) {
					FuncSurveillance oFuncSurveillance = new FuncSurveillance(oPosInterfaceConfig);
					oSurveillanceEventInfo.put("eventType", sEventType);
					oFuncSurveillance.surveillanceEvent(oSurveillanceEventInfo, null);
				}
			}
		}
	}
	
	private boolean performVoidBally(PosCheckPayment oCheckPayment, PosInterfaceConfig oPosInterfaceConfig, FuncGamingInterface oFuncGamingInterface, List<PosCheckPayment> oCheckPaymentsList) {
		boolean bFlag = true;
		HashMap<String, String> oVoidPostingInfo = new HashMap<String, String>();
		JSONObject oPosInterfaceConfigJson = oPosInterfaceConfig.getInterfaceConfig();
		int iOutletNameLangIndex = 1;
		if (oPosInterfaceConfigJson.has("payment_setup") && oPosInterfaceConfigJson.optJSONObject("payment_setup").has("params")) {
			if (oPosInterfaceConfigJson.optJSONObject("payment_setup").optJSONObject("params").has("outlet_name_lang_index")) {
				iOutletNameLangIndex = oPosInterfaceConfigJson.optJSONObject("payment_setup").optJSONObject("params").optJSONObject("outlet_name_lang_index").optInt("value");
				oVoidPostingInfo.put("outletLangIndex", String.valueOf(iOutletNameLangIndex));
			}
		}
		
		if (oFuncGamingInterface.voidGamingPosting(oVoidPostingInfo, oCheckPaymentsList, oPosInterfaceConfig)){
			// clear Member Number
			if(oCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_GAMING_INTERFACE, PosCheckExtraInfo.VARIABLE_ACCOUNT_NUMBER, 0) != null)
				oCheckPayment.updateExtraInfo(PosCheckExtraInfo.SECTION_GAMING_INTERFACE, PosCheckExtraInfo.VARIABLE_ACCOUNT_NUMBER, 0, "");
			// clear GpcTranId
			if(oCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_GAMING_INTERFACE, PosCheckExtraInfo.VARIABLE_REFERENCE, 0) != null)
				oCheckPayment.updateExtraInfo(PosCheckExtraInfo.SECTION_GAMING_INTERFACE, PosCheckExtraInfo.VARIABLE_REFERENCE, 0, "");
			// clear CmpTranId
			if(oCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_GAMING_INTERFACE, PosCheckExtraInfo.VARIABLE_POSTING_KEY, 0) != null)
				oCheckPayment.updateExtraInfo(PosCheckExtraInfo.SECTION_GAMING_INTERFACE, PosCheckExtraInfo.VARIABLE_POSTING_KEY, 0, "");
			// clear Card Type
			if(oCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_GAMING_INTERFACE, PosCheckExtraInfo.VARIABLE_CARD_TYPE_NAME, 0) != null)
				oCheckPayment.updateExtraInfo(PosCheckExtraInfo.SECTION_GAMING_INTERFACE, PosCheckExtraInfo.VARIABLE_CARD_TYPE_NAME, 0, "");
			// clear Last Name
			if(oCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_GAMING_INTERFACE, PosCheckExtraInfo.VARIABLE_MEMBER_LAST_NAME, 0) != null)
				oCheckPayment.updateExtraInfo(PosCheckExtraInfo.SECTION_GAMING_INTERFACE, PosCheckExtraInfo.VARIABLE_MEMBER_LAST_NAME, 0, "");
			// clear First Name
			if(oCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_GAMING_INTERFACE, PosCheckExtraInfo.VARIABLE_MEMBER_NAME, 0) != null)
				oCheckPayment.updateExtraInfo(PosCheckExtraInfo.SECTION_GAMING_INTERFACE, PosCheckExtraInfo.VARIABLE_MEMBER_NAME, 0, "");
			// clear Interface ID
			if(oCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_GAMING_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0) != null)
				oCheckPayment.updateExtraInfo(PosCheckExtraInfo.SECTION_GAMING_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID, 0, "");
			// clear Bar Code Value
			if(oCheckPayment.getExtraInfoFromList(PosCheckExtraInfo.SECTION_GAMING_INTERFACE, PosCheckExtraInfo.VARIABLE_PAYMENT_INFO, 0) != null)
				oCheckPayment.updateExtraInfo(PosCheckExtraInfo.SECTION_GAMING_INTERFACE, PosCheckExtraInfo.VARIABLE_PAYMENT_INFO, 0, "");
			
		} else {
			FormDialogBox oFormDialogBox = new FormDialogBox(AppGlobal.g_oLang.get()._("ok"), null);
			oFormDialogBox.setTitle(AppGlobal.g_oLang.get()._("error"));
			oFormDialogBox.setMessage(oFuncGamingInterface.getLastErrorMessage());
			oFormDialogBox.show();
			oFormDialogBox = null;
			bFlag = false;
		}
		return bFlag;
	}
	
	public BigDecimal calPointRedemptionAmount(PosInterfaceConfig oPosInterfaceConfig, PosTaxScTypeList oScList) {
		//return zero if current outlet has not attach generalV2 interface
		if(!oPosInterfaceConfig.getInterfaceVendorKey().equals(InfVendor.KEY_GENERAL_V2))
			return BigDecimal.ZERO;
		
		BigDecimal dEligibleAmount = BigDecimal.ZERO;
		BigDecimal dIneligibleAmount = BigDecimal.ZERO;
		
		BigDecimal dEligibleItemTotal = BigDecimal.ZERO;
		BigDecimal dEligibleScTotal = BigDecimal.ZERO;
		BigDecimal dEligibleGratuity = BigDecimal.ZERO;
		BigDecimal dEligibleExtraChargeTotal= BigDecimal.ZERO;
		BigDecimal dEligibleTaxTotal = BigDecimal.ZERO;
		
		BigDecimal dIneligibleItemTotal = BigDecimal.ZERO;
		BigDecimal dIneligibleScTotal = BigDecimal.ZERO;
		BigDecimal dIneligibleGratuity = BigDecimal.ZERO;
		BigDecimal dIneligibleExtraChargeTotal= BigDecimal.ZERO;
		
		BigDecimal dInclusiveTaxTotal = BigDecimal.ZERO;
		
		//rounding difference user (true = assign difference to eligible amount)
		boolean bRoundingDifference = false;
		if(oPosInterfaceConfig.getInterfaceConfig().optJSONObject("points_redemption_setup").optJSONObject("params")
				.optJSONObject("rounding_difference_assign_to").optString("value").equals("eligible_amount"))
			bRoundingDifference = true;
		
		ArrayList<Integer> oEligibleAwdItemDepartmentIds = AppGlobal.g_oWohAwardSettingList.get().getEligibleAwdItemDepartmentIds();
		ArrayList<Integer> oEligibleAwdExtraChargeIds = AppGlobal.g_oWohAwardSettingList.get().getEligibleAwdExtraChargeIds();
		ArrayList<Integer> oEligibleAwdGratuityIds = AppGlobal.g_oWohAwardSettingList.get().getEligibleAwdGratuityIds();
		ArrayList<Integer> oEligibleAwdServiceChargeIds = AppGlobal.g_oWohAwardSettingList.get().getEligibleAwdServiceChargeIds();
		
		// store check discount sequence without extra charge
		ArrayList<Integer> oCheckDiscountSeqs = new ArrayList<Integer>();
		for(PosCheckDiscount oPosCheckDiscount : this.getCheckDiscountList()) {
			if(oPosCheckDiscount.isUsedForDiscount()) 
				oCheckDiscountSeqs.add(oPosCheckDiscount.getSeq());
		}
		
		// calculate item price
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem : oItemList){
					PosCheckItem oCheckItem = oFuncCheckItem.getCheckItem();
					BigDecimal dItemPrice = oFuncCheckItem.getItemNetTotalWithoutExtraCharge(oCheckDiscountSeqs);
					
					// exclusive the inclusive tax for tax with no breakdown item
					for(int i = 1; i <= 4; i++) {
						if(oCheckItem.getInclusiveTaxRef(i).compareTo(BigDecimal.ZERO) != 0) {
							dInclusiveTaxTotal = dInclusiveTaxTotal.add(oCheckItem.getInclusiveTaxRef(i));
							dItemPrice = dItemPrice.subtract(oCheckItem.getInclusiveTaxRef(i));
						}
					}
					
					//eligible item handling
					if(oEligibleAwdItemDepartmentIds.contains(oCheckItem.getDepartmentId()))
						dEligibleItemTotal = dEligibleItemTotal.add(dItemPrice);
					else 
						dIneligibleItemTotal = dIneligibleItemTotal.add(dItemPrice);
				}
			}
		}
		
		// Ineligible tax handling
		dEligibleTaxTotal = dEligibleTaxTotal.add(this.getTaxTotal()).add(dInclusiveTaxTotal);
		
		// eligible check discount and extra charge handling
		for(PosCheckDiscount oPosCheckDiscount : this.getCheckDiscountList()) {
			// extra charge handling
			if(oPosCheckDiscount.isUsedForExtraCharge()) {
				if (oEligibleAwdExtraChargeIds.contains(oPosCheckDiscount.getDtypId()))
					dEligibleExtraChargeTotal = dEligibleExtraChargeTotal.add(oPosCheckDiscount.getTotal());
				else
					dIneligibleExtraChargeTotal = dIneligibleExtraChargeTotal.add(oPosCheckDiscount.getTotal());
			}
		}

		// eligible gratuity handling
		for (PosCheckGratuity oPosCheckGratuity: m_oCheck.getCheckGratuityList()){
			if (oEligibleAwdGratuityIds.contains(oPosCheckGratuity.getGratId()))
				dEligibleGratuity = dEligibleGratuity.add(oPosCheckGratuity.getTotal());
			else
				dIneligibleGratuity = dIneligibleGratuity.add(oPosCheckGratuity.getTotal());
		}
		
		// eligible service charge handling
		HashMap<Integer, PosTaxScType> oScTypeList = oScList.getTaxScTypeList();
		for (int i = 1; i <= 5; i++) {
			if(oScTypeList.containsKey(i)) {
				if(oEligibleAwdServiceChargeIds.contains(oScTypeList.get(i).getTxscId()))
					dEligibleScTotal = dEligibleScTotal.add(m_oCheck.getSc(oScTypeList.get(i).getNumber()));
				else
					dIneligibleScTotal = dIneligibleScTotal.add(m_oCheck.getSc(oScTypeList.get(i).getNumber()));
			}
		}
		
//		System.out.println("===============Eligible===================");
//		System.out.println("ItemTotal: " + dEligibleItemTotal.toPlainString());
//		System.out.println("ScTotal: " + dEligibleScTotal.toPlainString());
//		System.out.println("Gratuity: " + dEligibleGratuity.toPlainString());
//		System.out.println("ExtraChargeTotal: " + dEligibleExtraChargeTotal.toPlainString());
//		System.out.println("TaxTotal: " + dEligibleTaxTotal.toPlainString());
//		System.out.println("===============Ineligible=================");
//		System.out.println("ItemTotal: " + dIneligibleItemTotal.toPlainString());
//		System.out.println("ScTotal: " + dIneligibleScTotal.toPlainString());
//		System.out.println("Gratuity: " + dIneligibleGratuity.toPlainString());
//		System.out.println("ExtraChargeTotal: " + dIneligibleExtraChargeTotal.toPlainString());
//		System.out.println("==========================================");
		
		// item rounding
		dEligibleAmount = dEligibleAmount.add(AppGlobal.g_oFuncOutlet.get().roundItemAmountToBigDecimal(dEligibleItemTotal));
		// sc rounding
		dEligibleAmount = dEligibleAmount.add(AppGlobal.g_oFuncOutlet.get().roundSCAmountToBigDecimal(dEligibleScTotal));
		// gratuity rounding
		dEligibleAmount = dEligibleAmount.add(AppGlobal.g_oFuncOutlet.get().roundGratuityAmountToBigDecimal(dEligibleGratuity));
		// extra charge rounding
		dEligibleAmount = dEligibleAmount.add(AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(dEligibleExtraChargeTotal));
		// extra charge rounding
		dEligibleAmount = dEligibleAmount.add(AppGlobal.g_oFuncOutlet.get().roundTaxAmountToBigDecimal(dEligibleTaxTotal));
		// tax rounding
		dEligibleAmount = AppGlobal.g_oFuncOutlet.get().roundPaymentAmountToBigDecimal(dEligibleAmount);
		
//		System.out.println("dEligibleAmount(before rounding): " + dEligibleAmount.toPlainString());
		
		// rounding difference handling
		if(bRoundingDifference) {
			// Ineligible amount calculation for rounding difference use
			dIneligibleAmount = dIneligibleAmount.add(AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(dIneligibleItemTotal));
			dIneligibleAmount = dIneligibleAmount.add(AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(dIneligibleScTotal));
			dIneligibleAmount = dIneligibleAmount.add(AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(dIneligibleGratuity));
			dIneligibleAmount = dIneligibleAmount.add(AppGlobal.g_oFuncOutlet.get().roundDiscAmountToBigDecimal(dIneligibleExtraChargeTotal));
			
			dIneligibleAmount = AppGlobal.g_oFuncOutlet.get().roundPaymentAmountToBigDecimal(dIneligibleAmount);
			
			// assign the rounding difference to eligible amount
			BigDecimal dRoundDifference = this.getCheckTotal().subtract(dEligibleAmount).subtract(dIneligibleAmount);
//			System.out.println("Ineligible Amount: " + dIneligibleAmount.toPlainString());
//			System.out.println("Check Total: " + this.getCheckTotal());
//			System.out.println("Round Difference: " + dRoundDifference.toPlainString());
			dEligibleAmount = dEligibleAmount.add(dRoundDifference);
		}
		
//		System.out.println("dEligibleAmount(after rounding): " + dEligibleAmount.toPlainString());
		return dEligibleAmount;
	}
	
	private void showErrorDialogBox(String sErrMsg) {
		showDialogBox(AppGlobal.g_oLang.get()._("error"), sErrMsg);
	}
	
	private void showWarningDialogBox(String sWarningMsg) {
		showDialogBox(AppGlobal.g_oLang.get()._("warning"), sWarningMsg);
	}
	
	private void showAttentionDialogBox(String sAttentionMsg) {
		showDialogBox(AppGlobal.g_oLang.get()._("attention"), sAttentionMsg);
	}
	
	private void showDialogBox(String sTitle, String sMessage) {
		if (sMessage.isEmpty())
			return;
		
		FormDialogBox oFormDialogBox = new FormDialogBox(AppGlobal.g_oLang.get()._("ok"), null);
		oFormDialogBox.setTitle(sTitle);
		oFormDialogBox.setMessage(sMessage);
		oFormDialogBox.show();
	}
	
	public boolean voidPostingForGeneralV2(PosInterfaceConfig oPosInterfaceConfig, BigDecimal dPreviousPaymentTotal, FuncMembershipInterface oFuncMembershipInterface) {
		// do award cancellation
		if(!oFuncMembershipInterface.membershipVoidPosting(this, this.getCheckPaymentList(), dPreviousPaymentTotal, false, 0)) {
			m_sErrorMessage = oFuncMembershipInterface.getLastErrorMessage();
			if(AppGlobal.g_iLogLevel >= 1)
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "fail to cancel award");
			return false;
		}
		return true;
	}
	
	public boolean pointRefundForGeneralV2(FuncMembershipInterface oFuncMembershipInterface) {
		boolean bEarnPoint = false;
		
		//check whether earned point before
		HashMap<Integer, String> oExtraInfo = this.getCheckExtraInfoValueListWithIndexBySectionVariable(
				PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_EARN);
		if(!oExtraInfo.isEmpty() && !oExtraInfo.get(0).isEmpty())
			bEarnPoint = true;
		
		if(bEarnPoint && !oFuncMembershipInterface.membershipPointRefund(this, null, null, this.m_oCheckPaymentList)){
			//fail to refund point
			m_sErrorMessage = oFuncMembershipInterface.getLastErrorMessage();
			
			if(AppGlobal.g_iLogLevel >= 1)
				AppGlobal.writeDebugLog(this.getClass().getSimpleName(), new Exception().getStackTrace()[0].getMethodName(), "fail to point refund");
			return false;
		}
		
		return true;
	}
	
	public boolean isNegativeCheck() {
		if(m_oCheck == null)
			return false;
		return m_oCheck.isNegativeCheck();
	}
	
	// add or update the specific tax sc reference record
	private void addUpdateTaxScRef(String sBy, String sKey, String sValue) {
		if (this.isTaxScRefExistBySectionVariable(sKey))
			this.updateCheckTaxScRefValue(sBy, sKey, sValue);
		else
			this.addCheckTaxScRef(sBy, sKey, sValue);
	}
	
	// Find the price level of all items on the same check
	// if all items have the same price level, iAllItemPriceLevel is non-zero
	// if any one items have different price level in the check, iAllItemPriceLevel is zero
	private int getAllItemsPriceLevel() {
		int iAllItemPriceLevel = 0;
		boolean bFirstItemOnCheck = true;
		
		for(FuncCheckParty oFuncCheckParty:m_oFuncCheckPartyList) {
			for(List<FuncCheckItem> oItemList:oFuncCheckParty.getWholeItemList()){
				for (FuncCheckItem oFuncCheckItem:oItemList){
					// Skip Child Items (Handled in child item list)
					if (oFuncCheckItem.isSetMenuItem())
						continue;
					
					if (!bFirstItemOnCheck && (iAllItemPriceLevel != oFuncCheckItem.getCheckItem().getPriceLevel())) {
						iAllItemPriceLevel = 0;
						break;
					}
					else
						iAllItemPriceLevel = oFuncCheckItem.getCheckItem().getPriceLevel();
					bFirstItemOnCheck = false;
				}
			}
		}
		
		return iAllItemPriceLevel;
	}
	
	int getPaymentIndexByPaymentId(String sPaymentId) {
		int iPaymentId = -1;
		for (int i = 0; i < m_oCheckPaymentList.size(); i++) {
			if (sPaymentId.equals(m_oCheckPaymentList.get(i).getCpayId())) {
				iPaymentId = i;
				break;
			}
		}
		return iPaymentId;
	}
	
	private void updateUsedDiscountPointOnCheckExtraInfoForInterface() {
		//get discount to point ratio
		PosInterfaceConfig oCheckInterfaceConfig = this.getCheckMembershipInterfaceConfig(InfVendor.KEY_ASCENTIS_CRM);
		if (oCheckInterfaceConfig != null) {
			//get config
			JSONObject oInterfaceSetupPointCalculation = oCheckInterfaceConfig.getInterfaceConfig().optJSONObject("point_calculation").optJSONObject("params");
			//get point ratio from setting
			String sDiscountToPointRatio = "";
			if (oInterfaceSetupPointCalculation.optJSONObject("dollar_to_point_ratio").optString("value") != null && !oInterfaceSetupPointCalculation.optJSONObject("dollar_to_point_ratio").optString("value").isEmpty())
				sDiscountToPointRatio = oInterfaceSetupPointCalculation.optJSONObject("dollar_to_point_ratio").optString("value");
			if (sDiscountToPointRatio == null || sDiscountToPointRatio.isEmpty())
				sDiscountToPointRatio = "1:1";
			//get point decimal
			int iPointDecimal = oInterfaceSetupPointCalculation.optJSONObject("point_decimal").optInt("value", 2);
			String[] sTempArray = sDiscountToPointRatio.split(":");
			BigDecimal dDisCountRation = BigDecimal.ZERO, dPointRation = BigDecimal.ZERO, dDiscountToPointRatio = BigDecimal.ZERO;
			BigDecimal dTargetDiscountAmount = BigDecimal.ZERO;
			BigDecimal dCurrentPointToUse = new BigDecimal("-1");
			
			try {
				//convert Point ratio in decimal
				dDisCountRation = new BigDecimal(sTempArray[0]);
				dPointRation = new BigDecimal(sTempArray[1]);
				dDiscountToPointRatio = dDisCountRation.divide(dPointRation);
				// update used point in extra info
				List<PosCheckDiscount> oCurrentCheckDiscountList = this.getCheckDiscountList();
				for (PosCheckDiscount oPosCheckDiscount : oCurrentCheckDiscountList) {
					String sInterfaceId = oPosCheckDiscount.getCheckExtraInfoValueBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_INTERFACE_ID);
					if (sInterfaceId.equals(String.valueOf(oCheckInterfaceConfig.getInterfaceId()))) {
						dTargetDiscountAmount = oPosCheckDiscount.getTotal().negate();
						dCurrentPointToUse = dTargetDiscountAmount.divide(dDiscountToPointRatio).setScale(iPointDecimal, RoundingMode.DOWN);
						String sSavedPointOfUse = oPosCheckDiscount.getCheckExtraInfoValueBySectionVariable(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE, PosCheckExtraInfo.VARIABLE_POINTS_USE);
						if(new BigDecimal(sSavedPointOfUse).compareTo(dCurrentPointToUse) != 0 && dCurrentPointToUse.compareTo(BigDecimal.ZERO) >= 0 )
							oPosCheckDiscount.updateDiscountExtraInfo(PosCheckExtraInfo.SECTION_MEMBERSHIP_INTERFACE,PosCheckExtraInfo.VARIABLE_POINTS_USE,dCurrentPointToUse.toPlainString(), 0);
					}
				}
			}catch(Exception e) {
				AppGlobal.stack2Log(e);
			}
		}
	}
	
	// check if function is supported with cleaning status
	private boolean isSupportCleaningStatusFunction(String sCurrentFunctionKey) {
		boolean bSupport = false;
		JSONArray oCleaningStatusFunctionList = AppGlobal.g_oFuncStation.get().getSupportCleaningStatusFunctionList();
		if(oCleaningStatusFunctionList != null && oCleaningStatusFunctionList.length() > 0){
			for(int i = 0; i < oCleaningStatusFunctionList.length(); i++){
				JSONObject oCleaningStatusFunctionListJSONObject = oCleaningStatusFunctionList.optJSONObject(i);
				if (oCleaningStatusFunctionListJSONObject == null)
					continue;
				if (oCleaningStatusFunctionListJSONObject.has("function_key") && oCleaningStatusFunctionListJSONObject.optString("function_key").equals(sCurrentFunctionKey)){
					bSupport = true;
					break;
				}
			}
		}
		return bSupport;
	}
	
}
